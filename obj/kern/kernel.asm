
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 f0 18 00 	lgdtl  0x18f018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc ef 18 f0       	mov    $0xf018efbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 b8 74 6e f0 01 	movl   $0x1,0xf06e74b8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 8c 74 6e f0 01 	movl   $0x1,0xf06e748c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 1c 76 6e f0       	mov    $0xf06e761c,%edx
f010006a:	b8 cc 74 65 f0       	mov    $0xf06574cc,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 cc 74 65 f0       	push   $0xf06574cc
f010007e:	e8 02 02 03 00       	call   f0130285 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 f5 5f 00 00       	call   f010608a <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 8e 5b 00 00       	call   f0105c28 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 3c 63 00 00       	call   f01063db <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 7d ce 00 00       	call   f010cf21 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 62 6e 00 00       	call   f0106f1a <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 ef cf 00 00       	call   f010d0b4 <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 07 8e 00 00       	call   f0108ed4 <env_init>
	idt_init();
f01000cd:	e8 b8 a3 00 00       	call   f010a48a <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 52 cf 00 00       	call   f010d02e <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 2d cf 00 00       	call   f010d016 <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 4d cf 00 00       	call   f010d046 <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 a1 59 00 00       	call   f0105aa2 <pic_init>
	sched_init() ;
f0100101:	e8 45 46 00 00       	call   f010474b <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 00 23 13 f0       	push   $0xf0132300
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 2c 23 13 f0       	push   $0xf013232c
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 51 23 13 f0       	push   $0xf0132351
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 58 23 13 f0       	push   $0xf0132358
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 a0 23 13 f0       	push   $0xf01323a0
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 e8 23 13 f0       	push   $0xf01323e8
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 a0 23 13 f0       	push   $0xf01323a0
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 58 23 13 f0       	push   $0xf0132358
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 2d 24 13 f0       	push   $0xf013242d
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 e0 74 65 f0       	mov    %eax,0xf06574e0

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 32 24 13 f0       	push   $0xf0132432
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 4b 24 13 f0       	push   $0xf013244b
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 a9 8b 00 00       	call   f0108db9 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 d6 43 00 00       	call   f01045eb <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 e0 74 65 f0       	mov    %eax,0xf06574e0

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 32 24 13 f0       	push   $0xf0132432
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 4b 24 13 f0       	push   $0xf013244b
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 ec 50 00 00       	call   f0105355 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 92 4e 00 00       	call   f0105115 <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 60 43 00 00       	call   f01045eb <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 e0 74 65 f0       	mov    %eax,0xf06574e0

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 32 24 13 f0       	push   $0xf0132432
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 4b 24 13 f0       	push   $0xf013244b
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 c7 46 00 00       	call   f01049c5 <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 b4 74 6e f0 00 	movl   $0x0,0xf06e74b4
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 4d 24 13 f0       	push   $0xf013244d
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 4b 24 13 f0       	push   $0xf013244b
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 00 75 65 f0       	mov    0xf0657500,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 00 75 65 f0       	mov    %eax,0xf0657500
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 04 75 65 f0 b4 	movl   $0x3b4,0xf0657504
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 04 75 65 f0 d4 	movl   $0x3d4,0xf0657504
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 08 75 65 f0       	mov    %eax,0xf0657508
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 08 75 65 f0    	mov    0xf0657508,%edx
f0100690:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d 0c 75 65 f0 	mov    0xf065750c,%cx
f01006c3:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d 08 75 65 f0    	mov    0xf0657508,%ecx
f010072d:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 0c 75 65 f0 	mov    %dx,0xf065750c
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 08 75 65 f0       	mov    0xf0657508,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 08 75 65 f0       	mov    0xf0657508,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 3c fb 02 00       	call   f01302b5 <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 08 75 65 f0    	mov    0xf0657508,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 04 75 65 f0    	mov    0xf0657504,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 04 75 65 f0    	mov    0xf0657504,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 28 77 65 f0       	mov    %eax,0xf0657728
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 f0 18 f0    	mov    -0xfe70fe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 28 77 65 f0       	mov    %eax,0xf0657728
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 28 77 65 f0       	mov    %eax,0xf0657728
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 f0 18 f0    	mov    -0xfe70fe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 28 77 65 f0       	mov    %eax,0xf0657728
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 f1 18 f0    	mov    -0xfe70ee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 28 77 65 f0       	mov    %eax,0xf0657728

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 f5 18 f0 	mov    -0xfe70ae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 68 24 13 f0       	push   $0xf0132468
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 24 77 65 f0    	mov    %edx,0xf0657724
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 20 75 65 f0    	mov    %dl,-0xf9a8ae0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 24 77 65 f0 00 	movl   $0x0,0xf0657724
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 20 77 65 f0    	mov    0xf0657720,%edx
f0100a22:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 20 77 65 f0    	mov    %edx,0xf0657720
f0100a39:	8a 80 20 75 65 f0    	mov    -0xf9a8ae0(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 20 77 65 f0 00 	movl   $0x0,0xf0657720
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 00 75 65 f0       	mov    0xf0657500,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 24 77 65 f0    	mov    %edx,0xf0657724
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 20 75 65 f0    	mov    %dl,-0xf9a8ae0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 24 77 65 f0 00 	movl   $0x0,0xf0657724
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 24 77 65 f0    	mov    %edx,0xf0657724
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 20 75 65 f0    	mov    %dl,-0xf9a8ae0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 24 77 65 f0 00 	movl   $0x0,0xf0657724
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 20 77 65 f0    	mov    0xf0657720,%edx
f0100b12:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 20 77 65 f0    	mov    %edx,0xf0657720
f0100b29:	8a 80 20 75 65 f0    	mov    -0xf9a8ae0(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 20 77 65 f0 00 	movl   $0x0,0xf0657720
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 00 75 65 f0       	mov    0xf0657500,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 74 24 13 f0       	push   $0xf0132474
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 c4 ed 02 00       	call   f012f9e9 <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 91 24 13 f0       	push   $0xf0132491
f0100c6b:	e8 21 f2 02 00       	call   f012fe91 <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100c98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100c9b:	50                   	push   %eax
f0100c9c:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100c9f:	50                   	push   %eax
f0100ca0:	68 97 24 13 f0       	push   $0xf0132497
f0100ca5:	ff 75 08             	pushl  0x8(%ebp)
f0100ca8:	e8 1e fa 02 00       	call   f01306cb <strsplit>
f0100cad:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100cb3:	85 c0                	test   %eax,%eax
f0100cb5:	75 0a                	jne    f0100cc1 <execute_command+0x32>
		return 0;
f0100cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cbc:	e9 37 01 00 00       	jmp    f0100df8 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100cc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ccf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100cd6:	e9 8c 00 00 00       	jmp    f0100d67 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cde:	89 d0                	mov    %edx,%eax
f0100ce0:	01 c0                	add    %eax,%eax
f0100ce2:	01 d0                	add    %edx,%eax
f0100ce4:	c1 e0 02             	shl    $0x2,%eax
f0100ce7:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100cec:	8b 10                	mov    (%eax),%edx
f0100cee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100cf1:	83 ec 08             	sub    $0x8,%esp
f0100cf4:	52                   	push   %edx
f0100cf5:	50                   	push   %eax
f0100cf6:	e8 a8 f4 02 00       	call   f01301a3 <strcmp>
f0100cfb:	83 c4 10             	add    $0x10,%esp
f0100cfe:	85 c0                	test   %eax,%eax
f0100d00:	75 09                	jne    f0100d0b <execute_command+0x7c>
		{
			command_found = 1;
f0100d02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d09:	eb 6c                	jmp    f0100d77 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d0e:	83 ec 0c             	sub    $0xc,%esp
f0100d11:	50                   	push   %eax
f0100d12:	e8 80 f3 02 00       	call   f0130097 <strlen>
f0100d17:	83 c4 10             	add    $0x10,%esp
f0100d1a:	89 c1                	mov    %eax,%ecx
f0100d1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d1f:	89 d0                	mov    %edx,%eax
f0100d21:	01 c0                	add    %eax,%eax
f0100d23:	01 d0                	add    %edx,%eax
f0100d25:	c1 e0 02             	shl    $0x2,%eax
f0100d28:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100d2d:	8b 10                	mov    (%eax),%edx
f0100d2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d32:	83 ec 04             	sub    $0x4,%esp
f0100d35:	51                   	push   %ecx
f0100d36:	52                   	push   %edx
f0100d37:	50                   	push   %eax
f0100d38:	e8 9e f4 02 00       	call   f01301db <strncmp>
f0100d3d:	83 c4 10             	add    $0x10,%esp
f0100d40:	85 c0                	test   %eax,%eax
f0100d42:	75 20                	jne    f0100d64 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d47:	89 d0                	mov    %edx,%eax
f0100d49:	01 c0                	add    %eax,%eax
f0100d4b:	01 d0                	add    %edx,%eax
f0100d4d:	c1 e0 02             	shl    $0x2,%eax
f0100d50:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100d55:	8b 10                	mov    (%eax),%edx
f0100d57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d5a:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100d61:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d64:	ff 45 f0             	incl   -0x10(%ebp)
f0100d67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d6a:	a1 ac f8 18 f0       	mov    0xf018f8ac,%eax
f0100d6f:	39 c2                	cmp    %eax,%edx
f0100d71:	0f 82 64 ff ff ff    	jb     f0100cdb <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100d77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d7b:	74 2b                	je     f0100da8 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d80:	89 d0                	mov    %edx,%eax
f0100d82:	01 c0                	add    %eax,%eax
f0100d84:	01 d0                	add    %edx,%eax
f0100d86:	c1 e0 02             	shl    $0x2,%eax
f0100d89:	05 48 f5 18 f0       	add    $0xf018f548,%eax
f0100d8e:	8b 00                	mov    (%eax),%eax
f0100d90:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100d93:	83 ec 08             	sub    $0x8,%esp
f0100d96:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100d99:	51                   	push   %ecx
f0100d9a:	52                   	push   %edx
f0100d9b:	ff d0                	call   *%eax
f0100d9d:	83 c4 10             	add    $0x10,%esp
f0100da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100da3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100da6:	eb 50                	jmp    f0100df8 <execute_command+0x169>
	}
	else if (count == 0)
f0100da8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100dac:	75 16                	jne    f0100dc4 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100dae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100db1:	83 ec 08             	sub    $0x8,%esp
f0100db4:	50                   	push   %eax
f0100db5:	68 9c 24 13 f0       	push   $0xf013249c
f0100dba:	e8 6e fe ff ff       	call   f0100c2d <cprintf>
f0100dbf:	83 c4 10             	add    $0x10,%esp
f0100dc2:	eb 2f                	jmp    f0100df3 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100dc4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100dcb:	eb 1e                	jmp    f0100deb <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100dcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dd0:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100dd7:	83 ec 08             	sub    $0x8,%esp
f0100dda:	50                   	push   %eax
f0100ddb:	68 b2 24 13 f0       	push   $0xf01324b2
f0100de0:	e8 48 fe ff ff       	call   f0100c2d <cprintf>
f0100de5:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100de8:	ff 45 e8             	incl   -0x18(%ebp)
f0100deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100df1:	7c da                	jl     f0100dcd <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df8:	c9                   	leave  
f0100df9:	c3                   	ret    

f0100dfa <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100dfa:	55                   	push   %ebp
f0100dfb:	89 e5                	mov    %esp,%ebp
f0100dfd:	c7 05 b8 74 6e f0 00 	movl   $0x0,0xf06e74b8
f0100e04:	00 00 00 
f0100e07:	90                   	nop
f0100e08:	5d                   	pop    %ebp
f0100e09:	c3                   	ret    

f0100e0a <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e0a:	55                   	push   %ebp
f0100e0b:	89 e5                	mov    %esp,%ebp
f0100e0d:	c7 05 b8 74 6e f0 01 	movl   $0x1,0xf06e74b8
f0100e14:	00 00 00 
f0100e17:	90                   	nop
f0100e18:	5d                   	pop    %ebp
f0100e19:	c3                   	ret    

f0100e1a <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e1a:	55                   	push   %ebp
f0100e1b:	89 e5                	mov    %esp,%ebp
f0100e1d:	c7 05 b8 74 6e f0 02 	movl   $0x2,0xf06e74b8
f0100e24:	00 00 00 
f0100e27:	90                   	nop
f0100e28:	5d                   	pop    %ebp
f0100e29:	c3                   	ret    

f0100e2a <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e2a:	55                   	push   %ebp
f0100e2b:	89 e5                	mov    %esp,%ebp
f0100e2d:	c7 05 b8 74 6e f0 03 	movl   $0x3,0xf06e74b8
f0100e34:	00 00 00 
f0100e37:	90                   	nop
f0100e38:	5d                   	pop    %ebp
f0100e39:	c3                   	ret    

f0100e3a <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e3a:	55                   	push   %ebp
f0100e3b:	89 e5                	mov    %esp,%ebp
f0100e3d:	c7 05 b8 74 6e f0 04 	movl   $0x4,0xf06e74b8
f0100e44:	00 00 00 
f0100e47:	90                   	nop
f0100e48:	5d                   	pop    %ebp
f0100e49:	c3                   	ret    

f0100e4a <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e4a:	55                   	push   %ebp
f0100e4b:	89 e5                	mov    %esp,%ebp
f0100e4d:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e52:	85 c0                	test   %eax,%eax
f0100e54:	75 04                	jne    f0100e5a <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e56:	b0 01                	mov    $0x1,%al
f0100e58:	eb 02                	jmp    f0100e5c <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e5a:	b0 00                	mov    $0x0,%al
f0100e5c:	5d                   	pop    %ebp
f0100e5d:	c3                   	ret    

f0100e5e <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e5e:	55                   	push   %ebp
f0100e5f:	89 e5                	mov    %esp,%ebp
f0100e61:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e66:	83 f8 01             	cmp    $0x1,%eax
f0100e69:	75 04                	jne    f0100e6f <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100e6b:	b0 01                	mov    $0x1,%al
f0100e6d:	eb 02                	jmp    f0100e71 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100e6f:	b0 00                	mov    $0x0,%al
f0100e71:	5d                   	pop    %ebp
f0100e72:	c3                   	ret    

f0100e73 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100e73:	55                   	push   %ebp
f0100e74:	89 e5                	mov    %esp,%ebp
f0100e76:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e7b:	83 f8 02             	cmp    $0x2,%eax
f0100e7e:	75 04                	jne    f0100e84 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100e80:	b0 01                	mov    $0x1,%al
f0100e82:	eb 02                	jmp    f0100e86 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100e84:	b0 00                	mov    $0x0,%al
f0100e86:	5d                   	pop    %ebp
f0100e87:	c3                   	ret    

f0100e88 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e88:	55                   	push   %ebp
f0100e89:	89 e5                	mov    %esp,%ebp
f0100e8b:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e90:	83 f8 03             	cmp    $0x3,%eax
f0100e93:	75 04                	jne    f0100e99 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100e95:	b0 01                	mov    $0x1,%al
f0100e97:	eb 02                	jmp    f0100e9b <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100e99:	b0 00                	mov    $0x0,%al
f0100e9b:	5d                   	pop    %ebp
f0100e9c:	c3                   	ret    

f0100e9d <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100e9d:	55                   	push   %ebp
f0100e9e:	89 e5                	mov    %esp,%ebp
f0100ea0:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100ea5:	83 f8 04             	cmp    $0x4,%eax
f0100ea8:	75 04                	jne    f0100eae <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eaa:	b0 01                	mov    $0x1,%al
f0100eac:	eb 02                	jmp    f0100eb0 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eae:	b0 00                	mov    $0x0,%al
f0100eb0:	5d                   	pop    %ebp
f0100eb1:	c3                   	ret    

f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100eb2:	55                   	push   %ebp
f0100eb3:	89 e5                	mov    %esp,%ebp
f0100eb5:	c7 05 8c 74 6e f0 01 	movl   $0x1,0xf06e748c
f0100ebc:	00 00 00 
f0100ebf:	90                   	nop
f0100ec0:	5d                   	pop    %ebp
f0100ec1:	c3                   	ret    

f0100ec2 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100ec2:	55                   	push   %ebp
f0100ec3:	89 e5                	mov    %esp,%ebp
f0100ec5:	c7 05 8c 74 6e f0 02 	movl   $0x2,0xf06e748c
f0100ecc:	00 00 00 
f0100ecf:	90                   	nop
f0100ed0:	5d                   	pop    %ebp
f0100ed1:	c3                   	ret    

f0100ed2 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100ed2:	55                   	push   %ebp
f0100ed3:	89 e5                	mov    %esp,%ebp
f0100ed5:	c7 05 8c 74 6e f0 03 	movl   $0x3,0xf06e748c
f0100edc:	00 00 00 
f0100edf:	90                   	nop
f0100ee0:	5d                   	pop    %ebp
f0100ee1:	c3                   	ret    

f0100ee2 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100ee2:	55                   	push   %ebp
f0100ee3:	89 e5                	mov    %esp,%ebp
f0100ee5:	c7 05 8c 74 6e f0 04 	movl   $0x4,0xf06e748c
f0100eec:	00 00 00 
f0100eef:	90                   	nop
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100efa:	83 f8 01             	cmp    $0x1,%eax
f0100efd:	75 04                	jne    f0100f03 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100f0f:	83 f8 02             	cmp    $0x2,%eax
f0100f12:	75 04                	jne    f0100f18 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f14:	b0 01                	mov    $0x1,%al
f0100f16:	eb 02                	jmp    f0100f1a <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f18:	b0 00                	mov    $0x0,%al
f0100f1a:	5d                   	pop    %ebp
f0100f1b:	c3                   	ret    

f0100f1c <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f1c:	55                   	push   %ebp
f0100f1d:	89 e5                	mov    %esp,%ebp
f0100f1f:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100f24:	83 f8 03             	cmp    $0x3,%eax
f0100f27:	75 04                	jne    f0100f2d <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f29:	b0 01                	mov    $0x1,%al
f0100f2b:	eb 02                	jmp    f0100f2f <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f2d:	b0 00                	mov    $0x0,%al
f0100f2f:	5d                   	pop    %ebp
f0100f30:	c3                   	ret    

f0100f31 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f31:	55                   	push   %ebp
f0100f32:	89 e5                	mov    %esp,%ebp
f0100f34:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100f39:	83 f8 04             	cmp    $0x4,%eax
f0100f3c:	75 04                	jne    f0100f42 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f3e:	b0 01                	mov    $0x1,%al
f0100f40:	eb 02                	jmp    f0100f44 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f42:	b0 00                	mov    $0x0,%al
f0100f44:	5d                   	pop    %ebp
f0100f45:	c3                   	ret    

f0100f46 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f46:	55                   	push   %ebp
f0100f47:	89 e5                	mov    %esp,%ebp
f0100f49:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f4f:	c1 e8 0c             	shr    $0xc,%eax
f0100f52:	89 c2                	mov    %eax,%edx
f0100f54:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0100f59:	39 c2                	cmp    %eax,%edx
f0100f5b:	72 14                	jb     f0100f71 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f5d:	83 ec 04             	sub    $0x4,%esp
f0100f60:	68 b8 24 13 f0       	push   $0xf01324b8
f0100f65:	6a 55                	push   $0x55
f0100f67:	68 e0 24 13 f0       	push   $0xf01324e0
f0100f6c:	e8 35 f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100f71:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0100f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f7a:	c1 e8 0c             	shr    $0xc,%eax
f0100f7d:	89 c1                	mov    %eax,%ecx
f0100f7f:	89 c8                	mov    %ecx,%eax
f0100f81:	01 c0                	add    %eax,%eax
f0100f83:	01 c8                	add    %ecx,%eax
f0100f85:	c1 e0 03             	shl    $0x3,%eax
f0100f88:	01 d0                	add    %edx,%eax
}
f0100f8a:	c9                   	leave  
f0100f8b:	c3                   	ret    

f0100f8c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100f8c:	55                   	push   %ebp
f0100f8d:	89 e5                	mov    %esp,%ebp
f0100f8f:	53                   	push   %ebx
f0100f90:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f9a:	eb 3b                	jmp    f0100fd7 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f9f:	89 d0                	mov    %edx,%eax
f0100fa1:	01 c0                	add    %eax,%eax
f0100fa3:	01 d0                	add    %edx,%eax
f0100fa5:	c1 e0 02             	shl    $0x2,%eax
f0100fa8:	05 44 f5 18 f0       	add    $0xf018f544,%eax
f0100fad:	8b 10                	mov    (%eax),%edx
f0100faf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100fb2:	89 c8                	mov    %ecx,%eax
f0100fb4:	01 c0                	add    %eax,%eax
f0100fb6:	01 c8                	add    %ecx,%eax
f0100fb8:	c1 e0 02             	shl    $0x2,%eax
f0100fbb:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100fc0:	8b 00                	mov    (%eax),%eax
f0100fc2:	83 ec 04             	sub    $0x4,%esp
f0100fc5:	52                   	push   %edx
f0100fc6:	50                   	push   %eax
f0100fc7:	68 5a 33 13 f0       	push   $0xf013335a
f0100fcc:	e8 5c fc ff ff       	call   f0100c2d <cprintf>
f0100fd1:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0100fd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fda:	a1 ac f8 18 f0       	mov    0xf018f8ac,%eax
f0100fdf:	39 c2                	cmp    %eax,%edx
f0100fe1:	72 b9                	jb     f0100f9c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100fe3:	83 ec 0c             	sub    $0xc,%esp
f0100fe6:	68 63 33 13 f0       	push   $0xf0133363
f0100feb:	e8 3d fc ff ff       	call   f0100c2d <cprintf>
f0100ff0:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ffa:	eb 42                	jmp    f010103e <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0100ffc:	8b 0d c0 fc 18 f0    	mov    0xf018fcc0,%ecx
f0101002:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101005:	89 d0                	mov    %edx,%eax
f0101007:	01 c0                	add    %eax,%eax
f0101009:	01 d0                	add    %edx,%eax
f010100b:	c1 e0 02             	shl    $0x2,%eax
f010100e:	01 c8                	add    %ecx,%eax
f0101010:	8b 50 04             	mov    0x4(%eax),%edx
f0101013:	8b 1d c0 fc 18 f0    	mov    0xf018fcc0,%ebx
f0101019:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010101c:	89 c8                	mov    %ecx,%eax
f010101e:	01 c0                	add    %eax,%eax
f0101020:	01 c8                	add    %ecx,%eax
f0101022:	c1 e0 02             	shl    $0x2,%eax
f0101025:	01 d8                	add    %ebx,%eax
f0101027:	8b 00                	mov    (%eax),%eax
f0101029:	83 ec 04             	sub    $0x4,%esp
f010102c:	52                   	push   %edx
f010102d:	50                   	push   %eax
f010102e:	68 78 33 13 f0       	push   $0xf0133378
f0101033:	e8 f5 fb ff ff       	call   f0100c2d <cprintf>
f0101038:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010103b:	ff 45 f4             	incl   -0xc(%ebp)
f010103e:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f0101043:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101046:	7c b4                	jl     f0100ffc <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101048:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010104d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101050:	c9                   	leave  
f0101051:	c3                   	ret    

f0101052 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101052:	55                   	push   %ebp
f0101053:	89 e5                	mov    %esp,%ebp
f0101055:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101058:	83 ec 0c             	sub    $0xc,%esp
f010105b:	68 94 33 13 f0       	push   $0xf0133394
f0101060:	e8 c8 fb ff ff       	call   f0100c2d <cprintf>
f0101065:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101068:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010106d:	83 ec 04             	sub    $0x4,%esp
f0101070:	50                   	push   %eax
f0101071:	68 0c 00 10 f0       	push   $0xf010000c
f0101076:	68 b0 33 13 f0       	push   $0xf01333b0
f010107b:	e8 ad fb ff ff       	call   f0100c2d <cprintf>
f0101080:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101083:	b8 f5 22 13 00       	mov    $0x1322f5,%eax
f0101088:	83 ec 04             	sub    $0x4,%esp
f010108b:	50                   	push   %eax
f010108c:	68 f5 22 13 f0       	push   $0xf01322f5
f0101091:	68 ec 33 13 f0       	push   $0xf01333ec
f0101096:	e8 92 fb ff ff       	call   f0100c2d <cprintf>
f010109b:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010109e:	b8 cc 74 65 00       	mov    $0x6574cc,%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	50                   	push   %eax
f01010a7:	68 cc 74 65 f0       	push   $0xf06574cc
f01010ac:	68 28 34 13 f0       	push   $0xf0133428
f01010b1:	e8 77 fb ff ff       	call   f0100c2d <cprintf>
f01010b6:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010b9:	b8 1c 76 6e 00       	mov    $0x6e761c,%eax
f01010be:	83 ec 04             	sub    $0x4,%esp
f01010c1:	50                   	push   %eax
f01010c2:	68 1c 76 6e f0       	push   $0xf06e761c
f01010c7:	68 70 34 13 f0       	push   $0xf0133470
f01010cc:	e8 5c fb ff ff       	call   f0100c2d <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01010d4:	b8 1c 76 6e f0       	mov    $0xf06e761c,%eax
f01010d9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01010df:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01010e4:	29 c2                	sub    %eax,%edx
f01010e6:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01010e8:	85 c0                	test   %eax,%eax
f01010ea:	79 05                	jns    f01010f1 <command_kernel_info+0x9f>
f01010ec:	05 ff 03 00 00       	add    $0x3ff,%eax
f01010f1:	c1 f8 0a             	sar    $0xa,%eax
f01010f4:	83 ec 08             	sub    $0x8,%esp
f01010f7:	50                   	push   %eax
f01010f8:	68 ac 34 13 f0       	push   $0xf01334ac
f01010fd:	e8 2b fb ff ff       	call   f0100c2d <cprintf>
f0101102:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010110a:	c9                   	leave  
f010110b:	c3                   	ret    

f010110c <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f010110c:	55                   	push   %ebp
f010110d:	89 e5                	mov    %esp,%ebp
f010110f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101112:	83 ec 04             	sub    $0x4,%esp
f0101115:	68 d8 34 13 f0       	push   $0xf01334d8
f010111a:	68 b0 00 00 00       	push   $0xb0
f010111f:	68 f9 34 13 f0       	push   $0xf01334f9
f0101124:	e8 7d f0 ff ff       	call   f01001a6 <_panic>

f0101129 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101129:	55                   	push   %ebp
f010112a:	89 e5                	mov    %esp,%ebp
f010112c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010112f:	83 ec 04             	sub    $0x4,%esp
f0101132:	68 d8 34 13 f0       	push   $0xf01334d8
f0101137:	68 ba 00 00 00       	push   $0xba
f010113c:	68 f9 34 13 f0       	push   $0xf01334f9
f0101141:	e8 60 f0 ff ff       	call   f01001a6 <_panic>

f0101146 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101146:	55                   	push   %ebp
f0101147:	89 e5                	mov    %esp,%ebp
f0101149:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010114c:	83 ec 04             	sub    $0x4,%esp
f010114f:	68 d8 34 13 f0       	push   $0xf01334d8
f0101154:	68 c3 00 00 00       	push   $0xc3
f0101159:	68 f9 34 13 f0       	push   $0xf01334f9
f010115e:	e8 43 f0 ff ff       	call   f01001a6 <_panic>

f0101163 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101163:	55                   	push   %ebp
f0101164:	89 e5                	mov    %esp,%ebp
f0101166:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	68 d8 34 13 f0       	push   $0xf01334d8
f0101171:	68 cf 00 00 00       	push   $0xcf
f0101176:	68 f9 34 13 f0       	push   $0xf01334f9
f010117b:	e8 26 f0 ff ff       	call   f01001a6 <_panic>

f0101180 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101180:	55                   	push   %ebp
f0101181:	89 e5                	mov    %esp,%ebp
f0101183:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101186:	83 ec 04             	sub    $0x4,%esp
f0101189:	68 d8 34 13 f0       	push   $0xf01334d8
f010118e:	68 d8 00 00 00       	push   $0xd8
f0101193:	68 f9 34 13 f0       	push   $0xf01334f9
f0101198:	e8 09 f0 ff ff       	call   f01001a6 <_panic>

f010119d <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010119d:	55                   	push   %ebp
f010119e:	89 e5                	mov    %esp,%ebp
f01011a0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a3:	83 ec 04             	sub    $0x4,%esp
f01011a6:	68 d8 34 13 f0       	push   $0xf01334d8
f01011ab:	68 e1 00 00 00       	push   $0xe1
f01011b0:	68 f9 34 13 f0       	push   $0xf01334f9
f01011b5:	e8 ec ef ff ff       	call   f01001a6 <_panic>

f01011ba <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011ba:	55                   	push   %ebp
f01011bb:	89 e5                	mov    %esp,%ebp
f01011bd:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c0:	83 ec 04             	sub    $0x4,%esp
f01011c3:	68 d8 34 13 f0       	push   $0xf01334d8
f01011c8:	68 ee 00 00 00       	push   $0xee
f01011cd:	68 f9 34 13 f0       	push   $0xf01334f9
f01011d2:	e8 cf ef ff ff       	call   f01001a6 <_panic>

f01011d7 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01011d7:	55                   	push   %ebp
f01011d8:	89 e5                	mov    %esp,%ebp
f01011da:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01011dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011e0:	83 c0 04             	add    $0x4,%eax
f01011e3:	8b 00                	mov    (%eax),%eax
f01011e5:	83 ec 04             	sub    $0x4,%esp
f01011e8:	6a 10                	push   $0x10
f01011ea:	6a 00                	push   $0x0
f01011ec:	50                   	push   %eax
f01011ed:	e8 05 f2 02 00       	call   f01303f7 <strtol>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01011f8:	83 ec 0c             	sub    $0xc,%esp
f01011fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01011fe:	50                   	push   %eax
f01011ff:	e8 a6 55 00 00       	call   f01067aa <allocate_frame>
f0101204:	83 c4 10             	add    $0x10,%esp
f0101207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010120a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010120d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0101212:	6a 06                	push   $0x6
f0101214:	ff 75 f4             	pushl  -0xc(%ebp)
f0101217:	52                   	push   %edx
f0101218:	50                   	push   %eax
f0101219:	e8 24 59 00 00       	call   f0106b42 <map_frame>
f010121e:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101226:	c9                   	leave  
f0101227:	c3                   	ret    

f0101228 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101228:	55                   	push   %ebp
f0101229:	89 e5                	mov    %esp,%ebp
f010122b:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010122e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101231:	83 c0 04             	add    $0x4,%eax
f0101234:	8b 00                	mov    (%eax),%eax
f0101236:	83 ec 04             	sub    $0x4,%esp
f0101239:	6a 10                	push   $0x10
f010123b:	6a 00                	push   $0x0
f010123d:	50                   	push   %eax
f010123e:	e8 b4 f1 02 00       	call   f01303f7 <strtol>
f0101243:	83 c4 10             	add    $0x10,%esp
f0101246:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101249:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010124e:	83 ec 08             	sub    $0x8,%esp
f0101251:	ff 75 f4             	pushl  -0xc(%ebp)
f0101254:	50                   	push   %eax
f0101255:	e8 17 5a 00 00       	call   f0106c71 <unmap_frame>
f010125a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010125d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101262:	c9                   	leave  
f0101263:	c3                   	ret    

f0101264 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101264:	55                   	push   %ebp
f0101265:	89 e5                	mov    %esp,%ebp
f0101267:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010126a:	83 ec 04             	sub    $0x4,%esp
f010126d:	68 d8 34 13 f0       	push   $0xf01334d8
f0101272:	68 18 01 00 00       	push   $0x118
f0101277:	68 f9 34 13 f0       	push   $0xf01334f9
f010127c:	e8 25 ef ff ff       	call   f01001a6 <_panic>

f0101281 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101281:	55                   	push   %ebp
f0101282:	89 e5                	mov    %esp,%ebp
f0101284:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101287:	83 ec 04             	sub    $0x4,%esp
f010128a:	68 d8 34 13 f0       	push   $0xf01334d8
f010128f:	68 23 01 00 00       	push   $0x123
f0101294:	68 f9 34 13 f0       	push   $0xf01334f9
f0101299:	e8 08 ef ff ff       	call   f01001a6 <_panic>

f010129e <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010129e:	55                   	push   %ebp
f010129f:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012a6:	5d                   	pop    %ebp
f01012a7:	c3                   	ret    

f01012a8 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012a8:	55                   	push   %ebp
f01012a9:	89 e5                	mov    %esp,%ebp
f01012ab:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012ae:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012b2:	75 37                	jne    f01012eb <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012b7:	83 c0 04             	add    $0x4,%eax
f01012ba:	8b 00                	mov    (%eax),%eax
f01012bc:	83 ec 04             	sub    $0x4,%esp
f01012bf:	6a 10                	push   $0x10
f01012c1:	6a 00                	push   $0x0
f01012c3:	50                   	push   %eax
f01012c4:	e8 2e f1 02 00       	call   f01303f7 <strtol>
f01012c9:	83 c4 10             	add    $0x10,%esp
f01012cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01012cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012d2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01012d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012d8:	83 c0 08             	add    $0x8,%eax
f01012db:	8b 00                	mov    (%eax),%eax
f01012dd:	8a 00                	mov    (%eax),%al
f01012df:	88 c2                	mov    %al,%dl
f01012e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012e4:	88 10                	mov    %dl,(%eax)
f01012e6:	e9 b9 00 00 00       	jmp    f01013a4 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01012eb:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01012ef:	0f 85 9f 00 00 00    	jne    f0101394 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01012f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f8:	83 c0 04             	add    $0x4,%eax
f01012fb:	8b 00                	mov    (%eax),%eax
f01012fd:	83 ec 04             	sub    $0x4,%esp
f0101300:	6a 0a                	push   $0xa
f0101302:	6a 00                	push   $0x0
f0101304:	50                   	push   %eax
f0101305:	e8 ed f0 02 00       	call   f01303f7 <strtol>
f010130a:	83 c4 10             	add    $0x10,%esp
f010130d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101310:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 00                	push   $0x0
f010131c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	ff 75 f4             	pushl  -0xc(%ebp)
f0101323:	e8 b0 7a 00 00       	call   f0108dd8 <envid2env>
f0101328:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010132b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132e:	83 c0 08             	add    $0x8,%eax
f0101331:	8b 00                	mov    (%eax),%eax
f0101333:	83 ec 04             	sub    $0x4,%esp
f0101336:	6a 10                	push   $0x10
f0101338:	6a 00                	push   $0x0
f010133a:	50                   	push   %eax
f010133b:	e8 b7 f0 02 00       	call   f01303f7 <strtol>
f0101340:	83 c4 10             	add    $0x10,%esp
f0101343:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101346:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101349:	85 c0                	test   %eax,%eax
f010134b:	75 07                	jne    f0101354 <command_writeusermem+0xac>
f010134d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101352:	eb 55                	jmp    f01013a9 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101354:	0f 20 d8             	mov    %cr3,%eax
f0101357:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010135a:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010135d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101360:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101363:	8b 40 60             	mov    0x60(%eax),%eax
f0101366:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101369:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010136c:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010136f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101372:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101375:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101378:	83 c0 0c             	add    $0xc,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	8a 00                	mov    (%eax),%al
f010137f:	88 c2                	mov    %al,%dl
f0101381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101384:	88 10                	mov    %dl,(%eax)
f0101386:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010138c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010138f:	0f 22 d8             	mov    %eax,%cr3
f0101392:	eb 10                	jmp    f01013a4 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101394:	83 ec 0c             	sub    $0xc,%esp
f0101397:	68 10 35 13 f0       	push   $0xf0133510
f010139c:	e8 8c f8 ff ff       	call   f0100c2d <cprintf>
f01013a1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013a9:	c9                   	leave  
f01013aa:	c3                   	ret    

f01013ab <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013ab:	55                   	push   %ebp
f01013ac:	89 e5                	mov    %esp,%ebp
f01013ae:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b4:	83 c0 04             	add    $0x4,%eax
f01013b7:	8b 00                	mov    (%eax),%eax
f01013b9:	83 ec 04             	sub    $0x4,%esp
f01013bc:	6a 10                	push   $0x10
f01013be:	6a 00                	push   $0x0
f01013c0:	50                   	push   %eax
f01013c1:	e8 31 f0 02 00       	call   f01303f7 <strtol>
f01013c6:	83 c4 10             	add    $0x10,%esp
f01013c9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01013ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01013d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d4:	83 c0 08             	add    $0x8,%eax
f01013d7:	8b 00                	mov    (%eax),%eax
f01013d9:	83 ec 04             	sub    $0x4,%esp
f01013dc:	6a 0a                	push   $0xa
f01013de:	6a 00                	push   $0x0
f01013e0:	50                   	push   %eax
f01013e1:	e8 11 f0 02 00       	call   f01303f7 <strtol>
f01013e6:	83 c4 10             	add    $0x10,%esp
f01013e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01013ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01013f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f6:	83 c0 0c             	add    $0xc,%eax
f01013f9:	8b 00                	mov    (%eax),%eax
f01013fb:	83 ec 0c             	sub    $0xc,%esp
f01013fe:	50                   	push   %eax
f01013ff:	e8 93 ec 02 00       	call   f0130097 <strlen>
f0101404:	83 c4 10             	add    $0x10,%esp
f0101407:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010140a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101411:	eb 30                	jmp    f0101443 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101413:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010141a:	eb 1c                	jmp    f0101438 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f010141c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010141f:	83 c0 0c             	add    $0xc,%eax
f0101422:	8b 10                	mov    (%eax),%edx
f0101424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101427:	01 d0                	add    %edx,%eax
f0101429:	8a 00                	mov    (%eax),%al
f010142b:	88 c2                	mov    %al,%dl
f010142d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101430:	88 10                	mov    %dl,(%eax)
			address++;
f0101432:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101435:	ff 45 ec             	incl   -0x14(%ebp)
f0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010143b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010143e:	7c dc                	jl     f010141c <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101440:	ff 45 f0             	incl   -0x10(%ebp)
f0101443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101446:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101449:	7c c8                	jl     f0101413 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010144b:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101450:	c9                   	leave  
f0101451:	c3                   	ret    

f0101452 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101452:	55                   	push   %ebp
f0101453:	89 e5                	mov    %esp,%ebp
f0101455:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101458:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010145c:	75 42                	jne    f01014a0 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010145e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101461:	83 c0 04             	add    $0x4,%eax
f0101464:	8b 00                	mov    (%eax),%eax
f0101466:	83 ec 04             	sub    $0x4,%esp
f0101469:	6a 10                	push   $0x10
f010146b:	6a 00                	push   $0x0
f010146d:	50                   	push   %eax
f010146e:	e8 84 ef 02 00       	call   f01303f7 <strtol>
f0101473:	83 c4 10             	add    $0x10,%esp
f0101476:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101479:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010147c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010147f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101482:	8a 00                	mov    (%eax),%al
f0101484:	0f b6 c0             	movzbl %al,%eax
f0101487:	83 ec 04             	sub    $0x4,%esp
f010148a:	50                   	push   %eax
f010148b:	ff 75 d8             	pushl  -0x28(%ebp)
f010148e:	68 3a 35 13 f0       	push   $0xf013353a
f0101493:	e8 95 f7 ff ff       	call   f0100c2d <cprintf>
f0101498:	83 c4 10             	add    $0x10,%esp
f010149b:	e9 c4 00 00 00       	jmp    f0101564 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014a0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014a4:	0f 85 aa 00 00 00    	jne    f0101554 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014ad:	83 c0 04             	add    $0x4,%eax
f01014b0:	8b 00                	mov    (%eax),%eax
f01014b2:	83 ec 04             	sub    $0x4,%esp
f01014b5:	6a 0a                	push   $0xa
f01014b7:	6a 00                	push   $0x0
f01014b9:	50                   	push   %eax
f01014ba:	e8 38 ef 02 00       	call   f01303f7 <strtol>
f01014bf:	83 c4 10             	add    $0x10,%esp
f01014c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01014c5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01014cc:	83 ec 04             	sub    $0x4,%esp
f01014cf:	6a 00                	push   $0x0
f01014d1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01014d4:	50                   	push   %eax
f01014d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01014d8:	e8 fb 78 00 00       	call   f0108dd8 <envid2env>
f01014dd:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01014e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e3:	83 c0 08             	add    $0x8,%eax
f01014e6:	8b 00                	mov    (%eax),%eax
f01014e8:	83 ec 04             	sub    $0x4,%esp
f01014eb:	6a 10                	push   $0x10
f01014ed:	6a 00                	push   $0x0
f01014ef:	50                   	push   %eax
f01014f0:	e8 02 ef 02 00       	call   f01303f7 <strtol>
f01014f5:	83 c4 10             	add    $0x10,%esp
f01014f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01014fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01014fe:	85 c0                	test   %eax,%eax
f0101500:	75 07                	jne    f0101509 <command_readusermem+0xb7>
f0101502:	b8 00 00 00 00       	mov    $0x0,%eax
f0101507:	eb 60                	jmp    f0101569 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101509:	0f 20 d8             	mov    %cr3,%eax
f010150c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010150f:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101512:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101515:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101518:	8b 40 60             	mov    0x60(%eax),%eax
f010151b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010151e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101521:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010152a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010152d:	8a 00                	mov    (%eax),%al
f010152f:	0f b6 c0             	movzbl %al,%eax
f0101532:	83 ec 04             	sub    $0x4,%esp
f0101535:	50                   	push   %eax
f0101536:	ff 75 f0             	pushl  -0x10(%ebp)
f0101539:	68 3a 35 13 f0       	push   $0xf013353a
f010153e:	e8 ea f6 ff ff       	call   f0100c2d <cprintf>
f0101543:	83 c4 10             	add    $0x10,%esp
f0101546:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010154c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010154f:	0f 22 d8             	mov    %eax,%cr3
f0101552:	eb 10                	jmp    f0101564 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101554:	83 ec 0c             	sub    $0xc,%esp
f0101557:	68 54 35 13 f0       	push   $0xf0133554
f010155c:	e8 cc f6 ff ff       	call   f0100c2d <cprintf>
f0101561:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101564:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101569:	c9                   	leave  
f010156a:	c3                   	ret    

f010156b <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010156b:	55                   	push   %ebp
f010156c:	89 e5                	mov    %esp,%ebp
f010156e:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101571:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101574:	83 c0 04             	add    $0x4,%eax
f0101577:	8b 00                	mov    (%eax),%eax
f0101579:	83 ec 04             	sub    $0x4,%esp
f010157c:	6a 10                	push   $0x10
f010157e:	6a 00                	push   $0x0
f0101580:	50                   	push   %eax
f0101581:	e8 71 ee 02 00       	call   f01303f7 <strtol>
f0101586:	83 c4 10             	add    $0x10,%esp
f0101589:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101591:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101594:	83 c0 08             	add    $0x8,%eax
f0101597:	8b 00                	mov    (%eax),%eax
f0101599:	83 ec 04             	sub    $0x4,%esp
f010159c:	6a 0a                	push   $0xa
f010159e:	6a 00                	push   $0x0
f01015a0:	50                   	push   %eax
f01015a1:	e8 51 ee 02 00       	call   f01303f7 <strtol>
f01015a6:	83 c4 10             	add    $0x10,%esp
f01015a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015b3:	eb 22                	jmp    f01015d7 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015b8:	8d 50 01             	lea    0x1(%eax),%edx
f01015bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015be:	8a 00                	mov    (%eax),%al
f01015c0:	0f b6 c0             	movzbl %al,%eax
f01015c3:	83 ec 08             	sub    $0x8,%esp
f01015c6:	50                   	push   %eax
f01015c7:	68 7e 35 13 f0       	push   $0xf013357e
f01015cc:	e8 5c f6 ff ff       	call   f0100c2d <cprintf>
f01015d1:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01015d4:	ff 45 f0             	incl   -0x10(%ebp)
f01015d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01015dd:	7c d6                	jl     f01015b5 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01015df:	83 ec 0c             	sub    $0xc,%esp
f01015e2:	68 81 35 13 f0       	push   $0xf0133581
f01015e7:	e8 41 f6 ff ff       	call   f0100c2d <cprintf>
f01015ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01015ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015f4:	c9                   	leave  
f01015f5:	c3                   	ret    

f01015f6 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01015f6:	55                   	push   %ebp
f01015f7:	89 e5                	mov    %esp,%ebp
f01015f9:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01015fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ff:	83 c0 04             	add    $0x4,%eax
f0101602:	8b 00                	mov    (%eax),%eax
f0101604:	83 ec 04             	sub    $0x4,%esp
f0101607:	6a 0a                	push   $0xa
f0101609:	6a 00                	push   $0x0
f010160b:	50                   	push   %eax
f010160c:	e8 e6 ed 02 00       	call   f01303f7 <strtol>
f0101611:	83 c4 10             	add    $0x10,%esp
f0101614:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101617:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010161e:	83 ec 04             	sub    $0x4,%esp
f0101621:	6a 00                	push   $0x0
f0101623:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101626:	50                   	push   %eax
f0101627:	ff 75 ec             	pushl  -0x14(%ebp)
f010162a:	e8 a9 77 00 00       	call   f0108dd8 <envid2env>
f010162f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101632:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101635:	83 c0 08             	add    $0x8,%eax
f0101638:	8b 00                	mov    (%eax),%eax
f010163a:	83 ec 04             	sub    $0x4,%esp
f010163d:	6a 10                	push   $0x10
f010163f:	6a 00                	push   $0x0
f0101641:	50                   	push   %eax
f0101642:	e8 b0 ed 02 00       	call   f01303f7 <strtol>
f0101647:	83 c4 10             	add    $0x10,%esp
f010164a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010164d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101650:	83 c0 0c             	add    $0xc,%eax
f0101653:	8b 00                	mov    (%eax),%eax
f0101655:	83 ec 04             	sub    $0x4,%esp
f0101658:	6a 0a                	push   $0xa
f010165a:	6a 00                	push   $0x0
f010165c:	50                   	push   %eax
f010165d:	e8 95 ed 02 00       	call   f01303f7 <strtol>
f0101662:	83 c4 10             	add    $0x10,%esp
f0101665:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010166b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010166e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101671:	85 c0                	test   %eax,%eax
f0101673:	75 07                	jne    f010167c <command_readuserblock+0x86>
f0101675:	b8 00 00 00 00       	mov    $0x0,%eax
f010167a:	eb 65                	jmp    f01016e1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010167c:	0f 20 d8             	mov    %cr3,%eax
f010167f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101682:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101685:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101688:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010168b:	8b 40 60             	mov    0x60(%eax),%eax
f010168e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101694:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101697:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010169e:	eb 28                	jmp    f01016c8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016a3:	8a 00                	mov    (%eax),%al
f01016a5:	0f b6 d0             	movzbl %al,%edx
f01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016ab:	8a 00                	mov    (%eax),%al
f01016ad:	0f b6 c0             	movzbl %al,%eax
f01016b0:	52                   	push   %edx
f01016b1:	50                   	push   %eax
f01016b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01016b5:	68 83 35 13 f0       	push   $0xf0133583
f01016ba:	e8 6e f5 ff ff       	call   f0100c2d <cprintf>
f01016bf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01016c2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01016c5:	ff 45 f0             	incl   -0x10(%ebp)
f01016c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016cb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01016ce:	7c d0                	jl     f01016a0 <command_readuserblock+0xaa>
f01016d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01016d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01016d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01016d9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01016dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016e1:	c9                   	leave  
f01016e2:	c3                   	ret    

f01016e3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01016e3:	55                   	push   %ebp
f01016e4:	89 e5                	mov    %esp,%ebp
f01016e6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ec:	83 c0 04             	add    $0x4,%eax
f01016ef:	8b 00                	mov    (%eax),%eax
f01016f1:	83 ec 04             	sub    $0x4,%esp
f01016f4:	6a 0a                	push   $0xa
f01016f6:	6a 00                	push   $0x0
f01016f8:	50                   	push   %eax
f01016f9:	e8 f9 ec 02 00       	call   f01303f7 <strtol>
f01016fe:	83 c4 10             	add    $0x10,%esp
f0101701:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101704:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f010170b:	83 ec 04             	sub    $0x4,%esp
f010170e:	6a 00                	push   $0x0
f0101710:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101713:	50                   	push   %eax
f0101714:	ff 75 f4             	pushl  -0xc(%ebp)
f0101717:	e8 bc 76 00 00       	call   f0108dd8 <envid2env>
f010171c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010171f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101722:	85 c0                	test   %eax,%eax
f0101724:	75 0a                	jne    f0101730 <command_remove_table+0x4d>
f0101726:	b8 00 00 00 00       	mov    $0x0,%eax
f010172b:	e9 a1 00 00 00       	jmp    f01017d1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101730:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101733:	83 c0 08             	add    $0x8,%eax
f0101736:	8b 00                	mov    (%eax),%eax
f0101738:	83 ec 04             	sub    $0x4,%esp
f010173b:	6a 10                	push   $0x10
f010173d:	6a 00                	push   $0x0
f010173f:	50                   	push   %eax
f0101740:	e8 b2 ec 02 00       	call   f01303f7 <strtol>
f0101745:	83 c4 10             	add    $0x10,%esp
f0101748:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010174b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010174e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101751:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101754:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101757:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010175a:	c1 ea 16             	shr    $0x16,%edx
f010175d:	c1 e2 02             	shl    $0x2,%edx
f0101760:	01 d0                	add    %edx,%eax
f0101762:	8b 00                	mov    (%eax),%eax
f0101764:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101769:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010176c:	83 ec 0c             	sub    $0xc,%esp
f010176f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101772:	e8 cf f7 ff ff       	call   f0100f46 <to_frame_info>
f0101777:	83 c4 10             	add    $0x10,%esp
f010177a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010177d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101780:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101786:	83 ec 0c             	sub    $0xc,%esp
f0101789:	ff 75 e4             	pushl  -0x1c(%ebp)
f010178c:	e8 2e 51 00 00       	call   f01068bf <free_frame>
f0101791:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101794:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101797:	c1 e8 16             	shr    $0x16,%eax
f010179a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f010179d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01017a6:	c1 e2 02             	shl    $0x2,%edx
f01017a9:	01 c2                	add    %eax,%edx
f01017ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017b1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01017b4:	c1 e1 02             	shl    $0x2,%ecx
f01017b7:	01 c8                	add    %ecx,%eax
f01017b9:	8b 00                	mov    (%eax),%eax
f01017bb:	83 e0 fe             	and    $0xfffffffe,%eax
f01017be:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01017c0:	0f 20 d8             	mov    %cr3,%eax
f01017c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01017c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017c9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01017cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017d1:	c9                   	leave  
f01017d2:	c3                   	ret    

f01017d3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01017d3:	55                   	push   %ebp
f01017d4:	89 e5                	mov    %esp,%ebp
f01017d6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01017d9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01017dd:	7e 06                	jle    f01017e5 <command_allocuserpage+0x12>
f01017df:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01017e3:	7e 1a                	jle    f01017ff <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01017e5:	83 ec 0c             	sub    $0xc,%esp
f01017e8:	68 94 35 13 f0       	push   $0xf0133594
f01017ed:	e8 3b f4 ff ff       	call   f0100c2d <cprintf>
f01017f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01017f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01017fa:	e9 46 01 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	83 c0 04             	add    $0x4,%eax
f0101805:	8b 00                	mov    (%eax),%eax
f0101807:	83 ec 04             	sub    $0x4,%esp
f010180a:	6a 0a                	push   $0xa
f010180c:	6a 00                	push   $0x0
f010180e:	50                   	push   %eax
f010180f:	e8 e3 eb 02 00       	call   f01303f7 <strtol>
f0101814:	83 c4 10             	add    $0x10,%esp
f0101817:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010181a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101821:	83 ec 04             	sub    $0x4,%esp
f0101824:	6a 00                	push   $0x0
f0101826:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101829:	50                   	push   %eax
f010182a:	ff 75 f0             	pushl  -0x10(%ebp)
f010182d:	e8 a6 75 00 00       	call   f0108dd8 <envid2env>
f0101832:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101838:	85 c0                	test   %eax,%eax
f010183a:	75 0a                	jne    f0101846 <command_allocuserpage+0x73>
f010183c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101841:	e9 ff 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101849:	83 c0 08             	add    $0x8,%eax
f010184c:	8b 00                	mov    (%eax),%eax
f010184e:	83 ec 04             	sub    $0x4,%esp
f0101851:	6a 10                	push   $0x10
f0101853:	6a 00                	push   $0x0
f0101855:	50                   	push   %eax
f0101856:	e8 9c eb 02 00       	call   f01303f7 <strtol>
f010185b:	83 c4 10             	add    $0x10,%esp
f010185e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101861:	83 ec 0c             	sub    $0xc,%esp
f0101864:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101867:	50                   	push   %eax
f0101868:	e8 3d 4f 00 00       	call   f01067aa <allocate_frame>
f010186d:	83 c4 10             	add    $0x10,%esp
f0101870:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101873:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101877:	75 1a                	jne    f0101893 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101879:	83 ec 0c             	sub    $0xc,%esp
f010187c:	68 be 35 13 f0       	push   $0xf01335be
f0101881:	e8 a7 f3 ff ff       	call   f0100c2d <cprintf>
f0101886:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101889:	b8 00 00 00 00       	mov    $0x0,%eax
f010188e:	e9 b2 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101893:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101897:	75 1d                	jne    f01018b6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101899:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010189c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010189f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018a2:	6a 06                	push   $0x6
f01018a4:	ff 75 ec             	pushl  -0x14(%ebp)
f01018a7:	52                   	push   %edx
f01018a8:	50                   	push   %eax
f01018a9:	e8 94 52 00 00       	call   f0106b42 <map_frame>
f01018ae:	83 c4 10             	add    $0x10,%esp
f01018b1:	e9 8a 00 00 00       	jmp    f0101940 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01018b6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ba:	0f 85 80 00 00 00    	jne    f0101940 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01018c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c3:	83 c0 0c             	add    $0xc,%eax
f01018c6:	8b 00                	mov    (%eax),%eax
f01018c8:	8a 00                	mov    (%eax),%al
f01018ca:	3c 72                	cmp    $0x72,%al
f01018cc:	74 0e                	je     f01018dc <command_allocuserpage+0x109>
f01018ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018d1:	83 c0 0c             	add    $0xc,%eax
f01018d4:	8b 00                	mov    (%eax),%eax
f01018d6:	8a 00                	mov    (%eax),%al
f01018d8:	3c 52                	cmp    $0x52,%al
f01018da:	75 09                	jne    f01018e5 <command_allocuserpage+0x112>
			rw = 0 ;
f01018dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01018e3:	eb 3c                	jmp    f0101921 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01018e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018e8:	83 c0 0c             	add    $0xc,%eax
f01018eb:	8b 00                	mov    (%eax),%eax
f01018ed:	8a 00                	mov    (%eax),%al
f01018ef:	3c 77                	cmp    $0x77,%al
f01018f1:	74 0e                	je     f0101901 <command_allocuserpage+0x12e>
f01018f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f6:	83 c0 0c             	add    $0xc,%eax
f01018f9:	8b 00                	mov    (%eax),%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	3c 57                	cmp    $0x57,%al
f01018ff:	75 09                	jne    f010190a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101901:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101908:	eb 17                	jmp    f0101921 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f010190a:	83 ec 0c             	sub    $0xc,%esp
f010190d:	68 d8 35 13 f0       	push   $0xf01335d8
f0101912:	e8 16 f3 ff ff       	call   f0100c2d <cprintf>
f0101917:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f010191a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101924:	83 c8 04             	or     $0x4,%eax
f0101927:	89 c1                	mov    %eax,%ecx
f0101929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010192c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010192f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101932:	51                   	push   %ecx
f0101933:	ff 75 ec             	pushl  -0x14(%ebp)
f0101936:	52                   	push   %edx
f0101937:	50                   	push   %eax
f0101938:	e8 05 52 00 00       	call   f0106b42 <map_frame>
f010193d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101945:	c9                   	leave  
f0101946:	c3                   	ret    

f0101947 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101947:	55                   	push   %ebp
f0101948:	89 e5                	mov    %esp,%ebp
f010194a:	56                   	push   %esi
f010194b:	53                   	push   %ebx
f010194c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f010194f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101952:	83 ec 0c             	sub    $0xc,%esp
f0101955:	50                   	push   %eax
f0101956:	e8 57 54 00 00       	call   f0106db2 <calculate_available_frames>
f010195b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010195e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101961:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101964:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101967:	8b 75 ec             	mov    -0x14(%ebp),%esi
f010196a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010196d:	01 de                	add    %ebx,%esi
f010196f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101972:	01 f3                	add    %esi,%ebx
f0101974:	83 ec 0c             	sub    $0xc,%esp
f0101977:	51                   	push   %ecx
f0101978:	52                   	push   %edx
f0101979:	50                   	push   %eax
f010197a:	53                   	push   %ebx
f010197b:	68 1c 36 13 f0       	push   $0xf013361c
f0101980:	e8 a8 f2 ff ff       	call   f0100c2d <cprintf>
f0101985:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101988:	a1 d0 74 6e f0       	mov    0xf06e74d0,%eax
f010198d:	83 ec 08             	sub    $0x8,%esp
f0101990:	50                   	push   %eax
f0101991:	68 74 36 13 f0       	push   $0xf0133674
f0101996:	e8 92 f2 ff ff       	call   f0100c2d <cprintf>
f010199b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010199e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01019a6:	5b                   	pop    %ebx
f01019a7:	5e                   	pop    %esi
f01019a8:	5d                   	pop    %ebp
f01019a9:	c3                   	ret    

f01019aa <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01019aa:	55                   	push   %ebp
f01019ab:	89 e5                	mov    %esp,%ebp
f01019ad:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01019b0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01019b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01019be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01019c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01019c8:	83 f8 02             	cmp    $0x2,%eax
f01019cb:	74 39                	je     f0101a06 <CreateEnv+0x5c>
f01019cd:	83 f8 03             	cmp    $0x3,%eax
f01019d0:	75 1d                	jne    f01019ef <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01019d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d5:	83 c0 08             	add    $0x8,%eax
f01019d8:	8b 00                	mov    (%eax),%eax
f01019da:	83 ec 04             	sub    $0x4,%esp
f01019dd:	6a 0a                	push   $0xa
f01019df:	6a 00                	push   $0x0
f01019e1:	50                   	push   %eax
f01019e2:	e8 10 ea 02 00       	call   f01303f7 <strtol>
f01019e7:	83 c4 10             	add    $0x10,%esp
f01019ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		case 2:
			break;
f01019ed:	eb 17                	jmp    f0101a06 <CreateEnv+0x5c>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	68 b0 36 13 f0       	push   $0xf01336b0
f01019f7:	e8 31 f2 ff ff       	call   f0100c2d <cprintf>
f01019fc:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01019ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a04:	eb 58                	jmp    f0101a5e <CreateEnv+0xb4>
		switch (number_of_arguments)
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
		case 2:
			break;
f0101a06:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a07:	83 ec 0c             	sub    $0xc,%esp
f0101a0a:	6a 02                	push   $0x2
f0101a0c:	e8 68 b5 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f0101a11:	83 c4 10             	add    $0x10,%esp
f0101a14:	85 c0                	test   %eax,%eax
f0101a16:	74 07                	je     f0101a1f <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0101a18:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101a1f:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0101a23:	76 19                	jbe    f0101a3e <CreateEnv+0x94>
f0101a25:	68 20 37 13 f0       	push   $0xf0133720
f0101a2a:	68 65 37 13 f0       	push   $0xf0133765
f0101a2f:	68 71 02 00 00       	push   $0x271
f0101a34:	68 f9 34 13 f0       	push   $0xf01334f9
f0101a39:	e8 68 e7 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a41:	83 c0 04             	add    $0x4,%eax
f0101a44:	8b 00                	mov    (%eax),%eax
f0101a46:	ff 75 f0             	pushl  -0x10(%ebp)
f0101a49:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a4f:	50                   	push   %eax
f0101a50:	e8 28 66 00 00       	call   f010807d <env_create>
f0101a55:	83 c4 10             	add    $0x10,%esp
f0101a58:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101a5e:	c9                   	leave  
f0101a5f:	c3                   	ret    

f0101a60 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101a60:	55                   	push   %ebp
f0101a61:	89 e5                	mov    %esp,%ebp
f0101a63:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101a66:	83 ec 08             	sub    $0x8,%esp
f0101a69:	ff 75 0c             	pushl  0xc(%ebp)
f0101a6c:	ff 75 08             	pushl  0x8(%ebp)
f0101a6f:	e8 36 ff ff ff       	call   f01019aa <CreateEnv>
f0101a74:	83 c4 10             	add    $0x10,%esp
f0101a77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101a7e:	75 07                	jne    f0101a87 <command_run_program+0x27>
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	eb 46                	jmp    f0101acd <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101a8d:	83 ec 08             	sub    $0x8,%esp
f0101a90:	50                   	push   %eax
f0101a91:	68 7a 37 13 f0       	push   $0xf013377a
f0101a96:	e8 92 f1 ff ff       	call   f0100c2d <cprintf>
f0101a9b:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101a9e:	c7 05 d0 74 6e f0 00 	movl   $0x0,0xf06e74d0
f0101aa5:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101aa8:	83 ec 0c             	sub    $0xc,%esp
f0101aab:	ff 75 f4             	pushl  -0xc(%ebp)
f0101aae:	e8 c4 35 00 00       	call   f0105077 <sched_new_env>
f0101ab3:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ab9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101abc:	83 ec 0c             	sub    $0xc,%esp
f0101abf:	50                   	push   %eax
f0101ac0:	e8 cf 35 00 00       	call   f0105094 <sched_run_env>
f0101ac5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101acd:	c9                   	leave  
f0101ace:	c3                   	ret    

f0101acf <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101acf:	55                   	push   %ebp
f0101ad0:	89 e5                	mov    %esp,%ebp
f0101ad2:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ad8:	83 c0 04             	add    $0x4,%eax
f0101adb:	8b 00                	mov    (%eax),%eax
f0101add:	83 ec 04             	sub    $0x4,%esp
f0101ae0:	6a 0a                	push   $0xa
f0101ae2:	6a 00                	push   $0x0
f0101ae4:	50                   	push   %eax
f0101ae5:	e8 0d e9 02 00       	call   f01303f7 <strtol>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101af3:	83 ec 0c             	sub    $0xc,%esp
f0101af6:	50                   	push   %eax
f0101af7:	e8 c4 39 00 00       	call   f01054c0 <sched_kill_env>
f0101afc:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b04:	c9                   	leave  
f0101b05:	c3                   	ret    

f0101b06 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101b06:	55                   	push   %ebp
f0101b07:	89 e5                	mov    %esp,%ebp
f0101b09:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101b0c:	83 ec 08             	sub    $0x8,%esp
f0101b0f:	ff 75 0c             	pushl  0xc(%ebp)
f0101b12:	ff 75 08             	pushl  0x8(%ebp)
f0101b15:	e8 90 fe ff ff       	call   f01019aa <CreateEnv>
f0101b1a:	83 c4 10             	add    $0x10,%esp
f0101b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101b24:	75 07                	jne    f0101b2d <commnad_load_env+0x27>
		return 0 ;
f0101b26:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b2b:	eb 2a                	jmp    f0101b57 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101b2d:	83 ec 0c             	sub    $0xc,%esp
f0101b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0101b33:	e8 3f 35 00 00       	call   f0105077 <sched_new_env>
f0101b38:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101b41:	83 ec 08             	sub    $0x8,%esp
f0101b44:	50                   	push   %eax
f0101b45:	68 7a 37 13 f0       	push   $0xf013377a
f0101b4a:	e8 de f0 ff ff       	call   f0100c2d <cprintf>
f0101b4f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b52:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b57:	c9                   	leave  
f0101b58:	c3                   	ret    

f0101b59 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101b59:	55                   	push   %ebp
f0101b5a:	89 e5                	mov    %esp,%ebp
f0101b5c:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101b5f:	c7 05 d0 74 6e f0 00 	movl   $0x0,0xf06e74d0
f0101b66:	00 00 00 
	sched_run_all();
f0101b69:	e8 4a 31 00 00       	call   f0104cb8 <sched_run_all>

	return 0 ;
f0101b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b73:	c9                   	leave  
f0101b74:	c3                   	ret    

f0101b75 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101b75:	55                   	push   %ebp
f0101b76:	89 e5                	mov    %esp,%ebp
f0101b78:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101b7b:	e8 2d 2f 00 00       	call   f0104aad <sched_print_all>

	return 0 ;
f0101b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b85:	c9                   	leave  
f0101b86:	c3                   	ret    

f0101b87 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101b87:	55                   	push   %ebp
f0101b88:	89 e5                	mov    %esp,%ebp
f0101b8a:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101b8d:	e8 99 31 00 00       	call   f0104d2b <sched_kill_all>

	return 0 ;
f0101b92:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b97:	c9                   	leave  
f0101b98:	c3                   	ret    

f0101b99 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101b99:	55                   	push   %ebp
f0101b9a:	89 e5                	mov    %esp,%ebp
f0101b9c:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101b9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101ba3:	7f 1a                	jg     f0101bbf <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101ba5:	83 ec 0c             	sub    $0xc,%esp
f0101ba8:	68 90 37 13 f0       	push   $0xf0133790
f0101bad:	e8 7b f0 ff ff       	call   f0100c2d <cprintf>
f0101bb2:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bba:	e9 83 00 00 00       	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101bbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc2:	83 c0 04             	add    $0x4,%eax
f0101bc5:	8b 00                	mov    (%eax),%eax
f0101bc7:	83 ec 04             	sub    $0x4,%esp
f0101bca:	6a 0a                	push   $0xa
f0101bcc:	6a 00                	push   $0x0
f0101bce:	50                   	push   %eax
f0101bcf:	e8 23 e8 02 00       	call   f01303f7 <strtol>
f0101bd4:	83 c4 10             	add    $0x10,%esp
f0101bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101bda:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101bde:	75 20                	jne    f0101c00 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101be0:	83 ec 0c             	sub    $0xc,%esp
f0101be3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101be6:	e8 03 b3 00 00       	call   f010ceee <setPageReplacmentAlgorithmLRU>
f0101beb:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101bee:	83 ec 0c             	sub    $0xc,%esp
f0101bf1:	68 f0 37 13 f0       	push   $0xf01337f0
f0101bf6:	e8 32 f0 ff ff       	call   f0100c2d <cprintf>
f0101bfb:	83 c4 10             	add    $0x10,%esp
f0101bfe:	eb 3d                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101c00:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101c04:	75 20                	jne    f0101c26 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101c06:	83 ec 0c             	sub    $0xc,%esp
f0101c09:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c0c:	e8 dd b2 00 00       	call   f010ceee <setPageReplacmentAlgorithmLRU>
f0101c11:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101c14:	83 ec 0c             	sub    $0xc,%esp
f0101c17:	68 34 38 13 f0       	push   $0xf0133834
f0101c1c:	e8 0c f0 ff ff       	call   f0100c2d <cprintf>
f0101c21:	83 c4 10             	add    $0x10,%esp
f0101c24:	eb 17                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101c26:	83 ec 0c             	sub    $0xc,%esp
f0101c29:	68 74 38 13 f0       	push   $0xf0133874
f0101c2e:	e8 fa ef ff ff       	call   f0100c2d <cprintf>
f0101c33:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3b:	eb 05                	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101c3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c42:	c9                   	leave  
f0101c43:	c3                   	ret    

f0101c44 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101c44:	55                   	push   %ebp
f0101c45:	89 e5                	mov    %esp,%ebp
f0101c47:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c4d:	83 c0 04             	add    $0x4,%eax
f0101c50:	8b 00                	mov    (%eax),%eax
f0101c52:	83 ec 04             	sub    $0x4,%esp
f0101c55:	6a 0a                	push   $0xa
f0101c57:	6a 00                	push   $0x0
f0101c59:	50                   	push   %eax
f0101c5a:	e8 98 e7 02 00       	call   f01303f7 <strtol>
f0101c5f:	83 c4 10             	add    $0x10,%esp
f0101c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101c65:	83 ec 0c             	sub    $0xc,%esp
f0101c68:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c6b:	e8 f1 b2 00 00       	call   f010cf61 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101c70:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101c73:	83 ec 0c             	sub    $0xc,%esp
f0101c76:	68 c8 38 13 f0       	push   $0xf01338c8
f0101c7b:	e8 ad ef ff ff       	call   f0100c2d <cprintf>
f0101c80:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101c83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c88:	c9                   	leave  
f0101c89:	c3                   	ret    

f0101c8a <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101c8a:	55                   	push   %ebp
f0101c8b:	89 e5                	mov    %esp,%ebp
f0101c8d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101c90:	e8 8c b2 00 00       	call   f010cf21 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101c95:	83 ec 0c             	sub    $0xc,%esp
f0101c98:	68 fc 38 13 f0       	push   $0xf01338fc
f0101c9d:	e8 8b ef ff ff       	call   f0100c2d <cprintf>
f0101ca2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101caa:	c9                   	leave  
f0101cab:	c3                   	ret    

f0101cac <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101cac:	55                   	push   %ebp
f0101cad:	89 e5                	mov    %esp,%ebp
f0101caf:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101cb2:	e8 7a b2 00 00       	call   f010cf31 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101cb7:	83 ec 0c             	sub    $0xc,%esp
f0101cba:	68 28 39 13 f0       	push   $0xf0133928
f0101cbf:	e8 69 ef ff ff       	call   f0100c2d <cprintf>
f0101cc4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ccc:	c9                   	leave  
f0101ccd:	c3                   	ret    

f0101cce <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101cce:	55                   	push   %ebp
f0101ccf:	89 e5                	mov    %esp,%ebp
f0101cd1:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101cd4:	e8 68 b2 00 00       	call   f010cf41 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101cd9:	83 ec 0c             	sub    $0xc,%esp
f0101cdc:	68 50 39 13 f0       	push   $0xf0133950
f0101ce1:	e8 47 ef ff ff       	call   f0100c2d <cprintf>
f0101ce6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ce9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cee:	c9                   	leave  
f0101cef:	c3                   	ret    

f0101cf0 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101cf0:	55                   	push   %ebp
f0101cf1:	89 e5                	mov    %esp,%ebp
f0101cf3:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cf9:	83 c0 04             	add    $0x4,%eax
f0101cfc:	8b 00                	mov    (%eax),%eax
f0101cfe:	83 ec 04             	sub    $0x4,%esp
f0101d01:	6a 0a                	push   $0xa
f0101d03:	6a 00                	push   $0x0
f0101d05:	50                   	push   %eax
f0101d06:	e8 ec e6 02 00       	call   f01303f7 <strtol>
f0101d0b:	83 c4 10             	add    $0x10,%esp
f0101d0e:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101d11:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101d15:	83 ec 0c             	sub    $0xc,%esp
f0101d18:	50                   	push   %eax
f0101d19:	e8 b4 29 00 00       	call   f01046d2 <sched_init_RR>
f0101d1e:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101d21:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0101d26:	0f b6 c0             	movzbl %al,%eax
f0101d29:	83 ec 08             	sub    $0x8,%esp
f0101d2c:	50                   	push   %eax
f0101d2d:	68 84 39 13 f0       	push   $0xf0133984
f0101d32:	e8 f6 ee ff ff       	call   f0100c2d <cprintf>
f0101d37:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d3f:	c9                   	leave  
f0101d40:	c3                   	ret    

f0101d41 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101d41:	55                   	push   %ebp
f0101d42:	89 e5                	mov    %esp,%ebp
f0101d44:	53                   	push   %ebx
f0101d45:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101d48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d4b:	83 c0 04             	add    $0x4,%eax
f0101d4e:	8b 00                	mov    (%eax),%eax
f0101d50:	83 ec 04             	sub    $0x4,%esp
f0101d53:	6a 0a                	push   $0xa
f0101d55:	6a 00                	push   $0x0
f0101d57:	50                   	push   %eax
f0101d58:	e8 9a e6 02 00       	call   f01303f7 <strtol>
f0101d5d:	83 c4 10             	add    $0x10,%esp
f0101d60:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d63:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101d6a:	eb 2e                	jmp    f0101d9a <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d6f:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d7f:	01 d0                	add    %edx,%eax
f0101d81:	8b 00                	mov    (%eax),%eax
f0101d83:	83 ec 04             	sub    $0x4,%esp
f0101d86:	6a 0a                	push   $0xa
f0101d88:	6a 00                	push   $0x0
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 67 e6 02 00       	call   f01303f7 <strtol>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d97:	ff 45 f4             	incl   -0xc(%ebp)
f0101d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101da0:	7c ca                	jl     f0101d6c <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101da2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101da6:	83 ec 08             	sub    $0x8,%esp
f0101da9:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101dac:	52                   	push   %edx
f0101dad:	50                   	push   %eax
f0101dae:	e8 75 29 00 00       	call   f0104728 <sched_init_MLFQ>
f0101db3:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101db6:	83 ec 0c             	sub    $0xc,%esp
f0101db9:	68 bc 39 13 f0       	push   $0xf01339bc
f0101dbe:	e8 6a ee ff ff       	call   f0100c2d <cprintf>
f0101dc3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101dc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dcd:	eb 21                	jmp    f0101df0 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd2:	05 88 74 6e f0       	add    $0xf06e7488,%eax
f0101dd7:	8a 00                	mov    (%eax),%al
f0101dd9:	0f b6 c0             	movzbl %al,%eax
f0101ddc:	83 ec 08             	sub    $0x8,%esp
f0101ddf:	50                   	push   %eax
f0101de0:	68 e9 39 13 f0       	push   $0xf01339e9
f0101de5:	e8 43 ee ff ff       	call   f0100c2d <cprintf>
f0101dea:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ded:	ff 45 f0             	incl   -0x10(%ebp)
f0101df0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0101df5:	0f b6 c0             	movzbl %al,%eax
f0101df8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101dfb:	7f d2                	jg     f0101dcf <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101dfd:	83 ec 0c             	sub    $0xc,%esp
f0101e00:	68 81 35 13 f0       	push   $0xf0133581
f0101e05:	e8 23 ee ff ff       	call   f0100c2d <cprintf>
f0101e0a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101e15:	c9                   	leave  
f0101e16:	c3                   	ret    

f0101e17 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101e17:	55                   	push   %ebp
f0101e18:	89 e5                	mov    %esp,%ebp
f0101e1a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101e1d:	e8 39 25 00 00       	call   f010435b <isSchedMethodMLFQ>
f0101e22:	85 c0                	test   %eax,%eax
f0101e24:	74 59                	je     f0101e7f <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101e26:	83 ec 0c             	sub    $0xc,%esp
f0101e29:	68 f0 39 13 f0       	push   $0xf01339f0
f0101e2e:	e8 fa ed ff ff       	call   f0100c2d <cprintf>
f0101e33:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101e3d:	eb 21                	jmp    f0101e60 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e42:	05 88 74 6e f0       	add    $0xf06e7488,%eax
f0101e47:	8a 00                	mov    (%eax),%al
f0101e49:	0f b6 c0             	movzbl %al,%eax
f0101e4c:	83 ec 08             	sub    $0x8,%esp
f0101e4f:	50                   	push   %eax
f0101e50:	68 e9 39 13 f0       	push   $0xf01339e9
f0101e55:	e8 d3 ed ff ff       	call   f0100c2d <cprintf>
f0101e5a:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e5d:	ff 45 f4             	incl   -0xc(%ebp)
f0101e60:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0101e65:	0f b6 c0             	movzbl %al,%eax
f0101e68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101e6b:	7f d2                	jg     f0101e3f <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	68 81 35 13 f0       	push   $0xf0133581
f0101e75:	e8 b3 ed ff ff       	call   f0100c2d <cprintf>
f0101e7a:	83 c4 10             	add    $0x10,%esp
f0101e7d:	eb 34                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101e7f:	e8 bd 24 00 00       	call   f0104341 <isSchedMethodRR>
f0101e84:	85 c0                	test   %eax,%eax
f0101e86:	74 1b                	je     f0101ea3 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101e88:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0101e8d:	0f b6 c0             	movzbl %al,%eax
f0101e90:	83 ec 08             	sub    $0x8,%esp
f0101e93:	50                   	push   %eax
f0101e94:	68 24 3a 13 f0       	push   $0xf0133a24
f0101e99:	e8 8f ed ff ff       	call   f0100c2d <cprintf>
f0101e9e:	83 c4 10             	add    $0x10,%esp
f0101ea1:	eb 10                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101ea3:	83 ec 0c             	sub    $0xc,%esp
f0101ea6:	68 60 3a 13 f0       	push   $0xf0133a60
f0101eab:	e8 7d ed ff ff       	call   f0100c2d <cprintf>
f0101eb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb8:	c9                   	leave  
f0101eb9:	c3                   	ret    

f0101eba <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101eba:	55                   	push   %ebp
f0101ebb:	89 e5                	mov    %esp,%ebp
f0101ebd:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ec3:	83 c0 04             	add    $0x4,%eax
f0101ec6:	8b 00                	mov    (%eax),%eax
f0101ec8:	83 ec 04             	sub    $0x4,%esp
f0101ecb:	6a 0a                	push   $0xa
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	50                   	push   %eax
f0101ed0:	e8 22 e5 02 00       	call   f01303f7 <strtol>
f0101ed5:	83 c4 10             	add    $0x10,%esp
f0101ed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ede:	0f b6 c0             	movzbl %al,%eax
f0101ee1:	83 ec 0c             	sub    $0xc,%esp
f0101ee4:	50                   	push   %eax
f0101ee5:	e8 4a d4 02 00       	call   f012f334 <chksch>
f0101eea:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101eed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ef1:	75 12                	jne    f0101f05 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101ef3:	83 ec 0c             	sub    $0xc,%esp
f0101ef6:	68 88 3a 13 f0       	push   $0xf0133a88
f0101efb:	e8 2d ed ff ff       	call   f0100c2d <cprintf>
f0101f00:	83 c4 10             	add    $0x10,%esp
f0101f03:	eb 16                	jmp    f0101f1b <command_sch_test+0x61>
	else if (status == 1)
f0101f05:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f09:	75 10                	jne    f0101f1b <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101f0b:	83 ec 0c             	sub    $0xc,%esp
f0101f0e:	68 b0 3a 13 f0       	push   $0xf0133ab0
f0101f13:	e8 15 ed ff ff       	call   f0100c2d <cprintf>
f0101f18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f20:	c9                   	leave  
f0101f21:	c3                   	ret    

f0101f22 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101f22:	55                   	push   %ebp
f0101f23:	89 e5                	mov    %esp,%ebp
f0101f25:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101f28:	e8 62 b0 00 00       	call   f010cf8f <isPageReplacmentAlgorithmCLOCK>
f0101f2d:	85 c0                	test   %eax,%eax
f0101f2f:	74 15                	je     f0101f46 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101f31:	83 ec 0c             	sub    $0xc,%esp
f0101f34:	68 d4 3a 13 f0       	push   $0xf0133ad4
f0101f39:	e8 ef ec ff ff       	call   f0100c2d <cprintf>
f0101f3e:	83 c4 10             	add    $0x10,%esp
f0101f41:	e9 8c 00 00 00       	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101f46:	83 ec 0c             	sub    $0xc,%esp
f0101f49:	6a 01                	push   $0x1
f0101f4b:	e8 29 b0 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f0101f50:	83 c4 10             	add    $0x10,%esp
f0101f53:	85 c0                	test   %eax,%eax
f0101f55:	74 12                	je     f0101f69 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101f57:	83 ec 0c             	sub    $0xc,%esp
f0101f5a:	68 fc 3a 13 f0       	push   $0xf0133afc
f0101f5f:	e8 c9 ec ff ff       	call   f0100c2d <cprintf>
f0101f64:	83 c4 10             	add    $0x10,%esp
f0101f67:	eb 69                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101f69:	83 ec 0c             	sub    $0xc,%esp
f0101f6c:	6a 02                	push   $0x2
f0101f6e:	e8 06 b0 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f0101f73:	83 c4 10             	add    $0x10,%esp
f0101f76:	85 c0                	test   %eax,%eax
f0101f78:	74 12                	je     f0101f8c <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101f7a:	83 ec 0c             	sub    $0xc,%esp
f0101f7d:	68 3c 3b 13 f0       	push   $0xf0133b3c
f0101f82:	e8 a6 ec ff ff       	call   f0100c2d <cprintf>
f0101f87:	83 c4 10             	add    $0x10,%esp
f0101f8a:	eb 46                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101f8c:	e8 19 b0 00 00       	call   f010cfaa <isPageReplacmentAlgorithmFIFO>
f0101f91:	85 c0                	test   %eax,%eax
f0101f93:	74 12                	je     f0101fa7 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101f95:	83 ec 0c             	sub    $0xc,%esp
f0101f98:	68 78 3b 13 f0       	push   $0xf0133b78
f0101f9d:	e8 8b ec ff ff       	call   f0100c2d <cprintf>
f0101fa2:	83 c4 10             	add    $0x10,%esp
f0101fa5:	eb 2b                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101fa7:	e8 19 b0 00 00       	call   f010cfc5 <isPageReplacmentAlgorithmModifiedCLOCK>
f0101fac:	85 c0                	test   %eax,%eax
f0101fae:	74 12                	je     f0101fc2 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101fb0:	83 ec 0c             	sub    $0xc,%esp
f0101fb3:	68 9c 3b 13 f0       	push   $0xf0133b9c
f0101fb8:	e8 70 ec ff ff       	call   f0100c2d <cprintf>
f0101fbd:	83 c4 10             	add    $0x10,%esp
f0101fc0:	eb 10                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101fc2:	83 ec 0c             	sub    $0xc,%esp
f0101fc5:	68 cc 3b 13 f0       	push   $0xf0133bcc
f0101fca:	e8 5e ec ff ff       	call   f0100c2d <cprintf>
f0101fcf:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd7:	c9                   	leave  
f0101fd8:	c3                   	ret    

f0101fd9 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101fd9:	55                   	push   %ebp
f0101fda:	89 e5                	mov    %esp,%ebp
f0101fdc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101fdf:	e8 ce ee ff ff       	call   f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101fe4:	83 ec 0c             	sub    $0xc,%esp
f0101fe7:	68 f8 3b 13 f0       	push   $0xf0133bf8
f0101fec:	e8 3c ec ff ff       	call   f0100c2d <cprintf>
f0101ff1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ff9:	c9                   	leave  
f0101ffa:	c3                   	ret    

f0101ffb <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101ffb:	55                   	push   %ebp
f0101ffc:	89 e5                	mov    %esp,%ebp
f0101ffe:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102001:	e8 bc ee ff ff       	call   f0100ec2 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102006:	83 ec 0c             	sub    $0xc,%esp
f0102009:	68 28 3c 13 f0       	push   $0xf0133c28
f010200e:	e8 1a ec ff ff       	call   f0100c2d <cprintf>
f0102013:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102016:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102023:	e8 aa ee ff ff       	call   f0100ed2 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102028:	83 ec 0c             	sub    $0xc,%esp
f010202b:	68 58 3c 13 f0       	push   $0xf0133c58
f0102030:	e8 f8 eb ff ff       	call   f0100c2d <cprintf>
f0102035:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102038:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010203d:	c9                   	leave  
f010203e:	c3                   	ret    

f010203f <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010203f:	55                   	push   %ebp
f0102040:	89 e5                	mov    %esp,%ebp
f0102042:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102045:	e8 98 ee ff ff       	call   f0100ee2 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	68 88 3c 13 f0       	push   $0xf0133c88
f0102052:	e8 d6 eb ff ff       	call   f0100c2d <cprintf>
f0102057:	83 c4 10             	add    $0x10,%esp
	return 0;
f010205a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010205f:	c9                   	leave  
f0102060:	c3                   	ret    

f0102061 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102061:	55                   	push   %ebp
f0102062:	89 e5                	mov    %esp,%ebp
f0102064:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102067:	e8 86 ee ff ff       	call   f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>
f010206c:	84 c0                	test   %al,%al
f010206e:	74 12                	je     f0102082 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102070:	83 ec 0c             	sub    $0xc,%esp
f0102073:	68 b8 3c 13 f0       	push   $0xf0133cb8
f0102078:	e8 b0 eb ff ff       	call   f0100c2d <cprintf>
f010207d:	83 c4 10             	add    $0x10,%esp
f0102080:	eb 61                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102082:	e8 80 ee ff ff       	call   f0100f07 <isUHeapPlacementStrategyBESTFIT>
f0102087:	84 c0                	test   %al,%al
f0102089:	74 12                	je     f010209d <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010208b:	83 ec 0c             	sub    $0xc,%esp
f010208e:	68 e4 3c 13 f0       	push   $0xf0133ce4
f0102093:	e8 95 eb ff ff       	call   f0100c2d <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
f010209b:	eb 46                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010209d:	e8 7a ee ff ff       	call   f0100f1c <isUHeapPlacementStrategyNEXTFIT>
f01020a2:	84 c0                	test   %al,%al
f01020a4:	74 12                	je     f01020b8 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01020a6:	83 ec 0c             	sub    $0xc,%esp
f01020a9:	68 10 3d 13 f0       	push   $0xf0133d10
f01020ae:	e8 7a eb ff ff       	call   f0100c2d <cprintf>
f01020b3:	83 c4 10             	add    $0x10,%esp
f01020b6:	eb 2b                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01020b8:	e8 74 ee ff ff       	call   f0100f31 <isUHeapPlacementStrategyWORSTFIT>
f01020bd:	84 c0                	test   %al,%al
f01020bf:	74 12                	je     f01020d3 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01020c1:	83 ec 0c             	sub    $0xc,%esp
f01020c4:	68 3c 3d 13 f0       	push   $0xf0133d3c
f01020c9:	e8 5f eb ff ff       	call   f0100c2d <cprintf>
f01020ce:	83 c4 10             	add    $0x10,%esp
f01020d1:	eb 10                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01020d3:	83 ec 0c             	sub    $0xc,%esp
f01020d6:	68 68 3d 13 f0       	push   $0xf0133d68
f01020db:	e8 4d eb ff ff       	call   f0100c2d <cprintf>
f01020e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020e8:	c9                   	leave  
f01020e9:	c3                   	ret    

f01020ea <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01020ea:	55                   	push   %ebp
f01020eb:	89 e5                	mov    %esp,%ebp
f01020ed:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01020f0:	e8 05 ed ff ff       	call   f0100dfa <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01020f5:	83 ec 0c             	sub    $0xc,%esp
f01020f8:	68 94 3d 13 f0       	push   $0xf0133d94
f01020fd:	e8 2b eb ff ff       	call   f0100c2d <cprintf>
f0102102:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010210a:	c9                   	leave  
f010210b:	c3                   	ret    

f010210c <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010210c:	55                   	push   %ebp
f010210d:	89 e5                	mov    %esp,%ebp
f010210f:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102112:	e8 f3 ec ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102117:	83 ec 0c             	sub    $0xc,%esp
f010211a:	68 94 3d 13 f0       	push   $0xf0133d94
f010211f:	e8 09 eb ff ff       	call   f0100c2d <cprintf>
f0102124:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102127:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212c:	c9                   	leave  
f010212d:	c3                   	ret    

f010212e <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010212e:	55                   	push   %ebp
f010212f:	89 e5                	mov    %esp,%ebp
f0102131:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0102134:	e8 e1 ec ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	68 c8 3d 13 f0       	push   $0xf0133dc8
f0102141:	e8 e7 ea ff ff       	call   f0100c2d <cprintf>
f0102146:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102149:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214e:	c9                   	leave  
f010214f:	c3                   	ret    

f0102150 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102150:	55                   	push   %ebp
f0102151:	89 e5                	mov    %esp,%ebp
f0102153:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102156:	e8 cf ec ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010215b:	83 ec 0c             	sub    $0xc,%esp
f010215e:	68 f8 3d 13 f0       	push   $0xf0133df8
f0102163:	e8 c5 ea ff ff       	call   f0100c2d <cprintf>
f0102168:	83 c4 10             	add    $0x10,%esp
	return 0;
f010216b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102170:	c9                   	leave  
f0102171:	c3                   	ret    

f0102172 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102172:	55                   	push   %ebp
f0102173:	89 e5                	mov    %esp,%ebp
f0102175:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102178:	e8 bd ec ff ff       	call   f0100e3a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010217d:	83 ec 0c             	sub    $0xc,%esp
f0102180:	68 28 3e 13 f0       	push   $0xf0133e28
f0102185:	e8 a3 ea ff ff       	call   f0100c2d <cprintf>
f010218a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010218d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102192:	c9                   	leave  
f0102193:	c3                   	ret    

f0102194 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102194:	55                   	push   %ebp
f0102195:	89 e5                	mov    %esp,%ebp
f0102197:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010219a:	e8 ab ec ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f010219f:	84 c0                	test   %al,%al
f01021a1:	74 12                	je     f01021b5 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01021a3:	83 ec 0c             	sub    $0xc,%esp
f01021a6:	68 5c 3e 13 f0       	push   $0xf0133e5c
f01021ab:	e8 7d ea ff ff       	call   f0100c2d <cprintf>
f01021b0:	83 c4 10             	add    $0x10,%esp
f01021b3:	eb 7c                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01021b5:	e8 a4 ec ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01021ba:	84 c0                	test   %al,%al
f01021bc:	74 12                	je     f01021d0 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01021be:	83 ec 0c             	sub    $0xc,%esp
f01021c1:	68 98 3e 13 f0       	push   $0xf0133e98
f01021c6:	e8 62 ea ff ff       	call   f0100c2d <cprintf>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	eb 61                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01021d0:	e8 9e ec ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01021d5:	84 c0                	test   %al,%al
f01021d7:	74 12                	je     f01021eb <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01021d9:	83 ec 0c             	sub    $0xc,%esp
f01021dc:	68 c8 3e 13 f0       	push   $0xf0133ec8
f01021e1:	e8 47 ea ff ff       	call   f0100c2d <cprintf>
f01021e6:	83 c4 10             	add    $0x10,%esp
f01021e9:	eb 46                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01021eb:	e8 98 ec ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f01021f0:	84 c0                	test   %al,%al
f01021f2:	74 12                	je     f0102206 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01021f4:	83 ec 0c             	sub    $0xc,%esp
f01021f7:	68 f4 3e 13 f0       	push   $0xf0133ef4
f01021fc:	e8 2c ea ff ff       	call   f0100c2d <cprintf>
f0102201:	83 c4 10             	add    $0x10,%esp
f0102204:	eb 2b                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102206:	e8 92 ec ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f010220b:	84 c0                	test   %al,%al
f010220d:	74 12                	je     f0102221 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010220f:	83 ec 0c             	sub    $0xc,%esp
f0102212:	68 20 3f 13 f0       	push   $0xf0133f20
f0102217:	e8 11 ea ff ff       	call   f0100c2d <cprintf>
f010221c:	83 c4 10             	add    $0x10,%esp
f010221f:	eb 10                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102221:	83 ec 0c             	sub    $0xc,%esp
f0102224:	68 50 3f 13 f0       	push   $0xf0133f50
f0102229:	e8 ff e9 ff ff       	call   f0100c2d <cprintf>
f010222e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010223e:	e8 f9 ad 00 00       	call   f010d03c <isBufferingEnabled>
f0102243:	84 c0                	test   %al,%al
f0102245:	75 12                	jne    f0102259 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 80 3f 13 f0       	push   $0xf0133f80
f010224f:	e8 d9 e9 ff ff       	call   f0100c2d <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 1d                	jmp    f0102276 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	6a 00                	push   $0x0
f010225e:	e8 b3 ad 00 00       	call   f010d016 <enableModifiedBuffer>
f0102263:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102266:	83 ec 0c             	sub    $0xc,%esp
f0102269:	68 bc 3f 13 f0       	push   $0xf0133fbc
f010226e:	e8 ba e9 ff ff       	call   f0100c2d <cprintf>
f0102273:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010227b:	c9                   	leave  
f010227c:	c3                   	ret    

f010227d <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010227d:	55                   	push   %ebp
f010227e:	89 e5                	mov    %esp,%ebp
f0102280:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102283:	e8 b4 ad 00 00       	call   f010d03c <isBufferingEnabled>
f0102288:	84 c0                	test   %al,%al
f010228a:	75 12                	jne    f010229e <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010228c:	83 ec 0c             	sub    $0xc,%esp
f010228f:	68 80 3f 13 f0       	push   $0xf0133f80
f0102294:	e8 94 e9 ff ff       	call   f0100c2d <cprintf>
f0102299:	83 c4 10             	add    $0x10,%esp
f010229c:	eb 1d                	jmp    f01022bb <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010229e:	83 ec 0c             	sub    $0xc,%esp
f01022a1:	6a 01                	push   $0x1
f01022a3:	e8 6e ad 00 00       	call   f010d016 <enableModifiedBuffer>
f01022a8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01022ab:	83 ec 0c             	sub    $0xc,%esp
f01022ae:	68 e0 3f 13 f0       	push   $0xf0133fe0
f01022b3:	e8 75 e9 ff ff       	call   f0100c2d <cprintf>
f01022b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c0:	c9                   	leave  
f01022c1:	c3                   	ret    

f01022c2 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01022c2:	55                   	push   %ebp
f01022c3:	89 e5                	mov    %esp,%ebp
f01022c5:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01022c8:	83 ec 0c             	sub    $0xc,%esp
f01022cb:	6a 00                	push   $0x0
f01022cd:	e8 5c ad 00 00       	call   f010d02e <enableBuffering>
f01022d2:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01022d5:	83 ec 0c             	sub    $0xc,%esp
f01022d8:	6a 00                	push   $0x0
f01022da:	e8 37 ad 00 00       	call   f010d016 <enableModifiedBuffer>
f01022df:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01022e2:	83 ec 0c             	sub    $0xc,%esp
f01022e5:	68 00 40 13 f0       	push   $0xf0134000
f01022ea:	e8 3e e9 ff ff       	call   f0100c2d <cprintf>
f01022ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f7:	c9                   	leave  
f01022f8:	c3                   	ret    

f01022f9 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01022ff:	83 ec 0c             	sub    $0xc,%esp
f0102302:	6a 01                	push   $0x1
f0102304:	e8 25 ad 00 00       	call   f010d02e <enableBuffering>
f0102309:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010230c:	83 ec 0c             	sub    $0xc,%esp
f010230f:	6a 01                	push   $0x1
f0102311:	e8 00 ad 00 00       	call   f010d016 <enableModifiedBuffer>
f0102316:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102319:	e8 36 ad 00 00       	call   f010d054 <getModifiedBufferLength>
f010231e:	85 c0                	test   %eax,%eax
f0102320:	75 59                	jne    f010237b <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 1c 40 13 f0       	push   $0xf013401c
f010232a:	e8 fe e8 ff ff       	call   f0100c2d <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102332:	83 ec 08             	sub    $0x8,%esp
f0102335:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102338:	50                   	push   %eax
f0102339:	68 4c 40 13 f0       	push   $0xf013404c
f010233e:	e8 4e db 02 00       	call   f012fe91 <readline>
f0102343:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102346:	83 ec 04             	sub    $0x4,%esp
f0102349:	6a 0a                	push   $0xa
f010234b:	6a 00                	push   $0x0
f010234d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102350:	50                   	push   %eax
f0102351:	e8 a1 e0 02 00       	call   f01303f7 <strtol>
f0102356:	83 c4 10             	add    $0x10,%esp
f0102359:	83 ec 0c             	sub    $0xc,%esp
f010235c:	50                   	push   %eax
f010235d:	e8 e4 ac 00 00       	call   f010d046 <setModifiedBufferLength>
f0102362:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102365:	e8 ea ac 00 00       	call   f010d054 <getModifiedBufferLength>
f010236a:	83 ec 08             	sub    $0x8,%esp
f010236d:	50                   	push   %eax
f010236e:	68 78 40 13 f0       	push   $0xf0134078
f0102373:	e8 b5 e8 ff ff       	call   f0100c2d <cprintf>
f0102378:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010237b:	83 ec 0c             	sub    $0xc,%esp
f010237e:	68 9d 40 13 f0       	push   $0xf013409d
f0102383:	e8 a5 e8 ff ff       	call   f0100c2d <cprintf>
f0102388:	83 c4 10             	add    $0x10,%esp
	return 0;
f010238b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102390:	c9                   	leave  
f0102391:	c3                   	ret    

f0102392 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102392:	55                   	push   %ebp
f0102393:	89 e5                	mov    %esp,%ebp
f0102395:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102398:	e8 9f ac 00 00       	call   f010d03c <isBufferingEnabled>
f010239d:	84 c0                	test   %al,%al
f010239f:	75 12                	jne    f01023b3 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01023a1:	83 ec 0c             	sub    $0xc,%esp
f01023a4:	68 b8 40 13 f0       	push   $0xf01340b8
f01023a9:	e8 7f e8 ff ff       	call   f0100c2d <cprintf>
f01023ae:	83 c4 10             	add    $0x10,%esp
f01023b1:	eb 19                	jmp    f01023cc <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01023b3:	e8 6c ac 00 00       	call   f010d024 <isModifiedBufferEnabled>
f01023b8:	84 c0                	test   %al,%al
f01023ba:	75 10                	jne    f01023cc <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01023bc:	83 ec 0c             	sub    $0xc,%esp
f01023bf:	68 08 41 13 f0       	push   $0xf0134108
f01023c4:	e8 64 e8 ff ff       	call   f0100c2d <cprintf>
f01023c9:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01023cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023cf:	83 c0 04             	add    $0x4,%eax
f01023d2:	8b 00                	mov    (%eax),%eax
f01023d4:	83 ec 04             	sub    $0x4,%esp
f01023d7:	6a 0a                	push   $0xa
f01023d9:	6a 00                	push   $0x0
f01023db:	50                   	push   %eax
f01023dc:	e8 16 e0 02 00       	call   f01303f7 <strtol>
f01023e1:	83 c4 10             	add    $0x10,%esp
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	50                   	push   %eax
f01023e8:	e8 59 ac 00 00       	call   f010d046 <setModifiedBufferLength>
f01023ed:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01023f0:	e8 5f ac 00 00       	call   f010d054 <getModifiedBufferLength>
f01023f5:	83 ec 08             	sub    $0x8,%esp
f01023f8:	50                   	push   %eax
f01023f9:	68 78 40 13 f0       	push   $0xf0134078
f01023fe:	e8 2a e8 ff ff       	call   f0100c2d <cprintf>
f0102403:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102406:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010240b:	c9                   	leave  
f010240c:	c3                   	ret    

f010240d <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010240d:	55                   	push   %ebp
f010240e:	89 e5                	mov    %esp,%ebp
f0102410:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102413:	e8 24 ac 00 00       	call   f010d03c <isBufferingEnabled>
f0102418:	84 c0                	test   %al,%al
f010241a:	75 12                	jne    f010242e <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010241c:	83 ec 0c             	sub    $0xc,%esp
f010241f:	68 b8 40 13 f0       	push   $0xf01340b8
f0102424:	e8 04 e8 ff ff       	call   f0100c2d <cprintf>
f0102429:	83 c4 10             	add    $0x10,%esp
f010242c:	eb 19                	jmp    f0102447 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010242e:	e8 f1 ab 00 00       	call   f010d024 <isModifiedBufferEnabled>
f0102433:	84 c0                	test   %al,%al
f0102435:	75 10                	jne    f0102447 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102437:	83 ec 0c             	sub    $0xc,%esp
f010243a:	68 08 41 13 f0       	push   $0xf0134108
f010243f:	e8 e9 e7 ff ff       	call   f0100c2d <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102447:	e8 08 ac 00 00       	call   f010d054 <getModifiedBufferLength>
f010244c:	83 ec 08             	sub    $0x8,%esp
f010244f:	50                   	push   %eax
f0102450:	68 4e 41 13 f0       	push   $0xf013414e
f0102455:	e8 d3 e7 ff ff       	call   f0100c2d <cprintf>
f010245a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010245d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102462:	c9                   	leave  
f0102463:	c3                   	ret    

f0102464 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102464:	55                   	push   %ebp
f0102465:	89 e5                	mov    %esp,%ebp
f0102467:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010246a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102471:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102475:	75 1b                	jne    f0102492 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102477:	8b 45 0c             	mov    0xc(%ebp),%eax
f010247a:	83 c0 04             	add    $0x4,%eax
f010247d:	8b 00                	mov    (%eax),%eax
f010247f:	83 ec 04             	sub    $0x4,%esp
f0102482:	6a 0a                	push   $0xa
f0102484:	6a 00                	push   $0x0
f0102486:	50                   	push   %eax
f0102487:	e8 6b df 02 00       	call   f01303f7 <strtol>
f010248c:	83 c4 10             	add    $0x10,%esp
f010248f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102492:	e8 b3 e9 ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f0102497:	84 c0                	test   %al,%al
f0102499:	74 0a                	je     f01024a5 <command_test_kmalloc+0x41>
		test_kmalloc();
f010249b:	e8 03 43 01 00       	call   f01167a3 <test_kmalloc>
f01024a0:	e9 e8 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01024a5:	e8 b4 e9 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01024aa:	84 c0                	test   %al,%al
f01024ac:	74 44                	je     f01024f2 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01024ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024b2:	75 1a                	jne    f01024ce <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01024b4:	83 ec 0c             	sub    $0xc,%esp
f01024b7:	68 6c 41 13 f0       	push   $0xf013416c
f01024bc:	e8 6c e7 ff ff       	call   f0100c2d <cprintf>
f01024c1:	83 c4 10             	add    $0x10,%esp
			return 0;
f01024c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01024c9:	e9 c4 00 00 00       	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01024ce:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024d2:	75 0a                	jne    f01024de <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01024d4:	e8 53 91 01 00       	call   f011b62c <test_kmalloc_firstfit1>
f01024d9:	e9 af 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01024de:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01024e2:	0f 85 a5 00 00 00    	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01024e8:	e8 e1 a4 01 00       	call   f011c9ce <test_kmalloc_firstfit2>
f01024ed:	e9 9b 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01024f2:	e8 7c e9 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01024f7:	84 c0                	test   %al,%al
f01024f9:	74 44                	je     f010253f <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01024fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024ff:	75 17                	jne    f0102518 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102501:	83 ec 0c             	sub    $0xc,%esp
f0102504:	68 bc 41 13 f0       	push   $0xf01341bc
f0102509:	e8 1f e7 ff ff       	call   f0100c2d <cprintf>
f010250e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102511:	b8 00 00 00 00       	mov    $0x0,%eax
f0102516:	eb 7a                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102518:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010251c:	75 07                	jne    f0102525 <command_test_kmalloc+0xc1>
			test_kmalloc();
f010251e:	e8 80 42 01 00       	call   f01167a3 <test_kmalloc>
f0102523:	eb 68                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102525:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102529:	75 07                	jne    f0102532 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f010252b:	e8 c6 6b 01 00       	call   f01190f6 <test_kmalloc_bestfit1>
f0102530:	eb 5b                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102532:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102536:	75 55                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102538:	e8 0f 7e 01 00       	call   f011a34c <test_kmalloc_bestfit2>
f010253d:	eb 4e                	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010253f:	e8 44 e9 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102544:	84 c0                	test   %al,%al
f0102546:	74 37                	je     f010257f <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010254c:	75 17                	jne    f0102565 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010254e:	83 ec 0c             	sub    $0xc,%esp
f0102551:	68 0c 42 13 f0       	push   $0xf013420c
f0102556:	e8 d2 e6 ff ff       	call   f0100c2d <cprintf>
f010255b:	83 c4 10             	add    $0x10,%esp
			return 0;
f010255e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102563:	eb 2d                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102565:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102569:	75 07                	jne    f0102572 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010256b:	e8 33 42 01 00       	call   f01167a3 <test_kmalloc>
f0102570:	eb 1b                	jmp    f010258d <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102572:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102576:	75 15                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102578:	e8 84 54 01 00       	call   f0117a01 <test_kmalloc_nextfit>
f010257d:	eb 0e                	jmp    f010258d <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010257f:	e8 19 e9 ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f0102584:	84 c0                	test   %al,%al
f0102586:	74 05                	je     f010258d <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102588:	e8 d6 b2 01 00       	call   f011d863 <test_kmalloc_worstfit>
	return 0;
f010258d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102592:	c9                   	leave  
f0102593:	c3                   	ret    

f0102594 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102594:	55                   	push   %ebp
f0102595:	89 e5                	mov    %esp,%ebp
f0102597:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010259a:	e8 d4 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f010259f:	84 c0                	test   %al,%al
f01025a1:	75 09                	jne    f01025ac <command_test_kfree+0x18>
f01025a3:	e8 b6 e8 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	74 07                	je     f01025b3 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01025ac:	e8 54 ea 01 00       	call   f0121005 <test_kfree_bestfirstfit>
f01025b1:	eb 05                	jmp    f01025b8 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01025b3:	e8 fb c8 01 00       	call   f011eeb3 <test_kfree>
	}
	return 0;
f01025b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01025c5:	e8 37 04 02 00       	call   f0122a01 <test_kheap_phys_addr>
	return 0;
f01025ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025cf:	c9                   	leave  
f01025d0:	c3                   	ret    

f01025d1 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01025d1:	55                   	push   %ebp
f01025d2:	89 e5                	mov    %esp,%ebp
f01025d4:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01025d7:	e8 f5 18 02 00       	call   f0123ed1 <test_kheap_virt_addr>
	return 0;
f01025dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025e1:	c9                   	leave  
f01025e2:	c3                   	ret    

f01025e3 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01025e3:	55                   	push   %ebp
f01025e4:	89 e5                	mov    %esp,%ebp
f01025e6:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01025e9:	e8 c0 2d 02 00       	call   f01253ae <test_three_creation_functions>
	return 0;
f01025ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025f3:	c9                   	leave  
f01025f4:	c3                   	ret    

f01025f5 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01025f5:	55                   	push   %ebp
f01025f6:	89 e5                	mov    %esp,%ebp
f01025f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01025fb:	e8 88 e8 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102600:	84 c0                	test   %al,%al
f0102602:	74 07                	je     f010260b <command_test_krealloc+0x16>
		test_krealloc();
f0102604:	e8 bc 87 02 00       	call   f012adc5 <test_krealloc>
f0102609:	eb 0e                	jmp    f0102619 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f010260b:	e8 63 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102610:	84 c0                	test   %al,%al
f0102612:	74 05                	je     f0102619 <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102614:	e8 5c a7 02 00       	call   f012cd75 <test_krealloc_BF>
	return 0;
f0102619:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261e:	c9                   	leave  
f010261f:	c3                   	ret    

f0102620 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102620:	55                   	push   %ebp
f0102621:	89 e5                	mov    %esp,%ebp
f0102623:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102626:	e8 ab 2d 01 00       	call   f01153d6 <test_priority_normal_and_higher>
	return 0;
f010262b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102630:	c9                   	leave  
f0102631:	c3                   	ret    

f0102632 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102632:	55                   	push   %ebp
f0102633:	89 e5                	mov    %esp,%ebp
f0102635:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102638:	e8 73 37 01 00       	call   f0115db0 <test_priority_normal_and_lower>
	return 0;
f010263d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102642:	c9                   	leave  
f0102643:	c3                   	ret    

f0102644 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102644:	55                   	push   %ebp
f0102645:	89 e5                	mov    %esp,%ebp
f0102647:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010264a:	e8 99 2f 02 00       	call   f01255e8 <test_kfreeall>
	return 0;
f010264f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102654:	c9                   	leave  
f0102655:	c3                   	ret    

f0102656 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102656:	55                   	push   %ebp
f0102657:	89 e5                	mov    %esp,%ebp
f0102659:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010265c:	e8 73 46 02 00       	call   f0126cd4 <test_kexpand>
	return 0;
f0102661:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102666:	c9                   	leave  
f0102667:	c3                   	ret    

f0102668 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102668:	55                   	push   %ebp
f0102669:	89 e5                	mov    %esp,%ebp
f010266b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010266e:	e8 e2 53 02 00       	call   f0127a55 <test_kshrink>
	return 0;
f0102673:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102678:	c9                   	leave  
f0102679:	c3                   	ret    

f010267a <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010267a:	55                   	push   %ebp
f010267b:	89 e5                	mov    %esp,%ebp
f010267d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102680:	e8 bd 62 02 00       	call   f0128942 <test_kfreelast>
	return 0;
f0102685:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010268a:	c9                   	leave  
f010268b:	c3                   	ret    

f010268c <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010268c:	55                   	push   %ebp
f010268d:	89 e5                	mov    %esp,%ebp
f010268f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102692:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102695:	83 c0 04             	add    $0x4,%eax
f0102698:	8b 00                	mov    (%eax),%eax
f010269a:	83 ec 04             	sub    $0x4,%esp
f010269d:	6a 0a                	push   $0xa
f010269f:	6a 00                	push   $0x0
f01026a1:	50                   	push   %eax
f01026a2:	e8 50 dd 02 00       	call   f01303f7 <strtol>
f01026a7:	83 c4 10             	add    $0x10,%esp
f01026aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01026ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01026b4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026bb:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f01026c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01026c3:	eb 3d                	jmp    f0102702 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01026c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01026c8:	05 18 da 01 00       	add    $0x1da18,%eax
f01026cd:	83 ec 08             	sub    $0x8,%esp
f01026d0:	68 5a 42 13 f0       	push   $0xf013425a
f01026d5:	50                   	push   %eax
f01026d6:	e8 c8 da 02 00       	call   f01301a3 <strcmp>
f01026db:	83 c4 10             	add    $0x10,%esp
f01026de:	85 c0                	test   %eax,%eax
f01026e0:	75 12                	jne    f01026f4 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01026e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026e6:	74 07                	je     f01026ef <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01026e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01026ef:	ff 45 f4             	incl   -0xc(%ebp)
f01026f2:	eb 06                	jmp    f01026fa <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01026f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026f8:	74 31                	je     f010272b <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026fa:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f01026ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102702:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102706:	74 08                	je     f0102710 <command_test_sc_MLFQ+0x84>
f0102708:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010270b:	8b 40 44             	mov    0x44(%eax),%eax
f010270e:	eb 05                	jmp    f0102715 <command_test_sc_MLFQ+0x89>
f0102710:	b8 00 00 00 00       	mov    $0x0,%eax
f0102715:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f010271a:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f010271f:	85 c0                	test   %eax,%eax
f0102721:	75 a2                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102727:	75 9c                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102729:	eb 01                	jmp    f010272c <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010272b:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010272c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010272f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102732:	75 12                	jne    f0102746 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102734:	83 ec 0c             	sub    $0xc,%esp
f0102737:	68 64 42 13 f0       	push   $0xf0134264
f010273c:	e8 ec e4 ff ff       	call   f0100c2d <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
f0102744:	eb 17                	jmp    f010275d <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102746:	83 ec 04             	sub    $0x4,%esp
f0102749:	68 9d 42 13 f0       	push   $0xf013429d
f010274e:	68 8b 04 00 00       	push   $0x48b
f0102753:	68 f9 34 13 f0       	push   $0xf01334f9
f0102758:	e8 49 da ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f010275d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102762:	c9                   	leave  
f0102763:	c3                   	ret    

f0102764 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102764:	55                   	push   %ebp
f0102765:	89 e5                	mov    %esp,%ebp
f0102767:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010276a:	e8 b8 d6 00 00       	call   f010fe27 <TestAutoCompleteCommand>
f010276f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102772:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102777:	c9                   	leave  
f0102778:	c3                   	ret    

f0102779 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102779:	55                   	push   %ebp
f010277a:	89 e5                	mov    %esp,%ebp
f010277c:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010277f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102783:	74 1a                	je     f010279f <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102785:	83 ec 0c             	sub    $0xc,%esp
f0102788:	68 b4 42 13 f0       	push   $0xf01342b4
f010278d:	e8 9b e4 ff ff       	call   f0100c2d <cprintf>
f0102792:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102795:	b8 00 00 00 00       	mov    $0x0,%eax
f010279a:	e9 82 01 00 00       	jmp    f0102921 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f010279f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a2:	83 c0 04             	add    $0x4,%eax
f01027a5:	8b 00                	mov    (%eax),%eax
f01027a7:	83 ec 08             	sub    $0x8,%esp
f01027aa:	68 ec 42 13 f0       	push   $0xf01342ec
f01027af:	50                   	push   %eax
f01027b0:	e8 ee d9 02 00       	call   f01301a3 <strcmp>
f01027b5:	83 c4 10             	add    $0x10,%esp
f01027b8:	85 c0                	test   %eax,%eax
f01027ba:	75 0a                	jne    f01027c6 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01027bc:	e8 10 ac 00 00       	call   f010d3d1 <test_initialize_MemBlocksList>
f01027c1:	e9 56 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01027c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027c9:	83 c0 04             	add    $0x4,%eax
f01027cc:	8b 00                	mov    (%eax),%eax
f01027ce:	83 ec 08             	sub    $0x8,%esp
f01027d1:	68 f1 42 13 f0       	push   $0xf01342f1
f01027d6:	50                   	push   %eax
f01027d7:	e8 c7 d9 02 00       	call   f01301a3 <strcmp>
f01027dc:	83 c4 10             	add    $0x10,%esp
f01027df:	85 c0                	test   %eax,%eax
f01027e1:	75 0a                	jne    f01027ed <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01027e3:	e8 fd ac 00 00       	call   f010d4e5 <test_insert_sorted_allocList>
f01027e8:	e9 2f 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01027ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027f0:	83 c0 04             	add    $0x4,%eax
f01027f3:	8b 00                	mov    (%eax),%eax
f01027f5:	83 ec 08             	sub    $0x8,%esp
f01027f8:	68 f7 42 13 f0       	push   $0xf01342f7
f01027fd:	50                   	push   %eax
f01027fe:	e8 a0 d9 02 00       	call   f01301a3 <strcmp>
f0102803:	83 c4 10             	add    $0x10,%esp
f0102806:	85 c0                	test   %eax,%eax
f0102808:	75 0a                	jne    f0102814 <command_test_lists+0x9b>
	{
		test_find_block();
f010280a:	e8 94 b1 00 00       	call   f010d9a3 <test_find_block>
f010280f:	e9 08 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102814:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102817:	83 c0 04             	add    $0x4,%eax
f010281a:	8b 00                	mov    (%eax),%eax
f010281c:	83 ec 08             	sub    $0x8,%esp
f010281f:	68 fc 42 13 f0       	push   $0xf01342fc
f0102824:	50                   	push   %eax
f0102825:	e8 79 d9 02 00       	call   f01301a3 <strcmp>
f010282a:	83 c4 10             	add    $0x10,%esp
f010282d:	85 c0                	test   %eax,%eax
f010282f:	74 1d                	je     f010284e <command_test_lists+0xd5>
f0102831:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102834:	83 c0 04             	add    $0x4,%eax
f0102837:	8b 00                	mov    (%eax),%eax
f0102839:	83 ec 08             	sub    $0x8,%esp
f010283c:	68 ff 42 13 f0       	push   $0xf01342ff
f0102841:	50                   	push   %eax
f0102842:	e8 5c d9 02 00       	call   f01301a3 <strcmp>
f0102847:	83 c4 10             	add    $0x10,%esp
f010284a:	85 c0                	test   %eax,%eax
f010284c:	75 0a                	jne    f0102858 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f010284e:	e8 ab b4 00 00       	call   f010dcfe <test_alloc_block_FF>
f0102853:	e9 c4 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102858:	8b 45 0c             	mov    0xc(%ebp),%eax
f010285b:	83 c0 04             	add    $0x4,%eax
f010285e:	8b 00                	mov    (%eax),%eax
f0102860:	83 ec 08             	sub    $0x8,%esp
f0102863:	68 02 43 13 f0       	push   $0xf0134302
f0102868:	50                   	push   %eax
f0102869:	e8 35 d9 02 00       	call   f01301a3 <strcmp>
f010286e:	83 c4 10             	add    $0x10,%esp
f0102871:	85 c0                	test   %eax,%eax
f0102873:	74 1d                	je     f0102892 <command_test_lists+0x119>
f0102875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102878:	83 c0 04             	add    $0x4,%eax
f010287b:	8b 00                	mov    (%eax),%eax
f010287d:	83 ec 08             	sub    $0x8,%esp
f0102880:	68 05 43 13 f0       	push   $0xf0134305
f0102885:	50                   	push   %eax
f0102886:	e8 18 d9 02 00       	call   f01301a3 <strcmp>
f010288b:	83 c4 10             	add    $0x10,%esp
f010288e:	85 c0                	test   %eax,%eax
f0102890:	75 0a                	jne    f010289c <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102892:	e8 e5 b8 00 00       	call   f010e17c <test_alloc_block_BF>
f0102897:	e9 80 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 08             	sub    $0x8,%esp
f01028a7:	68 08 43 13 f0       	push   $0xf0134308
f01028ac:	50                   	push   %eax
f01028ad:	e8 f1 d8 02 00       	call   f01301a3 <strcmp>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	85 c0                	test   %eax,%eax
f01028b7:	74 1d                	je     f01028d6 <command_test_lists+0x15d>
f01028b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bc:	83 c0 04             	add    $0x4,%eax
f01028bf:	8b 00                	mov    (%eax),%eax
f01028c1:	83 ec 08             	sub    $0x8,%esp
f01028c4:	68 0b 43 13 f0       	push   $0xf013430b
f01028c9:	50                   	push   %eax
f01028ca:	e8 d4 d8 02 00       	call   f01301a3 <strcmp>
f01028cf:	83 c4 10             	add    $0x10,%esp
f01028d2:	85 c0                	test   %eax,%eax
f01028d4:	75 07                	jne    f01028dd <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f01028d6:	e8 28 bf 00 00       	call   f010e803 <test_alloc_block_NF>
f01028db:	eb 3f                	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f01028dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e0:	83 c0 04             	add    $0x4,%eax
f01028e3:	8b 00                	mov    (%eax),%eax
f01028e5:	83 ec 08             	sub    $0x8,%esp
f01028e8:	68 0e 43 13 f0       	push   $0xf013430e
f01028ed:	50                   	push   %eax
f01028ee:	e8 b0 d8 02 00       	call   f01301a3 <strcmp>
f01028f3:	83 c4 10             	add    $0x10,%esp
f01028f6:	85 c0                	test   %eax,%eax
f01028f8:	74 1d                	je     f0102917 <command_test_lists+0x19e>
f01028fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028fd:	83 c0 04             	add    $0x4,%eax
f0102900:	8b 00                	mov    (%eax),%eax
f0102902:	83 ec 08             	sub    $0x8,%esp
f0102905:	68 14 43 13 f0       	push   $0xf0134314
f010290a:	50                   	push   %eax
f010290b:	e8 93 d8 02 00       	call   f01301a3 <strcmp>
f0102910:	83 c4 10             	add    $0x10,%esp
f0102913:	85 c0                	test   %eax,%eax
f0102915:	75 05                	jne    f010291c <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102917:	e8 75 c7 00 00       	call   f010f091 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102929:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010292d:	74 1a                	je     f0102949 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010292f:	83 ec 0c             	sub    $0xc,%esp
f0102932:	68 1c 43 13 f0       	push   $0xf013431c
f0102937:	e8 f1 e2 ff ff       	call   f0100c2d <cprintf>
f010293c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010293f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102944:	e9 e1 00 00 00       	jmp    f0102a2a <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010294c:	83 c0 04             	add    $0x4,%eax
f010294f:	8b 00                	mov    (%eax),%eax
f0102951:	83 ec 08             	sub    $0x8,%esp
f0102954:	68 55 43 13 f0       	push   $0xf0134355
f0102959:	50                   	push   %eax
f010295a:	e8 44 d8 02 00       	call   f01301a3 <strcmp>
f010295f:	83 c4 10             	add    $0x10,%esp
f0102962:	85 c0                	test   %eax,%eax
f0102964:	75 0a                	jne    f0102970 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102966:	e8 54 df 00 00       	call   f01108bf <test_cut_paste_pages>
f010296b:	e9 b5 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102973:	83 c0 04             	add    $0x4,%eax
f0102976:	8b 00                	mov    (%eax),%eax
f0102978:	83 ec 08             	sub    $0x8,%esp
f010297b:	68 5e 43 13 f0       	push   $0xf013435e
f0102980:	50                   	push   %eax
f0102981:	e8 1d d8 02 00       	call   f01301a3 <strcmp>
f0102986:	83 c4 10             	add    $0x10,%esp
f0102989:	85 c0                	test   %eax,%eax
f010298b:	75 0a                	jne    f0102997 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f010298d:	e8 78 e9 00 00       	call   f011130a <test_copy_paste_chunk>
f0102992:	e9 8e 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102997:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299a:	83 c0 04             	add    $0x4,%eax
f010299d:	8b 00                	mov    (%eax),%eax
f010299f:	83 ec 08             	sub    $0x8,%esp
f01029a2:	68 68 43 13 f0       	push   $0xf0134368
f01029a7:	50                   	push   %eax
f01029a8:	e8 f6 d7 02 00       	call   f01301a3 <strcmp>
f01029ad:	83 c4 10             	add    $0x10,%esp
f01029b0:	85 c0                	test   %eax,%eax
f01029b2:	75 07                	jne    f01029bb <command_test_chunks+0x98>
	{
		test_share_chunk();
f01029b4:	e8 4f fa 00 00       	call   f0112408 <test_share_chunk>
f01029b9:	eb 6a                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 08             	sub    $0x8,%esp
f01029c6:	68 6e 43 13 f0       	push   $0xf013436e
f01029cb:	50                   	push   %eax
f01029cc:	e8 d2 d7 02 00       	call   f01301a3 <strcmp>
f01029d1:	83 c4 10             	add    $0x10,%esp
f01029d4:	85 c0                	test   %eax,%eax
f01029d6:	75 07                	jne    f01029df <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f01029d8:	e8 53 04 01 00       	call   f0112e30 <test_allocate_chunk>
f01029dd:	eb 46                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f01029df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029e2:	83 c0 04             	add    $0x4,%eax
f01029e5:	8b 00                	mov    (%eax),%eax
f01029e7:	83 ec 08             	sub    $0x8,%esp
f01029ea:	68 77 43 13 f0       	push   $0xf0134377
f01029ef:	50                   	push   %eax
f01029f0:	e8 ae d7 02 00       	call   f01301a3 <strcmp>
f01029f5:	83 c4 10             	add    $0x10,%esp
f01029f8:	85 c0                	test   %eax,%eax
f01029fa:	75 07                	jne    f0102a03 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f01029fc:	e8 de 0c 01 00       	call   f01136df <test_calculate_required_frames>
f0102a01:	eb 22                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102a03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a06:	83 c0 04             	add    $0x4,%eax
f0102a09:	8b 00                	mov    (%eax),%eax
f0102a0b:	83 ec 08             	sub    $0x8,%esp
f0102a0e:	68 86 43 13 f0       	push   $0xf0134386
f0102a13:	50                   	push   %eax
f0102a14:	e8 8a d7 02 00       	call   f01301a3 <strcmp>
f0102a19:	83 c4 10             	add    $0x10,%esp
f0102a1c:	85 c0                	test   %eax,%eax
f0102a1e:	75 05                	jne    f0102a25 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102a20:	e8 2e 15 01 00       	call   f0113f53 <test_calculate_allocated_space>
	}
	return 0;
f0102a25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a2a:	c9                   	leave  
f0102a2b:	c3                   	ret    

f0102a2c <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102a2c:	55                   	push   %ebp
f0102a2d:	89 e5                	mov    %esp,%ebp
f0102a2f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a32:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a36:	74 1a                	je     f0102a52 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102a38:	83 ec 0c             	sub    $0xc,%esp
f0102a3b:	68 98 43 13 f0       	push   $0xf0134398
f0102a40:	e8 e8 e1 ff ff       	call   f0100c2d <cprintf>
f0102a45:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a48:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a4d:	e9 e1 00 00 00       	jmp    f0102b33 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a55:	83 c0 04             	add    $0x4,%eax
f0102a58:	8b 00                	mov    (%eax),%eax
f0102a5a:	83 ec 08             	sub    $0x8,%esp
f0102a5d:	68 ce 43 13 f0       	push   $0xf01343ce
f0102a62:	50                   	push   %eax
f0102a63:	e8 3b d7 02 00       	call   f01301a3 <strcmp>
f0102a68:	83 c4 10             	add    $0x10,%esp
f0102a6b:	85 c0                	test   %eax,%eax
f0102a6d:	75 0a                	jne    f0102a79 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102a6f:	e8 38 d5 00 00       	call   f010ffac <test_pt_set_page_permissions>
f0102a74:	e9 b5 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102a79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a7c:	83 c0 04             	add    $0x4,%eax
f0102a7f:	8b 00                	mov    (%eax),%eax
f0102a81:	83 ec 08             	sub    $0x8,%esp
f0102a84:	68 d6 43 13 f0       	push   $0xf01343d6
f0102a89:	50                   	push   %eax
f0102a8a:	e8 14 d7 02 00       	call   f01301a3 <strcmp>
f0102a8f:	83 c4 10             	add    $0x10,%esp
f0102a92:	85 c0                	test   %eax,%eax
f0102a94:	75 0a                	jne    f0102aa0 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102a96:	e8 74 d7 00 00       	call   f011020f <test_pt_set_page_permissions_invalid_va>
f0102a9b:	e9 8e 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa3:	83 c0 04             	add    $0x4,%eax
f0102aa6:	8b 00                	mov    (%eax),%eax
f0102aa8:	83 ec 08             	sub    $0x8,%esp
f0102aab:	68 de 43 13 f0       	push   $0xf01343de
f0102ab0:	50                   	push   %eax
f0102ab1:	e8 ed d6 02 00       	call   f01301a3 <strcmp>
f0102ab6:	83 c4 10             	add    $0x10,%esp
f0102ab9:	85 c0                	test   %eax,%eax
f0102abb:	75 07                	jne    f0102ac4 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102abd:	e8 96 d7 00 00       	call   f0110258 <test_pt_get_page_permissions>
f0102ac2:	eb 6a                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 e6 43 13 f0       	push   $0xf01343e6
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 c9 d6 02 00       	call   f01301a3 <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102ae1:	e8 b6 d8 00 00       	call   f011039c <test_pt_clear_page_table_entry>
f0102ae6:	eb 46                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 ed 43 13 f0       	push   $0xf01343ed
f0102af8:	50                   	push   %eax
f0102af9:	e8 a5 d6 02 00       	call   f01301a3 <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	75 07                	jne    f0102b0c <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102b05:	e8 ef d9 00 00       	call   f01104f9 <test_pt_clear_page_table_entry_invalid_va>
f0102b0a:	eb 22                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 f4 43 13 f0       	push   $0xf01343f4
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 81 d6 02 00       	call   f01301a3 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 05                	jne    f0102b2e <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102b29:	e8 03 da 00 00       	call   f0110531 <test_virtual_to_physical>
	}
	return 0;
f0102b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b33:	c9                   	leave  
f0102b34:	c3                   	ret    

f0102b35 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102b35:	55                   	push   %ebp
f0102b36:	89 e5                	mov    %esp,%ebp
f0102b38:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3e:	83 c0 08             	add    $0x8,%eax
f0102b41:	8b 00                	mov    (%eax),%eax
f0102b43:	83 ec 08             	sub    $0x8,%esp
f0102b46:	68 f8 43 13 f0       	push   $0xf01343f8
f0102b4b:	50                   	push   %eax
f0102b4c:	e8 52 d6 02 00       	call   f01301a3 <strcmp>
f0102b51:	83 c4 10             	add    $0x10,%esp
f0102b54:	85 c0                	test   %eax,%eax
f0102b56:	75 20                	jne    f0102b78 <command_test_kheap+0x43>
f0102b58:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b5c:	74 1a                	je     f0102b78 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102b5e:	83 ec 0c             	sub    $0xc,%esp
f0102b61:	68 00 44 13 f0       	push   $0xf0134400
f0102b66:	e8 c2 e0 ff ff       	call   f0100c2d <cprintf>
f0102b6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b73:	e9 33 03 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7b:	83 c0 08             	add    $0x8,%eax
f0102b7e:	8b 00                	mov    (%eax),%eax
f0102b80:	83 ec 08             	sub    $0x8,%esp
f0102b83:	68 f8 43 13 f0       	push   $0xf01343f8
f0102b88:	50                   	push   %eax
f0102b89:	e8 15 d6 02 00       	call   f01301a3 <strcmp>
f0102b8e:	83 c4 10             	add    $0x10,%esp
f0102b91:	85 c0                	test   %eax,%eax
f0102b93:	74 20                	je     f0102bb5 <command_test_kheap+0x80>
f0102b95:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b99:	74 1a                	je     f0102bb5 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102b9b:	83 ec 0c             	sub    $0xc,%esp
f0102b9e:	68 50 44 13 f0       	push   $0xf0134450
f0102ba3:	e8 85 e0 ff ff       	call   f0100c2d <cprintf>
f0102ba8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bab:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb0:	e9 f6 02 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bb8:	83 c0 04             	add    $0x4,%eax
f0102bbb:	8b 00                	mov    (%eax),%eax
f0102bbd:	83 ec 08             	sub    $0x8,%esp
f0102bc0:	68 fc 42 13 f0       	push   $0xf01342fc
f0102bc5:	50                   	push   %eax
f0102bc6:	e8 d8 d5 02 00       	call   f01301a3 <strcmp>
f0102bcb:	83 c4 10             	add    $0x10,%esp
f0102bce:	85 c0                	test   %eax,%eax
f0102bd0:	74 1d                	je     f0102bef <command_test_kheap+0xba>
f0102bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bd5:	83 c0 04             	add    $0x4,%eax
f0102bd8:	8b 00                	mov    (%eax),%eax
f0102bda:	83 ec 08             	sub    $0x8,%esp
f0102bdd:	68 ff 42 13 f0       	push   $0xf01342ff
f0102be2:	50                   	push   %eax
f0102be3:	e8 bb d5 02 00       	call   f01301a3 <strcmp>
f0102be8:	83 c4 10             	add    $0x10,%esp
f0102beb:	85 c0                	test   %eax,%eax
f0102bed:	75 1a                	jne    f0102c09 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102bef:	e8 16 e2 ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102bf4:	83 ec 0c             	sub    $0xc,%esp
f0102bf7:	68 98 3e 13 f0       	push   $0xf0133e98
f0102bfc:	e8 2c e0 ff ff       	call   f0100c2d <cprintf>
f0102c01:	83 c4 10             	add    $0x10,%esp
f0102c04:	e9 a0 00 00 00       	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102c09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0c:	83 c0 04             	add    $0x4,%eax
f0102c0f:	8b 00                	mov    (%eax),%eax
f0102c11:	83 ec 08             	sub    $0x8,%esp
f0102c14:	68 02 43 13 f0       	push   $0xf0134302
f0102c19:	50                   	push   %eax
f0102c1a:	e8 84 d5 02 00       	call   f01301a3 <strcmp>
f0102c1f:	83 c4 10             	add    $0x10,%esp
f0102c22:	85 c0                	test   %eax,%eax
f0102c24:	74 1d                	je     f0102c43 <command_test_kheap+0x10e>
f0102c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c29:	83 c0 04             	add    $0x4,%eax
f0102c2c:	8b 00                	mov    (%eax),%eax
f0102c2e:	83 ec 08             	sub    $0x8,%esp
f0102c31:	68 05 43 13 f0       	push   $0xf0134305
f0102c36:	50                   	push   %eax
f0102c37:	e8 67 d5 02 00       	call   f01301a3 <strcmp>
f0102c3c:	83 c4 10             	add    $0x10,%esp
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	75 17                	jne    f0102c5a <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102c43:	e8 d2 e1 ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102c48:	83 ec 0c             	sub    $0xc,%esp
f0102c4b:	68 c8 3e 13 f0       	push   $0xf0133ec8
f0102c50:	e8 d8 df ff ff       	call   f0100c2d <cprintf>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	eb 4f                	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c5d:	83 c0 04             	add    $0x4,%eax
f0102c60:	8b 00                	mov    (%eax),%eax
f0102c62:	83 ec 08             	sub    $0x8,%esp
f0102c65:	68 08 43 13 f0       	push   $0xf0134308
f0102c6a:	50                   	push   %eax
f0102c6b:	e8 33 d5 02 00       	call   f01301a3 <strcmp>
f0102c70:	83 c4 10             	add    $0x10,%esp
f0102c73:	85 c0                	test   %eax,%eax
f0102c75:	74 1d                	je     f0102c94 <command_test_kheap+0x15f>
f0102c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7a:	83 c0 04             	add    $0x4,%eax
f0102c7d:	8b 00                	mov    (%eax),%eax
f0102c7f:	83 ec 08             	sub    $0x8,%esp
f0102c82:	68 0b 43 13 f0       	push   $0xf013430b
f0102c87:	50                   	push   %eax
f0102c88:	e8 16 d5 02 00       	call   f01301a3 <strcmp>
f0102c8d:	83 c4 10             	add    $0x10,%esp
f0102c90:	85 c0                	test   %eax,%eax
f0102c92:	75 15                	jne    f0102ca9 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102c94:	e8 91 e1 ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102c99:	83 ec 0c             	sub    $0xc,%esp
f0102c9c:	68 f4 3e 13 f0       	push   $0xf0133ef4
f0102ca1:	e8 87 df ff ff       	call   f0100c2d <cprintf>
f0102ca6:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cac:	83 c0 08             	add    $0x8,%eax
f0102caf:	8b 00                	mov    (%eax),%eax
f0102cb1:	83 ec 08             	sub    $0x8,%esp
f0102cb4:	68 f8 43 13 f0       	push   $0xf01343f8
f0102cb9:	50                   	push   %eax
f0102cba:	e8 e4 d4 02 00       	call   f01301a3 <strcmp>
f0102cbf:	83 c4 10             	add    $0x10,%esp
f0102cc2:	85 c0                	test   %eax,%eax
f0102cc4:	0f 85 13 01 00 00    	jne    f0102ddd <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102cca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ccd:	83 c0 0c             	add    $0xc,%eax
f0102cd0:	8b 00                	mov    (%eax),%eax
f0102cd2:	83 ec 04             	sub    $0x4,%esp
f0102cd5:	6a 0a                	push   $0xa
f0102cd7:	6a 00                	push   $0x0
f0102cd9:	50                   	push   %eax
f0102cda:	e8 18 d7 02 00       	call   f01303f7 <strtol>
f0102cdf:	83 c4 10             	add    $0x10,%esp
f0102ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ce5:	e8 74 e1 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102cea:	84 c0                	test   %al,%al
f0102cec:	74 54                	je     f0102d42 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cf2:	75 1a                	jne    f0102d0e <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102cf4:	83 ec 0c             	sub    $0xc,%esp
f0102cf7:	68 6c 41 13 f0       	push   $0xf013416c
f0102cfc:	e8 2c df ff ff       	call   f0100c2d <cprintf>
f0102d01:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d04:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d09:	e9 9d 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102d0e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d12:	75 0a                	jne    f0102d1e <command_test_kheap+0x1e9>
				test_kmalloc();
f0102d14:	e8 8a 3a 01 00       	call   f01167a3 <test_kmalloc>
f0102d19:	e9 b5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d1e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d22:	75 0a                	jne    f0102d2e <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102d24:	e8 03 89 01 00       	call   f011b62c <test_kmalloc_firstfit1>
f0102d29:	e9 a5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d2e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d32:	0f 85 9b 00 00 00    	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102d38:	e8 91 9c 01 00       	call   f011c9ce <test_kmalloc_firstfit2>
f0102d3d:	e9 91 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102d42:	e8 2c e1 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102d47:	84 c0                	test   %al,%al
f0102d49:	74 47                	je     f0102d92 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102d4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d4f:	75 1a                	jne    f0102d6b <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102d51:	83 ec 0c             	sub    $0xc,%esp
f0102d54:	68 bc 41 13 f0       	push   $0xf01341bc
f0102d59:	e8 cf de ff ff       	call   f0100c2d <cprintf>
f0102d5e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d61:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d66:	e9 40 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102d6b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d6f:	75 07                	jne    f0102d78 <command_test_kheap+0x243>
				test_kmalloc();
f0102d71:	e8 2d 3a 01 00       	call   f01167a3 <test_kmalloc>
f0102d76:	eb 5b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d78:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d7c:	75 07                	jne    f0102d85 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102d7e:	e8 73 63 01 00       	call   f01190f6 <test_kmalloc_bestfit1>
f0102d83:	eb 4e                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d85:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d89:	75 48                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102d8b:	e8 bc 75 01 00       	call   f011a34c <test_kmalloc_bestfit2>
f0102d90:	eb 41                	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102d92:	e8 f1 e0 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102d97:	84 c0                	test   %al,%al
f0102d99:	74 38                	je     f0102dd3 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102d9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d9f:	75 1a                	jne    f0102dbb <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102da1:	83 ec 0c             	sub    $0xc,%esp
f0102da4:	68 0c 42 13 f0       	push   $0xf013420c
f0102da9:	e8 7f de ff ff       	call   f0100c2d <cprintf>
f0102dae:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102db6:	e9 f0 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102dbb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102dbf:	75 07                	jne    f0102dc8 <command_test_kheap+0x293>
				test_kmalloc();
f0102dc1:	e8 dd 39 01 00       	call   f01167a3 <test_kmalloc>
f0102dc6:	eb 0b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102dc8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102dcc:	75 05                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102dce:	e8 2e 4c 01 00       	call   f0117a01 <test_kmalloc_nextfit>
		}
		return 0;
f0102dd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dd8:	e9 ce 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 08             	add    $0x8,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 94 44 13 f0       	push   $0xf0134494
f0102ded:	50                   	push   %eax
f0102dee:	e8 b0 d3 02 00       	call   f01301a3 <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 28                	jne    f0102e22 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102dfa:	e8 74 e0 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102dff:	84 c0                	test   %al,%al
f0102e01:	75 09                	jne    f0102e0c <command_test_kheap+0x2d7>
f0102e03:	e8 56 e0 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102e08:	84 c0                	test   %al,%al
f0102e0a:	74 07                	je     f0102e13 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0102e0c:	e8 f4 e1 01 00       	call   f0121005 <test_kfree_bestfirstfit>
f0102e11:	eb 05                	jmp    f0102e18 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0102e13:	e8 9b c0 01 00       	call   f011eeb3 <test_kfree>
		}
		return 0;
f0102e18:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e1d:	e9 89 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0102e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e25:	83 c0 08             	add    $0x8,%eax
f0102e28:	8b 00                	mov    (%eax),%eax
f0102e2a:	83 ec 08             	sub    $0x8,%esp
f0102e2d:	68 9a 44 13 f0       	push   $0xf013449a
f0102e32:	50                   	push   %eax
f0102e33:	e8 6b d3 02 00       	call   f01301a3 <strcmp>
f0102e38:	83 c4 10             	add    $0x10,%esp
f0102e3b:	85 c0                	test   %eax,%eax
f0102e3d:	75 0c                	jne    f0102e4b <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0102e3f:	e8 bd fb 01 00       	call   f0122a01 <test_kheap_phys_addr>
		return 0;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e49:	eb 60                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0102e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4e:	83 c0 08             	add    $0x8,%eax
f0102e51:	8b 00                	mov    (%eax),%eax
f0102e53:	83 ec 08             	sub    $0x8,%esp
f0102e56:	68 a4 44 13 f0       	push   $0xf01344a4
f0102e5b:	50                   	push   %eax
f0102e5c:	e8 42 d3 02 00       	call   f01301a3 <strcmp>
f0102e61:	83 c4 10             	add    $0x10,%esp
f0102e64:	85 c0                	test   %eax,%eax
f0102e66:	75 0c                	jne    f0102e74 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0102e68:	e8 64 10 02 00       	call   f0123ed1 <test_kheap_virt_addr>
		return 0;
f0102e6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e72:	eb 37                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0102e74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e77:	83 c0 08             	add    $0x8,%eax
f0102e7a:	8b 00                	mov    (%eax),%eax
f0102e7c:	83 ec 08             	sub    $0x8,%esp
f0102e7f:	68 ae 44 13 f0       	push   $0xf01344ae
f0102e84:	50                   	push   %eax
f0102e85:	e8 19 d3 02 00       	call   f01301a3 <strcmp>
f0102e8a:	83 c4 10             	add    $0x10,%esp
f0102e8d:	85 c0                	test   %eax,%eax
f0102e8f:	75 15                	jne    f0102ea6 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0102e91:	e8 dd df ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102e96:	84 c0                	test   %al,%al
f0102e98:	74 05                	je     f0102e9f <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0102e9a:	e8 d6 9e 02 00       	call   f012cd75 <test_krealloc_BF>
		}
		return 0;
f0102e9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ea4:	eb 05                	jmp    f0102eab <command_test_kheap+0x376>
	}
	return 0;
f0102ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eab:	c9                   	leave  
f0102eac:	c3                   	ret    

f0102ead <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0102ead:	55                   	push   %ebp
f0102eae:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0102eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eb3:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0102eb9:	29 d0                	sub    %edx,%eax
f0102ebb:	c1 f8 03             	sar    $0x3,%eax
f0102ebe:	89 c2                	mov    %eax,%edx
f0102ec0:	89 d0                	mov    %edx,%eax
f0102ec2:	c1 e0 02             	shl    $0x2,%eax
f0102ec5:	01 d0                	add    %edx,%eax
f0102ec7:	c1 e0 02             	shl    $0x2,%eax
f0102eca:	01 d0                	add    %edx,%eax
f0102ecc:	c1 e0 02             	shl    $0x2,%eax
f0102ecf:	01 d0                	add    %edx,%eax
f0102ed1:	89 c1                	mov    %eax,%ecx
f0102ed3:	c1 e1 08             	shl    $0x8,%ecx
f0102ed6:	01 c8                	add    %ecx,%eax
f0102ed8:	89 c1                	mov    %eax,%ecx
f0102eda:	c1 e1 10             	shl    $0x10,%ecx
f0102edd:	01 c8                	add    %ecx,%eax
f0102edf:	01 c0                	add    %eax,%eax
f0102ee1:	01 d0                	add    %edx,%eax
}
f0102ee3:	5d                   	pop    %ebp
f0102ee4:	c3                   	ret    

f0102ee5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0102ee5:	55                   	push   %ebp
f0102ee6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102ee8:	ff 75 08             	pushl  0x8(%ebp)
f0102eeb:	e8 bd ff ff ff       	call   f0102ead <to_frame_number>
f0102ef0:	83 c4 04             	add    $0x4,%esp
f0102ef3:	c1 e0 0c             	shl    $0xc,%eax
}
f0102ef6:	c9                   	leave  
f0102ef7:	c3                   	ret    

f0102ef8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102ef8:	55                   	push   %ebp
f0102ef9:	89 e5                	mov    %esp,%ebp
f0102efb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f01:	c1 e8 0c             	shr    $0xc,%eax
f0102f04:	89 c2                	mov    %eax,%edx
f0102f06:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0102f0b:	39 c2                	cmp    %eax,%edx
f0102f0d:	72 14                	jb     f0102f23 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102f0f:	83 ec 04             	sub    $0x4,%esp
f0102f12:	68 b8 44 13 f0       	push   $0xf01344b8
f0102f17:	6a 55                	push   $0x55
f0102f19:	68 e0 44 13 f0       	push   $0xf01344e0
f0102f1e:	e8 83 d2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0102f23:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0102f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f2c:	c1 e8 0c             	shr    $0xc,%eax
f0102f2f:	89 c1                	mov    %eax,%ecx
f0102f31:	89 c8                	mov    %ecx,%eax
f0102f33:	01 c0                	add    %eax,%eax
f0102f35:	01 c8                	add    %ecx,%eax
f0102f37:	c1 e0 03             	shl    $0x3,%eax
f0102f3a:	01 d0                	add    %edx,%eax
}
f0102f3c:	c9                   	leave  
f0102f3d:	c3                   	ret    

f0102f3e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102f3e:	55                   	push   %ebp
f0102f3f:	89 e5                	mov    %esp,%ebp
f0102f41:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f47:	05 00 14 00 00       	add    $0x1400,%eax
f0102f4c:	c1 e0 03             	shl    $0x3,%eax
f0102f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f52:	83 ec 04             	sub    $0x4,%esp
f0102f55:	6a 08                	push   $0x8
f0102f57:	ff 75 0c             	pushl  0xc(%ebp)
f0102f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f5d:	e8 88 d8 02 00       	call   f01307ea <ide_read>
f0102f62:	83 c4 10             	add    $0x10,%esp
f0102f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102f6b:	c9                   	leave  
f0102f6c:	c3                   	ret    

f0102f6d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102f6d:	55                   	push   %ebp
f0102f6e:	89 e5                	mov    %esp,%ebp
f0102f70:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f76:	05 00 14 00 00       	add    $0x1400,%eax
f0102f7b:	c1 e0 03             	shl    $0x3,%eax
f0102f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f81:	83 ec 04             	sub    $0x4,%esp
f0102f84:	6a 08                	push   $0x8
f0102f86:	ff 75 0c             	pushl  0xc(%ebp)
f0102f89:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f8c:	e8 99 d9 02 00       	call   f013092a <ide_write>
f0102f91:	83 c4 10             	add    $0x10,%esp
f0102f94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0102f97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f9b:	74 14                	je     f0102fb1 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0102f9d:	83 ec 04             	sub    $0x4,%esp
f0102fa0:	68 02 45 13 f0       	push   $0xf0134502
f0102fa5:	6a 2e                	push   $0x2e
f0102fa7:	68 19 45 13 f0       	push   $0xf0134519
f0102fac:	e8 f5 d1 ff ff       	call   f01001a6 <_panic>
	return success;
f0102fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102fb4:	c9                   	leave  
f0102fb5:	c3                   	ret    

f0102fb6 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0102fb6:	55                   	push   %ebp
f0102fb7:	89 e5                	mov    %esp,%ebp
f0102fb9:	53                   	push   %ebx
f0102fba:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0102fbd:	c7 05 14 75 6e f0 00 	movl   $0x0,0xf06e7514
f0102fc4:	00 00 00 
f0102fc7:	c7 05 18 75 6e f0 00 	movl   $0x0,0xf06e7518
f0102fce:	00 00 00 
f0102fd1:	c7 05 20 75 6e f0 00 	movl   $0x0,0xf06e7520
f0102fd8:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0102fdb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0102fe2:	e9 e8 00 00 00       	jmp    f01030cf <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0102fe7:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0102fed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ff0:	89 d0                	mov    %edx,%eax
f0102ff2:	01 c0                	add    %eax,%eax
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c1 e0 03             	shl    $0x3,%eax
f0102ff9:	01 c8                	add    %ecx,%eax
f0102ffb:	83 ec 0c             	sub    $0xc,%esp
f0102ffe:	50                   	push   %eax
f0102fff:	e8 8b 37 00 00       	call   f010678f <initialize_frame_info>
f0103004:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103007:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f010300d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103010:	89 d0                	mov    %edx,%eax
f0103012:	01 c0                	add    %eax,%eax
f0103014:	01 d0                	add    %edx,%eax
f0103016:	c1 e0 03             	shl    $0x3,%eax
f0103019:	01 c8                	add    %ecx,%eax
f010301b:	85 c0                	test   %eax,%eax
f010301d:	75 14                	jne    f0103033 <initialize_disk_page_file+0x7d>
f010301f:	83 ec 04             	sub    $0x4,%esp
f0103022:	68 38 45 13 f0       	push   $0xf0134538
f0103027:	6a 59                	push   $0x59
f0103029:	68 19 45 13 f0       	push   $0xf0134519
f010302e:	e8 73 d1 ff ff       	call   f01001a6 <_panic>
f0103033:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010303c:	89 d0                	mov    %edx,%eax
f010303e:	01 c0                	add    %eax,%eax
f0103040:	01 d0                	add    %edx,%eax
f0103042:	c1 e0 03             	shl    $0x3,%eax
f0103045:	01 c8                	add    %ecx,%eax
f0103047:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f010304d:	89 10                	mov    %edx,(%eax)
f010304f:	8b 00                	mov    (%eax),%eax
f0103051:	85 c0                	test   %eax,%eax
f0103053:	74 1f                	je     f0103074 <initialize_disk_page_file+0xbe>
f0103055:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f010305b:	8b 1d 00 f1 67 f0    	mov    0xf067f100,%ebx
f0103061:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103064:	89 c8                	mov    %ecx,%eax
f0103066:	01 c0                	add    %eax,%eax
f0103068:	01 c8                	add    %ecx,%eax
f010306a:	c1 e0 03             	shl    $0x3,%eax
f010306d:	01 d8                	add    %ebx,%eax
f010306f:	89 42 04             	mov    %eax,0x4(%edx)
f0103072:	eb 19                	jmp    f010308d <initialize_disk_page_file+0xd7>
f0103074:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f010307a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010307d:	89 d0                	mov    %edx,%eax
f010307f:	01 c0                	add    %eax,%eax
f0103081:	01 d0                	add    %edx,%eax
f0103083:	c1 e0 03             	shl    $0x3,%eax
f0103086:	01 c8                	add    %ecx,%eax
f0103088:	a3 18 75 6e f0       	mov    %eax,0xf06e7518
f010308d:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103093:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103096:	89 d0                	mov    %edx,%eax
f0103098:	01 c0                	add    %eax,%eax
f010309a:	01 d0                	add    %edx,%eax
f010309c:	c1 e0 03             	shl    $0x3,%eax
f010309f:	01 c8                	add    %ecx,%eax
f01030a1:	a3 14 75 6e f0       	mov    %eax,0xf06e7514
f01030a6:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f01030ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030af:	89 d0                	mov    %edx,%eax
f01030b1:	01 c0                	add    %eax,%eax
f01030b3:	01 d0                	add    %edx,%eax
f01030b5:	c1 e0 03             	shl    $0x3,%eax
f01030b8:	01 c8                	add    %ecx,%eax
f01030ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01030c1:	a1 20 75 6e f0       	mov    0xf06e7520,%eax
f01030c6:	40                   	inc    %eax
f01030c7:	a3 20 75 6e f0       	mov    %eax,0xf06e7520
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01030cc:	ff 45 f4             	incl   -0xc(%ebp)
f01030cf:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01030d6:	0f 8e 0b ff ff ff    	jle    f0102fe7 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01030dc:	90                   	nop
f01030dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030e0:	c9                   	leave  
f01030e1:	c3                   	ret    

f01030e2 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01030e2:	55                   	push   %ebp
f01030e3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01030e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01030e8:	8b 15 00 f1 67 f0    	mov    0xf067f100,%edx
f01030ee:	29 d0                	sub    %edx,%eax
f01030f0:	c1 f8 03             	sar    $0x3,%eax
f01030f3:	89 c2                	mov    %eax,%edx
f01030f5:	89 d0                	mov    %edx,%eax
f01030f7:	c1 e0 02             	shl    $0x2,%eax
f01030fa:	01 d0                	add    %edx,%eax
f01030fc:	c1 e0 02             	shl    $0x2,%eax
f01030ff:	01 d0                	add    %edx,%eax
f0103101:	c1 e0 02             	shl    $0x2,%eax
f0103104:	01 d0                	add    %edx,%eax
f0103106:	89 c1                	mov    %eax,%ecx
f0103108:	c1 e1 08             	shl    $0x8,%ecx
f010310b:	01 c8                	add    %ecx,%eax
f010310d:	89 c1                	mov    %eax,%ecx
f010310f:	c1 e1 10             	shl    $0x10,%ecx
f0103112:	01 c8                	add    %ecx,%eax
f0103114:	01 c0                	add    %eax,%eax
f0103116:	01 d0                	add    %edx,%eax
}
f0103118:	5d                   	pop    %ebp
f0103119:	c3                   	ret    

f010311a <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010311a:	55                   	push   %ebp
f010311b:	89 e5                	mov    %esp,%ebp
f010311d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103120:	a1 14 75 6e f0       	mov    0xf06e7514,%eax
f0103125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010312c:	75 0a                	jne    f0103138 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010312e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103133:	e9 a7 00 00 00       	jmp    f01031df <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103138:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010313c:	75 14                	jne    f0103152 <allocate_disk_frame+0x38>
f010313e:	83 ec 04             	sub    $0x4,%esp
f0103141:	68 5b 45 13 f0       	push   $0xf013455b
f0103146:	6a 78                	push   $0x78
f0103148:	68 19 45 13 f0       	push   $0xf0134519
f010314d:	e8 54 d0 ff ff       	call   f01001a6 <_panic>
f0103152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103155:	8b 00                	mov    (%eax),%eax
f0103157:	85 c0                	test   %eax,%eax
f0103159:	74 10                	je     f010316b <allocate_disk_frame+0x51>
f010315b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010315e:	8b 00                	mov    (%eax),%eax
f0103160:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103163:	8b 52 04             	mov    0x4(%edx),%edx
f0103166:	89 50 04             	mov    %edx,0x4(%eax)
f0103169:	eb 0b                	jmp    f0103176 <allocate_disk_frame+0x5c>
f010316b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010316e:	8b 40 04             	mov    0x4(%eax),%eax
f0103171:	a3 18 75 6e f0       	mov    %eax,0xf06e7518
f0103176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103179:	8b 40 04             	mov    0x4(%eax),%eax
f010317c:	85 c0                	test   %eax,%eax
f010317e:	74 0f                	je     f010318f <allocate_disk_frame+0x75>
f0103180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103183:	8b 40 04             	mov    0x4(%eax),%eax
f0103186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103189:	8b 12                	mov    (%edx),%edx
f010318b:	89 10                	mov    %edx,(%eax)
f010318d:	eb 0a                	jmp    f0103199 <allocate_disk_frame+0x7f>
f010318f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103192:	8b 00                	mov    (%eax),%eax
f0103194:	a3 14 75 6e f0       	mov    %eax,0xf06e7514
f0103199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010319c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01031a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01031ac:	a1 20 75 6e f0       	mov    0xf06e7520,%eax
f01031b1:	48                   	dec    %eax
f01031b2:	a3 20 75 6e f0       	mov    %eax,0xf06e7520
	initialize_frame_info(ptr_frame_info);
f01031b7:	83 ec 0c             	sub    $0xc,%esp
f01031ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01031bd:	e8 cd 35 00 00       	call   f010678f <initialize_frame_info>
f01031c2:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01031c5:	83 ec 0c             	sub    $0xc,%esp
f01031c8:	ff 75 f4             	pushl  -0xc(%ebp)
f01031cb:	e8 12 ff ff ff       	call   f01030e2 <to_disk_frame_number>
f01031d0:	83 c4 10             	add    $0x10,%esp
f01031d3:	89 c2                	mov    %eax,%edx
f01031d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031d8:	89 10                	mov    %edx,(%eax)
	return 0;
f01031da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031df:	c9                   	leave  
f01031e0:	c3                   	ret    

f01031e1 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01031e1:	55                   	push   %ebp
f01031e2:	89 e5                	mov    %esp,%ebp
f01031e4:	53                   	push   %ebx
f01031e5:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01031e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01031ec:	0f 84 ca 00 00 00    	je     f01032bc <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01031f2:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f01031f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01031fb:	89 d0                	mov    %edx,%eax
f01031fd:	01 c0                	add    %eax,%eax
f01031ff:	01 d0                	add    %edx,%eax
f0103201:	c1 e0 03             	shl    $0x3,%eax
f0103204:	01 c8                	add    %ecx,%eax
f0103206:	85 c0                	test   %eax,%eax
f0103208:	75 17                	jne    f0103221 <free_disk_frame+0x40>
f010320a:	83 ec 04             	sub    $0x4,%esp
f010320d:	68 38 45 13 f0       	push   $0xf0134538
f0103212:	68 85 00 00 00       	push   $0x85
f0103217:	68 19 45 13 f0       	push   $0xf0134519
f010321c:	e8 85 cf ff ff       	call   f01001a6 <_panic>
f0103221:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103227:	8b 55 08             	mov    0x8(%ebp),%edx
f010322a:	89 d0                	mov    %edx,%eax
f010322c:	01 c0                	add    %eax,%eax
f010322e:	01 d0                	add    %edx,%eax
f0103230:	c1 e0 03             	shl    $0x3,%eax
f0103233:	01 c8                	add    %ecx,%eax
f0103235:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f010323b:	89 10                	mov    %edx,(%eax)
f010323d:	8b 00                	mov    (%eax),%eax
f010323f:	85 c0                	test   %eax,%eax
f0103241:	74 1f                	je     f0103262 <free_disk_frame+0x81>
f0103243:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f0103249:	8b 1d 00 f1 67 f0    	mov    0xf067f100,%ebx
f010324f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103252:	89 c8                	mov    %ecx,%eax
f0103254:	01 c0                	add    %eax,%eax
f0103256:	01 c8                	add    %ecx,%eax
f0103258:	c1 e0 03             	shl    $0x3,%eax
f010325b:	01 d8                	add    %ebx,%eax
f010325d:	89 42 04             	mov    %eax,0x4(%edx)
f0103260:	eb 19                	jmp    f010327b <free_disk_frame+0x9a>
f0103262:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103268:	8b 55 08             	mov    0x8(%ebp),%edx
f010326b:	89 d0                	mov    %edx,%eax
f010326d:	01 c0                	add    %eax,%eax
f010326f:	01 d0                	add    %edx,%eax
f0103271:	c1 e0 03             	shl    $0x3,%eax
f0103274:	01 c8                	add    %ecx,%eax
f0103276:	a3 18 75 6e f0       	mov    %eax,0xf06e7518
f010327b:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103281:	8b 55 08             	mov    0x8(%ebp),%edx
f0103284:	89 d0                	mov    %edx,%eax
f0103286:	01 c0                	add    %eax,%eax
f0103288:	01 d0                	add    %edx,%eax
f010328a:	c1 e0 03             	shl    $0x3,%eax
f010328d:	01 c8                	add    %ecx,%eax
f010328f:	a3 14 75 6e f0       	mov    %eax,0xf06e7514
f0103294:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f010329a:	8b 55 08             	mov    0x8(%ebp),%edx
f010329d:	89 d0                	mov    %edx,%eax
f010329f:	01 c0                	add    %eax,%eax
f01032a1:	01 d0                	add    %edx,%eax
f01032a3:	c1 e0 03             	shl    $0x3,%eax
f01032a6:	01 c8                	add    %ecx,%eax
f01032a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032af:	a1 20 75 6e f0       	mov    0xf06e7520,%eax
f01032b4:	40                   	inc    %eax
f01032b5:	a3 20 75 6e f0       	mov    %eax,0xf06e7520
f01032ba:	eb 01                	jmp    f01032bd <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01032bc:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01032bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c0:	c9                   	leave  
f01032c1:	c3                   	ret    

f01032c2 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01032c2:	55                   	push   %ebp
f01032c3:	89 e5                	mov    %esp,%ebp
f01032c5:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01032c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032cb:	c1 e8 16             	shr    $0x16,%eax
f01032ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d8:	01 d0                	add    %edx,%eax
f01032da:	8b 00                	mov    (%eax),%eax
f01032dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01032df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01032e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01032ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01032ed:	c1 e8 0c             	shr    $0xc,%eax
f01032f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01032f3:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01032f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01032fb:	72 17                	jb     f0103314 <get_disk_page_table+0x52>
f01032fd:	ff 75 f0             	pushl  -0x10(%ebp)
f0103300:	68 7c 45 13 f0       	push   $0xf013457c
f0103305:	68 92 00 00 00       	push   $0x92
f010330a:	68 19 45 13 f0       	push   $0xf0134519
f010330f:	e8 92 ce ff ff       	call   f01001a6 <_panic>
f0103314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103317:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010331c:	89 c2                	mov    %eax,%edx
f010331e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103321:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103327:	0f 85 b7 00 00 00    	jne    f01033e4 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010332d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103331:	0f 84 9d 00 00 00    	je     f01033d4 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103337:	83 ec 0c             	sub    $0xc,%esp
f010333a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010333d:	50                   	push   %eax
f010333e:	e8 67 34 00 00       	call   f01067aa <allocate_frame>
f0103343:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103346:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103349:	83 ec 0c             	sub    $0xc,%esp
f010334c:	50                   	push   %eax
f010334d:	e8 93 fb ff ff       	call   f0102ee5 <to_physical_address>
f0103352:	83 c4 10             	add    $0x10,%esp
f0103355:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103358:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010335b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010335e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103361:	c1 e8 0c             	shr    $0xc,%eax
f0103364:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103367:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f010336c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010336f:	72 17                	jb     f0103388 <get_disk_page_table+0xc6>
f0103371:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103374:	68 7c 45 13 f0       	push   $0xf013457c
f0103379:	68 ae 00 00 00       	push   $0xae
f010337e:	68 19 45 13 f0       	push   $0xf0134519
f0103383:	e8 1e ce ff ff       	call   f01001a6 <_panic>
f0103388:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010338b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103390:	89 c2                	mov    %eax,%edx
f0103392:	8b 45 14             	mov    0x14(%ebp),%eax
f0103395:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103397:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010339a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f01033a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a3:	c1 e8 16             	shr    $0x16,%eax
f01033a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01033ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b0:	01 d0                	add    %edx,%eax
f01033b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01033b5:	83 ca 01             	or     $0x1,%edx
f01033b8:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01033ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01033bd:	8b 00                	mov    (%eax),%eax
f01033bf:	83 ec 04             	sub    $0x4,%esp
f01033c2:	68 00 10 00 00       	push   $0x1000
f01033c7:	6a 00                	push   $0x0
f01033c9:	50                   	push   %eax
f01033ca:	e8 b6 ce 02 00       	call   f0130285 <memset>
f01033cf:	83 c4 10             	add    $0x10,%esp
f01033d2:	eb 10                	jmp    f01033e4 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01033d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01033d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01033dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01033e2:	eb 05                	jmp    f01033e9 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01033e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e9:	c9                   	leave  
f01033ea:	c3                   	ret    

f01033eb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01033eb:	55                   	push   %ebp
f01033ec:	89 e5                	mov    %esp,%ebp
f01033ee:	83 ec 28             	sub    $0x28,%esp
f01033f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01033f4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01033f7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01033fb:	74 75                	je     f0103472 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01033fd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103407:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010340c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010340f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103412:	ba 00 00 00 00       	mov    $0x0,%edx
f0103417:	f7 75 f4             	divl   -0xc(%ebp)
f010341a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010341d:	29 d0                	sub    %edx,%eax
f010341f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103422:	73 32                	jae    f0103456 <pf_add_empty_env_page+0x6b>
f0103424:	8b 45 08             	mov    0x8(%ebp),%eax
f0103427:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f010342d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103432:	29 d0                	sub    %edx,%eax
f0103434:	c1 e0 0c             	shl    $0xc,%eax
f0103437:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010343c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010343f:	76 15                	jbe    f0103456 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103441:	8b 45 08             	mov    0x8(%ebp),%eax
f0103444:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010344a:	8d 50 01             	lea    0x1(%eax),%edx
f010344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103450:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103456:	a1 bc 74 6e f0       	mov    0xf06e74bc,%eax
f010345b:	83 ec 04             	sub    $0x4,%esp
f010345e:	50                   	push   %eax
f010345f:	ff 75 0c             	pushl  0xc(%ebp)
f0103462:	ff 75 08             	pushl  0x8(%ebp)
f0103465:	e8 b2 00 00 00       	call   f010351c <pf_add_env_page>
f010346a:	83 c4 10             	add    $0x10,%esp
f010346d:	e9 a8 00 00 00       	jmp    f010351a <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103472:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103479:	76 19                	jbe    f0103494 <pf_add_empty_env_page+0xa9>
f010347b:	68 ac 45 13 f0       	push   $0xf01345ac
f0103480:	68 d2 45 13 f0       	push   $0xf01345d2
f0103485:	68 d1 00 00 00       	push   $0xd1
f010348a:	68 19 45 13 f0       	push   $0xf0134519
f010348f:	e8 12 cd ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103494:	8b 45 08             	mov    0x8(%ebp),%eax
f0103497:	83 c0 64             	add    $0x64,%eax
f010349a:	83 ec 08             	sub    $0x8,%esp
f010349d:	50                   	push   %eax
f010349e:	ff 75 08             	pushl  0x8(%ebp)
f01034a1:	e8 46 06 00 00       	call   f0103aec <get_disk_page_directory>
f01034a6:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01034a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01034ac:	8b 40 64             	mov    0x64(%eax),%eax
f01034af:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01034b2:	52                   	push   %edx
f01034b3:	6a 01                	push   $0x1
f01034b5:	ff 75 0c             	pushl  0xc(%ebp)
f01034b8:	50                   	push   %eax
f01034b9:	e8 04 fe ff ff       	call   f01032c2 <get_disk_page_table>
f01034be:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01034c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01034c7:	c1 ea 0c             	shr    $0xc,%edx
f01034ca:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01034d0:	c1 e2 02             	shl    $0x2,%edx
f01034d3:	01 d0                	add    %edx,%eax
f01034d5:	8b 00                	mov    (%eax),%eax
f01034d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01034da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01034dd:	85 c0                	test   %eax,%eax
f01034df:	75 34                	jne    f0103515 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01034e1:	83 ec 0c             	sub    $0xc,%esp
f01034e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01034e7:	50                   	push   %eax
f01034e8:	e8 2d fc ff ff       	call   f010311a <allocate_disk_frame>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01034f3:	75 07                	jne    f01034fc <pf_add_empty_env_page+0x111>
f01034f5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01034fa:	eb 1e                	jmp    f010351a <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103502:	c1 ea 0c             	shr    $0xc,%edx
f0103505:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010350b:	c1 e2 02             	shl    $0x2,%edx
f010350e:	01 c2                	add    %eax,%edx
f0103510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103513:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103515:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010351a:	c9                   	leave  
f010351b:	c3                   	ret    

f010351c <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010351c:	55                   	push   %ebp
f010351d:	89 e5                	mov    %esp,%ebp
f010351f:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103522:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103529:	76 19                	jbe    f0103544 <pf_add_env_page+0x28>
f010352b:	68 ac 45 13 f0       	push   $0xf01345ac
f0103530:	68 d2 45 13 f0       	push   $0xf01345d2
f0103535:	68 e6 00 00 00       	push   $0xe6
f010353a:	68 19 45 13 f0       	push   $0xf0134519
f010353f:	e8 62 cc ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103544:	8b 45 08             	mov    0x8(%ebp),%eax
f0103547:	83 c0 64             	add    $0x64,%eax
f010354a:	83 ec 08             	sub    $0x8,%esp
f010354d:	50                   	push   %eax
f010354e:	ff 75 08             	pushl  0x8(%ebp)
f0103551:	e8 96 05 00 00       	call   f0103aec <get_disk_page_directory>
f0103556:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103559:	8b 45 08             	mov    0x8(%ebp),%eax
f010355c:	8b 40 64             	mov    0x64(%eax),%eax
f010355f:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103562:	52                   	push   %edx
f0103563:	6a 01                	push   $0x1
f0103565:	ff 75 0c             	pushl  0xc(%ebp)
f0103568:	50                   	push   %eax
f0103569:	e8 54 fd ff ff       	call   f01032c2 <get_disk_page_table>
f010356e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103571:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103574:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103577:	c1 ea 0c             	shr    $0xc,%edx
f010357a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103580:	c1 e2 02             	shl    $0x2,%edx
f0103583:	01 d0                	add    %edx,%eax
f0103585:	8b 00                	mov    (%eax),%eax
f0103587:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010358a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010358d:	85 c0                	test   %eax,%eax
f010358f:	75 34                	jne    f01035c5 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103591:	83 ec 0c             	sub    $0xc,%esp
f0103594:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103597:	50                   	push   %eax
f0103598:	e8 7d fb ff ff       	call   f010311a <allocate_disk_frame>
f010359d:	83 c4 10             	add    $0x10,%esp
f01035a0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01035a3:	75 07                	jne    f01035ac <pf_add_env_page+0x90>
f01035a5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01035aa:	eb 31                	jmp    f01035dd <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01035ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035af:	8b 55 0c             	mov    0xc(%ebp),%edx
f01035b2:	c1 ea 0c             	shr    $0xc,%edx
f01035b5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01035bb:	c1 e2 02             	shl    $0x2,%edx
f01035be:	01 c2                	add    %eax,%edx
f01035c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c3:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01035c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c8:	83 ec 08             	sub    $0x8,%esp
f01035cb:	ff 75 10             	pushl  0x10(%ebp)
f01035ce:	50                   	push   %eax
f01035cf:	e8 99 f9 ff ff       	call   f0102f6d <write_disk_page>
f01035d4:	83 c4 10             	add    $0x10,%esp
f01035d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01035da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01035dd:	c9                   	leave  
f01035de:	c3                   	ret    

f01035df <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01035df:	55                   	push   %ebp
f01035e0:	89 e5                	mov    %esp,%ebp
f01035e2:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01035e5:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035ec:	76 19                	jbe    f0103607 <pf_update_env_page+0x28>
f01035ee:	68 ac 45 13 f0       	push   $0xf01345ac
f01035f3:	68 d2 45 13 f0       	push   $0xf01345d2
f01035f8:	68 08 01 00 00       	push   $0x108
f01035fd:	68 19 45 13 f0       	push   $0xf0134519
f0103602:	e8 9f cb ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103607:	8b 45 08             	mov    0x8(%ebp),%eax
f010360a:	83 c0 64             	add    $0x64,%eax
f010360d:	83 ec 08             	sub    $0x8,%esp
f0103610:	50                   	push   %eax
f0103611:	ff 75 08             	pushl  0x8(%ebp)
f0103614:	e8 d3 04 00 00       	call   f0103aec <get_disk_page_directory>
f0103619:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010361c:	8b 45 08             	mov    0x8(%ebp),%eax
f010361f:	8b 40 64             	mov    0x64(%eax),%eax
f0103622:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103625:	52                   	push   %edx
f0103626:	6a 00                	push   $0x0
f0103628:	ff 75 0c             	pushl  0xc(%ebp)
f010362b:	50                   	push   %eax
f010362c:	e8 91 fc ff ff       	call   f01032c2 <get_disk_page_table>
f0103631:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103637:	85 c0                	test   %eax,%eax
f0103639:	74 29                	je     f0103664 <pf_update_env_page+0x85>
f010363b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010363e:	85 c0                	test   %eax,%eax
f0103640:	0f 84 43 01 00 00    	je     f0103789 <pf_update_env_page+0x1aa>
f0103646:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103649:	8b 55 0c             	mov    0xc(%ebp),%edx
f010364c:	c1 ea 0c             	shr    $0xc,%edx
f010364f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103655:	c1 e2 02             	shl    $0x2,%edx
f0103658:	01 d0                	add    %edx,%eax
f010365a:	8b 00                	mov    (%eax),%eax
f010365c:	85 c0                	test   %eax,%eax
f010365e:	0f 85 25 01 00 00    	jne    f0103789 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103664:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103667:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010366d:	85 c0                	test   %eax,%eax
f010366f:	79 09                	jns    f010367a <pf_update_env_page+0x9b>
f0103671:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103678:	76 38                	jbe    f01036b2 <pf_update_env_page+0xd3>
f010367a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103684:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103689:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010368c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010368f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103694:	f7 75 f0             	divl   -0x10(%ebp)
f0103697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010369a:	29 d0                	sub    %edx,%eax
f010369c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010369f:	0f 87 cd 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
f01036a5:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01036ac:	0f 87 c0 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01036b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01036b8:	83 ec 04             	sub    $0x4,%esp
f01036bb:	8d 55 d0             	lea    -0x30(%ebp),%edx
f01036be:	52                   	push   %edx
f01036bf:	ff 75 0c             	pushl  0xc(%ebp)
f01036c2:	50                   	push   %eax
f01036c3:	e8 39 35 00 00       	call   f0106c01 <get_frame_info>
f01036c8:	83 c4 10             	add    $0x10,%esp
f01036cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01036ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01036d4:	75 52                	jne    f0103728 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01036d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036d9:	83 ec 04             	sub    $0x4,%esp
f01036dc:	50                   	push   %eax
f01036dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01036e0:	ff 75 08             	pushl  0x8(%ebp)
f01036e3:	e8 34 fe ff ff       	call   f010351c <pf_add_env_page>
f01036e8:	83 c4 10             	add    $0x10,%esp
f01036eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01036ee:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01036f2:	75 17                	jne    f010370b <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01036f4:	83 ec 04             	sub    $0x4,%esp
f01036f7:	68 e8 45 13 f0       	push   $0xf01345e8
f01036fc:	68 1d 01 00 00       	push   $0x11d
f0103701:	68 19 45 13 f0       	push   $0xf0134519
f0103706:	e8 9b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010370b:	8b 45 08             	mov    0x8(%ebp),%eax
f010370e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103714:	8d 50 01             	lea    0x1(%eax),%edx
f0103717:	8b 45 08             	mov    0x8(%ebp),%eax
f010371a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0103720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103723:	e9 ff 00 00 00       	jmp    f0103827 <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103728:	83 ec 04             	sub    $0x4,%esp
f010372b:	6a 00                	push   $0x0
f010372d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103730:	ff 75 08             	pushl  0x8(%ebp)
f0103733:	e8 b3 fc ff ff       	call   f01033eb <pf_add_empty_env_page>
f0103738:	83 c4 10             	add    $0x10,%esp
f010373b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010373e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103742:	75 17                	jne    f010375b <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103744:	83 ec 04             	sub    $0x4,%esp
f0103747:	68 14 46 13 f0       	push   $0xf0134614
f010374c:	68 28 01 00 00       	push   $0x128
f0103751:	68 19 45 13 f0       	push   $0xf0134519
f0103756:	e8 4b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010375b:	8b 45 08             	mov    0x8(%ebp),%eax
f010375e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103764:	8d 50 01             	lea    0x1(%eax),%edx
f0103767:	8b 45 08             	mov    0x8(%ebp),%eax
f010376a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103770:	eb 17                	jmp    f0103789 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103772:	83 ec 04             	sub    $0x4,%esp
f0103775:	68 60 46 13 f0       	push   $0xf0134660
f010377a:	68 2f 01 00 00       	push   $0x12f
f010377f:	68 19 45 13 f0       	push   $0xf0134519
f0103784:	e8 1d ca ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 24 fb ff ff       	call   f01032c2 <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01037a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01037a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037a7:	c1 ea 0c             	shr    $0xc,%edx
f01037aa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b0:	c1 e2 02             	shl    $0x2,%edx
f01037b3:	01 d0                	add    %edx,%eax
f01037b5:	8b 00                	mov    (%eax),%eax
f01037b7:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f01037ba:	83 ec 0c             	sub    $0xc,%esp
f01037bd:	ff 75 10             	pushl  0x10(%ebp)
f01037c0:	e8 20 f7 ff ff       	call   f0102ee5 <to_physical_address>
f01037c5:	83 c4 10             	add    $0x10,%esp
f01037c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01037cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037ce:	c1 e8 0c             	shr    $0xc,%eax
f01037d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01037d4:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01037d9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f01037dc:	72 17                	jb     f01037f5 <pf_update_env_page+0x216>
f01037de:	ff 75 dc             	pushl  -0x24(%ebp)
f01037e1:	68 7c 45 13 f0       	push   $0xf013457c
f01037e6:	68 47 01 00 00       	push   $0x147
f01037eb:	68 19 45 13 f0       	push   $0xf0134519
f01037f0:	e8 b1 c9 ff ff       	call   f01001a6 <_panic>
f01037f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037f8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01037fd:	83 ec 08             	sub    $0x8,%esp
f0103800:	50                   	push   %eax
f0103801:	ff 75 e0             	pushl  -0x20(%ebp)
f0103804:	e8 64 f7 ff ff       	call   f0102f6d <write_disk_page>
f0103809:	83 c4 10             	add    $0x10,%esp
f010380c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010380f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103812:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103818:	8d 50 01             	lea    0x1(%eax),%edx
f010381b:	8b 45 08             	mov    0x8(%ebp),%eax
f010381e:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f0103824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103827:	c9                   	leave  
f0103828:	c3                   	ret    

f0103829 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103829:	55                   	push   %ebp
f010382a:	89 e5                	mov    %esp,%ebp
f010382c:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010382f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103832:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103838:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010383d:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103840:	8b 45 08             	mov    0x8(%ebp),%eax
f0103843:	8b 40 64             	mov    0x64(%eax),%eax
f0103846:	85 c0                	test   %eax,%eax
f0103848:	75 0a                	jne    f0103854 <pf_read_env_page+0x2b>
f010384a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010384f:	e9 90 00 00 00       	jmp    f01038e4 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103854:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103857:	8b 45 08             	mov    0x8(%ebp),%eax
f010385a:	8b 40 64             	mov    0x64(%eax),%eax
f010385d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103860:	51                   	push   %ecx
f0103861:	6a 00                	push   $0x0
f0103863:	52                   	push   %edx
f0103864:	50                   	push   %eax
f0103865:	e8 58 fa ff ff       	call   f01032c2 <get_disk_page_table>
f010386a:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010386d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103870:	85 c0                	test   %eax,%eax
f0103872:	75 07                	jne    f010387b <pf_read_env_page+0x52>
f0103874:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103879:	eb 69                	jmp    f01038e4 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010387b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103881:	c1 ea 0c             	shr    $0xc,%edx
f0103884:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010388a:	c1 e2 02             	shl    $0x2,%edx
f010388d:	01 d0                	add    %edx,%eax
f010388f:	8b 00                	mov    (%eax),%eax
f0103891:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103894:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103898:	75 07                	jne    f01038a1 <pf_read_env_page+0x78>
f010389a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010389f:	eb 43                	jmp    f01038e4 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01038a1:	83 ec 08             	sub    $0x8,%esp
f01038a4:	ff 75 0c             	pushl  0xc(%ebp)
f01038a7:	ff 75 f0             	pushl  -0x10(%ebp)
f01038aa:	e8 8f f6 ff ff       	call   f0102f3e <read_disk_page>
f01038af:	83 c4 10             	add    $0x10,%esp
f01038b2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01038b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038be:	6a 40                	push   $0x40
f01038c0:	6a 00                	push   $0x0
f01038c2:	52                   	push   %edx
f01038c3:	50                   	push   %eax
f01038c4:	e8 e3 3b 00 00       	call   f01074ac <pt_set_page_permissions>
f01038c9:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01038cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cf:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01038d5:	8d 50 01             	lea    0x1(%eax),%edx
f01038d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038db:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01038e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01038e4:	c9                   	leave  
f01038e5:	c3                   	ret    

f01038e6 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01038e6:	55                   	push   %ebp
f01038e7:	89 e5                	mov    %esp,%ebp
f01038e9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ef:	8b 40 64             	mov    0x64(%eax),%eax
f01038f2:	85 c0                	test   %eax,%eax
f01038f4:	74 62                	je     f0103958 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 b7 f9 ff ff       	call   f01032c2 <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103911:	85 c0                	test   %eax,%eax
f0103913:	74 46                	je     f010395b <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103915:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103918:	8b 55 0c             	mov    0xc(%ebp),%edx
f010391b:	c1 ea 0c             	shr    $0xc,%edx
f010391e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103924:	c1 e2 02             	shl    $0x2,%edx
f0103927:	01 d0                	add    %edx,%eax
f0103929:	8b 00                	mov    (%eax),%eax
f010392b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103931:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103934:	c1 ea 0c             	shr    $0xc,%edx
f0103937:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010393d:	c1 e2 02             	shl    $0x2,%edx
f0103940:	01 d0                	add    %edx,%eax
f0103942:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103948:	83 ec 0c             	sub    $0xc,%esp
f010394b:	ff 75 f4             	pushl  -0xc(%ebp)
f010394e:	e8 8e f8 ff ff       	call   f01031e1 <free_disk_frame>
f0103953:	83 c4 10             	add    $0x10,%esp
f0103956:	eb 04                	jmp    f010395c <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103958:	90                   	nop
f0103959:	eb 01                	jmp    f010395c <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010395b:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010395c:	c9                   	leave  
f010395d:	c3                   	ret    

f010395e <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010395e:	55                   	push   %ebp
f010395f:	89 e5                	mov    %esp,%ebp
f0103961:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103964:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010396b:	e9 ee 00 00 00       	jmp    f0103a5e <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103970:	8b 45 08             	mov    0x8(%ebp),%eax
f0103973:	8b 40 64             	mov    0x64(%eax),%eax
f0103976:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103979:	c1 e2 02             	shl    $0x2,%edx
f010397c:	01 d0                	add    %edx,%eax
f010397e:	8b 00                	mov    (%eax),%eax
f0103980:	83 e0 01             	and    $0x1,%eax
f0103983:	85 c0                	test   %eax,%eax
f0103985:	0f 84 cf 00 00 00    	je     f0103a5a <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	8b 40 64             	mov    0x64(%eax),%eax
f0103991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103994:	c1 e2 02             	shl    $0x2,%edx
f0103997:	01 d0                	add    %edx,%eax
f0103999:	8b 00                	mov    (%eax),%eax
f010399b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01039a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01039a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01039a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039ac:	c1 e8 0c             	shr    $0xc,%eax
f01039af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01039b2:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01039b7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01039ba:	72 17                	jb     f01039d3 <pf_free_env+0x75>
f01039bc:	ff 75 e8             	pushl  -0x18(%ebp)
f01039bf:	68 7c 45 13 f0       	push   $0xf013457c
f01039c4:	68 96 01 00 00       	push   $0x196
f01039c9:	68 19 45 13 f0       	push   $0xf0134519
f01039ce:	e8 d3 c7 ff ff       	call   f01001a6 <_panic>
f01039d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039d6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01039db:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01039de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01039e5:	eb 3a                	jmp    f0103a21 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01039e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01039f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01039f4:	01 d0                	add    %edx,%eax
f01039f6:	8b 00                	mov    (%eax),%eax
f01039f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01039fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a08:	01 d0                	add    %edx,%eax
f0103a0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103a10:	83 ec 0c             	sub    $0xc,%esp
f0103a13:	ff 75 dc             	pushl  -0x24(%ebp)
f0103a16:	e8 c6 f7 ff ff       	call   f01031e1 <free_disk_frame>
f0103a1b:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103a1e:	ff 45 f0             	incl   -0x10(%ebp)
f0103a21:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103a28:	76 bd                	jbe    f01039e7 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2d:	8b 40 64             	mov    0x64(%eax),%eax
f0103a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a33:	c1 e2 02             	shl    $0x2,%edx
f0103a36:	01 d0                	add    %edx,%eax
f0103a38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103a3e:	83 ec 0c             	sub    $0xc,%esp
f0103a41:	ff 75 ec             	pushl  -0x14(%ebp)
f0103a44:	e8 af f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a49:	83 c4 10             	add    $0x10,%esp
f0103a4c:	83 ec 0c             	sub    $0xc,%esp
f0103a4f:	50                   	push   %eax
f0103a50:	e8 e4 2e 00 00       	call   f0106939 <decrement_references>
f0103a55:	83 c4 10             	add    $0x10,%esp
f0103a58:	eb 01                	jmp    f0103a5b <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103a5a:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103a5b:	ff 45 f4             	incl   -0xc(%ebp)
f0103a5e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103a65:	0f 86 05 ff ff ff    	jbe    f0103970 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6e:	8b 40 68             	mov    0x68(%eax),%eax
f0103a71:	83 ec 0c             	sub    $0xc,%esp
f0103a74:	50                   	push   %eax
f0103a75:	e8 7e f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a7a:	83 c4 10             	add    $0x10,%esp
f0103a7d:	83 ec 0c             	sub    $0xc,%esp
f0103a80:	50                   	push   %eax
f0103a81:	e8 b3 2e 00 00       	call   f0106939 <decrement_references>
f0103a86:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a96:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103a9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103aa3:	85 c0                	test   %eax,%eax
f0103aa5:	74 42                	je     f0103ae9 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103aa7:	83 ec 0c             	sub    $0xc,%esp
f0103aaa:	ff 75 08             	pushl  0x8(%ebp)
f0103aad:	e8 ee 03 00 00       	call   f0103ea0 <__pf_remove_env_all_tables>
f0103ab2:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0103ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab8:	8b 40 70             	mov    0x70(%eax),%eax
f0103abb:	83 ec 0c             	sub    $0xc,%esp
f0103abe:	50                   	push   %eax
f0103abf:	e8 34 f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103ac4:	83 c4 10             	add    $0x10,%esp
f0103ac7:	83 ec 0c             	sub    $0xc,%esp
f0103aca:	50                   	push   %eax
f0103acb:	e8 69 2e 00 00       	call   f0106939 <decrement_references>
f0103ad0:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad6:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103ae7:	eb 01                	jmp    f0103aea <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103ae9:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103aea:	c9                   	leave  
f0103aeb:	c3                   	ret    

f0103aec <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103aec:	55                   	push   %ebp
f0103aed:	89 e5                	mov    %esp,%ebp
f0103aef:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af5:	8b 50 64             	mov    0x64(%eax),%edx
f0103af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103afb:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b00:	8b 00                	mov    (%eax),%eax
f0103b02:	85 c0                	test   %eax,%eax
f0103b04:	0f 85 aa 00 00 00    	jne    f0103bb4 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103b0a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103b11:	83 ec 0c             	sub    $0xc,%esp
f0103b14:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103b17:	50                   	push   %eax
f0103b18:	e8 8d 2c 00 00       	call   f01067aa <allocate_frame>
f0103b1d:	83 c4 10             	add    $0x10,%esp
f0103b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103b23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103b27:	79 08                	jns    f0103b31 <get_disk_page_directory+0x45>
				return r;
f0103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b2c:	e9 88 00 00 00       	jmp    f0103bb9 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b34:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3d:	83 ec 0c             	sub    $0xc,%esp
f0103b40:	50                   	push   %eax
f0103b41:	e8 9f f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b46:	83 c4 10             	add    $0x10,%esp
f0103b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b4f:	c1 e8 0c             	shr    $0xc,%eax
f0103b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b55:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0103b5a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b5d:	72 17                	jb     f0103b76 <get_disk_page_directory+0x8a>
f0103b5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b62:	68 7c 45 13 f0       	push   $0xf013457c
f0103b67:	68 ee 01 00 00       	push   $0x1ee
f0103b6c:	68 19 45 13 f0       	push   $0xf0134519
f0103b71:	e8 30 c6 ff ff       	call   f01001a6 <_panic>
f0103b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b79:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b7e:	89 c2                	mov    %eax,%edx
f0103b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b83:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0103b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b88:	83 ec 0c             	sub    $0xc,%esp
f0103b8b:	50                   	push   %eax
f0103b8c:	e8 54 f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b91:	83 c4 10             	add    $0x10,%esp
f0103b94:	89 c2                	mov    %eax,%edx
f0103b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b99:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b9f:	8b 00                	mov    (%eax),%eax
f0103ba1:	83 ec 04             	sub    $0x4,%esp
f0103ba4:	68 00 10 00 00       	push   $0x1000
f0103ba9:	6a 00                	push   $0x0
f0103bab:	50                   	push   %eax
f0103bac:	e8 d4 c6 02 00       	call   f0130285 <memset>
f0103bb1:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103bb9:	c9                   	leave  
f0103bba:	c3                   	ret    

f0103bbb <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103bbb:	55                   	push   %ebp
f0103bbc:	89 e5                	mov    %esp,%ebp
f0103bbe:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103bc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103bcf:	e9 a6 00 00 00       	jmp    f0103c7a <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd7:	8b 40 64             	mov    0x64(%eax),%eax
f0103bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bdd:	c1 e2 02             	shl    $0x2,%edx
f0103be0:	01 d0                	add    %edx,%eax
f0103be2:	8b 00                	mov    (%eax),%eax
f0103be4:	83 e0 01             	and    $0x1,%eax
f0103be7:	85 c0                	test   %eax,%eax
f0103be9:	0f 84 87 00 00 00    	je     f0103c76 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	8b 40 64             	mov    0x64(%eax),%eax
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	c1 e2 02             	shl    $0x2,%edx
f0103bfb:	01 d0                	add    %edx,%eax
f0103bfd:	8b 00                	mov    (%eax),%eax
f0103bff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c10:	c1 e8 0c             	shr    $0xc,%eax
f0103c13:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103c16:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0103c1b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103c1e:	72 17                	jb     f0103c37 <pf_calculate_allocated_pages+0x7c>
f0103c20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c23:	68 7c 45 13 f0       	push   $0xf013457c
f0103c28:	68 0e 02 00 00       	push   $0x20e
f0103c2d:	68 19 45 13 f0       	push   $0xf0134519
f0103c32:	e8 6f c5 ff ff       	call   f01001a6 <_panic>
f0103c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c3a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c42:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103c49:	eb 20                	jmp    f0103c6b <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c58:	01 d0                	add    %edx,%eax
f0103c5a:	8b 00                	mov    (%eax),%eax
f0103c5c:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103c5f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0103c63:	74 03                	je     f0103c68 <pf_calculate_allocated_pages+0xad>
				counter ++;
f0103c65:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c68:	ff 45 ec             	incl   -0x14(%ebp)
f0103c6b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103c72:	76 d7                	jbe    f0103c4b <pf_calculate_allocated_pages+0x90>
f0103c74:	eb 01                	jmp    f0103c77 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103c76:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c77:	ff 45 f4             	incl   -0xc(%ebp)
f0103c7a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c81:	0f 86 4d ff ff ff    	jbe    f0103bd4 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103c87:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103c8a:	c9                   	leave  
f0103c8b:	c3                   	ret    

f0103c8c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103c8c:	55                   	push   %ebp
f0103c8d:	89 e5                	mov    %esp,%ebp
f0103c8f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103c92:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103c99:	a1 14 75 6e f0       	mov    0xf06e7514,%eax
f0103c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ca1:	eb 0b                	jmp    f0103cae <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ca3:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103ca6:	a1 1c 75 6e f0       	mov    0xf06e751c,%eax
f0103cab:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103cae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cb2:	74 07                	je     f0103cbb <pf_calculate_free_frames+0x2f>
f0103cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103cb7:	8b 00                	mov    (%eax),%eax
f0103cb9:	eb 05                	jmp    f0103cc0 <pf_calculate_free_frames+0x34>
f0103cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0103cc0:	a3 1c 75 6e f0       	mov    %eax,0xf06e751c
f0103cc5:	a1 1c 75 6e f0       	mov    0xf06e751c,%eax
f0103cca:	85 c0                	test   %eax,%eax
f0103ccc:	75 d5                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
f0103cce:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cd2:	75 cf                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103cd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103cd7:	c9                   	leave  
f0103cd8:	c3                   	ret    

f0103cd9 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103cd9:	55                   	push   %ebp
f0103cda:	89 e5                	mov    %esp,%ebp
f0103cdc:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103cdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce2:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce8:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103cea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ced:	8b 00                	mov    (%eax),%eax
f0103cef:	85 c0                	test   %eax,%eax
f0103cf1:	0f 85 aa 00 00 00    	jne    f0103da1 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103cf7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103cfe:	83 ec 0c             	sub    $0xc,%esp
f0103d01:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103d04:	50                   	push   %eax
f0103d05:	e8 a0 2a 00 00       	call   f01067aa <allocate_frame>
f0103d0a:	83 c4 10             	add    $0x10,%esp
f0103d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103d10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d14:	79 08                	jns    f0103d1e <get_disk_table_directory+0x45>
				return r;
f0103d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d19:	e9 88 00 00 00       	jmp    f0103da6 <get_disk_table_directory+0xcd>
			p->references = 1;
f0103d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d21:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103d27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d2a:	83 ec 0c             	sub    $0xc,%esp
f0103d2d:	50                   	push   %eax
f0103d2e:	e8 b2 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d33:	83 c4 10             	add    $0x10,%esp
f0103d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d3c:	c1 e8 0c             	shr    $0xc,%eax
f0103d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103d42:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0103d47:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103d4a:	72 17                	jb     f0103d63 <get_disk_table_directory+0x8a>
f0103d4c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103d4f:	68 7c 45 13 f0       	push   $0xf013457c
f0103d54:	68 4c 02 00 00       	push   $0x24c
f0103d59:	68 19 45 13 f0       	push   $0xf0134519
f0103d5e:	e8 43 c4 ff ff       	call   f01001a6 <_panic>
f0103d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d66:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d6b:	89 c2                	mov    %eax,%edx
f0103d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d70:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f0103d72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d75:	83 ec 0c             	sub    $0xc,%esp
f0103d78:	50                   	push   %eax
f0103d79:	e8 67 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d7e:	83 c4 10             	add    $0x10,%esp
f0103d81:	89 c2                	mov    %eax,%edx
f0103d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d86:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103d89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d8c:	8b 00                	mov    (%eax),%eax
f0103d8e:	83 ec 04             	sub    $0x4,%esp
f0103d91:	68 00 10 00 00       	push   $0x1000
f0103d96:	6a 00                	push   $0x0
f0103d98:	50                   	push   %eax
f0103d99:	e8 e7 c4 02 00       	call   f0130285 <memset>
f0103d9e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103da1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103da6:	c9                   	leave  
f0103da7:	c3                   	ret    

f0103da8 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103da8:	55                   	push   %ebp
f0103da9:	89 e5                	mov    %esp,%ebp
f0103dab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dae:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103db5:	76 19                	jbe    f0103dd0 <__pf_write_env_table+0x28>
f0103db7:	68 ac 45 13 f0       	push   $0xf01345ac
f0103dbc:	68 d2 45 13 f0       	push   $0xf01345d2
f0103dc1:	68 5a 02 00 00       	push   $0x25a
f0103dc6:	68 19 45 13 f0       	push   $0xf0134519
f0103dcb:	e8 d6 c3 ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd3:	83 c0 6c             	add    $0x6c,%eax
f0103dd6:	83 ec 08             	sub    $0x8,%esp
f0103dd9:	50                   	push   %eax
f0103dda:	ff 75 08             	pushl  0x8(%ebp)
f0103ddd:	e8 f7 fe ff ff       	call   f0103cd9 <get_disk_table_directory>
f0103de2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de8:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103deb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103dee:	c1 ea 16             	shr    $0x16,%edx
f0103df1:	c1 e2 02             	shl    $0x2,%edx
f0103df4:	01 d0                	add    %edx,%eax
f0103df6:	8b 00                	mov    (%eax),%eax
f0103df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dfe:	85 c0                	test   %eax,%eax
f0103e00:	75 31                	jne    f0103e33 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e02:	83 ec 0c             	sub    $0xc,%esp
f0103e05:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e08:	50                   	push   %eax
f0103e09:	e8 0c f3 ff ff       	call   f010311a <allocate_disk_frame>
f0103e0e:	83 c4 10             	add    $0x10,%esp
f0103e11:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e14:	75 07                	jne    f0103e1d <__pf_write_env_table+0x75>
f0103e16:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e1b:	eb 2e                	jmp    f0103e4b <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e20:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e23:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e26:	c1 ea 16             	shr    $0x16,%edx
f0103e29:	c1 e2 02             	shl    $0x2,%edx
f0103e2c:	01 c2                	add    %eax,%edx
f0103e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e31:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e36:	83 ec 08             	sub    $0x8,%esp
f0103e39:	ff 75 10             	pushl  0x10(%ebp)
f0103e3c:	50                   	push   %eax
f0103e3d:	e8 2b f1 ff ff       	call   f0102f6d <write_disk_page>
f0103e42:	83 c4 10             	add    $0x10,%esp
f0103e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e4b:	c9                   	leave  
f0103e4c:	c3                   	ret    

f0103e4d <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e4d:	55                   	push   %ebp
f0103e4e:	89 e5                	mov    %esp,%ebp
f0103e50:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e56:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e59:	85 c0                	test   %eax,%eax
f0103e5b:	75 07                	jne    f0103e64 <__pf_read_env_table+0x17>
f0103e5d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e62:	eb 3a                	jmp    f0103e9e <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e67:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6d:	c1 ea 16             	shr    $0x16,%edx
f0103e70:	c1 e2 02             	shl    $0x2,%edx
f0103e73:	01 d0                	add    %edx,%eax
f0103e75:	8b 00                	mov    (%eax),%eax
f0103e77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e7e:	75 07                	jne    f0103e87 <__pf_read_env_table+0x3a>
f0103e80:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e85:	eb 17                	jmp    f0103e9e <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103e87:	83 ec 08             	sub    $0x8,%esp
f0103e8a:	ff 75 10             	pushl  0x10(%ebp)
f0103e8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e90:	e8 a9 f0 ff ff       	call   f0102f3e <read_disk_page>
f0103e95:	83 c4 10             	add    $0x10,%esp
f0103e98:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103e9e:	c9                   	leave  
f0103e9f:	c3                   	ret    

f0103ea0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ea0:	55                   	push   %ebp
f0103ea1:	89 e5                	mov    %esp,%ebp
f0103ea3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ea9:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eac:	85 c0                	test   %eax,%eax
f0103eae:	74 4c                	je     f0103efc <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103eb7:	eb 38                	jmp    f0103ef1 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ebc:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ebf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ec2:	c1 e2 02             	shl    $0x2,%edx
f0103ec5:	01 d0                	add    %edx,%eax
f0103ec7:	8b 00                	mov    (%eax),%eax
f0103ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecf:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ed5:	c1 e2 02             	shl    $0x2,%edx
f0103ed8:	01 d0                	add    %edx,%eax
f0103eda:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ee0:	83 ec 0c             	sub    $0xc,%esp
f0103ee3:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ee6:	e8 f6 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103eeb:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eee:	ff 45 f4             	incl   -0xc(%ebp)
f0103ef1:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103ef8:	76 bf                	jbe    f0103eb9 <__pf_remove_env_all_tables+0x19>
f0103efa:	eb 01                	jmp    f0103efd <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103efc:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103efd:	c9                   	leave  
f0103efe:	c3                   	ret    

f0103eff <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103eff:	55                   	push   %ebp
f0103f00:	89 e5                	mov    %esp,%ebp
f0103f02:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f09:	75 10                	jne    f0103f1b <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f0b:	83 ec 0c             	sub    $0xc,%esp
f0103f0e:	68 dc 46 13 f0       	push   $0xf01346dc
f0103f13:	e8 15 cd ff ff       	call   f0100c2d <cprintf>
f0103f18:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f1e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f21:	85 c0                	test   %eax,%eax
f0103f23:	74 3d                	je     f0103f62 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f28:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2e:	c1 ea 16             	shr    $0x16,%edx
f0103f31:	c1 e2 02             	shl    $0x2,%edx
f0103f34:	01 d0                	add    %edx,%eax
f0103f36:	8b 00                	mov    (%eax),%eax
f0103f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f41:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f44:	c1 ea 16             	shr    $0x16,%edx
f0103f47:	c1 e2 02             	shl    $0x2,%edx
f0103f4a:	01 d0                	add    %edx,%eax
f0103f4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f52:	83 ec 0c             	sub    $0xc,%esp
f0103f55:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f58:	e8 84 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103f5d:	83 c4 10             	add    $0x10,%esp
f0103f60:	eb 01                	jmp    f0103f63 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f62:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103f63:	c9                   	leave  
f0103f64:	c3                   	ret    

f0103f65 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103f65:	55                   	push   %ebp
f0103f66:	89 e5                	mov    %esp,%ebp
f0103f68:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103f6b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103f72:	eb 1f                	jmp    f0103f93 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f77:	83 ec 04             	sub    $0x4,%esp
f0103f7a:	6a 08                	push   $0x8
f0103f7c:	ff 75 08             	pushl  0x8(%ebp)
f0103f7f:	50                   	push   %eax
f0103f80:	e8 a5 c9 02 00       	call   f013092a <ide_write>
f0103f85:	83 c4 10             	add    $0x10,%esp
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	75 12                	jne    f0103f9e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103f8c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103f93:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103f9a:	7e d8                	jle    f0103f74 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9c:	eb 01                	jmp    f0103f9f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103f9e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9f:	90                   	nop
f0103fa0:	c9                   	leave  
f0103fa1:	c3                   	ret    

f0103fa2 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103fa2:	55                   	push   %ebp
f0103fa3:	89 e5                	mov    %esp,%ebp
f0103fa5:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fab:	0f b6 c0             	movzbl %al,%eax
f0103fae:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fb5:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fb8:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103fbe:	ee                   	out    %al,(%dx)
f0103fbf:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103fc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103fc9:	89 c2                	mov    %eax,%edx
f0103fcb:	ec                   	in     (%dx),%al
f0103fcc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0103fcf:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0103fd2:	0f b6 c0             	movzbl %al,%eax
}
f0103fd5:	c9                   	leave  
f0103fd6:	c3                   	ret    

f0103fd7 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0103fd7:	55                   	push   %ebp
f0103fd8:	89 e5                	mov    %esp,%ebp
f0103fda:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe0:	0f b6 c0             	movzbl %al,%eax
f0103fe3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fea:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fed:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103ff0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103ff3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0103ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ff7:	0f b6 c0             	movzbl %al,%eax
f0103ffa:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104001:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104004:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104007:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010400a:	ee                   	out    %al,(%dx)
}
f010400b:	90                   	nop
f010400c:	c9                   	leave  
f010400d:	c3                   	ret    

f010400e <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f010400e:	55                   	push   %ebp
f010400f:	89 e5                	mov    %esp,%ebp
f0104011:	53                   	push   %ebx
f0104012:	83 ec 24             	sub    $0x24,%esp
f0104015:	8b 45 08             	mov    0x8(%ebp),%eax
f0104018:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010401b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104022:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104026:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010402c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010402d:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104031:	77 48                	ja     f010407b <kclock_start+0x6d>
f0104033:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010403a:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010403e:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104044:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104045:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104049:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010404e:	99                   	cltd   
f010404f:	f7 fb                	idiv   %ebx
f0104051:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104057:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010405b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104060:	99                   	cltd   
f0104061:	f7 fb                	idiv   %ebx
f0104063:	89 c3                	mov    %eax,%ebx
f0104065:	89 c8                	mov    %ecx,%eax
f0104067:	99                   	cltd   
f0104068:	f7 fb                	idiv   %ebx
f010406a:	0f b7 c0             	movzwl %ax,%eax
f010406d:	83 ec 0c             	sub    $0xc,%esp
f0104070:	50                   	push   %eax
f0104071:	e8 b8 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104076:	83 c4 10             	add    $0x10,%esp
f0104079:	eb 13                	jmp    f010408e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010407b:	6a 35                	push   $0x35
f010407d:	68 00 47 13 f0       	push   $0xf0134700
f0104082:	6a 33                	push   $0x33
f0104084:	68 5c 47 13 f0       	push   $0xf013475c
f0104089:	e8 18 c1 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010408e:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0104094:	0f b7 c0             	movzwl %ax,%eax
f0104097:	25 fe ff 00 00       	and    $0xfffe,%eax
f010409c:	83 ec 0c             	sub    $0xc,%esp
f010409f:	50                   	push   %eax
f01040a0:	e8 2d 1b 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040a5:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040a8:	90                   	nop
f01040a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040ac:	c9                   	leave  
f01040ad:	c3                   	ret    

f01040ae <kclock_stop>:

void
kclock_stop(void)
{
f01040ae:	55                   	push   %ebp
f01040af:	89 e5                	mov    %esp,%ebp
f01040b1:	83 ec 18             	sub    $0x18,%esp
f01040b4:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040bb:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01040bf:	8a 45 f3             	mov    -0xd(%ebp),%al
f01040c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040c5:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01040c6:	83 ec 0c             	sub    $0xc,%esp
f01040c9:	68 ff ff 00 00       	push   $0xffff
f01040ce:	e8 ff 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040d3:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01040d6:	90                   	nop
f01040d7:	c9                   	leave  
f01040d8:	c3                   	ret    

f01040d9 <kclock_resume>:

void
kclock_resume(void)
{
f01040d9:	55                   	push   %ebp
f01040da:	89 e5                	mov    %esp,%ebp
f01040dc:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01040df:	e8 8c 01 00 00       	call   f0104270 <kclock_read_cnt0>
f01040e4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01040e8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01040ed:	77 06                	ja     f01040f5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01040ef:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01040f5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01040f9:	83 e0 01             	and    $0x1,%eax
f01040fc:	66 85 c0             	test   %ax,%ax
f01040ff:	74 09                	je     f010410a <kclock_resume+0x31>
		cnt0++;
f0104101:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104105:	40                   	inc    %eax
f0104106:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010410a:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104111:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104115:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104118:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010411b:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010411c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	50                   	push   %eax
f0104124:	e8 05 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104129:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010412c:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0104132:	0f b7 c0             	movzwl %ax,%eax
f0104135:	25 fe ff 00 00       	and    $0xfffe,%eax
f010413a:	83 ec 0c             	sub    $0xc,%esp
f010413d:	50                   	push   %eax
f010413e:	e8 8f 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0104143:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104146:	90                   	nop
f0104147:	c9                   	leave  
f0104148:	c3                   	ret    

f0104149 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104149:	55                   	push   %ebp
f010414a:	89 e5                	mov    %esp,%ebp
f010414c:	83 ec 28             	sub    $0x28,%esp
f010414f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104152:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104155:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010415c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104160:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104163:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104166:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104167:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010416b:	83 ec 0c             	sub    $0xc,%esp
f010416e:	50                   	push   %eax
f010416f:	e8 ba 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104174:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104177:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f010417d:	0f b7 c0             	movzwl %ax,%eax
f0104180:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104185:	83 ec 0c             	sub    $0xc,%esp
f0104188:	50                   	push   %eax
f0104189:	e8 44 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f010418e:	83 c4 10             	add    $0x10,%esp

}
f0104191:	90                   	nop
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	53                   	push   %ebx
f0104198:	83 ec 24             	sub    $0x24,%esp
f010419b:	8b 45 08             	mov    0x8(%ebp),%eax
f010419e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041a1:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041a5:	77 6c                	ja     f0104213 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041a7:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041ab:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041b0:	99                   	cltd   
f01041b1:	f7 fb                	idiv   %ebx
f01041b3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041b9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041bd:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01041c2:	99                   	cltd   
f01041c3:	f7 fb                	idiv   %ebx
f01041c5:	89 c3                	mov    %eax,%ebx
f01041c7:	89 c8                	mov    %ecx,%eax
f01041c9:	99                   	cltd   
f01041ca:	f7 fb                	idiv   %ebx
f01041cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01041cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041d2:	25 01 00 00 80       	and    $0x80000001,%eax
f01041d7:	85 c0                	test   %eax,%eax
f01041d9:	79 05                	jns    f01041e0 <kclock_set_quantum+0x4c>
f01041db:	48                   	dec    %eax
f01041dc:	83 c8 fe             	or     $0xfffffffe,%eax
f01041df:	40                   	inc    %eax
f01041e0:	83 f8 01             	cmp    $0x1,%eax
f01041e3:	75 03                	jne    f01041e8 <kclock_set_quantum+0x54>
			cnt++;
f01041e5:	ff 45 f4             	incl   -0xc(%ebp)
f01041e8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041ef:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041f3:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041f9:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01041fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041fd:	0f b7 c0             	movzwl %ax,%eax
f0104200:	83 ec 0c             	sub    $0xc,%esp
f0104203:	50                   	push   %eax
f0104204:	e8 25 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104209:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010420c:	e8 9d fe ff ff       	call   f01040ae <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104211:	eb 16                	jmp    f0104229 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104213:	6a 35                	push   $0x35
f0104215:	68 00 47 13 f0       	push   $0xf0134700
f010421a:	68 c9 00 00 00       	push   $0xc9
f010421f:	68 5c 47 13 f0       	push   $0xf013475c
f0104224:	e8 7d bf ff ff       	call   f01001a6 <_panic>
	}
}
f0104229:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010422c:	c9                   	leave  
f010422d:	c3                   	ret    

f010422e <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f010422e:	55                   	push   %ebp
f010422f:	89 e5                	mov    %esp,%ebp
f0104231:	83 ec 14             	sub    $0x14,%esp
f0104234:	8b 45 08             	mov    0x8(%ebp),%eax
f0104237:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010423b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010423e:	0f b6 c0             	movzbl %al,%eax
f0104241:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104248:	88 45 f6             	mov    %al,-0xa(%ebp)
f010424b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010424e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104251:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104252:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104255:	66 c1 e8 08          	shr    $0x8,%ax
f0104259:	0f b6 c0             	movzbl %al,%eax
f010425c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104263:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104266:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104269:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010426c:	ee                   	out    %al,(%dx)
}
f010426d:	90                   	nop
f010426e:	c9                   	leave  
f010426f:	c3                   	ret    

f0104270 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104270:	55                   	push   %ebp
f0104271:	89 e5                	mov    %esp,%ebp
f0104273:	83 ec 20             	sub    $0x20,%esp
f0104276:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010427d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104280:	89 c2                	mov    %eax,%edx
f0104282:	ec                   	in     (%dx),%al
f0104283:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104286:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104289:	88 45 ff             	mov    %al,-0x1(%ebp)
f010428c:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104296:	89 c2                	mov    %eax,%edx
f0104298:	ec                   	in     (%dx),%al
f0104299:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010429c:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010429f:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042a6:	c1 e0 08             	shl    $0x8,%eax
f01042a9:	89 c2                	mov    %eax,%edx
f01042ab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042af:	09 d0                	or     %edx,%eax
f01042b1:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042b8:	c9                   	leave  
f01042b9:	c3                   	ret    

f01042ba <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042ba:	55                   	push   %ebp
f01042bb:	89 e5                	mov    %esp,%ebp
f01042bd:	83 ec 30             	sub    $0x30,%esp
f01042c0:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042ca:	89 c2                	mov    %eax,%edx
f01042cc:	ec                   	in     (%dx),%al
f01042cd:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01042d0:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01042d3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042d6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01042dd:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01042e1:	8a 45 dc             	mov    -0x24(%ebp),%al
f01042e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042e7:	ee                   	out    %al,(%dx)
f01042e8:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042f2:	89 c2                	mov    %eax,%edx
f01042f4:	ec                   	in     (%dx),%al
f01042f5:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01042f8:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042fb:	88 45 f3             	mov    %al,-0xd(%ebp)
f01042fe:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104305:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104308:	89 c2                	mov    %eax,%edx
f010430a:	ec                   	in     (%dx),%al
f010430b:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f010430e:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104311:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104314:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104318:	c1 e0 08             	shl    $0x8,%eax
f010431b:	89 c2                	mov    %eax,%edx
f010431d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104321:	09 d0                	or     %edx,%eax
f0104323:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104327:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010432b:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104332:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104335:	8a 45 df             	mov    -0x21(%ebp),%al
f0104338:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010433b:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010433c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010433f:	c9                   	leave  
f0104340:	c3                   	ret    

f0104341 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104341:	55                   	push   %ebp
f0104342:	89 e5                	mov    %esp,%ebp
f0104344:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f0104349:	85 c0                	test   %eax,%eax
f010434b:	75 07                	jne    f0104354 <isSchedMethodRR+0x13>
f010434d:	b8 01 00 00 00       	mov    $0x1,%eax
f0104352:	eb 05                	jmp    f0104359 <isSchedMethodRR+0x18>
f0104354:	b8 00 00 00 00       	mov    $0x0,%eax
f0104359:	5d                   	pop    %ebp
f010435a:	c3                   	ret    

f010435b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010435b:	55                   	push   %ebp
f010435c:	89 e5                	mov    %esp,%ebp
f010435e:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f0104363:	83 f8 01             	cmp    $0x1,%eax
f0104366:	75 07                	jne    f010436f <isSchedMethodMLFQ+0x14>
f0104368:	b8 01 00 00 00       	mov    $0x1,%eax
f010436d:	eb 05                	jmp    f0104374 <isSchedMethodMLFQ+0x19>
f010436f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104374:	5d                   	pop    %ebp
f0104375:	c3                   	ret    

f0104376 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104376:	55                   	push   %ebp
f0104377:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010437d:	74 1d                	je     f010439c <init_queue+0x26>
	{
		LIST_INIT(queue);
f010437f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104382:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104388:	8b 45 08             	mov    0x8(%ebp),%eax
f010438b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104392:	8b 45 08             	mov    0x8(%ebp),%eax
f0104395:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010439c:	90                   	nop
f010439d:	5d                   	pop    %ebp
f010439e:	c3                   	ret    

f010439f <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f010439f:	55                   	push   %ebp
f01043a0:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043a6:	74 08                	je     f01043b0 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01043ae:	eb 05                	jmp    f01043b5 <queue_size+0x16>
	}
	else
	{
		return 0;
f01043b0:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043b5:	5d                   	pop    %ebp
f01043b6:	c3                   	ret    

f01043b7 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043b7:	55                   	push   %ebp
f01043b8:	89 e5                	mov    %esp,%ebp
f01043ba:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01043bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c1:	74 66                	je     f0104429 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f01043c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c7:	75 14                	jne    f01043dd <enqueue+0x26>
f01043c9:	83 ec 04             	sub    $0x4,%esp
f01043cc:	68 70 47 13 f0       	push   $0xf0134770
f01043d1:	6a 2f                	push   $0x2f
f01043d3:	68 93 47 13 f0       	push   $0xf0134793
f01043d8:	e8 c9 bd ff ff       	call   f01001a6 <_panic>
f01043dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e0:	8b 10                	mov    (%eax),%edx
f01043e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e5:	89 50 44             	mov    %edx,0x44(%eax)
f01043e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043eb:	8b 40 44             	mov    0x44(%eax),%eax
f01043ee:	85 c0                	test   %eax,%eax
f01043f0:	74 0d                	je     f01043ff <enqueue+0x48>
f01043f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f5:	8b 00                	mov    (%eax),%eax
f01043f7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043fa:	89 50 48             	mov    %edx,0x48(%eax)
f01043fd:	eb 09                	jmp    f0104408 <enqueue+0x51>
f01043ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	89 50 04             	mov    %edx,0x4(%eax)
f0104408:	8b 45 08             	mov    0x8(%ebp),%eax
f010440b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010440e:	89 10                	mov    %edx,(%eax)
f0104410:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104413:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010441a:	8b 45 08             	mov    0x8(%ebp),%eax
f010441d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104420:	8d 50 01             	lea    0x1(%eax),%edx
f0104423:	8b 45 08             	mov    0x8(%ebp),%eax
f0104426:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104429:	90                   	nop
f010442a:	c9                   	leave  
f010442b:	c3                   	ret    

f010442c <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010442c:	55                   	push   %ebp
f010442d:	89 e5                	mov    %esp,%ebp
f010442f:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f0104432:	8b 45 08             	mov    0x8(%ebp),%eax
f0104435:	8b 40 04             	mov    0x4(%eax),%eax
f0104438:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010443b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010443f:	0f 84 8a 00 00 00    	je     f01044cf <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f0104445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104449:	75 14                	jne    f010445f <dequeue+0x33>
f010444b:	83 ec 04             	sub    $0x4,%esp
f010444e:	68 a4 47 13 f0       	push   $0xf01347a4
f0104453:	6a 38                	push   $0x38
f0104455:	68 93 47 13 f0       	push   $0xf0134793
f010445a:	e8 47 bd ff ff       	call   f01001a6 <_panic>
f010445f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104462:	8b 40 44             	mov    0x44(%eax),%eax
f0104465:	85 c0                	test   %eax,%eax
f0104467:	74 11                	je     f010447a <dequeue+0x4e>
f0104469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446c:	8b 40 44             	mov    0x44(%eax),%eax
f010446f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104472:	8b 52 48             	mov    0x48(%edx),%edx
f0104475:	89 50 48             	mov    %edx,0x48(%eax)
f0104478:	eb 0c                	jmp    f0104486 <dequeue+0x5a>
f010447a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010447d:	8b 50 48             	mov    0x48(%eax),%edx
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	89 50 04             	mov    %edx,0x4(%eax)
f0104486:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104489:	8b 40 48             	mov    0x48(%eax),%eax
f010448c:	85 c0                	test   %eax,%eax
f010448e:	74 11                	je     f01044a1 <dequeue+0x75>
f0104490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104493:	8b 40 48             	mov    0x48(%eax),%eax
f0104496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104499:	8b 52 44             	mov    0x44(%edx),%edx
f010449c:	89 50 44             	mov    %edx,0x44(%eax)
f010449f:	eb 0b                	jmp    f01044ac <dequeue+0x80>
f01044a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044a4:	8b 50 44             	mov    0x44(%eax),%edx
f01044a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01044aa:	89 10                	mov    %edx,(%eax)
f01044ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044af:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01044b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044b9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01044c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01044c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044cc:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01044cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01044d2:	c9                   	leave  
f01044d3:	c3                   	ret    

f01044d4 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01044d4:	55                   	push   %ebp
f01044d5:	89 e5                	mov    %esp,%ebp
f01044d7:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f01044da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044de:	0f 84 8a 00 00 00    	je     f010456e <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f01044e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e8:	75 14                	jne    f01044fe <remove_from_queue+0x2a>
f01044ea:	83 ec 04             	sub    $0x4,%esp
f01044ed:	68 a4 47 13 f0       	push   $0xf01347a4
f01044f2:	6a 41                	push   $0x41
f01044f4:	68 93 47 13 f0       	push   $0xf0134793
f01044f9:	e8 a8 bc ff ff       	call   f01001a6 <_panic>
f01044fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104501:	8b 40 44             	mov    0x44(%eax),%eax
f0104504:	85 c0                	test   %eax,%eax
f0104506:	74 11                	je     f0104519 <remove_from_queue+0x45>
f0104508:	8b 45 0c             	mov    0xc(%ebp),%eax
f010450b:	8b 40 44             	mov    0x44(%eax),%eax
f010450e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104511:	8b 52 48             	mov    0x48(%edx),%edx
f0104514:	89 50 48             	mov    %edx,0x48(%eax)
f0104517:	eb 0c                	jmp    f0104525 <remove_from_queue+0x51>
f0104519:	8b 45 0c             	mov    0xc(%ebp),%eax
f010451c:	8b 50 48             	mov    0x48(%eax),%edx
f010451f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104522:	89 50 04             	mov    %edx,0x4(%eax)
f0104525:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104528:	8b 40 48             	mov    0x48(%eax),%eax
f010452b:	85 c0                	test   %eax,%eax
f010452d:	74 11                	je     f0104540 <remove_from_queue+0x6c>
f010452f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104532:	8b 40 48             	mov    0x48(%eax),%eax
f0104535:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104538:	8b 52 44             	mov    0x44(%edx),%edx
f010453b:	89 50 44             	mov    %edx,0x44(%eax)
f010453e:	eb 0b                	jmp    f010454b <remove_from_queue+0x77>
f0104540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104543:	8b 50 44             	mov    0x44(%eax),%edx
f0104546:	8b 45 08             	mov    0x8(%ebp),%eax
f0104549:	89 10                	mov    %edx,(%eax)
f010454b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010454e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104558:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010455f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104562:	8b 40 0c             	mov    0xc(%eax),%eax
f0104565:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104568:	8b 45 08             	mov    0x8(%ebp),%eax
f010456b:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010456e:	90                   	nop
f010456f:	c9                   	leave  
f0104570:	c3                   	ret    

f0104571 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104571:	55                   	push   %ebp
f0104572:	89 e5                	mov    %esp,%ebp
f0104574:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0104577:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010457e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104581:	8b 00                	mov    (%eax),%eax
f0104583:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104586:	eb 19                	jmp    f01045a1 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0104588:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010458b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010458e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104591:	75 05                	jne    f0104598 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0104593:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104596:	eb 37                	jmp    f01045cf <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104598:	8b 45 08             	mov    0x8(%ebp),%eax
f010459b:	8b 40 08             	mov    0x8(%eax),%eax
f010459e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045a5:	74 08                	je     f01045af <find_env_in_queue+0x3e>
f01045a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045aa:	8b 40 44             	mov    0x44(%eax),%eax
f01045ad:	eb 05                	jmp    f01045b4 <find_env_in_queue+0x43>
f01045af:	b8 00 00 00 00       	mov    $0x0,%eax
f01045b4:	8b 55 08             	mov    0x8(%ebp),%edx
f01045b7:	89 42 08             	mov    %eax,0x8(%edx)
f01045ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bd:	8b 40 08             	mov    0x8(%eax),%eax
f01045c0:	85 c0                	test   %eax,%eax
f01045c2:	75 c4                	jne    f0104588 <find_env_in_queue+0x17>
f01045c4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045c8:	75 be                	jne    f0104588 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01045ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045cf:	c9                   	leave  
f01045d0:	c3                   	ret    

f01045d1 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01045d1:	55                   	push   %ebp
f01045d2:	89 e5                	mov    %esp,%ebp
f01045d4:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01045d7:	83 ec 04             	sub    $0x4,%esp
f01045da:	68 c4 47 13 f0       	push   $0xf01347c4
f01045df:	6a 58                	push   $0x58
f01045e1:	68 93 47 13 f0       	push   $0xf0134793
f01045e6:	e8 bb bb ff ff       	call   f01001a6 <_panic>

f01045eb <fos_scheduler>:

}

void
fos_scheduler(void)
{
f01045eb:	55                   	push   %ebp
f01045ec:	89 e5                	mov    %esp,%ebp
f01045ee:	83 ec 18             	sub    $0x18,%esp
	chk1();
f01045f1:	e8 77 ad 02 00       	call   f012f36d <chk1>
	scheduler_status = SCH_STARTED;
f01045f6:	c7 05 b4 74 6e f0 01 	movl   $0x1,0xf06e74b4
f01045fd:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104600:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104607:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f010460c:	85 c0                	test   %eax,%eax
f010460e:	75 48                	jne    f0104658 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104610:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0104615:	85 c0                	test   %eax,%eax
f0104617:	74 16                	je     f010462f <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104619:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010461e:	83 ec 08             	sub    $0x8,%esp
f0104621:	50                   	push   %eax
f0104622:	68 0c f1 67 f0       	push   $0xf067f10c
f0104627:	e8 8b fd ff ff       	call   f01043b7 <enqueue>
f010462c:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010462f:	83 ec 0c             	sub    $0xc,%esp
f0104632:	68 0c f1 67 f0       	push   $0xf067f10c
f0104637:	e8 f0 fd ff ff       	call   f010442c <dequeue>
f010463c:	83 c4 10             	add    $0x10,%esp
f010463f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104642:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0104647:	0f b6 c0             	movzbl %al,%eax
f010464a:	83 ec 0c             	sub    $0xc,%esp
f010464d:	50                   	push   %eax
f010464e:	e8 41 fb ff ff       	call   f0104194 <kclock_set_quantum>
f0104653:	83 c4 10             	add    $0x10,%esp
f0104656:	eb 12                	jmp    f010466a <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104658:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f010465d:	83 f8 01             	cmp    $0x1,%eax
f0104660:	75 08                	jne    f010466a <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f0104662:	e8 6a ff ff ff       	call   f01045d1 <fos_scheduler_MLFQ>
f0104667:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010466a:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010466f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104675:	a3 34 77 65 f0       	mov    %eax,0xf0657734
	chk2(next_env) ;
f010467a:	83 ec 0c             	sub    $0xc,%esp
f010467d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104680:	e8 25 ad 02 00       	call   f012f3aa <chk2>
f0104685:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104688:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010468b:	a3 34 77 65 f0       	mov    %eax,0xf0657734

	//sched_print_all();

	if(next_env != NULL)
f0104690:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104694:	74 0b                	je     f01046a1 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104696:	83 ec 0c             	sub    $0xc,%esp
f0104699:	ff 75 f4             	pushl  -0xc(%ebp)
f010469c:	e8 a7 46 00 00       	call   f0108d48 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01046a1:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f01046a8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01046ab:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01046b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01046b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01046b6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01046b9:	c7 05 b4 74 6e f0 00 	movl   $0x0,0xf06e74b4
f01046c0:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01046c3:	83 ec 0c             	sub    $0xc,%esp
f01046c6:	6a 00                	push   $0x0
f01046c8:	e8 86 c5 ff ff       	call   f0100c53 <run_command_prompt>
f01046cd:	83 c4 10             	add    $0x10,%esp
f01046d0:	eb f1                	jmp    f01046c3 <fos_scheduler+0xd8>

f01046d2 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01046d2:	55                   	push   %ebp
f01046d3:	89 e5                	mov    %esp,%ebp
f01046d5:	83 ec 18             	sub    $0x18,%esp
f01046d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046db:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01046de:	c7 05 b4 74 6e f0 00 	movl   $0x0,0xf06e74b4
f01046e5:	00 00 00 
	scheduler_method = SCH_RR;
f01046e8:	c7 05 a8 74 6e f0 00 	movl   $0x0,0xf06e74a8
f01046ef:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01046f2:	c6 05 dc 74 6e f0 01 	movb   $0x1,0xf06e74dc
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01046f9:	8a 45 f4             	mov    -0xc(%ebp),%al
f01046fc:	a2 88 74 6e f0       	mov    %al,0xf06e7488
	kclock_set_quantum(quantums[0]);
f0104701:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0104706:	0f b6 c0             	movzbl %al,%eax
f0104709:	83 ec 0c             	sub    $0xc,%esp
f010470c:	50                   	push   %eax
f010470d:	e8 82 fa ff ff       	call   f0104194 <kclock_set_quantum>
f0104712:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104715:	83 ec 0c             	sub    $0xc,%esp
f0104718:	68 0c f1 67 f0       	push   $0xf067f10c
f010471d:	e8 54 fc ff ff       	call   f0104376 <init_queue>
f0104722:	83 c4 10             	add    $0x10,%esp
}
f0104725:	90                   	nop
f0104726:	c9                   	leave  
f0104727:	c3                   	ret    

f0104728 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104728:	55                   	push   %ebp
f0104729:	89 e5                	mov    %esp,%ebp
f010472b:	83 ec 18             	sub    $0x18,%esp
f010472e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104731:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f0104734:	83 ec 04             	sub    $0x4,%esp
f0104737:	68 f8 47 13 f0       	push   $0xf01347f8
f010473c:	68 cc 00 00 00       	push   $0xcc
f0104741:	68 93 47 13 f0       	push   $0xf0134793
f0104746:	e8 5b ba ff ff       	call   f01001a6 <_panic>

f010474b <sched_init>:
#endif
}


void sched_init()
{
f010474b:	55                   	push   %ebp
f010474c:	89 e5                	mov    %esp,%ebp
f010474e:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0104751:	c7 05 74 50 6e f0 00 	movl   $0x0,0xf06e5074
f0104758:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010475b:	83 ec 0c             	sub    $0xc,%esp
f010475e:	6a 0a                	push   $0xa
f0104760:	e8 6d ff ff ff       	call   f01046d2 <sched_init_RR>
f0104765:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104768:	83 ec 0c             	sub    $0xc,%esp
f010476b:	68 98 74 6e f0       	push   $0xf06e7498
f0104770:	e8 01 fc ff ff       	call   f0104376 <init_queue>
f0104775:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104778:	83 ec 0c             	sub    $0xc,%esp
f010477b:	68 64 50 6e f0       	push   $0xf06e5064
f0104780:	e8 f1 fb ff ff       	call   f0104376 <init_queue>
f0104785:	83 c4 10             	add    $0x10,%esp
}
f0104788:	90                   	nop
f0104789:	c9                   	leave  
f010478a:	c3                   	ret    

f010478b <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010478b:	55                   	push   %ebp
f010478c:	89 e5                	mov    %esp,%ebp
f010478e:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0104791:	83 ec 0c             	sub    $0xc,%esp
f0104794:	68 0c f1 67 f0       	push   $0xf067f10c
f0104799:	e8 58 2c 00 00       	call   f01073f6 <kfree>
f010479e:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f01047a1:	83 ec 0c             	sub    $0xc,%esp
f01047a4:	68 88 74 6e f0       	push   $0xf06e7488
f01047a9:	e8 48 2c 00 00       	call   f01073f6 <kfree>
f01047ae:	83 c4 10             	add    $0x10,%esp
}
f01047b1:	90                   	nop
f01047b2:	c9                   	leave  
f01047b3:	c3                   	ret    

f01047b4 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01047b4:	55                   	push   %ebp
f01047b5:	89 e5                	mov    %esp,%ebp
f01047b7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01047ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047be:	74 1d                	je     f01047dd <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f01047c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c3:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01047ca:	83 ec 08             	sub    $0x8,%esp
f01047cd:	ff 75 08             	pushl  0x8(%ebp)
f01047d0:	68 0c f1 67 f0       	push   $0xf067f10c
f01047d5:	e8 dd fb ff ff       	call   f01043b7 <enqueue>
f01047da:	83 c4 10             	add    $0x10,%esp
	}
}
f01047dd:	90                   	nop
f01047de:	c9                   	leave  
f01047df:	c3                   	ret    

f01047e0 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01047e0:	55                   	push   %ebp
f01047e1:	89 e5                	mov    %esp,%ebp
f01047e3:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01047e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047ea:	0f 84 02 01 00 00    	je     f01048f2 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01047f7:	e9 e5 00 00 00       	jmp    f01048e1 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01047fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104802:	89 c2                	mov    %eax,%edx
f0104804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104807:	c1 e0 04             	shl    $0x4,%eax
f010480a:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f010480f:	52                   	push   %edx
f0104810:	50                   	push   %eax
f0104811:	e8 5b fd ff ff       	call   f0104571 <find_env_in_queue>
f0104816:	83 c4 08             	add    $0x8,%esp
f0104819:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010481c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104820:	0f 84 b8 00 00 00    	je     f01048de <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104826:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010482a:	75 17                	jne    f0104843 <sched_remove_ready+0x63>
f010482c:	83 ec 04             	sub    $0x4,%esp
f010482f:	68 a4 47 13 f0       	push   $0xf01347a4
f0104834:	68 f5 00 00 00       	push   $0xf5
f0104839:	68 93 47 13 f0       	push   $0xf0134793
f010483e:	e8 63 b9 ff ff       	call   f01001a6 <_panic>
f0104843:	8b 45 08             	mov    0x8(%ebp),%eax
f0104846:	8b 40 44             	mov    0x44(%eax),%eax
f0104849:	85 c0                	test   %eax,%eax
f010484b:	74 11                	je     f010485e <sched_remove_ready+0x7e>
f010484d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104850:	8b 40 44             	mov    0x44(%eax),%eax
f0104853:	8b 55 08             	mov    0x8(%ebp),%edx
f0104856:	8b 52 48             	mov    0x48(%edx),%edx
f0104859:	89 50 48             	mov    %edx,0x48(%eax)
f010485c:	eb 14                	jmp    f0104872 <sched_remove_ready+0x92>
f010485e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104861:	8b 40 48             	mov    0x48(%eax),%eax
f0104864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104867:	c1 e2 04             	shl    $0x4,%edx
f010486a:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f0104870:	89 02                	mov    %eax,(%edx)
f0104872:	8b 45 08             	mov    0x8(%ebp),%eax
f0104875:	8b 40 48             	mov    0x48(%eax),%eax
f0104878:	85 c0                	test   %eax,%eax
f010487a:	74 11                	je     f010488d <sched_remove_ready+0xad>
f010487c:	8b 45 08             	mov    0x8(%ebp),%eax
f010487f:	8b 40 48             	mov    0x48(%eax),%eax
f0104882:	8b 55 08             	mov    0x8(%ebp),%edx
f0104885:	8b 52 44             	mov    0x44(%edx),%edx
f0104888:	89 50 44             	mov    %edx,0x44(%eax)
f010488b:	eb 14                	jmp    f01048a1 <sched_remove_ready+0xc1>
f010488d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104890:	8b 40 44             	mov    0x44(%eax),%eax
f0104893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104896:	c1 e2 04             	shl    $0x4,%edx
f0104899:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f010489f:	89 02                	mov    %eax,(%edx)
f01048a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01048b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b8:	c1 e0 04             	shl    $0x4,%eax
f01048bb:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f01048c0:	8b 00                	mov    (%eax),%eax
f01048c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01048c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c8:	c1 e0 04             	shl    $0x4,%eax
f01048cb:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f01048d0:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01048d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01048dc:	eb 14                	jmp    f01048f2 <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048de:	ff 45 f4             	incl   -0xc(%ebp)
f01048e1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01048e6:	0f b6 c0             	movzbl %al,%eax
f01048e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048ec:	0f 8f 0a ff ff ff    	jg     f01047fc <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01048f2:	c9                   	leave  
f01048f3:	c3                   	ret    

f01048f4 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01048f4:	55                   	push   %ebp
f01048f5:	89 e5                	mov    %esp,%ebp
f01048f7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01048fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048fe:	74 1d                	je     f010491d <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104900:	8b 45 08             	mov    0x8(%ebp),%eax
f0104903:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f010490a:	83 ec 08             	sub    $0x8,%esp
f010490d:	ff 75 08             	pushl  0x8(%ebp)
f0104910:	68 98 74 6e f0       	push   $0xf06e7498
f0104915:	e8 9d fa ff ff       	call   f01043b7 <enqueue>
f010491a:	83 c4 10             	add    $0x10,%esp
	}
}
f010491d:	90                   	nop
f010491e:	c9                   	leave  
f010491f:	c3                   	ret    

f0104920 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104920:	55                   	push   %ebp
f0104921:	89 e5                	mov    %esp,%ebp
f0104923:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104926:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010492a:	0f 84 92 00 00 00    	je     f01049c2 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104934:	75 17                	jne    f010494d <sched_remove_new+0x2d>
f0104936:	83 ec 04             	sub    $0x4,%esp
f0104939:	68 a4 47 13 f0       	push   $0xf01347a4
f010493e:	68 09 01 00 00       	push   $0x109
f0104943:	68 93 47 13 f0       	push   $0xf0134793
f0104948:	e8 59 b8 ff ff       	call   f01001a6 <_panic>
f010494d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104950:	8b 40 44             	mov    0x44(%eax),%eax
f0104953:	85 c0                	test   %eax,%eax
f0104955:	74 11                	je     f0104968 <sched_remove_new+0x48>
f0104957:	8b 45 08             	mov    0x8(%ebp),%eax
f010495a:	8b 40 44             	mov    0x44(%eax),%eax
f010495d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104960:	8b 52 48             	mov    0x48(%edx),%edx
f0104963:	89 50 48             	mov    %edx,0x48(%eax)
f0104966:	eb 0b                	jmp    f0104973 <sched_remove_new+0x53>
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	8b 40 48             	mov    0x48(%eax),%eax
f010496e:	a3 9c 74 6e f0       	mov    %eax,0xf06e749c
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	8b 40 48             	mov    0x48(%eax),%eax
f0104979:	85 c0                	test   %eax,%eax
f010497b:	74 11                	je     f010498e <sched_remove_new+0x6e>
f010497d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104980:	8b 40 48             	mov    0x48(%eax),%eax
f0104983:	8b 55 08             	mov    0x8(%ebp),%edx
f0104986:	8b 52 44             	mov    0x44(%edx),%edx
f0104989:	89 50 44             	mov    %edx,0x44(%eax)
f010498c:	eb 0b                	jmp    f0104999 <sched_remove_new+0x79>
f010498e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104991:	8b 40 44             	mov    0x44(%eax),%eax
f0104994:	a3 98 74 6e f0       	mov    %eax,0xf06e7498
f0104999:	8b 45 08             	mov    0x8(%ebp),%eax
f010499c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049ad:	a1 a4 74 6e f0       	mov    0xf06e74a4,%eax
f01049b2:	48                   	dec    %eax
f01049b3:	a3 a4 74 6e f0       	mov    %eax,0xf06e74a4
		env->env_status = ENV_UNKNOWN;
f01049b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01049c2:	90                   	nop
f01049c3:	c9                   	leave  
f01049c4:	c3                   	ret    

f01049c5 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01049c5:	55                   	push   %ebp
f01049c6:	89 e5                	mov    %esp,%ebp
f01049c8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049cf:	74 34                	je     f0104a05 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01049d1:	e8 66 86 00 00       	call   f010d03c <isBufferingEnabled>
f01049d6:	84 c0                	test   %al,%al
f01049d8:	74 0e                	je     f01049e8 <sched_insert_exit+0x23>
f01049da:	83 ec 0c             	sub    $0xc,%esp
f01049dd:	ff 75 08             	pushl  0x8(%ebp)
f01049e0:	e8 cc 57 00 00       	call   f010a1b1 <cleanup_buffers>
f01049e5:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01049f2:	83 ec 08             	sub    $0x8,%esp
f01049f5:	ff 75 08             	pushl  0x8(%ebp)
f01049f8:	68 64 50 6e f0       	push   $0xf06e5064
f01049fd:	e8 b5 f9 ff ff       	call   f01043b7 <enqueue>
f0104a02:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a05:	90                   	nop
f0104a06:	c9                   	leave  
f0104a07:	c3                   	ret    

f0104a08 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104a08:	55                   	push   %ebp
f0104a09:	89 e5                	mov    %esp,%ebp
f0104a0b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a12:	0f 84 92 00 00 00    	je     f0104aaa <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1c:	75 17                	jne    f0104a35 <sched_remove_exit+0x2d>
f0104a1e:	83 ec 04             	sub    $0x4,%esp
f0104a21:	68 a4 47 13 f0       	push   $0xf01347a4
f0104a26:	68 1b 01 00 00       	push   $0x11b
f0104a2b:	68 93 47 13 f0       	push   $0xf0134793
f0104a30:	e8 71 b7 ff ff       	call   f01001a6 <_panic>
f0104a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a38:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3b:	85 c0                	test   %eax,%eax
f0104a3d:	74 11                	je     f0104a50 <sched_remove_exit+0x48>
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	8b 40 44             	mov    0x44(%eax),%eax
f0104a45:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a48:	8b 52 48             	mov    0x48(%edx),%edx
f0104a4b:	89 50 48             	mov    %edx,0x48(%eax)
f0104a4e:	eb 0b                	jmp    f0104a5b <sched_remove_exit+0x53>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 40 48             	mov    0x48(%eax),%eax
f0104a56:	a3 68 50 6e f0       	mov    %eax,0xf06e5068
f0104a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a61:	85 c0                	test   %eax,%eax
f0104a63:	74 11                	je     f0104a76 <sched_remove_exit+0x6e>
f0104a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a68:	8b 40 48             	mov    0x48(%eax),%eax
f0104a6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a6e:	8b 52 44             	mov    0x44(%edx),%edx
f0104a71:	89 50 44             	mov    %edx,0x44(%eax)
f0104a74:	eb 0b                	jmp    f0104a81 <sched_remove_exit+0x79>
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	8b 40 44             	mov    0x44(%eax),%eax
f0104a7c:	a3 64 50 6e f0       	mov    %eax,0xf06e5064
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a95:	a1 70 50 6e f0       	mov    0xf06e5070,%eax
f0104a9a:	48                   	dec    %eax
f0104a9b:	a3 70 50 6e f0       	mov    %eax,0xf06e5070
		env->env_status = ENV_UNKNOWN;
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104aaa:	90                   	nop
f0104aab:	c9                   	leave  
f0104aac:	c3                   	ret    

f0104aad <sched_print_all>:

void sched_print_all()
{
f0104aad:	55                   	push   %ebp
f0104aae:	89 e5                	mov    %esp,%ebp
f0104ab0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ab3:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104ab8:	85 c0                	test   %eax,%eax
f0104aba:	74 6c                	je     f0104b28 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104abc:	83 ec 0c             	sub    $0xc,%esp
f0104abf:	68 24 48 13 f0       	push   $0xf0134824
f0104ac4:	e8 64 c1 ff ff       	call   f0100c2d <cprintf>
f0104ac9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104acc:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104ad1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ad4:	eb 29                	jmp    f0104aff <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad9:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ae2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ae5:	83 ec 04             	sub    $0x4,%esp
f0104ae8:	52                   	push   %edx
f0104ae9:	50                   	push   %eax
f0104aea:	68 46 48 13 f0       	push   $0xf0134846
f0104aef:	e8 39 c1 ff ff       	call   f0100c2d <cprintf>
f0104af4:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104af7:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104afc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104aff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b03:	74 08                	je     f0104b0d <sched_print_all+0x60>
f0104b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b08:	8b 40 44             	mov    0x44(%eax),%eax
f0104b0b:	eb 05                	jmp    f0104b12 <sched_print_all+0x65>
f0104b0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104b12:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0104b17:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104b1c:	85 c0                	test   %eax,%eax
f0104b1e:	75 b6                	jne    f0104ad6 <sched_print_all+0x29>
f0104b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b24:	75 b0                	jne    f0104ad6 <sched_print_all+0x29>
f0104b26:	eb 10                	jmp    f0104b38 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104b28:	83 ec 0c             	sub    $0xc,%esp
f0104b2b:	68 50 48 13 f0       	push   $0xf0134850
f0104b30:	e8 f8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b35:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104b38:	83 ec 0c             	sub    $0xc,%esp
f0104b3b:	68 6c 48 13 f0       	push   $0xf013486c
f0104b40:	e8 e8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b4f:	e9 cb 00 00 00       	jmp    f0104c1f <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b57:	c1 e0 04             	shl    $0x4,%eax
f0104b5a:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104b5f:	8b 00                	mov    (%eax),%eax
f0104b61:	85 c0                	test   %eax,%eax
f0104b63:	0f 84 90 00 00 00    	je     f0104bf9 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104b69:	83 ec 08             	sub    $0x8,%esp
f0104b6c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104b6f:	68 a0 48 13 f0       	push   $0xf01348a0
f0104b74:	e8 b4 c0 ff ff       	call   f0100c2d <cprintf>
f0104b79:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b7f:	c1 e0 04             	shl    $0x4,%eax
f0104b82:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104b87:	8b 00                	mov    (%eax),%eax
f0104b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b8c:	eb 31                	jmp    f0104bbf <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b91:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b9a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b9d:	83 ec 04             	sub    $0x4,%esp
f0104ba0:	52                   	push   %edx
f0104ba1:	50                   	push   %eax
f0104ba2:	68 46 48 13 f0       	push   $0xf0134846
f0104ba7:	e8 81 c0 ff ff       	call   f0100c2d <cprintf>
f0104bac:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104bb2:	c1 e0 04             	shl    $0x4,%eax
f0104bb5:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104bba:	8b 00                	mov    (%eax),%eax
f0104bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc3:	74 08                	je     f0104bcd <sched_print_all+0x120>
f0104bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc8:	8b 40 44             	mov    0x44(%eax),%eax
f0104bcb:	eb 05                	jmp    f0104bd2 <sched_print_all+0x125>
f0104bcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bd5:	c1 e2 04             	shl    $0x4,%edx
f0104bd8:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f0104bde:	89 02                	mov    %eax,(%edx)
f0104be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104be3:	c1 e0 04             	shl    $0x4,%eax
f0104be6:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104beb:	8b 00                	mov    (%eax),%eax
f0104bed:	85 c0                	test   %eax,%eax
f0104bef:	75 9d                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bf5:	75 97                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf7:	eb 13                	jmp    f0104c0c <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104bf9:	83 ec 08             	sub    $0x8,%esp
f0104bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104bff:	68 c8 48 13 f0       	push   $0xf01348c8
f0104c04:	e8 24 c0 ff ff       	call   f0100c2d <cprintf>
f0104c09:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104c0c:	83 ec 0c             	sub    $0xc,%esp
f0104c0f:	68 6c 48 13 f0       	push   $0xf013486c
f0104c14:	e8 14 c0 ff ff       	call   f0100c2d <cprintf>
f0104c19:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c1c:	ff 45 f0             	incl   -0x10(%ebp)
f0104c1f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0104c24:	0f b6 c0             	movzbl %al,%eax
f0104c27:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104c2a:	0f 8f 24 ff ff ff    	jg     f0104b54 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104c30:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104c35:	85 c0                	test   %eax,%eax
f0104c37:	74 6c                	je     f0104ca5 <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104c39:	83 ec 0c             	sub    $0xc,%esp
f0104c3c:	68 ec 48 13 f0       	push   $0xf01348ec
f0104c41:	e8 e7 bf ff ff       	call   f0100c2d <cprintf>
f0104c46:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c49:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c51:	eb 29                	jmp    f0104c7c <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c56:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c62:	83 ec 04             	sub    $0x4,%esp
f0104c65:	52                   	push   %edx
f0104c66:	50                   	push   %eax
f0104c67:	68 46 48 13 f0       	push   $0xf0134846
f0104c6c:	e8 bc bf ff ff       	call   f0100c2d <cprintf>
f0104c71:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c74:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f0104c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c80:	74 08                	je     f0104c8a <sched_print_all+0x1dd>
f0104c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c85:	8b 40 44             	mov    0x44(%eax),%eax
f0104c88:	eb 05                	jmp    f0104c8f <sched_print_all+0x1e2>
f0104c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8f:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f0104c94:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f0104c99:	85 c0                	test   %eax,%eax
f0104c9b:	75 b6                	jne    f0104c53 <sched_print_all+0x1a6>
f0104c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca1:	75 b0                	jne    f0104c53 <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104ca3:	eb 10                	jmp    f0104cb5 <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104ca5:	83 ec 0c             	sub    $0xc,%esp
f0104ca8:	68 0e 49 13 f0       	push   $0xf013490e
f0104cad:	e8 7b bf ff ff       	call   f0100c2d <cprintf>
f0104cb2:	83 c4 10             	add    $0x10,%esp
	}
}
f0104cb5:	90                   	nop
f0104cb6:	c9                   	leave  
f0104cb7:	c3                   	ret    

f0104cb8 <sched_run_all>:

void sched_run_all()
{
f0104cb8:	55                   	push   %ebp
f0104cb9:	89 e5                	mov    %esp,%ebp
f0104cbb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104cc5:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ccd:	eb 24                	jmp    f0104cf3 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104ccf:	83 ec 0c             	sub    $0xc,%esp
f0104cd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104cd5:	e8 46 fc ff ff       	call   f0104920 <sched_remove_new>
f0104cda:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104cdd:	83 ec 0c             	sub    $0xc,%esp
f0104ce0:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ce3:	e8 cc fa ff ff       	call   f01047b4 <sched_insert_ready>
f0104ce8:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104ceb:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cf7:	74 08                	je     f0104d01 <sched_run_all+0x49>
f0104cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cfc:	8b 40 44             	mov    0x44(%eax),%eax
f0104cff:	eb 05                	jmp    f0104d06 <sched_run_all+0x4e>
f0104d01:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d06:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0104d0b:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104d10:	85 c0                	test   %eax,%eax
f0104d12:	75 bb                	jne    f0104ccf <sched_run_all+0x17>
f0104d14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d18:	75 b5                	jne    f0104ccf <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104d1a:	a1 b4 74 6e f0       	mov    0xf06e74b4,%eax
f0104d1f:	85 c0                	test   %eax,%eax
f0104d21:	75 05                	jne    f0104d28 <sched_run_all+0x70>
		fos_scheduler();
f0104d23:	e8 c3 f8 ff ff       	call   f01045eb <fos_scheduler>
}
f0104d28:	90                   	nop
f0104d29:	c9                   	leave  
f0104d2a:	c3                   	ret    

f0104d2b <sched_kill_all>:

void sched_kill_all()
{
f0104d2b:	55                   	push   %ebp
f0104d2c:	89 e5                	mov    %esp,%ebp
f0104d2e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104d31:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104d36:	85 c0                	test   %eax,%eax
f0104d38:	0f 84 98 00 00 00    	je     f0104dd6 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104d3e:	83 ec 0c             	sub    $0xc,%esp
f0104d41:	68 2c 49 13 f0       	push   $0xf013492c
f0104d46:	e8 e2 be ff ff       	call   f0100c2d <cprintf>
f0104d4b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d4e:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d56:	eb 55                	jmp    f0104dad <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5b:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d64:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d67:	83 ec 04             	sub    $0x4,%esp
f0104d6a:	52                   	push   %edx
f0104d6b:	50                   	push   %eax
f0104d6c:	68 58 49 13 f0       	push   $0xf0134958
f0104d71:	e8 b7 be ff ff       	call   f0100c2d <cprintf>
f0104d76:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104d79:	83 ec 0c             	sub    $0xc,%esp
f0104d7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d7f:	e8 9c fb ff ff       	call   f0104920 <sched_remove_new>
f0104d84:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104d87:	83 ec 0c             	sub    $0xc,%esp
f0104d8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d8d:	e8 0a 40 00 00       	call   f0108d9c <env_free>
f0104d92:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104d95:	83 ec 0c             	sub    $0xc,%esp
f0104d98:	68 6b 49 13 f0       	push   $0xf013496b
f0104d9d:	e8 8b be ff ff       	call   f0100c2d <cprintf>
f0104da2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104da5:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db1:	74 08                	je     f0104dbb <sched_kill_all+0x90>
f0104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db6:	8b 40 44             	mov    0x44(%eax),%eax
f0104db9:	eb 05                	jmp    f0104dc0 <sched_kill_all+0x95>
f0104dbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc0:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0104dc5:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104dca:	85 c0                	test   %eax,%eax
f0104dcc:	75 8a                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd2:	75 84                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dd4:	eb 10                	jmp    f0104de6 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104dd6:	83 ec 0c             	sub    $0xc,%esp
f0104dd9:	68 71 49 13 f0       	push   $0xf0134971
f0104dde:	e8 4a be ff ff       	call   f0100c2d <cprintf>
f0104de3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104de6:	83 ec 0c             	sub    $0xc,%esp
f0104de9:	68 6c 48 13 f0       	push   $0xf013486c
f0104dee:	e8 3a be ff ff       	call   f0100c2d <cprintf>
f0104df3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104df6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104dfd:	e9 a0 01 00 00       	jmp    f0104fa2 <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e05:	c1 e0 04             	shl    $0x4,%eax
f0104e08:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104e0d:	8b 00                	mov    (%eax),%eax
f0104e0f:	85 c0                	test   %eax,%eax
f0104e11:	0f 84 65 01 00 00    	je     f0104f7c <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104e17:	83 ec 08             	sub    $0x8,%esp
f0104e1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0104e1d:	68 8c 49 13 f0       	push   $0xf013498c
f0104e22:	e8 06 be ff ff       	call   f0100c2d <cprintf>
f0104e27:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e2d:	c1 e0 04             	shl    $0x4,%eax
f0104e30:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104e35:	8b 00                	mov    (%eax),%eax
f0104e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3a:	e9 fb 00 00 00       	jmp    f0104f3a <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e42:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e4e:	83 ec 04             	sub    $0x4,%esp
f0104e51:	52                   	push   %edx
f0104e52:	50                   	push   %eax
f0104e53:	68 58 49 13 f0       	push   $0xf0134958
f0104e58:	e8 d0 bd ff ff       	call   f0100c2d <cprintf>
f0104e5d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e64:	75 17                	jne    f0104e7d <sched_kill_all+0x152>
f0104e66:	83 ec 04             	sub    $0x4,%esp
f0104e69:	68 a4 47 13 f0       	push   $0xf01347a4
f0104e6e:	68 76 01 00 00       	push   $0x176
f0104e73:	68 93 47 13 f0       	push   $0xf0134793
f0104e78:	e8 29 b3 ff ff       	call   f01001a6 <_panic>
f0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e80:	8b 40 44             	mov    0x44(%eax),%eax
f0104e83:	85 c0                	test   %eax,%eax
f0104e85:	74 11                	je     f0104e98 <sched_kill_all+0x16d>
f0104e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e90:	8b 52 48             	mov    0x48(%edx),%edx
f0104e93:	89 50 48             	mov    %edx,0x48(%eax)
f0104e96:	eb 14                	jmp    f0104eac <sched_kill_all+0x181>
f0104e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9b:	8b 40 48             	mov    0x48(%eax),%eax
f0104e9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ea1:	c1 e2 04             	shl    $0x4,%edx
f0104ea4:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f0104eaa:	89 02                	mov    %eax,(%edx)
f0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eaf:	8b 40 48             	mov    0x48(%eax),%eax
f0104eb2:	85 c0                	test   %eax,%eax
f0104eb4:	74 11                	je     f0104ec7 <sched_kill_all+0x19c>
f0104eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb9:	8b 40 48             	mov    0x48(%eax),%eax
f0104ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ebf:	8b 52 44             	mov    0x44(%edx),%edx
f0104ec2:	89 50 44             	mov    %edx,0x44(%eax)
f0104ec5:	eb 14                	jmp    f0104edb <sched_kill_all+0x1b0>
f0104ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eca:	8b 40 44             	mov    0x44(%eax),%eax
f0104ecd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ed0:	c1 e2 04             	shl    $0x4,%edx
f0104ed3:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f0104ed9:	89 02                	mov    %eax,(%edx)
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ef2:	c1 e0 04             	shl    $0x4,%eax
f0104ef5:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0104efa:	8b 00                	mov    (%eax),%eax
f0104efc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104eff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f02:	c1 e0 04             	shl    $0x4,%eax
f0104f05:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0104f0a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104f0c:	83 ec 0c             	sub    $0xc,%esp
f0104f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f12:	e8 85 3e 00 00       	call   f0108d9c <env_free>
f0104f17:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104f1a:	83 ec 0c             	sub    $0xc,%esp
f0104f1d:	68 6b 49 13 f0       	push   $0xf013496b
f0104f22:	e8 06 bd ff ff       	call   f0100c2d <cprintf>
f0104f27:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f2d:	c1 e0 04             	shl    $0x4,%eax
f0104f30:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104f35:	8b 00                	mov    (%eax),%eax
f0104f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f3e:	74 08                	je     f0104f48 <sched_kill_all+0x21d>
f0104f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f43:	8b 40 44             	mov    0x44(%eax),%eax
f0104f46:	eb 05                	jmp    f0104f4d <sched_kill_all+0x222>
f0104f48:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f50:	c1 e2 04             	shl    $0x4,%edx
f0104f53:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f0104f59:	89 02                	mov    %eax,(%edx)
f0104f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f5e:	c1 e0 04             	shl    $0x4,%eax
f0104f61:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104f66:	8b 00                	mov    (%eax),%eax
f0104f68:	85 c0                	test   %eax,%eax
f0104f6a:	0f 85 cf fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f74:	0f 85 c5 fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f7a:	eb 13                	jmp    f0104f8f <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104f7c:	83 ec 08             	sub    $0x8,%esp
f0104f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f82:	68 c8 48 13 f0       	push   $0xf01348c8
f0104f87:	e8 a1 bc ff ff       	call   f0100c2d <cprintf>
f0104f8c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104f8f:	83 ec 0c             	sub    $0xc,%esp
f0104f92:	68 6c 48 13 f0       	push   $0xf013486c
f0104f97:	e8 91 bc ff ff       	call   f0100c2d <cprintf>
f0104f9c:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f9f:	ff 45 f0             	incl   -0x10(%ebp)
f0104fa2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0104fa7:	0f b6 c0             	movzbl %al,%eax
f0104faa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104fad:	0f 8f 4f fe ff ff    	jg     f0104e02 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0104fb3:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104fb8:	85 c0                	test   %eax,%eax
f0104fba:	0f 84 98 00 00 00    	je     f0105058 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0104fc0:	83 ec 0c             	sub    $0xc,%esp
f0104fc3:	68 c0 49 13 f0       	push   $0xf01349c0
f0104fc8:	e8 60 bc ff ff       	call   f0100c2d <cprintf>
f0104fcd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fd0:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	eb 55                	jmp    f010502f <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fdd:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe9:	83 ec 04             	sub    $0x4,%esp
f0104fec:	52                   	push   %edx
f0104fed:	50                   	push   %eax
f0104fee:	68 58 49 13 f0       	push   $0xf0134958
f0104ff3:	e8 35 bc ff ff       	call   f0100c2d <cprintf>
f0104ff8:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0104ffb:	83 ec 0c             	sub    $0xc,%esp
f0104ffe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105001:	e8 02 fa ff ff       	call   f0104a08 <sched_remove_exit>
f0105006:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105009:	83 ec 0c             	sub    $0xc,%esp
f010500c:	ff 75 f4             	pushl  -0xc(%ebp)
f010500f:	e8 88 3d 00 00       	call   f0108d9c <env_free>
f0105014:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105017:	83 ec 0c             	sub    $0xc,%esp
f010501a:	68 6b 49 13 f0       	push   $0xf013496b
f010501f:	e8 09 bc ff ff       	call   f0100c2d <cprintf>
f0105024:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105027:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f010502c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010502f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105033:	74 08                	je     f010503d <sched_kill_all+0x312>
f0105035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105038:	8b 40 44             	mov    0x44(%eax),%eax
f010503b:	eb 05                	jmp    f0105042 <sched_kill_all+0x317>
f010503d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105042:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f0105047:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	75 8a                	jne    f0104fda <sched_kill_all+0x2af>
f0105050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105054:	75 84                	jne    f0104fda <sched_kill_all+0x2af>
f0105056:	eb 10                	jmp    f0105068 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105058:	83 ec 0c             	sub    $0xc,%esp
f010505b:	68 0e 49 13 f0       	push   $0xf013490e
f0105060:	e8 c8 bb ff ff       	call   f0100c2d <cprintf>
f0105065:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105068:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f010506f:	00 00 00 
	fos_scheduler();
f0105072:	e8 74 f5 ff ff       	call   f01045eb <fos_scheduler>

f0105077 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105077:	55                   	push   %ebp
f0105078:	89 e5                	mov    %esp,%ebp
f010507a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010507d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105081:	74 0e                	je     f0105091 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105083:	83 ec 0c             	sub    $0xc,%esp
f0105086:	ff 75 08             	pushl  0x8(%ebp)
f0105089:	e8 66 f8 ff ff       	call   f01048f4 <sched_insert_new>
f010508e:	83 c4 10             	add    $0x10,%esp
	}
}
f0105091:	90                   	nop
f0105092:	c9                   	leave  
f0105093:	c3                   	ret    

f0105094 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105094:	55                   	push   %ebp
f0105095:	89 e5                	mov    %esp,%ebp
f0105097:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010509a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050a1:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f01050a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a9:	eb 3d                	jmp    f01050e8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01050ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050b1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050b4:	75 2a                	jne    f01050e0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01050b6:	83 ec 0c             	sub    $0xc,%esp
f01050b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01050bc:	e8 5f f8 ff ff       	call   f0104920 <sched_remove_new>
f01050c1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01050c4:	83 ec 0c             	sub    $0xc,%esp
f01050c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01050ca:	e8 e5 f6 ff ff       	call   f01047b4 <sched_insert_ready>
f01050cf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01050d2:	a1 b4 74 6e f0       	mov    0xf06e74b4,%eax
f01050d7:	85 c0                	test   %eax,%eax
f01050d9:	75 36                	jne    f0105111 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01050db:	e8 0b f5 ff ff       	call   f01045eb <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050e0:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f01050e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050ec:	74 08                	je     f01050f6 <sched_run_env+0x62>
f01050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f1:	8b 40 44             	mov    0x44(%eax),%eax
f01050f4:	eb 05                	jmp    f01050fb <sched_run_env+0x67>
f01050f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01050fb:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0105100:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0105105:	85 c0                	test   %eax,%eax
f0105107:	75 a2                	jne    f01050ab <sched_run_env+0x17>
f0105109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510d:	75 9c                	jne    f01050ab <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010510f:	eb 01                	jmp    f0105112 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105111:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105112:	90                   	nop
f0105113:	c9                   	leave  
f0105114:	c3                   	ret    

f0105115 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105115:	55                   	push   %ebp
f0105116:	89 e5                	mov    %esp,%ebp
f0105118:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010511b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105129:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010512d:	75 59                	jne    f0105188 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010512f:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0105134:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105137:	eb 28                	jmp    f0105161 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010513f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105142:	75 15                	jne    f0105159 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105144:	83 ec 0c             	sub    $0xc,%esp
f0105147:	ff 75 f4             	pushl  -0xc(%ebp)
f010514a:	e8 d1 f7 ff ff       	call   f0104920 <sched_remove_new>
f010514f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105152:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105159:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010515e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105165:	74 08                	je     f010516f <sched_exit_env+0x5a>
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8b 40 44             	mov    0x44(%eax),%eax
f010516d:	eb 05                	jmp    f0105174 <sched_exit_env+0x5f>
f010516f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105174:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0105179:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010517e:	85 c0                	test   %eax,%eax
f0105180:	75 b7                	jne    f0105139 <sched_exit_env+0x24>
f0105182:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105186:	75 b1                	jne    f0105139 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105188:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010518c:	0f 85 6e 01 00 00    	jne    f0105300 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105192:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105199:	e9 4e 01 00 00       	jmp    f01052ec <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010519e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051a1:	c1 e0 04             	shl    $0x4,%eax
f01051a4:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f01051a9:	8b 00                	mov    (%eax),%eax
f01051ab:	85 c0                	test   %eax,%eax
f01051ad:	0f 84 30 01 00 00    	je     f01052e3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01051b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01051ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051bd:	c1 e0 04             	shl    $0x4,%eax
f01051c0:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f01051c5:	8b 00                	mov    (%eax),%eax
f01051c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ca:	e9 d4 00 00 00       	jmp    f01052a3 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01051cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051d8:	0f 85 b5 00 00 00    	jne    f0105293 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01051de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e2:	75 17                	jne    f01051fb <sched_exit_env+0xe6>
f01051e4:	83 ec 04             	sub    $0x4,%esp
f01051e7:	68 a4 47 13 f0       	push   $0xf01347a4
f01051ec:	68 e1 01 00 00       	push   $0x1e1
f01051f1:	68 93 47 13 f0       	push   $0xf0134793
f01051f6:	e8 ab af ff ff       	call   f01001a6 <_panic>
f01051fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051fe:	8b 40 44             	mov    0x44(%eax),%eax
f0105201:	85 c0                	test   %eax,%eax
f0105203:	74 11                	je     f0105216 <sched_exit_env+0x101>
f0105205:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105208:	8b 40 44             	mov    0x44(%eax),%eax
f010520b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010520e:	8b 52 48             	mov    0x48(%edx),%edx
f0105211:	89 50 48             	mov    %edx,0x48(%eax)
f0105214:	eb 14                	jmp    f010522a <sched_exit_env+0x115>
f0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105219:	8b 40 48             	mov    0x48(%eax),%eax
f010521c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010521f:	c1 e2 04             	shl    $0x4,%edx
f0105222:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f0105228:	89 02                	mov    %eax,(%edx)
f010522a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010522d:	8b 40 48             	mov    0x48(%eax),%eax
f0105230:	85 c0                	test   %eax,%eax
f0105232:	74 11                	je     f0105245 <sched_exit_env+0x130>
f0105234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105237:	8b 40 48             	mov    0x48(%eax),%eax
f010523a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010523d:	8b 52 44             	mov    0x44(%edx),%edx
f0105240:	89 50 44             	mov    %edx,0x44(%eax)
f0105243:	eb 14                	jmp    f0105259 <sched_exit_env+0x144>
f0105245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105248:	8b 40 44             	mov    0x44(%eax),%eax
f010524b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010524e:	c1 e2 04             	shl    $0x4,%edx
f0105251:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f0105257:	89 02                	mov    %eax,(%edx)
f0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010525c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105266:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010526d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105270:	c1 e0 04             	shl    $0x4,%eax
f0105273:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105278:	8b 00                	mov    (%eax),%eax
f010527a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010527d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105280:	c1 e0 04             	shl    $0x4,%eax
f0105283:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105288:	89 10                	mov    %edx,(%eax)
						found = 1;
f010528a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105291:	eb 50                	jmp    f01052e3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105293:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105296:	c1 e0 04             	shl    $0x4,%eax
f0105299:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f010529e:	8b 00                	mov    (%eax),%eax
f01052a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052a7:	74 08                	je     f01052b1 <sched_exit_env+0x19c>
f01052a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052ac:	8b 40 44             	mov    0x44(%eax),%eax
f01052af:	eb 05                	jmp    f01052b6 <sched_exit_env+0x1a1>
f01052b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01052b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052b9:	c1 e2 04             	shl    $0x4,%edx
f01052bc:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f01052c2:	89 02                	mov    %eax,(%edx)
f01052c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01052c7:	c1 e0 04             	shl    $0x4,%eax
f01052ca:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f01052cf:	8b 00                	mov    (%eax),%eax
f01052d1:	85 c0                	test   %eax,%eax
f01052d3:	0f 85 f6 fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
f01052d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052dd:	0f 85 ec fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01052e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052e7:	75 16                	jne    f01052ff <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052e9:	ff 45 ec             	incl   -0x14(%ebp)
f01052ec:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01052f1:	0f b6 c0             	movzbl %al,%eax
f01052f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01052f7:	0f 8f a1 fe ff ff    	jg     f010519e <sched_exit_env+0x89>
f01052fd:	eb 01                	jmp    f0105300 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01052ff:	90                   	nop
		}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	75 1c                	jne    f0105322 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0105306:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010530b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010530e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105311:	75 0f                	jne    f0105322 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105313:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0105318:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010531b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105322:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105326:	74 2a                	je     f0105352 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105328:	83 ec 0c             	sub    $0xc,%esp
f010532b:	ff 75 f4             	pushl  -0xc(%ebp)
f010532e:	e8 92 f6 ff ff       	call   f01049c5 <sched_insert_exit>
f0105333:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105336:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010533b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010533e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105341:	75 0f                	jne    f0105352 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105343:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f010534a:	00 00 00 
			fos_scheduler();
f010534d:	e8 99 f2 ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105352:	90                   	nop
f0105353:	c9                   	leave  
f0105354:	c3                   	ret    

f0105355 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105355:	55                   	push   %ebp
f0105356:	89 e5                	mov    %esp,%ebp
f0105358:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010535b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105362:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105369:	e9 3e 01 00 00       	jmp    f01054ac <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010536e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105371:	c1 e0 04             	shl    $0x4,%eax
f0105374:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0105379:	8b 00                	mov    (%eax),%eax
f010537b:	85 c0                	test   %eax,%eax
f010537d:	0f 84 26 01 00 00    	je     f01054a9 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105383:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010538a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010538d:	c1 e0 04             	shl    $0x4,%eax
f0105390:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0105395:	8b 00                	mov    (%eax),%eax
f0105397:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010539a:	e9 ca 00 00 00       	jmp    f0105469 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010539f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a3:	75 17                	jne    f01053bc <sched_exit_all_ready_envs+0x67>
f01053a5:	83 ec 04             	sub    $0x4,%esp
f01053a8:	68 a4 47 13 f0       	push   $0xf01347a4
f01053ad:	68 0c 02 00 00       	push   $0x20c
f01053b2:	68 93 47 13 f0       	push   $0xf0134793
f01053b7:	e8 ea ad ff ff       	call   f01001a6 <_panic>
f01053bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053bf:	8b 40 44             	mov    0x44(%eax),%eax
f01053c2:	85 c0                	test   %eax,%eax
f01053c4:	74 11                	je     f01053d7 <sched_exit_all_ready_envs+0x82>
f01053c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c9:	8b 40 44             	mov    0x44(%eax),%eax
f01053cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053cf:	8b 52 48             	mov    0x48(%edx),%edx
f01053d2:	89 50 48             	mov    %edx,0x48(%eax)
f01053d5:	eb 14                	jmp    f01053eb <sched_exit_all_ready_envs+0x96>
f01053d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053da:	8b 40 48             	mov    0x48(%eax),%eax
f01053dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f01053e9:	89 02                	mov    %eax,(%edx)
f01053eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ee:	8b 40 48             	mov    0x48(%eax),%eax
f01053f1:	85 c0                	test   %eax,%eax
f01053f3:	74 11                	je     f0105406 <sched_exit_all_ready_envs+0xb1>
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 48             	mov    0x48(%eax),%eax
f01053fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053fe:	8b 52 44             	mov    0x44(%edx),%edx
f0105401:	89 50 44             	mov    %edx,0x44(%eax)
f0105404:	eb 14                	jmp    f010541a <sched_exit_all_ready_envs+0xc5>
f0105406:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105409:	8b 40 44             	mov    0x44(%eax),%eax
f010540c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010540f:	c1 e2 04             	shl    $0x4,%edx
f0105412:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f0105418:	89 02                	mov    %eax,(%edx)
f010541a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105427:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010542e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105431:	c1 e0 04             	shl    $0x4,%eax
f0105434:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105439:	8b 00                	mov    (%eax),%eax
f010543b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010543e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105441:	c1 e0 04             	shl    $0x4,%eax
f0105444:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105449:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010544b:	83 ec 0c             	sub    $0xc,%esp
f010544e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105451:	e8 6f f5 ff ff       	call   f01049c5 <sched_insert_exit>
f0105456:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105459:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010545c:	c1 e0 04             	shl    $0x4,%eax
f010545f:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0105464:	8b 00                	mov    (%eax),%eax
f0105466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546d:	74 08                	je     f0105477 <sched_exit_all_ready_envs+0x122>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	eb 05                	jmp    f010547c <sched_exit_all_ready_envs+0x127>
f0105477:	b8 00 00 00 00       	mov    $0x0,%eax
f010547c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010547f:	c1 e2 04             	shl    $0x4,%edx
f0105482:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f0105488:	89 02                	mov    %eax,(%edx)
f010548a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010548d:	c1 e0 04             	shl    $0x4,%eax
f0105490:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0105495:	8b 00                	mov    (%eax),%eax
f0105497:	85 c0                	test   %eax,%eax
f0105499:	0f 85 00 ff ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>
f010549f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054a3:	0f 85 f6 fe ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054a9:	ff 45 f0             	incl   -0x10(%ebp)
f01054ac:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01054b1:	0f b6 c0             	movzbl %al,%eax
f01054b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01054b7:	0f 8f b1 fe ff ff    	jg     f010536e <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01054bd:	90                   	nop
f01054be:	c9                   	leave  
f01054bf:	c3                   	ret    

f01054c0 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f01054c0:	55                   	push   %ebp
f01054c1:	89 e5                	mov    %esp,%ebp
f01054c3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01054cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01054d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054d8:	0f 85 a0 00 00 00    	jne    f010557e <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054de:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f01054e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054e6:	eb 67                	jmp    f010554f <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054eb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f1:	75 54                	jne    f0105547 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01054f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f6:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01054fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105502:	83 ec 04             	sub    $0x4,%esp
f0105505:	52                   	push   %edx
f0105506:	50                   	push   %eax
f0105507:	68 ec 49 13 f0       	push   $0xf01349ec
f010550c:	e8 1c b7 ff ff       	call   f0100c2d <cprintf>
f0105511:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	ff 75 f4             	pushl  -0xc(%ebp)
f010551a:	e8 01 f4 ff ff       	call   f0104920 <sched_remove_new>
f010551f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105522:	83 ec 0c             	sub    $0xc,%esp
f0105525:	ff 75 f4             	pushl  -0xc(%ebp)
f0105528:	e8 6f 38 00 00       	call   f0108d9c <env_free>
f010552d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105530:	83 ec 0c             	sub    $0xc,%esp
f0105533:	68 6b 49 13 f0       	push   $0xf013496b
f0105538:	e8 f0 b6 ff ff       	call   f0100c2d <cprintf>
f010553d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105540:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105547:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010554c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010554f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105553:	74 08                	je     f010555d <sched_kill_env+0x9d>
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 44             	mov    0x44(%eax),%eax
f010555b:	eb 05                	jmp    f0105562 <sched_kill_env+0xa2>
f010555d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105562:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0105567:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010556c:	85 c0                	test   %eax,%eax
f010556e:	0f 85 74 ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
f0105574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105578:	0f 85 6a ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010557e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105582:	0f 85 ad 01 00 00    	jne    f0105735 <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105588:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010558f:	e9 8d 01 00 00       	jmp    f0105721 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105597:	c1 e0 04             	shl    $0x4,%eax
f010559a:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f010559f:	8b 00                	mov    (%eax),%eax
f01055a1:	85 c0                	test   %eax,%eax
f01055a3:	0f 84 6f 01 00 00    	je     f0105718 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f01055a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055b3:	c1 e0 04             	shl    $0x4,%eax
f01055b6:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f01055bb:	8b 00                	mov    (%eax),%eax
f01055bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c0:	e9 13 01 00 00       	jmp    f01056d8 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f01055c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055ce:	0f 85 f4 00 00 00    	jne    f01056c8 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01055d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d7:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01055dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01055e6:	52                   	push   %edx
f01055e7:	50                   	push   %eax
f01055e8:	68 14 4a 13 f0       	push   $0xf0134a14
f01055ed:	e8 3b b6 ff ff       	call   f0100c2d <cprintf>
f01055f2:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01055f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055f9:	75 17                	jne    f0105612 <sched_kill_env+0x152>
f01055fb:	83 ec 04             	sub    $0x4,%esp
f01055fe:	68 a4 47 13 f0       	push   $0xf01347a4
f0105603:	68 33 02 00 00       	push   $0x233
f0105608:	68 93 47 13 f0       	push   $0xf0134793
f010560d:	e8 94 ab ff ff       	call   f01001a6 <_panic>
f0105612:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105615:	8b 40 44             	mov    0x44(%eax),%eax
f0105618:	85 c0                	test   %eax,%eax
f010561a:	74 11                	je     f010562d <sched_kill_env+0x16d>
f010561c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561f:	8b 40 44             	mov    0x44(%eax),%eax
f0105622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105625:	8b 52 48             	mov    0x48(%edx),%edx
f0105628:	89 50 48             	mov    %edx,0x48(%eax)
f010562b:	eb 14                	jmp    f0105641 <sched_kill_env+0x181>
f010562d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105630:	8b 40 48             	mov    0x48(%eax),%eax
f0105633:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105636:	c1 e2 04             	shl    $0x4,%edx
f0105639:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f010563f:	89 02                	mov    %eax,(%edx)
f0105641:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105644:	8b 40 48             	mov    0x48(%eax),%eax
f0105647:	85 c0                	test   %eax,%eax
f0105649:	74 11                	je     f010565c <sched_kill_env+0x19c>
f010564b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564e:	8b 40 48             	mov    0x48(%eax),%eax
f0105651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105654:	8b 52 44             	mov    0x44(%edx),%edx
f0105657:	89 50 44             	mov    %edx,0x44(%eax)
f010565a:	eb 14                	jmp    f0105670 <sched_kill_env+0x1b0>
f010565c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565f:	8b 40 44             	mov    0x44(%eax),%eax
f0105662:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105665:	c1 e2 04             	shl    $0x4,%edx
f0105668:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f010566e:	89 02                	mov    %eax,(%edx)
f0105670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105673:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105687:	c1 e0 04             	shl    $0x4,%eax
f010568a:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f010568f:	8b 00                	mov    (%eax),%eax
f0105691:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105694:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105697:	c1 e0 04             	shl    $0x4,%eax
f010569a:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f010569f:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 f0 36 00 00       	call   f0108d9c <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 6b 49 13 f0       	push   $0xf013496b
f01056b7:	e8 71 b5 ff ff       	call   f0100c2d <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01056c6:	eb 50                	jmp    f0105718 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056cb:	c1 e0 04             	shl    $0x4,%eax
f01056ce:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f01056d3:	8b 00                	mov    (%eax),%eax
f01056d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056dc:	74 08                	je     f01056e6 <sched_kill_env+0x226>
f01056de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e1:	8b 40 44             	mov    0x44(%eax),%eax
f01056e4:	eb 05                	jmp    f01056eb <sched_kill_env+0x22b>
f01056e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01056eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056ee:	c1 e2 04             	shl    $0x4,%edx
f01056f1:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f01056f7:	89 02                	mov    %eax,(%edx)
f01056f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056fc:	c1 e0 04             	shl    $0x4,%eax
f01056ff:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0105704:	8b 00                	mov    (%eax),%eax
f0105706:	85 c0                	test   %eax,%eax
f0105708:	0f 85 b7 fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
f010570e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105712:	0f 85 ad fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0105718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010571c:	75 16                	jne    f0105734 <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010571e:	ff 45 ec             	incl   -0x14(%ebp)
f0105721:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0105726:	0f b6 c0             	movzbl %al,%eax
f0105729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010572c:	0f 8f 62 fe ff ff    	jg     f0105594 <sched_kill_env+0xd4>
f0105732:	eb 01                	jmp    f0105735 <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f0105734:	90                   	nop
		}
	}
	if (!found)
f0105735:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105739:	0f 85 a7 00 00 00    	jne    f01057e6 <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f010573f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105746:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f010574b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010574e:	eb 67                	jmp    f01057b7 <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0105750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105753:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105756:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105759:	75 54                	jne    f01057af <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010575b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105767:	8b 40 4c             	mov    0x4c(%eax),%eax
f010576a:	83 ec 04             	sub    $0x4,%esp
f010576d:	52                   	push   %edx
f010576e:	50                   	push   %eax
f010576f:	68 40 4a 13 f0       	push   $0xf0134a40
f0105774:	e8 b4 b4 ff ff       	call   f0100c2d <cprintf>
f0105779:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010577c:	83 ec 0c             	sub    $0xc,%esp
f010577f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105782:	e8 81 f2 ff ff       	call   f0104a08 <sched_remove_exit>
f0105787:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010578a:	83 ec 0c             	sub    $0xc,%esp
f010578d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105790:	e8 07 36 00 00       	call   f0108d9c <env_free>
f0105795:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105798:	83 ec 0c             	sub    $0xc,%esp
f010579b:	68 6b 49 13 f0       	push   $0xf013496b
f01057a0:	e8 88 b4 ff ff       	call   f0100c2d <cprintf>
f01057a5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01057a8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057af:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f01057b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057bb:	74 08                	je     f01057c5 <sched_kill_env+0x305>
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 44             	mov    0x44(%eax),%eax
f01057c3:	eb 05                	jmp    f01057ca <sched_kill_env+0x30a>
f01057c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01057ca:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f01057cf:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f01057d4:	85 c0                	test   %eax,%eax
f01057d6:	0f 85 74 ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
f01057dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e0:	0f 85 6a ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f01057e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057ea:	0f 85 a0 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f01057f0:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01057f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fb:	0f 85 8f 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105801:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580f:	83 f8 02             	cmp    $0x2,%eax
f0105812:	74 19                	je     f010582d <sched_kill_env+0x36d>
f0105814:	68 68 4a 13 f0       	push   $0xf0134a68
f0105819:	68 88 4a 13 f0       	push   $0xf0134a88
f010581e:	68 56 02 00 00       	push   $0x256
f0105823:	68 93 47 13 f0       	push   $0xf0134793
f0105828:	e8 79 a9 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105839:	8b 40 4c             	mov    0x4c(%eax),%eax
f010583c:	83 ec 04             	sub    $0x4,%esp
f010583f:	52                   	push   %edx
f0105840:	50                   	push   %eax
f0105841:	68 a0 4a 13 f0       	push   $0xf0134aa0
f0105846:	e8 e2 b3 ff ff       	call   f0100c2d <cprintf>
f010584b:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010584e:	83 ec 0c             	sub    $0xc,%esp
f0105851:	ff 75 f4             	pushl  -0xc(%ebp)
f0105854:	e8 43 35 00 00       	call   f0108d9c <env_free>
f0105859:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010585c:	83 ec 0c             	sub    $0xc,%esp
f010585f:	68 6b 49 13 f0       	push   $0xf013496b
f0105864:	e8 c4 b3 ff ff       	call   f0100c2d <cprintf>
f0105869:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010586c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105873:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0105878:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010587b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010587e:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105881:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f0105888:	00 00 00 
			fos_scheduler();
f010588b:	e8 5b ed ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105890:	90                   	nop
f0105891:	c9                   	leave  
f0105892:	c3                   	ret    

f0105893 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105893:	55                   	push   %ebp
f0105894:	89 e5                	mov    %esp,%ebp
f0105896:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105899:	83 ec 0c             	sub    $0xc,%esp
f010589c:	6a 01                	push   $0x1
f010589e:	e8 d6 76 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f01058a3:	83 c4 10             	add    $0x10,%esp
f01058a6:	85 c0                	test   %eax,%eax
f01058a8:	74 05                	je     f01058af <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01058aa:	e8 05 00 00 00       	call   f01058b4 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01058af:	e8 37 ed ff ff       	call   f01045eb <fos_scheduler>

f01058b4 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01058b4:	55                   	push   %ebp
f01058b5:	89 e5                	mov    %esp,%ebp
f01058b7:	53                   	push   %ebx
f01058b8:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01058bb:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01058c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01058c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01058c7:	0f 84 cf 01 00 00    	je     f0105a9c <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01058cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058d4:	e9 ce 00 00 00       	jmp    f01059a7 <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01058d9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058df:	89 d0                	mov    %edx,%eax
f01058e1:	01 c0                	add    %eax,%eax
f01058e3:	01 d0                	add    %edx,%eax
f01058e5:	c1 e0 03             	shl    $0x3,%eax
f01058e8:	01 c8                	add    %ecx,%eax
f01058ea:	83 c0 7c             	add    $0x7c,%eax
f01058ed:	8a 00                	mov    (%eax),%al
f01058ef:	3c 01                	cmp    $0x1,%al
f01058f1:	0f 84 ad 00 00 00    	je     f01059a4 <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01058f7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058fd:	89 d0                	mov    %edx,%eax
f01058ff:	01 c0                	add    %eax,%eax
f0105901:	01 d0                	add    %edx,%eax
f0105903:	c1 e0 03             	shl    $0x3,%eax
f0105906:	01 c8                	add    %ecx,%eax
f0105908:	83 c0 78             	add    $0x78,%eax
f010590b:	8b 00                	mov    (%eax),%eax
f010590d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105910:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105913:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105916:	83 ec 08             	sub    $0x8,%esp
f0105919:	ff 75 e8             	pushl  -0x18(%ebp)
f010591c:	50                   	push   %eax
f010591d:	e8 a4 1b 00 00       	call   f01074c6 <pt_get_page_permissions>
f0105922:	83 c4 10             	add    $0x10,%esp
f0105925:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105928:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010592b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010592e:	89 d0                	mov    %edx,%eax
f0105930:	01 c0                	add    %eax,%eax
f0105932:	01 d0                	add    %edx,%eax
f0105934:	c1 e0 03             	shl    $0x3,%eax
f0105937:	01 c8                	add    %ecx,%eax
f0105939:	83 e8 80             	sub    $0xffffff80,%eax
f010593c:	8b 00                	mov    (%eax),%eax
f010593e:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105941:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105944:	83 e0 20             	and    $0x20,%eax
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 3b                	je     f0105986 <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010594b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010594e:	c1 e8 02             	shr    $0x2,%eax
f0105951:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105956:	89 c1                	mov    %eax,%ecx
f0105958:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010595b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010595e:	89 d0                	mov    %edx,%eax
f0105960:	01 c0                	add    %eax,%eax
f0105962:	01 d0                	add    %edx,%eax
f0105964:	c1 e0 03             	shl    $0x3,%eax
f0105967:	01 d8                	add    %ebx,%eax
f0105969:	83 e8 80             	sub    $0xffffff80,%eax
f010596c:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010596e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105971:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105974:	6a 20                	push   $0x20
f0105976:	6a 00                	push   $0x0
f0105978:	ff 75 e8             	pushl  -0x18(%ebp)
f010597b:	50                   	push   %eax
f010597c:	e8 2b 1b 00 00       	call   f01074ac <pt_set_page_permissions>
f0105981:	83 c4 10             	add    $0x10,%esp
f0105984:	eb 1e                	jmp    f01059a4 <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105986:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105989:	c1 e8 02             	shr    $0x2,%eax
f010598c:	89 c1                	mov    %eax,%ecx
f010598e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105994:	89 d0                	mov    %edx,%eax
f0105996:	01 c0                	add    %eax,%eax
f0105998:	01 d0                	add    %edx,%eax
f010599a:	c1 e0 03             	shl    $0x3,%eax
f010599d:	01 d8                	add    %ebx,%eax
f010599f:	83 e8 80             	sub    $0xffffff80,%eax
f01059a2:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059a4:	ff 45 f4             	incl   -0xc(%ebp)
f01059a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059aa:	8b 50 74             	mov    0x74(%eax),%edx
f01059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b0:	39 c2                	cmp    %eax,%edx
f01059b2:	0f 87 21 ff ff ff    	ja     f01058d9 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01059b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01059bf:	e9 ce 00 00 00       	jmp    f0105a92 <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01059c4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ca:	89 d0                	mov    %edx,%eax
f01059cc:	01 c0                	add    %eax,%eax
f01059ce:	01 d0                	add    %edx,%eax
f01059d0:	c1 e0 03             	shl    $0x3,%eax
f01059d3:	01 c8                	add    %ecx,%eax
f01059d5:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01059da:	8a 00                	mov    (%eax),%al
f01059dc:	3c 01                	cmp    $0x1,%al
f01059de:	0f 84 ab 00 00 00    	je     f0105a8f <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01059e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ea:	89 d0                	mov    %edx,%eax
f01059ec:	01 c0                	add    %eax,%eax
f01059ee:	01 d0                	add    %edx,%eax
f01059f0:	c1 e0 03             	shl    $0x3,%eax
f01059f3:	01 c8                	add    %ecx,%eax
f01059f5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01059fa:	8b 00                	mov    (%eax),%eax
f01059fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f01059ff:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a05:	89 d0                	mov    %edx,%eax
f0105a07:	01 c0                	add    %eax,%eax
f0105a09:	01 d0                	add    %edx,%eax
f0105a0b:	c1 e0 03             	shl    $0x3,%eax
f0105a0e:	01 c8                	add    %ecx,%eax
f0105a10:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a15:	8b 00                	mov    (%eax),%eax
f0105a17:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a20:	83 ec 08             	sub    $0x8,%esp
f0105a23:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a26:	50                   	push   %eax
f0105a27:	e8 19 1b 00 00       	call   f0107545 <pd_is_table_used>
f0105a2c:	83 c4 10             	add    $0x10,%esp
f0105a2f:	85 c0                	test   %eax,%eax
f0105a31:	74 3c                	je     f0105a6f <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a36:	c1 e8 02             	shr    $0x2,%eax
f0105a39:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105a3e:	89 c1                	mov    %eax,%ecx
f0105a40:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a43:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a46:	89 d0                	mov    %edx,%eax
f0105a48:	01 c0                	add    %eax,%eax
f0105a4a:	01 d0                	add    %edx,%eax
f0105a4c:	c1 e0 03             	shl    $0x3,%eax
f0105a4f:	01 d8                	add    %ebx,%eax
f0105a51:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a56:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a5b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a5e:	83 ec 08             	sub    $0x8,%esp
f0105a61:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a64:	50                   	push   %eax
f0105a65:	e8 ff 1a 00 00       	call   f0107569 <pd_set_table_unused>
f0105a6a:	83 c4 10             	add    $0x10,%esp
f0105a6d:	eb 20                	jmp    f0105a8f <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105a6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a72:	c1 e8 02             	shr    $0x2,%eax
f0105a75:	89 c1                	mov    %eax,%ecx
f0105a77:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a7d:	89 d0                	mov    %edx,%eax
f0105a7f:	01 c0                	add    %eax,%eax
f0105a81:	01 d0                	add    %edx,%eax
f0105a83:	c1 e0 03             	shl    $0x3,%eax
f0105a86:	01 d8                	add    %ebx,%eax
f0105a88:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a8d:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a8f:	ff 45 f0             	incl   -0x10(%ebp)
f0105a92:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105a96:	0f 8e 28 ff ff ff    	jle    f01059c4 <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f0105a9c:	90                   	nop
f0105a9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105aa0:	c9                   	leave  
f0105aa1:	c3                   	ret    

f0105aa2 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105aa2:	55                   	push   %ebp
f0105aa3:	89 e5                	mov    %esp,%ebp
f0105aa5:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105aa8:	c7 05 2c 77 65 f0 01 	movl   $0x1,0xf065772c
f0105aaf:	00 00 00 
f0105ab2:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105ab9:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105abd:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ac3:	ee                   	out    %al,(%dx)
f0105ac4:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105acb:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105acf:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ad2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ad5:	ee                   	out    %al,(%dx)
f0105ad6:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105add:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105ae1:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105ae4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105ae7:	ee                   	out    %al,(%dx)
f0105ae8:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105aef:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105af3:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105af6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105af9:	ee                   	out    %al,(%dx)
f0105afa:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b01:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105b05:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105b08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105b0b:	ee                   	out    %al,(%dx)
f0105b0c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105b13:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105b17:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105b1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b1d:	ee                   	out    %al,(%dx)
f0105b1e:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105b25:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105b29:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105b2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105b2f:	ee                   	out    %al,(%dx)
f0105b30:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105b37:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105b3b:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105b3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105b41:	ee                   	out    %al,(%dx)
f0105b42:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105b49:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105b4d:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105b50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105b53:	ee                   	out    %al,(%dx)
f0105b54:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105b5b:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105b5f:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105b62:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105b65:	ee                   	out    %al,(%dx)
f0105b66:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105b6d:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105b71:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105b74:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105b77:	ee                   	out    %al,(%dx)
f0105b78:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105b7f:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105b83:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105b86:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105b89:	ee                   	out    %al,(%dx)
f0105b8a:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105b91:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105b95:	8a 45 be             	mov    -0x42(%ebp),%al
f0105b98:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105b9b:	ee                   	out    %al,(%dx)
f0105b9c:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105ba3:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105ba7:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105baa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105bad:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105bae:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0105bb4:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105bb8:	74 15                	je     f0105bcf <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105bba:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0105bc0:	0f b7 c0             	movzwl %ax,%eax
f0105bc3:	83 ec 0c             	sub    $0xc,%esp
f0105bc6:	50                   	push   %eax
f0105bc7:	e8 06 00 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0105bcc:	83 c4 10             	add    $0x10,%esp
}
f0105bcf:	90                   	nop
f0105bd0:	c9                   	leave  
f0105bd1:	c3                   	ret    

f0105bd2 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105bd2:	55                   	push   %ebp
f0105bd3:	89 e5                	mov    %esp,%ebp
f0105bd5:	83 ec 14             	sub    $0x14,%esp
f0105bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bdb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105be2:	66 a3 b0 f8 18 f0    	mov    %ax,0xf018f8b0
	if (!didinit)
f0105be8:	a1 2c 77 65 f0       	mov    0xf065772c,%eax
f0105bed:	85 c0                	test   %eax,%eax
f0105bef:	74 34                	je     f0105c25 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bf4:	0f b6 c0             	movzbl %al,%eax
f0105bf7:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105bfe:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c01:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105c04:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105c07:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105c08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c0b:	66 c1 e8 08          	shr    $0x8,%ax
f0105c0f:	0f b6 c0             	movzbl %al,%eax
f0105c12:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105c19:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105c1c:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105c1f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105c22:	ee                   	out    %al,(%dx)
f0105c23:	eb 01                	jmp    f0105c26 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105c25:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105c26:	c9                   	leave  
f0105c27:	c3                   	ret    

f0105c28 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105c28:	55                   	push   %ebp
f0105c29:	89 e5                	mov    %esp,%ebp
f0105c2b:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105c2e:	83 ec 08             	sub    $0x8,%esp
f0105c31:	68 00 10 00 00       	push   $0x1000
f0105c36:	68 00 10 00 00       	push   $0x1000
f0105c3b:	e8 5d 02 00 00       	call   f0105e9d <boot_allocate_space>
f0105c40:	83 c4 10             	add    $0x10,%esp
f0105c43:	a3 d8 74 6e f0       	mov    %eax,0xf06e74d8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105c48:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105c4d:	83 ec 04             	sub    $0x4,%esp
f0105c50:	68 00 10 00 00       	push   $0x1000
f0105c55:	6a 00                	push   $0x0
f0105c57:	50                   	push   %eax
f0105c58:	e8 28 a6 02 00       	call   f0130285 <memset>
f0105c5d:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105c60:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105c65:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105c68:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105c6f:	77 14                	ja     f0105c85 <initialize_kernel_VM+0x5d>
f0105c71:	ff 75 e8             	pushl  -0x18(%ebp)
f0105c74:	68 cc 4a 13 f0       	push   $0xf0134acc
f0105c79:	6a 45                	push   $0x45
f0105c7b:	68 00 4b 13 f0       	push   $0xf0134b00
f0105c80:	e8 21 a5 ff ff       	call   f01001a6 <_panic>
f0105c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c88:	05 00 00 00 10       	add    $0x10000000,%eax
f0105c8d:	a3 08 75 6e f0       	mov    %eax,0xf06e7508
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105c92:	c7 45 e4 00 70 18 f0 	movl   $0xf0187000,-0x1c(%ebp)
f0105c99:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105ca0:	77 14                	ja     f0105cb6 <initialize_kernel_VM+0x8e>
f0105ca2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ca5:	68 cc 4a 13 f0       	push   $0xf0134acc
f0105caa:	6a 4d                	push   $0x4d
f0105cac:	68 00 4b 13 f0       	push   $0xf0134b00
f0105cb1:	e8 f0 a4 ff ff       	call   f01001a6 <_panic>
f0105cb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cb9:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105cbf:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105cc4:	83 ec 0c             	sub    $0xc,%esp
f0105cc7:	6a 02                	push   $0x2
f0105cc9:	52                   	push   %edx
f0105cca:	68 00 80 00 00       	push   $0x8000
f0105ccf:	68 00 80 bf ef       	push   $0xefbf8000
f0105cd4:	50                   	push   %eax
f0105cd5:	e8 24 02 00 00       	call   f0105efe <boot_map_range>
f0105cda:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105cdd:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105ce4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105ceb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105cf2:	eb 25                	jmp    f0105d19 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105cf4:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105cf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cfa:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105cff:	83 ec 04             	sub    $0x4,%esp
f0105d02:	6a 01                	push   $0x1
f0105d04:	52                   	push   %edx
f0105d05:	50                   	push   %eax
f0105d06:	e8 67 02 00 00       	call   f0105f72 <boot_get_page_table>
f0105d0b:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d0e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105d15:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1d:	72 d5                	jb     f0105cf4 <initialize_kernel_VM+0xcc>
f0105d1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d23:	77 06                	ja     f0105d2b <initialize_kernel_VM+0x103>
f0105d25:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105d29:	76 c9                	jbe    f0105cf4 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105d2b:	8b 15 70 74 6e f0    	mov    0xf06e7470,%edx
f0105d31:	89 d0                	mov    %edx,%eax
f0105d33:	01 c0                	add    %eax,%eax
f0105d35:	01 d0                	add    %edx,%eax
f0105d37:	c1 e0 03             	shl    $0x3,%eax
f0105d3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105d3d:	83 ec 08             	sub    $0x8,%esp
f0105d40:	68 00 10 00 00       	push   $0x1000
f0105d45:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d48:	e8 50 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d4d:	83 c4 10             	add    $0x10,%esp
f0105d50:	a3 b0 74 6e f0       	mov    %eax,0xf06e74b0
	memset(frames_info, 0, array_size);
f0105d55:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f0105d5a:	83 ec 04             	sub    $0x4,%esp
f0105d5d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d60:	6a 00                	push   $0x0
f0105d62:	50                   	push   %eax
f0105d63:	e8 1d a5 02 00       	call   f0130285 <memset>
f0105d68:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105d6b:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105d72:	83 ec 08             	sub    $0x8,%esp
f0105d75:	68 00 10 00 00       	push   $0x1000
f0105d7a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d7d:	e8 1b 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d82:	83 c4 10             	add    $0x10,%esp
f0105d85:	a3 00 f1 67 f0       	mov    %eax,0xf067f100
	memset(disk_frames_info , 0, disk_array_size);
f0105d8a:	a1 00 f1 67 f0       	mov    0xf067f100,%eax
f0105d8f:	83 ec 04             	sub    $0x4,%esp
f0105d92:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d95:	6a 00                	push   $0x0
f0105d97:	50                   	push   %eax
f0105d98:	e8 e8 a4 02 00       	call   f0130285 <memset>
f0105d9d:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105da0:	e8 02 05 00 00       	call   f01062a7 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105da5:	83 ec 0c             	sub    $0xc,%esp
f0105da8:	6a 08                	push   $0x8
f0105daa:	e8 73 90 02 00       	call   f012ee22 <nearest_pow2_ceil>
f0105daf:	83 c4 10             	add    $0x10,%esp
f0105db2:	83 ec 04             	sub    $0x4,%esp
f0105db5:	50                   	push   %eax
f0105db6:	6a 08                	push   $0x8
f0105db8:	68 20 4b 13 f0       	push   $0xf0134b20
f0105dbd:	e8 6b ae ff ff       	call   f0100c2d <cprintf>
f0105dc2:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105dc5:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105dcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105dcf:	83 ec 08             	sub    $0x8,%esp
f0105dd2:	68 00 10 00 00       	push   $0x1000
f0105dd7:	50                   	push   %eax
f0105dd8:	e8 c0 00 00 00       	call   f0105e9d <boot_allocate_space>
f0105ddd:	83 c4 10             	add    $0x10,%esp
f0105de0:	a3 30 77 65 f0       	mov    %eax,0xf0657730
	memset(envs , 0, envs_size);
f0105de5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105de8:	a1 30 77 65 f0       	mov    0xf0657730,%eax
f0105ded:	83 ec 04             	sub    $0x4,%esp
f0105df0:	52                   	push   %edx
f0105df1:	6a 00                	push   $0x0
f0105df3:	50                   	push   %eax
f0105df4:	e8 8c a4 02 00       	call   f0130285 <memset>
f0105df9:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105dfc:	a1 30 77 65 f0       	mov    0xf0657730,%eax
f0105e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105e04:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105e0b:	77 17                	ja     f0105e24 <initialize_kernel_VM+0x1fc>
f0105e0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e10:	68 cc 4a 13 f0       	push   $0xf0134acc
f0105e15:	68 96 00 00 00       	push   $0x96
f0105e1a:	68 00 4b 13 f0       	push   $0xf0134b00
f0105e1f:	e8 82 a3 ff ff       	call   f01001a6 <_panic>
f0105e24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105e27:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105e2d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e30:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105e35:	83 ec 0c             	sub    $0xc,%esp
f0105e38:	6a 04                	push   $0x4
f0105e3a:	51                   	push   %ecx
f0105e3b:	52                   	push   %edx
f0105e3c:	68 00 00 c0 ee       	push   $0xeec00000
f0105e41:	50                   	push   %eax
f0105e42:	e8 b7 00 00 00       	call   f0105efe <boot_map_range>
f0105e47:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105e4a:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105e4f:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105e54:	8b 15 d8 74 6e f0    	mov    0xf06e74d8,%edx
f0105e5a:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105e60:	8b 12                	mov    (%edx),%edx
f0105e62:	83 ca 05             	or     $0x5,%edx
f0105e65:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105e67:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105e6c:	83 ec 0c             	sub    $0xc,%esp
f0105e6f:	6a 02                	push   $0x2
f0105e71:	6a 00                	push   $0x0
f0105e73:	68 ff ff ff 0f       	push   $0xfffffff
f0105e78:	68 00 00 00 f0       	push   $0xf0000000
f0105e7d:	50                   	push   %eax
f0105e7e:	e8 7b 00 00 00       	call   f0105efe <boot_map_range>
f0105e83:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105e86:	e8 6e 97 02 00       	call   f012f5f9 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105e8b:	c7 05 60 50 6e f0 19 	movl   $0x19,0xf06e5060
f0105e92:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105e95:	e8 0d 03 00 00       	call   f01061a7 <turn_on_paging>
}
f0105e9a:	90                   	nop
f0105e9b:	c9                   	leave  
f0105e9c:	c3                   	ret    

f0105e9d <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105e9d:	55                   	push   %ebp
f0105e9e:	89 e5                	mov    %esp,%ebp
f0105ea0:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105ea3:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f0105ea8:	85 c0                	test   %eax,%eax
f0105eaa:	75 0a                	jne    f0105eb6 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105eac:	c7 05 d4 74 6e f0 1c 	movl   $0xf06e761c,0xf06e74d4
f0105eb3:	76 6e f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105ebc:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f0105ec1:	89 c2                	mov    %eax,%edx
f0105ec3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105ec6:	01 d0                	add    %edx,%eax
f0105ec8:	48                   	dec    %eax
f0105ec9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105ecc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ecf:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ed4:	f7 75 fc             	divl   -0x4(%ebp)
f0105ed7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105eda:	29 d0                	sub    %edx,%eax
f0105edc:	a3 d4 74 6e f0       	mov    %eax,0xf06e74d4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105ee1:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f0105ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105ee9:	8b 15 d4 74 6e f0    	mov    0xf06e74d4,%edx
f0105eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ef2:	01 d0                	add    %edx,%eax
f0105ef4:	a3 d4 74 6e f0       	mov    %eax,0xf06e74d4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105efc:	c9                   	leave  
f0105efd:	c3                   	ret    

f0105efe <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105efe:	55                   	push   %ebp
f0105eff:	89 e5                	mov    %esp,%ebp
f0105f01:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105f04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105f12:	eb 53                	jmp    f0105f67 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105f14:	83 ec 04             	sub    $0x4,%esp
f0105f17:	6a 01                	push   $0x1
f0105f19:	ff 75 0c             	pushl  0xc(%ebp)
f0105f1c:	ff 75 08             	pushl  0x8(%ebp)
f0105f1f:	e8 4e 00 00 00       	call   f0105f72 <boot_get_page_table>
f0105f24:	83 c4 10             	add    $0x10,%esp
f0105f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f2d:	c1 e8 0c             	shr    $0xc,%eax
f0105f30:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f45:	01 c2                	add    %eax,%edx
f0105f47:	8b 45 18             	mov    0x18(%ebp),%eax
f0105f4a:	0b 45 14             	or     0x14(%ebp),%eax
f0105f4d:	83 c8 01             	or     $0x1,%eax
f0105f50:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105f52:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105f59:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f60:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f6a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105f6d:	72 a5                	jb     f0105f14 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105f6f:	90                   	nop
f0105f70:	c9                   	leave  
f0105f71:	c3                   	ret    

f0105f72 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0105f72:	55                   	push   %ebp
f0105f73:	89 e5                	mov    %esp,%ebp
f0105f75:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f7b:	c1 e8 16             	shr    $0x16,%eax
f0105f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f8e:	01 d0                	add    %edx,%eax
f0105f90:	8b 00                	mov    (%eax),%eax
f0105f92:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0105f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105f9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0105fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105fa6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fa9:	c1 e8 0c             	shr    $0xc,%eax
f0105fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105faf:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0105fb4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105fb7:	72 17                	jb     f0105fd0 <boot_get_page_table+0x5e>
f0105fb9:	ff 75 e8             	pushl  -0x18(%ebp)
f0105fbc:	68 48 4b 13 f0       	push   $0xf0134b48
f0105fc1:	68 15 01 00 00       	push   $0x115
f0105fc6:	68 00 4b 13 f0       	push   $0xf0134b00
f0105fcb:	e8 d6 a1 ff ff       	call   f01001a6 <_panic>
f0105fd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fd3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105fd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0105fdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105fdf:	75 72                	jne    f0106053 <boot_get_page_table+0xe1>
	{
		if (create)
f0105fe1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105fe5:	74 65                	je     f010604c <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0105fe7:	83 ec 08             	sub    $0x8,%esp
f0105fea:	68 00 10 00 00       	push   $0x1000
f0105fef:	68 00 10 00 00       	push   $0x1000
f0105ff4:	e8 a4 fe ff ff       	call   f0105e9d <boot_allocate_space>
f0105ff9:	83 c4 10             	add    $0x10,%esp
f0105ffc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0105fff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106002:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106005:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010600c:	77 17                	ja     f0106025 <boot_get_page_table+0xb3>
f010600e:	ff 75 dc             	pushl  -0x24(%ebp)
f0106011:	68 cc 4a 13 f0       	push   $0xf0134acc
f0106016:	68 1b 01 00 00       	push   $0x11b
f010601b:	68 00 4b 13 f0       	push   $0xf0134b00
f0106020:	e8 81 a1 ff ff       	call   f01001a6 <_panic>
f0106025:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106028:	05 00 00 00 10       	add    $0x10000000,%eax
f010602d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010603a:	8b 45 08             	mov    0x8(%ebp),%eax
f010603d:	01 d0                	add    %edx,%eax
f010603f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106042:	83 ca 03             	or     $0x3,%edx
f0106045:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106047:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010604a:	eb 0a                	jmp    f0106056 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010604c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106051:	eb 03                	jmp    f0106056 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106053:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106056:	c9                   	leave  
f0106057:	c3                   	ret    

f0106058 <nvram_read>:


int nvram_read(int r)
{
f0106058:	55                   	push   %ebp
f0106059:	89 e5                	mov    %esp,%ebp
f010605b:	53                   	push   %ebx
f010605c:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010605f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106062:	83 ec 0c             	sub    $0xc,%esp
f0106065:	50                   	push   %eax
f0106066:	e8 37 df ff ff       	call   f0103fa2 <mc146818_read>
f010606b:	83 c4 10             	add    $0x10,%esp
f010606e:	89 c3                	mov    %eax,%ebx
f0106070:	8b 45 08             	mov    0x8(%ebp),%eax
f0106073:	40                   	inc    %eax
f0106074:	83 ec 0c             	sub    $0xc,%esp
f0106077:	50                   	push   %eax
f0106078:	e8 25 df ff ff       	call   f0103fa2 <mc146818_read>
f010607d:	83 c4 10             	add    $0x10,%esp
f0106080:	c1 e0 08             	shl    $0x8,%eax
f0106083:	09 d8                	or     %ebx,%eax
}
f0106085:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106088:	c9                   	leave  
f0106089:	c3                   	ret    

f010608a <detect_memory>:

void detect_memory()
{
f010608a:	55                   	push   %ebp
f010608b:	89 e5                	mov    %esp,%ebp
f010608d:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106090:	83 ec 0c             	sub    $0xc,%esp
f0106093:	6a 15                	push   $0x15
f0106095:	e8 be ff ff ff       	call   f0106058 <nvram_read>
f010609a:	83 c4 10             	add    $0x10,%esp
f010609d:	c1 e0 0a             	shl    $0xa,%eax
f01060a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01060a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01060ae:	83 ec 0c             	sub    $0xc,%esp
f01060b1:	6a 17                	push   $0x17
f01060b3:	e8 a0 ff ff ff       	call   f0106058 <nvram_read>
f01060b8:	83 c4 10             	add    $0x10,%esp
f01060bb:	c1 e0 0a             	shl    $0xa,%eax
f01060be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01060c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01060cc:	83 ec 0c             	sub    $0xc,%esp
f01060cf:	6a 34                	push   $0x34
f01060d1:	e8 82 ff ff ff       	call   f0106058 <nvram_read>
f01060d6:	83 c4 10             	add    $0x10,%esp
f01060d9:	c1 e0 10             	shl    $0x10,%eax
f01060dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01060df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01060ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01060ee:	74 18                	je     f0106108 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01060f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060f3:	05 00 00 00 01       	add    $0x1000000,%eax
f01060f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01060fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060fe:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106103:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106106:	eb 19                	jmp    f0106121 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106108:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010610c:	74 0d                	je     f010611b <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010610e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106111:	05 00 00 10 00       	add    $0x100000,%eax
f0106116:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106119:	eb 06                	jmp    f0106121 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010611b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106121:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010612e:	76 32                	jbe    f0106162 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106130:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106133:	c1 e8 0a             	shr    $0xa,%eax
f0106136:	89 c2                	mov    %eax,%edx
f0106138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010613b:	c1 e8 0a             	shr    $0xa,%eax
f010613e:	83 ec 04             	sub    $0x4,%esp
f0106141:	52                   	push   %edx
f0106142:	50                   	push   %eax
f0106143:	68 78 4b 13 f0       	push   $0xf0134b78
f0106148:	e8 e0 aa ff ff       	call   f0100c2d <cprintf>
f010614d:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	68 c0 4b 13 f0       	push   $0xf0134bc0
f0106158:	e8 d0 aa ff ff       	call   f0100c2d <cprintf>
f010615d:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106160:	eb fe                	jmp    f0106160 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106162:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106165:	c1 e8 0c             	shr    $0xc,%eax
f0106168:	a3 70 74 6e f0       	mov    %eax,0xf06e7470

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010616d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106170:	c1 e8 0a             	shr    $0xa,%eax
f0106173:	83 ec 08             	sub    $0x8,%esp
f0106176:	50                   	push   %eax
f0106177:	68 54 4c 13 f0       	push   $0xf0134c54
f010617c:	e8 ac aa ff ff       	call   f0100c2d <cprintf>
f0106181:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106184:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106187:	c1 e8 0a             	shr    $0xa,%eax
f010618a:	89 c2                	mov    %eax,%edx
f010618c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010618f:	c1 e8 0a             	shr    $0xa,%eax
f0106192:	83 ec 04             	sub    $0x4,%esp
f0106195:	52                   	push   %edx
f0106196:	50                   	push   %eax
f0106197:	68 75 4c 13 f0       	push   $0xf0134c75
f010619c:	e8 8c aa ff ff       	call   f0100c2d <cprintf>
f01061a1:	83 c4 10             	add    $0x10,%esp
}
f01061a4:	90                   	nop
f01061a5:	c9                   	leave  
f01061a6:	c3                   	ret    

f01061a7 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01061a7:	55                   	push   %ebp
f01061a8:	89 e5                	mov    %esp,%ebp
f01061aa:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01061ad:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01061b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061bb:	eb 24                	jmp    f01061e1 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01061bd:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01061c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061c5:	c1 e2 02             	shl    $0x2,%edx
f01061c8:	01 c2                	add    %eax,%edx
f01061ca:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01061cf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01061d2:	c1 e1 02             	shl    $0x2,%ecx
f01061d5:	01 c8                	add    %ecx,%eax
f01061d7:	8b 00                	mov    (%eax),%eax
f01061d9:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061db:	ff 45 fc             	incl   -0x4(%ebp)
f01061de:	ff 45 f8             	incl   -0x8(%ebp)
f01061e1:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f01061e6:	c1 e8 16             	shr    $0x16,%eax
f01061e9:	89 c2                	mov    %eax,%edx
f01061eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01061ee:	39 c2                	cmp    %eax,%edx
f01061f0:	77 cb                	ja     f01061bd <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01061f2:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01061f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01061fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01061fd:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106200:	0f 20 c0             	mov    %cr0,%eax
f0106203:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106206:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010620c:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106213:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106217:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010621a:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010621d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106220:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106223:	0f 01 15 f0 f8 18 f0 	lgdtl  0xf018f8f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010622a:	b8 23 00 00 00       	mov    $0x23,%eax
f010622f:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106231:	b8 23 00 00 00       	mov    $0x23,%eax
f0106236:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106238:	b8 10 00 00 00       	mov    $0x10,%eax
f010623d:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010623f:	b8 10 00 00 00       	mov    $0x10,%eax
f0106244:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106246:	b8 10 00 00 00       	mov    $0x10,%eax
f010624b:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010624d:	ea 54 62 10 f0 08 00 	ljmp   $0x8,$0xf0106254
	asm volatile("lldt %%ax" :: "a" (0));
f0106254:	b8 00 00 00 00       	mov    $0x0,%eax
f0106259:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010625c:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106263:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010626a:	eb 19                	jmp    f0106285 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010626c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0106271:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106274:	c1 e2 02             	shl    $0x2,%edx
f0106277:	01 d0                	add    %edx,%eax
f0106279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010627f:	ff 45 f4             	incl   -0xc(%ebp)
f0106282:	ff 45 f0             	incl   -0x10(%ebp)
f0106285:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f010628a:	c1 e8 16             	shr    $0x16,%eax
f010628d:	89 c2                	mov    %eax,%edx
f010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106292:	39 c2                	cmp    %eax,%edx
f0106294:	77 d6                	ja     f010626c <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106296:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f010629b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010629e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062a1:	0f 22 d8             	mov    %eax,%cr3
}
f01062a4:	90                   	nop
f01062a5:	c9                   	leave  
f01062a6:	c3                   	ret    

f01062a7 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01062a7:	55                   	push   %ebp
f01062a8:	89 e5                	mov    %esp,%ebp
f01062aa:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01062ad:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01062b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062b5:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01062bc:	77 17                	ja     f01062d5 <setup_listing_to_all_page_tables_entries+0x2e>
f01062be:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c1:	68 cc 4a 13 f0       	push   $0xf0134acc
f01062c6:	68 ab 01 00 00       	push   $0x1ab
f01062cb:	68 00 4b 13 f0       	push   $0xf0134b00
f01062d0:	e8 d1 9e ff ff       	call   f01001a6 <_panic>
f01062d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d8:	05 00 00 00 10       	add    $0x10000000,%eax
f01062dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01062e0:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01062e5:	05 fc 0e 00 00       	add    $0xefc,%eax
f01062ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062ed:	83 ca 03             	or     $0x3,%edx
f01062f0:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01062f2:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01062f7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01062fd:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0106302:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106305:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010630c:	77 17                	ja     f0106325 <setup_listing_to_all_page_tables_entries+0x7e>
f010630e:	ff 75 ec             	pushl  -0x14(%ebp)
f0106311:	68 cc 4a 13 f0       	push   $0xf0134acc
f0106316:	68 b0 01 00 00       	push   $0x1b0
f010631b:	68 00 4b 13 f0       	push   $0xf0134b00
f0106320:	e8 81 9e ff ff       	call   f01001a6 <_panic>
f0106325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106328:	05 00 00 00 10       	add    $0x10000000,%eax
f010632d:	83 c8 05             	or     $0x5,%eax
f0106330:	89 02                	mov    %eax,(%edx)

}
f0106332:	90                   	nop
f0106333:	c9                   	leave  
f0106334:	c3                   	ret    

f0106335 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106335:	55                   	push   %ebp
f0106336:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106338:	8b 45 08             	mov    0x8(%ebp),%eax
f010633b:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0106341:	29 d0                	sub    %edx,%eax
f0106343:	c1 f8 03             	sar    $0x3,%eax
f0106346:	89 c2                	mov    %eax,%edx
f0106348:	89 d0                	mov    %edx,%eax
f010634a:	c1 e0 02             	shl    $0x2,%eax
f010634d:	01 d0                	add    %edx,%eax
f010634f:	c1 e0 02             	shl    $0x2,%eax
f0106352:	01 d0                	add    %edx,%eax
f0106354:	c1 e0 02             	shl    $0x2,%eax
f0106357:	01 d0                	add    %edx,%eax
f0106359:	89 c1                	mov    %eax,%ecx
f010635b:	c1 e1 08             	shl    $0x8,%ecx
f010635e:	01 c8                	add    %ecx,%eax
f0106360:	89 c1                	mov    %eax,%ecx
f0106362:	c1 e1 10             	shl    $0x10,%ecx
f0106365:	01 c8                	add    %ecx,%eax
f0106367:	01 c0                	add    %eax,%eax
f0106369:	01 d0                	add    %edx,%eax
}
f010636b:	5d                   	pop    %ebp
f010636c:	c3                   	ret    

f010636d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010636d:	55                   	push   %ebp
f010636e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106370:	ff 75 08             	pushl  0x8(%ebp)
f0106373:	e8 bd ff ff ff       	call   f0106335 <to_frame_number>
f0106378:	83 c4 04             	add    $0x4,%esp
f010637b:	c1 e0 0c             	shl    $0xc,%eax
}
f010637e:	c9                   	leave  
f010637f:	c3                   	ret    

f0106380 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106380:	55                   	push   %ebp
f0106381:	89 e5                	mov    %esp,%ebp
f0106383:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106386:	8b 45 08             	mov    0x8(%ebp),%eax
f0106389:	c1 e8 0c             	shr    $0xc,%eax
f010638c:	89 c2                	mov    %eax,%edx
f010638e:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106393:	39 c2                	cmp    %eax,%edx
f0106395:	72 14                	jb     f01063ab <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106397:	83 ec 04             	sub    $0x4,%esp
f010639a:	68 94 4c 13 f0       	push   $0xf0134c94
f010639f:	6a 55                	push   $0x55
f01063a1:	68 b9 4c 13 f0       	push   $0xf0134cb9
f01063a6:	e8 fb 9d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01063ab:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f01063b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01063b4:	c1 e8 0c             	shr    $0xc,%eax
f01063b7:	89 c1                	mov    %eax,%ecx
f01063b9:	89 c8                	mov    %ecx,%eax
f01063bb:	01 c0                	add    %eax,%eax
f01063bd:	01 c8                	add    %ecx,%eax
f01063bf:	c1 e0 03             	shl    $0x3,%eax
f01063c2:	01 d0                	add    %edx,%eax
}
f01063c4:	c9                   	leave  
f01063c5:	c3                   	ret    

f01063c6 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01063c6:	55                   	push   %ebp
f01063c7:	89 e5                	mov    %esp,%ebp
f01063c9:	83 ec 10             	sub    $0x10,%esp
f01063cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01063d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01063d5:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01063d8:	90                   	nop
f01063d9:	c9                   	leave  
f01063da:	c3                   	ret    

f01063db <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f01063db:	55                   	push   %ebp
f01063dc:	89 e5                	mov    %esp,%ebp
f01063de:	53                   	push   %ebx
f01063df:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f01063e2:	c7 05 78 74 6e f0 00 	movl   $0x0,0xf06e7478
f01063e9:	00 00 00 
f01063ec:	c7 05 7c 74 6e f0 00 	movl   $0x0,0xf06e747c
f01063f3:	00 00 00 
f01063f6:	c7 05 84 74 6e f0 00 	movl   $0x0,0xf06e7484
f01063fd:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106400:	c7 05 e0 7f 65 f0 00 	movl   $0x0,0xf0657fe0
f0106407:	00 00 00 
f010640a:	c7 05 e4 7f 65 f0 00 	movl   $0x0,0xf0657fe4
f0106411:	00 00 00 
f0106414:	c7 05 ec 7f 65 f0 00 	movl   $0x0,0xf0657fec
f010641b:	00 00 00 

	frames_info[0].references = 1;
f010641e:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f0106423:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106429:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f010642e:	83 c0 18             	add    $0x18,%eax
f0106431:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106437:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f010643c:	83 c0 30             	add    $0x30,%eax
f010643f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106445:	c7 05 bc 74 6e f0 00 	movl   $0xf0001000,0xf06e74bc
f010644c:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010644f:	c7 05 e0 74 6e f0 00 	movl   $0xf0002000,0xf06e74e0
f0106456:	20 00 f0 
	i =0;
f0106459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106460:	eb 1f                	jmp    f0106481 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106462:	8b 15 bc 74 6e f0    	mov    0xf06e74bc,%edx
f0106468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010646b:	01 d0                	add    %edx,%eax
f010646d:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106470:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f0106476:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106479:	01 d0                	add    %edx,%eax
f010647b:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f010647e:	ff 45 f4             	incl   -0xc(%ebp)
f0106481:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106488:	7e d8                	jle    f0106462 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f010648a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106494:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106499:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010649c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649f:	ba 00 00 00 00       	mov    $0x0,%edx
f01064a4:	f7 75 f0             	divl   -0x10(%ebp)
f01064a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064aa:	29 d0                	sub    %edx,%eax
f01064ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01064af:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01064b6:	e9 e8 00 00 00       	jmp    f01065a3 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01064bb:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01064c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064c4:	89 d0                	mov    %edx,%eax
f01064c6:	01 c0                	add    %eax,%eax
f01064c8:	01 d0                	add    %edx,%eax
f01064ca:	c1 e0 03             	shl    $0x3,%eax
f01064cd:	01 c8                	add    %ecx,%eax
f01064cf:	83 ec 0c             	sub    $0xc,%esp
f01064d2:	50                   	push   %eax
f01064d3:	e8 b7 02 00 00       	call   f010678f <initialize_frame_info>
f01064d8:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01064db:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01064e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064e4:	89 d0                	mov    %edx,%eax
f01064e6:	01 c0                	add    %eax,%eax
f01064e8:	01 d0                	add    %edx,%eax
f01064ea:	c1 e0 03             	shl    $0x3,%eax
f01064ed:	01 c8                	add    %ecx,%eax
f01064ef:	85 c0                	test   %eax,%eax
f01064f1:	75 14                	jne    f0106507 <initialize_paging+0x12c>
f01064f3:	83 ec 04             	sub    $0x4,%esp
f01064f6:	68 d4 4c 13 f0       	push   $0xf0134cd4
f01064fb:	6a 5c                	push   $0x5c
f01064fd:	68 f7 4c 13 f0       	push   $0xf0134cf7
f0106502:	e8 9f 9c ff ff       	call   f01001a6 <_panic>
f0106507:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010650d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106510:	89 d0                	mov    %edx,%eax
f0106512:	01 c0                	add    %eax,%eax
f0106514:	01 d0                	add    %edx,%eax
f0106516:	c1 e0 03             	shl    $0x3,%eax
f0106519:	01 c8                	add    %ecx,%eax
f010651b:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f0106521:	89 10                	mov    %edx,(%eax)
f0106523:	8b 00                	mov    (%eax),%eax
f0106525:	85 c0                	test   %eax,%eax
f0106527:	74 1f                	je     f0106548 <initialize_paging+0x16d>
f0106529:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f010652f:	8b 1d b0 74 6e f0    	mov    0xf06e74b0,%ebx
f0106535:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106538:	89 c8                	mov    %ecx,%eax
f010653a:	01 c0                	add    %eax,%eax
f010653c:	01 c8                	add    %ecx,%eax
f010653e:	c1 e0 03             	shl    $0x3,%eax
f0106541:	01 d8                	add    %ebx,%eax
f0106543:	89 42 04             	mov    %eax,0x4(%edx)
f0106546:	eb 19                	jmp    f0106561 <initialize_paging+0x186>
f0106548:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010654e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106551:	89 d0                	mov    %edx,%eax
f0106553:	01 c0                	add    %eax,%eax
f0106555:	01 d0                	add    %edx,%eax
f0106557:	c1 e0 03             	shl    $0x3,%eax
f010655a:	01 c8                	add    %ecx,%eax
f010655c:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f0106561:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010656a:	89 d0                	mov    %edx,%eax
f010656c:	01 c0                	add    %eax,%eax
f010656e:	01 d0                	add    %edx,%eax
f0106570:	c1 e0 03             	shl    $0x3,%eax
f0106573:	01 c8                	add    %ecx,%eax
f0106575:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f010657a:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106580:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106583:	89 d0                	mov    %edx,%eax
f0106585:	01 c0                	add    %eax,%eax
f0106587:	01 d0                	add    %edx,%eax
f0106589:	c1 e0 03             	shl    $0x3,%eax
f010658c:	01 c8                	add    %ecx,%eax
f010658e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106595:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f010659a:	40                   	inc    %eax
f010659b:	a3 84 74 6e f0       	mov    %eax,0xf06e7484
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065a0:	ff 45 f4             	incl   -0xc(%ebp)
f01065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01065a6:	85 c0                	test   %eax,%eax
f01065a8:	79 05                	jns    f01065af <initialize_paging+0x1d4>
f01065aa:	05 ff 0f 00 00       	add    $0xfff,%eax
f01065af:	c1 f8 0c             	sar    $0xc,%eax
f01065b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01065b5:	0f 8f 00 ff ff ff    	jg     f01064bb <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065bb:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01065c2:	eb 1d                	jmp    f01065e1 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01065c4:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01065ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065cd:	89 d0                	mov    %edx,%eax
f01065cf:	01 c0                	add    %eax,%eax
f01065d1:	01 d0                	add    %edx,%eax
f01065d3:	c1 e0 03             	shl    $0x3,%eax
f01065d6:	01 c8                	add    %ecx,%eax
f01065d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065de:	ff 45 f4             	incl   -0xc(%ebp)
f01065e1:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01065e8:	7e da                	jle    f01065c4 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01065ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01065f1:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f01065f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01065f9:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106600:	77 14                	ja     f0106616 <initialize_paging+0x23b>
f0106602:	ff 75 e0             	pushl  -0x20(%ebp)
f0106605:	68 14 4d 13 f0       	push   $0xf0134d14
f010660a:	6a 64                	push   $0x64
f010660c:	68 f7 4c 13 f0       	push   $0xf0134cf7
f0106611:	e8 90 9b ff ff       	call   f01001a6 <_panic>
f0106616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106619:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010661f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106622:	01 d0                	add    %edx,%eax
f0106624:	48                   	dec    %eax
f0106625:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106628:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010662b:	ba 00 00 00 00       	mov    $0x0,%edx
f0106630:	f7 75 e4             	divl   -0x1c(%ebp)
f0106633:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106636:	29 d0                	sub    %edx,%eax
f0106638:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010663b:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106642:	eb 1d                	jmp    f0106661 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0106644:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010664a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010664d:	89 d0                	mov    %edx,%eax
f010664f:	01 c0                	add    %eax,%eax
f0106651:	01 d0                	add    %edx,%eax
f0106653:	c1 e0 03             	shl    $0x3,%eax
f0106656:	01 c8                	add    %ecx,%eax
f0106658:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010665e:	ff 45 f4             	incl   -0xc(%ebp)
f0106661:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106664:	85 c0                	test   %eax,%eax
f0106666:	79 05                	jns    f010666d <initialize_paging+0x292>
f0106668:	05 ff 0f 00 00       	add    $0xfff,%eax
f010666d:	c1 f8 0c             	sar    $0xc,%eax
f0106670:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106673:	7f cf                	jg     f0106644 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106675:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106678:	85 c0                	test   %eax,%eax
f010667a:	79 05                	jns    f0106681 <initialize_paging+0x2a6>
f010667c:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106681:	c1 f8 0c             	sar    $0xc,%eax
f0106684:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106687:	e9 e8 00 00 00       	jmp    f0106774 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f010668c:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106692:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106695:	89 d0                	mov    %edx,%eax
f0106697:	01 c0                	add    %eax,%eax
f0106699:	01 d0                	add    %edx,%eax
f010669b:	c1 e0 03             	shl    $0x3,%eax
f010669e:	01 c8                	add    %ecx,%eax
f01066a0:	83 ec 0c             	sub    $0xc,%esp
f01066a3:	50                   	push   %eax
f01066a4:	e8 e6 00 00 00       	call   f010678f <initialize_frame_info>
f01066a9:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01066ac:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01066b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b5:	89 d0                	mov    %edx,%eax
f01066b7:	01 c0                	add    %eax,%eax
f01066b9:	01 d0                	add    %edx,%eax
f01066bb:	c1 e0 03             	shl    $0x3,%eax
f01066be:	01 c8                	add    %ecx,%eax
f01066c0:	85 c0                	test   %eax,%eax
f01066c2:	75 14                	jne    f01066d8 <initialize_paging+0x2fd>
f01066c4:	83 ec 04             	sub    $0x4,%esp
f01066c7:	68 d4 4c 13 f0       	push   $0xf0134cd4
f01066cc:	6a 70                	push   $0x70
f01066ce:	68 f7 4c 13 f0       	push   $0xf0134cf7
f01066d3:	e8 ce 9a ff ff       	call   f01001a6 <_panic>
f01066d8:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01066de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e1:	89 d0                	mov    %edx,%eax
f01066e3:	01 c0                	add    %eax,%eax
f01066e5:	01 d0                	add    %edx,%eax
f01066e7:	c1 e0 03             	shl    $0x3,%eax
f01066ea:	01 c8                	add    %ecx,%eax
f01066ec:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f01066f2:	89 10                	mov    %edx,(%eax)
f01066f4:	8b 00                	mov    (%eax),%eax
f01066f6:	85 c0                	test   %eax,%eax
f01066f8:	74 1f                	je     f0106719 <initialize_paging+0x33e>
f01066fa:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f0106700:	8b 1d b0 74 6e f0    	mov    0xf06e74b0,%ebx
f0106706:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106709:	89 c8                	mov    %ecx,%eax
f010670b:	01 c0                	add    %eax,%eax
f010670d:	01 c8                	add    %ecx,%eax
f010670f:	c1 e0 03             	shl    $0x3,%eax
f0106712:	01 d8                	add    %ebx,%eax
f0106714:	89 42 04             	mov    %eax,0x4(%edx)
f0106717:	eb 19                	jmp    f0106732 <initialize_paging+0x357>
f0106719:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010671f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106722:	89 d0                	mov    %edx,%eax
f0106724:	01 c0                	add    %eax,%eax
f0106726:	01 d0                	add    %edx,%eax
f0106728:	c1 e0 03             	shl    $0x3,%eax
f010672b:	01 c8                	add    %ecx,%eax
f010672d:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f0106732:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010673b:	89 d0                	mov    %edx,%eax
f010673d:	01 c0                	add    %eax,%eax
f010673f:	01 d0                	add    %edx,%eax
f0106741:	c1 e0 03             	shl    $0x3,%eax
f0106744:	01 c8                	add    %ecx,%eax
f0106746:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f010674b:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106754:	89 d0                	mov    %edx,%eax
f0106756:	01 c0                	add    %eax,%eax
f0106758:	01 d0                	add    %edx,%eax
f010675a:	c1 e0 03             	shl    $0x3,%eax
f010675d:	01 c8                	add    %ecx,%eax
f010675f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106766:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f010676b:	40                   	inc    %eax
f010676c:	a3 84 74 6e f0       	mov    %eax,0xf06e7484
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106771:	ff 45 f4             	incl   -0xc(%ebp)
f0106774:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106777:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f010677c:	39 c2                	cmp    %eax,%edx
f010677e:	0f 82 08 ff ff ff    	jb     f010668c <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106784:	e8 2d c8 ff ff       	call   f0102fb6 <initialize_disk_page_file>
}
f0106789:	90                   	nop
f010678a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010678d:	c9                   	leave  
f010678e:	c3                   	ret    

f010678f <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010678f:	55                   	push   %ebp
f0106790:	89 e5                	mov    %esp,%ebp
f0106792:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106795:	83 ec 04             	sub    $0x4,%esp
f0106798:	6a 18                	push   $0x18
f010679a:	6a 00                	push   $0x0
f010679c:	ff 75 08             	pushl  0x8(%ebp)
f010679f:	e8 e1 9a 02 00       	call   f0130285 <memset>
f01067a4:	83 c4 10             	add    $0x10,%esp
}
f01067a7:	90                   	nop
f01067a8:	c9                   	leave  
f01067a9:	c3                   	ret    

f01067aa <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01067aa:	55                   	push   %ebp
f01067ab:	89 e5                	mov    %esp,%ebp
f01067ad:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01067b0:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f01067b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01067b9:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01067bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01067c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c5:	8b 00                	mov    (%eax),%eax
f01067c7:	85 c0                	test   %eax,%eax
f01067c9:	75 17                	jne    f01067e2 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01067cb:	83 ec 04             	sub    $0x4,%esp
f01067ce:	68 48 4d 13 f0       	push   $0xf0134d48
f01067d3:	68 99 00 00 00       	push   $0x99
f01067d8:	68 f7 4c 13 f0       	push   $0xf0134cf7
f01067dd:	e8 c4 99 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01067e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067e5:	8b 00                	mov    (%eax),%eax
f01067e7:	85 c0                	test   %eax,%eax
f01067e9:	75 17                	jne    f0106802 <allocate_frame+0x58>
f01067eb:	83 ec 04             	sub    $0x4,%esp
f01067ee:	68 95 4d 13 f0       	push   $0xf0134d95
f01067f3:	68 9c 00 00 00       	push   $0x9c
f01067f8:	68 f7 4c 13 f0       	push   $0xf0134cf7
f01067fd:	e8 a4 99 ff ff       	call   f01001a6 <_panic>
f0106802:	8b 45 08             	mov    0x8(%ebp),%eax
f0106805:	8b 00                	mov    (%eax),%eax
f0106807:	8b 00                	mov    (%eax),%eax
f0106809:	85 c0                	test   %eax,%eax
f010680b:	74 14                	je     f0106821 <allocate_frame+0x77>
f010680d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106810:	8b 00                	mov    (%eax),%eax
f0106812:	8b 00                	mov    (%eax),%eax
f0106814:	8b 55 08             	mov    0x8(%ebp),%edx
f0106817:	8b 12                	mov    (%edx),%edx
f0106819:	8b 52 04             	mov    0x4(%edx),%edx
f010681c:	89 50 04             	mov    %edx,0x4(%eax)
f010681f:	eb 0d                	jmp    f010682e <allocate_frame+0x84>
f0106821:	8b 45 08             	mov    0x8(%ebp),%eax
f0106824:	8b 00                	mov    (%eax),%eax
f0106826:	8b 40 04             	mov    0x4(%eax),%eax
f0106829:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f010682e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106831:	8b 00                	mov    (%eax),%eax
f0106833:	8b 40 04             	mov    0x4(%eax),%eax
f0106836:	85 c0                	test   %eax,%eax
f0106838:	74 13                	je     f010684d <allocate_frame+0xa3>
f010683a:	8b 45 08             	mov    0x8(%ebp),%eax
f010683d:	8b 00                	mov    (%eax),%eax
f010683f:	8b 40 04             	mov    0x4(%eax),%eax
f0106842:	8b 55 08             	mov    0x8(%ebp),%edx
f0106845:	8b 12                	mov    (%edx),%edx
f0106847:	8b 12                	mov    (%edx),%edx
f0106849:	89 10                	mov    %edx,(%eax)
f010684b:	eb 0c                	jmp    f0106859 <allocate_frame+0xaf>
f010684d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106850:	8b 00                	mov    (%eax),%eax
f0106852:	8b 00                	mov    (%eax),%eax
f0106854:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f0106859:	8b 45 08             	mov    0x8(%ebp),%eax
f010685c:	8b 00                	mov    (%eax),%eax
f010685e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106864:	8b 45 08             	mov    0x8(%ebp),%eax
f0106867:	8b 00                	mov    (%eax),%eax
f0106869:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106870:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f0106875:	48                   	dec    %eax
f0106876:	a3 84 74 6e f0       	mov    %eax,0xf06e7484

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010687b:	8b 45 08             	mov    0x8(%ebp),%eax
f010687e:	8b 00                	mov    (%eax),%eax
f0106880:	8a 40 14             	mov    0x14(%eax),%al
f0106883:	84 c0                	test   %al,%al
f0106885:	74 20                	je     f01068a7 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0106887:	8b 45 08             	mov    0x8(%ebp),%eax
f010688a:	8b 00                	mov    (%eax),%eax
f010688c:	8b 50 0c             	mov    0xc(%eax),%edx
f010688f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106892:	8b 00                	mov    (%eax),%eax
f0106894:	8b 40 10             	mov    0x10(%eax),%eax
f0106897:	8b 40 5c             	mov    0x5c(%eax),%eax
f010689a:	83 ec 08             	sub    $0x8,%esp
f010689d:	52                   	push   %edx
f010689e:	50                   	push   %eax
f010689f:	e8 7d 0c 00 00       	call   f0107521 <pt_clear_page_table_entry>
f01068a4:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01068a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01068aa:	8b 00                	mov    (%eax),%eax
f01068ac:	83 ec 0c             	sub    $0xc,%esp
f01068af:	50                   	push   %eax
f01068b0:	e8 da fe ff ff       	call   f010678f <initialize_frame_info>
f01068b5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01068b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01068bd:	c9                   	leave  
f01068be:	c3                   	ret    

f01068bf <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01068bf:	55                   	push   %ebp
f01068c0:	89 e5                	mov    %esp,%ebp
f01068c2:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01068c5:	83 ec 0c             	sub    $0xc,%esp
f01068c8:	ff 75 08             	pushl  0x8(%ebp)
f01068cb:	e8 bf fe ff ff       	call   f010678f <initialize_frame_info>
f01068d0:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01068d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01068d7:	75 17                	jne    f01068f0 <free_frame+0x31>
f01068d9:	83 ec 04             	sub    $0x4,%esp
f01068dc:	68 d4 4c 13 f0       	push   $0xf0134cd4
f01068e1:	68 b9 00 00 00       	push   $0xb9
f01068e6:	68 f7 4c 13 f0       	push   $0xf0134cf7
f01068eb:	e8 b6 98 ff ff       	call   f01001a6 <_panic>
f01068f0:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f01068f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f9:	89 10                	mov    %edx,(%eax)
f01068fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fe:	8b 00                	mov    (%eax),%eax
f0106900:	85 c0                	test   %eax,%eax
f0106902:	74 0d                	je     f0106911 <free_frame+0x52>
f0106904:	a1 78 74 6e f0       	mov    0xf06e7478,%eax
f0106909:	8b 55 08             	mov    0x8(%ebp),%edx
f010690c:	89 50 04             	mov    %edx,0x4(%eax)
f010690f:	eb 08                	jmp    f0106919 <free_frame+0x5a>
f0106911:	8b 45 08             	mov    0x8(%ebp),%eax
f0106914:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f0106921:	8b 45 08             	mov    0x8(%ebp),%eax
f0106924:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010692b:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f0106930:	40                   	inc    %eax
f0106931:	a3 84 74 6e f0       	mov    %eax,0xf06e7484
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106936:	90                   	nop
f0106937:	c9                   	leave  
f0106938:	c3                   	ret    

f0106939 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106939:	55                   	push   %ebp
f010693a:	89 e5                	mov    %esp,%ebp
f010693c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010693f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106942:	8b 40 08             	mov    0x8(%eax),%eax
f0106945:	48                   	dec    %eax
f0106946:	8b 55 08             	mov    0x8(%ebp),%edx
f0106949:	66 89 42 08          	mov    %ax,0x8(%edx)
f010694d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106950:	8b 40 08             	mov    0x8(%eax),%eax
f0106953:	66 85 c0             	test   %ax,%ax
f0106956:	75 0e                	jne    f0106966 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106958:	83 ec 0c             	sub    $0xc,%esp
f010695b:	ff 75 08             	pushl  0x8(%ebp)
f010695e:	e8 5c ff ff ff       	call   f01068bf <free_frame>
f0106963:	83 c4 10             	add    $0x10,%esp
}
f0106966:	90                   	nop
f0106967:	c9                   	leave  
f0106968:	c3                   	ret    

f0106969 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106969:	55                   	push   %ebp
f010696a:	89 e5                	mov    %esp,%ebp
f010696c:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010696f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106972:	c1 e8 16             	shr    $0x16,%eax
f0106975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010697c:	8b 45 08             	mov    0x8(%ebp),%eax
f010697f:	01 d0                	add    %edx,%eax
f0106981:	8b 00                	mov    (%eax),%eax
f0106983:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106986:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106989:	83 e0 01             	and    $0x1,%eax
f010698c:	85 c0                	test   %eax,%eax
f010698e:	74 4e                	je     f01069de <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106993:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106998:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010699b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010699e:	c1 e8 0c             	shr    $0xc,%eax
f01069a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01069a4:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01069a9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01069ac:	72 17                	jb     f01069c5 <get_page_table+0x5c>
f01069ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01069b1:	68 b4 4d 13 f0       	push   $0xf0134db4
f01069b6:	68 e2 00 00 00       	push   $0xe2
f01069bb:	68 f7 4c 13 f0       	push   $0xf0134cf7
f01069c0:	e8 e1 97 ff ff       	call   f01001a6 <_panic>
f01069c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01069cd:	89 c2                	mov    %eax,%edx
f01069cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01069d2:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01069d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01069d9:	e9 8f 00 00 00       	jmp    f0106a6d <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01069de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069e2:	74 7b                	je     f0106a5f <get_page_table+0xf6>
f01069e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e7:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f01069ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069ed:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01069f0:	83 ec 0c             	sub    $0xc,%esp
f01069f3:	6a 00                	push   $0x0
f01069f5:	e8 76 4f 00 00       	call   f010b970 <fault_handler>
f01069fa:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a00:	c1 e8 16             	shr    $0x16,%eax
f0106a03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0d:	01 d0                	add    %edx,%eax
f0106a0f:	8b 00                	mov    (%eax),%eax
f0106a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a22:	c1 e8 0c             	shr    $0xc,%eax
f0106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a28:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106a2d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a30:	72 17                	jb     f0106a49 <get_page_table+0xe0>
f0106a32:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a35:	68 b4 4d 13 f0       	push   $0xf0134db4
f0106a3a:	68 fa 00 00 00       	push   $0xfa
f0106a3f:	68 f7 4c 13 f0       	push   $0xf0134cf7
f0106a44:	e8 5d 97 ff ff       	call   f01001a6 <_panic>
f0106a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a4c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a51:	89 c2                	mov    %eax,%edx
f0106a53:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a56:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a5d:	eb 0e                	jmp    f0106a6d <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106a5f:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106a68:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106a6d:	c9                   	leave  
f0106a6e:	c3                   	ret    

f0106a6f <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106a6f:	55                   	push   %ebp
f0106a70:	89 e5                	mov    %esp,%ebp
f0106a72:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0106a75:	83 ec 04             	sub    $0x4,%esp
f0106a78:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106a7b:	50                   	push   %eax
f0106a7c:	ff 75 0c             	pushl  0xc(%ebp)
f0106a7f:	ff 75 08             	pushl  0x8(%ebp)
f0106a82:	e8 08 00 00 00       	call   f0106a8f <__static_cpt>
f0106a87:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0106a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a8d:	c9                   	leave  
f0106a8e:	c3                   	ret    

f0106a8f <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a8f:	55                   	push   %ebp
f0106a90:	89 e5                	mov    %esp,%ebp
f0106a92:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106a95:	83 ec 0c             	sub    $0xc,%esp
f0106a98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106a9b:	50                   	push   %eax
f0106a9c:	e8 09 fd ff ff       	call   f01067aa <allocate_frame>
f0106aa1:	83 c4 10             	add    $0x10,%esp
f0106aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106aa7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aaa:	83 ec 0c             	sub    $0xc,%esp
f0106aad:	50                   	push   %eax
f0106aae:	e8 ba f8 ff ff       	call   f010636d <to_physical_address>
f0106ab3:	83 c4 10             	add    $0x10,%esp
f0106ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106abc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac2:	c1 e8 0c             	shr    $0xc,%eax
f0106ac5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ac8:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106acd:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ad0:	72 17                	jb     f0106ae9 <__static_cpt+0x5a>
f0106ad2:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ad5:	68 b4 4d 13 f0       	push   $0xf0134db4
f0106ada:	68 30 01 00 00       	push   $0x130
f0106adf:	68 f7 4c 13 f0       	push   $0xf0134cf7
f0106ae4:	e8 bd 96 ff ff       	call   f01001a6 <_panic>
f0106ae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106af1:	89 c2                	mov    %eax,%edx
f0106af3:	8b 45 10             	mov    0x10(%ebp),%eax
f0106af6:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106afb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106b01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b04:	c1 e8 16             	shr    $0x16,%eax
f0106b07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b11:	01 d0                	add    %edx,%eax
f0106b13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106b16:	83 ca 07             	or     $0x7,%edx
f0106b19:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106b1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b1e:	8b 00                	mov    (%eax),%eax
f0106b20:	83 ec 04             	sub    $0x4,%esp
f0106b23:	68 00 10 00 00       	push   $0x1000
f0106b28:	6a 00                	push   $0x0
f0106b2a:	50                   	push   %eax
f0106b2b:	e8 55 97 02 00       	call   f0130285 <memset>
f0106b30:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106b33:	0f 20 d8             	mov    %cr3,%eax
f0106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b3c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106b3f:	90                   	nop
f0106b40:	c9                   	leave  
f0106b41:	c3                   	ret    

f0106b42 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106b42:	55                   	push   %ebp
f0106b43:	89 e5                	mov    %esp,%ebp
f0106b45:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106b48:	ff 75 0c             	pushl  0xc(%ebp)
f0106b4b:	e8 1d f8 ff ff       	call   f010636d <to_physical_address>
f0106b50:	83 c4 04             	add    $0x4,%esp
f0106b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106b56:	83 ec 04             	sub    $0x4,%esp
f0106b59:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b5c:	50                   	push   %eax
f0106b5d:	ff 75 10             	pushl  0x10(%ebp)
f0106b60:	ff 75 08             	pushl  0x8(%ebp)
f0106b63:	e8 01 fe ff ff       	call   f0106969 <get_page_table>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	83 f8 01             	cmp    $0x1,%eax
f0106b6e:	75 15                	jne    f0106b85 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106b70:	83 ec 04             	sub    $0x4,%esp
f0106b73:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b76:	50                   	push   %eax
f0106b77:	ff 75 10             	pushl  0x10(%ebp)
f0106b7a:	ff 75 08             	pushl  0x8(%ebp)
f0106b7d:	e8 0d ff ff ff       	call   f0106a8f <__static_cpt>
f0106b82:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b88:	8b 55 10             	mov    0x10(%ebp),%edx
f0106b8b:	c1 ea 0c             	shr    $0xc,%edx
f0106b8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106b94:	c1 e2 02             	shl    $0x2,%edx
f0106b97:	01 d0                	add    %edx,%eax
f0106b99:	8b 00                	mov    (%eax),%eax
f0106b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ba1:	83 e0 01             	and    $0x1,%eax
f0106ba4:	85 c0                	test   %eax,%eax
f0106ba6:	74 25                	je     f0106bcd <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106bb3:	75 07                	jne    f0106bbc <map_frame+0x7a>
			return 0;
f0106bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bba:	eb 43                	jmp    f0106bff <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106bbc:	83 ec 08             	sub    $0x8,%esp
f0106bbf:	ff 75 10             	pushl  0x10(%ebp)
f0106bc2:	ff 75 08             	pushl  0x8(%ebp)
f0106bc5:	e8 a7 00 00 00       	call   f0106c71 <unmap_frame>
f0106bca:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bd0:	8b 40 08             	mov    0x8(%eax),%eax
f0106bd3:	40                   	inc    %eax
f0106bd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106bd7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bde:	8b 55 10             	mov    0x10(%ebp),%edx
f0106be1:	c1 ea 0c             	shr    $0xc,%edx
f0106be4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106bea:	c1 e2 02             	shl    $0x2,%edx
f0106bed:	01 c2                	add    %eax,%edx
f0106bef:	8b 45 14             	mov    0x14(%ebp),%eax
f0106bf2:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106bf5:	83 c8 01             	or     $0x1,%eax
f0106bf8:	89 02                	mov    %eax,(%edx)

	return 0;
f0106bfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106bff:	c9                   	leave  
f0106c00:	c3                   	ret    

f0106c01 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c01:	55                   	push   %ebp
f0106c02:	89 e5                	mov    %esp,%ebp
f0106c04:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106c07:	83 ec 04             	sub    $0x4,%esp
f0106c0a:	ff 75 10             	pushl  0x10(%ebp)
f0106c0d:	ff 75 0c             	pushl  0xc(%ebp)
f0106c10:	ff 75 08             	pushl  0x8(%ebp)
f0106c13:	e8 51 fd ff ff       	call   f0106969 <get_page_table>
f0106c18:	83 c4 10             	add    $0x10,%esp
f0106c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106c1e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c21:	8b 00                	mov    (%eax),%eax
f0106c23:	85 c0                	test   %eax,%eax
f0106c25:	74 43                	je     f0106c6a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106c27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2a:	c1 e8 0c             	shr    $0xc,%eax
f0106c2d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106c35:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c38:	8b 00                	mov    (%eax),%eax
f0106c3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3d:	c1 e2 02             	shl    $0x2,%edx
f0106c40:	01 d0                	add    %edx,%eax
f0106c42:	8b 00                	mov    (%eax),%eax
f0106c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106c47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4b:	74 16                	je     f0106c63 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c55:	83 ec 0c             	sub    $0xc,%esp
f0106c58:	50                   	push   %eax
f0106c59:	e8 22 f7 ff ff       	call   f0106380 <to_frame_info>
f0106c5e:	83 c4 10             	add    $0x10,%esp
f0106c61:	eb 0c                	jmp    f0106c6f <get_frame_info+0x6e>
		}
		return 0;
f0106c63:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c68:	eb 05                	jmp    f0106c6f <get_frame_info+0x6e>
	}
	return 0;
f0106c6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c6f:	c9                   	leave  
f0106c70:	c3                   	ret    

f0106c71 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106c71:	55                   	push   %ebp
f0106c72:	89 e5                	mov    %esp,%ebp
f0106c74:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106c77:	83 ec 04             	sub    $0x4,%esp
f0106c7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106c7d:	50                   	push   %eax
f0106c7e:	ff 75 0c             	pushl  0xc(%ebp)
f0106c81:	ff 75 08             	pushl  0x8(%ebp)
f0106c84:	e8 78 ff ff ff       	call   f0106c01 <get_frame_info>
f0106c89:	83 c4 10             	add    $0x10,%esp
f0106c8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106c8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c93:	74 60                	je     f0106cf5 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c98:	8a 40 14             	mov    0x14(%eax),%al
f0106c9b:	84 c0                	test   %al,%al
f0106c9d:	74 1c                	je     f0106cbb <unmap_frame+0x4a>
f0106c9f:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ca6:	77 13                	ja     f0106cbb <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ca8:	83 ec 08             	sub    $0x8,%esp
f0106cab:	ff 75 0c             	pushl  0xc(%ebp)
f0106cae:	68 e4 4d 13 f0       	push   $0xf0134de4
f0106cb3:	e8 75 9f ff ff       	call   f0100c2d <cprintf>
f0106cb8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106cbb:	83 ec 0c             	sub    $0xc,%esp
f0106cbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0106cc1:	e8 73 fc ff ff       	call   f0106939 <decrement_references>
f0106cc6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ccc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ccf:	c1 ea 0c             	shr    $0xc,%edx
f0106cd2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cd8:	c1 e2 02             	shl    $0x2,%edx
f0106cdb:	01 d0                	add    %edx,%eax
f0106cdd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ce3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ce6:	83 ec 08             	sub    $0x8,%esp
f0106ce9:	50                   	push   %eax
f0106cea:	ff 75 08             	pushl  0x8(%ebp)
f0106ced:	e8 d4 f6 ff ff       	call   f01063c6 <tlb_invalidate>
f0106cf2:	83 c4 10             	add    $0x10,%esp
	}
}
f0106cf5:	90                   	nop
f0106cf6:	c9                   	leave  
f0106cf7:	c3                   	ret    

f0106cf8 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106cf8:	55                   	push   %ebp
f0106cf9:	89 e5                	mov    %esp,%ebp
f0106cfb:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106cfe:	ff 75 0c             	pushl  0xc(%ebp)
f0106d01:	e8 67 f6 ff ff       	call   f010636d <to_physical_address>
f0106d06:	83 c4 04             	add    $0x4,%esp
f0106d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106d0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d0f:	c1 e8 16             	shr    $0x16,%eax
f0106d12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d1c:	01 d0                	add    %edx,%eax
f0106d1e:	8b 00                	mov    (%eax),%eax
f0106d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d31:	c1 e8 0c             	shr    $0xc,%eax
f0106d34:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106d37:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106d3c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106d3f:	72 17                	jb     f0106d58 <loadtime_map_frame+0x60>
f0106d41:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d44:	68 b4 4d 13 f0       	push   $0xf0134db4
f0106d49:	68 e6 01 00 00       	push   $0x1e6
f0106d4e:	68 f7 4c 13 f0       	push   $0xf0134cf7
f0106d53:	e8 4e 94 ff ff       	call   f01001a6 <_panic>
f0106d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d5b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106d63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106d67:	75 15                	jne    f0106d7e <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106d69:	83 ec 04             	sub    $0x4,%esp
f0106d6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106d6f:	50                   	push   %eax
f0106d70:	ff 75 10             	pushl  0x10(%ebp)
f0106d73:	ff 75 08             	pushl  0x8(%ebp)
f0106d76:	e8 14 fd ff ff       	call   f0106a8f <__static_cpt>
f0106d7b:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106d7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d81:	8b 40 08             	mov    0x8(%eax),%eax
f0106d84:	40                   	inc    %eax
f0106d85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d88:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d92:	c1 ea 0c             	shr    $0xc,%edx
f0106d95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d9b:	c1 e2 02             	shl    $0x2,%edx
f0106d9e:	01 c2                	add    %eax,%edx
f0106da0:	8b 45 14             	mov    0x14(%ebp),%eax
f0106da3:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106da6:	83 c8 01             	or     $0x1,%eax
f0106da9:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106db0:	c9                   	leave  
f0106db1:	c3                   	ret    

f0106db2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106db2:	55                   	push   %ebp
f0106db3:	89 e5                	mov    %esp,%ebp
f0106db5:	57                   	push   %edi
f0106db6:	56                   	push   %esi
f0106db7:	53                   	push   %ebx
f0106db8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106dbb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106dc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106dc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106dd0:	a1 78 74 6e f0       	mov    0xf06e7478,%eax
f0106dd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106dd8:	eb 1a                	jmp    f0106df4 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ddd:	8a 40 14             	mov    0x14(%eax),%al
f0106de0:	84 c0                	test   %al,%al
f0106de2:	74 05                	je     f0106de9 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106de4:	ff 45 e8             	incl   -0x18(%ebp)
f0106de7:	eb 03                	jmp    f0106dec <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106de9:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106dec:	a1 80 74 6e f0       	mov    0xf06e7480,%eax
f0106df1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106df4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106df8:	74 07                	je     f0106e01 <calculate_available_frames+0x4f>
f0106dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfd:	8b 00                	mov    (%eax),%eax
f0106dff:	eb 05                	jmp    f0106e06 <calculate_available_frames+0x54>
f0106e01:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e06:	a3 80 74 6e f0       	mov    %eax,0xf06e7480
f0106e0b:	a1 80 74 6e f0       	mov    0xf06e7480,%eax
f0106e10:	85 c0                	test   %eax,%eax
f0106e12:	75 c6                	jne    f0106dda <calculate_available_frames+0x28>
f0106e14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e18:	75 c0                	jne    f0106dda <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e1a:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f0106e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e22:	eb 0b                	jmp    f0106e2f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106e24:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e27:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f0106e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e33:	74 07                	je     f0106e3c <calculate_available_frames+0x8a>
f0106e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e38:	8b 00                	mov    (%eax),%eax
f0106e3a:	eb 05                	jmp    f0106e41 <calculate_available_frames+0x8f>
f0106e3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e41:	a3 e8 7f 65 f0       	mov    %eax,0xf0657fe8
f0106e46:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f0106e4b:	85 c0                	test   %eax,%eax
f0106e4d:	75 d5                	jne    f0106e24 <calculate_available_frames+0x72>
f0106e4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e53:	75 cf                	jne    f0106e24 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106e55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106e61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106e64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e6a:	89 c3                	mov    %eax,%ebx
f0106e6c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106e6f:	ba 03 00 00 00       	mov    $0x3,%edx
f0106e74:	89 df                	mov    %ebx,%edi
f0106e76:	89 c6                	mov    %eax,%esi
f0106e78:	89 d1                	mov    %edx,%ecx
f0106e7a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e7f:	83 c4 20             	add    $0x20,%esp
f0106e82:	5b                   	pop    %ebx
f0106e83:	5e                   	pop    %esi
f0106e84:	5f                   	pop    %edi
f0106e85:	5d                   	pop    %ebp
f0106e86:	c2 04 00             	ret    $0x4

f0106e89 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e89:	55                   	push   %ebp
f0106e8a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e8f:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0106e95:	29 d0                	sub    %edx,%eax
f0106e97:	c1 f8 03             	sar    $0x3,%eax
f0106e9a:	89 c2                	mov    %eax,%edx
f0106e9c:	89 d0                	mov    %edx,%eax
f0106e9e:	c1 e0 02             	shl    $0x2,%eax
f0106ea1:	01 d0                	add    %edx,%eax
f0106ea3:	c1 e0 02             	shl    $0x2,%eax
f0106ea6:	01 d0                	add    %edx,%eax
f0106ea8:	c1 e0 02             	shl    $0x2,%eax
f0106eab:	01 d0                	add    %edx,%eax
f0106ead:	89 c1                	mov    %eax,%ecx
f0106eaf:	c1 e1 08             	shl    $0x8,%ecx
f0106eb2:	01 c8                	add    %ecx,%eax
f0106eb4:	89 c1                	mov    %eax,%ecx
f0106eb6:	c1 e1 10             	shl    $0x10,%ecx
f0106eb9:	01 c8                	add    %ecx,%eax
f0106ebb:	01 c0                	add    %eax,%eax
f0106ebd:	01 d0                	add    %edx,%eax
}
f0106ebf:	5d                   	pop    %ebp
f0106ec0:	c3                   	ret    

f0106ec1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106ec1:	55                   	push   %ebp
f0106ec2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106ec4:	ff 75 08             	pushl  0x8(%ebp)
f0106ec7:	e8 bd ff ff ff       	call   f0106e89 <to_frame_number>
f0106ecc:	83 c4 04             	add    $0x4,%esp
f0106ecf:	c1 e0 0c             	shl    $0xc,%eax
}
f0106ed2:	c9                   	leave  
f0106ed3:	c3                   	ret    

f0106ed4 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106ed4:	55                   	push   %ebp
f0106ed5:	89 e5                	mov    %esp,%ebp
f0106ed7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0106edd:	c1 e8 0c             	shr    $0xc,%eax
f0106ee0:	89 c2                	mov    %eax,%edx
f0106ee2:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106ee7:	39 c2                	cmp    %eax,%edx
f0106ee9:	72 14                	jb     f0106eff <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106eeb:	83 ec 04             	sub    $0x4,%esp
f0106eee:	68 08 4e 13 f0       	push   $0xf0134e08
f0106ef3:	6a 55                	push   $0x55
f0106ef5:	68 2d 4e 13 f0       	push   $0xf0134e2d
f0106efa:	e8 a7 92 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106eff:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0106f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f08:	c1 e8 0c             	shr    $0xc,%eax
f0106f0b:	89 c1                	mov    %eax,%ecx
f0106f0d:	89 c8                	mov    %ecx,%eax
f0106f0f:	01 c0                	add    %eax,%eax
f0106f11:	01 c8                	add    %ecx,%eax
f0106f13:	c1 e0 03             	shl    $0x3,%eax
f0106f16:	01 d0                	add    %edx,%eax
}
f0106f18:	c9                   	leave  
f0106f19:	c3                   	ret    

f0106f1a <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106f1a:	55                   	push   %ebp
f0106f1b:	89 e5                	mov    %esp,%ebp
f0106f1d:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106f27:	eb 5f                	jmp    f0106f88 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f2c:	89 d0                	mov    %edx,%eax
f0106f2e:	01 c0                	add    %eax,%eax
f0106f30:	01 d0                	add    %edx,%eax
f0106f32:	01 c0                	add    %eax,%eax
f0106f34:	01 d0                	add    %edx,%eax
f0106f36:	c1 e0 02             	shl    $0x2,%eax
f0106f39:	01 d0                	add    %edx,%eax
f0106f3b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f42:	01 d0                	add    %edx,%eax
f0106f44:	c1 e0 04             	shl    $0x4,%eax
f0106f47:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f0106f4c:	83 ec 04             	sub    $0x4,%esp
f0106f4f:	68 50 10 00 00       	push   $0x1050
f0106f54:	6a 00                	push   $0x0
f0106f56:	50                   	push   %eax
f0106f57:	e8 29 93 02 00       	call   f0130285 <memset>
f0106f5c:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106f5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f62:	89 d0                	mov    %edx,%eax
f0106f64:	01 c0                	add    %eax,%eax
f0106f66:	01 d0                	add    %edx,%eax
f0106f68:	01 c0                	add    %eax,%eax
f0106f6a:	01 d0                	add    %edx,%eax
f0106f6c:	c1 e0 02             	shl    $0x2,%eax
f0106f6f:	01 d0                	add    %edx,%eax
f0106f71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f78:	01 d0                	add    %edx,%eax
f0106f7a:	c1 e0 04             	shl    $0x4,%eax
f0106f7d:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f0106f82:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f85:	ff 45 f4             	incl   -0xc(%ebp)
f0106f88:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0106f8c:	7e 9b                	jle    f0106f29 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0106f8e:	90                   	nop
f0106f8f:	c9                   	leave  
f0106f90:	c3                   	ret    

f0106f91 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0106f91:	55                   	push   %ebp
f0106f92:	89 e5                	mov    %esp,%ebp
f0106f94:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0106f97:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106fa5:	eb 34                	jmp    f0106fdb <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0106fa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106faa:	89 d0                	mov    %edx,%eax
f0106fac:	01 c0                	add    %eax,%eax
f0106fae:	01 d0                	add    %edx,%eax
f0106fb0:	01 c0                	add    %eax,%eax
f0106fb2:	01 d0                	add    %edx,%eax
f0106fb4:	c1 e0 02             	shl    $0x2,%eax
f0106fb7:	01 d0                	add    %edx,%eax
f0106fb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106fc0:	01 d0                	add    %edx,%eax
f0106fc2:	c1 e0 04             	shl    $0x4,%eax
f0106fc5:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f0106fca:	8a 00                	mov    (%eax),%al
f0106fcc:	84 c0                	test   %al,%al
f0106fce:	74 08                	je     f0106fd8 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0106fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0106fd6:	eb 09                	jmp    f0106fe1 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fd8:	ff 45 f0             	incl   -0x10(%ebp)
f0106fdb:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0106fdf:	7e c6                	jle    f0106fa7 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0106fe1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0106fe5:	75 14                	jne    f0106ffb <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f0106fe7:	83 ec 04             	sub    $0x4,%esp
f0106fea:	68 48 4e 13 f0       	push   $0xf0134e48
f0106fef:	6a 54                	push   $0x54
f0106ff1:	68 98 4e 13 f0       	push   $0xf0134e98
f0106ff6:	e8 ab 91 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0106ffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ffe:	89 d0                	mov    %edx,%eax
f0107000:	01 c0                	add    %eax,%eax
f0107002:	01 d0                	add    %edx,%eax
f0107004:	01 c0                	add    %eax,%eax
f0107006:	01 d0                	add    %edx,%eax
f0107008:	c1 e0 02             	shl    $0x2,%eax
f010700b:	01 d0                	add    %edx,%eax
f010700d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107014:	01 d0                	add    %edx,%eax
f0107016:	c1 e0 04             	shl    $0x4,%eax
f0107019:	8d 90 20 f1 67 f0    	lea    -0xf980ee0(%eax),%edx
f010701f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107022:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107024:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107027:	89 d0                	mov    %edx,%eax
f0107029:	01 c0                	add    %eax,%eax
f010702b:	01 d0                	add    %edx,%eax
f010702d:	01 c0                	add    %eax,%eax
f010702f:	01 d0                	add    %edx,%eax
f0107031:	c1 e0 02             	shl    $0x2,%eax
f0107034:	01 d0                	add    %edx,%eax
f0107036:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010703d:	01 d0                	add    %edx,%eax
f010703f:	c1 e0 04             	shl    $0x4,%eax
f0107042:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f0107047:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010704a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704d:	89 d0                	mov    %edx,%eax
f010704f:	01 c0                	add    %eax,%eax
f0107051:	01 d0                	add    %edx,%eax
f0107053:	01 c0                	add    %eax,%eax
f0107055:	01 d0                	add    %edx,%eax
f0107057:	c1 e0 02             	shl    $0x2,%eax
f010705a:	01 d0                	add    %edx,%eax
f010705c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107063:	01 d0                	add    %edx,%eax
f0107065:	c1 e0 04             	shl    $0x4,%eax
f0107068:	83 c0 50             	add    $0x50,%eax
f010706b:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f0107070:	83 ec 04             	sub    $0x4,%esp
f0107073:	68 00 10 00 00       	push   $0x1000
f0107078:	6a 00                	push   $0x0
f010707a:	50                   	push   %eax
f010707b:	e8 05 92 02 00       	call   f0130285 <memset>
f0107080:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107083:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107086:	c9                   	leave  
f0107087:	c3                   	ret    

f0107088 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107088:	55                   	push   %ebp
f0107089:	89 e5                	mov    %esp,%ebp
f010708b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010708e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107095:	e9 95 00 00 00       	jmp    f010712f <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010709a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010709d:	89 d0                	mov    %edx,%eax
f010709f:	01 c0                	add    %eax,%eax
f01070a1:	01 d0                	add    %edx,%eax
f01070a3:	01 c0                	add    %eax,%eax
f01070a5:	01 d0                	add    %edx,%eax
f01070a7:	c1 e0 02             	shl    $0x2,%eax
f01070aa:	01 d0                	add    %edx,%eax
f01070ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070b3:	01 d0                	add    %edx,%eax
f01070b5:	c1 e0 04             	shl    $0x4,%eax
f01070b8:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f01070bd:	8a 00                	mov    (%eax),%al
f01070bf:	84 c0                	test   %al,%al
f01070c1:	75 68                	jne    f010712b <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01070c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070c6:	89 d0                	mov    %edx,%eax
f01070c8:	01 c0                	add    %eax,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	01 c0                	add    %eax,%eax
f01070ce:	01 d0                	add    %edx,%eax
f01070d0:	c1 e0 02             	shl    $0x2,%eax
f01070d3:	01 d0                	add    %edx,%eax
f01070d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070dc:	01 d0                	add    %edx,%eax
f01070de:	c1 e0 04             	shl    $0x4,%eax
f01070e1:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f01070e6:	8b 00                	mov    (%eax),%eax
f01070e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01070eb:	75 3f                	jne    f010712c <get_share_object_ID+0xa4>
f01070ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070f0:	89 d0                	mov    %edx,%eax
f01070f2:	01 c0                	add    %eax,%eax
f01070f4:	01 d0                	add    %edx,%eax
f01070f6:	01 c0                	add    %eax,%eax
f01070f8:	01 d0                	add    %edx,%eax
f01070fa:	c1 e0 02             	shl    $0x2,%eax
f01070fd:	01 d0                	add    %edx,%eax
f01070ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107106:	01 d0                	add    %edx,%eax
f0107108:	c1 e0 04             	shl    $0x4,%eax
f010710b:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f0107110:	83 c0 04             	add    $0x4,%eax
f0107113:	83 ec 08             	sub    $0x8,%esp
f0107116:	50                   	push   %eax
f0107117:	ff 75 0c             	pushl  0xc(%ebp)
f010711a:	e8 84 90 02 00       	call   f01301a3 <strcmp>
f010711f:	83 c4 10             	add    $0x10,%esp
f0107122:	85 c0                	test   %eax,%eax
f0107124:	75 06                	jne    f010712c <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107129:	eb 13                	jmp    f010713e <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010712b:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010712c:	ff 45 f4             	incl   -0xc(%ebp)
f010712f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107133:	0f 8e 61 ff ff ff    	jle    f010709a <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107139:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010713e:	c9                   	leave  
f010713f:	c3                   	ret    

f0107140 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107140:	55                   	push   %ebp
f0107141:	89 e5                	mov    %esp,%ebp
f0107143:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107146:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010714a:	76 0a                	jbe    f0107156 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010714c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107151:	e9 93 00 00 00       	jmp    f01071e9 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107156:	8b 55 08             	mov    0x8(%ebp),%edx
f0107159:	89 d0                	mov    %edx,%eax
f010715b:	01 c0                	add    %eax,%eax
f010715d:	01 d0                	add    %edx,%eax
f010715f:	01 c0                	add    %eax,%eax
f0107161:	01 d0                	add    %edx,%eax
f0107163:	c1 e0 02             	shl    $0x2,%eax
f0107166:	01 d0                	add    %edx,%eax
f0107168:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010716f:	01 d0                	add    %edx,%eax
f0107171:	c1 e0 04             	shl    $0x4,%eax
f0107174:	83 c0 50             	add    $0x50,%eax
f0107177:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f010717c:	83 ec 0c             	sub    $0xc,%esp
f010717f:	50                   	push   %eax
f0107180:	e8 3e 01 00 00       	call   f01072c3 <clear_frames_storage>
f0107185:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107188:	8b 55 08             	mov    0x8(%ebp),%edx
f010718b:	89 d0                	mov    %edx,%eax
f010718d:	01 c0                	add    %eax,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	01 c0                	add    %eax,%eax
f0107193:	01 d0                	add    %edx,%eax
f0107195:	c1 e0 02             	shl    $0x2,%eax
f0107198:	01 d0                	add    %edx,%eax
f010719a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071a1:	01 d0                	add    %edx,%eax
f01071a3:	c1 e0 04             	shl    $0x4,%eax
f01071a6:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f01071ab:	83 ec 04             	sub    $0x4,%esp
f01071ae:	68 50 10 00 00       	push   $0x1050
f01071b3:	6a 00                	push   $0x0
f01071b5:	50                   	push   %eax
f01071b6:	e8 ca 90 02 00       	call   f0130285 <memset>
f01071bb:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01071be:	8b 55 08             	mov    0x8(%ebp),%edx
f01071c1:	89 d0                	mov    %edx,%eax
f01071c3:	01 c0                	add    %eax,%eax
f01071c5:	01 d0                	add    %edx,%eax
f01071c7:	01 c0                	add    %eax,%eax
f01071c9:	01 d0                	add    %edx,%eax
f01071cb:	c1 e0 02             	shl    $0x2,%eax
f01071ce:	01 d0                	add    %edx,%eax
f01071d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071d7:	01 d0                	add    %edx,%eax
f01071d9:	c1 e0 04             	shl    $0x4,%eax
f01071dc:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f01071e1:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01071e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01071e9:	c9                   	leave  
f01071ea:	c3                   	ret    

f01071eb <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01071eb:	55                   	push   %ebp
f01071ec:	89 e5                	mov    %esp,%ebp
f01071ee:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01071f1:	83 ec 0c             	sub    $0xc,%esp
f01071f4:	68 00 10 00 00       	push   $0x1000
f01071f9:	e8 de 01 00 00       	call   f01073dc <kmalloc>
f01071fe:	83 c4 10             	add    $0x10,%esp
f0107201:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107204:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107208:	75 17                	jne    f0107221 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010720a:	83 ec 04             	sub    $0x4,%esp
f010720d:	68 b9 4e 13 f0       	push   $0xf0134eb9
f0107212:	68 a9 00 00 00       	push   $0xa9
f0107217:	68 98 4e 13 f0       	push   $0xf0134e98
f010721c:	e8 85 8f ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0107221:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107224:	c9                   	leave  
f0107225:	c3                   	ret    

f0107226 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107226:	55                   	push   %ebp
f0107227:	89 e5                	mov    %esp,%ebp
f0107229:	53                   	push   %ebx
f010722a:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010722d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107230:	c1 e0 0c             	shl    $0xc,%eax
f0107233:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107236:	83 ec 04             	sub    $0x4,%esp
f0107239:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010723c:	50                   	push   %eax
f010723d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107240:	ff 75 08             	pushl  0x8(%ebp)
f0107243:	e8 21 f7 ff ff       	call   f0106969 <get_page_table>
f0107248:	83 c4 10             	add    $0x10,%esp
f010724b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f010724e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107252:	75 15                	jne    f0107269 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107254:	83 ec 04             	sub    $0x4,%esp
f0107257:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010725a:	50                   	push   %eax
f010725b:	ff 75 f4             	pushl  -0xc(%ebp)
f010725e:	ff 75 08             	pushl  0x8(%ebp)
f0107261:	e8 29 f8 ff ff       	call   f0106a8f <__static_cpt>
f0107266:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107269:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010726c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726f:	c1 ea 0c             	shr    $0xc,%edx
f0107272:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107278:	c1 e2 02             	shl    $0x2,%edx
f010727b:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f010727e:	83 ec 0c             	sub    $0xc,%esp
f0107281:	ff 75 0c             	pushl  0xc(%ebp)
f0107284:	e8 38 fc ff ff       	call   f0106ec1 <to_physical_address>
f0107289:	83 c4 10             	add    $0x10,%esp
f010728c:	83 c8 01             	or     $0x1,%eax
f010728f:	89 03                	mov    %eax,(%ebx)
}
f0107291:	90                   	nop
f0107292:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107295:	c9                   	leave  
f0107296:	c3                   	ret    

f0107297 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107297:	55                   	push   %ebp
f0107298:	89 e5                	mov    %esp,%ebp
f010729a:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f010729d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072a0:	c1 e0 0c             	shl    $0xc,%eax
f01072a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01072a6:	83 ec 04             	sub    $0x4,%esp
f01072a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01072ac:	50                   	push   %eax
f01072ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01072b0:	ff 75 08             	pushl  0x8(%ebp)
f01072b3:	e8 49 f9 ff ff       	call   f0106c01 <get_frame_info>
f01072b8:	83 c4 10             	add    $0x10,%esp
f01072bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01072be:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01072c1:	c9                   	leave  
f01072c2:	c3                   	ret    

f01072c3 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01072c3:	55                   	push   %ebp
f01072c4:	89 e5                	mov    %esp,%ebp
f01072c6:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01072c9:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01072d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01072d7:	eb 5b                	jmp    f0107334 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072e6:	01 d0                	add    %edx,%eax
f01072e8:	8b 00                	mov    (%eax),%eax
f01072ea:	85 c0                	test   %eax,%eax
f01072ec:	74 43                	je     f0107331 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01072fb:	01 d0                	add    %edx,%eax
f01072fd:	8b 00                	mov    (%eax),%eax
f01072ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107304:	83 ec 0c             	sub    $0xc,%esp
f0107307:	50                   	push   %eax
f0107308:	e8 c7 fb ff ff       	call   f0106ed4 <to_frame_info>
f010730d:	83 c4 10             	add    $0x10,%esp
f0107310:	83 ec 0c             	sub    $0xc,%esp
f0107313:	50                   	push   %eax
f0107314:	e8 a6 f5 ff ff       	call   f01068bf <free_frame>
f0107319:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f010731c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010731f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107326:	8b 45 08             	mov    0x8(%ebp),%eax
f0107329:	01 d0                	add    %edx,%eax
f010732b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107331:	ff 45 f4             	incl   -0xc(%ebp)
f0107334:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010733b:	7e 9c                	jle    f01072d9 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010733d:	90                   	nop
f010733e:	c9                   	leave  
f010733f:	c3                   	ret    

f0107340 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107340:	55                   	push   %ebp
f0107341:	89 e5                	mov    %esp,%ebp
f0107343:	83 ec 18             	sub    $0x18,%esp
f0107346:	8b 45 14             	mov    0x14(%ebp),%eax
f0107349:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f010734c:	83 ec 04             	sub    $0x4,%esp
f010734f:	68 d8 4e 13 f0       	push   $0xf0134ed8
f0107354:	68 fa 00 00 00       	push   $0xfa
f0107359:	68 98 4e 13 f0       	push   $0xf0134e98
f010735e:	e8 43 8e ff ff       	call   f01001a6 <_panic>

f0107363 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107363:	55                   	push   %ebp
f0107364:	89 e5                	mov    %esp,%ebp
f0107366:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107369:	83 ec 04             	sub    $0x4,%esp
f010736c:	68 0c 4f 13 f0       	push   $0xf0134f0c
f0107371:	68 0c 01 00 00       	push   $0x10c
f0107376:	68 98 4e 13 f0       	push   $0xf0134e98
f010737b:	e8 26 8e ff ff       	call   f01001a6 <_panic>

f0107380 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107380:	55                   	push   %ebp
f0107381:	89 e5                	mov    %esp,%ebp
f0107383:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f0107386:	83 ec 04             	sub    $0x4,%esp
f0107389:	68 40 4f 13 f0       	push   $0xf0134f40
f010738e:	68 1b 01 00 00       	push   $0x11b
f0107393:	68 98 4e 13 f0       	push   $0xf0134e98
f0107398:	e8 09 8e ff ff       	call   f01001a6 <_panic>

f010739d <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010739d:	55                   	push   %ebp
f010739e:	89 e5                	mov    %esp,%ebp
f01073a0:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f01073a3:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01073a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01073ab:	83 ec 04             	sub    $0x4,%esp
f01073ae:	68 70 4f 13 f0       	push   $0xf0134f70
f01073b3:	68 33 01 00 00       	push   $0x133
f01073b8:	68 98 4e 13 f0       	push   $0xf0134e98
f01073bd:	e8 e4 8d ff ff       	call   f01001a6 <_panic>

f01073c2 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01073c2:	55                   	push   %ebp
f01073c3:	89 e5                	mov    %esp,%ebp
f01073c5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");
f01073c8:	83 ec 04             	sub    $0x4,%esp
f01073cb:	68 a0 4f 13 f0       	push   $0xf0134fa0
f01073d0:	6a 11                	push   $0x11
f01073d2:	68 da 4f 13 f0       	push   $0xf0134fda
f01073d7:	e8 af 8e ff ff       	call   f010028b <_panic_into_prompt>

f01073dc <kmalloc>:
	//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}

void* kmalloc(unsigned int size)
{
f01073dc:	55                   	push   %ebp
f01073dd:	89 e5                	mov    %esp,%ebp
f01073df:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f01073e2:	83 ec 04             	sub    $0x4,%esp
f01073e5:	68 ec 4f 13 f0       	push   $0xf0134fec
f01073ea:	6a 26                	push   $0x26
f01073ec:	68 da 4f 13 f0       	push   $0xf0134fda
f01073f1:	e8 95 8e ff ff       	call   f010028b <_panic_into_prompt>

f01073f6 <kfree>:

	//change this "return" according to your answer
}

void kfree(void* virtual_address)
{
f01073f6:	55                   	push   %ebp
f01073f7:	89 e5                	mov    %esp,%ebp
f01073f9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f01073fc:	83 ec 04             	sub    $0x4,%esp
f01073ff:	68 14 50 13 f0       	push   $0xf0135014
f0107404:	6a 33                	push   $0x33
f0107406:	68 da 4f 13 f0       	push   $0xf0134fda
f010740b:	e8 96 8d ff ff       	call   f01001a6 <_panic>

f0107410 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107410:	55                   	push   %ebp
f0107411:	89 e5                	mov    %esp,%ebp
f0107413:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107416:	83 ec 04             	sub    $0x4,%esp
f0107419:	68 38 50 13 f0       	push   $0xf0135038
f010741e:	6a 3b                	push   $0x3b
f0107420:	68 da 4f 13 f0       	push   $0xf0134fda
f0107425:	e8 7c 8d ff ff       	call   f01001a6 <_panic>

f010742a <kheap_physical_address>:
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f010742a:	55                   	push   %ebp
f010742b:	89 e5                	mov    %esp,%ebp
f010742d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107430:	83 ec 04             	sub    $0x4,%esp
f0107433:	68 6c 50 13 f0       	push   $0xf013506c
f0107438:	6a 46                	push   $0x46
f010743a:	68 da 4f 13 f0       	push   $0xf0134fda
f010743f:	e8 62 8d ff ff       	call   f01001a6 <_panic>

f0107444 <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f0107444:	55                   	push   %ebp
f0107445:	89 e5                	mov    %esp,%ebp
f0107447:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010744a:	83 ec 04             	sub    $0x4,%esp
f010744d:	68 a1 50 13 f0       	push   $0xf01350a1
f0107452:	6a 4f                	push   $0x4f
f0107454:	68 da 4f 13 f0       	push   $0xf0134fda
f0107459:	e8 48 8d ff ff       	call   f01001a6 <_panic>

f010745e <kshrink>:

}

void kshrink(uint32 newSize)
{
f010745e:	55                   	push   %ebp
f010745f:	89 e5                	mov    %esp,%ebp
f0107461:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107464:	83 ec 04             	sub    $0x4,%esp
f0107467:	68 a1 50 13 f0       	push   $0xf01350a1
f010746c:	6a 55                	push   $0x55
f010746e:	68 da 4f 13 f0       	push   $0xf0134fda
f0107473:	e8 2e 8d ff ff       	call   f01001a6 <_panic>

f0107478 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107478:	55                   	push   %ebp
f0107479:	89 e5                	mov    %esp,%ebp
f010747b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010747e:	83 ec 04             	sub    $0x4,%esp
f0107481:	68 a1 50 13 f0       	push   $0xf01350a1
f0107486:	6a 5a                	push   $0x5a
f0107488:	68 da 4f 13 f0       	push   $0xf0134fda
f010748d:	e8 14 8d ff ff       	call   f01001a6 <_panic>

f0107492 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107492:	55                   	push   %ebp
f0107493:	89 e5                	mov    %esp,%ebp
f0107495:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107498:	83 ec 04             	sub    $0x4,%esp
f010749b:	68 b4 50 13 f0       	push   $0xf01350b4
f01074a0:	6a 71                	push   $0x71
f01074a2:	68 da 4f 13 f0       	push   $0xf0134fda
f01074a7:	e8 fa 8c ff ff       	call   f01001a6 <_panic>

f01074ac <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01074ac:	55                   	push   %ebp
f01074ad:	89 e5                	mov    %esp,%ebp
f01074af:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	panic("pt_set_page_permissions() is not implemented yet...!!");
f01074b2:	83 ec 04             	sub    $0x4,%esp
f01074b5:	68 dc 50 13 f0       	push   $0xf01350dc
f01074ba:	6a 0e                	push   $0xe
f01074bc:	68 12 51 13 f0       	push   $0xf0135112
f01074c1:	e8 e0 8c ff ff       	call   f01001a6 <_panic>

f01074c6 <pt_get_page_permissions>:
}

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01074c6:	55                   	push   %ebp
f01074c7:	89 e5                	mov    %esp,%ebp
f01074c9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
//	panic("pt_get_page_permissions() is not implemented yet...!!");

	uint32* page_table_point=NULL;
f01074cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f01074d3:	83 ec 04             	sub    $0x4,%esp
f01074d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074d9:	50                   	push   %eax
f01074da:	ff 75 0c             	pushl  0xc(%ebp)
f01074dd:	ff 75 08             	pushl  0x8(%ebp)
f01074e0:	e8 84 f4 ff ff       	call   f0106969 <get_page_table>
f01074e5:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f01074e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01074eb:	85 c0                	test   %eax,%eax
f01074ed:	74 2b                	je     f010751a <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f01074ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01074f2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01074f5:	c1 ea 0c             	shr    $0xc,%edx
f01074f8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01074fe:	c1 e2 02             	shl    $0x2,%edx
f0107501:	01 d0                	add    %edx,%eax
f0107503:	8b 00                	mov    (%eax),%eax
f0107505:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107508:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f010750f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107512:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107515:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107518:	eb 05                	jmp    f010751f <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f010751a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010751f:	c9                   	leave  
f0107520:	c3                   	ret    

f0107521 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107521:	55                   	push   %ebp
f0107522:	89 e5                	mov    %esp,%ebp
f0107524:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	panic("pt_clear_page_table_entry() is not implemented yet...!!");
f0107527:	83 ec 04             	sub    $0x4,%esp
f010752a:	68 2c 51 13 f0       	push   $0xf013512c
f010752f:	6a 2e                	push   $0x2e
f0107531:	68 12 51 13 f0       	push   $0xf0135112
f0107536:	e8 6b 8c ff ff       	call   f01001a6 <_panic>

f010753b <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f010753b:	55                   	push   %ebp
f010753c:	89 e5                	mov    %esp,%ebp
//
//		else
//		{
//			return -1;
//		}
	return -1;
f010753e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107543:	5d                   	pop    %ebp
f0107544:	c3                   	ret    

f0107545 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107545:	55                   	push   %ebp
f0107546:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107548:	8b 45 0c             	mov    0xc(%ebp),%eax
f010754b:	c1 e8 16             	shr    $0x16,%eax
f010754e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107555:	8b 45 08             	mov    0x8(%ebp),%eax
f0107558:	01 d0                	add    %edx,%eax
f010755a:	8b 00                	mov    (%eax),%eax
f010755c:	83 e0 20             	and    $0x20,%eax
f010755f:	85 c0                	test   %eax,%eax
f0107561:	0f 95 c0             	setne  %al
f0107564:	0f b6 c0             	movzbl %al,%eax
}
f0107567:	5d                   	pop    %ebp
f0107568:	c3                   	ret    

f0107569 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107569:	55                   	push   %ebp
f010756a:	89 e5                	mov    %esp,%ebp
f010756c:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f010756f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107572:	c1 e8 16             	shr    $0x16,%eax
f0107575:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010757c:	8b 45 08             	mov    0x8(%ebp),%eax
f010757f:	01 d0                	add    %edx,%eax
f0107581:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107584:	c1 ea 16             	shr    $0x16,%edx
f0107587:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f010758e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107591:	01 ca                	add    %ecx,%edx
f0107593:	8b 12                	mov    (%edx),%edx
f0107595:	83 e2 df             	and    $0xffffffdf,%edx
f0107598:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010759a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010759d:	83 ec 08             	sub    $0x8,%esp
f01075a0:	50                   	push   %eax
f01075a1:	6a 00                	push   $0x0
f01075a3:	e8 1e ee ff ff       	call   f01063c6 <tlb_invalidate>
f01075a8:	83 c4 10             	add    $0x10,%esp
}
f01075ab:	90                   	nop
f01075ac:	c9                   	leave  
f01075ad:	c3                   	ret    

f01075ae <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01075ae:	55                   	push   %ebp
f01075af:	89 e5                	mov    %esp,%ebp
f01075b1:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01075b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01075b7:	c1 e8 16             	shr    $0x16,%eax
f01075ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01075c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01075c4:	01 d0                	add    %edx,%eax
f01075c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01075cc:	0f 20 d8             	mov    %cr3,%eax
f01075cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01075d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01075d5:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01075d8:	90                   	nop
f01075d9:	c9                   	leave  
f01075da:	c3                   	ret    

f01075db <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f01075db:	55                   	push   %ebp
f01075dc:	89 e5                	mov    %esp,%ebp
f01075de:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01075e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01075e8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01075ef:	eb 20                	jmp    f0107611 <env_page_ws_get_size+0x36>
f01075f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01075f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01075f7:	89 d0                	mov    %edx,%eax
f01075f9:	01 c0                	add    %eax,%eax
f01075fb:	01 d0                	add    %edx,%eax
f01075fd:	c1 e0 03             	shl    $0x3,%eax
f0107600:	01 c8                	add    %ecx,%eax
f0107602:	83 c0 7c             	add    $0x7c,%eax
f0107605:	8a 00                	mov    (%eax),%al
f0107607:	84 c0                	test   %al,%al
f0107609:	75 03                	jne    f010760e <env_page_ws_get_size+0x33>
f010760b:	ff 45 f8             	incl   -0x8(%ebp)
f010760e:	ff 45 fc             	incl   -0x4(%ebp)
f0107611:	8b 45 08             	mov    0x8(%ebp),%eax
f0107614:	8b 50 74             	mov    0x74(%eax),%edx
f0107617:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010761a:	39 c2                	cmp    %eax,%edx
f010761c:	77 d3                	ja     f01075f1 <env_page_ws_get_size+0x16>
	return counter;
f010761e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107621:	c9                   	leave  
f0107622:	c3                   	ret    

f0107623 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107623:	55                   	push   %ebp
f0107624:	89 e5                	mov    %esp,%ebp
f0107626:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107629:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107630:	eb 4c                	jmp    f010767e <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107632:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107635:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107638:	89 d0                	mov    %edx,%eax
f010763a:	01 c0                	add    %eax,%eax
f010763c:	01 d0                	add    %edx,%eax
f010763e:	c1 e0 03             	shl    $0x3,%eax
f0107641:	01 c8                	add    %ecx,%eax
f0107643:	83 c0 78             	add    $0x78,%eax
f0107646:	8b 00                	mov    (%eax),%eax
f0107648:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010764b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010764e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107653:	89 c2                	mov    %eax,%edx
f0107655:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107658:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010765b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010765e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107663:	39 c2                	cmp    %eax,%edx
f0107665:	75 14                	jne    f010767b <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010766a:	83 ec 08             	sub    $0x8,%esp
f010766d:	50                   	push   %eax
f010766e:	ff 75 08             	pushl  0x8(%ebp)
f0107671:	e8 bc 00 00 00       	call   f0107732 <env_page_ws_clear_entry>
f0107676:	83 c4 10             	add    $0x10,%esp
			break;
f0107679:	eb 10                	jmp    f010768b <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f010767b:	ff 45 f4             	incl   -0xc(%ebp)
f010767e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107681:	8b 50 74             	mov    0x74(%eax),%edx
f0107684:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107687:	39 c2                	cmp    %eax,%edx
f0107689:	77 a7                	ja     f0107632 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f010768b:	90                   	nop
f010768c:	c9                   	leave  
f010768d:	c3                   	ret    

f010768e <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010768e:	55                   	push   %ebp
f010768f:	89 e5                	mov    %esp,%ebp
f0107691:	53                   	push   %ebx
f0107692:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107695:	8b 45 08             	mov    0x8(%ebp),%eax
f0107698:	8b 40 74             	mov    0x74(%eax),%eax
f010769b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010769e:	77 16                	ja     f01076b6 <env_page_ws_set_entry+0x28>
f01076a0:	68 64 51 13 f0       	push   $0xf0135164
f01076a5:	68 9a 51 13 f0       	push   $0xf013519a
f01076aa:	6a 26                	push   $0x26
f01076ac:	68 b0 51 13 f0       	push   $0xf01351b0
f01076b1:	e8 f0 8a ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01076b6:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01076bd:	76 16                	jbe    f01076d5 <env_page_ws_set_entry+0x47>
f01076bf:	68 d0 51 13 f0       	push   $0xf01351d0
f01076c4:	68 9a 51 13 f0       	push   $0xf013519a
f01076c9:	6a 27                	push   $0x27
f01076cb:	68 b0 51 13 f0       	push   $0xf01351b0
f01076d0:	e8 d1 8a ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01076d5:	8b 45 10             	mov    0x10(%ebp),%eax
f01076d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01076db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01076e3:	89 c1                	mov    %eax,%ecx
f01076e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01076e8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076eb:	89 d0                	mov    %edx,%eax
f01076ed:	01 c0                	add    %eax,%eax
f01076ef:	01 d0                	add    %edx,%eax
f01076f1:	c1 e0 03             	shl    $0x3,%eax
f01076f4:	01 d8                	add    %ebx,%eax
f01076f6:	83 c0 78             	add    $0x78,%eax
f01076f9:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01076fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01076fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107701:	89 d0                	mov    %edx,%eax
f0107703:	01 c0                	add    %eax,%eax
f0107705:	01 d0                	add    %edx,%eax
f0107707:	c1 e0 03             	shl    $0x3,%eax
f010770a:	01 c8                	add    %ecx,%eax
f010770c:	83 c0 7c             	add    $0x7c,%eax
f010770f:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107712:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107715:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107718:	89 d0                	mov    %edx,%eax
f010771a:	01 c0                	add    %eax,%eax
f010771c:	01 d0                	add    %edx,%eax
f010771e:	c1 e0 03             	shl    $0x3,%eax
f0107721:	01 c8                	add    %ecx,%eax
f0107723:	83 e8 80             	sub    $0xffffff80,%eax
f0107726:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010772c:	90                   	nop
}
f010772d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107730:	c9                   	leave  
f0107731:	c3                   	ret    

f0107732 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107732:	55                   	push   %ebp
f0107733:	89 e5                	mov    %esp,%ebp
f0107735:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107738:	8b 45 08             	mov    0x8(%ebp),%eax
f010773b:	8b 40 74             	mov    0x74(%eax),%eax
f010773e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107741:	77 16                	ja     f0107759 <env_page_ws_clear_entry+0x27>
f0107743:	68 04 52 13 f0       	push   $0xf0135204
f0107748:	68 9a 51 13 f0       	push   $0xf013519a
f010774d:	6a 32                	push   $0x32
f010774f:	68 b0 51 13 f0       	push   $0xf01351b0
f0107754:	e8 4d 8a ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107759:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010775c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010775f:	89 d0                	mov    %edx,%eax
f0107761:	01 c0                	add    %eax,%eax
f0107763:	01 d0                	add    %edx,%eax
f0107765:	c1 e0 03             	shl    $0x3,%eax
f0107768:	01 c8                	add    %ecx,%eax
f010776a:	83 c0 78             	add    $0x78,%eax
f010776d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107773:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107776:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107779:	89 d0                	mov    %edx,%eax
f010777b:	01 c0                	add    %eax,%eax
f010777d:	01 d0                	add    %edx,%eax
f010777f:	c1 e0 03             	shl    $0x3,%eax
f0107782:	01 c8                	add    %ecx,%eax
f0107784:	83 c0 7c             	add    $0x7c,%eax
f0107787:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f010778a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010778d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107790:	89 d0                	mov    %edx,%eax
f0107792:	01 c0                	add    %eax,%eax
f0107794:	01 d0                	add    %edx,%eax
f0107796:	c1 e0 03             	shl    $0x3,%eax
f0107799:	01 c8                	add    %ecx,%eax
f010779b:	83 e8 80             	sub    $0xffffff80,%eax
f010779e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01077a4:	90                   	nop
f01077a5:	c9                   	leave  
f01077a6:	c3                   	ret    

f01077a7 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01077a7:	55                   	push   %ebp
f01077a8:	89 e5                	mov    %esp,%ebp
f01077aa:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01077ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01077b0:	8b 40 74             	mov    0x74(%eax),%eax
f01077b3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01077b6:	77 16                	ja     f01077ce <env_page_ws_get_virtual_address+0x27>
f01077b8:	68 04 52 13 f0       	push   $0xf0135204
f01077bd:	68 9a 51 13 f0       	push   $0xf013519a
f01077c2:	6a 3a                	push   $0x3a
f01077c4:	68 b0 51 13 f0       	push   $0xf01351b0
f01077c9:	e8 d8 89 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01077ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01077d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01077d4:	89 d0                	mov    %edx,%eax
f01077d6:	01 c0                	add    %eax,%eax
f01077d8:	01 d0                	add    %edx,%eax
f01077da:	c1 e0 03             	shl    $0x3,%eax
f01077dd:	01 c8                	add    %ecx,%eax
f01077df:	83 c0 78             	add    $0x78,%eax
f01077e2:	8b 00                	mov    (%eax),%eax
f01077e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01077e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01077ef:	c9                   	leave  
f01077f0:	c3                   	ret    

f01077f1 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01077f1:	55                   	push   %ebp
f01077f2:	89 e5                	mov    %esp,%ebp
f01077f4:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01077f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01077fa:	8b 40 74             	mov    0x74(%eax),%eax
f01077fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107800:	77 16                	ja     f0107818 <env_page_ws_get_time_stamp+0x27>
f0107802:	68 04 52 13 f0       	push   $0xf0135204
f0107807:	68 9a 51 13 f0       	push   $0xf013519a
f010780c:	6a 40                	push   $0x40
f010780e:	68 b0 51 13 f0       	push   $0xf01351b0
f0107813:	e8 8e 89 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107818:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010781b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010781e:	89 d0                	mov    %edx,%eax
f0107820:	01 c0                	add    %eax,%eax
f0107822:	01 d0                	add    %edx,%eax
f0107824:	c1 e0 03             	shl    $0x3,%eax
f0107827:	01 c8                	add    %ecx,%eax
f0107829:	83 e8 80             	sub    $0xffffff80,%eax
f010782c:	8b 00                	mov    (%eax),%eax
}
f010782e:	c9                   	leave  
f010782f:	c3                   	ret    

f0107830 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107830:	55                   	push   %ebp
f0107831:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107833:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107836:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107839:	89 d0                	mov    %edx,%eax
f010783b:	01 c0                	add    %eax,%eax
f010783d:	01 d0                	add    %edx,%eax
f010783f:	c1 e0 03             	shl    $0x3,%eax
f0107842:	01 c8                	add    %ecx,%eax
f0107844:	83 c0 7c             	add    $0x7c,%eax
f0107847:	8a 00                	mov    (%eax),%al
f0107849:	0f b6 c0             	movzbl %al,%eax
}
f010784c:	5d                   	pop    %ebp
f010784d:	c3                   	ret    

f010784e <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010784e:	55                   	push   %ebp
f010784f:	89 e5                	mov    %esp,%ebp
f0107851:	53                   	push   %ebx
f0107852:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0107855:	83 ec 0c             	sub    $0xc,%esp
f0107858:	6a 02                	push   $0x2
f010785a:	e8 1a 57 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f010785f:	83 c4 10             	add    $0x10,%esp
f0107862:	85 c0                	test   %eax,%eax
f0107864:	0f 84 fe 00 00 00    	je     f0107968 <env_page_ws_print+0x11a>
	{
		int i = 0;
f010786a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0107871:	83 ec 0c             	sub    $0xc,%esp
f0107874:	68 3c 52 13 f0       	push   $0xf013523c
f0107879:	e8 af 93 ff ff       	call   f0100c2d <cprintf>
f010787e:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107881:	8b 45 08             	mov    0x8(%ebp),%eax
f0107884:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010788a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010788d:	eb 2c                	jmp    f01078bb <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010788f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107892:	8b 10                	mov    (%eax),%edx
f0107894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107897:	8d 48 01             	lea    0x1(%eax),%ecx
f010789a:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010789d:	83 ec 04             	sub    $0x4,%esp
f01078a0:	52                   	push   %edx
f01078a1:	50                   	push   %eax
f01078a2:	68 56 52 13 f0       	push   $0xf0135256
f01078a7:	e8 81 93 ff ff       	call   f0100c2d <cprintf>
f01078ac:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01078af:	8b 45 08             	mov    0x8(%ebp),%eax
f01078b2:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f01078b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01078bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078bf:	74 08                	je     f01078c9 <env_page_ws_print+0x7b>
f01078c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078c4:	8b 40 10             	mov    0x10(%eax),%eax
f01078c7:	eb 05                	jmp    f01078ce <env_page_ws_print+0x80>
f01078c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01078ce:	8b 55 08             	mov    0x8(%ebp),%edx
f01078d1:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f01078d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01078da:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f01078e0:	85 c0                	test   %eax,%eax
f01078e2:	75 ab                	jne    f010788f <env_page_ws_print+0x41>
f01078e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e8:	75 a5                	jne    f010788f <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01078ea:	83 ec 0c             	sub    $0xc,%esp
f01078ed:	68 5e 52 13 f0       	push   $0xf013525e
f01078f2:	e8 36 93 ff ff       	call   f0100c2d <cprintf>
f01078f7:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01078fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01078fd:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0107903:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107906:	eb 2c                	jmp    f0107934 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107908:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010790b:	8b 10                	mov    (%eax),%edx
f010790d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107910:	8d 48 01             	lea    0x1(%eax),%ecx
f0107913:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107916:	83 ec 04             	sub    $0x4,%esp
f0107919:	52                   	push   %edx
f010791a:	50                   	push   %eax
f010791b:	68 56 52 13 f0       	push   $0xf0135256
f0107920:	e8 08 93 ff ff       	call   f0100c2d <cprintf>
f0107925:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107928:	8b 45 08             	mov    0x8(%ebp),%eax
f010792b:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107931:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107934:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107938:	74 08                	je     f0107942 <env_page_ws_print+0xf4>
f010793a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010793d:	8b 40 10             	mov    0x10(%eax),%eax
f0107940:	eb 05                	jmp    f0107947 <env_page_ws_print+0xf9>
f0107942:	b8 00 00 00 00       	mov    $0x0,%eax
f0107947:	8b 55 08             	mov    0x8(%ebp),%edx
f010794a:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f0107950:	8b 45 08             	mov    0x8(%ebp),%eax
f0107953:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107959:	85 c0                	test   %eax,%eax
f010795b:	75 ab                	jne    f0107908 <env_page_ws_print+0xba>
f010795d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107961:	75 a5                	jne    f0107908 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107963:	e9 94 01 00 00       	jmp    f0107afc <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0107968:	83 ec 0c             	sub    $0xc,%esp
f010796b:	68 79 52 13 f0       	push   $0xf0135279
f0107970:	e8 b8 92 ff ff       	call   f0100c2d <cprintf>
f0107975:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107978:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010797f:	e9 69 01 00 00       	jmp    f0107aed <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0107984:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107987:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010798a:	89 d0                	mov    %edx,%eax
f010798c:	01 c0                	add    %eax,%eax
f010798e:	01 d0                	add    %edx,%eax
f0107990:	c1 e0 03             	shl    $0x3,%eax
f0107993:	01 c8                	add    %ecx,%eax
f0107995:	83 c0 7c             	add    $0x7c,%eax
f0107998:	8a 00                	mov    (%eax),%al
f010799a:	84 c0                	test   %al,%al
f010799c:	74 43                	je     f01079e1 <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f010799e:	83 ec 0c             	sub    $0xc,%esp
f01079a1:	68 83 52 13 f0       	push   $0xf0135283
f01079a6:	e8 82 92 ff ff       	call   f0100c2d <cprintf>
f01079ab:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01079ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01079b1:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f01079b7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01079ba:	75 10                	jne    f01079cc <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f01079bc:	83 ec 0c             	sub    $0xc,%esp
f01079bf:	68 92 52 13 f0       	push   $0xf0135292
f01079c4:	e8 64 92 ff ff       	call   f0100c2d <cprintf>
f01079c9:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01079cc:	83 ec 0c             	sub    $0xc,%esp
f01079cf:	68 98 52 13 f0       	push   $0xf0135298
f01079d4:	e8 54 92 ff ff       	call   f0100c2d <cprintf>
f01079d9:	83 c4 10             	add    $0x10,%esp
				continue;
f01079dc:	e9 09 01 00 00       	jmp    f0107aea <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01079e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01079e7:	89 d0                	mov    %edx,%eax
f01079e9:	01 c0                	add    %eax,%eax
f01079eb:	01 d0                	add    %edx,%eax
f01079ed:	c1 e0 03             	shl    $0x3,%eax
f01079f0:	01 c8                	add    %ecx,%eax
f01079f2:	83 c0 78             	add    $0x78,%eax
f01079f5:	8b 00                	mov    (%eax),%eax
f01079f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01079fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a00:	89 d0                	mov    %edx,%eax
f0107a02:	01 c0                	add    %eax,%eax
f0107a04:	01 d0                	add    %edx,%eax
f0107a06:	c1 e0 03             	shl    $0x3,%eax
f0107a09:	01 c8                	add    %ecx,%eax
f0107a0b:	83 e8 80             	sub    $0xffffff80,%eax
f0107a0e:	8b 00                	mov    (%eax),%eax
f0107a10:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0107a13:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a16:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107a19:	83 ec 08             	sub    $0x8,%esp
f0107a1c:	ff 75 e8             	pushl  -0x18(%ebp)
f0107a1f:	50                   	push   %eax
f0107a20:	e8 a1 fa ff ff       	call   f01074c6 <pt_get_page_permissions>
f0107a25:	83 c4 10             	add    $0x10,%esp
f0107a28:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0107a2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a2e:	83 e0 40             	and    $0x40,%eax
f0107a31:	85 c0                	test   %eax,%eax
f0107a33:	0f 95 c0             	setne  %al
f0107a36:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107a39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a3c:	83 e0 20             	and    $0x20,%eax
f0107a3f:	85 c0                	test   %eax,%eax
f0107a41:	0f 95 c0             	setne  %al
f0107a44:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0107a47:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a4a:	25 00 02 00 00       	and    $0x200,%eax
f0107a4f:	85 c0                	test   %eax,%eax
f0107a51:	0f 95 c0             	setne  %al
f0107a54:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0107a57:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a5a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a5d:	89 d0                	mov    %edx,%eax
f0107a5f:	01 c0                	add    %eax,%eax
f0107a61:	01 d0                	add    %edx,%eax
f0107a63:	c1 e0 03             	shl    $0x3,%eax
f0107a66:	01 c8                	add    %ecx,%eax
f0107a68:	83 c0 78             	add    $0x78,%eax
f0107a6b:	8b 00                	mov    (%eax),%eax
f0107a6d:	83 ec 04             	sub    $0x4,%esp
f0107a70:	50                   	push   %eax
f0107a71:	ff 75 ec             	pushl  -0x14(%ebp)
f0107a74:	68 9a 52 13 f0       	push   $0xf013529a
f0107a79:	e8 af 91 ff ff       	call   f0100c2d <cprintf>
f0107a7e:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107a81:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a84:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a87:	89 d0                	mov    %edx,%eax
f0107a89:	01 c0                	add    %eax,%eax
f0107a8b:	01 d0                	add    %edx,%eax
f0107a8d:	c1 e0 03             	shl    $0x3,%eax
f0107a90:	01 c8                	add    %ecx,%eax
f0107a92:	05 84 00 00 00       	add    $0x84,%eax
f0107a97:	8b 18                	mov    (%eax),%ebx
f0107a99:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107a9d:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107aa1:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0107aa5:	83 ec 08             	sub    $0x8,%esp
f0107aa8:	53                   	push   %ebx
f0107aa9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107aac:	51                   	push   %ecx
f0107aad:	52                   	push   %edx
f0107aae:	50                   	push   %eax
f0107aaf:	68 ac 52 13 f0       	push   $0xf01352ac
f0107ab4:	e8 74 91 ff ff       	call   f0100c2d <cprintf>
f0107ab9:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0107abc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107abf:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107ac5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107ac8:	75 10                	jne    f0107ada <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f0107aca:	83 ec 0c             	sub    $0xc,%esp
f0107acd:	68 f3 52 13 f0       	push   $0xf01352f3
f0107ad2:	e8 56 91 ff ff       	call   f0100c2d <cprintf>
f0107ad7:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107ada:	83 ec 0c             	sub    $0xc,%esp
f0107add:	68 98 52 13 f0       	push   $0xf0135298
f0107ae2:	e8 46 91 ff ff       	call   f0100c2d <cprintf>
f0107ae7:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107aea:	ff 45 ec             	incl   -0x14(%ebp)
f0107aed:	8b 45 08             	mov    0x8(%ebp),%eax
f0107af0:	8b 40 74             	mov    0x74(%eax),%eax
f0107af3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107af6:	0f 87 88 fe ff ff    	ja     f0107984 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107afc:	90                   	nop
f0107afd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107b00:	c9                   	leave  
f0107b01:	c3                   	ret    

f0107b02 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0107b02:	55                   	push   %ebp
f0107b03:	89 e5                	mov    %esp,%ebp
f0107b05:	53                   	push   %ebx
f0107b06:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0107b09:	83 ec 0c             	sub    $0xc,%esp
f0107b0c:	68 f8 52 13 f0       	push   $0xf01352f8
f0107b11:	e8 17 91 ff ff       	call   f0100c2d <cprintf>
f0107b16:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107b19:	83 ec 0c             	sub    $0xc,%esp
f0107b1c:	68 2d 53 13 f0       	push   $0xf013532d
f0107b21:	e8 07 91 ff ff       	call   f0100c2d <cprintf>
f0107b26:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107b29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107b30:	e9 16 01 00 00       	jmp    f0107c4b <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f0107b35:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b3b:	89 d0                	mov    %edx,%eax
f0107b3d:	01 c0                	add    %eax,%eax
f0107b3f:	01 d0                	add    %edx,%eax
f0107b41:	c1 e0 03             	shl    $0x3,%eax
f0107b44:	01 c8                	add    %ecx,%eax
f0107b46:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107b4b:	8a 00                	mov    (%eax),%al
f0107b4d:	84 c0                	test   %al,%al
f0107b4f:	74 43                	je     f0107b94 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107b51:	83 ec 0c             	sub    $0xc,%esp
f0107b54:	68 83 52 13 f0       	push   $0xf0135283
f0107b59:	e8 cf 90 ff ff       	call   f0100c2d <cprintf>
f0107b5e:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107b61:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b64:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107b6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107b6d:	75 10                	jne    f0107b7f <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107b6f:	83 ec 0c             	sub    $0xc,%esp
f0107b72:	68 92 52 13 f0       	push   $0xf0135292
f0107b77:	e8 b1 90 ff ff       	call   f0100c2d <cprintf>
f0107b7c:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107b7f:	83 ec 0c             	sub    $0xc,%esp
f0107b82:	68 98 52 13 f0       	push   $0xf0135298
f0107b87:	e8 a1 90 ff ff       	call   f0100c2d <cprintf>
f0107b8c:	83 c4 10             	add    $0x10,%esp
			continue;
f0107b8f:	e9 b4 00 00 00       	jmp    f0107c48 <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0107b94:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b9a:	89 d0                	mov    %edx,%eax
f0107b9c:	01 c0                	add    %eax,%eax
f0107b9e:	01 d0                	add    %edx,%eax
f0107ba0:	c1 e0 03             	shl    $0x3,%eax
f0107ba3:	01 c8                	add    %ecx,%eax
f0107ba5:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107baa:	8b 00                	mov    (%eax),%eax
f0107bac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107baf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bb5:	89 d0                	mov    %edx,%eax
f0107bb7:	01 c0                	add    %eax,%eax
f0107bb9:	01 d0                	add    %edx,%eax
f0107bbb:	c1 e0 03             	shl    $0x3,%eax
f0107bbe:	01 c8                	add    %ecx,%eax
f0107bc0:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107bc5:	8b 00                	mov    (%eax),%eax
f0107bc7:	83 ec 04             	sub    $0x4,%esp
f0107bca:	50                   	push   %eax
f0107bcb:	ff 75 f4             	pushl  -0xc(%ebp)
f0107bce:	68 38 53 13 f0       	push   $0xf0135338
f0107bd3:	e8 55 90 ff ff       	call   f0100c2d <cprintf>
f0107bd8:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0107bdb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bde:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107be1:	89 d0                	mov    %edx,%eax
f0107be3:	01 c0                	add    %eax,%eax
f0107be5:	01 d0                	add    %edx,%eax
f0107be7:	c1 e0 03             	shl    $0x3,%eax
f0107bea:	01 c8                	add    %ecx,%eax
f0107bec:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107bf1:	8b 18                	mov    (%eax),%ebx
f0107bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bf6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107bf9:	83 ec 08             	sub    $0x8,%esp
f0107bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0107bff:	50                   	push   %eax
f0107c00:	e8 40 f9 ff ff       	call   f0107545 <pd_is_table_used>
f0107c05:	83 c4 10             	add    $0x10,%esp
f0107c08:	83 ec 04             	sub    $0x4,%esp
f0107c0b:	53                   	push   %ebx
f0107c0c:	50                   	push   %eax
f0107c0d:	68 50 53 13 f0       	push   $0xf0135350
f0107c12:	e8 16 90 ff ff       	call   f0100c2d <cprintf>
f0107c17:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107c1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c1d:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107c23:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107c26:	75 10                	jne    f0107c38 <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f0107c28:	83 ec 0c             	sub    $0xc,%esp
f0107c2b:	68 f3 52 13 f0       	push   $0xf01352f3
f0107c30:	e8 f8 8f ff ff       	call   f0100c2d <cprintf>
f0107c35:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0107c38:	83 ec 0c             	sub    $0xc,%esp
f0107c3b:	68 98 52 13 f0       	push   $0xf0135298
f0107c40:	e8 e8 8f ff ff       	call   f0100c2d <cprintf>
f0107c45:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107c48:	ff 45 f4             	incl   -0xc(%ebp)
f0107c4b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107c4f:	0f 86 e0 fe ff ff    	jbe    f0107b35 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0107c55:	90                   	nop
f0107c56:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107c59:	c9                   	leave  
f0107c5a:	c3                   	ret    

f0107c5b <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107c5b:	55                   	push   %ebp
f0107c5c:	89 e5                	mov    %esp,%ebp
f0107c5e:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107c61:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107c68:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107c6f:	eb 22                	jmp    f0107c93 <env_table_ws_get_size+0x38>
f0107c71:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107c74:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107c77:	89 d0                	mov    %edx,%eax
f0107c79:	01 c0                	add    %eax,%eax
f0107c7b:	01 d0                	add    %edx,%eax
f0107c7d:	c1 e0 03             	shl    $0x3,%eax
f0107c80:	01 c8                	add    %ecx,%eax
f0107c82:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107c87:	8a 00                	mov    (%eax),%al
f0107c89:	84 c0                	test   %al,%al
f0107c8b:	75 03                	jne    f0107c90 <env_table_ws_get_size+0x35>
f0107c8d:	ff 45 f8             	incl   -0x8(%ebp)
f0107c90:	ff 45 fc             	incl   -0x4(%ebp)
f0107c93:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0107c97:	7e d8                	jle    f0107c71 <env_table_ws_get_size+0x16>
	return counter;
f0107c99:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107c9c:	c9                   	leave  
f0107c9d:	c3                   	ret    

f0107c9e <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107c9e:	55                   	push   %ebp
f0107c9f:	89 e5                	mov    %esp,%ebp
f0107ca1:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107ca4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0107cab:	eb 4e                	jmp    f0107cfb <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0107cad:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107cb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107cb3:	89 d0                	mov    %edx,%eax
f0107cb5:	01 c0                	add    %eax,%eax
f0107cb7:	01 d0                	add    %edx,%eax
f0107cb9:	c1 e0 03             	shl    $0x3,%eax
f0107cbc:	01 c8                	add    %ecx,%eax
f0107cbe:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107cc3:	8b 00                	mov    (%eax),%eax
f0107cc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ccb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107cd0:	89 c2                	mov    %eax,%edx
f0107cd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107cd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107cd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107cdb:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107ce0:	39 c2                	cmp    %eax,%edx
f0107ce2:	75 14                	jne    f0107cf8 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0107ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce7:	83 ec 08             	sub    $0x8,%esp
f0107cea:	50                   	push   %eax
f0107ceb:	ff 75 08             	pushl  0x8(%ebp)
f0107cee:	e8 bc 00 00 00       	call   f0107daf <env_table_ws_clear_entry>
f0107cf3:	83 c4 10             	add    $0x10,%esp
			break;
f0107cf6:	eb 09                	jmp    f0107d01 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0107cf8:	ff 45 f4             	incl   -0xc(%ebp)
f0107cfb:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107cff:	7e ac                	jle    f0107cad <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107d01:	90                   	nop
f0107d02:	c9                   	leave  
f0107d03:	c3                   	ret    

f0107d04 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107d04:	55                   	push   %ebp
f0107d05:	89 e5                	mov    %esp,%ebp
f0107d07:	53                   	push   %ebx
f0107d08:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107d0b:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107d0f:	76 19                	jbe    f0107d2a <env_table_ws_set_entry+0x26>
f0107d11:	68 74 53 13 f0       	push   $0xf0135374
f0107d16:	68 9a 51 13 f0       	push   $0xf013519a
f0107d1b:	68 b6 00 00 00       	push   $0xb6
f0107d20:	68 b0 51 13 f0       	push   $0xf01351b0
f0107d25:	e8 7c 84 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107d2a:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107d31:	76 19                	jbe    f0107d4c <env_table_ws_set_entry+0x48>
f0107d33:	68 d0 51 13 f0       	push   $0xf01351d0
f0107d38:	68 9a 51 13 f0       	push   $0xf013519a
f0107d3d:	68 b7 00 00 00       	push   $0xb7
f0107d42:	68 b0 51 13 f0       	push   $0xf01351b0
f0107d47:	e8 5a 84 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0107d4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0107d4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107d52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d55:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107d5a:	89 c1                	mov    %eax,%ecx
f0107d5c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107d5f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d62:	89 d0                	mov    %edx,%eax
f0107d64:	01 c0                	add    %eax,%eax
f0107d66:	01 d0                	add    %edx,%eax
f0107d68:	c1 e0 03             	shl    $0x3,%eax
f0107d6b:	01 d8                	add    %ebx,%eax
f0107d6d:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107d72:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0107d74:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d77:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d7a:	89 d0                	mov    %edx,%eax
f0107d7c:	01 c0                	add    %eax,%eax
f0107d7e:	01 d0                	add    %edx,%eax
f0107d80:	c1 e0 03             	shl    $0x3,%eax
f0107d83:	01 c8                	add    %ecx,%eax
f0107d85:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107d8a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0107d8d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d90:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d93:	89 d0                	mov    %edx,%eax
f0107d95:	01 c0                	add    %eax,%eax
f0107d97:	01 d0                	add    %edx,%eax
f0107d99:	c1 e0 03             	shl    $0x3,%eax
f0107d9c:	01 c8                	add    %ecx,%eax
f0107d9e:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107da3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0107da9:	90                   	nop
}
f0107daa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107dad:	c9                   	leave  
f0107dae:	c3                   	ret    

f0107daf <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107daf:	55                   	push   %ebp
f0107db0:	89 e5                	mov    %esp,%ebp
f0107db2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107db5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107db9:	76 19                	jbe    f0107dd4 <env_table_ws_clear_entry+0x25>
f0107dbb:	68 74 53 13 f0       	push   $0xf0135374
f0107dc0:	68 9a 51 13 f0       	push   $0xf013519a
f0107dc5:	68 c2 00 00 00       	push   $0xc2
f0107dca:	68 b0 51 13 f0       	push   $0xf01351b0
f0107dcf:	e8 d2 83 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0107dd4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107dd7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dda:	89 d0                	mov    %edx,%eax
f0107ddc:	01 c0                	add    %eax,%eax
f0107dde:	01 d0                	add    %edx,%eax
f0107de0:	c1 e0 03             	shl    $0x3,%eax
f0107de3:	01 c8                	add    %ecx,%eax
f0107de5:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107dea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0107df0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107df3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107df6:	89 d0                	mov    %edx,%eax
f0107df8:	01 c0                	add    %eax,%eax
f0107dfa:	01 d0                	add    %edx,%eax
f0107dfc:	c1 e0 03             	shl    $0x3,%eax
f0107dff:	01 c8                	add    %ecx,%eax
f0107e01:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107e06:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0107e09:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e0f:	89 d0                	mov    %edx,%eax
f0107e11:	01 c0                	add    %eax,%eax
f0107e13:	01 d0                	add    %edx,%eax
f0107e15:	c1 e0 03             	shl    $0x3,%eax
f0107e18:	01 c8                	add    %ecx,%eax
f0107e1a:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107e1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107e25:	90                   	nop
f0107e26:	c9                   	leave  
f0107e27:	c3                   	ret    

f0107e28 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107e28:	55                   	push   %ebp
f0107e29:	89 e5                	mov    %esp,%ebp
f0107e2b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107e2e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107e32:	76 19                	jbe    f0107e4d <env_table_ws_get_virtual_address+0x25>
f0107e34:	68 74 53 13 f0       	push   $0xf0135374
f0107e39:	68 9a 51 13 f0       	push   $0xf013519a
f0107e3e:	68 ca 00 00 00       	push   $0xca
f0107e43:	68 b0 51 13 f0       	push   $0xf01351b0
f0107e48:	e8 59 83 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0107e4d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e53:	89 d0                	mov    %edx,%eax
f0107e55:	01 c0                	add    %eax,%eax
f0107e57:	01 d0                	add    %edx,%eax
f0107e59:	c1 e0 03             	shl    $0x3,%eax
f0107e5c:	01 c8                	add    %ecx,%eax
f0107e5e:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107e63:	8b 00                	mov    (%eax),%eax
f0107e65:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e6b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0107e70:	c9                   	leave  
f0107e71:	c3                   	ret    

f0107e72 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107e72:	55                   	push   %ebp
f0107e73:	89 e5                	mov    %esp,%ebp
f0107e75:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107e78:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107e7c:	76 19                	jbe    f0107e97 <env_table_ws_get_time_stamp+0x25>
f0107e7e:	68 74 53 13 f0       	push   $0xf0135374
f0107e83:	68 9a 51 13 f0       	push   $0xf013519a
f0107e88:	68 d1 00 00 00       	push   $0xd1
f0107e8d:	68 b0 51 13 f0       	push   $0xf01351b0
f0107e92:	e8 0f 83 ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0107e97:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e9a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e9d:	89 d0                	mov    %edx,%eax
f0107e9f:	01 c0                	add    %eax,%eax
f0107ea1:	01 d0                	add    %edx,%eax
f0107ea3:	c1 e0 03             	shl    $0x3,%eax
f0107ea6:	01 c8                	add    %ecx,%eax
f0107ea8:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107ead:	8b 00                	mov    (%eax),%eax
}
f0107eaf:	c9                   	leave  
f0107eb0:	c3                   	ret    

f0107eb1 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107eb1:	55                   	push   %ebp
f0107eb2:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0107eb4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107eb7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107eba:	89 d0                	mov    %edx,%eax
f0107ebc:	01 c0                	add    %eax,%eax
f0107ebe:	01 d0                	add    %edx,%eax
f0107ec0:	c1 e0 03             	shl    $0x3,%eax
f0107ec3:	01 c8                	add    %ecx,%eax
f0107ec5:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107eca:	8a 00                	mov    (%eax),%al
f0107ecc:	0f b6 c0             	movzbl %al,%eax
}
f0107ecf:	5d                   	pop    %ebp
f0107ed0:	c3                   	ret    

f0107ed1 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0107ed1:	55                   	push   %ebp
f0107ed2:	89 e5                	mov    %esp,%ebp
f0107ed4:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0107ed7:	83 ec 04             	sub    $0x4,%esp
f0107eda:	68 a8 53 13 f0       	push   $0xf01353a8
f0107edf:	68 e5 00 00 00       	push   $0xe5
f0107ee4:	68 b0 51 13 f0       	push   $0xf01351b0
f0107ee9:	e8 b8 82 ff ff       	call   f01001a6 <_panic>

f0107eee <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0107eee:	55                   	push   %ebp
f0107eef:	89 e5                	mov    %esp,%ebp
f0107ef1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0107ef4:	83 ec 04             	sub    $0x4,%esp
f0107ef7:	68 d4 53 13 f0       	push   $0xf01353d4
f0107efc:	68 ec 00 00 00       	push   $0xec
f0107f01:	68 b0 51 13 f0       	push   $0xf01351b0
f0107f06:	e8 9b 82 ff ff       	call   f01001a6 <_panic>

f0107f0b <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0107f0b:	55                   	push   %ebp
f0107f0c:	89 e5                	mov    %esp,%ebp
f0107f0e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0107f11:	83 ec 04             	sub    $0x4,%esp
f0107f14:	68 04 54 13 f0       	push   $0xf0135404
f0107f19:	68 f3 00 00 00       	push   $0xf3
f0107f1e:	68 b0 51 13 f0       	push   $0xf01351b0
f0107f23:	e8 7e 82 ff ff       	call   f01001a6 <_panic>

f0107f28 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0107f28:	55                   	push   %ebp
f0107f29:	89 e5                	mov    %esp,%ebp
f0107f2b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f0107f2e:	83 ec 04             	sub    $0x4,%esp
f0107f31:	68 30 54 13 f0       	push   $0xf0135430
f0107f36:	6a 1c                	push   $0x1c
f0107f38:	68 5e 54 13 f0       	push   $0xf013545e
f0107f3d:	e8 64 82 ff ff       	call   f01001a6 <_panic>

f0107f42 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0107f42:	55                   	push   %ebp
f0107f43:	89 e5                	mov    %esp,%ebp
f0107f45:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f0107f48:	83 ec 04             	sub    $0x4,%esp
f0107f4b:	68 7c 54 13 f0       	push   $0xf013547c
f0107f50:	6a 29                	push   $0x29
f0107f52:	68 5e 54 13 f0       	push   $0xf013545e
f0107f57:	e8 4a 82 ff ff       	call   f01001a6 <_panic>

f0107f5c <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0107f5c:	55                   	push   %ebp
f0107f5d:	89 e5                	mov    %esp,%ebp
f0107f5f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f0107f62:	83 ec 04             	sub    $0x4,%esp
f0107f65:	68 ac 54 13 f0       	push   $0xf01354ac
f0107f6a:	6a 35                	push   $0x35
f0107f6c:	68 5e 54 13 f0       	push   $0xf013545e
f0107f71:	e8 30 82 ff ff       	call   f01001a6 <_panic>

f0107f76 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0107f76:	55                   	push   %ebp
f0107f77:	89 e5                	mov    %esp,%ebp
f0107f79:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0107f7c:	83 ec 04             	sub    $0x4,%esp
f0107f7f:	68 d8 54 13 f0       	push   $0xf01354d8
f0107f84:	6a 41                	push   $0x41
f0107f86:	68 5e 54 13 f0       	push   $0xf013545e
f0107f8b:	e8 16 82 ff ff       	call   f01001a6 <_panic>

f0107f90 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0107f90:	55                   	push   %ebp
f0107f91:	89 e5                	mov    %esp,%ebp
f0107f93:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0107f96:	83 ec 04             	sub    $0x4,%esp
f0107f99:	68 08 55 13 f0       	push   $0xf0135508
f0107f9e:	6a 4c                	push   $0x4c
f0107fa0:	68 5e 54 13 f0       	push   $0xf013545e
f0107fa5:	e8 fc 81 ff ff       	call   f01001a6 <_panic>

f0107faa <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0107faa:	55                   	push   %ebp
f0107fab:	89 e5                	mov    %esp,%ebp
f0107fad:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0107fb0:	83 ec 04             	sub    $0x4,%esp
f0107fb3:	68 40 55 13 f0       	push   $0xf0135540
f0107fb8:	6a 5b                	push   $0x5b
f0107fba:	68 5e 54 13 f0       	push   $0xf013545e
f0107fbf:	e8 e2 81 ff ff       	call   f01001a6 <_panic>

f0107fc4 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0107fc4:	55                   	push   %ebp
f0107fc5:	89 e5                	mov    %esp,%ebp
f0107fc7:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0107fca:	83 ec 04             	sub    $0x4,%esp
f0107fcd:	68 78 55 13 f0       	push   $0xf0135578
f0107fd2:	6a 70                	push   $0x70
f0107fd4:	68 5e 54 13 f0       	push   $0xf013545e
f0107fd9:	e8 c8 81 ff ff       	call   f01001a6 <_panic>

f0107fde <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0107fde:	55                   	push   %ebp
f0107fdf:	89 e5                	mov    %esp,%ebp
f0107fe1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0107fe4:	83 ec 04             	sub    $0x4,%esp
f0107fe7:	68 a8 55 13 f0       	push   $0xf01355a8
f0107fec:	6a 7a                	push   $0x7a
f0107fee:	68 5e 54 13 f0       	push   $0xf013545e
f0107ff3:	e8 ae 81 ff ff       	call   f01001a6 <_panic>

f0107ff8 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0107ff8:	55                   	push   %ebp
f0107ff9:	89 e5                	mov    %esp,%ebp
f0107ffb:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0107ffe:	83 ec 04             	sub    $0x4,%esp
f0108001:	68 d4 55 13 f0       	push   $0xf01355d4
f0108006:	68 88 00 00 00       	push   $0x88
f010800b:	68 5e 54 13 f0       	push   $0xf013545e
f0108010:	e8 91 81 ff ff       	call   f01001a6 <_panic>

f0108015 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108015:	55                   	push   %ebp
f0108016:	89 e5                	mov    %esp,%ebp
f0108018:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f010801b:	83 ec 04             	sub    $0x4,%esp
f010801e:	68 14 56 13 f0       	push   $0xf0135614
f0108023:	68 98 00 00 00       	push   $0x98
f0108028:	68 5e 54 13 f0       	push   $0xf013545e
f010802d:	e8 74 81 ff ff       	call   f01001a6 <_panic>

f0108032 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108032:	55                   	push   %ebp
f0108033:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108035:	8b 45 08             	mov    0x8(%ebp),%eax
f0108038:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f010803e:	29 d0                	sub    %edx,%eax
f0108040:	c1 f8 03             	sar    $0x3,%eax
f0108043:	89 c2                	mov    %eax,%edx
f0108045:	89 d0                	mov    %edx,%eax
f0108047:	c1 e0 02             	shl    $0x2,%eax
f010804a:	01 d0                	add    %edx,%eax
f010804c:	c1 e0 02             	shl    $0x2,%eax
f010804f:	01 d0                	add    %edx,%eax
f0108051:	c1 e0 02             	shl    $0x2,%eax
f0108054:	01 d0                	add    %edx,%eax
f0108056:	89 c1                	mov    %eax,%ecx
f0108058:	c1 e1 08             	shl    $0x8,%ecx
f010805b:	01 c8                	add    %ecx,%eax
f010805d:	89 c1                	mov    %eax,%ecx
f010805f:	c1 e1 10             	shl    $0x10,%ecx
f0108062:	01 c8                	add    %ecx,%eax
f0108064:	01 c0                	add    %eax,%eax
f0108066:	01 d0                	add    %edx,%eax
}
f0108068:	5d                   	pop    %ebp
f0108069:	c3                   	ret    

f010806a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010806a:	55                   	push   %ebp
f010806b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010806d:	ff 75 08             	pushl  0x8(%ebp)
f0108070:	e8 bd ff ff ff       	call   f0108032 <to_frame_number>
f0108075:	83 c4 04             	add    $0x4,%esp
f0108078:	c1 e0 0c             	shl    $0xc,%eax
}
f010807b:	c9                   	leave  
f010807c:	c3                   	ret    

f010807d <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010807d:	55                   	push   %ebp
f010807e:	89 e5                	mov    %esp,%ebp
f0108080:	57                   	push   %edi
f0108081:	56                   	push   %esi
f0108082:	53                   	push   %ebx
f0108083:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108089:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108090:	83 ec 0c             	sub    $0xc,%esp
f0108093:	ff 75 08             	pushl  0x8(%ebp)
f0108096:	e8 c8 22 00 00       	call   f010a363 <get_user_program_info>
f010809b:	83 c4 10             	add    $0x10,%esp
f010809e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f01080a1:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01080a5:	75 0a                	jne    f01080b1 <env_create+0x34>
f01080a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01080ac:	e9 8f 0c 00 00       	jmp    f0108d40 <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01080b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01080b4:	8b 40 08             	mov    0x8(%eax),%eax
f01080b7:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01080ba:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f01080c1:	00 00 00 
	if(allocate_environment(&e) < 0)
f01080c4:	83 ec 0c             	sub    $0xc,%esp
f01080c7:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01080cd:	50                   	push   %eax
f01080ce:	e8 32 10 00 00       	call   f0109105 <allocate_environment>
f01080d3:	83 c4 10             	add    $0x10,%esp
f01080d6:	85 c0                	test   %eax,%eax
f01080d8:	79 0a                	jns    f01080e4 <env_create+0x67>
	{
		return 0;
f01080da:	b8 00 00 00 00       	mov    $0x0,%eax
f01080df:	e9 5c 0c 00 00       	jmp    f0108d40 <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01080e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01080e7:	8b 00                	mov    (%eax),%eax
f01080e9:	83 ec 0c             	sub    $0xc,%esp
f01080ec:	50                   	push   %eax
f01080ed:	e8 a5 7f 02 00       	call   f0130097 <strlen>
f01080f2:	83 c4 10             	add    $0x10,%esp
f01080f5:	83 f8 3f             	cmp    $0x3f,%eax
f01080f8:	7f 20                	jg     f010811a <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01080fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01080fd:	8b 00                	mov    (%eax),%eax
f01080ff:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108105:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010810b:	83 ec 08             	sub    $0x8,%esp
f010810e:	50                   	push   %eax
f010810f:	52                   	push   %edx
f0108110:	e8 d1 7f 02 00       	call   f01300e6 <strcpy>
f0108115:	83 c4 10             	add    $0x10,%esp
f0108118:	eb 20                	jmp    f010813a <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f010811a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010811d:	8b 00                	mov    (%eax),%eax
f010811f:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108125:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010812b:	83 ec 04             	sub    $0x4,%esp
f010812e:	6a 3f                	push   $0x3f
f0108130:	50                   	push   %eax
f0108131:	52                   	push   %edx
f0108132:	e8 dd 7f 02 00       	call   f0130114 <strncpy>
f0108137:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f010813a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0108141:	00 00 00 

		allocate_frame(&p) ;
f0108144:	83 ec 0c             	sub    $0xc,%esp
f0108147:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010814d:	50                   	push   %eax
f010814e:	e8 57 e6 ff ff       	call   f01067aa <allocate_frame>
f0108153:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108156:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010815c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108162:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108168:	83 ec 0c             	sub    $0xc,%esp
f010816b:	50                   	push   %eax
f010816c:	e8 f9 fe ff ff       	call   f010806a <to_physical_address>
f0108171:	83 c4 10             	add    $0x10,%esp
f0108174:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108177:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010817a:	c1 e8 0c             	shr    $0xc,%eax
f010817d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108180:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0108185:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108188:	72 17                	jb     f01081a1 <env_create+0x124>
f010818a:	ff 75 b0             	pushl  -0x50(%ebp)
f010818d:	68 40 56 13 f0       	push   $0xf0135640
f0108192:	68 8d 00 00 00       	push   $0x8d
f0108197:	68 6f 56 13 f0       	push   $0xf013566f
f010819c:	e8 05 80 ff ff       	call   f01001a6 <_panic>
f01081a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01081a4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01081a9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f01081ac:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01081b2:	83 ec 0c             	sub    $0xc,%esp
f01081b5:	50                   	push   %eax
f01081b6:	e8 af fe ff ff       	call   f010806a <to_physical_address>
f01081bb:	83 c4 10             	add    $0x10,%esp
f01081be:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01081c1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081ca:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01081cd:	83 ec 0c             	sub    $0xc,%esp
f01081d0:	6a 02                	push   $0x2
f01081d2:	e8 a2 4d 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f01081d7:	83 c4 10             	add    $0x10,%esp
f01081da:	85 c0                	test   %eax,%eax
f01081dc:	74 21                	je     f01081ff <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01081de:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081e4:	8b 55 10             	mov    0x10(%ebp),%edx
f01081e7:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01081ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081f3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081f6:	2b 55 10             	sub    0x10(%ebp),%edx
f01081f9:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01081ff:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108203:	75 12                	jne    f0108217 <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108205:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010820b:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f0108212:	00 00 00 
f0108215:	eb 0f                	jmp    f0108226 <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108217:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010821d:	8b 55 14             	mov    0x14(%ebp),%edx
f0108220:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108226:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010822c:	83 ec 04             	sub    $0x4,%esp
f010822f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108232:	ff 75 a8             	pushl  -0x58(%ebp)
f0108235:	50                   	push   %eax
f0108236:	e8 ed 16 00 00       	call   f0109928 <initialize_environment>
f010823b:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010823e:	0f 20 d8             	mov    %cr3,%eax
f0108241:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108244:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108247:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f010824a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108250:	8b 40 60             	mov    0x60(%eax),%eax
f0108253:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108259:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010825f:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108262:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108269:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108270:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108276:	8b 40 74             	mov    0x74(%eax),%eax
f0108279:	48                   	dec    %eax
f010827a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f010827d:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f0108284:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108287:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f010828d:	83 ec 08             	sub    $0x8,%esp
f0108290:	ff 75 b8             	pushl  -0x48(%ebp)
f0108293:	50                   	push   %eax
f0108294:	e8 ff 1d 00 00       	call   f010a098 <PROGRAM_SEGMENT_FIRST>
f0108299:	83 c4 0c             	add    $0xc,%esp
f010829c:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01082a2:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f01082a8:	b9 05 00 00 00       	mov    $0x5,%ecx
f01082ad:	89 c7                	mov    %eax,%edi
f01082af:	89 d6                	mov    %edx,%esi
f01082b1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01082b3:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01082b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01082bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01082bf:	8b 40 10             	mov    0x10(%eax),%eax
f01082c2:	83 f8 ff             	cmp    $0xffffffff,%eax
f01082c5:	75 07                	jne    f01082ce <env_create+0x251>
f01082c7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01082ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01082d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01082d4:	e9 24 03 00 00       	jmp    f01085fd <env_create+0x580>
	{
		segment_counter++;
f01082d9:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01082dc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01082e3:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01082e6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01082ec:	83 ec 0c             	sub    $0xc,%esp
f01082ef:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f01082f5:	52                   	push   %edx
f01082f6:	ff 75 dc             	pushl  -0x24(%ebp)
f01082f9:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f01082ff:	52                   	push   %edx
f0108300:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108303:	50                   	push   %eax
f0108304:	e8 f4 0e 00 00       	call   f01091fd <program_segment_alloc_map_copy_workingset>
f0108309:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f010830c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108312:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108315:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108318:	8b 00                	mov    (%eax),%eax
f010831a:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f010831d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108320:	8b 40 0c             	mov    0xc(%eax),%eax
f0108323:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108326:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108329:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010832c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010832f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108334:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108337:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010833e:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108341:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108344:	01 d0                	add    %edx,%eax
f0108346:	48                   	dec    %eax
f0108347:	89 45 80             	mov    %eax,-0x80(%ebp)
f010834a:	8b 45 80             	mov    -0x80(%ebp),%eax
f010834d:	ba 00 00 00 00       	mov    $0x0,%edx
f0108352:	f7 75 84             	divl   -0x7c(%ebp)
f0108355:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108358:	29 d0                	sub    %edx,%eax
f010835a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108360:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108363:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108366:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f010836c:	a1 e0 74 6e f0       	mov    0xf06e74e0,%eax
f0108371:	83 ec 04             	sub    $0x4,%esp
f0108374:	68 00 10 00 00       	push   $0x1000
f0108379:	6a 00                	push   $0x0
f010837b:	50                   	push   %eax
f010837c:	e8 04 7f 02 00       	call   f0130285 <memset>
f0108381:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108384:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108387:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f010838a:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f0108390:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108396:	01 d0                	add    %edx,%eax
f0108398:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010839b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010839e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01083a1:	eb 13                	jmp    f01083b6 <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f01083a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01083a6:	8a 10                	mov    (%eax),%dl
f01083a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01083ab:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01083ad:	ff 45 cc             	incl   -0x34(%ebp)
f01083b0:	ff 45 d4             	incl   -0x2c(%ebp)
f01083b3:	ff 45 d0             	incl   -0x30(%ebp)
f01083b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01083b9:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f01083bf:	72 e2                	jb     f01083a3 <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01083c1:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f01083c7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01083cd:	83 ec 04             	sub    $0x4,%esp
f01083d0:	52                   	push   %edx
f01083d1:	ff 75 88             	pushl  -0x78(%ebp)
f01083d4:	50                   	push   %eax
f01083d5:	e8 42 b1 ff ff       	call   f010351c <pf_add_env_page>
f01083da:	83 c4 10             	add    $0x10,%esp
f01083dd:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01083e0:	75 17                	jne    f01083f9 <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01083e2:	83 ec 04             	sub    $0x4,%esp
f01083e5:	68 8c 56 13 f0       	push   $0xf013568c
f01083ea:	68 e1 00 00 00       	push   $0xe1
f01083ef:	68 6f 56 13 f0       	push   $0xf013566f
f01083f4:	e8 ad 7d ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01083f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01083fc:	8b 50 04             	mov    0x4(%eax),%edx
f01083ff:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108402:	01 d0                	add    %edx,%eax
f0108404:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010840a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0108410:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108415:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010841b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010841e:	8b 50 04             	mov    0x4(%eax),%edx
f0108421:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108424:	01 d0                	add    %edx,%eax
f0108426:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010842c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108432:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108435:	eb 43                	jmp    f010847a <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108437:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010843a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108440:	83 ec 04             	sub    $0x4,%esp
f0108443:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108446:	52                   	push   %edx
f0108447:	50                   	push   %eax
f0108448:	e8 cf b0 ff ff       	call   f010351c <pf_add_env_page>
f010844d:	83 c4 10             	add    $0x10,%esp
f0108450:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108453:	75 17                	jne    f010846c <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108455:	83 ec 04             	sub    $0x4,%esp
f0108458:	68 8c 56 13 f0       	push   $0xf013568c
f010845d:	68 ee 00 00 00       	push   $0xee
f0108462:	68 6f 56 13 f0       	push   $0xf013566f
f0108467:	e8 3a 7d ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010846c:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108473:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f010847a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010847d:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0108483:	72 b2                	jb     f0108437 <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108485:	a1 e0 74 6e f0       	mov    0xf06e74e0,%eax
f010848a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010848d:	83 ec 04             	sub    $0x4,%esp
f0108490:	68 00 10 00 00       	push   $0x1000
f0108495:	6a 00                	push   $0x0
f0108497:	ff 75 d0             	pushl  -0x30(%ebp)
f010849a:	e8 e6 7d 02 00       	call   f0130285 <memset>
f010849f:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01084a2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01084a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01084ab:	eb 13                	jmp    f01084c0 <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f01084ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01084b0:	8a 10                	mov    (%eax),%dl
f01084b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01084b5:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01084b7:	ff 45 cc             	incl   -0x34(%ebp)
f01084ba:	ff 45 d4             	incl   -0x2c(%ebp)
f01084bd:	ff 45 d0             	incl   -0x30(%ebp)
f01084c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01084c3:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f01084c9:	72 e2                	jb     f01084ad <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01084cb:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f01084d1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084d7:	83 ec 04             	sub    $0x4,%esp
f01084da:	52                   	push   %edx
f01084db:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01084e1:	50                   	push   %eax
f01084e2:	e8 35 b0 ff ff       	call   f010351c <pf_add_env_page>
f01084e7:	83 c4 10             	add    $0x10,%esp
f01084ea:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01084ed:	75 17                	jne    f0108506 <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01084ef:	83 ec 04             	sub    $0x4,%esp
f01084f2:	68 8c 56 13 f0       	push   $0xf013568c
f01084f7:	68 fd 00 00 00       	push   $0xfd
f01084fc:	68 6f 56 13 f0       	push   $0xf013566f
f0108501:	e8 a0 7c ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0108506:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010850d:	10 00 00 
f0108510:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108513:	8b 50 04             	mov    0x4(%eax),%edx
f0108516:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108519:	01 c2                	add    %eax,%edx
f010851b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0108521:	01 d0                	add    %edx,%eax
f0108523:	48                   	dec    %eax
f0108524:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010852a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108530:	ba 00 00 00 00       	mov    $0x0,%edx
f0108535:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010853b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108541:	29 d0                	sub    %edx,%eax
f0108543:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0108546:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108549:	8b 50 08             	mov    0x8(%eax),%edx
f010854c:	8b 45 90             	mov    -0x70(%ebp),%eax
f010854f:	01 d0                	add    %edx,%eax
f0108551:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0108554:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010855a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108561:	eb 41                	jmp    f01085a4 <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0108563:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108569:	83 ec 04             	sub    $0x4,%esp
f010856c:	6a 01                	push   $0x1
f010856e:	ff 75 c8             	pushl  -0x38(%ebp)
f0108571:	50                   	push   %eax
f0108572:	e8 74 ae ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108577:	83 c4 10             	add    $0x10,%esp
f010857a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010857d:	75 17                	jne    f0108596 <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010857f:	83 ec 04             	sub    $0x4,%esp
f0108582:	68 8c 56 13 f0       	push   $0xf013568c
f0108587:	68 0a 01 00 00       	push   $0x10a
f010858c:	68 6f 56 13 f0       	push   $0xf013566f
f0108591:	e8 10 7c ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108596:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010859d:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01085a4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01085ab:	10 00 00 
f01085ae:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f01085b4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01085ba:	01 d0                	add    %edx,%eax
f01085bc:	48                   	dec    %eax
f01085bd:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01085c3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01085c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01085ce:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01085d4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01085da:	29 d0                	sub    %edx,%eax
f01085dc:	89 c2                	mov    %eax,%edx
f01085de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01085e1:	39 c2                	cmp    %eax,%edx
f01085e3:	0f 87 7a ff ff ff    	ja     f0108563 <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01085e9:	83 ec 08             	sub    $0x8,%esp
f01085ec:	ff 75 b8             	pushl  -0x48(%ebp)
f01085ef:	ff 75 e4             	pushl  -0x1c(%ebp)
f01085f2:	e8 96 19 00 00       	call   f0109f8d <PROGRAM_SEGMENT_NEXT>
f01085f7:	83 c4 10             	add    $0x10,%esp
f01085fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01085fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108601:	0f 85 d2 fc ff ff    	jne    f01082d9 <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0108607:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010860e:	e9 9c 00 00 00       	jmp    f01086af <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0108613:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108619:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010861c:	89 d0                	mov    %edx,%eax
f010861e:	01 c0                	add    %eax,%eax
f0108620:	01 d0                	add    %edx,%eax
f0108622:	c1 e0 03             	shl    $0x3,%eax
f0108625:	01 c8                	add    %ecx,%eax
f0108627:	83 c0 7c             	add    $0x7c,%eax
f010862a:	8a 00                	mov    (%eax),%al
f010862c:	84 c0                	test   %al,%al
f010862e:	75 7c                	jne    f01086ac <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108630:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108636:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108639:	89 d0                	mov    %edx,%eax
f010863b:	01 c0                	add    %eax,%eax
f010863d:	01 d0                	add    %edx,%eax
f010863f:	c1 e0 03             	shl    $0x3,%eax
f0108642:	01 c8                	add    %ecx,%eax
f0108644:	83 c0 78             	add    $0x78,%eax
f0108647:	8b 00                	mov    (%eax),%eax
f0108649:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010864f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108655:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108658:	83 ec 04             	sub    $0x4,%esp
f010865b:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108661:	52                   	push   %edx
f0108662:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108668:	50                   	push   %eax
f0108669:	e8 fb e2 ff ff       	call   f0106969 <get_page_table>
f010866e:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108671:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108677:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010867d:	c1 ea 0c             	shr    $0xc,%edx
f0108680:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108686:	c1 e2 02             	shl    $0x2,%edx
f0108689:	01 d0                	add    %edx,%eax
f010868b:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0108691:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108697:	c1 e9 0c             	shr    $0xc,%ecx
f010869a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01086a0:	c1 e1 02             	shl    $0x2,%ecx
f01086a3:	01 ca                	add    %ecx,%edx
f01086a5:	8b 12                	mov    (%edx),%edx
f01086a7:	83 e2 bf             	and    $0xffffffbf,%edx
f01086aa:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01086ac:	ff 45 c4             	incl   -0x3c(%ebp)
f01086af:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086b5:	8b 50 74             	mov    0x74(%eax),%edx
f01086b8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01086bb:	39 c2                	cmp    %eax,%edx
f01086bd:	0f 87 50 ff ff ff    	ja     f0108613 <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01086c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01086c6:	8b 50 08             	mov    0x8(%eax),%edx
f01086c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086cf:	83 ec 08             	sub    $0x8,%esp
f01086d2:	52                   	push   %edx
f01086d3:	50                   	push   %eax
f01086d4:	e8 3a 18 00 00       	call   f0109f13 <set_environment_entry_point>
f01086d9:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01086dc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086e2:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f01086e9:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01086ec:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01086f3:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01086f6:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01086fd:	e9 9a 05 00 00       	jmp    f0108c9c <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f0108702:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f0108709:	00 00 00 
		allocate_frame(&pp);
f010870c:	83 ec 0c             	sub    $0xc,%esp
f010870f:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0108715:	50                   	push   %eax
f0108716:	e8 8f e0 ff ff       	call   f01067aa <allocate_frame>
f010871b:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010871e:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108724:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010872a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010872d:	6a 06                	push   $0x6
f010872f:	ff 75 c0             	pushl  -0x40(%ebp)
f0108732:	52                   	push   %edx
f0108733:	50                   	push   %eax
f0108734:	e8 bf e5 ff ff       	call   f0106cf8 <loadtime_map_frame>
f0108739:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010873c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010873f:	83 ec 04             	sub    $0x4,%esp
f0108742:	68 00 10 00 00       	push   $0x1000
f0108747:	6a 00                	push   $0x0
f0108749:	50                   	push   %eax
f010874a:	e8 36 7b 02 00       	call   f0130285 <memset>
f010874f:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108752:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108758:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010875e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108764:	83 ec 04             	sub    $0x4,%esp
f0108767:	ff 75 c0             	pushl  -0x40(%ebp)
f010876a:	52                   	push   %edx
f010876b:	50                   	push   %eax
f010876c:	e8 1d ef ff ff       	call   f010768e <env_page_ws_set_entry>
f0108771:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108774:	83 ec 0c             	sub    $0xc,%esp
f0108777:	6a 02                	push   $0x2
f0108779:	e8 fb 47 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f010877e:	83 c4 10             	add    $0x10,%esp
f0108781:	85 c0                	test   %eax,%eax
f0108783:	0f 84 b2 04 00 00    	je     f0108c3b <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108789:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010878f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108795:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010879b:	89 d0                	mov    %edx,%eax
f010879d:	01 c0                	add    %eax,%eax
f010879f:	01 d0                	add    %edx,%eax
f01087a1:	c1 e0 03             	shl    $0x3,%eax
f01087a4:	83 c0 70             	add    $0x70,%eax
f01087a7:	01 c8                	add    %ecx,%eax
f01087a9:	83 c0 08             	add    $0x8,%eax
f01087ac:	85 c0                	test   %eax,%eax
f01087ae:	75 17                	jne    f01087c7 <env_create+0x74a>
f01087b0:	83 ec 04             	sub    $0x4,%esp
f01087b3:	68 d1 56 13 f0       	push   $0xf01356d1
f01087b8:	68 41 01 00 00       	push   $0x141
f01087bd:	68 6f 56 13 f0       	push   $0xf013566f
f01087c2:	e8 df 79 ff ff       	call   f01001a6 <_panic>
f01087c7:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01087cd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087d3:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01087d9:	89 d0                	mov    %edx,%eax
f01087db:	01 c0                	add    %eax,%eax
f01087dd:	01 d0                	add    %edx,%eax
f01087df:	c1 e0 03             	shl    $0x3,%eax
f01087e2:	01 c8                	add    %ecx,%eax
f01087e4:	05 88 00 00 00       	add    $0x88,%eax
f01087e9:	8b 00                	mov    (%eax),%eax
f01087eb:	85 c0                	test   %eax,%eax
f01087ed:	74 4d                	je     f010883c <env_create+0x7bf>
f01087ef:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01087f5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087fb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108801:	89 d0                	mov    %edx,%eax
f0108803:	01 c0                	add    %eax,%eax
f0108805:	01 d0                	add    %edx,%eax
f0108807:	c1 e0 03             	shl    $0x3,%eax
f010880a:	01 c8                	add    %ecx,%eax
f010880c:	05 88 00 00 00       	add    $0x88,%eax
f0108811:	8b 10                	mov    (%eax),%edx
f0108813:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108819:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010881f:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108825:	89 c8                	mov    %ecx,%eax
f0108827:	01 c0                	add    %eax,%eax
f0108829:	01 c8                	add    %ecx,%eax
f010882b:	c1 e0 03             	shl    $0x3,%eax
f010882e:	01 d8                	add    %ebx,%eax
f0108830:	05 8c 00 00 00       	add    $0x8c,%eax
f0108835:	8b 00                	mov    (%eax),%eax
f0108837:	89 42 14             	mov    %eax,0x14(%edx)
f010883a:	eb 30                	jmp    f010886c <env_create+0x7ef>
f010883c:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108842:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108848:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010884e:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108854:	89 c8                	mov    %ecx,%eax
f0108856:	01 c0                	add    %eax,%eax
f0108858:	01 c8                	add    %ecx,%eax
f010885a:	c1 e0 03             	shl    $0x3,%eax
f010885d:	01 d8                	add    %ebx,%eax
f010885f:	05 8c 00 00 00       	add    $0x8c,%eax
f0108864:	8b 00                	mov    (%eax),%eax
f0108866:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f010886c:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108872:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108878:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010887e:	89 d0                	mov    %edx,%eax
f0108880:	01 c0                	add    %eax,%eax
f0108882:	01 d0                	add    %edx,%eax
f0108884:	c1 e0 03             	shl    $0x3,%eax
f0108887:	01 c8                	add    %ecx,%eax
f0108889:	05 8c 00 00 00       	add    $0x8c,%eax
f010888e:	8b 00                	mov    (%eax),%eax
f0108890:	85 c0                	test   %eax,%eax
f0108892:	74 4d                	je     f01088e1 <env_create+0x864>
f0108894:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010889a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088a0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01088a6:	89 d0                	mov    %edx,%eax
f01088a8:	01 c0                	add    %eax,%eax
f01088aa:	01 d0                	add    %edx,%eax
f01088ac:	c1 e0 03             	shl    $0x3,%eax
f01088af:	01 c8                	add    %ecx,%eax
f01088b1:	05 8c 00 00 00       	add    $0x8c,%eax
f01088b6:	8b 10                	mov    (%eax),%edx
f01088b8:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01088be:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088c4:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01088ca:	89 c8                	mov    %ecx,%eax
f01088cc:	01 c0                	add    %eax,%eax
f01088ce:	01 c8                	add    %ecx,%eax
f01088d0:	c1 e0 03             	shl    $0x3,%eax
f01088d3:	01 d8                	add    %ebx,%eax
f01088d5:	05 88 00 00 00       	add    $0x88,%eax
f01088da:	8b 00                	mov    (%eax),%eax
f01088dc:	89 42 10             	mov    %eax,0x10(%edx)
f01088df:	eb 30                	jmp    f0108911 <env_create+0x894>
f01088e1:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01088e7:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01088ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088f3:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01088f9:	89 c8                	mov    %ecx,%eax
f01088fb:	01 c0                	add    %eax,%eax
f01088fd:	01 c8                	add    %ecx,%eax
f01088ff:	c1 e0 03             	shl    $0x3,%eax
f0108902:	01 d8                	add    %ebx,%eax
f0108904:	05 88 00 00 00       	add    $0x88,%eax
f0108909:	8b 00                	mov    (%eax),%eax
f010890b:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f0108911:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108917:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010891d:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108923:	89 d0                	mov    %edx,%eax
f0108925:	01 c0                	add    %eax,%eax
f0108927:	01 d0                	add    %edx,%eax
f0108929:	c1 e0 03             	shl    $0x3,%eax
f010892c:	01 c8                	add    %ecx,%eax
f010892e:	05 88 00 00 00       	add    $0x88,%eax
f0108933:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108939:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010893f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108945:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010894b:	89 d0                	mov    %edx,%eax
f010894d:	01 c0                	add    %eax,%eax
f010894f:	01 d0                	add    %edx,%eax
f0108951:	c1 e0 03             	shl    $0x3,%eax
f0108954:	01 c8                	add    %ecx,%eax
f0108956:	05 8c 00 00 00       	add    $0x8c,%eax
f010895b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108961:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108967:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f010896d:	4a                   	dec    %edx
f010896e:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0108974:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010897a:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108980:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108986:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f010898c:	39 c2                	cmp    %eax,%edx
f010898e:	0f 83 56 01 00 00    	jae    f0108aea <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108994:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010899a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089a0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01089a6:	89 d0                	mov    %edx,%eax
f01089a8:	01 c0                	add    %eax,%eax
f01089aa:	01 d0                	add    %edx,%eax
f01089ac:	c1 e0 03             	shl    $0x3,%eax
f01089af:	83 c0 70             	add    $0x70,%eax
f01089b2:	01 c8                	add    %ecx,%eax
f01089b4:	83 c0 08             	add    $0x8,%eax
f01089b7:	85 c0                	test   %eax,%eax
f01089b9:	75 17                	jne    f01089d2 <env_create+0x955>
f01089bb:	83 ec 04             	sub    $0x4,%esp
f01089be:	68 f0 56 13 f0       	push   $0xf01356f0
f01089c3:	68 46 01 00 00       	push   $0x146
f01089c8:	68 6f 56 13 f0       	push   $0xf013566f
f01089cd:	e8 d4 77 ff ff       	call   f01001a6 <_panic>
f01089d2:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01089d8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089de:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01089e4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089ea:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f01089f0:	89 d0                	mov    %edx,%eax
f01089f2:	01 c0                	add    %eax,%eax
f01089f4:	01 d0                	add    %edx,%eax
f01089f6:	c1 e0 03             	shl    $0x3,%eax
f01089f9:	01 c8                	add    %ecx,%eax
f01089fb:	05 88 00 00 00       	add    $0x88,%eax
f0108a00:	89 18                	mov    %ebx,(%eax)
f0108a02:	89 d0                	mov    %edx,%eax
f0108a04:	01 c0                	add    %eax,%eax
f0108a06:	01 d0                	add    %edx,%eax
f0108a08:	c1 e0 03             	shl    $0x3,%eax
f0108a0b:	01 c8                	add    %ecx,%eax
f0108a0d:	05 88 00 00 00       	add    $0x88,%eax
f0108a12:	8b 00                	mov    (%eax),%eax
f0108a14:	85 c0                	test   %eax,%eax
f0108a16:	74 34                	je     f0108a4c <env_create+0x9cf>
f0108a18:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a1e:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0108a24:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108a2a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a30:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108a36:	89 c8                	mov    %ecx,%eax
f0108a38:	01 c0                	add    %eax,%eax
f0108a3a:	01 c8                	add    %ecx,%eax
f0108a3c:	c1 e0 03             	shl    $0x3,%eax
f0108a3f:	83 c0 70             	add    $0x70,%eax
f0108a42:	01 d8                	add    %ebx,%eax
f0108a44:	83 c0 08             	add    $0x8,%eax
f0108a47:	89 42 14             	mov    %eax,0x14(%edx)
f0108a4a:	eb 2f                	jmp    f0108a7b <env_create+0x9fe>
f0108a4c:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108a52:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108a58:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a5e:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108a64:	89 c8                	mov    %ecx,%eax
f0108a66:	01 c0                	add    %eax,%eax
f0108a68:	01 c8                	add    %ecx,%eax
f0108a6a:	c1 e0 03             	shl    $0x3,%eax
f0108a6d:	83 c0 70             	add    $0x70,%eax
f0108a70:	01 d8                	add    %ebx,%eax
f0108a72:	83 c0 08             	add    $0x8,%eax
f0108a75:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f0108a7b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108a81:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108a87:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a8d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108a93:	89 c8                	mov    %ecx,%eax
f0108a95:	01 c0                	add    %eax,%eax
f0108a97:	01 c8                	add    %ecx,%eax
f0108a99:	c1 e0 03             	shl    $0x3,%eax
f0108a9c:	83 c0 70             	add    $0x70,%eax
f0108a9f:	01 d8                	add    %ebx,%eax
f0108aa1:	83 c0 08             	add    $0x8,%eax
f0108aa4:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f0108aaa:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108ab0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ab6:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108abc:	89 d0                	mov    %edx,%eax
f0108abe:	01 c0                	add    %eax,%eax
f0108ac0:	01 d0                	add    %edx,%eax
f0108ac2:	c1 e0 03             	shl    $0x3,%eax
f0108ac5:	01 c8                	add    %ecx,%eax
f0108ac7:	05 8c 00 00 00       	add    $0x8c,%eax
f0108acc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108ad2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ad8:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108ade:	42                   	inc    %edx
f0108adf:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0108ae5:	e9 51 01 00 00       	jmp    f0108c3b <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108aea:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108af0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108af6:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108afc:	89 d0                	mov    %edx,%eax
f0108afe:	01 c0                	add    %eax,%eax
f0108b00:	01 d0                	add    %edx,%eax
f0108b02:	c1 e0 03             	shl    $0x3,%eax
f0108b05:	83 c0 70             	add    $0x70,%eax
f0108b08:	01 c8                	add    %ecx,%eax
f0108b0a:	83 c0 08             	add    $0x8,%eax
f0108b0d:	85 c0                	test   %eax,%eax
f0108b0f:	75 17                	jne    f0108b28 <env_create+0xaab>
f0108b11:	83 ec 04             	sub    $0x4,%esp
f0108b14:	68 f0 56 13 f0       	push   $0xf01356f0
f0108b19:	68 4a 01 00 00       	push   $0x14a
f0108b1e:	68 6f 56 13 f0       	push   $0xf013566f
f0108b23:	e8 7e 76 ff ff       	call   f01001a6 <_panic>
f0108b28:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108b2e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b34:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b3a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b40:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f0108b46:	89 d0                	mov    %edx,%eax
f0108b48:	01 c0                	add    %eax,%eax
f0108b4a:	01 d0                	add    %edx,%eax
f0108b4c:	c1 e0 03             	shl    $0x3,%eax
f0108b4f:	01 c8                	add    %ecx,%eax
f0108b51:	05 88 00 00 00       	add    $0x88,%eax
f0108b56:	89 18                	mov    %ebx,(%eax)
f0108b58:	89 d0                	mov    %edx,%eax
f0108b5a:	01 c0                	add    %eax,%eax
f0108b5c:	01 d0                	add    %edx,%eax
f0108b5e:	c1 e0 03             	shl    $0x3,%eax
f0108b61:	01 c8                	add    %ecx,%eax
f0108b63:	05 88 00 00 00       	add    $0x88,%eax
f0108b68:	8b 00                	mov    (%eax),%eax
f0108b6a:	85 c0                	test   %eax,%eax
f0108b6c:	74 34                	je     f0108ba2 <env_create+0xb25>
f0108b6e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b74:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0108b7a:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b80:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b86:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b8c:	89 c8                	mov    %ecx,%eax
f0108b8e:	01 c0                	add    %eax,%eax
f0108b90:	01 c8                	add    %ecx,%eax
f0108b92:	c1 e0 03             	shl    $0x3,%eax
f0108b95:	83 c0 70             	add    $0x70,%eax
f0108b98:	01 d8                	add    %ebx,%eax
f0108b9a:	83 c0 08             	add    $0x8,%eax
f0108b9d:	89 42 14             	mov    %eax,0x14(%edx)
f0108ba0:	eb 2f                	jmp    f0108bd1 <env_create+0xb54>
f0108ba2:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108ba8:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108bae:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bb4:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108bba:	89 c8                	mov    %ecx,%eax
f0108bbc:	01 c0                	add    %eax,%eax
f0108bbe:	01 c8                	add    %ecx,%eax
f0108bc0:	c1 e0 03             	shl    $0x3,%eax
f0108bc3:	83 c0 70             	add    $0x70,%eax
f0108bc6:	01 d8                	add    %ebx,%eax
f0108bc8:	83 c0 08             	add    $0x8,%eax
f0108bcb:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f0108bd1:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108bd7:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108bdd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108be3:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108be9:	89 c8                	mov    %ecx,%eax
f0108beb:	01 c0                	add    %eax,%eax
f0108bed:	01 c8                	add    %ecx,%eax
f0108bef:	c1 e0 03             	shl    $0x3,%eax
f0108bf2:	83 c0 70             	add    $0x70,%eax
f0108bf5:	01 d8                	add    %ebx,%eax
f0108bf7:	83 c0 08             	add    $0x8,%eax
f0108bfa:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f0108c00:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c06:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c0c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c12:	89 d0                	mov    %edx,%eax
f0108c14:	01 c0                	add    %eax,%eax
f0108c16:	01 d0                	add    %edx,%eax
f0108c18:	c1 e0 03             	shl    $0x3,%eax
f0108c1b:	01 c8                	add    %ecx,%eax
f0108c1d:	05 8c 00 00 00       	add    $0x8c,%eax
f0108c22:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c28:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c2e:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f0108c34:	42                   	inc    %edx
f0108c35:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f0108c3b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c41:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c47:	42                   	inc    %edx
f0108c48:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0108c4e:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c54:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c5a:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108c60:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108c66:	8b 5a 74             	mov    0x74(%edx),%ebx
f0108c69:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c6e:	f7 f3                	div    %ebx
f0108c70:	89 d0                	mov    %edx,%eax
f0108c72:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0108c78:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c7e:	83 ec 04             	sub    $0x4,%esp
f0108c81:	6a 01                	push   $0x1
f0108c83:	ff 75 c0             	pushl  -0x40(%ebp)
f0108c86:	50                   	push   %eax
f0108c87:	e8 5f a7 ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108c8c:	83 c4 10             	add    $0x10,%esp
f0108c8f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108c95:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0108c9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108c9f:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0108ca5:	0f 83 57 fa ff ff    	jae    f0108702 <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108cab:	83 ec 0c             	sub    $0xc,%esp
f0108cae:	6a 02                	push   $0x2
f0108cb0:	e8 c4 42 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f0108cb5:	83 c4 10             	add    $0x10,%esp
f0108cb8:	85 c0                	test   %eax,%eax
f0108cba:	74 72                	je     f0108d2e <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f0108cbc:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0108cc3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cc9:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0108ccf:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108cd2:	eb 2b                	jmp    f0108cff <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0108cd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108cd7:	8b 10                	mov    (%eax),%edx
f0108cd9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cdf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108ce2:	6a 01                	push   $0x1
f0108ce4:	6a 00                	push   $0x0
f0108ce6:	52                   	push   %edx
f0108ce7:	50                   	push   %eax
f0108ce8:	e8 bf e7 ff ff       	call   f01074ac <pt_set_page_permissions>
f0108ced:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0108cf0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cf6:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0108cfc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108cff:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d05:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108d09:	74 08                	je     f0108d13 <env_create+0xc96>
f0108d0b:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0108d0e:	8b 52 10             	mov    0x10(%edx),%edx
f0108d11:	eb 05                	jmp    f0108d18 <env_create+0xc9b>
f0108d13:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d18:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f0108d1e:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0108d24:	85 c0                	test   %eax,%eax
f0108d26:	75 ac                	jne    f0108cd4 <env_create+0xc57>
f0108d28:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108d2c:	75 a6                	jne    f0108cd4 <env_create+0xc57>
f0108d2e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108d31:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0108d34:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0108d37:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0108d3a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f0108d40:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0108d43:	5b                   	pop    %ebx
f0108d44:	5e                   	pop    %esi
f0108d45:	5f                   	pop    %edi
f0108d46:	5d                   	pop    %ebp
f0108d47:	c3                   	ret    

f0108d48 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0108d48:	55                   	push   %ebp
f0108d49:	89 e5                	mov    %esp,%ebp
f0108d4b:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0108d4e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d53:	3b 45 08             	cmp    0x8(%ebp),%eax
f0108d56:	74 25                	je     f0108d7d <env_run+0x35>
	{
		curenv = e ;
f0108d58:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d5b:	a3 34 77 65 f0       	mov    %eax,0xf0657734
		curenv->env_runs++ ;
f0108d60:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d65:	8b 50 58             	mov    0x58(%eax),%edx
f0108d68:	42                   	inc    %edx
f0108d69:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0108d6c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d71:	8b 40 60             	mov    0x60(%eax),%eax
f0108d74:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d7a:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0108d7d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d82:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0108d89:	e8 4b b3 ff ff       	call   f01040d9 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0108d8e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d93:	83 ec 0c             	sub    $0xc,%esp
f0108d96:	50                   	push   %eax
f0108d97:	e8 11 01 00 00       	call   f0108ead <env_pop_tf>

f0108d9c <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0108d9c:	55                   	push   %ebp
f0108d9d:	89 e5                	mov    %esp,%ebp
f0108d9f:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0108da2:	83 ec 04             	sub    $0x4,%esp
f0108da5:	68 14 57 13 f0       	push   $0xf0135714
f0108daa:	68 9d 01 00 00       	push   $0x19d
f0108daf:	68 6f 56 13 f0       	push   $0xf013566f
f0108db4:	e8 ed 73 ff ff       	call   f01001a6 <_panic>

f0108db9 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0108db9:	55                   	push   %ebp
f0108dba:	89 e5                	mov    %esp,%ebp
f0108dbc:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0108dbf:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108dc4:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108dc7:	83 ec 0c             	sub    $0xc,%esp
f0108dca:	50                   	push   %eax
f0108dcb:	e8 45 c3 ff ff       	call   f0105115 <sched_exit_env>
f0108dd0:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0108dd3:	e8 13 b8 ff ff       	call   f01045eb <fos_scheduler>

f0108dd8 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0108dd8:	55                   	push   %ebp
f0108dd9:	89 e5                	mov    %esp,%ebp
f0108ddb:	53                   	push   %ebx
f0108ddc:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0108ddf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108de3:	75 15                	jne    f0108dfa <envid2env+0x22>
		*env_store = curenv;
f0108de5:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f0108deb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108dee:	89 10                	mov    %edx,(%eax)
		return 0;
f0108df0:	b8 00 00 00 00       	mov    $0x0,%eax
f0108df5:	e9 ae 00 00 00       	jmp    f0108ea8 <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0108dfa:	8b 1d 30 77 65 f0    	mov    0xf0657730,%ebx
f0108e00:	83 ec 0c             	sub    $0xc,%esp
f0108e03:	6a 08                	push   $0x8
f0108e05:	e8 18 60 02 00       	call   f012ee22 <nearest_pow2_ceil>
f0108e0a:	83 c4 10             	add    $0x10,%esp
f0108e0d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108e10:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e13:	21 c2                	and    %eax,%edx
f0108e15:	89 d0                	mov    %edx,%eax
f0108e17:	01 c0                	add    %eax,%eax
f0108e19:	01 d0                	add    %edx,%eax
f0108e1b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0108e22:	01 c8                	add    %ecx,%eax
f0108e24:	c1 e0 02             	shl    $0x2,%eax
f0108e27:	01 d0                	add    %edx,%eax
f0108e29:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0108e30:	01 c8                	add    %ecx,%eax
f0108e32:	c1 e0 02             	shl    $0x2,%eax
f0108e35:	01 d0                	add    %edx,%eax
f0108e37:	c1 e0 02             	shl    $0x2,%eax
f0108e3a:	01 d0                	add    %edx,%eax
f0108e3c:	c1 e0 03             	shl    $0x3,%eax
f0108e3f:	01 d8                	add    %ebx,%eax
f0108e41:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0108e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e47:	8b 40 54             	mov    0x54(%eax),%eax
f0108e4a:	85 c0                	test   %eax,%eax
f0108e4c:	74 0b                	je     f0108e59 <envid2env+0x81>
f0108e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e51:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108e54:	3b 45 08             	cmp    0x8(%ebp),%eax
f0108e57:	74 10                	je     f0108e69 <envid2env+0x91>
		*env_store = 0;
f0108e59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0108e62:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0108e67:	eb 3f                	jmp    f0108ea8 <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0108e69:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0108e6d:	74 2c                	je     f0108e9b <envid2env+0xc3>
f0108e6f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108e74:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0108e77:	74 22                	je     f0108e9b <envid2env+0xc3>
f0108e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e7c:	8b 50 50             	mov    0x50(%eax),%edx
f0108e7f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108e84:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108e87:	39 c2                	cmp    %eax,%edx
f0108e89:	74 10                	je     f0108e9b <envid2env+0xc3>
		*env_store = 0;
f0108e8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0108e94:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0108e99:	eb 0d                	jmp    f0108ea8 <envid2env+0xd0>
	}

	*env_store = e;
f0108e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108ea1:	89 10                	mov    %edx,(%eax)
	return 0;
f0108ea3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108ea8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108eab:	c9                   	leave  
f0108eac:	c3                   	ret    

f0108ead <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0108ead:	55                   	push   %ebp
f0108eae:	89 e5                	mov    %esp,%ebp
f0108eb0:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0108eb3:	8b 65 08             	mov    0x8(%ebp),%esp
f0108eb6:	61                   	popa   
f0108eb7:	07                   	pop    %es
f0108eb8:	1f                   	pop    %ds
f0108eb9:	83 c4 08             	add    $0x8,%esp
f0108ebc:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0108ebd:	83 ec 04             	sub    $0x4,%esp
f0108ec0:	68 3b 57 13 f0       	push   $0xf013573b
f0108ec5:	68 fc 01 00 00       	push   $0x1fc
f0108eca:	68 6f 56 13 f0       	push   $0xf013566f
f0108ecf:	e8 d2 72 ff ff       	call   f01001a6 <_panic>

f0108ed4 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0108ed4:	55                   	push   %ebp
f0108ed5:	89 e5                	mov    %esp,%ebp
f0108ed7:	56                   	push   %esi
f0108ed8:	53                   	push   %ebx
f0108ed9:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f0108edc:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0108ee3:	e9 0b 02 00 00       	jmp    f01090f3 <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f0108ee8:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108eee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108ef1:	89 d0                	mov    %edx,%eax
f0108ef3:	01 c0                	add    %eax,%eax
f0108ef5:	01 d0                	add    %edx,%eax
f0108ef7:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108efe:	01 d8                	add    %ebx,%eax
f0108f00:	c1 e0 02             	shl    $0x2,%eax
f0108f03:	01 d0                	add    %edx,%eax
f0108f05:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f0c:	01 d8                	add    %ebx,%eax
f0108f0e:	c1 e0 02             	shl    $0x2,%eax
f0108f11:	01 d0                	add    %edx,%eax
f0108f13:	c1 e0 02             	shl    $0x2,%eax
f0108f16:	01 d0                	add    %edx,%eax
f0108f18:	c1 e0 03             	shl    $0x3,%eax
f0108f1b:	01 c8                	add    %ecx,%eax
f0108f1d:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0108f24:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108f2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f2d:	89 d0                	mov    %edx,%eax
f0108f2f:	01 c0                	add    %eax,%eax
f0108f31:	01 d0                	add    %edx,%eax
f0108f33:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f3a:	01 d8                	add    %ebx,%eax
f0108f3c:	c1 e0 02             	shl    $0x2,%eax
f0108f3f:	01 d0                	add    %edx,%eax
f0108f41:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f48:	01 d8                	add    %ebx,%eax
f0108f4a:	c1 e0 02             	shl    $0x2,%eax
f0108f4d:	01 d0                	add    %edx,%eax
f0108f4f:	c1 e0 02             	shl    $0x2,%eax
f0108f52:	01 d0                	add    %edx,%eax
f0108f54:	c1 e0 03             	shl    $0x3,%eax
f0108f57:	01 c8                	add    %ecx,%eax
f0108f59:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0108f60:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108f66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f69:	89 d0                	mov    %edx,%eax
f0108f6b:	01 c0                	add    %eax,%eax
f0108f6d:	01 d0                	add    %edx,%eax
f0108f6f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f76:	01 d8                	add    %ebx,%eax
f0108f78:	c1 e0 02             	shl    $0x2,%eax
f0108f7b:	01 d0                	add    %edx,%eax
f0108f7d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f84:	01 d8                	add    %ebx,%eax
f0108f86:	c1 e0 02             	shl    $0x2,%eax
f0108f89:	01 d0                	add    %edx,%eax
f0108f8b:	c1 e0 02             	shl    $0x2,%eax
f0108f8e:	01 d0                	add    %edx,%eax
f0108f90:	c1 e0 03             	shl    $0x3,%eax
f0108f93:	01 c8                	add    %ecx,%eax
f0108f95:	85 c0                	test   %eax,%eax
f0108f97:	75 17                	jne    f0108fb0 <env_init+0xdc>
f0108f99:	83 ec 04             	sub    $0x4,%esp
f0108f9c:	68 f0 56 13 f0       	push   $0xf01356f0
f0108fa1:	68 18 02 00 00       	push   $0x218
f0108fa6:	68 6f 56 13 f0       	push   $0xf013566f
f0108fab:	e8 f6 71 ff ff       	call   f01001a6 <_panic>
f0108fb0:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108fb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108fb9:	89 d0                	mov    %edx,%eax
f0108fbb:	01 c0                	add    %eax,%eax
f0108fbd:	01 d0                	add    %edx,%eax
f0108fbf:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108fc6:	01 d8                	add    %ebx,%eax
f0108fc8:	c1 e0 02             	shl    $0x2,%eax
f0108fcb:	01 d0                	add    %edx,%eax
f0108fcd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108fd4:	01 d8                	add    %ebx,%eax
f0108fd6:	c1 e0 02             	shl    $0x2,%eax
f0108fd9:	01 d0                	add    %edx,%eax
f0108fdb:	c1 e0 02             	shl    $0x2,%eax
f0108fde:	01 d0                	add    %edx,%eax
f0108fe0:	c1 e0 03             	shl    $0x3,%eax
f0108fe3:	01 c8                	add    %ecx,%eax
f0108fe5:	8b 15 38 77 65 f0    	mov    0xf0657738,%edx
f0108feb:	89 50 44             	mov    %edx,0x44(%eax)
f0108fee:	8b 40 44             	mov    0x44(%eax),%eax
f0108ff1:	85 c0                	test   %eax,%eax
f0108ff3:	74 40                	je     f0109035 <env_init+0x161>
f0108ff5:	8b 0d 38 77 65 f0    	mov    0xf0657738,%ecx
f0108ffb:	8b 1d 30 77 65 f0    	mov    0xf0657730,%ebx
f0109001:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109004:	89 d0                	mov    %edx,%eax
f0109006:	01 c0                	add    %eax,%eax
f0109008:	01 d0                	add    %edx,%eax
f010900a:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109011:	01 f0                	add    %esi,%eax
f0109013:	c1 e0 02             	shl    $0x2,%eax
f0109016:	01 d0                	add    %edx,%eax
f0109018:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010901f:	01 f0                	add    %esi,%eax
f0109021:	c1 e0 02             	shl    $0x2,%eax
f0109024:	01 d0                	add    %edx,%eax
f0109026:	c1 e0 02             	shl    $0x2,%eax
f0109029:	01 d0                	add    %edx,%eax
f010902b:	c1 e0 03             	shl    $0x3,%eax
f010902e:	01 d8                	add    %ebx,%eax
f0109030:	89 41 48             	mov    %eax,0x48(%ecx)
f0109033:	eb 3a                	jmp    f010906f <env_init+0x19b>
f0109035:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f010903b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010903e:	89 d0                	mov    %edx,%eax
f0109040:	01 c0                	add    %eax,%eax
f0109042:	01 d0                	add    %edx,%eax
f0109044:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010904b:	01 d8                	add    %ebx,%eax
f010904d:	c1 e0 02             	shl    $0x2,%eax
f0109050:	01 d0                	add    %edx,%eax
f0109052:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109059:	01 d8                	add    %ebx,%eax
f010905b:	c1 e0 02             	shl    $0x2,%eax
f010905e:	01 d0                	add    %edx,%eax
f0109060:	c1 e0 02             	shl    $0x2,%eax
f0109063:	01 d0                	add    %edx,%eax
f0109065:	c1 e0 03             	shl    $0x3,%eax
f0109068:	01 c8                	add    %ecx,%eax
f010906a:	a3 3c 77 65 f0       	mov    %eax,0xf065773c
f010906f:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0109075:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109078:	89 d0                	mov    %edx,%eax
f010907a:	01 c0                	add    %eax,%eax
f010907c:	01 d0                	add    %edx,%eax
f010907e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109085:	01 d8                	add    %ebx,%eax
f0109087:	c1 e0 02             	shl    $0x2,%eax
f010908a:	01 d0                	add    %edx,%eax
f010908c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109093:	01 d8                	add    %ebx,%eax
f0109095:	c1 e0 02             	shl    $0x2,%eax
f0109098:	01 d0                	add    %edx,%eax
f010909a:	c1 e0 02             	shl    $0x2,%eax
f010909d:	01 d0                	add    %edx,%eax
f010909f:	c1 e0 03             	shl    $0x3,%eax
f01090a2:	01 c8                	add    %ecx,%eax
f01090a4:	a3 38 77 65 f0       	mov    %eax,0xf0657738
f01090a9:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f01090af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01090b2:	89 d0                	mov    %edx,%eax
f01090b4:	01 c0                	add    %eax,%eax
f01090b6:	01 d0                	add    %edx,%eax
f01090b8:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01090bf:	01 d8                	add    %ebx,%eax
f01090c1:	c1 e0 02             	shl    $0x2,%eax
f01090c4:	01 d0                	add    %edx,%eax
f01090c6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01090cd:	01 d8                	add    %ebx,%eax
f01090cf:	c1 e0 02             	shl    $0x2,%eax
f01090d2:	01 d0                	add    %edx,%eax
f01090d4:	c1 e0 02             	shl    $0x2,%eax
f01090d7:	01 d0                	add    %edx,%eax
f01090d9:	c1 e0 03             	shl    $0x3,%eax
f01090dc:	01 c8                	add    %ecx,%eax
f01090de:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01090e5:	a1 44 77 65 f0       	mov    0xf0657744,%eax
f01090ea:	40                   	inc    %eax
f01090eb:	a3 44 77 65 f0       	mov    %eax,0xf0657744
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01090f0:	ff 4d f4             	decl   -0xc(%ebp)
f01090f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01090f7:	0f 89 eb fd ff ff    	jns    f0108ee8 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01090fd:	90                   	nop
f01090fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109101:	5b                   	pop    %ebx
f0109102:	5e                   	pop    %esi
f0109103:	5d                   	pop    %ebp
f0109104:	c3                   	ret    

f0109105 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109105:	55                   	push   %ebp
f0109106:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109108:	8b 15 38 77 65 f0    	mov    0xf0657738,%edx
f010910e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109111:	89 10                	mov    %edx,(%eax)
f0109113:	8b 45 08             	mov    0x8(%ebp),%eax
f0109116:	8b 00                	mov    (%eax),%eax
f0109118:	85 c0                	test   %eax,%eax
f010911a:	75 07                	jne    f0109123 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010911c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109121:	eb 11                	jmp    f0109134 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109123:	8b 45 08             	mov    0x8(%ebp),%eax
f0109126:	8b 00                	mov    (%eax),%eax
f0109128:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010912f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109134:	5d                   	pop    %ebp
f0109135:	c3                   	ret    

f0109136 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109136:	55                   	push   %ebp
f0109137:	89 e5                	mov    %esp,%ebp
f0109139:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010913c:	83 ec 04             	sub    $0x4,%esp
f010913f:	68 a8 ea 01 00       	push   $0x1eaa8
f0109144:	6a 00                	push   $0x0
f0109146:	ff 75 08             	pushl  0x8(%ebp)
f0109149:	e8 37 71 02 00       	call   f0130285 <memset>
f010914e:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109151:	8b 45 08             	mov    0x8(%ebp),%eax
f0109154:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010915b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010915f:	75 17                	jne    f0109178 <free_environment+0x42>
f0109161:	83 ec 04             	sub    $0x4,%esp
f0109164:	68 f0 56 13 f0       	push   $0xf01356f0
f0109169:	68 35 02 00 00       	push   $0x235
f010916e:	68 6f 56 13 f0       	push   $0xf013566f
f0109173:	e8 2e 70 ff ff       	call   f01001a6 <_panic>
f0109178:	8b 15 38 77 65 f0    	mov    0xf0657738,%edx
f010917e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109181:	89 50 44             	mov    %edx,0x44(%eax)
f0109184:	8b 45 08             	mov    0x8(%ebp),%eax
f0109187:	8b 40 44             	mov    0x44(%eax),%eax
f010918a:	85 c0                	test   %eax,%eax
f010918c:	74 0d                	je     f010919b <free_environment+0x65>
f010918e:	a1 38 77 65 f0       	mov    0xf0657738,%eax
f0109193:	8b 55 08             	mov    0x8(%ebp),%edx
f0109196:	89 50 48             	mov    %edx,0x48(%eax)
f0109199:	eb 08                	jmp    f01091a3 <free_environment+0x6d>
f010919b:	8b 45 08             	mov    0x8(%ebp),%eax
f010919e:	a3 3c 77 65 f0       	mov    %eax,0xf065773c
f01091a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01091a6:	a3 38 77 65 f0       	mov    %eax,0xf0657738
f01091ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01091ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01091b5:	a1 44 77 65 f0       	mov    0xf0657744,%eax
f01091ba:	40                   	inc    %eax
f01091bb:	a3 44 77 65 f0       	mov    %eax,0xf0657744
}
f01091c0:	90                   	nop
f01091c1:	c9                   	leave  
f01091c2:	c3                   	ret    

f01091c3 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f01091c3:	55                   	push   %ebp
f01091c4:	89 e5                	mov    %esp,%ebp
f01091c6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f01091c9:	83 ec 04             	sub    $0x4,%esp
f01091cc:	68 48 57 13 f0       	push   $0xf0135748
f01091d1:	68 3f 02 00 00       	push   $0x23f
f01091d6:	68 6f 56 13 f0       	push   $0xf013566f
f01091db:	e8 c6 6f ff ff       	call   f01001a6 <_panic>

f01091e0 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01091e0:	55                   	push   %ebp
f01091e1:	89 e5                	mov    %esp,%ebp
f01091e3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f01091e6:	83 ec 04             	sub    $0x4,%esp
f01091e9:	68 7c 57 13 f0       	push   $0xf013577c
f01091ee:	68 4b 02 00 00       	push   $0x24b
f01091f3:	68 6f 56 13 f0       	push   $0xf013566f
f01091f8:	e8 a9 6f ff ff       	call   f01001a6 <_panic>

f01091fd <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01091fd:	55                   	push   %ebp
f01091fe:	89 e5                	mov    %esp,%ebp
f0109200:	53                   	push   %ebx
f0109201:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109204:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109207:	8b 40 0c             	mov    0xc(%eax),%eax
f010920a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010920d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109210:	8b 40 08             	mov    0x8(%eax),%eax
f0109213:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109216:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010921d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109220:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109223:	01 c2                	add    %eax,%edx
f0109225:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109228:	01 d0                	add    %edx,%eax
f010922a:	48                   	dec    %eax
f010922b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010922e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109231:	ba 00 00 00 00       	mov    $0x0,%edx
f0109236:	f7 75 dc             	divl   -0x24(%ebp)
f0109239:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010923c:	29 d0                	sub    %edx,%eax
f010923e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109244:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109247:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010924a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010924f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109252:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109259:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109260:	8b 45 10             	mov    0x10(%ebp),%eax
f0109263:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109269:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109270:	0f 85 12 06 00 00    	jne    f0109888 <program_segment_alloc_map_copy_workingset+0x68b>
f0109276:	8b 45 08             	mov    0x8(%ebp),%eax
f0109279:	05 18 da 01 00       	add    $0x1da18,%eax
f010927e:	83 ec 08             	sub    $0x8,%esp
f0109281:	68 b0 57 13 f0       	push   $0xf01357b0
f0109286:	50                   	push   %eax
f0109287:	e8 17 6f 02 00       	call   f01301a3 <strcmp>
f010928c:	83 c4 10             	add    $0x10,%esp
f010928f:	85 c0                	test   %eax,%eax
f0109291:	0f 84 f1 05 00 00    	je     f0109888 <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109297:	8b 45 14             	mov    0x14(%ebp),%eax
f010929a:	83 f8 06             	cmp    $0x6,%eax
f010929d:	76 05                	jbe    f01092a4 <program_segment_alloc_map_copy_workingset+0xa7>
f010929f:	b8 06 00 00 00       	mov    $0x6,%eax
f01092a4:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f01092a7:	e9 dc 05 00 00       	jmp    f0109888 <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f01092ac:	83 ec 0c             	sub    $0xc,%esp
f01092af:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01092b2:	50                   	push   %eax
f01092b3:	e8 f2 d4 ff ff       	call   f01067aa <allocate_frame>
f01092b8:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f01092bb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01092be:	8b 45 08             	mov    0x8(%ebp),%eax
f01092c1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01092c4:	6a 06                	push   $0x6
f01092c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01092c9:	52                   	push   %edx
f01092ca:	50                   	push   %eax
f01092cb:	e8 28 da ff ff       	call   f0106cf8 <loadtime_map_frame>
f01092d0:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01092d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01092d6:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01092dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092df:	89 d0                	mov    %edx,%eax
f01092e1:	01 c0                	add    %eax,%eax
f01092e3:	01 d0                	add    %edx,%eax
f01092e5:	c1 e0 03             	shl    $0x3,%eax
f01092e8:	01 c8                	add    %ecx,%eax
f01092ea:	8d 50 78             	lea    0x78(%eax),%edx
f01092ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092f0:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f01092f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01092f5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01092fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092fe:	89 d0                	mov    %edx,%eax
f0109300:	01 c0                	add    %eax,%eax
f0109302:	01 d0                	add    %edx,%eax
f0109304:	c1 e0 03             	shl    $0x3,%eax
f0109307:	01 c8                	add    %ecx,%eax
f0109309:	83 c0 7c             	add    $0x7c,%eax
f010930c:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010930f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109312:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109318:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010931b:	89 d0                	mov    %edx,%eax
f010931d:	01 c0                	add    %eax,%eax
f010931f:	01 d0                	add    %edx,%eax
f0109321:	c1 e0 03             	shl    $0x3,%eax
f0109324:	01 c8                	add    %ecx,%eax
f0109326:	83 e8 80             	sub    $0xffffff80,%eax
f0109329:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010932f:	83 ec 0c             	sub    $0xc,%esp
f0109332:	6a 02                	push   $0x2
f0109334:	e8 40 3c 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f0109339:	83 c4 10             	add    $0x10,%esp
f010933c:	85 c0                	test   %eax,%eax
f010933e:	0f 84 11 04 00 00    	je     f0109755 <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109344:	8b 45 08             	mov    0x8(%ebp),%eax
f0109347:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010934d:	89 d0                	mov    %edx,%eax
f010934f:	01 c0                	add    %eax,%eax
f0109351:	01 d0                	add    %edx,%eax
f0109353:	c1 e0 03             	shl    $0x3,%eax
f0109356:	8d 50 70             	lea    0x70(%eax),%edx
f0109359:	8b 45 08             	mov    0x8(%ebp),%eax
f010935c:	01 d0                	add    %edx,%eax
f010935e:	83 c0 08             	add    $0x8,%eax
f0109361:	85 c0                	test   %eax,%eax
f0109363:	75 17                	jne    f010937c <program_segment_alloc_map_copy_workingset+0x17f>
f0109365:	83 ec 04             	sub    $0x4,%esp
f0109368:	68 d1 56 13 f0       	push   $0xf01356d1
f010936d:	68 7d 02 00 00       	push   $0x27d
f0109372:	68 6f 56 13 f0       	push   $0xf013566f
f0109377:	e8 2a 6e ff ff       	call   f01001a6 <_panic>
f010937c:	8b 45 08             	mov    0x8(%ebp),%eax
f010937f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109385:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109388:	89 d0                	mov    %edx,%eax
f010938a:	01 c0                	add    %eax,%eax
f010938c:	01 d0                	add    %edx,%eax
f010938e:	c1 e0 03             	shl    $0x3,%eax
f0109391:	01 c8                	add    %ecx,%eax
f0109393:	05 88 00 00 00       	add    $0x88,%eax
f0109398:	8b 00                	mov    (%eax),%eax
f010939a:	85 c0                	test   %eax,%eax
f010939c:	74 41                	je     f01093df <program_segment_alloc_map_copy_workingset+0x1e2>
f010939e:	8b 45 08             	mov    0x8(%ebp),%eax
f01093a1:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01093a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093aa:	89 d0                	mov    %edx,%eax
f01093ac:	01 c0                	add    %eax,%eax
f01093ae:	01 d0                	add    %edx,%eax
f01093b0:	c1 e0 03             	shl    $0x3,%eax
f01093b3:	01 c8                	add    %ecx,%eax
f01093b5:	05 88 00 00 00       	add    $0x88,%eax
f01093ba:	8b 10                	mov    (%eax),%edx
f01093bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01093bf:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01093c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01093c8:	89 c8                	mov    %ecx,%eax
f01093ca:	01 c0                	add    %eax,%eax
f01093cc:	01 c8                	add    %ecx,%eax
f01093ce:	c1 e0 03             	shl    $0x3,%eax
f01093d1:	01 d8                	add    %ebx,%eax
f01093d3:	05 8c 00 00 00       	add    $0x8c,%eax
f01093d8:	8b 00                	mov    (%eax),%eax
f01093da:	89 42 14             	mov    %eax,0x14(%edx)
f01093dd:	eb 27                	jmp    f0109406 <program_segment_alloc_map_copy_workingset+0x209>
f01093df:	8b 45 08             	mov    0x8(%ebp),%eax
f01093e2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01093e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093eb:	89 d0                	mov    %edx,%eax
f01093ed:	01 c0                	add    %eax,%eax
f01093ef:	01 d0                	add    %edx,%eax
f01093f1:	c1 e0 03             	shl    $0x3,%eax
f01093f4:	01 c8                	add    %ecx,%eax
f01093f6:	05 8c 00 00 00       	add    $0x8c,%eax
f01093fb:	8b 10                	mov    (%eax),%edx
f01093fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109400:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0109406:	8b 45 08             	mov    0x8(%ebp),%eax
f0109409:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010940f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109412:	89 d0                	mov    %edx,%eax
f0109414:	01 c0                	add    %eax,%eax
f0109416:	01 d0                	add    %edx,%eax
f0109418:	c1 e0 03             	shl    $0x3,%eax
f010941b:	01 c8                	add    %ecx,%eax
f010941d:	05 8c 00 00 00       	add    $0x8c,%eax
f0109422:	8b 00                	mov    (%eax),%eax
f0109424:	85 c0                	test   %eax,%eax
f0109426:	74 41                	je     f0109469 <program_segment_alloc_map_copy_workingset+0x26c>
f0109428:	8b 45 08             	mov    0x8(%ebp),%eax
f010942b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109431:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109434:	89 d0                	mov    %edx,%eax
f0109436:	01 c0                	add    %eax,%eax
f0109438:	01 d0                	add    %edx,%eax
f010943a:	c1 e0 03             	shl    $0x3,%eax
f010943d:	01 c8                	add    %ecx,%eax
f010943f:	05 8c 00 00 00       	add    $0x8c,%eax
f0109444:	8b 10                	mov    (%eax),%edx
f0109446:	8b 45 08             	mov    0x8(%ebp),%eax
f0109449:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010944f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109452:	89 c8                	mov    %ecx,%eax
f0109454:	01 c0                	add    %eax,%eax
f0109456:	01 c8                	add    %ecx,%eax
f0109458:	c1 e0 03             	shl    $0x3,%eax
f010945b:	01 d8                	add    %ebx,%eax
f010945d:	05 88 00 00 00       	add    $0x88,%eax
f0109462:	8b 00                	mov    (%eax),%eax
f0109464:	89 42 10             	mov    %eax,0x10(%edx)
f0109467:	eb 27                	jmp    f0109490 <program_segment_alloc_map_copy_workingset+0x293>
f0109469:	8b 45 08             	mov    0x8(%ebp),%eax
f010946c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109472:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109475:	89 d0                	mov    %edx,%eax
f0109477:	01 c0                	add    %eax,%eax
f0109479:	01 d0                	add    %edx,%eax
f010947b:	c1 e0 03             	shl    $0x3,%eax
f010947e:	01 c8                	add    %ecx,%eax
f0109480:	05 88 00 00 00       	add    $0x88,%eax
f0109485:	8b 10                	mov    (%eax),%edx
f0109487:	8b 45 08             	mov    0x8(%ebp),%eax
f010948a:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109490:	8b 45 08             	mov    0x8(%ebp),%eax
f0109493:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109499:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010949c:	89 d0                	mov    %edx,%eax
f010949e:	01 c0                	add    %eax,%eax
f01094a0:	01 d0                	add    %edx,%eax
f01094a2:	c1 e0 03             	shl    $0x3,%eax
f01094a5:	01 c8                	add    %ecx,%eax
f01094a7:	05 88 00 00 00       	add    $0x88,%eax
f01094ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01094b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01094b5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01094bb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01094be:	89 d0                	mov    %edx,%eax
f01094c0:	01 c0                	add    %eax,%eax
f01094c2:	01 d0                	add    %edx,%eax
f01094c4:	c1 e0 03             	shl    $0x3,%eax
f01094c7:	01 c8                	add    %ecx,%eax
f01094c9:	05 8c 00 00 00       	add    $0x8c,%eax
f01094ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01094d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01094d7:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f01094dd:	8d 50 ff             	lea    -0x1(%eax),%edx
f01094e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01094e3:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f01094e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01094ec:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01094f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01094f5:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f01094fb:	48                   	dec    %eax
f01094fc:	39 c2                	cmp    %eax,%edx
f01094fe:	0f 83 2b 01 00 00    	jae    f010962f <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109504:	8b 45 08             	mov    0x8(%ebp),%eax
f0109507:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010950d:	89 d0                	mov    %edx,%eax
f010950f:	01 c0                	add    %eax,%eax
f0109511:	01 d0                	add    %edx,%eax
f0109513:	c1 e0 03             	shl    $0x3,%eax
f0109516:	8d 50 70             	lea    0x70(%eax),%edx
f0109519:	8b 45 08             	mov    0x8(%ebp),%eax
f010951c:	01 d0                	add    %edx,%eax
f010951e:	83 c0 08             	add    $0x8,%eax
f0109521:	85 c0                	test   %eax,%eax
f0109523:	75 17                	jne    f010953c <program_segment_alloc_map_copy_workingset+0x33f>
f0109525:	83 ec 04             	sub    $0x4,%esp
f0109528:	68 f0 56 13 f0       	push   $0xf01356f0
f010952d:	68 81 02 00 00       	push   $0x281
f0109532:	68 6f 56 13 f0       	push   $0xf013566f
f0109537:	e8 6a 6c ff ff       	call   f01001a6 <_panic>
f010953c:	8b 45 08             	mov    0x8(%ebp),%eax
f010953f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109545:	8b 45 08             	mov    0x8(%ebp),%eax
f0109548:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f010954e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109551:	89 d0                	mov    %edx,%eax
f0109553:	01 c0                	add    %eax,%eax
f0109555:	01 d0                	add    %edx,%eax
f0109557:	c1 e0 03             	shl    $0x3,%eax
f010955a:	01 d8                	add    %ebx,%eax
f010955c:	05 88 00 00 00       	add    $0x88,%eax
f0109561:	89 08                	mov    %ecx,(%eax)
f0109563:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109566:	89 d0                	mov    %edx,%eax
f0109568:	01 c0                	add    %eax,%eax
f010956a:	01 d0                	add    %edx,%eax
f010956c:	c1 e0 03             	shl    $0x3,%eax
f010956f:	01 c8                	add    %ecx,%eax
f0109571:	05 88 00 00 00       	add    $0x88,%eax
f0109576:	8b 00                	mov    (%eax),%eax
f0109578:	85 c0                	test   %eax,%eax
f010957a:	74 2b                	je     f01095a7 <program_segment_alloc_map_copy_workingset+0x3aa>
f010957c:	8b 45 08             	mov    0x8(%ebp),%eax
f010957f:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0109585:	8b 45 08             	mov    0x8(%ebp),%eax
f0109588:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010958e:	89 c8                	mov    %ecx,%eax
f0109590:	01 c0                	add    %eax,%eax
f0109592:	01 c8                	add    %ecx,%eax
f0109594:	c1 e0 03             	shl    $0x3,%eax
f0109597:	8d 48 70             	lea    0x70(%eax),%ecx
f010959a:	8b 45 08             	mov    0x8(%ebp),%eax
f010959d:	01 c8                	add    %ecx,%eax
f010959f:	83 c0 08             	add    $0x8,%eax
f01095a2:	89 42 14             	mov    %eax,0x14(%edx)
f01095a5:	eb 26                	jmp    f01095cd <program_segment_alloc_map_copy_workingset+0x3d0>
f01095a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01095aa:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095b0:	89 d0                	mov    %edx,%eax
f01095b2:	01 c0                	add    %eax,%eax
f01095b4:	01 d0                	add    %edx,%eax
f01095b6:	c1 e0 03             	shl    $0x3,%eax
f01095b9:	8d 50 70             	lea    0x70(%eax),%edx
f01095bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01095bf:	01 d0                	add    %edx,%eax
f01095c1:	8d 50 08             	lea    0x8(%eax),%edx
f01095c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01095c7:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f01095cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01095d0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095d6:	89 d0                	mov    %edx,%eax
f01095d8:	01 c0                	add    %eax,%eax
f01095da:	01 d0                	add    %edx,%eax
f01095dc:	c1 e0 03             	shl    $0x3,%eax
f01095df:	8d 50 70             	lea    0x70(%eax),%edx
f01095e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01095e5:	01 d0                	add    %edx,%eax
f01095e7:	8d 50 08             	lea    0x8(%eax),%edx
f01095ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01095ed:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f01095f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01095f6:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095fc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095ff:	89 d0                	mov    %edx,%eax
f0109601:	01 c0                	add    %eax,%eax
f0109603:	01 d0                	add    %edx,%eax
f0109605:	c1 e0 03             	shl    $0x3,%eax
f0109608:	01 c8                	add    %ecx,%eax
f010960a:	05 8c 00 00 00       	add    $0x8c,%eax
f010960f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109615:	8b 45 08             	mov    0x8(%ebp),%eax
f0109618:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f010961e:	8d 50 01             	lea    0x1(%eax),%edx
f0109621:	8b 45 08             	mov    0x8(%ebp),%eax
f0109624:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f010962a:	e9 26 01 00 00       	jmp    f0109755 <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010962f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109632:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109638:	89 d0                	mov    %edx,%eax
f010963a:	01 c0                	add    %eax,%eax
f010963c:	01 d0                	add    %edx,%eax
f010963e:	c1 e0 03             	shl    $0x3,%eax
f0109641:	8d 50 70             	lea    0x70(%eax),%edx
f0109644:	8b 45 08             	mov    0x8(%ebp),%eax
f0109647:	01 d0                	add    %edx,%eax
f0109649:	83 c0 08             	add    $0x8,%eax
f010964c:	85 c0                	test   %eax,%eax
f010964e:	75 17                	jne    f0109667 <program_segment_alloc_map_copy_workingset+0x46a>
f0109650:	83 ec 04             	sub    $0x4,%esp
f0109653:	68 f0 56 13 f0       	push   $0xf01356f0
f0109658:	68 86 02 00 00       	push   $0x286
f010965d:	68 6f 56 13 f0       	push   $0xf013566f
f0109662:	e8 3f 6b ff ff       	call   f01001a6 <_panic>
f0109667:	8b 45 08             	mov    0x8(%ebp),%eax
f010966a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109670:	8b 45 08             	mov    0x8(%ebp),%eax
f0109673:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0109679:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010967c:	89 d0                	mov    %edx,%eax
f010967e:	01 c0                	add    %eax,%eax
f0109680:	01 d0                	add    %edx,%eax
f0109682:	c1 e0 03             	shl    $0x3,%eax
f0109685:	01 d8                	add    %ebx,%eax
f0109687:	05 88 00 00 00       	add    $0x88,%eax
f010968c:	89 08                	mov    %ecx,(%eax)
f010968e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109691:	89 d0                	mov    %edx,%eax
f0109693:	01 c0                	add    %eax,%eax
f0109695:	01 d0                	add    %edx,%eax
f0109697:	c1 e0 03             	shl    $0x3,%eax
f010969a:	01 c8                	add    %ecx,%eax
f010969c:	05 88 00 00 00       	add    $0x88,%eax
f01096a1:	8b 00                	mov    (%eax),%eax
f01096a3:	85 c0                	test   %eax,%eax
f01096a5:	74 2b                	je     f01096d2 <program_segment_alloc_map_copy_workingset+0x4d5>
f01096a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01096aa:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f01096b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01096b3:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01096b9:	89 c8                	mov    %ecx,%eax
f01096bb:	01 c0                	add    %eax,%eax
f01096bd:	01 c8                	add    %ecx,%eax
f01096bf:	c1 e0 03             	shl    $0x3,%eax
f01096c2:	8d 48 70             	lea    0x70(%eax),%ecx
f01096c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01096c8:	01 c8                	add    %ecx,%eax
f01096ca:	83 c0 08             	add    $0x8,%eax
f01096cd:	89 42 14             	mov    %eax,0x14(%edx)
f01096d0:	eb 26                	jmp    f01096f8 <program_segment_alloc_map_copy_workingset+0x4fb>
f01096d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01096d5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096db:	89 d0                	mov    %edx,%eax
f01096dd:	01 c0                	add    %eax,%eax
f01096df:	01 d0                	add    %edx,%eax
f01096e1:	c1 e0 03             	shl    $0x3,%eax
f01096e4:	8d 50 70             	lea    0x70(%eax),%edx
f01096e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01096ea:	01 d0                	add    %edx,%eax
f01096ec:	8d 50 08             	lea    0x8(%eax),%edx
f01096ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01096f2:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f01096f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01096fb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109701:	89 d0                	mov    %edx,%eax
f0109703:	01 c0                	add    %eax,%eax
f0109705:	01 d0                	add    %edx,%eax
f0109707:	c1 e0 03             	shl    $0x3,%eax
f010970a:	8d 50 70             	lea    0x70(%eax),%edx
f010970d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109710:	01 d0                	add    %edx,%eax
f0109712:	8d 50 08             	lea    0x8(%eax),%edx
f0109715:	8b 45 08             	mov    0x8(%ebp),%eax
f0109718:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f010971e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109721:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109727:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010972a:	89 d0                	mov    %edx,%eax
f010972c:	01 c0                	add    %eax,%eax
f010972e:	01 d0                	add    %edx,%eax
f0109730:	c1 e0 03             	shl    $0x3,%eax
f0109733:	01 c8                	add    %ecx,%eax
f0109735:	05 8c 00 00 00       	add    $0x8c,%eax
f010973a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109740:	8b 45 08             	mov    0x8(%ebp),%eax
f0109743:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0109749:	8d 50 01             	lea    0x1(%eax),%edx
f010974c:	8b 45 08             	mov    0x8(%ebp),%eax
f010974f:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0109755:	8b 45 08             	mov    0x8(%ebp),%eax
f0109758:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f010975e:	8d 50 01             	lea    0x1(%eax),%edx
f0109761:	8b 45 08             	mov    0x8(%ebp),%eax
f0109764:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010976a:	8b 45 08             	mov    0x8(%ebp),%eax
f010976d:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109773:	8b 55 08             	mov    0x8(%ebp),%edx
f0109776:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109779:	ba 00 00 00 00       	mov    $0x0,%edx
f010977e:	f7 f1                	div    %ecx
f0109780:	8b 45 08             	mov    0x8(%ebp),%eax
f0109783:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010978c:	c1 e8 16             	shr    $0x16,%eax
f010978f:	89 c2                	mov    %eax,%edx
f0109791:	8b 45 18             	mov    0x18(%ebp),%eax
f0109794:	8b 00                	mov    (%eax),%eax
f0109796:	39 c2                	cmp    %eax,%edx
f0109798:	0f 84 d3 00 00 00    	je     f0109871 <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010979e:	8b 45 08             	mov    0x8(%ebp),%eax
f01097a1:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f01097a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01097aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01097ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01097b0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01097b5:	89 c1                	mov    %eax,%ecx
f01097b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01097ba:	89 d0                	mov    %edx,%eax
f01097bc:	01 c0                	add    %eax,%eax
f01097be:	01 d0                	add    %edx,%eax
f01097c0:	c1 e0 03             	shl    $0x3,%eax
f01097c3:	01 d8                	add    %ebx,%eax
f01097c5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01097ca:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f01097cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01097cf:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f01097d5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097d8:	89 d0                	mov    %edx,%eax
f01097da:	01 c0                	add    %eax,%eax
f01097dc:	01 d0                	add    %edx,%eax
f01097de:	c1 e0 03             	shl    $0x3,%eax
f01097e1:	01 c8                	add    %ecx,%eax
f01097e3:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01097e8:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f01097eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01097ee:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f01097f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097f7:	89 d0                	mov    %edx,%eax
f01097f9:	01 c0                	add    %eax,%eax
f01097fb:	01 d0                	add    %edx,%eax
f01097fd:	c1 e0 03             	shl    $0x3,%eax
f0109800:	01 c8                	add    %ecx,%eax
f0109802:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109807:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010980d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109810:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109816:	8d 50 01             	lea    0x1(%eax),%edx
f0109819:	8b 45 08             	mov    0x8(%ebp),%eax
f010981c:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f0109822:	8b 45 08             	mov    0x8(%ebp),%eax
f0109825:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f010982b:	b9 32 00 00 00       	mov    $0x32,%ecx
f0109830:	ba 00 00 00 00       	mov    $0x0,%edx
f0109835:	f7 f1                	div    %ecx
f0109837:	8b 45 08             	mov    0x8(%ebp),%eax
f010983a:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f0109840:	8b 45 08             	mov    0x8(%ebp),%eax
f0109843:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109849:	85 c0                	test   %eax,%eax
f010984b:	75 17                	jne    f0109864 <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010984d:	83 ec 04             	sub    $0x4,%esp
f0109850:	68 b4 57 13 f0       	push   $0xf01357b4
f0109855:	68 96 02 00 00       	push   $0x296
f010985a:	68 6f 56 13 f0       	push   $0xf013566f
f010985f:	e8 42 69 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0109864:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109867:	c1 e8 16             	shr    $0x16,%eax
f010986a:	89 c2                	mov    %eax,%edx
f010986c:	8b 45 18             	mov    0x18(%ebp),%eax
f010986f:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109871:	8b 45 10             	mov    0x10(%ebp),%eax
f0109874:	8b 00                	mov    (%eax),%eax
f0109876:	8d 50 01             	lea    0x1(%eax),%edx
f0109879:	8b 45 10             	mov    0x10(%ebp),%eax
f010987c:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010987e:	ff 45 f0             	incl   -0x10(%ebp)
f0109881:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109888:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010988b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010988e:	73 0c                	jae    f010989c <program_segment_alloc_map_copy_workingset+0x69f>
f0109890:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109893:	3b 45 14             	cmp    0x14(%ebp),%eax
f0109896:	0f 82 10 fa ff ff    	jb     f01092ac <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010989c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010989f:	8b 00                	mov    (%eax),%eax
f01098a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f01098a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01098a7:	8b 40 0c             	mov    0xc(%eax),%eax
f01098aa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01098ad:	eb 10                	jmp    f01098bf <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f01098af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01098b2:	8a 10                	mov    (%eax),%dl
f01098b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01098b7:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f01098b9:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f01098bc:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01098bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098c2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01098c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01098c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01098cd:	89 c2                	mov    %eax,%edx
f01098cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01098d2:	8b 00                	mov    (%eax),%eax
f01098d4:	c1 e0 0c             	shl    $0xc,%eax
f01098d7:	01 c2                	add    %eax,%edx
f01098d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01098dc:	39 c2                	cmp    %eax,%edx
f01098de:	76 1d                	jbe    f01098fd <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f01098e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01098e3:	8b 50 04             	mov    0x4(%eax),%edx
f01098e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098e9:	01 c2                	add    %eax,%edx
f01098eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01098ee:	39 c2                	cmp    %eax,%edx
f01098f0:	77 bd                	ja     f01098af <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01098f2:	eb 09                	jmp    f01098fd <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f01098f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01098f7:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f01098fa:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01098fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109900:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0109903:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109906:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010990b:	89 c2                	mov    %eax,%edx
f010990d:	8b 45 10             	mov    0x10(%ebp),%eax
f0109910:	8b 00                	mov    (%eax),%eax
f0109912:	c1 e0 0c             	shl    $0xc,%eax
f0109915:	01 c2                	add    %eax,%edx
f0109917:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010991a:	39 c2                	cmp    %eax,%edx
f010991c:	77 d6                	ja     f01098f4 <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010991e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109923:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109926:	c9                   	leave  
f0109927:	c3                   	ret    

f0109928 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f0109928:	55                   	push   %ebp
f0109929:	89 e5                	mov    %esp,%ebp
f010992b:	53                   	push   %ebx
f010992c:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010992f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109932:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109935:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f0109938:	8b 45 08             	mov    0x8(%ebp),%eax
f010993b:	8b 55 10             	mov    0x10(%ebp),%edx
f010993e:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109941:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109948:	eb 17                	jmp    f0109961 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010994a:	8b 45 08             	mov    0x8(%ebp),%eax
f010994d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109950:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109953:	c1 e2 02             	shl    $0x2,%edx
f0109956:	01 d0                	add    %edx,%eax
f0109958:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010995e:	ff 45 f4             	incl   -0xc(%ebp)
f0109961:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109964:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0109969:	76 df                	jbe    f010994a <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010996b:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0109972:	eb 22                	jmp    f0109996 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0109974:	8b 45 08             	mov    0x8(%ebp),%eax
f0109977:	8b 40 5c             	mov    0x5c(%eax),%eax
f010997a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010997d:	c1 e2 02             	shl    $0x2,%edx
f0109980:	01 c2                	add    %eax,%edx
f0109982:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0109987:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010998a:	c1 e1 02             	shl    $0x2,%ecx
f010998d:	01 c8                	add    %ecx,%eax
f010998f:	8b 00                	mov    (%eax),%eax
f0109991:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109993:	ff 45 f4             	incl   -0xc(%ebp)
f0109996:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010999d:	7e d5                	jle    f0109974 <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010999f:	8b 45 08             	mov    0x8(%ebp),%eax
f01099a2:	8b 15 30 77 65 f0    	mov    0xf0657730,%edx
f01099a8:	29 d0                	sub    %edx,%eax
f01099aa:	c1 f8 03             	sar    $0x3,%eax
f01099ad:	89 c2                	mov    %eax,%edx
f01099af:	89 d0                	mov    %edx,%eax
f01099b1:	c1 e0 03             	shl    $0x3,%eax
f01099b4:	01 d0                	add    %edx,%eax
f01099b6:	c1 e0 03             	shl    $0x3,%eax
f01099b9:	01 d0                	add    %edx,%eax
f01099bb:	01 c0                	add    %eax,%eax
f01099bd:	01 d0                	add    %edx,%eax
f01099bf:	01 c0                	add    %eax,%eax
f01099c1:	01 d0                	add    %edx,%eax
f01099c3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01099ca:	01 c8                	add    %ecx,%eax
f01099cc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01099d3:	01 c8                	add    %ecx,%eax
f01099d5:	c1 e0 02             	shl    $0x2,%eax
f01099d8:	01 d0                	add    %edx,%eax
f01099da:	01 c0                	add    %eax,%eax
f01099dc:	01 d0                	add    %edx,%eax
f01099de:	01 c0                	add    %eax,%eax
f01099e0:	01 d0                	add    %edx,%eax
f01099e2:	c1 e0 02             	shl    $0x2,%eax
f01099e5:	01 d0                	add    %edx,%eax
f01099e7:	01 c0                	add    %eax,%eax
f01099e9:	01 d0                	add    %edx,%eax
f01099eb:	c1 e0 09             	shl    $0x9,%eax
f01099ee:	29 d0                	sub    %edx,%eax
f01099f0:	c1 e0 02             	shl    $0x2,%eax
f01099f3:	01 d0                	add    %edx,%eax
f01099f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f01099f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01099fb:	89 d0                	mov    %edx,%eax
f01099fd:	01 c0                	add    %eax,%eax
f01099ff:	01 d0                	add    %edx,%eax
f0109a01:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109a08:	01 c8                	add    %ecx,%eax
f0109a0a:	c1 e0 02             	shl    $0x2,%eax
f0109a0d:	01 d0                	add    %edx,%eax
f0109a0f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109a16:	01 c8                	add    %ecx,%eax
f0109a18:	c1 e0 02             	shl    $0x2,%eax
f0109a1b:	01 d0                	add    %edx,%eax
f0109a1d:	c1 e0 02             	shl    $0x2,%eax
f0109a20:	01 d0                	add    %edx,%eax
f0109a22:	c1 e0 03             	shl    $0x3,%eax
f0109a25:	2d 00 00 40 11       	sub    $0x11400000,%eax
f0109a2a:	8d 50 78             	lea    0x78(%eax),%edx
f0109a2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a30:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109a36:	83 ec 0c             	sub    $0xc,%esp
f0109a39:	6a 02                	push   $0x2
f0109a3b:	e8 39 35 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f0109a40:	83 c4 10             	add    $0x10,%esp
f0109a43:	85 c0                	test   %eax,%eax
f0109a45:	0f 84 25 01 00 00    	je     f0109b70 <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109a4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109a52:	e9 08 01 00 00       	jmp    f0109b5f <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f0109a57:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a5a:	89 d0                	mov    %edx,%eax
f0109a5c:	01 c0                	add    %eax,%eax
f0109a5e:	01 d0                	add    %edx,%eax
f0109a60:	c1 e0 03             	shl    $0x3,%eax
f0109a63:	8d 50 70             	lea    0x70(%eax),%edx
f0109a66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a69:	01 d0                	add    %edx,%eax
f0109a6b:	83 c0 08             	add    $0x8,%eax
f0109a6e:	85 c0                	test   %eax,%eax
f0109a70:	75 17                	jne    f0109a89 <initialize_environment+0x161>
f0109a72:	83 ec 04             	sub    $0x4,%esp
f0109a75:	68 f0 56 13 f0       	push   $0xf01356f0
f0109a7a:	68 f4 02 00 00       	push   $0x2f4
f0109a7f:	68 6f 56 13 f0       	push   $0xf013566f
f0109a84:	e8 1d 67 ff ff       	call   f01001a6 <_panic>
f0109a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a8c:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109a92:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109a95:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109a98:	89 c8                	mov    %ecx,%eax
f0109a9a:	01 c0                	add    %eax,%eax
f0109a9c:	01 c8                	add    %ecx,%eax
f0109a9e:	c1 e0 03             	shl    $0x3,%eax
f0109aa1:	01 d8                	add    %ebx,%eax
f0109aa3:	05 88 00 00 00       	add    $0x88,%eax
f0109aa8:	89 10                	mov    %edx,(%eax)
f0109aaa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109aad:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109ab0:	89 d0                	mov    %edx,%eax
f0109ab2:	01 c0                	add    %eax,%eax
f0109ab4:	01 d0                	add    %edx,%eax
f0109ab6:	c1 e0 03             	shl    $0x3,%eax
f0109ab9:	01 c8                	add    %ecx,%eax
f0109abb:	05 88 00 00 00       	add    $0x88,%eax
f0109ac0:	8b 00                	mov    (%eax),%eax
f0109ac2:	85 c0                	test   %eax,%eax
f0109ac4:	74 25                	je     f0109aeb <initialize_environment+0x1c3>
f0109ac6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ac9:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109acf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109ad2:	89 c8                	mov    %ecx,%eax
f0109ad4:	01 c0                	add    %eax,%eax
f0109ad6:	01 c8                	add    %ecx,%eax
f0109ad8:	c1 e0 03             	shl    $0x3,%eax
f0109adb:	8d 48 70             	lea    0x70(%eax),%ecx
f0109ade:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ae1:	01 c8                	add    %ecx,%eax
f0109ae3:	83 c0 08             	add    $0x8,%eax
f0109ae6:	89 42 14             	mov    %eax,0x14(%edx)
f0109ae9:	eb 20                	jmp    f0109b0b <initialize_environment+0x1e3>
f0109aeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109aee:	89 d0                	mov    %edx,%eax
f0109af0:	01 c0                	add    %eax,%eax
f0109af2:	01 d0                	add    %edx,%eax
f0109af4:	c1 e0 03             	shl    $0x3,%eax
f0109af7:	8d 50 70             	lea    0x70(%eax),%edx
f0109afa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109afd:	01 d0                	add    %edx,%eax
f0109aff:	8d 50 08             	lea    0x8(%eax),%edx
f0109b02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b05:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0109b0b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b0e:	89 d0                	mov    %edx,%eax
f0109b10:	01 c0                	add    %eax,%eax
f0109b12:	01 d0                	add    %edx,%eax
f0109b14:	c1 e0 03             	shl    $0x3,%eax
f0109b17:	8d 50 70             	lea    0x70(%eax),%edx
f0109b1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b1d:	01 d0                	add    %edx,%eax
f0109b1f:	8d 50 08             	lea    0x8(%eax),%edx
f0109b22:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b25:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109b2b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b2e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b31:	89 d0                	mov    %edx,%eax
f0109b33:	01 c0                	add    %eax,%eax
f0109b35:	01 d0                	add    %edx,%eax
f0109b37:	c1 e0 03             	shl    $0x3,%eax
f0109b3a:	01 c8                	add    %ecx,%eax
f0109b3c:	05 8c 00 00 00       	add    $0x8c,%eax
f0109b41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109b47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b4a:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109b50:	8d 50 01             	lea    0x1(%eax),%edx
f0109b53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b56:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109b5c:	ff 45 f0             	incl   -0x10(%ebp)
f0109b5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b62:	8b 50 74             	mov    0x74(%eax),%edx
f0109b65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109b68:	39 c2                	cmp    %eax,%edx
f0109b6a:	0f 87 e7 fe ff ff    	ja     f0109a57 <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109b70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109b77:	eb 4e                	jmp    f0109bc7 <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0109b79:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b7f:	89 d0                	mov    %edx,%eax
f0109b81:	01 c0                	add    %eax,%eax
f0109b83:	01 d0                	add    %edx,%eax
f0109b85:	c1 e0 03             	shl    $0x3,%eax
f0109b88:	01 c8                	add    %ecx,%eax
f0109b8a:	83 c0 78             	add    $0x78,%eax
f0109b8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0109b93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b99:	89 d0                	mov    %edx,%eax
f0109b9b:	01 c0                	add    %eax,%eax
f0109b9d:	01 d0                	add    %edx,%eax
f0109b9f:	c1 e0 03             	shl    $0x3,%eax
f0109ba2:	01 c8                	add    %ecx,%eax
f0109ba4:	83 c0 7c             	add    $0x7c,%eax
f0109ba7:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0109baa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bb0:	89 d0                	mov    %edx,%eax
f0109bb2:	01 c0                	add    %eax,%eax
f0109bb4:	01 d0                	add    %edx,%eax
f0109bb6:	c1 e0 03             	shl    $0x3,%eax
f0109bb9:	01 c8                	add    %ecx,%eax
f0109bbb:	83 e8 80             	sub    $0xffffff80,%eax
f0109bbe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109bc4:	ff 45 f4             	incl   -0xc(%ebp)
f0109bc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bca:	8b 50 74             	mov    0x74(%eax),%edx
f0109bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bd0:	39 c2                	cmp    %eax,%edx
f0109bd2:	77 a5                	ja     f0109b79 <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f0109bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bd7:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f0109bde:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109be1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109be8:	eb 54                	jmp    f0109c3e <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f0109bea:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bf0:	89 d0                	mov    %edx,%eax
f0109bf2:	01 c0                	add    %eax,%eax
f0109bf4:	01 d0                	add    %edx,%eax
f0109bf6:	c1 e0 03             	shl    $0x3,%eax
f0109bf9:	01 c8                	add    %ecx,%eax
f0109bfb:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109c00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f0109c06:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c0c:	89 d0                	mov    %edx,%eax
f0109c0e:	01 c0                	add    %eax,%eax
f0109c10:	01 d0                	add    %edx,%eax
f0109c12:	c1 e0 03             	shl    $0x3,%eax
f0109c15:	01 c8                	add    %ecx,%eax
f0109c17:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109c1c:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0109c1f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109c22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c25:	89 d0                	mov    %edx,%eax
f0109c27:	01 c0                	add    %eax,%eax
f0109c29:	01 d0                	add    %edx,%eax
f0109c2b:	c1 e0 03             	shl    $0x3,%eax
f0109c2e:	01 c8                	add    %ecx,%eax
f0109c30:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109c35:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109c3b:	ff 45 f4             	incl   -0xc(%ebp)
f0109c3e:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109c42:	7e a6                	jle    f0109bea <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0109c44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c47:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f0109c4e:	00 00 00 

	e->pageFaultsCounter=0;
f0109c51:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c54:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f0109c5b:	00 00 00 
	e->tableFaultsCounter=0;
f0109c5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c61:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f0109c68:	00 00 00 

	e->freeingFullWSCounter = 0;
f0109c6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c6e:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f0109c75:	00 00 00 
	e->freeingScarceMemCounter = 0;
f0109c78:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c7b:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f0109c82:	00 00 00 

	e->nModifiedPages=0;
f0109c85:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c88:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f0109c8f:	00 00 00 
	e->nNotModifiedPages=0;
f0109c92:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c95:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f0109c9c:	00 00 00 
	e->nClocks = 0;
f0109c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca2:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f0109ca9:	00 00 00 

	//2020
	e->nPageIn = 0;
f0109cac:	8b 45 08             	mov    0x8(%ebp),%eax
f0109caf:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f0109cb6:	00 00 00 
	e->nPageOut = 0;
f0109cb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cbc:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f0109cc3:	00 00 00 
	e->nNewPageAdded = 0;
f0109cc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc9:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f0109cd0:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0109cd3:	83 ec 0c             	sub    $0xc,%esp
f0109cd6:	ff 75 08             	pushl  0x8(%ebp)
f0109cd9:	e8 09 00 00 00       	call   f0109ce7 <complete_environment_initialization>
f0109cde:	83 c4 10             	add    $0x10,%esp
}
f0109ce1:	90                   	nop
f0109ce2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109ce5:	c9                   	leave  
f0109ce6:	c3                   	ret    

f0109ce7 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f0109ce7:	55                   	push   %ebp
f0109ce8:	89 e5                	mov    %esp,%ebp
f0109cea:	53                   	push   %ebx
f0109ceb:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0109cee:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cf1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109cf4:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f0109cfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cfd:	8b 40 60             	mov    0x60(%eax),%eax
f0109d00:	83 c8 03             	or     $0x3,%eax
f0109d03:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f0109d05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d08:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109d0b:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0109d11:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d14:	8b 40 60             	mov    0x60(%eax),%eax
f0109d17:	83 c8 05             	or     $0x5,%eax
f0109d1a:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f0109d1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d1f:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f0109d26:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d29:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0109d30:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d33:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f0109d3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d3d:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f0109d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d47:	8b 58 4c             	mov    0x4c(%eax),%ebx
f0109d4a:	83 ec 0c             	sub    $0xc,%esp
f0109d4d:	6a 08                	push   $0x8
f0109d4f:	e8 03 51 02 00       	call   f012ee57 <log2_ceil>
f0109d54:	83 c4 10             	add    $0x10,%esp
f0109d57:	ba 01 00 00 00       	mov    $0x1,%edx
f0109d5c:	88 c1                	mov    %al,%cl
f0109d5e:	d3 e2                	shl    %cl,%edx
f0109d60:	89 d0                	mov    %edx,%eax
f0109d62:	01 d8                	add    %ebx,%eax
f0109d64:	89 c3                	mov    %eax,%ebx
f0109d66:	83 ec 0c             	sub    $0xc,%esp
f0109d69:	6a 08                	push   $0x8
f0109d6b:	e8 b2 50 02 00       	call   f012ee22 <nearest_pow2_ceil>
f0109d70:	83 c4 10             	add    $0x10,%esp
f0109d73:	f7 d8                	neg    %eax
f0109d75:	21 d8                	and    %ebx,%eax
f0109d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f0109d7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d7e:	7f 1b                	jg     f0109d9b <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f0109d80:	83 ec 0c             	sub    $0xc,%esp
f0109d83:	6a 08                	push   $0x8
f0109d85:	e8 cd 50 02 00       	call   f012ee57 <log2_ceil>
f0109d8a:	83 c4 10             	add    $0x10,%esp
f0109d8d:	ba 01 00 00 00       	mov    $0x1,%edx
f0109d92:	88 c1                	mov    %al,%cl
f0109d94:	d3 e2                	shl    %cl,%edx
f0109d96:	89 d0                	mov    %edx,%eax
f0109d98:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f0109d9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9e:	8b 15 30 77 65 f0    	mov    0xf0657730,%edx
f0109da4:	29 d0                	sub    %edx,%eax
f0109da6:	c1 f8 03             	sar    $0x3,%eax
f0109da9:	89 c2                	mov    %eax,%edx
f0109dab:	89 d0                	mov    %edx,%eax
f0109dad:	c1 e0 03             	shl    $0x3,%eax
f0109db0:	01 d0                	add    %edx,%eax
f0109db2:	c1 e0 03             	shl    $0x3,%eax
f0109db5:	01 d0                	add    %edx,%eax
f0109db7:	01 c0                	add    %eax,%eax
f0109db9:	01 d0                	add    %edx,%eax
f0109dbb:	01 c0                	add    %eax,%eax
f0109dbd:	01 d0                	add    %edx,%eax
f0109dbf:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109dc6:	01 c8                	add    %ecx,%eax
f0109dc8:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109dcf:	01 c8                	add    %ecx,%eax
f0109dd1:	c1 e0 02             	shl    $0x2,%eax
f0109dd4:	01 d0                	add    %edx,%eax
f0109dd6:	01 c0                	add    %eax,%eax
f0109dd8:	01 d0                	add    %edx,%eax
f0109dda:	01 c0                	add    %eax,%eax
f0109ddc:	01 d0                	add    %edx,%eax
f0109dde:	c1 e0 02             	shl    $0x2,%eax
f0109de1:	01 d0                	add    %edx,%eax
f0109de3:	01 c0                	add    %eax,%eax
f0109de5:	01 d0                	add    %edx,%eax
f0109de7:	c1 e0 09             	shl    $0x9,%eax
f0109dea:	29 d0                	sub    %edx,%eax
f0109dec:	c1 e0 02             	shl    $0x2,%eax
f0109def:	01 d0                	add    %edx,%eax
f0109df1:	0b 45 f4             	or     -0xc(%ebp),%eax
f0109df4:	89 c2                	mov    %eax,%edx
f0109df6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109df9:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f0109dfc:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0109e01:	85 c0                	test   %eax,%eax
f0109e03:	75 0c                	jne    f0109e11 <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f0109e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e08:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f0109e0f:	eb 0e                	jmp    f0109e1f <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f0109e11:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0109e16:	8b 50 4c             	mov    0x4c(%eax),%edx
f0109e19:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e1c:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0109e1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e22:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f0109e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2c:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0109e33:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e36:	83 ec 04             	sub    $0x4,%esp
f0109e39:	6a 44                	push   $0x44
f0109e3b:	6a 00                	push   $0x0
f0109e3d:	50                   	push   %eax
f0109e3e:	e8 42 64 02 00       	call   f0130285 <memset>
f0109e43:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f0109e46:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e49:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0109e4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e52:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0109e58:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e5b:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0109e61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e64:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f0109e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e6e:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f0109e74:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e77:	8b 40 38             	mov    0x38(%eax),%eax
f0109e7a:	80 cc 02             	or     $0x2,%ah
f0109e7d:	89 c2                	mov    %eax,%edx
f0109e7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e82:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f0109e85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109e89:	75 17                	jne    f0109ea2 <complete_environment_initialization+0x1bb>
f0109e8b:	83 ec 04             	sub    $0x4,%esp
f0109e8e:	68 d1 56 13 f0       	push   $0xf01356d1
f0109e93:	68 58 03 00 00       	push   $0x358
f0109e98:	68 6f 56 13 f0       	push   $0xf013566f
f0109e9d:	e8 04 63 ff ff       	call   f01001a6 <_panic>
f0109ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea5:	8b 40 44             	mov    0x44(%eax),%eax
f0109ea8:	85 c0                	test   %eax,%eax
f0109eaa:	74 11                	je     f0109ebd <complete_environment_initialization+0x1d6>
f0109eac:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eaf:	8b 40 44             	mov    0x44(%eax),%eax
f0109eb2:	8b 55 08             	mov    0x8(%ebp),%edx
f0109eb5:	8b 52 48             	mov    0x48(%edx),%edx
f0109eb8:	89 50 48             	mov    %edx,0x48(%eax)
f0109ebb:	eb 0b                	jmp    f0109ec8 <complete_environment_initialization+0x1e1>
f0109ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ec0:	8b 40 48             	mov    0x48(%eax),%eax
f0109ec3:	a3 3c 77 65 f0       	mov    %eax,0xf065773c
f0109ec8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ecb:	8b 40 48             	mov    0x48(%eax),%eax
f0109ece:	85 c0                	test   %eax,%eax
f0109ed0:	74 11                	je     f0109ee3 <complete_environment_initialization+0x1fc>
f0109ed2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed5:	8b 40 48             	mov    0x48(%eax),%eax
f0109ed8:	8b 55 08             	mov    0x8(%ebp),%edx
f0109edb:	8b 52 44             	mov    0x44(%edx),%edx
f0109ede:	89 50 44             	mov    %edx,0x44(%eax)
f0109ee1:	eb 0b                	jmp    f0109eee <complete_environment_initialization+0x207>
f0109ee3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ee6:	8b 40 44             	mov    0x44(%eax),%eax
f0109ee9:	a3 38 77 65 f0       	mov    %eax,0xf0657738
f0109eee:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109ef8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109efb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109f02:	a1 44 77 65 f0       	mov    0xf0657744,%eax
f0109f07:	48                   	dec    %eax
f0109f08:	a3 44 77 65 f0       	mov    %eax,0xf0657744
	return ;
f0109f0d:	90                   	nop
}
f0109f0e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109f11:	c9                   	leave  
f0109f12:	c3                   	ret    

f0109f13 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f0109f13:	55                   	push   %ebp
f0109f14:	89 e5                	mov    %esp,%ebp
f0109f16:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0109f19:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109f1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f22:	8b 00                	mov    (%eax),%eax
f0109f24:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0109f29:	74 17                	je     f0109f42 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0109f2b:	83 ec 04             	sub    $0x4,%esp
f0109f2e:	68 57 58 13 f0       	push   $0xf0135857
f0109f33:	68 64 03 00 00       	push   $0x364
f0109f38:	68 6f 56 13 f0       	push   $0xf013566f
f0109f3d:	e8 64 62 ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0109f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f45:	8b 40 18             	mov    0x18(%eax),%eax
f0109f48:	89 c2                	mov    %eax,%edx
f0109f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f4d:	89 50 30             	mov    %edx,0x30(%eax)
}
f0109f50:	90                   	nop
f0109f51:	c9                   	leave  
f0109f52:	c3                   	ret    

f0109f53 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f0109f53:	55                   	push   %ebp
f0109f54:	89 e5                	mov    %esp,%ebp
f0109f56:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f0109f59:	83 ec 04             	sub    $0x4,%esp
f0109f5c:	68 70 58 13 f0       	push   $0xf0135870
f0109f61:	68 81 03 00 00       	push   $0x381
f0109f66:	68 6f 56 13 f0       	push   $0xf013566f
f0109f6b:	e8 36 62 ff ff       	call   f01001a6 <_panic>

f0109f70 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f0109f70:	55                   	push   %ebp
f0109f71:	89 e5                	mov    %esp,%ebp
f0109f73:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f0109f76:	83 ec 04             	sub    $0x4,%esp
f0109f79:	68 c0 58 13 f0       	push   $0xf01358c0
f0109f7e:	68 a0 03 00 00       	push   $0x3a0
f0109f83:	68 6f 56 13 f0       	push   $0xf013566f
f0109f88:	e8 19 62 ff ff       	call   f01001a6 <_panic>

f0109f8d <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f0109f8d:	55                   	push   %ebp
f0109f8e:	89 e5                	mov    %esp,%ebp
f0109f90:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f0109f93:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f96:	8b 40 10             	mov    0x10(%eax),%eax
f0109f99:	8d 48 01             	lea    0x1(%eax),%ecx
f0109f9c:	8b 55 08             	mov    0x8(%ebp),%edx
f0109f9f:	89 4a 10             	mov    %ecx,0x10(%edx)
f0109fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0109fa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109fab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109fae:	8b 00                	mov    (%eax),%eax
f0109fb0:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0109fb5:	74 17                	je     f0109fce <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f0109fb7:	83 ec 04             	sub    $0x4,%esp
f0109fba:	68 57 58 13 f0       	push   $0xf0135857
f0109fbf:	68 ae 03 00 00       	push   $0x3ae
f0109fc4:	68 6f 56 13 f0       	push   $0xf013566f
f0109fc9:	e8 d8 61 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0109fce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109fd1:	8b 50 1c             	mov    0x1c(%eax),%edx
f0109fd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fd7:	01 d0                	add    %edx,%eax
f0109fd9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0109fdc:	eb 0f                	jmp    f0109fed <PROGRAM_SEGMENT_NEXT+0x60>
f0109fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe1:	8b 40 10             	mov    0x10(%eax),%eax
f0109fe4:	8d 50 01             	lea    0x1(%eax),%edx
f0109fe7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fea:	89 50 10             	mov    %edx,0x10(%eax)
f0109fed:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff0:	8b 40 10             	mov    0x10(%eax),%eax
f0109ff3:	c1 e0 05             	shl    $0x5,%eax
f0109ff6:	89 c2                	mov    %eax,%edx
f0109ff8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109ffb:	01 d0                	add    %edx,%eax
f0109ffd:	8b 00                	mov    (%eax),%eax
f0109fff:	83 f8 01             	cmp    $0x1,%eax
f010a002:	74 13                	je     f010a017 <PROGRAM_SEGMENT_NEXT+0x8a>
f010a004:	8b 45 08             	mov    0x8(%ebp),%eax
f010a007:	8b 50 10             	mov    0x10(%eax),%edx
f010a00a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a00d:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a010:	0f b7 c0             	movzwl %ax,%eax
f010a013:	39 c2                	cmp    %eax,%edx
f010a015:	72 c7                	jb     f0109fde <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 40 10             	mov    0x10(%eax),%eax
f010a01d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a020:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a023:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a026:	0f b7 c0             	movzwl %ax,%eax
f010a029:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a02c:	7e 63                	jle    f010a091 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a02e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a031:	c1 e0 05             	shl    $0x5,%eax
f010a034:	89 c2                	mov    %eax,%edx
f010a036:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a039:	01 d0                	add    %edx,%eax
f010a03b:	8b 50 04             	mov    0x4(%eax),%edx
f010a03e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a041:	01 c2                	add    %eax,%edx
f010a043:	8b 45 08             	mov    0x8(%ebp),%eax
f010a046:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a048:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a04b:	c1 e0 05             	shl    $0x5,%eax
f010a04e:	89 c2                	mov    %eax,%edx
f010a050:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a053:	01 d0                	add    %edx,%eax
f010a055:	8b 50 14             	mov    0x14(%eax),%edx
f010a058:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a05e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a061:	c1 e0 05             	shl    $0x5,%eax
f010a064:	89 c2                	mov    %eax,%edx
f010a066:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a069:	01 d0                	add    %edx,%eax
f010a06b:	8b 50 10             	mov    0x10(%eax),%edx
f010a06e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a071:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a074:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a077:	c1 e0 05             	shl    $0x5,%eax
f010a07a:	89 c2                	mov    %eax,%edx
f010a07c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a07f:	01 d0                	add    %edx,%eax
f010a081:	8b 40 08             	mov    0x8(%eax),%eax
f010a084:	89 c2                	mov    %eax,%edx
f010a086:	8b 45 08             	mov    0x8(%ebp),%eax
f010a089:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a08c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08f:	eb 05                	jmp    f010a096 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a091:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a096:	c9                   	leave  
f010a097:	c3                   	ret    

f010a098 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a098:	55                   	push   %ebp
f010a099:	89 e5                	mov    %esp,%ebp
f010a09b:	57                   	push   %edi
f010a09c:	56                   	push   %esi
f010a09d:	53                   	push   %ebx
f010a09e:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a0a1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a0a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a0ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0b1:	8b 00                	mov    (%eax),%eax
f010a0b3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a0b8:	74 17                	je     f010a0d1 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a0ba:	83 ec 04             	sub    $0x4,%esp
f010a0bd:	68 57 58 13 f0       	push   $0xf0135857
f010a0c2:	68 ca 03 00 00       	push   $0x3ca
f010a0c7:	68 6f 56 13 f0       	push   $0xf013566f
f010a0cc:	e8 d5 60 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a0d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0d4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a0d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0da:	01 d0                	add    %edx,%eax
f010a0dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a0df:	eb 07                	jmp    f010a0e8 <PROGRAM_SEGMENT_FIRST+0x50>
f010a0e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a0e4:	40                   	inc    %eax
f010a0e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a0e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a0eb:	c1 e0 05             	shl    $0x5,%eax
f010a0ee:	89 c2                	mov    %eax,%edx
f010a0f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a0f3:	01 d0                	add    %edx,%eax
f010a0f5:	8b 00                	mov    (%eax),%eax
f010a0f7:	83 f8 01             	cmp    $0x1,%eax
f010a0fa:	74 10                	je     f010a10c <PROGRAM_SEGMENT_FIRST+0x74>
f010a0fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a0ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a102:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a105:	0f b7 c0             	movzwl %ax,%eax
f010a108:	39 c2                	cmp    %eax,%edx
f010a10a:	72 d5                	jb     f010a0e1 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a10c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a10f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a115:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a118:	0f b7 c0             	movzwl %ax,%eax
f010a11b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a11e:	7e 68                	jle    f010a188 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a120:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a123:	c1 e0 05             	shl    $0x5,%eax
f010a126:	89 c2                	mov    %eax,%edx
f010a128:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a12b:	01 d0                	add    %edx,%eax
f010a12d:	8b 50 04             	mov    0x4(%eax),%edx
f010a130:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a133:	01 d0                	add    %edx,%eax
f010a135:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a138:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a13b:	c1 e0 05             	shl    $0x5,%eax
f010a13e:	89 c2                	mov    %eax,%edx
f010a140:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a143:	01 d0                	add    %edx,%eax
f010a145:	8b 40 14             	mov    0x14(%eax),%eax
f010a148:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a14b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a14e:	c1 e0 05             	shl    $0x5,%eax
f010a151:	89 c2                	mov    %eax,%edx
f010a153:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a156:	01 d0                	add    %edx,%eax
f010a158:	8b 40 10             	mov    0x10(%eax),%eax
f010a15b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a15e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a161:	c1 e0 05             	shl    $0x5,%eax
f010a164:	89 c2                	mov    %eax,%edx
f010a166:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a169:	01 d0                	add    %edx,%eax
f010a16b:	8b 40 08             	mov    0x8(%eax),%eax
f010a16e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a171:	8b 45 08             	mov    0x8(%ebp),%eax
f010a174:	89 c3                	mov    %eax,%ebx
f010a176:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a179:	ba 05 00 00 00       	mov    $0x5,%edx
f010a17e:	89 df                	mov    %ebx,%edi
f010a180:	89 c6                	mov    %eax,%esi
f010a182:	89 d1                	mov    %edx,%ecx
f010a184:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a186:	eb 1c                	jmp    f010a1a4 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a188:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a18f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a192:	89 c3                	mov    %eax,%ebx
f010a194:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a197:	ba 05 00 00 00       	mov    $0x5,%edx
f010a19c:	89 df                	mov    %ebx,%edi
f010a19e:	89 c6                	mov    %eax,%esi
f010a1a0:	89 d1                	mov    %edx,%ecx
f010a1a2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a1a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a1aa:	5b                   	pop    %ebx
f010a1ab:	5e                   	pop    %esi
f010a1ac:	5f                   	pop    %edi
f010a1ad:	5d                   	pop    %ebp
f010a1ae:	c2 04 00             	ret    $0x4

f010a1b1 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010a1b1:	55                   	push   %ebp
f010a1b2:	89 e5                	mov    %esp,%ebp
f010a1b4:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a1b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a1be:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f010a1c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a1c6:	e9 c3 00 00 00       	jmp    f010a28e <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010a1cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ce:	8b 40 10             	mov    0x10(%eax),%eax
f010a1d1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a1d4:	0f 85 ac 00 00 00    	jne    f010a286 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010a1da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1dd:	8b 50 0c             	mov    0xc(%eax),%edx
f010a1e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1e3:	8b 40 10             	mov    0x10(%eax),%eax
f010a1e6:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a1e9:	83 ec 08             	sub    $0x8,%esp
f010a1ec:	52                   	push   %edx
f010a1ed:	50                   	push   %eax
f010a1ee:	e8 2e d3 ff ff       	call   f0107521 <pt_clear_page_table_entry>
f010a1f3:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010a1f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1fa:	75 17                	jne    f010a213 <cleanup_buffers+0x62>
f010a1fc:	83 ec 04             	sub    $0x4,%esp
f010a1ff:	68 d1 56 13 f0       	push   $0xf01356d1
f010a204:	68 f1 03 00 00       	push   $0x3f1
f010a209:	68 6f 56 13 f0       	push   $0xf013566f
f010a20e:	e8 93 5f ff ff       	call   f01001a6 <_panic>
f010a213:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a216:	8b 00                	mov    (%eax),%eax
f010a218:	85 c0                	test   %eax,%eax
f010a21a:	74 10                	je     f010a22c <cleanup_buffers+0x7b>
f010a21c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a21f:	8b 00                	mov    (%eax),%eax
f010a221:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a224:	8b 52 04             	mov    0x4(%edx),%edx
f010a227:	89 50 04             	mov    %edx,0x4(%eax)
f010a22a:	eb 0b                	jmp    f010a237 <cleanup_buffers+0x86>
f010a22c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a22f:	8b 40 04             	mov    0x4(%eax),%eax
f010a232:	a3 e4 7f 65 f0       	mov    %eax,0xf0657fe4
f010a237:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a23a:	8b 40 04             	mov    0x4(%eax),%eax
f010a23d:	85 c0                	test   %eax,%eax
f010a23f:	74 0f                	je     f010a250 <cleanup_buffers+0x9f>
f010a241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a244:	8b 40 04             	mov    0x4(%eax),%eax
f010a247:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a24a:	8b 12                	mov    (%edx),%edx
f010a24c:	89 10                	mov    %edx,(%eax)
f010a24e:	eb 0a                	jmp    f010a25a <cleanup_buffers+0xa9>
f010a250:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a253:	8b 00                	mov    (%eax),%eax
f010a255:	a3 e0 7f 65 f0       	mov    %eax,0xf0657fe0
f010a25a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a25d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a266:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a26d:	a1 ec 7f 65 f0       	mov    0xf0657fec,%eax
f010a272:	48                   	dec    %eax
f010a273:	a3 ec 7f 65 f0       	mov    %eax,0xf0657fec

			free_frame(ptr_fi);
f010a278:	83 ec 0c             	sub    $0xc,%esp
f010a27b:	ff 75 f4             	pushl  -0xc(%ebp)
f010a27e:	e8 3c c6 ff ff       	call   f01068bf <free_frame>
f010a283:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a286:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f010a28b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a28e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a292:	74 07                	je     f010a29b <cleanup_buffers+0xea>
f010a294:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a297:	8b 00                	mov    (%eax),%eax
f010a299:	eb 05                	jmp    f010a2a0 <cleanup_buffers+0xef>
f010a29b:	b8 00 00 00 00       	mov    $0x0,%eax
f010a2a0:	a3 e8 7f 65 f0       	mov    %eax,0xf0657fe8
f010a2a5:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f010a2aa:	85 c0                	test   %eax,%eax
f010a2ac:	0f 85 19 ff ff ff    	jne    f010a1cb <cleanup_buffers+0x1a>
f010a2b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a2b6:	0f 85 0f ff ff ff    	jne    f010a1cb <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010a2bc:	90                   	nop
f010a2bd:	c9                   	leave  
f010a2be:	c3                   	ret    

f010a2bf <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010a2bf:	55                   	push   %ebp
f010a2c0:	89 e5                	mov    %esp,%ebp
f010a2c2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010a2c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010a2c9:	7e 06                	jle    f010a2d1 <set_program_priority+0x12>
f010a2cb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a2cf:	7e 14                	jle    f010a2e5 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010a2d1:	83 ec 04             	sub    $0x4,%esp
f010a2d4:	68 10 59 13 f0       	push   $0xf0135910
f010a2d9:	6a 10                	push   $0x10
f010a2db:	68 34 59 13 f0       	push   $0xf0135934
f010a2e0:	e8 c1 5e ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f010a2e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a2e9:	74 75                	je     f010a360 <set_program_priority+0xa1>
		return;
	switch(priority)
f010a2eb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a2ef:	77 56                	ja     f010a347 <set_program_priority+0x88>
f010a2f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2f4:	c1 e0 02             	shl    $0x2,%eax
f010a2f7:	05 70 59 13 f0       	add    $0xf0135970,%eax
f010a2fc:	8b 00                	mov    (%eax),%eax
f010a2fe:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010a300:	83 ec 08             	sub    $0x8,%esp
f010a303:	6a 01                	push   $0x1
f010a305:	ff 75 08             	pushl  0x8(%ebp)
f010a308:	e8 fe db ff ff       	call   f0107f0b <half_WS_Size>
f010a30d:	83 c4 10             	add    $0x10,%esp
			break;
f010a310:	eb 35                	jmp    f010a347 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010a312:	83 ec 08             	sub    $0x8,%esp
f010a315:	6a 00                	push   $0x0
f010a317:	ff 75 08             	pushl  0x8(%ebp)
f010a31a:	e8 ec db ff ff       	call   f0107f0b <half_WS_Size>
f010a31f:	83 c4 10             	add    $0x10,%esp
			break;
f010a322:	eb 23                	jmp    f010a347 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010a324:	83 ec 08             	sub    $0x8,%esp
f010a327:	6a 01                	push   $0x1
f010a329:	ff 75 08             	pushl  0x8(%ebp)
f010a32c:	e8 bd db ff ff       	call   f0107eee <double_WS_Size>
f010a331:	83 c4 10             	add    $0x10,%esp
			break;
f010a334:	eb 11                	jmp    f010a347 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010a336:	83 ec 08             	sub    $0x8,%esp
f010a339:	6a 00                	push   $0x0
f010a33b:	ff 75 08             	pushl  0x8(%ebp)
f010a33e:	e8 ab db ff ff       	call   f0107eee <double_WS_Size>
f010a343:	83 c4 10             	add    $0x10,%esp
			break;
f010a346:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010a347:	8b 45 08             	mov    0x8(%ebp),%eax
f010a34a:	8b 40 74             	mov    0x74(%eax),%eax
f010a34d:	83 ec 08             	sub    $0x8,%esp
f010a350:	50                   	push   %eax
f010a351:	68 51 59 13 f0       	push   $0xf0135951
f010a356:	e8 d2 68 ff ff       	call   f0100c2d <cprintf>
f010a35b:	83 c4 10             	add    $0x10,%esp
f010a35e:	eb 01                	jmp    f010a361 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010a360:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010a361:	c9                   	leave  
f010a362:	c3                   	ret    

f010a363 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010a363:	55                   	push   %ebp
f010a364:	89 e5                	mov    %esp,%ebp
f010a366:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a369:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a370:	eb 29                	jmp    f010a39b <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010a372:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a375:	89 d0                	mov    %edx,%eax
f010a377:	01 c0                	add    %eax,%eax
f010a379:	01 d0                	add    %edx,%eax
f010a37b:	c1 e0 02             	shl    $0x2,%eax
f010a37e:	05 00 f9 18 f0       	add    $0xf018f900,%eax
f010a383:	8b 00                	mov    (%eax),%eax
f010a385:	83 ec 08             	sub    $0x8,%esp
f010a388:	50                   	push   %eax
f010a389:	ff 75 08             	pushl  0x8(%ebp)
f010a38c:	e8 12 5e 02 00       	call   f01301a3 <strcmp>
f010a391:	83 c4 10             	add    $0x10,%esp
f010a394:	85 c0                	test   %eax,%eax
f010a396:	74 0f                	je     f010a3a7 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a398:	ff 45 f4             	incl   -0xc(%ebp)
f010a39b:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a3a0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a3a3:	7c cd                	jl     f010a372 <get_user_program_info+0xf>
f010a3a5:	eb 01                	jmp    f010a3a8 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010a3a7:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a3a8:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a3ad:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a3b0:	75 1a                	jne    f010a3cc <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010a3b2:	83 ec 08             	sub    $0x8,%esp
f010a3b5:	ff 75 08             	pushl  0x8(%ebp)
f010a3b8:	68 9d 63 13 f0       	push   $0xf013639d
f010a3bd:	e8 6b 68 ff ff       	call   f0100c2d <cprintf>
f010a3c2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a3c5:	b8 00 00 00 00       	mov    $0x0,%eax
f010a3ca:	eb 11                	jmp    f010a3dd <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010a3cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3cf:	89 d0                	mov    %edx,%eax
f010a3d1:	01 c0                	add    %eax,%eax
f010a3d3:	01 d0                	add    %edx,%eax
f010a3d5:	c1 e0 02             	shl    $0x2,%eax
f010a3d8:	05 00 f9 18 f0       	add    $0xf018f900,%eax
}
f010a3dd:	c9                   	leave  
f010a3de:	c3                   	ret    

f010a3df <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010a3df:	55                   	push   %ebp
f010a3e0:	89 e5                	mov    %esp,%ebp
f010a3e2:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a3e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a3ec:	eb 30                	jmp    f010a41e <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010a3ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3f1:	89 d0                	mov    %edx,%eax
f010a3f3:	01 c0                	add    %eax,%eax
f010a3f5:	01 d0                	add    %edx,%eax
f010a3f7:	c1 e0 02             	shl    $0x2,%eax
f010a3fa:	05 00 f9 18 f0       	add    $0xf018f900,%eax
f010a3ff:	8b 00                	mov    (%eax),%eax
f010a401:	8b 55 08             	mov    0x8(%ebp),%edx
f010a404:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010a40a:	83 ec 08             	sub    $0x8,%esp
f010a40d:	50                   	push   %eax
f010a40e:	52                   	push   %edx
f010a40f:	e8 8f 5d 02 00       	call   f01301a3 <strcmp>
f010a414:	83 c4 10             	add    $0x10,%esp
f010a417:	85 c0                	test   %eax,%eax
f010a419:	74 0f                	je     f010a42a <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a41b:	ff 45 f4             	incl   -0xc(%ebp)
f010a41e:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a423:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a426:	7c c6                	jl     f010a3ee <get_user_program_info_by_env+0xf>
f010a428:	eb 01                	jmp    f010a42b <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010a42a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a42b:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a430:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a433:	75 17                	jne    f010a44c <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010a435:	83 ec 0c             	sub    $0xc,%esp
f010a438:	68 b8 63 13 f0       	push   $0xf01363b8
f010a43d:	e8 eb 67 ff ff       	call   f0100c2d <cprintf>
f010a442:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a445:	b8 00 00 00 00       	mov    $0x0,%eax
f010a44a:	eb 11                	jmp    f010a45d <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010a44c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a44f:	89 d0                	mov    %edx,%eax
f010a451:	01 c0                	add    %eax,%eax
f010a453:	01 d0                	add    %edx,%eax
f010a455:	c1 e0 02             	shl    $0x2,%eax
f010a458:	05 00 f9 18 f0       	add    $0xf018f900,%eax
}
f010a45d:	c9                   	leave  
f010a45e:	c3                   	ret    

f010a45f <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010a45f:	55                   	push   %ebp
f010a460:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010a462:	8b 45 08             	mov    0x8(%ebp),%eax
f010a465:	83 f8 13             	cmp    $0x13,%eax
f010a468:	77 0c                	ja     f010a476 <trapname+0x17>
		return excnames[trapno];
f010a46a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a46d:	8b 04 85 40 67 13 f0 	mov    -0xfec98c0(,%eax,4),%eax
f010a474:	eb 12                	jmp    f010a488 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010a476:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010a47a:	75 07                	jne    f010a483 <trapname+0x24>
		return "System call";
f010a47c:	b8 e0 63 13 f0       	mov    $0xf01363e0,%eax
f010a481:	eb 05                	jmp    f010a488 <trapname+0x29>
	return "(unknown trap)";
f010a483:	b8 ec 63 13 f0       	mov    $0xf01363ec,%eax
}
f010a488:	5d                   	pop    %ebp
f010a489:	c3                   	ret    

f010a48a <idt_init>:


void
idt_init(void)
{
f010a48a:	55                   	push   %ebp
f010a48b:	89 e5                	mov    %esp,%ebp
f010a48d:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010a490:	b8 8e ba 10 f0       	mov    $0xf010ba8e,%eax
f010a495:	66 a3 d0 77 65 f0    	mov    %ax,0xf06577d0
f010a49b:	66 c7 05 d2 77 65 f0 	movw   $0x8,0xf06577d2
f010a4a2:	08 00 
f010a4a4:	a0 d4 77 65 f0       	mov    0xf06577d4,%al
f010a4a9:	83 e0 e0             	and    $0xffffffe0,%eax
f010a4ac:	a2 d4 77 65 f0       	mov    %al,0xf06577d4
f010a4b1:	a0 d4 77 65 f0       	mov    0xf06577d4,%al
f010a4b6:	83 e0 1f             	and    $0x1f,%eax
f010a4b9:	a2 d4 77 65 f0       	mov    %al,0xf06577d4
f010a4be:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4c3:	83 e0 f0             	and    $0xfffffff0,%eax
f010a4c6:	83 c8 0e             	or     $0xe,%eax
f010a4c9:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4ce:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4d3:	83 e0 ef             	and    $0xffffffef,%eax
f010a4d6:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4db:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4e0:	83 e0 9f             	and    $0xffffff9f,%eax
f010a4e3:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4e8:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4ed:	83 c8 80             	or     $0xffffff80,%eax
f010a4f0:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4f5:	b8 8e ba 10 f0       	mov    $0xf010ba8e,%eax
f010a4fa:	c1 e8 10             	shr    $0x10,%eax
f010a4fd:	66 a3 d6 77 65 f0    	mov    %ax,0xf06577d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010a503:	b8 96 ba 10 f0       	mov    $0xf010ba96,%eax
f010a508:	66 a3 e0 78 65 f0    	mov    %ax,0xf06578e0
f010a50e:	66 c7 05 e2 78 65 f0 	movw   $0x8,0xf06578e2
f010a515:	08 00 
f010a517:	a0 e4 78 65 f0       	mov    0xf06578e4,%al
f010a51c:	83 e0 e0             	and    $0xffffffe0,%eax
f010a51f:	a2 e4 78 65 f0       	mov    %al,0xf06578e4
f010a524:	a0 e4 78 65 f0       	mov    0xf06578e4,%al
f010a529:	83 e0 1f             	and    $0x1f,%eax
f010a52c:	a2 e4 78 65 f0       	mov    %al,0xf06578e4
f010a531:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a536:	83 e0 f0             	and    $0xfffffff0,%eax
f010a539:	83 c8 0e             	or     $0xe,%eax
f010a53c:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a541:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a546:	83 e0 ef             	and    $0xffffffef,%eax
f010a549:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a54e:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a553:	83 c8 60             	or     $0x60,%eax
f010a556:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a55b:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a560:	83 c8 80             	or     $0xffffff80,%eax
f010a563:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a568:	b8 96 ba 10 f0       	mov    $0xf010ba96,%eax
f010a56d:	c1 e8 10             	shr    $0x10,%eax
f010a570:	66 a3 e6 78 65 f0    	mov    %ax,0xf06578e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010a576:	b8 a0 ba 10 f0       	mov    $0xf010baa0,%eax
f010a57b:	66 a3 a0 77 65 f0    	mov    %ax,0xf06577a0
f010a581:	66 c7 05 a2 77 65 f0 	movw   $0x8,0xf06577a2
f010a588:	08 00 
f010a58a:	a0 a4 77 65 f0       	mov    0xf06577a4,%al
f010a58f:	83 e0 e0             	and    $0xffffffe0,%eax
f010a592:	a2 a4 77 65 f0       	mov    %al,0xf06577a4
f010a597:	a0 a4 77 65 f0       	mov    0xf06577a4,%al
f010a59c:	83 e0 1f             	and    $0x1f,%eax
f010a59f:	a2 a4 77 65 f0       	mov    %al,0xf06577a4
f010a5a4:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a5a9:	83 e0 f0             	and    $0xfffffff0,%eax
f010a5ac:	83 c8 0e             	or     $0xe,%eax
f010a5af:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a5b4:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a5b9:	83 e0 ef             	and    $0xffffffef,%eax
f010a5bc:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a5c1:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a5c6:	83 e0 9f             	and    $0xffffff9f,%eax
f010a5c9:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a5ce:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a5d3:	83 c8 80             	or     $0xffffff80,%eax
f010a5d6:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a5db:	b8 a0 ba 10 f0       	mov    $0xf010baa0,%eax
f010a5e0:	c1 e8 10             	shr    $0x10,%eax
f010a5e3:	66 a3 a6 77 65 f0    	mov    %ax,0xf06577a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010a5e9:	b8 a8 ba 10 f0       	mov    $0xf010baa8,%eax
f010a5ee:	66 a3 60 77 65 f0    	mov    %ax,0xf0657760
f010a5f4:	66 c7 05 62 77 65 f0 	movw   $0x8,0xf0657762
f010a5fb:	08 00 
f010a5fd:	a0 64 77 65 f0       	mov    0xf0657764,%al
f010a602:	83 e0 e0             	and    $0xffffffe0,%eax
f010a605:	a2 64 77 65 f0       	mov    %al,0xf0657764
f010a60a:	a0 64 77 65 f0       	mov    0xf0657764,%al
f010a60f:	83 e0 1f             	and    $0x1f,%eax
f010a612:	a2 64 77 65 f0       	mov    %al,0xf0657764
f010a617:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a61c:	83 e0 f0             	and    $0xfffffff0,%eax
f010a61f:	83 c8 0e             	or     $0xe,%eax
f010a622:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a627:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a62c:	83 e0 ef             	and    $0xffffffef,%eax
f010a62f:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a634:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a639:	83 c8 60             	or     $0x60,%eax
f010a63c:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a641:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a646:	83 c8 80             	or     $0xffffff80,%eax
f010a649:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a64e:	b8 a8 ba 10 f0       	mov    $0xf010baa8,%eax
f010a653:	c1 e8 10             	shr    $0x10,%eax
f010a656:	66 a3 66 77 65 f0    	mov    %ax,0xf0657766
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010a65c:	b8 b2 ba 10 f0       	mov    $0xf010bab2,%eax
f010a661:	66 a3 68 77 65 f0    	mov    %ax,0xf0657768
f010a667:	66 c7 05 6a 77 65 f0 	movw   $0x8,0xf065776a
f010a66e:	08 00 
f010a670:	a0 6c 77 65 f0       	mov    0xf065776c,%al
f010a675:	83 e0 e0             	and    $0xffffffe0,%eax
f010a678:	a2 6c 77 65 f0       	mov    %al,0xf065776c
f010a67d:	a0 6c 77 65 f0       	mov    0xf065776c,%al
f010a682:	83 e0 1f             	and    $0x1f,%eax
f010a685:	a2 6c 77 65 f0       	mov    %al,0xf065776c
f010a68a:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a68f:	83 c8 0f             	or     $0xf,%eax
f010a692:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a697:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a69c:	83 e0 ef             	and    $0xffffffef,%eax
f010a69f:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a6a4:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a6a9:	83 c8 60             	or     $0x60,%eax
f010a6ac:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a6b1:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a6b6:	83 c8 80             	or     $0xffffff80,%eax
f010a6b9:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a6be:	b8 b2 ba 10 f0       	mov    $0xf010bab2,%eax
f010a6c3:	c1 e8 10             	shr    $0x10,%eax
f010a6c6:	66 a3 6e 77 65 f0    	mov    %ax,0xf065776e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010a6cc:	b8 bc ba 10 f0       	mov    $0xf010babc,%eax
f010a6d1:	66 a3 70 77 65 f0    	mov    %ax,0xf0657770
f010a6d7:	66 c7 05 72 77 65 f0 	movw   $0x8,0xf0657772
f010a6de:	08 00 
f010a6e0:	a0 74 77 65 f0       	mov    0xf0657774,%al
f010a6e5:	83 e0 e0             	and    $0xffffffe0,%eax
f010a6e8:	a2 74 77 65 f0       	mov    %al,0xf0657774
f010a6ed:	a0 74 77 65 f0       	mov    0xf0657774,%al
f010a6f2:	83 e0 1f             	and    $0x1f,%eax
f010a6f5:	a2 74 77 65 f0       	mov    %al,0xf0657774
f010a6fa:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a6ff:	83 e0 f0             	and    $0xfffffff0,%eax
f010a702:	83 c8 0e             	or     $0xe,%eax
f010a705:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a70a:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a70f:	83 e0 ef             	and    $0xffffffef,%eax
f010a712:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a717:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a71c:	83 c8 60             	or     $0x60,%eax
f010a71f:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a724:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a729:	83 c8 80             	or     $0xffffff80,%eax
f010a72c:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a731:	b8 bc ba 10 f0       	mov    $0xf010babc,%eax
f010a736:	c1 e8 10             	shr    $0x10,%eax
f010a739:	66 a3 76 77 65 f0    	mov    %ax,0xf0657776
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010a73f:	b8 c6 ba 10 f0       	mov    $0xf010bac6,%eax
f010a744:	66 a3 78 77 65 f0    	mov    %ax,0xf0657778
f010a74a:	66 c7 05 7a 77 65 f0 	movw   $0x8,0xf065777a
f010a751:	08 00 
f010a753:	a0 7c 77 65 f0       	mov    0xf065777c,%al
f010a758:	83 e0 e0             	and    $0xffffffe0,%eax
f010a75b:	a2 7c 77 65 f0       	mov    %al,0xf065777c
f010a760:	a0 7c 77 65 f0       	mov    0xf065777c,%al
f010a765:	83 e0 1f             	and    $0x1f,%eax
f010a768:	a2 7c 77 65 f0       	mov    %al,0xf065777c
f010a76d:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a772:	83 c8 0f             	or     $0xf,%eax
f010a775:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a77a:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a77f:	83 e0 ef             	and    $0xffffffef,%eax
f010a782:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a787:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a78c:	83 c8 60             	or     $0x60,%eax
f010a78f:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a794:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a799:	83 c8 80             	or     $0xffffff80,%eax
f010a79c:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a7a1:	b8 c6 ba 10 f0       	mov    $0xf010bac6,%eax
f010a7a6:	c1 e8 10             	shr    $0x10,%eax
f010a7a9:	66 a3 7e 77 65 f0    	mov    %ax,0xf065777e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010a7af:	b8 d0 ba 10 f0       	mov    $0xf010bad0,%eax
f010a7b4:	66 a3 80 77 65 f0    	mov    %ax,0xf0657780
f010a7ba:	66 c7 05 82 77 65 f0 	movw   $0x8,0xf0657782
f010a7c1:	08 00 
f010a7c3:	a0 84 77 65 f0       	mov    0xf0657784,%al
f010a7c8:	83 e0 e0             	and    $0xffffffe0,%eax
f010a7cb:	a2 84 77 65 f0       	mov    %al,0xf0657784
f010a7d0:	a0 84 77 65 f0       	mov    0xf0657784,%al
f010a7d5:	83 e0 1f             	and    $0x1f,%eax
f010a7d8:	a2 84 77 65 f0       	mov    %al,0xf0657784
f010a7dd:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7e2:	83 c8 0f             	or     $0xf,%eax
f010a7e5:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a7ea:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7ef:	83 e0 ef             	and    $0xffffffef,%eax
f010a7f2:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a7f7:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7fc:	83 c8 60             	or     $0x60,%eax
f010a7ff:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a804:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a809:	83 c8 80             	or     $0xffffff80,%eax
f010a80c:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a811:	b8 d0 ba 10 f0       	mov    $0xf010bad0,%eax
f010a816:	c1 e8 10             	shr    $0x10,%eax
f010a819:	66 a3 86 77 65 f0    	mov    %ax,0xf0657786
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010a81f:	b8 da ba 10 f0       	mov    $0xf010bada,%eax
f010a824:	66 a3 88 77 65 f0    	mov    %ax,0xf0657788
f010a82a:	66 c7 05 8a 77 65 f0 	movw   $0x8,0xf065778a
f010a831:	08 00 
f010a833:	a0 8c 77 65 f0       	mov    0xf065778c,%al
f010a838:	83 e0 e0             	and    $0xffffffe0,%eax
f010a83b:	a2 8c 77 65 f0       	mov    %al,0xf065778c
f010a840:	a0 8c 77 65 f0       	mov    0xf065778c,%al
f010a845:	83 e0 1f             	and    $0x1f,%eax
f010a848:	a2 8c 77 65 f0       	mov    %al,0xf065778c
f010a84d:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a852:	83 e0 f0             	and    $0xfffffff0,%eax
f010a855:	83 c8 0e             	or     $0xe,%eax
f010a858:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a85d:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a862:	83 e0 ef             	and    $0xffffffef,%eax
f010a865:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a86a:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a86f:	83 c8 60             	or     $0x60,%eax
f010a872:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a877:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a87c:	83 c8 80             	or     $0xffffff80,%eax
f010a87f:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a884:	b8 da ba 10 f0       	mov    $0xf010bada,%eax
f010a889:	c1 e8 10             	shr    $0x10,%eax
f010a88c:	66 a3 8e 77 65 f0    	mov    %ax,0xf065778e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010a892:	b8 e4 ba 10 f0       	mov    $0xf010bae4,%eax
f010a897:	66 a3 90 77 65 f0    	mov    %ax,0xf0657790
f010a89d:	66 c7 05 92 77 65 f0 	movw   $0x8,0xf0657792
f010a8a4:	08 00 
f010a8a6:	a0 94 77 65 f0       	mov    0xf0657794,%al
f010a8ab:	83 e0 e0             	and    $0xffffffe0,%eax
f010a8ae:	a2 94 77 65 f0       	mov    %al,0xf0657794
f010a8b3:	a0 94 77 65 f0       	mov    0xf0657794,%al
f010a8b8:	83 e0 1f             	and    $0x1f,%eax
f010a8bb:	a2 94 77 65 f0       	mov    %al,0xf0657794
f010a8c0:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8c5:	83 e0 f0             	and    $0xfffffff0,%eax
f010a8c8:	83 c8 0e             	or     $0xe,%eax
f010a8cb:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8d0:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8d5:	83 e0 ef             	and    $0xffffffef,%eax
f010a8d8:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8dd:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8e2:	83 c8 60             	or     $0x60,%eax
f010a8e5:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8ea:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8ef:	83 c8 80             	or     $0xffffff80,%eax
f010a8f2:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8f7:	b8 e4 ba 10 f0       	mov    $0xf010bae4,%eax
f010a8fc:	c1 e8 10             	shr    $0x10,%eax
f010a8ff:	66 a3 96 77 65 f0    	mov    %ax,0xf0657796
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010a905:	b8 ee ba 10 f0       	mov    $0xf010baee,%eax
f010a90a:	66 a3 98 77 65 f0    	mov    %ax,0xf0657798
f010a910:	66 c7 05 9a 77 65 f0 	movw   $0x8,0xf065779a
f010a917:	08 00 
f010a919:	a0 9c 77 65 f0       	mov    0xf065779c,%al
f010a91e:	83 e0 e0             	and    $0xffffffe0,%eax
f010a921:	a2 9c 77 65 f0       	mov    %al,0xf065779c
f010a926:	a0 9c 77 65 f0       	mov    0xf065779c,%al
f010a92b:	83 e0 1f             	and    $0x1f,%eax
f010a92e:	a2 9c 77 65 f0       	mov    %al,0xf065779c
f010a933:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a938:	83 e0 f0             	and    $0xfffffff0,%eax
f010a93b:	83 c8 0e             	or     $0xe,%eax
f010a93e:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a943:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a948:	83 e0 ef             	and    $0xffffffef,%eax
f010a94b:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a950:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a955:	83 c8 60             	or     $0x60,%eax
f010a958:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a95d:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a962:	83 c8 80             	or     $0xffffff80,%eax
f010a965:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a96a:	b8 ee ba 10 f0       	mov    $0xf010baee,%eax
f010a96f:	c1 e8 10             	shr    $0x10,%eax
f010a972:	66 a3 9e 77 65 f0    	mov    %ax,0xf065779e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010a978:	b8 f8 ba 10 f0       	mov    $0xf010baf8,%eax
f010a97d:	66 a3 b0 77 65 f0    	mov    %ax,0xf06577b0
f010a983:	66 c7 05 b2 77 65 f0 	movw   $0x8,0xf06577b2
f010a98a:	08 00 
f010a98c:	a0 b4 77 65 f0       	mov    0xf06577b4,%al
f010a991:	83 e0 e0             	and    $0xffffffe0,%eax
f010a994:	a2 b4 77 65 f0       	mov    %al,0xf06577b4
f010a999:	a0 b4 77 65 f0       	mov    0xf06577b4,%al
f010a99e:	83 e0 1f             	and    $0x1f,%eax
f010a9a1:	a2 b4 77 65 f0       	mov    %al,0xf06577b4
f010a9a6:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a9ab:	83 e0 f0             	and    $0xfffffff0,%eax
f010a9ae:	83 c8 0e             	or     $0xe,%eax
f010a9b1:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a9b6:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a9bb:	83 e0 ef             	and    $0xffffffef,%eax
f010a9be:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a9c3:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a9c8:	83 c8 60             	or     $0x60,%eax
f010a9cb:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a9d0:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a9d5:	83 c8 80             	or     $0xffffff80,%eax
f010a9d8:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a9dd:	b8 f8 ba 10 f0       	mov    $0xf010baf8,%eax
f010a9e2:	c1 e8 10             	shr    $0x10,%eax
f010a9e5:	66 a3 b6 77 65 f0    	mov    %ax,0xf06577b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010a9eb:	b8 00 bb 10 f0       	mov    $0xf010bb00,%eax
f010a9f0:	66 a3 b8 77 65 f0    	mov    %ax,0xf06577b8
f010a9f6:	66 c7 05 ba 77 65 f0 	movw   $0x8,0xf06577ba
f010a9fd:	08 00 
f010a9ff:	a0 bc 77 65 f0       	mov    0xf06577bc,%al
f010aa04:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa07:	a2 bc 77 65 f0       	mov    %al,0xf06577bc
f010aa0c:	a0 bc 77 65 f0       	mov    0xf06577bc,%al
f010aa11:	83 e0 1f             	and    $0x1f,%eax
f010aa14:	a2 bc 77 65 f0       	mov    %al,0xf06577bc
f010aa19:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010aa1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010aa21:	83 c8 0e             	or     $0xe,%eax
f010aa24:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa29:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010aa2e:	83 e0 ef             	and    $0xffffffef,%eax
f010aa31:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa36:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010aa3b:	83 c8 60             	or     $0x60,%eax
f010aa3e:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa43:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010aa48:	83 c8 80             	or     $0xffffff80,%eax
f010aa4b:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa50:	b8 00 bb 10 f0       	mov    $0xf010bb00,%eax
f010aa55:	c1 e8 10             	shr    $0x10,%eax
f010aa58:	66 a3 be 77 65 f0    	mov    %ax,0xf06577be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010aa5e:	b8 04 bb 10 f0       	mov    $0xf010bb04,%eax
f010aa63:	66 a3 c0 77 65 f0    	mov    %ax,0xf06577c0
f010aa69:	66 c7 05 c2 77 65 f0 	movw   $0x8,0xf06577c2
f010aa70:	08 00 
f010aa72:	a0 c4 77 65 f0       	mov    0xf06577c4,%al
f010aa77:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa7a:	a2 c4 77 65 f0       	mov    %al,0xf06577c4
f010aa7f:	a0 c4 77 65 f0       	mov    0xf06577c4,%al
f010aa84:	83 e0 1f             	and    $0x1f,%eax
f010aa87:	a2 c4 77 65 f0       	mov    %al,0xf06577c4
f010aa8c:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aa91:	83 e0 f0             	and    $0xfffffff0,%eax
f010aa94:	83 c8 0e             	or     $0xe,%eax
f010aa97:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aa9c:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aaa1:	83 e0 ef             	and    $0xffffffef,%eax
f010aaa4:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aaa9:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aaae:	83 c8 60             	or     $0x60,%eax
f010aab1:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aab6:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aabb:	83 c8 80             	or     $0xffffff80,%eax
f010aabe:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aac3:	b8 04 bb 10 f0       	mov    $0xf010bb04,%eax
f010aac8:	c1 e8 10             	shr    $0x10,%eax
f010aacb:	66 a3 c6 77 65 f0    	mov    %ax,0xf06577c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010aad1:	b8 08 bb 10 f0       	mov    $0xf010bb08,%eax
f010aad6:	66 a3 c8 77 65 f0    	mov    %ax,0xf06577c8
f010aadc:	66 c7 05 ca 77 65 f0 	movw   $0x8,0xf06577ca
f010aae3:	08 00 
f010aae5:	a0 cc 77 65 f0       	mov    0xf06577cc,%al
f010aaea:	83 e0 e0             	and    $0xffffffe0,%eax
f010aaed:	a2 cc 77 65 f0       	mov    %al,0xf06577cc
f010aaf2:	a0 cc 77 65 f0       	mov    0xf06577cc,%al
f010aaf7:	83 e0 1f             	and    $0x1f,%eax
f010aafa:	a2 cc 77 65 f0       	mov    %al,0xf06577cc
f010aaff:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010ab04:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab07:	83 c8 0e             	or     $0xe,%eax
f010ab0a:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010ab0f:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010ab14:	83 e0 ef             	and    $0xffffffef,%eax
f010ab17:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010ab1c:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010ab21:	83 c8 60             	or     $0x60,%eax
f010ab24:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010ab29:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010ab2e:	83 c8 80             	or     $0xffffff80,%eax
f010ab31:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010ab36:	b8 08 bb 10 f0       	mov    $0xf010bb08,%eax
f010ab3b:	c1 e8 10             	shr    $0x10,%eax
f010ab3e:	66 a3 ce 77 65 f0    	mov    %ax,0xf06577ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010ab44:	b8 0c bb 10 f0       	mov    $0xf010bb0c,%eax
f010ab49:	66 a3 e0 77 65 f0    	mov    %ax,0xf06577e0
f010ab4f:	66 c7 05 e2 77 65 f0 	movw   $0x8,0xf06577e2
f010ab56:	08 00 
f010ab58:	a0 e4 77 65 f0       	mov    0xf06577e4,%al
f010ab5d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab60:	a2 e4 77 65 f0       	mov    %al,0xf06577e4
f010ab65:	a0 e4 77 65 f0       	mov    0xf06577e4,%al
f010ab6a:	83 e0 1f             	and    $0x1f,%eax
f010ab6d:	a2 e4 77 65 f0       	mov    %al,0xf06577e4
f010ab72:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab77:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab7a:	83 c8 0e             	or     $0xe,%eax
f010ab7d:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab82:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab87:	83 e0 ef             	and    $0xffffffef,%eax
f010ab8a:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab8f:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab94:	83 c8 60             	or     $0x60,%eax
f010ab97:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab9c:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010aba1:	83 c8 80             	or     $0xffffff80,%eax
f010aba4:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010aba9:	b8 0c bb 10 f0       	mov    $0xf010bb0c,%eax
f010abae:	c1 e8 10             	shr    $0x10,%eax
f010abb1:	66 a3 e6 77 65 f0    	mov    %ax,0xf06577e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010abb7:	b8 12 bb 10 f0       	mov    $0xf010bb12,%eax
f010abbc:	66 a3 e8 77 65 f0    	mov    %ax,0xf06577e8
f010abc2:	66 c7 05 ea 77 65 f0 	movw   $0x8,0xf06577ea
f010abc9:	08 00 
f010abcb:	a0 ec 77 65 f0       	mov    0xf06577ec,%al
f010abd0:	83 e0 e0             	and    $0xffffffe0,%eax
f010abd3:	a2 ec 77 65 f0       	mov    %al,0xf06577ec
f010abd8:	a0 ec 77 65 f0       	mov    0xf06577ec,%al
f010abdd:	83 e0 1f             	and    $0x1f,%eax
f010abe0:	a2 ec 77 65 f0       	mov    %al,0xf06577ec
f010abe5:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010abea:	83 e0 f0             	and    $0xfffffff0,%eax
f010abed:	83 c8 0e             	or     $0xe,%eax
f010abf0:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010abf5:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010abfa:	83 e0 ef             	and    $0xffffffef,%eax
f010abfd:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010ac02:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010ac07:	83 c8 60             	or     $0x60,%eax
f010ac0a:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010ac0f:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010ac14:	83 c8 80             	or     $0xffffff80,%eax
f010ac17:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010ac1c:	b8 12 bb 10 f0       	mov    $0xf010bb12,%eax
f010ac21:	c1 e8 10             	shr    $0x10,%eax
f010ac24:	66 a3 ee 77 65 f0    	mov    %ax,0xf06577ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010ac2a:	b8 16 bb 10 f0       	mov    $0xf010bb16,%eax
f010ac2f:	66 a3 f0 77 65 f0    	mov    %ax,0xf06577f0
f010ac35:	66 c7 05 f2 77 65 f0 	movw   $0x8,0xf06577f2
f010ac3c:	08 00 
f010ac3e:	a0 f4 77 65 f0       	mov    0xf06577f4,%al
f010ac43:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac46:	a2 f4 77 65 f0       	mov    %al,0xf06577f4
f010ac4b:	a0 f4 77 65 f0       	mov    0xf06577f4,%al
f010ac50:	83 e0 1f             	and    $0x1f,%eax
f010ac53:	a2 f4 77 65 f0       	mov    %al,0xf06577f4
f010ac58:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac60:	83 c8 0e             	or     $0xe,%eax
f010ac63:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac68:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac6d:	83 e0 ef             	and    $0xffffffef,%eax
f010ac70:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac75:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac7a:	83 c8 60             	or     $0x60,%eax
f010ac7d:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac82:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac87:	83 c8 80             	or     $0xffffff80,%eax
f010ac8a:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac8f:	b8 16 bb 10 f0       	mov    $0xf010bb16,%eax
f010ac94:	c1 e8 10             	shr    $0x10,%eax
f010ac97:	66 a3 f6 77 65 f0    	mov    %ax,0xf06577f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010ac9d:	b8 1c bb 10 f0       	mov    $0xf010bb1c,%eax
f010aca2:	66 a3 f8 77 65 f0    	mov    %ax,0xf06577f8
f010aca8:	66 c7 05 fa 77 65 f0 	movw   $0x8,0xf06577fa
f010acaf:	08 00 
f010acb1:	a0 fc 77 65 f0       	mov    0xf06577fc,%al
f010acb6:	83 e0 e0             	and    $0xffffffe0,%eax
f010acb9:	a2 fc 77 65 f0       	mov    %al,0xf06577fc
f010acbe:	a0 fc 77 65 f0       	mov    0xf06577fc,%al
f010acc3:	83 e0 1f             	and    $0x1f,%eax
f010acc6:	a2 fc 77 65 f0       	mov    %al,0xf06577fc
f010accb:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010acd0:	83 e0 f0             	and    $0xfffffff0,%eax
f010acd3:	83 c8 0e             	or     $0xe,%eax
f010acd6:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010acdb:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010ace0:	83 e0 ef             	and    $0xffffffef,%eax
f010ace3:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010ace8:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010aced:	83 c8 60             	or     $0x60,%eax
f010acf0:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010acf5:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010acfa:	83 c8 80             	or     $0xffffff80,%eax
f010acfd:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010ad02:	b8 1c bb 10 f0       	mov    $0xf010bb1c,%eax
f010ad07:	c1 e8 10             	shr    $0x10,%eax
f010ad0a:	66 a3 fe 77 65 f0    	mov    %ax,0xf06577fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010ad10:	b8 22 bb 10 f0       	mov    $0xf010bb22,%eax
f010ad15:	66 a3 60 78 65 f0    	mov    %ax,0xf0657860
f010ad1b:	66 c7 05 62 78 65 f0 	movw   $0x8,0xf0657862
f010ad22:	08 00 
f010ad24:	a0 64 78 65 f0       	mov    0xf0657864,%al
f010ad29:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad2c:	a2 64 78 65 f0       	mov    %al,0xf0657864
f010ad31:	a0 64 78 65 f0       	mov    0xf0657864,%al
f010ad36:	83 e0 1f             	and    $0x1f,%eax
f010ad39:	a2 64 78 65 f0       	mov    %al,0xf0657864
f010ad3e:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad43:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad46:	83 c8 0e             	or     $0xe,%eax
f010ad49:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad4e:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad53:	83 e0 ef             	and    $0xffffffef,%eax
f010ad56:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad5b:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad60:	83 c8 60             	or     $0x60,%eax
f010ad63:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad68:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad6d:	83 c8 80             	or     $0xffffff80,%eax
f010ad70:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad75:	b8 22 bb 10 f0       	mov    $0xf010bb22,%eax
f010ad7a:	c1 e8 10             	shr    $0x10,%eax
f010ad7d:	66 a3 66 78 65 f0    	mov    %ax,0xf0657866
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010ad83:	b8 28 bb 10 f0       	mov    $0xf010bb28,%eax
f010ad88:	66 a3 68 78 65 f0    	mov    %ax,0xf0657868
f010ad8e:	66 c7 05 6a 78 65 f0 	movw   $0x8,0xf065786a
f010ad95:	08 00 
f010ad97:	a0 6c 78 65 f0       	mov    0xf065786c,%al
f010ad9c:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad9f:	a2 6c 78 65 f0       	mov    %al,0xf065786c
f010ada4:	a0 6c 78 65 f0       	mov    0xf065786c,%al
f010ada9:	83 e0 1f             	and    $0x1f,%eax
f010adac:	a2 6c 78 65 f0       	mov    %al,0xf065786c
f010adb1:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010adb6:	83 e0 f0             	and    $0xfffffff0,%eax
f010adb9:	83 c8 0e             	or     $0xe,%eax
f010adbc:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010adc1:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010adc6:	83 e0 ef             	and    $0xffffffef,%eax
f010adc9:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010adce:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010add3:	83 c8 60             	or     $0x60,%eax
f010add6:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010addb:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010ade0:	83 c8 80             	or     $0xffffff80,%eax
f010ade3:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010ade8:	b8 28 bb 10 f0       	mov    $0xf010bb28,%eax
f010aded:	c1 e8 10             	shr    $0x10,%eax
f010adf0:	66 a3 6e 78 65 f0    	mov    %ax,0xf065786e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010adf6:	b8 2e bb 10 f0       	mov    $0xf010bb2e,%eax
f010adfb:	66 a3 70 78 65 f0    	mov    %ax,0xf0657870
f010ae01:	66 c7 05 72 78 65 f0 	movw   $0x8,0xf0657872
f010ae08:	08 00 
f010ae0a:	a0 74 78 65 f0       	mov    0xf0657874,%al
f010ae0f:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae12:	a2 74 78 65 f0       	mov    %al,0xf0657874
f010ae17:	a0 74 78 65 f0       	mov    0xf0657874,%al
f010ae1c:	83 e0 1f             	and    $0x1f,%eax
f010ae1f:	a2 74 78 65 f0       	mov    %al,0xf0657874
f010ae24:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae29:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae2c:	83 c8 0e             	or     $0xe,%eax
f010ae2f:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae34:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae39:	83 e0 ef             	and    $0xffffffef,%eax
f010ae3c:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae41:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae46:	83 c8 60             	or     $0x60,%eax
f010ae49:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae4e:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae53:	83 c8 80             	or     $0xffffff80,%eax
f010ae56:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae5b:	b8 2e bb 10 f0       	mov    $0xf010bb2e,%eax
f010ae60:	c1 e8 10             	shr    $0x10,%eax
f010ae63:	66 a3 76 78 65 f0    	mov    %ax,0xf0657876
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010ae69:	b8 34 bb 10 f0       	mov    $0xf010bb34,%eax
f010ae6e:	66 a3 78 78 65 f0    	mov    %ax,0xf0657878
f010ae74:	66 c7 05 7a 78 65 f0 	movw   $0x8,0xf065787a
f010ae7b:	08 00 
f010ae7d:	a0 7c 78 65 f0       	mov    0xf065787c,%al
f010ae82:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae85:	a2 7c 78 65 f0       	mov    %al,0xf065787c
f010ae8a:	a0 7c 78 65 f0       	mov    0xf065787c,%al
f010ae8f:	83 e0 1f             	and    $0x1f,%eax
f010ae92:	a2 7c 78 65 f0       	mov    %al,0xf065787c
f010ae97:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010ae9c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae9f:	83 c8 0e             	or     $0xe,%eax
f010aea2:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010aea7:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010aeac:	83 e0 ef             	and    $0xffffffef,%eax
f010aeaf:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010aeb4:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010aeb9:	83 c8 60             	or     $0x60,%eax
f010aebc:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010aec1:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010aec6:	83 c8 80             	or     $0xffffff80,%eax
f010aec9:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010aece:	b8 34 bb 10 f0       	mov    $0xf010bb34,%eax
f010aed3:	c1 e8 10             	shr    $0x10,%eax
f010aed6:	66 a3 7e 78 65 f0    	mov    %ax,0xf065787e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010aedc:	b8 3a bb 10 f0       	mov    $0xf010bb3a,%eax
f010aee1:	66 a3 80 78 65 f0    	mov    %ax,0xf0657880
f010aee7:	66 c7 05 82 78 65 f0 	movw   $0x8,0xf0657882
f010aeee:	08 00 
f010aef0:	a0 84 78 65 f0       	mov    0xf0657884,%al
f010aef5:	83 e0 e0             	and    $0xffffffe0,%eax
f010aef8:	a2 84 78 65 f0       	mov    %al,0xf0657884
f010aefd:	a0 84 78 65 f0       	mov    0xf0657884,%al
f010af02:	83 e0 1f             	and    $0x1f,%eax
f010af05:	a2 84 78 65 f0       	mov    %al,0xf0657884
f010af0a:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010af0f:	83 e0 f0             	and    $0xfffffff0,%eax
f010af12:	83 c8 0e             	or     $0xe,%eax
f010af15:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010af1a:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010af1f:	83 e0 ef             	and    $0xffffffef,%eax
f010af22:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010af27:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010af2c:	83 c8 60             	or     $0x60,%eax
f010af2f:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010af34:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010af39:	83 c8 80             	or     $0xffffff80,%eax
f010af3c:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010af41:	b8 3a bb 10 f0       	mov    $0xf010bb3a,%eax
f010af46:	c1 e8 10             	shr    $0x10,%eax
f010af49:	66 a3 86 78 65 f0    	mov    %ax,0xf0657886
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010af4f:	b8 40 bb 10 f0       	mov    $0xf010bb40,%eax
f010af54:	66 a3 88 78 65 f0    	mov    %ax,0xf0657888
f010af5a:	66 c7 05 8a 78 65 f0 	movw   $0x8,0xf065788a
f010af61:	08 00 
f010af63:	a0 8c 78 65 f0       	mov    0xf065788c,%al
f010af68:	83 e0 e0             	and    $0xffffffe0,%eax
f010af6b:	a2 8c 78 65 f0       	mov    %al,0xf065788c
f010af70:	a0 8c 78 65 f0       	mov    0xf065788c,%al
f010af75:	83 e0 1f             	and    $0x1f,%eax
f010af78:	a2 8c 78 65 f0       	mov    %al,0xf065788c
f010af7d:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af82:	83 e0 f0             	and    $0xfffffff0,%eax
f010af85:	83 c8 0e             	or     $0xe,%eax
f010af88:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010af8d:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af92:	83 e0 ef             	and    $0xffffffef,%eax
f010af95:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010af9a:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af9f:	83 c8 60             	or     $0x60,%eax
f010afa2:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010afa7:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010afac:	83 c8 80             	or     $0xffffff80,%eax
f010afaf:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010afb4:	b8 40 bb 10 f0       	mov    $0xf010bb40,%eax
f010afb9:	c1 e8 10             	shr    $0x10,%eax
f010afbc:	66 a3 8e 78 65 f0    	mov    %ax,0xf065788e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010afc2:	b8 46 bb 10 f0       	mov    $0xf010bb46,%eax
f010afc7:	66 a3 90 78 65 f0    	mov    %ax,0xf0657890
f010afcd:	66 c7 05 92 78 65 f0 	movw   $0x8,0xf0657892
f010afd4:	08 00 
f010afd6:	a0 94 78 65 f0       	mov    0xf0657894,%al
f010afdb:	83 e0 e0             	and    $0xffffffe0,%eax
f010afde:	a2 94 78 65 f0       	mov    %al,0xf0657894
f010afe3:	a0 94 78 65 f0       	mov    0xf0657894,%al
f010afe8:	83 e0 1f             	and    $0x1f,%eax
f010afeb:	a2 94 78 65 f0       	mov    %al,0xf0657894
f010aff0:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010aff5:	83 e0 f0             	and    $0xfffffff0,%eax
f010aff8:	83 c8 0e             	or     $0xe,%eax
f010affb:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010b000:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010b005:	83 e0 ef             	and    $0xffffffef,%eax
f010b008:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010b00d:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010b012:	83 c8 60             	or     $0x60,%eax
f010b015:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010b01a:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010b01f:	83 c8 80             	or     $0xffffff80,%eax
f010b022:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010b027:	b8 46 bb 10 f0       	mov    $0xf010bb46,%eax
f010b02c:	c1 e8 10             	shr    $0x10,%eax
f010b02f:	66 a3 96 78 65 f0    	mov    %ax,0xf0657896
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b035:	b8 4c bb 10 f0       	mov    $0xf010bb4c,%eax
f010b03a:	66 a3 98 78 65 f0    	mov    %ax,0xf0657898
f010b040:	66 c7 05 9a 78 65 f0 	movw   $0x8,0xf065789a
f010b047:	08 00 
f010b049:	a0 9c 78 65 f0       	mov    0xf065789c,%al
f010b04e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b051:	a2 9c 78 65 f0       	mov    %al,0xf065789c
f010b056:	a0 9c 78 65 f0       	mov    0xf065789c,%al
f010b05b:	83 e0 1f             	and    $0x1f,%eax
f010b05e:	a2 9c 78 65 f0       	mov    %al,0xf065789c
f010b063:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b068:	83 e0 f0             	and    $0xfffffff0,%eax
f010b06b:	83 c8 0e             	or     $0xe,%eax
f010b06e:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b073:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b078:	83 e0 ef             	and    $0xffffffef,%eax
f010b07b:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b080:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b085:	83 c8 60             	or     $0x60,%eax
f010b088:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b08d:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b092:	83 c8 80             	or     $0xffffff80,%eax
f010b095:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b09a:	b8 4c bb 10 f0       	mov    $0xf010bb4c,%eax
f010b09f:	c1 e8 10             	shr    $0x10,%eax
f010b0a2:	66 a3 9e 78 65 f0    	mov    %ax,0xf065789e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b0a8:	b8 52 bb 10 f0       	mov    $0xf010bb52,%eax
f010b0ad:	66 a3 a0 78 65 f0    	mov    %ax,0xf06578a0
f010b0b3:	66 c7 05 a2 78 65 f0 	movw   $0x8,0xf06578a2
f010b0ba:	08 00 
f010b0bc:	a0 a4 78 65 f0       	mov    0xf06578a4,%al
f010b0c1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0c4:	a2 a4 78 65 f0       	mov    %al,0xf06578a4
f010b0c9:	a0 a4 78 65 f0       	mov    0xf06578a4,%al
f010b0ce:	83 e0 1f             	and    $0x1f,%eax
f010b0d1:	a2 a4 78 65 f0       	mov    %al,0xf06578a4
f010b0d6:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0db:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0de:	83 c8 0e             	or     $0xe,%eax
f010b0e1:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b0e6:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0eb:	83 e0 ef             	and    $0xffffffef,%eax
f010b0ee:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b0f3:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0f8:	83 c8 60             	or     $0x60,%eax
f010b0fb:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b100:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b105:	83 c8 80             	or     $0xffffff80,%eax
f010b108:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b10d:	b8 52 bb 10 f0       	mov    $0xf010bb52,%eax
f010b112:	c1 e8 10             	shr    $0x10,%eax
f010b115:	66 a3 a6 78 65 f0    	mov    %ax,0xf06578a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b11b:	b8 58 bb 10 f0       	mov    $0xf010bb58,%eax
f010b120:	66 a3 a8 78 65 f0    	mov    %ax,0xf06578a8
f010b126:	66 c7 05 aa 78 65 f0 	movw   $0x8,0xf06578aa
f010b12d:	08 00 
f010b12f:	a0 ac 78 65 f0       	mov    0xf06578ac,%al
f010b134:	83 e0 e0             	and    $0xffffffe0,%eax
f010b137:	a2 ac 78 65 f0       	mov    %al,0xf06578ac
f010b13c:	a0 ac 78 65 f0       	mov    0xf06578ac,%al
f010b141:	83 e0 1f             	and    $0x1f,%eax
f010b144:	a2 ac 78 65 f0       	mov    %al,0xf06578ac
f010b149:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b14e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b151:	83 c8 0e             	or     $0xe,%eax
f010b154:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b159:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b15e:	83 e0 ef             	and    $0xffffffef,%eax
f010b161:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b166:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b16b:	83 c8 60             	or     $0x60,%eax
f010b16e:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b173:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b178:	83 c8 80             	or     $0xffffff80,%eax
f010b17b:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b180:	b8 58 bb 10 f0       	mov    $0xf010bb58,%eax
f010b185:	c1 e8 10             	shr    $0x10,%eax
f010b188:	66 a3 ae 78 65 f0    	mov    %ax,0xf06578ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b18e:	b8 5e bb 10 f0       	mov    $0xf010bb5e,%eax
f010b193:	66 a3 b0 78 65 f0    	mov    %ax,0xf06578b0
f010b199:	66 c7 05 b2 78 65 f0 	movw   $0x8,0xf06578b2
f010b1a0:	08 00 
f010b1a2:	a0 b4 78 65 f0       	mov    0xf06578b4,%al
f010b1a7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1aa:	a2 b4 78 65 f0       	mov    %al,0xf06578b4
f010b1af:	a0 b4 78 65 f0       	mov    0xf06578b4,%al
f010b1b4:	83 e0 1f             	and    $0x1f,%eax
f010b1b7:	a2 b4 78 65 f0       	mov    %al,0xf06578b4
f010b1bc:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1c1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1c4:	83 c8 0e             	or     $0xe,%eax
f010b1c7:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1cc:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1d1:	83 e0 ef             	and    $0xffffffef,%eax
f010b1d4:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1d9:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1de:	83 c8 60             	or     $0x60,%eax
f010b1e1:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1e6:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1eb:	83 c8 80             	or     $0xffffff80,%eax
f010b1ee:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1f3:	b8 5e bb 10 f0       	mov    $0xf010bb5e,%eax
f010b1f8:	c1 e8 10             	shr    $0x10,%eax
f010b1fb:	66 a3 b6 78 65 f0    	mov    %ax,0xf06578b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b201:	b8 64 bb 10 f0       	mov    $0xf010bb64,%eax
f010b206:	66 a3 b8 78 65 f0    	mov    %ax,0xf06578b8
f010b20c:	66 c7 05 ba 78 65 f0 	movw   $0x8,0xf06578ba
f010b213:	08 00 
f010b215:	a0 bc 78 65 f0       	mov    0xf06578bc,%al
f010b21a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b21d:	a2 bc 78 65 f0       	mov    %al,0xf06578bc
f010b222:	a0 bc 78 65 f0       	mov    0xf06578bc,%al
f010b227:	83 e0 1f             	and    $0x1f,%eax
f010b22a:	a2 bc 78 65 f0       	mov    %al,0xf06578bc
f010b22f:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b234:	83 e0 f0             	and    $0xfffffff0,%eax
f010b237:	83 c8 0e             	or     $0xe,%eax
f010b23a:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b23f:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b244:	83 e0 ef             	and    $0xffffffef,%eax
f010b247:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b24c:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b251:	83 c8 60             	or     $0x60,%eax
f010b254:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b259:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b25e:	83 c8 80             	or     $0xffffff80,%eax
f010b261:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b266:	b8 64 bb 10 f0       	mov    $0xf010bb64,%eax
f010b26b:	c1 e8 10             	shr    $0x10,%eax
f010b26e:	66 a3 be 78 65 f0    	mov    %ax,0xf06578be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010b274:	b8 6a bb 10 f0       	mov    $0xf010bb6a,%eax
f010b279:	66 a3 c0 78 65 f0    	mov    %ax,0xf06578c0
f010b27f:	66 c7 05 c2 78 65 f0 	movw   $0x8,0xf06578c2
f010b286:	08 00 
f010b288:	a0 c4 78 65 f0       	mov    0xf06578c4,%al
f010b28d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b290:	a2 c4 78 65 f0       	mov    %al,0xf06578c4
f010b295:	a0 c4 78 65 f0       	mov    0xf06578c4,%al
f010b29a:	83 e0 1f             	and    $0x1f,%eax
f010b29d:	a2 c4 78 65 f0       	mov    %al,0xf06578c4
f010b2a2:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b2a7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2aa:	83 c8 0e             	or     $0xe,%eax
f010b2ad:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b2b2:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b2b7:	83 e0 ef             	and    $0xffffffef,%eax
f010b2ba:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b2bf:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b2c4:	83 c8 60             	or     $0x60,%eax
f010b2c7:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b2cc:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b2d1:	83 c8 80             	or     $0xffffff80,%eax
f010b2d4:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b2d9:	b8 6a bb 10 f0       	mov    $0xf010bb6a,%eax
f010b2de:	c1 e8 10             	shr    $0x10,%eax
f010b2e1:	66 a3 c6 78 65 f0    	mov    %ax,0xf06578c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010b2e7:	b8 70 bb 10 f0       	mov    $0xf010bb70,%eax
f010b2ec:	66 a3 c8 78 65 f0    	mov    %ax,0xf06578c8
f010b2f2:	66 c7 05 ca 78 65 f0 	movw   $0x8,0xf06578ca
f010b2f9:	08 00 
f010b2fb:	a0 cc 78 65 f0       	mov    0xf06578cc,%al
f010b300:	83 e0 e0             	and    $0xffffffe0,%eax
f010b303:	a2 cc 78 65 f0       	mov    %al,0xf06578cc
f010b308:	a0 cc 78 65 f0       	mov    0xf06578cc,%al
f010b30d:	83 e0 1f             	and    $0x1f,%eax
f010b310:	a2 cc 78 65 f0       	mov    %al,0xf06578cc
f010b315:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b31a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b31d:	83 c8 0e             	or     $0xe,%eax
f010b320:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b325:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b32a:	83 e0 ef             	and    $0xffffffef,%eax
f010b32d:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b332:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b337:	83 c8 60             	or     $0x60,%eax
f010b33a:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b33f:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b344:	83 c8 80             	or     $0xffffff80,%eax
f010b347:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b34c:	b8 70 bb 10 f0       	mov    $0xf010bb70,%eax
f010b351:	c1 e8 10             	shr    $0x10,%eax
f010b354:	66 a3 ce 78 65 f0    	mov    %ax,0xf06578ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010b35a:	b8 76 bb 10 f0       	mov    $0xf010bb76,%eax
f010b35f:	66 a3 d0 78 65 f0    	mov    %ax,0xf06578d0
f010b365:	66 c7 05 d2 78 65 f0 	movw   $0x8,0xf06578d2
f010b36c:	08 00 
f010b36e:	a0 d4 78 65 f0       	mov    0xf06578d4,%al
f010b373:	83 e0 e0             	and    $0xffffffe0,%eax
f010b376:	a2 d4 78 65 f0       	mov    %al,0xf06578d4
f010b37b:	a0 d4 78 65 f0       	mov    0xf06578d4,%al
f010b380:	83 e0 1f             	and    $0x1f,%eax
f010b383:	a2 d4 78 65 f0       	mov    %al,0xf06578d4
f010b388:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b38d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b390:	83 c8 0e             	or     $0xe,%eax
f010b393:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b398:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b39d:	83 e0 ef             	and    $0xffffffef,%eax
f010b3a0:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b3a5:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b3aa:	83 c8 60             	or     $0x60,%eax
f010b3ad:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b3b2:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b3b7:	83 c8 80             	or     $0xffffff80,%eax
f010b3ba:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b3bf:	b8 76 bb 10 f0       	mov    $0xf010bb76,%eax
f010b3c4:	c1 e8 10             	shr    $0x10,%eax
f010b3c7:	66 a3 d6 78 65 f0    	mov    %ax,0xf06578d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010b3cd:	b8 7c bb 10 f0       	mov    $0xf010bb7c,%eax
f010b3d2:	66 a3 d8 78 65 f0    	mov    %ax,0xf06578d8
f010b3d8:	66 c7 05 da 78 65 f0 	movw   $0x8,0xf06578da
f010b3df:	08 00 
f010b3e1:	a0 dc 78 65 f0       	mov    0xf06578dc,%al
f010b3e6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3e9:	a2 dc 78 65 f0       	mov    %al,0xf06578dc
f010b3ee:	a0 dc 78 65 f0       	mov    0xf06578dc,%al
f010b3f3:	83 e0 1f             	and    $0x1f,%eax
f010b3f6:	a2 dc 78 65 f0       	mov    %al,0xf06578dc
f010b3fb:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b400:	83 e0 f0             	and    $0xfffffff0,%eax
f010b403:	83 c8 0e             	or     $0xe,%eax
f010b406:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b40b:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b410:	83 e0 ef             	and    $0xffffffef,%eax
f010b413:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b418:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b41d:	83 c8 60             	or     $0x60,%eax
f010b420:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b425:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b42a:	83 c8 80             	or     $0xffffff80,%eax
f010b42d:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b432:	b8 7c bb 10 f0       	mov    $0xf010bb7c,%eax
f010b437:	c1 e8 10             	shr    $0x10,%eax
f010b43a:	66 a3 de 78 65 f0    	mov    %ax,0xf06578de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010b440:	c7 05 64 7f 65 f0 00 	movl   $0xefc00000,0xf0657f64
f010b447:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010b44a:	66 c7 05 68 7f 65 f0 	movw   $0x10,0xf0657f68
f010b451:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010b453:	66 c7 05 e8 f8 18 f0 	movw   $0x68,0xf018f8e8
f010b45a:	68 00 
f010b45c:	b8 60 7f 65 f0       	mov    $0xf0657f60,%eax
f010b461:	66 a3 ea f8 18 f0    	mov    %ax,0xf018f8ea
f010b467:	b8 60 7f 65 f0       	mov    $0xf0657f60,%eax
f010b46c:	c1 e8 10             	shr    $0x10,%eax
f010b46f:	a2 ec f8 18 f0       	mov    %al,0xf018f8ec
f010b474:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b479:	83 e0 f0             	and    $0xfffffff0,%eax
f010b47c:	83 c8 09             	or     $0x9,%eax
f010b47f:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b484:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b489:	83 c8 10             	or     $0x10,%eax
f010b48c:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b491:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b496:	83 e0 9f             	and    $0xffffff9f,%eax
f010b499:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b49e:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b4a3:	83 c8 80             	or     $0xffffff80,%eax
f010b4a6:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b4ab:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4b0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4b3:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4b8:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4bd:	83 e0 ef             	and    $0xffffffef,%eax
f010b4c0:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4c5:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4ca:	83 e0 df             	and    $0xffffffdf,%eax
f010b4cd:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4d2:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4d7:	83 c8 40             	or     $0x40,%eax
f010b4da:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4df:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4e4:	83 e0 7f             	and    $0x7f,%eax
f010b4e7:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4ec:	b8 60 7f 65 f0       	mov    $0xf0657f60,%eax
f010b4f1:	c1 e8 18             	shr    $0x18,%eax
f010b4f4:	a2 ef f8 18 f0       	mov    %al,0xf018f8ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010b4f9:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b4fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b501:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b506:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010b50c:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010b510:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010b513:	0f 01 1d c8 fc 18 f0 	lidtl  0xf018fcc8
}
f010b51a:	90                   	nop
f010b51b:	c9                   	leave  
f010b51c:	c3                   	ret    

f010b51d <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010b51d:	55                   	push   %ebp
f010b51e:	89 e5                	mov    %esp,%ebp
f010b520:	53                   	push   %ebx
f010b521:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010b524:	83 ec 08             	sub    $0x8,%esp
f010b527:	ff 75 08             	pushl  0x8(%ebp)
f010b52a:	68 fb 63 13 f0       	push   $0xf01363fb
f010b52f:	e8 f9 56 ff ff       	call   f0100c2d <cprintf>
f010b534:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010b537:	8b 45 08             	mov    0x8(%ebp),%eax
f010b53a:	83 ec 0c             	sub    $0xc,%esp
f010b53d:	50                   	push   %eax
f010b53e:	e8 fd 00 00 00       	call   f010b640 <print_regs>
f010b543:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010b546:	8b 45 08             	mov    0x8(%ebp),%eax
f010b549:	8b 40 20             	mov    0x20(%eax),%eax
f010b54c:	0f b7 c0             	movzwl %ax,%eax
f010b54f:	83 ec 08             	sub    $0x8,%esp
f010b552:	50                   	push   %eax
f010b553:	68 0d 64 13 f0       	push   $0xf013640d
f010b558:	e8 d0 56 ff ff       	call   f0100c2d <cprintf>
f010b55d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010b560:	8b 45 08             	mov    0x8(%ebp),%eax
f010b563:	8b 40 24             	mov    0x24(%eax),%eax
f010b566:	0f b7 c0             	movzwl %ax,%eax
f010b569:	83 ec 08             	sub    $0x8,%esp
f010b56c:	50                   	push   %eax
f010b56d:	68 20 64 13 f0       	push   $0xf0136420
f010b572:	e8 b6 56 ff ff       	call   f0100c2d <cprintf>
f010b577:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010b57a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b57d:	8b 58 28             	mov    0x28(%eax),%ebx
f010b580:	8b 45 08             	mov    0x8(%ebp),%eax
f010b583:	8b 40 28             	mov    0x28(%eax),%eax
f010b586:	83 ec 0c             	sub    $0xc,%esp
f010b589:	50                   	push   %eax
f010b58a:	e8 d0 ee ff ff       	call   f010a45f <trapname>
f010b58f:	83 c4 10             	add    $0x10,%esp
f010b592:	89 c2                	mov    %eax,%edx
f010b594:	8b 45 08             	mov    0x8(%ebp),%eax
f010b597:	8b 40 28             	mov    0x28(%eax),%eax
f010b59a:	53                   	push   %ebx
f010b59b:	52                   	push   %edx
f010b59c:	50                   	push   %eax
f010b59d:	68 33 64 13 f0       	push   $0xf0136433
f010b5a2:	e8 86 56 ff ff       	call   f0100c2d <cprintf>
f010b5a7:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010b5aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5ad:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b5b0:	83 ec 08             	sub    $0x8,%esp
f010b5b3:	50                   	push   %eax
f010b5b4:	68 4a 64 13 f0       	push   $0xf013644a
f010b5b9:	e8 6f 56 ff ff       	call   f0100c2d <cprintf>
f010b5be:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010b5c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5c4:	8b 40 30             	mov    0x30(%eax),%eax
f010b5c7:	83 ec 08             	sub    $0x8,%esp
f010b5ca:	50                   	push   %eax
f010b5cb:	68 59 64 13 f0       	push   $0xf0136459
f010b5d0:	e8 58 56 ff ff       	call   f0100c2d <cprintf>
f010b5d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010b5d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5db:	8b 40 34             	mov    0x34(%eax),%eax
f010b5de:	0f b7 c0             	movzwl %ax,%eax
f010b5e1:	83 ec 08             	sub    $0x8,%esp
f010b5e4:	50                   	push   %eax
f010b5e5:	68 68 64 13 f0       	push   $0xf0136468
f010b5ea:	e8 3e 56 ff ff       	call   f0100c2d <cprintf>
f010b5ef:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010b5f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5f5:	8b 40 38             	mov    0x38(%eax),%eax
f010b5f8:	83 ec 08             	sub    $0x8,%esp
f010b5fb:	50                   	push   %eax
f010b5fc:	68 7b 64 13 f0       	push   $0xf013647b
f010b601:	e8 27 56 ff ff       	call   f0100c2d <cprintf>
f010b606:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010b609:	8b 45 08             	mov    0x8(%ebp),%eax
f010b60c:	8b 40 3c             	mov    0x3c(%eax),%eax
f010b60f:	83 ec 08             	sub    $0x8,%esp
f010b612:	50                   	push   %eax
f010b613:	68 8a 64 13 f0       	push   $0xf013648a
f010b618:	e8 10 56 ff ff       	call   f0100c2d <cprintf>
f010b61d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010b620:	8b 45 08             	mov    0x8(%ebp),%eax
f010b623:	8b 40 40             	mov    0x40(%eax),%eax
f010b626:	0f b7 c0             	movzwl %ax,%eax
f010b629:	83 ec 08             	sub    $0x8,%esp
f010b62c:	50                   	push   %eax
f010b62d:	68 99 64 13 f0       	push   $0xf0136499
f010b632:	e8 f6 55 ff ff       	call   f0100c2d <cprintf>
f010b637:	83 c4 10             	add    $0x10,%esp
}
f010b63a:	90                   	nop
f010b63b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b63e:	c9                   	leave  
f010b63f:	c3                   	ret    

f010b640 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010b640:	55                   	push   %ebp
f010b641:	89 e5                	mov    %esp,%ebp
f010b643:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010b646:	8b 45 08             	mov    0x8(%ebp),%eax
f010b649:	8b 00                	mov    (%eax),%eax
f010b64b:	83 ec 08             	sub    $0x8,%esp
f010b64e:	50                   	push   %eax
f010b64f:	68 ac 64 13 f0       	push   $0xf01364ac
f010b654:	e8 d4 55 ff ff       	call   f0100c2d <cprintf>
f010b659:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010b65c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b65f:	8b 40 04             	mov    0x4(%eax),%eax
f010b662:	83 ec 08             	sub    $0x8,%esp
f010b665:	50                   	push   %eax
f010b666:	68 bb 64 13 f0       	push   $0xf01364bb
f010b66b:	e8 bd 55 ff ff       	call   f0100c2d <cprintf>
f010b670:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010b673:	8b 45 08             	mov    0x8(%ebp),%eax
f010b676:	8b 40 08             	mov    0x8(%eax),%eax
f010b679:	83 ec 08             	sub    $0x8,%esp
f010b67c:	50                   	push   %eax
f010b67d:	68 ca 64 13 f0       	push   $0xf01364ca
f010b682:	e8 a6 55 ff ff       	call   f0100c2d <cprintf>
f010b687:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010b68a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b68d:	8b 40 0c             	mov    0xc(%eax),%eax
f010b690:	83 ec 08             	sub    $0x8,%esp
f010b693:	50                   	push   %eax
f010b694:	68 d9 64 13 f0       	push   $0xf01364d9
f010b699:	e8 8f 55 ff ff       	call   f0100c2d <cprintf>
f010b69e:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010b6a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6a4:	8b 40 10             	mov    0x10(%eax),%eax
f010b6a7:	83 ec 08             	sub    $0x8,%esp
f010b6aa:	50                   	push   %eax
f010b6ab:	68 e8 64 13 f0       	push   $0xf01364e8
f010b6b0:	e8 78 55 ff ff       	call   f0100c2d <cprintf>
f010b6b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010b6b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6bb:	8b 40 14             	mov    0x14(%eax),%eax
f010b6be:	83 ec 08             	sub    $0x8,%esp
f010b6c1:	50                   	push   %eax
f010b6c2:	68 f7 64 13 f0       	push   $0xf01364f7
f010b6c7:	e8 61 55 ff ff       	call   f0100c2d <cprintf>
f010b6cc:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010b6cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6d2:	8b 40 18             	mov    0x18(%eax),%eax
f010b6d5:	83 ec 08             	sub    $0x8,%esp
f010b6d8:	50                   	push   %eax
f010b6d9:	68 06 65 13 f0       	push   $0xf0136506
f010b6de:	e8 4a 55 ff ff       	call   f0100c2d <cprintf>
f010b6e3:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010b6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e9:	8b 40 1c             	mov    0x1c(%eax),%eax
f010b6ec:	83 ec 08             	sub    $0x8,%esp
f010b6ef:	50                   	push   %eax
f010b6f0:	68 15 65 13 f0       	push   $0xf0136515
f010b6f5:	e8 33 55 ff ff       	call   f0100c2d <cprintf>
f010b6fa:	83 c4 10             	add    $0x10,%esp
}
f010b6fd:	90                   	nop
f010b6fe:	c9                   	leave  
f010b6ff:	c3                   	ret    

f010b700 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010b700:	55                   	push   %ebp
f010b701:	89 e5                	mov    %esp,%ebp
f010b703:	57                   	push   %edi
f010b704:	56                   	push   %esi
f010b705:	53                   	push   %ebx
f010b706:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010b709:	8b 45 08             	mov    0x8(%ebp),%eax
f010b70c:	8b 40 28             	mov    0x28(%eax),%eax
f010b70f:	83 f8 0e             	cmp    $0xe,%eax
f010b712:	75 29                	jne    f010b73d <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010b714:	83 ec 0c             	sub    $0xc,%esp
f010b717:	6a 01                	push   $0x1
f010b719:	e8 5b 18 00 00       	call   f010cf79 <isPageReplacmentAlgorithmLRU>
f010b71e:	83 c4 10             	add    $0x10,%esp
f010b721:	85 c0                	test   %eax,%eax
f010b723:	74 05                	je     f010b72a <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010b725:	e8 8a a1 ff ff       	call   f01058b4 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010b72a:	83 ec 0c             	sub    $0xc,%esp
f010b72d:	ff 75 08             	pushl  0x8(%ebp)
f010b730:	e8 3b 02 00 00       	call   f010b970 <fault_handler>
f010b735:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010b738:	e9 a5 00 00 00       	jmp    f010b7e2 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010b73d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b740:	8b 40 28             	mov    0x28(%eax),%eax
f010b743:	83 f8 30             	cmp    $0x30,%eax
f010b746:	75 42                	jne    f010b78a <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010b748:	8b 45 08             	mov    0x8(%ebp),%eax
f010b74b:	8b 78 04             	mov    0x4(%eax),%edi
f010b74e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b751:	8b 30                	mov    (%eax),%esi
f010b753:	8b 45 08             	mov    0x8(%ebp),%eax
f010b756:	8b 58 10             	mov    0x10(%eax),%ebx
f010b759:	8b 45 08             	mov    0x8(%ebp),%eax
f010b75c:	8b 48 18             	mov    0x18(%eax),%ecx
f010b75f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b762:	8b 50 14             	mov    0x14(%eax),%edx
f010b765:	8b 45 08             	mov    0x8(%ebp),%eax
f010b768:	8b 40 1c             	mov    0x1c(%eax),%eax
f010b76b:	83 ec 08             	sub    $0x8,%esp
f010b76e:	57                   	push   %edi
f010b76f:	56                   	push   %esi
f010b770:	53                   	push   %ebx
f010b771:	51                   	push   %ecx
f010b772:	52                   	push   %edx
f010b773:	50                   	push   %eax
f010b774:	e8 4b 0f 00 00       	call   f010c6c4 <syscall>
f010b779:	83 c4 20             	add    $0x20,%esp
f010b77c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010b77f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b782:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b785:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010b788:	eb 58                	jmp    f010b7e2 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010b78a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b78d:	8b 40 28             	mov    0x28(%eax),%eax
f010b790:	83 f8 08             	cmp    $0x8,%eax
f010b793:	75 17                	jne    f010b7ac <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010b795:	83 ec 04             	sub    $0x4,%esp
f010b798:	68 24 65 13 f0       	push   $0xf0136524
f010b79d:	68 e7 00 00 00       	push   $0xe7
f010b7a2:	68 33 65 13 f0       	push   $0xf0136533
f010b7a7:	e8 fa 49 ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010b7ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7af:	8b 40 28             	mov    0x28(%eax),%eax
f010b7b2:	83 f8 20             	cmp    $0x20,%eax
f010b7b5:	75 07                	jne    f010b7be <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010b7b7:	e8 d7 a0 ff ff       	call   f0105893 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010b7bc:	eb 24                	jmp    f010b7e2 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010b7be:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7c1:	8b 40 34             	mov    0x34(%eax),%eax
f010b7c4:	66 83 f8 08          	cmp    $0x8,%ax
f010b7c8:	75 17                	jne    f010b7e1 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010b7ca:	83 ec 04             	sub    $0x4,%esp
f010b7cd:	68 44 65 13 f0       	push   $0xf0136544
f010b7d2:	68 f4 00 00 00       	push   $0xf4
f010b7d7:	68 33 65 13 f0       	push   $0xf0136533
f010b7dc:	e8 c5 49 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010b7e1:	90                   	nop
		}
	}
	return;
}
f010b7e2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b7e5:	5b                   	pop    %ebx
f010b7e6:	5e                   	pop    %esi
f010b7e7:	5f                   	pop    %edi
f010b7e8:	5d                   	pop    %ebp
f010b7e9:	c3                   	ret    

f010b7ea <trap>:

void trap(struct Trapframe *tf)
{
f010b7ea:	55                   	push   %ebp
f010b7eb:	89 e5                	mov    %esp,%ebp
f010b7ed:	57                   	push   %edi
f010b7ee:	56                   	push   %esi
f010b7ef:	53                   	push   %ebx
f010b7f0:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010b7f3:	e8 b6 88 ff ff       	call   f01040ae <kclock_stop>

	int userTrap = 0;
f010b7f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010b7ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010b802:	8b 40 34             	mov    0x34(%eax),%eax
f010b805:	0f b7 c0             	movzwl %ax,%eax
f010b808:	83 e0 03             	and    $0x3,%eax
f010b80b:	83 f8 03             	cmp    $0x3,%eax
f010b80e:	75 49                	jne    f010b859 <trap+0x6f>
		assert(curenv);
f010b810:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b815:	85 c0                	test   %eax,%eax
f010b817:	75 19                	jne    f010b832 <trap+0x48>
f010b819:	68 5d 65 13 f0       	push   $0xf013655d
f010b81e:	68 64 65 13 f0       	push   $0xf0136564
f010b823:	68 04 01 00 00       	push   $0x104
f010b828:	68 33 65 13 f0       	push   $0xf0136533
f010b82d:	e8 74 49 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010b832:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010b838:	8b 45 08             	mov    0x8(%ebp),%eax
f010b83b:	89 c3                	mov    %eax,%ebx
f010b83d:	b8 11 00 00 00       	mov    $0x11,%eax
f010b842:	89 d7                	mov    %edx,%edi
f010b844:	89 de                	mov    %ebx,%esi
f010b846:	89 c1                	mov    %eax,%ecx
f010b848:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010b84a:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b84f:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010b852:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010b859:	8b 45 08             	mov    0x8(%ebp),%eax
f010b85c:	8b 40 28             	mov    0x28(%eax),%eax
f010b85f:	83 f8 20             	cmp    $0x20,%eax
f010b862:	75 40                	jne    f010b8a4 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010b864:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b868:	0f 84 a6 00 00 00    	je     f010b914 <trap+0x12a>
		{
			assert(curenv);
f010b86e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b873:	85 c0                	test   %eax,%eax
f010b875:	75 19                	jne    f010b890 <trap+0xa6>
f010b877:	68 5d 65 13 f0       	push   $0xf013655d
f010b87c:	68 64 65 13 f0       	push   $0xf0136564
f010b881:	68 10 01 00 00       	push   $0x110
f010b886:	68 33 65 13 f0       	push   $0xf0136533
f010b88b:	e8 16 49 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010b890:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b895:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010b89b:	42                   	inc    %edx
f010b89c:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010b8a2:	eb 70                	jmp    f010b914 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010b8a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8a7:	8b 40 28             	mov    0x28(%eax),%eax
f010b8aa:	83 f8 0e             	cmp    $0xe,%eax
f010b8ad:	75 65                	jne    f010b914 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010b8af:	a0 c8 7f 65 f0       	mov    0xf0657fc8,%al
f010b8b4:	84 c0                	test   %al,%al
f010b8b6:	74 5c                	je     f010b914 <trap+0x12a>
			if (userTrap){
f010b8b8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b8bc:	74 2c                	je     f010b8ea <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010b8be:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b8c3:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010b8c9:	8b 52 30             	mov    0x30(%edx),%edx
f010b8cc:	89 d1                	mov    %edx,%ecx
f010b8ce:	8a 15 c8 7f 65 f0    	mov    0xf0657fc8,%dl
f010b8d4:	0f b6 d2             	movzbl %dl,%edx
f010b8d7:	01 ca                	add    %ecx,%edx
f010b8d9:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010b8dc:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b8e1:	83 ec 0c             	sub    $0xc,%esp
f010b8e4:	50                   	push   %eax
f010b8e5:	e8 5e d4 ff ff       	call   f0108d48 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010b8ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8ed:	8b 40 30             	mov    0x30(%eax),%eax
f010b8f0:	89 c2                	mov    %eax,%edx
f010b8f2:	a0 c8 7f 65 f0       	mov    0xf0657fc8,%al
f010b8f7:	0f b6 c0             	movzbl %al,%eax
f010b8fa:	01 d0                	add    %edx,%eax
f010b8fc:	89 c2                	mov    %eax,%edx
f010b8fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010b901:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010b904:	e8 d0 87 ff ff       	call   f01040d9 <kclock_resume>
				env_pop_tf(tf);
f010b909:	83 ec 0c             	sub    $0xc,%esp
f010b90c:	ff 75 08             	pushl  0x8(%ebp)
f010b90f:	e8 99 d5 ff ff       	call   f0108ead <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010b914:	83 ec 0c             	sub    $0xc,%esp
f010b917:	ff 75 08             	pushl  0x8(%ebp)
f010b91a:	e8 e1 fd ff ff       	call   f010b700 <trap_dispatch>
f010b91f:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010b922:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b926:	74 3d                	je     f010b965 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010b928:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b92d:	85 c0                	test   %eax,%eax
f010b92f:	74 0d                	je     f010b93e <trap+0x154>
f010b931:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b936:	8b 40 54             	mov    0x54(%eax),%eax
f010b939:	83 f8 02             	cmp    $0x2,%eax
f010b93c:	74 19                	je     f010b957 <trap+0x16d>
f010b93e:	68 7c 65 13 f0       	push   $0xf013657c
f010b943:	68 64 65 13 f0       	push   $0xf0136564
f010b948:	68 25 01 00 00       	push   $0x125
f010b94d:	68 33 65 13 f0       	push   $0xf0136533
f010b952:	e8 4f 48 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010b957:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b95c:	83 ec 0c             	sub    $0xc,%esp
f010b95f:	50                   	push   %eax
f010b960:	e8 e3 d3 ff ff       	call   f0108d48 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010b965:	83 ec 0c             	sub    $0xc,%esp
f010b968:	ff 75 08             	pushl  0x8(%ebp)
f010b96b:	e8 3d d5 ff ff       	call   f0108ead <env_pop_tf>

f010b970 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010b970:	55                   	push   %ebp
f010b971:	89 e5                	mov    %esp,%ebp
f010b973:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010b976:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010b97d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b980:	8b 40 34             	mov    0x34(%eax),%eax
f010b983:	0f b7 c0             	movzwl %ax,%eax
f010b986:	83 e0 03             	and    $0x3,%eax
f010b989:	83 f8 03             	cmp    $0x3,%eax
f010b98c:	75 07                	jne    f010b995 <fault_handler+0x25>
		userTrap = 1;
f010b98e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010b995:	0f 20 d0             	mov    %cr2,%eax
f010b998:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010b99b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010b99e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010b9a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b9a5:	75 29                	jne    f010b9d0 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010b9a7:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010b9ae:	77 40                	ja     f010b9f0 <fault_handler+0x80>
f010b9b0:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010b9b7:	76 37                	jbe    f010b9f0 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010b9b9:	83 ec 04             	sub    $0x4,%esp
f010b9bc:	68 ac 65 13 f0       	push   $0xf01365ac
f010b9c1:	68 42 01 00 00       	push   $0x142
f010b9c6:	68 33 65 13 f0       	push   $0xf0136533
f010b9cb:	e8 d6 47 ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010b9d0:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010b9d7:	76 17                	jbe    f010b9f0 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010b9d9:	83 ec 04             	sub    $0x4,%esp
f010b9dc:	68 d0 65 13 f0       	push   $0xf01365d0
f010b9e1:	68 48 01 00 00       	push   $0x148
f010b9e6:	68 33 65 13 f0       	push   $0xf0136533
f010b9eb:	e8 b6 47 ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010b9f0:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b9f5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010b9f8:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b9fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ba00:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ba03:	c1 ea 16             	shr    $0x16,%edx
f010ba06:	c1 e2 02             	shl    $0x2,%edx
f010ba09:	01 d0                	add    %edx,%eax
f010ba0b:	8b 00                	mov    (%eax),%eax
f010ba0d:	83 e0 01             	and    $0x1,%eax
f010ba10:	85 c0                	test   %eax,%eax
f010ba12:	75 28                	jne    f010ba3c <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010ba14:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba17:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010ba1d:	8d 50 01             	lea    0x1(%eax),%edx
f010ba20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba23:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010ba29:	83 ec 08             	sub    $0x8,%esp
f010ba2c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ba2f:	ff 75 e8             	pushl  -0x18(%ebp)
f010ba32:	e8 27 16 00 00       	call   f010d05e <table_fault_handler>
f010ba37:	83 c4 10             	add    $0x10,%esp
f010ba3a:	eb 42                	jmp    f010ba7e <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ba3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba3f:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010ba45:	8d 50 01             	lea    0x1(%eax),%edx
f010ba48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba4b:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ba51:	e8 e6 15 00 00       	call   f010d03c <isBufferingEnabled>
f010ba56:	84 c0                	test   %al,%al
f010ba58:	74 13                	je     f010ba6d <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ba5a:	83 ec 08             	sub    $0x8,%esp
f010ba5d:	ff 75 ec             	pushl  -0x14(%ebp)
f010ba60:	ff 75 e8             	pushl  -0x18(%ebp)
f010ba63:	e8 32 16 00 00       	call   f010d09a <__page_fault_handler_with_buffering>
f010ba68:	83 c4 10             	add    $0x10,%esp
f010ba6b:	eb 11                	jmp    f010ba7e <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ba6d:	83 ec 08             	sub    $0x8,%esp
f010ba70:	ff 75 ec             	pushl  -0x14(%ebp)
f010ba73:	ff 75 e8             	pushl  -0x18(%ebp)
f010ba76:	e8 05 16 00 00       	call   f010d080 <page_fault_handler>
f010ba7b:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ba7e:	0f 20 d8             	mov    %cr3,%eax
f010ba81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ba84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba87:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ba8a:	90                   	nop
f010ba8b:	c9                   	leave  
f010ba8c:	c3                   	ret    
f010ba8d:	90                   	nop

f010ba8e <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ba8e:	6a 0e                	push   $0xe
f010ba90:	e9 ed 00 00 00       	jmp    f010bb82 <_alltraps>
f010ba95:	90                   	nop

f010ba96 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ba96:	6a 00                	push   $0x0
f010ba98:	6a 30                	push   $0x30
f010ba9a:	e9 e3 00 00 00       	jmp    f010bb82 <_alltraps>
f010ba9f:	90                   	nop

f010baa0 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010baa0:	6a 08                	push   $0x8
f010baa2:	e9 db 00 00 00       	jmp    f010bb82 <_alltraps>
f010baa7:	90                   	nop

f010baa8 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010baa8:	6a 00                	push   $0x0
f010baaa:	6a 00                	push   $0x0
f010baac:	e9 d1 00 00 00       	jmp    f010bb82 <_alltraps>
f010bab1:	90                   	nop

f010bab2 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010bab2:	6a 00                	push   $0x0
f010bab4:	6a 01                	push   $0x1
f010bab6:	e9 c7 00 00 00       	jmp    f010bb82 <_alltraps>
f010babb:	90                   	nop

f010babc <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010babc:	6a 00                	push   $0x0
f010babe:	6a 02                	push   $0x2
f010bac0:	e9 bd 00 00 00       	jmp    f010bb82 <_alltraps>
f010bac5:	90                   	nop

f010bac6 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010bac6:	6a 00                	push   $0x0
f010bac8:	6a 03                	push   $0x3
f010baca:	e9 b3 00 00 00       	jmp    f010bb82 <_alltraps>
f010bacf:	90                   	nop

f010bad0 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010bad0:	6a 00                	push   $0x0
f010bad2:	6a 04                	push   $0x4
f010bad4:	e9 a9 00 00 00       	jmp    f010bb82 <_alltraps>
f010bad9:	90                   	nop

f010bada <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010bada:	6a 00                	push   $0x0
f010badc:	6a 05                	push   $0x5
f010bade:	e9 9f 00 00 00       	jmp    f010bb82 <_alltraps>
f010bae3:	90                   	nop

f010bae4 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010bae4:	6a 00                	push   $0x0
f010bae6:	6a 06                	push   $0x6
f010bae8:	e9 95 00 00 00       	jmp    f010bb82 <_alltraps>
f010baed:	90                   	nop

f010baee <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010baee:	6a 00                	push   $0x0
f010baf0:	6a 07                	push   $0x7
f010baf2:	e9 8b 00 00 00       	jmp    f010bb82 <_alltraps>
f010baf7:	90                   	nop

f010baf8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010baf8:	6a 0a                	push   $0xa
f010bafa:	e9 83 00 00 00       	jmp    f010bb82 <_alltraps>
f010baff:	90                   	nop

f010bb00 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010bb00:	6a 0b                	push   $0xb
f010bb02:	eb 7e                	jmp    f010bb82 <_alltraps>

f010bb04 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010bb04:	6a 0c                	push   $0xc
f010bb06:	eb 7a                	jmp    f010bb82 <_alltraps>

f010bb08 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010bb08:	6a 0d                	push   $0xd
f010bb0a:	eb 76                	jmp    f010bb82 <_alltraps>

f010bb0c <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010bb0c:	6a 00                	push   $0x0
f010bb0e:	6a 10                	push   $0x10
f010bb10:	eb 70                	jmp    f010bb82 <_alltraps>

f010bb12 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010bb12:	6a 11                	push   $0x11
f010bb14:	eb 6c                	jmp    f010bb82 <_alltraps>

f010bb16 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010bb16:	6a 00                	push   $0x0
f010bb18:	6a 12                	push   $0x12
f010bb1a:	eb 66                	jmp    f010bb82 <_alltraps>

f010bb1c <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010bb1c:	6a 00                	push   $0x0
f010bb1e:	6a 13                	push   $0x13
f010bb20:	eb 60                	jmp    f010bb82 <_alltraps>

f010bb22 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010bb22:	6a 00                	push   $0x0
f010bb24:	6a 20                	push   $0x20
f010bb26:	eb 5a                	jmp    f010bb82 <_alltraps>

f010bb28 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010bb28:	6a 00                	push   $0x0
f010bb2a:	6a 21                	push   $0x21
f010bb2c:	eb 54                	jmp    f010bb82 <_alltraps>

f010bb2e <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010bb2e:	6a 00                	push   $0x0
f010bb30:	6a 22                	push   $0x22
f010bb32:	eb 4e                	jmp    f010bb82 <_alltraps>

f010bb34 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010bb34:	6a 00                	push   $0x0
f010bb36:	6a 23                	push   $0x23
f010bb38:	eb 48                	jmp    f010bb82 <_alltraps>

f010bb3a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010bb3a:	6a 00                	push   $0x0
f010bb3c:	6a 24                	push   $0x24
f010bb3e:	eb 42                	jmp    f010bb82 <_alltraps>

f010bb40 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010bb40:	6a 00                	push   $0x0
f010bb42:	6a 25                	push   $0x25
f010bb44:	eb 3c                	jmp    f010bb82 <_alltraps>

f010bb46 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010bb46:	6a 00                	push   $0x0
f010bb48:	6a 26                	push   $0x26
f010bb4a:	eb 36                	jmp    f010bb82 <_alltraps>

f010bb4c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010bb4c:	6a 00                	push   $0x0
f010bb4e:	6a 27                	push   $0x27
f010bb50:	eb 30                	jmp    f010bb82 <_alltraps>

f010bb52 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010bb52:	6a 00                	push   $0x0
f010bb54:	6a 28                	push   $0x28
f010bb56:	eb 2a                	jmp    f010bb82 <_alltraps>

f010bb58 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010bb58:	6a 00                	push   $0x0
f010bb5a:	6a 29                	push   $0x29
f010bb5c:	eb 24                	jmp    f010bb82 <_alltraps>

f010bb5e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010bb5e:	6a 00                	push   $0x0
f010bb60:	6a 2a                	push   $0x2a
f010bb62:	eb 1e                	jmp    f010bb82 <_alltraps>

f010bb64 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010bb64:	6a 00                	push   $0x0
f010bb66:	6a 2b                	push   $0x2b
f010bb68:	eb 18                	jmp    f010bb82 <_alltraps>

f010bb6a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010bb6a:	6a 00                	push   $0x0
f010bb6c:	6a 2c                	push   $0x2c
f010bb6e:	eb 12                	jmp    f010bb82 <_alltraps>

f010bb70 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010bb70:	6a 00                	push   $0x0
f010bb72:	6a 2d                	push   $0x2d
f010bb74:	eb 0c                	jmp    f010bb82 <_alltraps>

f010bb76 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010bb76:	6a 00                	push   $0x0
f010bb78:	6a 2e                	push   $0x2e
f010bb7a:	eb 06                	jmp    f010bb82 <_alltraps>

f010bb7c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010bb7c:	6a 00                	push   $0x0
f010bb7e:	6a 2f                	push   $0x2f
f010bb80:	eb 00                	jmp    f010bb82 <_alltraps>

f010bb82 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010bb82:	1e                   	push   %ds
push %es
f010bb83:	06                   	push   %es
pushal
f010bb84:	60                   	pusha  

mov $(GD_KD), %ax
f010bb85:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010bb89:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010bb8b:	8e c0                	mov    %eax,%es

push %esp
f010bb8d:	54                   	push   %esp

call trap
f010bb8e:	e8 57 fc ff ff       	call   f010b7ea <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010bb93:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010bb94:	61                   	popa   
pop %es
f010bb95:	07                   	pop    %es
pop %ds
f010bb96:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010bb97:	83 c4 08             	add    $0x8,%esp

iret
f010bb9a:	cf                   	iret   

f010bb9b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010bb9b:	55                   	push   %ebp
f010bb9c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010bb9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bba1:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f010bba7:	29 d0                	sub    %edx,%eax
f010bba9:	c1 f8 03             	sar    $0x3,%eax
f010bbac:	89 c2                	mov    %eax,%edx
f010bbae:	89 d0                	mov    %edx,%eax
f010bbb0:	c1 e0 02             	shl    $0x2,%eax
f010bbb3:	01 d0                	add    %edx,%eax
f010bbb5:	c1 e0 02             	shl    $0x2,%eax
f010bbb8:	01 d0                	add    %edx,%eax
f010bbba:	c1 e0 02             	shl    $0x2,%eax
f010bbbd:	01 d0                	add    %edx,%eax
f010bbbf:	89 c1                	mov    %eax,%ecx
f010bbc1:	c1 e1 08             	shl    $0x8,%ecx
f010bbc4:	01 c8                	add    %ecx,%eax
f010bbc6:	89 c1                	mov    %eax,%ecx
f010bbc8:	c1 e1 10             	shl    $0x10,%ecx
f010bbcb:	01 c8                	add    %ecx,%eax
f010bbcd:	01 c0                	add    %eax,%eax
f010bbcf:	01 d0                	add    %edx,%eax
}
f010bbd1:	5d                   	pop    %ebp
f010bbd2:	c3                   	ret    

f010bbd3 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010bbd3:	55                   	push   %ebp
f010bbd4:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010bbd6:	ff 75 08             	pushl  0x8(%ebp)
f010bbd9:	e8 bd ff ff ff       	call   f010bb9b <to_frame_number>
f010bbde:	83 c4 04             	add    $0x4,%esp
f010bbe1:	c1 e0 0c             	shl    $0xc,%eax
}
f010bbe4:	c9                   	leave  
f010bbe5:	c3                   	ret    

f010bbe6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010bbe6:	55                   	push   %ebp
f010bbe7:	89 e5                	mov    %esp,%ebp
f010bbe9:	83 ec 18             	sub    $0x18,%esp
f010bbec:	8b 45 10             	mov    0x10(%ebp),%eax
f010bbef:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010bbf2:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010bbf6:	74 26                	je     f010bc1e <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010bbf8:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bbfd:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bc00:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010bc06:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010bc0c:	83 ec 04             	sub    $0x4,%esp
f010bc0f:	50                   	push   %eax
f010bc10:	52                   	push   %edx
f010bc11:	68 90 67 13 f0       	push   $0xf0136790
f010bc16:	e8 12 50 ff ff       	call   f0100c2d <cprintf>
f010bc1b:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010bc1e:	83 ec 04             	sub    $0x4,%esp
f010bc21:	ff 75 08             	pushl  0x8(%ebp)
f010bc24:	ff 75 0c             	pushl  0xc(%ebp)
f010bc27:	68 99 67 13 f0       	push   $0xf0136799
f010bc2c:	e8 fc 4f ff ff       	call   f0100c2d <cprintf>
f010bc31:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010bc34:	90                   	nop
f010bc35:	c9                   	leave  
f010bc36:	c3                   	ret    

f010bc37 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010bc37:	55                   	push   %ebp
f010bc38:	89 e5                	mov    %esp,%ebp
f010bc3a:	83 ec 18             	sub    $0x18,%esp
f010bc3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc40:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010bc43:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010bc47:	83 ec 08             	sub    $0x8,%esp
f010bc4a:	50                   	push   %eax
f010bc4b:	68 9e 67 13 f0       	push   $0xf013679e
f010bc50:	e8 d8 4f ff ff       	call   f0100c2d <cprintf>
f010bc55:	83 c4 10             	add    $0x10,%esp
}
f010bc58:	90                   	nop
f010bc59:	c9                   	leave  
f010bc5a:	c3                   	ret    

f010bc5b <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010bc5b:	55                   	push   %ebp
f010bc5c:	89 e5                	mov    %esp,%ebp
f010bc5e:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010bc61:	e8 01 4e ff ff       	call   f0100a67 <cons_getc2>
f010bc66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010bc69:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010bc6c:	c9                   	leave  
f010bc6d:	c3                   	ret    

f010bc6e <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010bc6e:	55                   	push   %ebp
f010bc6f:	89 e5                	mov    %esp,%ebp
f010bc71:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010bc74:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bc79:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010bc7c:	83 ec 0c             	sub    $0xc,%esp
f010bc7f:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010bc82:	50                   	push   %eax
f010bc83:	e8 22 ab ff ff       	call   f01067aa <allocate_frame>
f010bc88:	83 c4 10             	add    $0x10,%esp
f010bc8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010bc8e:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010bc92:	75 08                	jne    f010bc9c <__sys_allocate_page+0x2e>
		return r ;
f010bc94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc97:	e9 d0 00 00 00       	jmp    f010bd6c <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010bc9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc9f:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010bca4:	77 0c                	ja     f010bcb2 <__sys_allocate_page+0x44>
f010bca6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bca9:	25 ff 0f 00 00       	and    $0xfff,%eax
f010bcae:	85 c0                	test   %eax,%eax
f010bcb0:	74 0a                	je     f010bcbc <__sys_allocate_page+0x4e>
		return E_INVAL;
f010bcb2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bcb7:	e9 b0 00 00 00       	jmp    f010bd6c <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010bcbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bcbf:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010bcc4:	83 f8 04             	cmp    $0x4,%eax
f010bcc7:	74 0a                	je     f010bcd3 <__sys_allocate_page+0x65>
		return E_INVAL;
f010bcc9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bcce:	e9 99 00 00 00       	jmp    f010bd6c <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010bcd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcd6:	83 ec 0c             	sub    $0xc,%esp
f010bcd9:	50                   	push   %eax
f010bcda:	e8 f4 fe ff ff       	call   f010bbd3 <to_physical_address>
f010bcdf:	83 c4 10             	add    $0x10,%esp
f010bce2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010bce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bce8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010bceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bcee:	c1 e8 0c             	shr    $0xc,%eax
f010bcf1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010bcf4:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f010bcf9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010bcfc:	72 17                	jb     f010bd15 <__sys_allocate_page+0xa7>
f010bcfe:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd01:	68 a4 67 13 f0       	push   $0xf01367a4
f010bd06:	68 8c 00 00 00       	push   $0x8c
f010bd0b:	68 d3 67 13 f0       	push   $0xf01367d3
f010bd10:	e8 91 44 ff ff       	call   f01001a6 <_panic>
f010bd15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd18:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010bd1d:	83 ec 04             	sub    $0x4,%esp
f010bd20:	68 00 10 00 00       	push   $0x1000
f010bd25:	6a 00                	push   $0x0
f010bd27:	50                   	push   %eax
f010bd28:	e8 58 45 02 00       	call   f0130285 <memset>
f010bd2d:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010bd30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010bd33:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010bd36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bd39:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bd3c:	ff 75 0c             	pushl  0xc(%ebp)
f010bd3f:	51                   	push   %ecx
f010bd40:	52                   	push   %edx
f010bd41:	50                   	push   %eax
f010bd42:	e8 fb ad ff ff       	call   f0106b42 <map_frame>
f010bd47:	83 c4 10             	add    $0x10,%esp
f010bd4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010bd4d:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010bd51:	75 14                	jne    f010bd67 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010bd53:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd56:	83 ec 0c             	sub    $0xc,%esp
f010bd59:	50                   	push   %eax
f010bd5a:	e8 da ab ff ff       	call   f0106939 <decrement_references>
f010bd5f:	83 c4 10             	add    $0x10,%esp
		return r;
f010bd62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bd65:	eb 05                	jmp    f010bd6c <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010bd67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bd6c:	c9                   	leave  
f010bd6d:	c3                   	ret    

f010bd6e <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010bd6e:	55                   	push   %ebp
f010bd6f:	89 e5                	mov    %esp,%ebp
f010bd71:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010bd74:	83 ec 04             	sub    $0x4,%esp
f010bd77:	68 e7 67 13 f0       	push   $0xf01367e7
f010bd7c:	68 b3 00 00 00       	push   $0xb3
f010bd81:	68 d3 67 13 f0       	push   $0xf01367d3
f010bd86:	e8 1b 44 ff ff       	call   f01001a6 <_panic>

f010bd8b <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010bd8b:	55                   	push   %ebp
f010bd8c:	89 e5                	mov    %esp,%ebp
f010bd8e:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010bd91:	83 ec 04             	sub    $0x4,%esp
f010bd94:	68 08 68 13 f0       	push   $0xf0136808
f010bd99:	68 c3 00 00 00       	push   $0xc3
f010bd9e:	68 d3 67 13 f0       	push   $0xf01367d3
f010bda3:	e8 fe 43 ff ff       	call   f01001a6 <_panic>

f010bda8 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010bda8:	55                   	push   %ebp
f010bda9:	89 e5                	mov    %esp,%ebp
f010bdab:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010bdae:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bdb3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bdb6:	83 ec 04             	sub    $0x4,%esp
f010bdb9:	ff 75 0c             	pushl  0xc(%ebp)
f010bdbc:	ff 75 08             	pushl  0x8(%ebp)
f010bdbf:	50                   	push   %eax
f010bdc0:	e8 e5 c1 ff ff       	call   f0107faa <calculate_required_frames>
f010bdc5:	83 c4 10             	add    $0x10,%esp
}
f010bdc8:	c9                   	leave  
f010bdc9:	c3                   	ret    

f010bdca <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010bdca:	55                   	push   %ebp
f010bdcb:	89 e5                	mov    %esp,%ebp
f010bdcd:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010bdd0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010bdd3:	83 ec 0c             	sub    $0xc,%esp
f010bdd6:	50                   	push   %eax
f010bdd7:	e8 d6 af ff ff       	call   f0106db2 <calculate_available_frames>
f010bddc:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010bddf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bde2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bde5:	01 d0                	add    %edx,%eax
}
f010bde7:	c9                   	leave  
f010bde8:	c3                   	ret    

f010bde9 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010bde9:	55                   	push   %ebp
f010bdea:	89 e5                	mov    %esp,%ebp
f010bdec:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010bdef:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010bdf2:	83 ec 0c             	sub    $0xc,%esp
f010bdf5:	50                   	push   %eax
f010bdf6:	e8 b7 af ff ff       	call   f0106db2 <calculate_available_frames>
f010bdfb:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010bdfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010be01:	c9                   	leave  
f010be02:	c3                   	ret    

f010be03 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010be03:	55                   	push   %ebp
f010be04:	89 e5                	mov    %esp,%ebp
f010be06:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010be09:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010be0c:	83 ec 0c             	sub    $0xc,%esp
f010be0f:	50                   	push   %eax
f010be10:	e8 9d af ff ff       	call   f0106db2 <calculate_available_frames>
f010be15:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010be18:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010be1b:	c9                   	leave  
f010be1c:	c3                   	ret    

f010be1d <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010be1d:	55                   	push   %ebp
f010be1e:	89 e5                	mov    %esp,%ebp
f010be20:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010be23:	83 ec 0c             	sub    $0xc,%esp
f010be26:	ff 75 08             	pushl  0x8(%ebp)
f010be29:	e8 8d 31 02 00       	call   f012efbb <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010be2e:	83 c4 10             	add    $0x10,%esp
}
f010be31:	c9                   	leave  
f010be32:	c3                   	ret    

f010be33 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010be33:	55                   	push   %ebp
f010be34:	89 e5                	mov    %esp,%ebp
f010be36:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010be39:	e8 d5 30 02 00       	call   f012ef13 <scarce_memory>
}
f010be3e:	90                   	nop
f010be3f:	c9                   	leave  
f010be40:	c3                   	ret    

f010be41 <sys_clearFFL>:

void sys_clearFFL()
{
f010be41:	55                   	push   %ebp
f010be42:	89 e5                	mov    %esp,%ebp
f010be44:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010be47:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f010be4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010be4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010be56:	eb 12                	jmp    f010be6a <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010be58:	83 ec 0c             	sub    $0xc,%esp
f010be5b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010be5e:	50                   	push   %eax
f010be5f:	e8 46 a9 ff ff       	call   f01067aa <allocate_frame>
f010be64:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010be67:	ff 45 f4             	incl   -0xc(%ebp)
f010be6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be6d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010be70:	7c e6                	jl     f010be58 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010be72:	90                   	nop
f010be73:	c9                   	leave  
f010be74:	c3                   	ret    

f010be75 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010be75:	55                   	push   %ebp
f010be76:	89 e5                	mov    %esp,%ebp
f010be78:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010be7b:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010be80:	83 ec 0c             	sub    $0xc,%esp
f010be83:	50                   	push   %eax
f010be84:	e8 32 7d ff ff       	call   f0103bbb <pf_calculate_allocated_pages>
f010be89:	83 c4 10             	add    $0x10,%esp
}
f010be8c:	c9                   	leave  
f010be8d:	c3                   	ret    

f010be8e <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010be8e:	55                   	push   %ebp
f010be8f:	89 e5                	mov    %esp,%ebp
f010be91:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010be94:	e8 a3 11 00 00       	call   f010d03c <isBufferingEnabled>
f010be99:	84 c0                	test   %al,%al
f010be9b:	74 19                	je     f010beb6 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010be9d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bea2:	83 ec 04             	sub    $0x4,%esp
f010bea5:	ff 75 0c             	pushl  0xc(%ebp)
f010bea8:	ff 75 08             	pushl  0x8(%ebp)
f010beab:	50                   	push   %eax
f010beac:	e8 47 c1 ff ff       	call   f0107ff8 <__free_user_mem_with_buffering>
f010beb1:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010beb4:	eb 18                	jmp    f010bece <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010beb6:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bebb:	83 ec 04             	sub    $0x4,%esp
f010bebe:	ff 75 0c             	pushl  0xc(%ebp)
f010bec1:	ff 75 08             	pushl  0x8(%ebp)
f010bec4:	50                   	push   %eax
f010bec5:	e8 14 c1 ff ff       	call   f0107fde <free_user_mem>
f010beca:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010becd:	90                   	nop
}
f010bece:	c9                   	leave  
f010becf:	c3                   	ret    

f010bed0 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010bed0:	55                   	push   %ebp
f010bed1:	89 e5                	mov    %esp,%ebp
f010bed3:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010bed6:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bedb:	83 ec 04             	sub    $0x4,%esp
f010bede:	ff 75 0c             	pushl  0xc(%ebp)
f010bee1:	ff 75 08             	pushl  0x8(%ebp)
f010bee4:	50                   	push   %eax
f010bee5:	e8 da c0 ff ff       	call   f0107fc4 <allocate_user_mem>
f010beea:	83 c4 10             	add    $0x10,%esp
	return;
f010beed:	90                   	nop
}
f010beee:	c9                   	leave  
f010beef:	c3                   	ret    

f010bef0 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010bef0:	55                   	push   %ebp
f010bef1:	89 e5                	mov    %esp,%ebp
f010bef3:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010bef6:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010befb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010befe:	ff 75 10             	pushl  0x10(%ebp)
f010bf01:	ff 75 0c             	pushl  0xc(%ebp)
f010bf04:	ff 75 08             	pushl  0x8(%ebp)
f010bf07:	50                   	push   %eax
f010bf08:	e8 69 c0 ff ff       	call   f0107f76 <allocate_chunk>
f010bf0d:	83 c4 10             	add    $0x10,%esp
	return;
f010bf10:	90                   	nop
}
f010bf11:	c9                   	leave  
f010bf12:	c3                   	ret    

f010bf13 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010bf13:	55                   	push   %ebp
f010bf14:	89 e5                	mov    %esp,%ebp
f010bf16:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010bf19:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf1e:	ff 75 10             	pushl  0x10(%ebp)
f010bf21:	ff 75 0c             	pushl  0xc(%ebp)
f010bf24:	ff 75 08             	pushl  0x8(%ebp)
f010bf27:	50                   	push   %eax
f010bf28:	e8 e8 c0 ff ff       	call   f0108015 <move_user_mem>
f010bf2d:	83 c4 10             	add    $0x10,%esp
	return;
f010bf30:	90                   	nop
}
f010bf31:	c9                   	leave  
f010bf32:	c3                   	ret    

f010bf33 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010bf33:	55                   	push   %ebp
f010bf34:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010bf36:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
}
f010bf3b:	5d                   	pop    %ebp
f010bf3c:	c3                   	ret    

f010bf3d <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010bf3d:	55                   	push   %ebp
f010bf3e:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010bf40:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf43:	a3 8c 74 6e f0       	mov    %eax,0xf06e748c
}
f010bf48:	90                   	nop
f010bf49:	5d                   	pop    %ebp
f010bf4a:	c3                   	ret    

f010bf4b <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010bf4b:	55                   	push   %ebp
f010bf4c:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010bf4e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf53:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010bf59:	8b 52 38             	mov    0x38(%edx),%edx
f010bf5c:	80 e6 fd             	and    $0xfd,%dh
f010bf5f:	89 50 38             	mov    %edx,0x38(%eax)
}
f010bf62:	90                   	nop
f010bf63:	5d                   	pop    %ebp
f010bf64:	c3                   	ret    

f010bf65 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010bf65:	55                   	push   %ebp
f010bf66:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010bf68:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf6d:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010bf73:	8b 52 38             	mov    0x38(%edx),%edx
f010bf76:	80 ce 02             	or     $0x2,%dh
f010bf79:	89 50 38             	mov    %edx,0x38(%eax)
}
f010bf7c:	90                   	nop
f010bf7d:	5d                   	pop    %ebp
f010bf7e:	c3                   	ret    

f010bf7f <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010bf7f:	55                   	push   %ebp
f010bf80:	89 e5                	mov    %esp,%ebp
f010bf82:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010bf85:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bf8d:	83 ec 04             	sub    $0x4,%esp
f010bf90:	ff 75 0c             	pushl  0xc(%ebp)
f010bf93:	ff 75 08             	pushl  0x8(%ebp)
f010bf96:	50                   	push   %eax
f010bf97:	e8 de 13 00 00       	call   f010d37a <createSemaphore>
f010bf9c:	83 c4 10             	add    $0x10,%esp
}
f010bf9f:	c9                   	leave  
f010bfa0:	c3                   	ret    

f010bfa1 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010bfa1:	55                   	push   %ebp
f010bfa2:	89 e5                	mov    %esp,%ebp
f010bfa4:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010bfa7:	83 ec 08             	sub    $0x8,%esp
f010bfaa:	ff 75 0c             	pushl  0xc(%ebp)
f010bfad:	ff 75 08             	pushl  0x8(%ebp)
f010bfb0:	e8 e2 13 00 00       	call   f010d397 <waitSemaphore>
f010bfb5:	83 c4 10             	add    $0x10,%esp
}
f010bfb8:	90                   	nop
f010bfb9:	c9                   	leave  
f010bfba:	c3                   	ret    

f010bfbb <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010bfbb:	55                   	push   %ebp
f010bfbc:	89 e5                	mov    %esp,%ebp
f010bfbe:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010bfc1:	83 ec 08             	sub    $0x8,%esp
f010bfc4:	ff 75 0c             	pushl  0xc(%ebp)
f010bfc7:	ff 75 08             	pushl  0x8(%ebp)
f010bfca:	e8 e5 13 00 00       	call   f010d3b4 <signalSemaphore>
f010bfcf:	83 c4 10             	add    $0x10,%esp
}
f010bfd2:	90                   	nop
f010bfd3:	c9                   	leave  
f010bfd4:	c3                   	ret    

f010bfd5 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010bfd5:	55                   	push   %ebp
f010bfd6:	89 e5                	mov    %esp,%ebp
f010bfd8:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010bfdb:	83 ec 08             	sub    $0x8,%esp
f010bfde:	ff 75 0c             	pushl  0xc(%ebp)
f010bfe1:	ff 75 08             	pushl  0x8(%ebp)
f010bfe4:	e8 37 12 00 00       	call   f010d220 <get_semaphore_object_ID>
f010bfe9:	83 c4 10             	add    $0x10,%esp
f010bfec:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010bfef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bff3:	78 06                	js     f010bffb <sys_getSemaphoreValue+0x26>
f010bff5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010bff9:	7e 19                	jle    f010c014 <sys_getSemaphoreValue+0x3f>
f010bffb:	68 28 68 13 f0       	push   $0xf0136828
f010c000:	68 4d 68 13 f0       	push   $0xf013684d
f010c005:	68 4a 01 00 00       	push   $0x14a
f010c00a:	68 d3 67 13 f0       	push   $0xf01367d3
f010c00f:	e8 92 41 ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010c014:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c017:	89 d0                	mov    %edx,%eax
f010c019:	c1 e0 02             	shl    $0x2,%eax
f010c01c:	01 d0                	add    %edx,%eax
f010c01e:	01 c0                	add    %eax,%eax
f010c020:	01 d0                	add    %edx,%eax
f010c022:	01 c0                	add    %eax,%eax
f010c024:	01 d0                	add    %edx,%eax
f010c026:	c1 e0 02             	shl    $0x2,%eax
f010c029:	05 d4 50 6e f0       	add    $0xf06e50d4,%eax
f010c02e:	8b 00                	mov    (%eax),%eax
}
f010c030:	c9                   	leave  
f010c031:	c3                   	ret    

f010c032 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c032:	55                   	push   %ebp
f010c033:	89 e5                	mov    %esp,%ebp
f010c035:	83 ec 18             	sub    $0x18,%esp
f010c038:	8b 45 10             	mov    0x10(%ebp),%eax
f010c03b:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c03e:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c042:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c047:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c04a:	83 ec 0c             	sub    $0xc,%esp
f010c04d:	ff 75 14             	pushl  0x14(%ebp)
f010c050:	52                   	push   %edx
f010c051:	ff 75 0c             	pushl  0xc(%ebp)
f010c054:	ff 75 08             	pushl  0x8(%ebp)
f010c057:	50                   	push   %eax
f010c058:	e8 e3 b2 ff ff       	call   f0107340 <createSharedObject>
f010c05d:	83 c4 20             	add    $0x20,%esp
}
f010c060:	c9                   	leave  
f010c061:	c3                   	ret    

f010c062 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c062:	55                   	push   %ebp
f010c063:	89 e5                	mov    %esp,%ebp
f010c065:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c068:	83 ec 08             	sub    $0x8,%esp
f010c06b:	ff 75 0c             	pushl  0xc(%ebp)
f010c06e:	ff 75 08             	pushl  0x8(%ebp)
f010c071:	e8 ed b2 ff ff       	call   f0107363 <getSizeOfSharedObject>
f010c076:	83 c4 10             	add    $0x10,%esp
}
f010c079:	c9                   	leave  
f010c07a:	c3                   	ret    

f010c07b <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c07b:	55                   	push   %ebp
f010c07c:	89 e5                	mov    %esp,%ebp
f010c07e:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c081:	83 ec 04             	sub    $0x4,%esp
f010c084:	ff 75 10             	pushl  0x10(%ebp)
f010c087:	ff 75 0c             	pushl  0xc(%ebp)
f010c08a:	ff 75 08             	pushl  0x8(%ebp)
f010c08d:	e8 ee b2 ff ff       	call   f0107380 <getSharedObject>
f010c092:	83 c4 10             	add    $0x10,%esp
}
f010c095:	c9                   	leave  
f010c096:	c3                   	ret    

f010c097 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c097:	55                   	push   %ebp
f010c098:	89 e5                	mov    %esp,%ebp
f010c09a:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c09d:	83 ec 08             	sub    $0x8,%esp
f010c0a0:	ff 75 0c             	pushl  0xc(%ebp)
f010c0a3:	ff 75 08             	pushl  0x8(%ebp)
f010c0a6:	e8 f2 b2 ff ff       	call   f010739d <freeSharedObject>
f010c0ab:	83 c4 10             	add    $0x10,%esp
}
f010c0ae:	c9                   	leave  
f010c0af:	c3                   	ret    

f010c0b0 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c0b0:	55                   	push   %ebp
f010c0b1:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c0b3:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c0b8:	5d                   	pop    %ebp
f010c0b9:	c3                   	ret    

f010c0ba <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c0ba:	55                   	push   %ebp
f010c0bb:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c0bd:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c0c2:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c0c5:	5d                   	pop    %ebp
f010c0c6:	c3                   	ret    

f010c0c7 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c0c7:	55                   	push   %ebp
f010c0c8:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c0ca:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c0cf:	89 c2                	mov    %eax,%edx
f010c0d1:	a1 30 77 65 f0       	mov    0xf0657730,%eax
f010c0d6:	29 c2                	sub    %eax,%edx
f010c0d8:	89 d0                	mov    %edx,%eax
f010c0da:	c1 f8 03             	sar    $0x3,%eax
f010c0dd:	89 c2                	mov    %eax,%edx
f010c0df:	89 d0                	mov    %edx,%eax
f010c0e1:	c1 e0 03             	shl    $0x3,%eax
f010c0e4:	01 d0                	add    %edx,%eax
f010c0e6:	c1 e0 03             	shl    $0x3,%eax
f010c0e9:	01 d0                	add    %edx,%eax
f010c0eb:	01 c0                	add    %eax,%eax
f010c0ed:	01 d0                	add    %edx,%eax
f010c0ef:	01 c0                	add    %eax,%eax
f010c0f1:	01 d0                	add    %edx,%eax
f010c0f3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c0fa:	01 c8                	add    %ecx,%eax
f010c0fc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c103:	01 c8                	add    %ecx,%eax
f010c105:	c1 e0 02             	shl    $0x2,%eax
f010c108:	01 d0                	add    %edx,%eax
f010c10a:	01 c0                	add    %eax,%eax
f010c10c:	01 d0                	add    %edx,%eax
f010c10e:	01 c0                	add    %eax,%eax
f010c110:	01 d0                	add    %edx,%eax
f010c112:	c1 e0 02             	shl    $0x2,%eax
f010c115:	01 d0                	add    %edx,%eax
f010c117:	01 c0                	add    %eax,%eax
f010c119:	01 d0                	add    %edx,%eax
f010c11b:	c1 e0 09             	shl    $0x9,%eax
f010c11e:	29 d0                	sub    %edx,%eax
f010c120:	c1 e0 02             	shl    $0x2,%eax
f010c123:	01 d0                	add    %edx,%eax
}
f010c125:	5d                   	pop    %ebp
f010c126:	c3                   	ret    

f010c127 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c127:	55                   	push   %ebp
f010c128:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c12a:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c12f:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c132:	5d                   	pop    %ebp
f010c133:	c3                   	ret    

f010c134 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c134:	55                   	push   %ebp
f010c135:	89 e5                	mov    %esp,%ebp
f010c137:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c13a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c13e:	75 0a                	jne    f010c14a <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c140:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c145:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c148:	eb 22                	jmp    f010c16c <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c14a:	83 ec 04             	sub    $0x4,%esp
f010c14d:	6a 00                	push   $0x0
f010c14f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c152:	50                   	push   %eax
f010c153:	ff 75 08             	pushl  0x8(%ebp)
f010c156:	e8 7d cc ff ff       	call   f0108dd8 <envid2env>
f010c15b:	83 c4 10             	add    $0x10,%esp
f010c15e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c165:	79 05                	jns    f010c16c <sys_destroy_env+0x38>
	{
		return r;
f010c167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c16a:	eb 5e                	jmp    f010c1ca <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c16c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c16f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c174:	39 c2                	cmp    %eax,%edx
f010c176:	75 1b                	jne    f010c193 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c178:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c17d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c180:	83 ec 08             	sub    $0x8,%esp
f010c183:	50                   	push   %eax
f010c184:	68 62 68 13 f0       	push   $0xf0136862
f010c189:	e8 9f 4a ff ff       	call   f0100c2d <cprintf>
f010c18e:	83 c4 10             	add    $0x10,%esp
f010c191:	eb 20                	jmp    f010c1b3 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c193:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c196:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c199:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c19e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c1a1:	83 ec 04             	sub    $0x4,%esp
f010c1a4:	52                   	push   %edx
f010c1a5:	50                   	push   %eax
f010c1a6:	68 7d 68 13 f0       	push   $0xf013687d
f010c1ab:	e8 7d 4a ff ff       	call   f0100c2d <cprintf>
f010c1b0:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c1b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c1b6:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c1b9:	83 ec 0c             	sub    $0xc,%esp
f010c1bc:	50                   	push   %eax
f010c1bd:	e8 fe 92 ff ff       	call   f01054c0 <sched_kill_env>
f010c1c2:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c1c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c1ca:	c9                   	leave  
f010c1cb:	c3                   	ret    

f010c1cc <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010c1cc:	55                   	push   %ebp
f010c1cd:	89 e5                	mov    %esp,%ebp
f010c1cf:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c1d2:	e8 e2 cb ff ff       	call   f0108db9 <env_exit>
	//env_run_cmd_prmpt();
}
f010c1d7:	90                   	nop
f010c1d8:	c9                   	leave  
f010c1d9:	c3                   	ret    

f010c1da <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c1da:	55                   	push   %ebp
f010c1db:	89 e5                	mov    %esp,%ebp
f010c1dd:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c1e0:	ff 75 14             	pushl  0x14(%ebp)
f010c1e3:	ff 75 10             	pushl  0x10(%ebp)
f010c1e6:	ff 75 0c             	pushl  0xc(%ebp)
f010c1e9:	ff 75 08             	pushl  0x8(%ebp)
f010c1ec:	e8 8c be ff ff       	call   f010807d <env_create>
f010c1f1:	83 c4 10             	add    $0x10,%esp
f010c1f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c1f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c1fb:	75 07                	jne    f010c204 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c1fd:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c202:	eb 14                	jmp    f010c218 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c204:	83 ec 0c             	sub    $0xc,%esp
f010c207:	ff 75 f4             	pushl  -0xc(%ebp)
f010c20a:	e8 68 8e ff ff       	call   f0105077 <sched_new_env>
f010c20f:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c212:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c215:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c218:	c9                   	leave  
f010c219:	c3                   	ret    

f010c21a <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010c21a:	55                   	push   %ebp
f010c21b:	89 e5                	mov    %esp,%ebp
f010c21d:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c220:	8b 45 08             	mov    0x8(%ebp),%eax
f010c223:	83 ec 0c             	sub    $0xc,%esp
f010c226:	50                   	push   %eax
f010c227:	e8 68 8e ff ff       	call   f0105094 <sched_run_env>
f010c22c:	83 c4 10             	add    $0x10,%esp
}
f010c22f:	90                   	nop
f010c230:	c9                   	leave  
f010c231:	c3                   	ret    

f010c232 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010c232:	55                   	push   %ebp
f010c233:	89 e5                	mov    %esp,%ebp
f010c235:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c238:	0f 31                	rdtsc  
f010c23a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c23d:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c240:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c243:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c246:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c249:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c24c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c24f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c252:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c255:	89 01                	mov    %eax,(%ecx)
f010c257:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c25a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c25d:	c9                   	leave  
f010c25e:	c2 04 00             	ret    $0x4

f010c261 <sys_rcr2>:

uint32 sys_rcr2()
{
f010c261:	55                   	push   %ebp
f010c262:	89 e5                	mov    %esp,%ebp
f010c264:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c267:	0f 20 d0             	mov    %cr2,%eax
f010c26a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c26d:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c270:	90                   	nop
}
f010c271:	c9                   	leave  
f010c272:	c3                   	ret    

f010c273 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c273:	55                   	push   %ebp
f010c274:	89 e5                	mov    %esp,%ebp
f010c276:	83 ec 04             	sub    $0x4,%esp
f010c279:	8b 45 08             	mov    0x8(%ebp),%eax
f010c27c:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c27f:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c282:	a2 c8 7f 65 f0       	mov    %al,0xf0657fc8
}
f010c287:	90                   	nop
f010c288:	c9                   	leave  
f010c289:	c3                   	ret    

f010c28a <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c28a:	55                   	push   %ebp
f010c28b:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c28d:	c7 05 10 76 6e f0 00 	movl   $0x0,0xf06e7610
f010c294:	00 00 00 
}
f010c297:	90                   	nop
f010c298:	5d                   	pop    %ebp
f010c299:	c3                   	ret    

f010c29a <inctst>:
void inctst()
{
f010c29a:	55                   	push   %ebp
f010c29b:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c29d:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
f010c2a2:	40                   	inc    %eax
f010c2a3:	a3 10 76 6e f0       	mov    %eax,0xf06e7610
}
f010c2a8:	90                   	nop
f010c2a9:	5d                   	pop    %ebp
f010c2aa:	c3                   	ret    

f010c2ab <gettst>:
uint32 gettst()
{
f010c2ab:	55                   	push   %ebp
f010c2ac:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c2ae:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
}
f010c2b3:	5d                   	pop    %ebp
f010c2b4:	c3                   	ret    

f010c2b5 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c2b5:	55                   	push   %ebp
f010c2b6:	89 e5                	mov    %esp,%ebp
f010c2b8:	83 ec 28             	sub    $0x28,%esp
f010c2bb:	8b 45 14             	mov    0x14(%ebp),%eax
f010c2be:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c2c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c2c8:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c2cc:	83 f8 65             	cmp    $0x65,%eax
f010c2cf:	74 5d                	je     f010c32e <tst+0x79>
f010c2d1:	83 f8 65             	cmp    $0x65,%eax
f010c2d4:	7f 0a                	jg     f010c2e0 <tst+0x2b>
f010c2d6:	83 f8 62             	cmp    $0x62,%eax
f010c2d9:	74 73                	je     f010c34e <tst+0x99>
f010c2db:	e9 91 00 00 00       	jmp    f010c371 <tst+0xbc>
f010c2e0:	83 f8 67             	cmp    $0x67,%eax
f010c2e3:	74 29                	je     f010c30e <tst+0x59>
f010c2e5:	83 f8 6c             	cmp    $0x6c,%eax
f010c2e8:	0f 85 83 00 00 00    	jne    f010c371 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010c2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2f1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c2f4:	73 09                	jae    f010c2ff <tst+0x4a>
			chk = 1;
f010c2f6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c2fd:	eb 68                	jmp    f010c367 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010c2ff:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c303:	74 62                	je     f010c367 <tst+0xb2>
			chk = 1;
f010c305:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c30c:	eb 59                	jmp    f010c367 <tst+0xb2>
	case 'g':
		if (n > v1)
f010c30e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c311:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c314:	76 09                	jbe    f010c31f <tst+0x6a>
			chk = 1;
f010c316:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c31d:	eb 4b                	jmp    f010c36a <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010c31f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c323:	74 45                	je     f010c36a <tst+0xb5>
			chk = 1;
f010c325:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c32c:	eb 3c                	jmp    f010c36a <tst+0xb5>
	case 'e':
		if (n == v1)
f010c32e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c331:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c334:	75 09                	jne    f010c33f <tst+0x8a>
			chk = 1;
f010c336:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c33d:	eb 2e                	jmp    f010c36d <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010c33f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c343:	74 28                	je     f010c36d <tst+0xb8>
			chk = 1;
f010c345:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c34c:	eb 1f                	jmp    f010c36d <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010c34e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c351:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c354:	72 1a                	jb     f010c370 <tst+0xbb>
f010c356:	8b 45 08             	mov    0x8(%ebp),%eax
f010c359:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c35c:	77 12                	ja     f010c370 <tst+0xbb>
			chk = 1;
f010c35e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c365:	eb 09                	jmp    f010c370 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c367:	90                   	nop
f010c368:	eb 07                	jmp    f010c371 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c36a:	90                   	nop
f010c36b:	eb 04                	jmp    f010c371 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c36d:	90                   	nop
f010c36e:	eb 01                	jmp    f010c371 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010c370:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010c371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c375:	75 17                	jne    f010c38e <tst+0xd9>
f010c377:	83 ec 04             	sub    $0x4,%esp
f010c37a:	68 95 68 13 f0       	push   $0xf0136895
f010c37f:	68 00 02 00 00       	push   $0x200
f010c384:	68 d3 67 13 f0       	push   $0xf01367d3
f010c389:	e8 18 3e ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010c38e:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
f010c393:	40                   	inc    %eax
f010c394:	a3 10 76 6e f0       	mov    %eax,0xf06e7610
	return;
f010c399:	90                   	nop
}
f010c39a:	c9                   	leave  
f010c39b:	c3                   	ret    

f010c39c <chktst>:

void chktst(uint32 n)
{
f010c39c:	55                   	push   %ebp
f010c39d:	89 e5                	mov    %esp,%ebp
f010c39f:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010c3a2:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
f010c3a7:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c3aa:	75 12                	jne    f010c3be <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010c3ac:	83 ec 0c             	sub    $0xc,%esp
f010c3af:	68 a8 68 13 f0       	push   $0xf01368a8
f010c3b4:	e8 74 48 ff ff       	call   f0100c2d <cprintf>
f010c3b9:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010c3bc:	eb 17                	jmp    f010c3d5 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010c3be:	83 ec 04             	sub    $0x4,%esp
f010c3c1:	68 d4 68 13 f0       	push   $0xf01368d4
f010c3c6:	68 0a 02 00 00       	push   $0x20a
f010c3cb:	68 d3 67 13 f0       	push   $0xf01367d3
f010c3d0:	e8 d1 3d ff ff       	call   f01001a6 <_panic>
}
f010c3d5:	c9                   	leave  
f010c3d6:	c3                   	ret    

f010c3d7 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010c3d7:	55                   	push   %ebp
f010c3d8:	89 e5                	mov    %esp,%ebp
f010c3da:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c3dd:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c3e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010c3e5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010c3ec:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010c3f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c3f7:	0f 84 a5 00 00 00    	je     f010c4a2 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010c3fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c404:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c407:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c40d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c410:	eb 4a                	jmp    f010c45c <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010c412:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c415:	8b 00                	mov    (%eax),%eax
f010c417:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c41a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c41d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c422:	89 c2                	mov    %eax,%edx
f010c424:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c427:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c42e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c431:	01 c8                	add    %ecx,%eax
f010c433:	8b 00                	mov    (%eax),%eax
f010c435:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c438:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c43b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c440:	39 c2                	cmp    %eax,%edx
f010c442:	74 09                	je     f010c44d <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010c444:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010c44b:	eb 3e                	jmp    f010c48b <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010c44d:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c450:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c453:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c459:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c45c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c460:	74 08                	je     f010c46a <sys_check_LRU_lists+0x93>
f010c462:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c465:	8b 40 10             	mov    0x10(%eax),%eax
f010c468:	eb 05                	jmp    f010c46f <sys_check_LRU_lists+0x98>
f010c46a:	b8 00 00 00 00       	mov    $0x0,%eax
f010c46f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c472:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c478:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c47b:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c481:	85 c0                	test   %eax,%eax
f010c483:	75 8d                	jne    f010c412 <sys_check_LRU_lists+0x3b>
f010c485:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c489:	75 87                	jne    f010c412 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010c48b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c48e:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010c494:	8b 45 10             	mov    0x10(%ebp),%eax
f010c497:	39 c2                	cmp    %eax,%edx
f010c499:	74 07                	je     f010c4a2 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010c49b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010c4a2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c4a6:	0f 84 a5 00 00 00    	je     f010c551 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010c4ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c4b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4b6:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c4bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c4bf:	eb 4a                	jmp    f010c50b <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010c4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c4c4:	8b 00                	mov    (%eax),%eax
f010c4c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c4c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c4cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c4d1:	89 c2                	mov    %eax,%edx
f010c4d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c4d6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c4dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c4e0:	01 c8                	add    %ecx,%eax
f010c4e2:	8b 00                	mov    (%eax),%eax
f010c4e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010c4e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c4ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c4ef:	39 c2                	cmp    %eax,%edx
f010c4f1:	74 09                	je     f010c4fc <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010c4f3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010c4fa:	eb 3e                	jmp    f010c53a <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010c4fc:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c4ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c502:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c508:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c50b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c50f:	74 08                	je     f010c519 <sys_check_LRU_lists+0x142>
f010c511:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c514:	8b 40 10             	mov    0x10(%eax),%eax
f010c517:	eb 05                	jmp    f010c51e <sys_check_LRU_lists+0x147>
f010c519:	b8 00 00 00 00       	mov    $0x0,%eax
f010c51e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c521:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c527:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c52a:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c530:	85 c0                	test   %eax,%eax
f010c532:	75 8d                	jne    f010c4c1 <sys_check_LRU_lists+0xea>
f010c534:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c538:	75 87                	jne    f010c4c1 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010c53a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c53d:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010c543:	8b 45 14             	mov    0x14(%ebp),%eax
f010c546:	39 c2                	cmp    %eax,%edx
f010c548:	74 07                	je     f010c551 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010c54a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010c551:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c554:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010c557:	c9                   	leave  
f010c558:	c3                   	ret    

f010c559 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010c559:	55                   	push   %ebp
f010c55a:	89 e5                	mov    %esp,%ebp
f010c55c:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c55f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c564:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010c567:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c56e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c571:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c577:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c57a:	eb 65                	jmp    f010c5e1 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010c57c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c583:	eb 3a                	jmp    f010c5bf <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c585:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c588:	8b 00                	mov    (%eax),%eax
f010c58a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c58d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c590:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c595:	89 c2                	mov    %eax,%edx
f010c597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c59a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c5a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5a4:	01 c8                	add    %ecx,%eax
f010c5a6:	8b 00                	mov    (%eax),%eax
f010c5a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c5ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c5ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c5b3:	39 c2                	cmp    %eax,%edx
f010c5b5:	75 05                	jne    f010c5bc <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010c5b7:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c5ba:	eb 0b                	jmp    f010c5c7 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010c5bc:	ff 45 f4             	incl   -0xc(%ebp)
f010c5bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c5c2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c5c5:	7c be                	jl     f010c585 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c5c7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c5cb:	7e 08                	jle    f010c5d5 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010c5cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c5d0:	e9 ed 00 00 00       	jmp    f010c6c2 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c5d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c5d8:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c5de:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c5e1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c5e5:	74 08                	je     f010c5ef <sys_check_LRU_lists_free+0x96>
f010c5e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c5ea:	8b 40 10             	mov    0x10(%eax),%eax
f010c5ed:	eb 05                	jmp    f010c5f4 <sys_check_LRU_lists_free+0x9b>
f010c5ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010c5f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c5f7:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c5fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c600:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c606:	85 c0                	test   %eax,%eax
f010c608:	0f 85 6e ff ff ff    	jne    f010c57c <sys_check_LRU_lists_free+0x23>
f010c60e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c612:	0f 85 64 ff ff ff    	jne    f010c57c <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c618:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c61b:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c621:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c624:	eb 62                	jmp    f010c688 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010c626:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c62d:	eb 3a                	jmp    f010c669 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c62f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c632:	8b 00                	mov    (%eax),%eax
f010c634:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c637:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c63a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c63f:	89 c2                	mov    %eax,%edx
f010c641:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c644:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c64b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c64e:	01 c8                	add    %ecx,%eax
f010c650:	8b 00                	mov    (%eax),%eax
f010c652:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c655:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c658:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c65d:	39 c2                	cmp    %eax,%edx
f010c65f:	75 05                	jne    f010c666 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010c661:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c664:	eb 0b                	jmp    f010c671 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010c666:	ff 45 f0             	incl   -0x10(%ebp)
f010c669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c66c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c66f:	7c be                	jl     f010c62f <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c671:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c675:	7e 05                	jle    f010c67c <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010c677:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c67a:	eb 46                	jmp    f010c6c2 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c67c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c67f:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c685:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c688:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c68c:	74 08                	je     f010c696 <sys_check_LRU_lists_free+0x13d>
f010c68e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c691:	8b 40 10             	mov    0x10(%eax),%eax
f010c694:	eb 05                	jmp    f010c69b <sys_check_LRU_lists_free+0x142>
f010c696:	b8 00 00 00 00       	mov    $0x0,%eax
f010c69b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c69e:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c6a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c6a7:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c6ad:	85 c0                	test   %eax,%eax
f010c6af:	0f 85 71 ff ff ff    	jne    f010c626 <sys_check_LRU_lists_free+0xcd>
f010c6b5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c6b9:	0f 85 67 ff ff ff    	jne    f010c626 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010c6bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010c6c2:	c9                   	leave  
f010c6c3:	c3                   	ret    

f010c6c4 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010c6c4:	55                   	push   %ebp
f010c6c5:	89 e5                	mov    %esp,%ebp
f010c6c7:	56                   	push   %esi
f010c6c8:	53                   	push   %ebx
f010c6c9:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010c6cc:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c6d0:	0f 87 0e 04 00 00    	ja     f010cae4 <syscall+0x420>
f010c6d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6d9:	c1 e0 02             	shl    $0x2,%eax
f010c6dc:	05 f0 68 13 f0       	add    $0xf01368f0,%eax
f010c6e1:	8b 00                	mov    (%eax),%eax
f010c6e3:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010c6e5:	8b 45 14             	mov    0x14(%ebp),%eax
f010c6e8:	0f b6 d0             	movzbl %al,%edx
f010c6eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c6ee:	83 ec 04             	sub    $0x4,%esp
f010c6f1:	52                   	push   %edx
f010c6f2:	ff 75 10             	pushl  0x10(%ebp)
f010c6f5:	50                   	push   %eax
f010c6f6:	e8 eb f4 ff ff       	call   f010bbe6 <sys_cputs>
f010c6fb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c6fe:	b8 00 00 00 00       	mov    $0x0,%eax
f010c703:	e9 e1 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010c708:	e8 4e f5 ff ff       	call   f010bc5b <sys_cgetc>
f010c70d:	e9 d7 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010c712:	83 ec 08             	sub    $0x8,%esp
f010c715:	ff 75 10             	pushl  0x10(%ebp)
f010c718:	ff 75 0c             	pushl  0xc(%ebp)
f010c71b:	e8 88 f6 ff ff       	call   f010bda8 <sys_calculate_required_frames>
f010c720:	83 c4 10             	add    $0x10,%esp
f010c723:	e9 c1 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010c728:	e8 9d f6 ff ff       	call   f010bdca <sys_calculate_free_frames>
f010c72d:	e9 b7 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010c732:	e8 b2 f6 ff ff       	call   f010bde9 <sys_calculate_modified_frames>
f010c737:	e9 ad 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010c73c:	e8 c2 f6 ff ff       	call   f010be03 <sys_calculate_notmod_frames>
f010c741:	e9 a3 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010c746:	e8 2a f7 ff ff       	call   f010be75 <sys_pf_calculate_allocated_pages>
f010c74b:	e9 99 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010c750:	83 ec 0c             	sub    $0xc,%esp
f010c753:	ff 75 0c             	pushl  0xc(%ebp)
f010c756:	e8 c2 f6 ff ff       	call   f010be1d <sys_calculate_pages_tobe_removed_ready_exit>
f010c75b:	83 c4 10             	add    $0x10,%esp
f010c75e:	e9 86 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010c763:	e8 cb f6 ff ff       	call   f010be33 <sys_scarce_memory>
		return 0;
f010c768:	b8 00 00 00 00       	mov    $0x0,%eax
f010c76d:	e9 77 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010c772:	83 ec 08             	sub    $0x8,%esp
f010c775:	ff 75 10             	pushl  0x10(%ebp)
f010c778:	ff 75 0c             	pushl  0xc(%ebp)
f010c77b:	e8 0e f7 ff ff       	call   f010be8e <sys_free_user_mem>
f010c780:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c783:	b8 00 00 00 00       	mov    $0x0,%eax
f010c788:	e9 5c 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010c78d:	8b 55 10             	mov    0x10(%ebp),%edx
f010c790:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c793:	83 ec 08             	sub    $0x8,%esp
f010c796:	52                   	push   %edx
f010c797:	50                   	push   %eax
f010c798:	e8 d1 f4 ff ff       	call   f010bc6e <__sys_allocate_page>
f010c79d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c7a0:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7a5:	e9 3f 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010c7aa:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010c7ad:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010c7b0:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010c7b3:	8b 55 10             	mov    0x10(%ebp),%edx
f010c7b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7b9:	83 ec 0c             	sub    $0xc,%esp
f010c7bc:	56                   	push   %esi
f010c7bd:	53                   	push   %ebx
f010c7be:	51                   	push   %ecx
f010c7bf:	52                   	push   %edx
f010c7c0:	50                   	push   %eax
f010c7c1:	e8 a8 f5 ff ff       	call   f010bd6e <__sys_map_frame>
f010c7c6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010c7c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7ce:	e9 16 03 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010c7d3:	8b 55 10             	mov    0x10(%ebp),%edx
f010c7d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7d9:	83 ec 08             	sub    $0x8,%esp
f010c7dc:	52                   	push   %edx
f010c7dd:	50                   	push   %eax
f010c7de:	e8 a8 f5 ff ff       	call   f010bd8b <__sys_unmap_frame>
f010c7e3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c7e6:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7eb:	e9 f9 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010c7f0:	83 ec 04             	sub    $0x4,%esp
f010c7f3:	ff 75 14             	pushl  0x14(%ebp)
f010c7f6:	ff 75 10             	pushl  0x10(%ebp)
f010c7f9:	ff 75 0c             	pushl  0xc(%ebp)
f010c7fc:	e8 ef f6 ff ff       	call   f010bef0 <sys_allocate_chunk>
f010c801:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c804:	b8 00 00 00 00       	mov    $0x0,%eax
f010c809:	e9 db 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010c80e:	e8 38 f7 ff ff       	call   f010bf4b <sys_disable_interrupt>
		return 0;
f010c813:	b8 00 00 00 00       	mov    $0x0,%eax
f010c818:	e9 cc 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010c81d:	e8 43 f7 ff ff       	call   f010bf65 <sys_enable_interrupt>
		return 0;
f010c822:	b8 00 00 00 00       	mov    $0x0,%eax
f010c827:	e9 bd 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010c82c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c82f:	0f be c0             	movsbl %al,%eax
f010c832:	83 ec 0c             	sub    $0xc,%esp
f010c835:	50                   	push   %eax
f010c836:	e8 fc f3 ff ff       	call   f010bc37 <sys_cputc>
f010c83b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c83e:	b8 00 00 00 00       	mov    $0x0,%eax
f010c843:	e9 a1 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010c848:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c84b:	0f be c0             	movsbl %al,%eax
f010c84e:	83 ec 0c             	sub    $0xc,%esp
f010c851:	50                   	push   %eax
f010c852:	e8 ea f5 ff ff       	call   f010be41 <sys_clearFFL>
f010c857:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c85a:	b8 00 00 00 00       	mov    $0x0,%eax
f010c85f:	e9 85 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010c864:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c867:	83 ec 08             	sub    $0x8,%esp
f010c86a:	ff 75 10             	pushl  0x10(%ebp)
f010c86d:	50                   	push   %eax
f010c86e:	e8 0c f7 ff ff       	call   f010bf7f <sys_createSemaphore>
f010c873:	83 c4 10             	add    $0x10,%esp
f010c876:	e9 6e 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010c87b:	8b 55 10             	mov    0x10(%ebp),%edx
f010c87e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c881:	83 ec 08             	sub    $0x8,%esp
f010c884:	52                   	push   %edx
f010c885:	50                   	push   %eax
f010c886:	e8 16 f7 ff ff       	call   f010bfa1 <sys_waitSemaphore>
f010c88b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c88e:	b8 00 00 00 00       	mov    $0x0,%eax
f010c893:	e9 51 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010c898:	8b 55 10             	mov    0x10(%ebp),%edx
f010c89b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c89e:	83 ec 08             	sub    $0x8,%esp
f010c8a1:	52                   	push   %edx
f010c8a2:	50                   	push   %eax
f010c8a3:	e8 13 f7 ff ff       	call   f010bfbb <sys_signalSemaphore>
f010c8a8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c8ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010c8b0:	e9 34 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010c8b5:	8b 55 10             	mov    0x10(%ebp),%edx
f010c8b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8bb:	83 ec 08             	sub    $0x8,%esp
f010c8be:	52                   	push   %edx
f010c8bf:	50                   	push   %eax
f010c8c0:	e8 10 f7 ff ff       	call   f010bfd5 <sys_getSemaphoreValue>
f010c8c5:	83 c4 10             	add    $0x10,%esp
f010c8c8:	e9 1c 02 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010c8cd:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010c8d0:	8b 45 14             	mov    0x14(%ebp),%eax
f010c8d3:	0f b6 d0             	movzbl %al,%edx
f010c8d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8d9:	51                   	push   %ecx
f010c8da:	52                   	push   %edx
f010c8db:	ff 75 10             	pushl  0x10(%ebp)
f010c8de:	50                   	push   %eax
f010c8df:	e8 4e f7 ff ff       	call   f010c032 <sys_createSharedObject>
f010c8e4:	83 c4 10             	add    $0x10,%esp
f010c8e7:	e9 fd 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010c8ec:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010c8ef:	8b 55 10             	mov    0x10(%ebp),%edx
f010c8f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8f5:	83 ec 04             	sub    $0x4,%esp
f010c8f8:	51                   	push   %ecx
f010c8f9:	52                   	push   %edx
f010c8fa:	50                   	push   %eax
f010c8fb:	e8 7b f7 ff ff       	call   f010c07b <sys_getSharedObject>
f010c900:	83 c4 10             	add    $0x10,%esp
f010c903:	e9 e1 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010c908:	8b 55 10             	mov    0x10(%ebp),%edx
f010c90b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c90e:	83 ec 08             	sub    $0x8,%esp
f010c911:	52                   	push   %edx
f010c912:	50                   	push   %eax
f010c913:	e8 7f f7 ff ff       	call   f010c097 <sys_freeSharedObject>
f010c918:	83 c4 10             	add    $0x10,%esp
f010c91b:	e9 c9 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010c920:	8b 55 10             	mov    0x10(%ebp),%edx
f010c923:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c926:	83 ec 08             	sub    $0x8,%esp
f010c929:	52                   	push   %edx
f010c92a:	50                   	push   %eax
f010c92b:	e8 32 f7 ff ff       	call   f010c062 <sys_getSizeOfSharedObject>
f010c930:	83 c4 10             	add    $0x10,%esp
f010c933:	e9 b1 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010c938:	e8 73 f7 ff ff       	call   f010c0b0 <sys_getMaxShares>
f010c93d:	e9 a7 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010c942:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c945:	ff 75 18             	pushl  0x18(%ebp)
f010c948:	ff 75 14             	pushl  0x14(%ebp)
f010c94b:	ff 75 10             	pushl  0x10(%ebp)
f010c94e:	50                   	push   %eax
f010c94f:	e8 86 f8 ff ff       	call   f010c1da <sys_create_env>
f010c954:	83 c4 10             	add    $0x10,%esp
f010c957:	e9 8d 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010c95c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c95f:	83 ec 0c             	sub    $0xc,%esp
f010c962:	50                   	push   %eax
f010c963:	e8 b2 f8 ff ff       	call   f010c21a <sys_run_env>
f010c968:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c96b:	b8 00 00 00 00       	mov    $0x0,%eax
f010c970:	e9 74 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010c975:	e8 4d f7 ff ff       	call   f010c0c7 <sys_getenvindex>
f010c97a:	e9 6a 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010c97f:	e8 36 f7 ff ff       	call   f010c0ba <sys_getenvid>
f010c984:	e9 60 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010c989:	e8 99 f7 ff ff       	call   f010c127 <sys_getparentenvid>
f010c98e:	e9 56 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010c993:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c996:	83 ec 0c             	sub    $0xc,%esp
f010c999:	50                   	push   %eax
f010c99a:	e8 95 f7 ff ff       	call   f010c134 <sys_destroy_env>
f010c99f:	83 c4 10             	add    $0x10,%esp
f010c9a2:	e9 42 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010c9a7:	e8 20 f8 ff ff       	call   f010c1cc <sys_exit_env>
		return 0;
f010c9ac:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9b1:	e9 33 01 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010c9b6:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c9b9:	83 ec 0c             	sub    $0xc,%esp
f010c9bc:	50                   	push   %eax
f010c9bd:	e8 70 f8 ff ff       	call   f010c232 <sys_get_virtual_time>
f010c9c2:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010c9c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c9c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010c9cb:	8b 45 10             	mov    0x10(%ebp),%eax
f010c9ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010c9d1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c9d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9d7:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010c9d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9df:	89 10                	mov    %edx,(%eax)
		return 0;
f010c9e1:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9e6:	e9 fe 00 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010c9eb:	83 ec 04             	sub    $0x4,%esp
f010c9ee:	ff 75 14             	pushl  0x14(%ebp)
f010c9f1:	ff 75 10             	pushl  0x10(%ebp)
f010c9f4:	ff 75 0c             	pushl  0xc(%ebp)
f010c9f7:	e8 17 f5 ff ff       	call   f010bf13 <sys_move_user_mem>
f010c9fc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca04:	e9 e0 00 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010ca09:	e8 53 f8 ff ff       	call   f010c261 <sys_rcr2>
f010ca0e:	e9 d6 00 00 00       	jmp    f010cae9 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ca13:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca16:	0f b6 c0             	movzbl %al,%eax
f010ca19:	83 ec 0c             	sub    $0xc,%esp
f010ca1c:	50                   	push   %eax
f010ca1d:	e8 51 f8 ff ff       	call   f010c273 <sys_bypassPageFault>
f010ca22:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca25:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca2a:	e9 ba 00 00 00       	jmp    f010cae9 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010ca2f:	e8 56 f8 ff ff       	call   f010c28a <rsttst>
		return 0;
f010ca34:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca39:	e9 ab 00 00 00       	jmp    f010cae9 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010ca3e:	e8 57 f8 ff ff       	call   f010c29a <inctst>
		return 0;
f010ca43:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca48:	e9 9c 00 00 00       	jmp    f010cae9 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010ca4d:	83 ec 0c             	sub    $0xc,%esp
f010ca50:	ff 75 0c             	pushl  0xc(%ebp)
f010ca53:	e8 44 f9 ff ff       	call   f010c39c <chktst>
f010ca58:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca5b:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca60:	e9 84 00 00 00       	jmp    f010cae9 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010ca65:	e8 41 f8 ff ff       	call   f010c2ab <gettst>
f010ca6a:	eb 7d                	jmp    f010cae9 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010ca6c:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010ca6f:	8b 45 18             	mov    0x18(%ebp),%eax
f010ca72:	0f be c0             	movsbl %al,%eax
f010ca75:	83 ec 0c             	sub    $0xc,%esp
f010ca78:	52                   	push   %edx
f010ca79:	50                   	push   %eax
f010ca7a:	ff 75 14             	pushl  0x14(%ebp)
f010ca7d:	ff 75 10             	pushl  0x10(%ebp)
f010ca80:	ff 75 0c             	pushl  0xc(%ebp)
f010ca83:	e8 2d f8 ff ff       	call   f010c2b5 <tst>
f010ca88:	83 c4 20             	add    $0x20,%esp
		return 0;
f010ca8b:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca90:	eb 57                	jmp    f010cae9 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010ca92:	e8 9c f4 ff ff       	call   f010bf33 <sys_get_heap_strategy>
f010ca97:	eb 50                	jmp    f010cae9 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010ca99:	83 ec 0c             	sub    $0xc,%esp
f010ca9c:	ff 75 0c             	pushl  0xc(%ebp)
f010ca9f:	e8 99 f4 ff ff       	call   f010bf3d <sys_set_uheap_strategy>
f010caa4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010caa7:	b8 00 00 00 00       	mov    $0x0,%eax
f010caac:	eb 3b                	jmp    f010cae9 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010caae:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cab1:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cab4:	8b 55 10             	mov    0x10(%ebp),%edx
f010cab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010caba:	53                   	push   %ebx
f010cabb:	51                   	push   %ecx
f010cabc:	52                   	push   %edx
f010cabd:	50                   	push   %eax
f010cabe:	e8 14 f9 ff ff       	call   f010c3d7 <sys_check_LRU_lists>
f010cac3:	83 c4 10             	add    $0x10,%esp
f010cac6:	eb 21                	jmp    f010cae9 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010cac8:	8b 55 10             	mov    0x10(%ebp),%edx
f010cacb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cace:	83 ec 08             	sub    $0x8,%esp
f010cad1:	52                   	push   %edx
f010cad2:	50                   	push   %eax
f010cad3:	e8 81 fa ff ff       	call   f010c559 <sys_check_LRU_lists_free>
f010cad8:	83 c4 10             	add    $0x10,%esp
f010cadb:	eb 0c                	jmp    f010cae9 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010cadd:	b8 03 00 00 00       	mov    $0x3,%eax
f010cae2:	eb 05                	jmp    f010cae9 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010cae4:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010cae9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010caec:	5b                   	pop    %ebx
f010caed:	5e                   	pop    %esi
f010caee:	5d                   	pop    %ebp
f010caef:	c3                   	ret    

f010caf0 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010caf0:	55                   	push   %ebp
f010caf1:	89 e5                	mov    %esp,%ebp
f010caf3:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010caf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010caf9:	8b 00                	mov    (%eax),%eax
f010cafb:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cafe:	8b 45 10             	mov    0x10(%ebp),%eax
f010cb01:	8b 00                	mov    (%eax),%eax
f010cb03:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cb06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010cb0d:	e9 ca 00 00 00       	jmp    f010cbdc <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010cb12:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cb15:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cb18:	01 d0                	add    %edx,%eax
f010cb1a:	89 c2                	mov    %eax,%edx
f010cb1c:	c1 ea 1f             	shr    $0x1f,%edx
f010cb1f:	01 d0                	add    %edx,%eax
f010cb21:	d1 f8                	sar    %eax
f010cb23:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010cb26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb29:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cb2c:	eb 03                	jmp    f010cb31 <stab_binsearch+0x41>
			m--;
f010cb2e:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cb31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb34:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cb37:	7c 1e                	jl     f010cb57 <stab_binsearch+0x67>
f010cb39:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb3c:	89 d0                	mov    %edx,%eax
f010cb3e:	01 c0                	add    %eax,%eax
f010cb40:	01 d0                	add    %edx,%eax
f010cb42:	c1 e0 02             	shl    $0x2,%eax
f010cb45:	89 c2                	mov    %eax,%edx
f010cb47:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb4a:	01 d0                	add    %edx,%eax
f010cb4c:	8a 40 04             	mov    0x4(%eax),%al
f010cb4f:	0f b6 c0             	movzbl %al,%eax
f010cb52:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cb55:	75 d7                	jne    f010cb2e <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010cb57:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb5a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cb5d:	7d 09                	jge    f010cb68 <stab_binsearch+0x78>
			l = true_m + 1;
f010cb5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb62:	40                   	inc    %eax
f010cb63:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010cb66:	eb 74                	jmp    f010cbdc <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010cb68:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010cb6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb72:	89 d0                	mov    %edx,%eax
f010cb74:	01 c0                	add    %eax,%eax
f010cb76:	01 d0                	add    %edx,%eax
f010cb78:	c1 e0 02             	shl    $0x2,%eax
f010cb7b:	89 c2                	mov    %eax,%edx
f010cb7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb80:	01 d0                	add    %edx,%eax
f010cb82:	8b 40 08             	mov    0x8(%eax),%eax
f010cb85:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cb88:	73 11                	jae    f010cb9b <stab_binsearch+0xab>
			*region_left = m;
f010cb8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb8d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb90:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010cb92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb95:	40                   	inc    %eax
f010cb96:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cb99:	eb 41                	jmp    f010cbdc <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010cb9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb9e:	89 d0                	mov    %edx,%eax
f010cba0:	01 c0                	add    %eax,%eax
f010cba2:	01 d0                	add    %edx,%eax
f010cba4:	c1 e0 02             	shl    $0x2,%eax
f010cba7:	89 c2                	mov    %eax,%edx
f010cba9:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbac:	01 d0                	add    %edx,%eax
f010cbae:	8b 40 08             	mov    0x8(%eax),%eax
f010cbb1:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cbb4:	76 14                	jbe    f010cbca <stab_binsearch+0xda>
			*region_right = m - 1;
f010cbb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbb9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cbbc:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbbf:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010cbc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbc4:	48                   	dec    %eax
f010cbc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cbc8:	eb 12                	jmp    f010cbdc <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010cbca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbcd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cbd0:	89 10                	mov    %edx,(%eax)
			l = m;
f010cbd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cbd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010cbd8:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010cbdc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cbdf:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010cbe2:	0f 8e 2a ff ff ff    	jle    f010cb12 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010cbe8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbec:	75 0f                	jne    f010cbfd <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010cbee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbf1:	8b 00                	mov    (%eax),%eax
f010cbf3:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cbf6:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbf9:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010cbfb:	eb 3d                	jmp    f010cc3a <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cbfd:	8b 45 10             	mov    0x10(%ebp),%eax
f010cc00:	8b 00                	mov    (%eax),%eax
f010cc02:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cc05:	eb 03                	jmp    f010cc0a <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010cc07:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010cc0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc0d:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cc0f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cc12:	7d 1e                	jge    f010cc32 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010cc14:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cc17:	89 d0                	mov    %edx,%eax
f010cc19:	01 c0                	add    %eax,%eax
f010cc1b:	01 d0                	add    %edx,%eax
f010cc1d:	c1 e0 02             	shl    $0x2,%eax
f010cc20:	89 c2                	mov    %eax,%edx
f010cc22:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc25:	01 d0                	add    %edx,%eax
f010cc27:	8a 40 04             	mov    0x4(%eax),%al
f010cc2a:	0f b6 c0             	movzbl %al,%eax
f010cc2d:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cc30:	75 d5                	jne    f010cc07 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010cc32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc35:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cc38:	89 10                	mov    %edx,(%eax)
	}
}
f010cc3a:	90                   	nop
f010cc3b:	c9                   	leave  
f010cc3c:	c3                   	ret    

f010cc3d <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010cc3d:	55                   	push   %ebp
f010cc3e:	89 e5                	mov    %esp,%ebp
f010cc40:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010cc43:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc46:	c7 00 b4 69 13 f0    	movl   $0xf01369b4,(%eax)
	info->eip_line = 0;
f010cc4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010cc56:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc59:	c7 40 08 b4 69 13 f0 	movl   $0xf01369b4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010cc60:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc63:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010cc6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc6d:	8b 55 08             	mov    0x8(%ebp),%edx
f010cc70:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010cc73:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc76:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010cc7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc80:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010cc85:	76 1e                	jbe    f010cca5 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010cc87:	c7 45 f4 30 c4 13 f0 	movl   $0xf013c430,-0xc(%ebp)
		stab_end = __STAB_END__;
f010cc8e:	c7 45 f0 bc a0 17 f0 	movl   $0xf017a0bc,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010cc95:	c7 45 ec bd a0 17 f0 	movl   $0xf017a0bd,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010cc9c:	c7 45 e8 f9 6b 18 f0 	movl   $0xf0186bf9,-0x18(%ebp)
f010cca3:	eb 2a                	jmp    f010cccf <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010cca5:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010ccac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ccaf:	8b 00                	mov    (%eax),%eax
f010ccb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010ccb4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ccb7:	8b 40 04             	mov    0x4(%eax),%eax
f010ccba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010ccbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ccc0:	8b 40 08             	mov    0x8(%eax),%eax
f010ccc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010ccc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ccc9:	8b 40 0c             	mov    0xc(%eax),%eax
f010cccc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010cccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccd2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ccd5:	76 0a                	jbe    f010cce1 <debuginfo_eip+0xa4>
f010ccd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccda:	48                   	dec    %eax
f010ccdb:	8a 00                	mov    (%eax),%al
f010ccdd:	84 c0                	test   %al,%al
f010ccdf:	74 0a                	je     f010cceb <debuginfo_eip+0xae>
		return -1;
f010cce1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010cce6:	e9 01 02 00 00       	jmp    f010ceec <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010cceb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010ccf2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ccf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccf8:	29 c2                	sub    %eax,%edx
f010ccfa:	89 d0                	mov    %edx,%eax
f010ccfc:	c1 f8 02             	sar    $0x2,%eax
f010ccff:	89 c2                	mov    %eax,%edx
f010cd01:	89 d0                	mov    %edx,%eax
f010cd03:	c1 e0 02             	shl    $0x2,%eax
f010cd06:	01 d0                	add    %edx,%eax
f010cd08:	c1 e0 02             	shl    $0x2,%eax
f010cd0b:	01 d0                	add    %edx,%eax
f010cd0d:	c1 e0 02             	shl    $0x2,%eax
f010cd10:	01 d0                	add    %edx,%eax
f010cd12:	89 c1                	mov    %eax,%ecx
f010cd14:	c1 e1 08             	shl    $0x8,%ecx
f010cd17:	01 c8                	add    %ecx,%eax
f010cd19:	89 c1                	mov    %eax,%ecx
f010cd1b:	c1 e1 10             	shl    $0x10,%ecx
f010cd1e:	01 c8                	add    %ecx,%eax
f010cd20:	01 c0                	add    %eax,%eax
f010cd22:	01 d0                	add    %edx,%eax
f010cd24:	48                   	dec    %eax
f010cd25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010cd28:	ff 75 08             	pushl  0x8(%ebp)
f010cd2b:	6a 64                	push   $0x64
f010cd2d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010cd30:	50                   	push   %eax
f010cd31:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010cd34:	50                   	push   %eax
f010cd35:	ff 75 f4             	pushl  -0xc(%ebp)
f010cd38:	e8 b3 fd ff ff       	call   f010caf0 <stab_binsearch>
f010cd3d:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010cd40:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cd43:	85 c0                	test   %eax,%eax
f010cd45:	75 0a                	jne    f010cd51 <debuginfo_eip+0x114>
		return -1;
f010cd47:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010cd4c:	e9 9b 01 00 00       	jmp    f010ceec <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010cd51:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cd54:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010cd57:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010cd5a:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010cd5d:	ff 75 08             	pushl  0x8(%ebp)
f010cd60:	6a 24                	push   $0x24
f010cd62:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010cd65:	50                   	push   %eax
f010cd66:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010cd69:	50                   	push   %eax
f010cd6a:	ff 75 f4             	pushl  -0xc(%ebp)
f010cd6d:	e8 7e fd ff ff       	call   f010caf0 <stab_binsearch>
f010cd72:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010cd75:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010cd78:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010cd7b:	39 c2                	cmp    %eax,%edx
f010cd7d:	0f 8f 86 00 00 00    	jg     f010ce09 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010cd83:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cd86:	89 c2                	mov    %eax,%edx
f010cd88:	89 d0                	mov    %edx,%eax
f010cd8a:	01 c0                	add    %eax,%eax
f010cd8c:	01 d0                	add    %edx,%eax
f010cd8e:	c1 e0 02             	shl    $0x2,%eax
f010cd91:	89 c2                	mov    %eax,%edx
f010cd93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd96:	01 d0                	add    %edx,%eax
f010cd98:	8b 00                	mov    (%eax),%eax
f010cd9a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010cd9d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cda0:	29 d1                	sub    %edx,%ecx
f010cda2:	89 ca                	mov    %ecx,%edx
f010cda4:	39 d0                	cmp    %edx,%eax
f010cda6:	73 22                	jae    f010cdca <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010cda8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cdab:	89 c2                	mov    %eax,%edx
f010cdad:	89 d0                	mov    %edx,%eax
f010cdaf:	01 c0                	add    %eax,%eax
f010cdb1:	01 d0                	add    %edx,%eax
f010cdb3:	c1 e0 02             	shl    $0x2,%eax
f010cdb6:	89 c2                	mov    %eax,%edx
f010cdb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdbb:	01 d0                	add    %edx,%eax
f010cdbd:	8b 10                	mov    (%eax),%edx
f010cdbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cdc2:	01 c2                	add    %eax,%edx
f010cdc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdc7:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010cdca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cdcd:	89 c2                	mov    %eax,%edx
f010cdcf:	89 d0                	mov    %edx,%eax
f010cdd1:	01 c0                	add    %eax,%eax
f010cdd3:	01 d0                	add    %edx,%eax
f010cdd5:	c1 e0 02             	shl    $0x2,%eax
f010cdd8:	89 c2                	mov    %eax,%edx
f010cdda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cddd:	01 d0                	add    %edx,%eax
f010cddf:	8b 50 08             	mov    0x8(%eax),%edx
f010cde2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cde5:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010cde8:	8b 55 08             	mov    0x8(%ebp),%edx
f010cdeb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdee:	8b 40 10             	mov    0x10(%eax),%eax
f010cdf1:	29 c2                	sub    %eax,%edx
f010cdf3:	89 d0                	mov    %edx,%eax
f010cdf5:	c1 f8 02             	sar    $0x2,%eax
f010cdf8:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010cdfb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cdfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010ce01:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ce04:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010ce07:	eb 15                	jmp    f010ce1e <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010ce09:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce0c:	8b 55 08             	mov    0x8(%ebp),%edx
f010ce0f:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010ce12:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ce15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010ce18:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ce1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010ce1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce21:	8b 40 08             	mov    0x8(%eax),%eax
f010ce24:	83 ec 08             	sub    $0x8,%esp
f010ce27:	6a 3a                	push   $0x3a
f010ce29:	50                   	push   %eax
f010ce2a:	e8 2a 34 02 00       	call   f0130259 <strfind>
f010ce2f:	83 c4 10             	add    $0x10,%esp
f010ce32:	89 c2                	mov    %eax,%edx
f010ce34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce37:	8b 40 08             	mov    0x8(%eax),%eax
f010ce3a:	29 c2                	sub    %eax,%edx
f010ce3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce3f:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ce42:	eb 03                	jmp    f010ce47 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010ce44:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ce47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ce4a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ce4d:	7c 4e                	jl     f010ce9d <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010ce4f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce52:	89 d0                	mov    %edx,%eax
f010ce54:	01 c0                	add    %eax,%eax
f010ce56:	01 d0                	add    %edx,%eax
f010ce58:	c1 e0 02             	shl    $0x2,%eax
f010ce5b:	89 c2                	mov    %eax,%edx
f010ce5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce60:	01 d0                	add    %edx,%eax
f010ce62:	8a 40 04             	mov    0x4(%eax),%al
f010ce65:	3c 84                	cmp    $0x84,%al
f010ce67:	74 34                	je     f010ce9d <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010ce69:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce6c:	89 d0                	mov    %edx,%eax
f010ce6e:	01 c0                	add    %eax,%eax
f010ce70:	01 d0                	add    %edx,%eax
f010ce72:	c1 e0 02             	shl    $0x2,%eax
f010ce75:	89 c2                	mov    %eax,%edx
f010ce77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce7a:	01 d0                	add    %edx,%eax
f010ce7c:	8a 40 04             	mov    0x4(%eax),%al
f010ce7f:	3c 64                	cmp    $0x64,%al
f010ce81:	75 c1                	jne    f010ce44 <debuginfo_eip+0x207>
f010ce83:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce86:	89 d0                	mov    %edx,%eax
f010ce88:	01 c0                	add    %eax,%eax
f010ce8a:	01 d0                	add    %edx,%eax
f010ce8c:	c1 e0 02             	shl    $0x2,%eax
f010ce8f:	89 c2                	mov    %eax,%edx
f010ce91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce94:	01 d0                	add    %edx,%eax
f010ce96:	8b 40 08             	mov    0x8(%eax),%eax
f010ce99:	85 c0                	test   %eax,%eax
f010ce9b:	74 a7                	je     f010ce44 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010ce9d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cea0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010cea3:	7c 42                	jl     f010cee7 <debuginfo_eip+0x2aa>
f010cea5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010cea8:	89 d0                	mov    %edx,%eax
f010ceaa:	01 c0                	add    %eax,%eax
f010ceac:	01 d0                	add    %edx,%eax
f010ceae:	c1 e0 02             	shl    $0x2,%eax
f010ceb1:	89 c2                	mov    %eax,%edx
f010ceb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ceb6:	01 d0                	add    %edx,%eax
f010ceb8:	8b 00                	mov    (%eax),%eax
f010ceba:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010cebd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cec0:	29 d1                	sub    %edx,%ecx
f010cec2:	89 ca                	mov    %ecx,%edx
f010cec4:	39 d0                	cmp    %edx,%eax
f010cec6:	73 1f                	jae    f010cee7 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010cec8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010cecb:	89 d0                	mov    %edx,%eax
f010cecd:	01 c0                	add    %eax,%eax
f010cecf:	01 d0                	add    %edx,%eax
f010ced1:	c1 e0 02             	shl    $0x2,%eax
f010ced4:	89 c2                	mov    %eax,%edx
f010ced6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ced9:	01 d0                	add    %edx,%eax
f010cedb:	8b 10                	mov    (%eax),%edx
f010cedd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cee0:	01 c2                	add    %eax,%edx
f010cee2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cee5:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010cee7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ceec:	c9                   	leave  
f010ceed:	c3                   	ret    

f010ceee <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010ceee:	55                   	push   %ebp
f010ceef:	89 e5                	mov    %esp,%ebp
f010cef1:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010cef4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010cef8:	74 1c                	je     f010cf16 <setPageReplacmentAlgorithmLRU+0x28>
f010cefa:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010cefe:	74 16                	je     f010cf16 <setPageReplacmentAlgorithmLRU+0x28>
f010cf00:	68 c0 69 13 f0       	push   $0xf01369c0
f010cf05:	68 0a 6a 13 f0       	push   $0xf0136a0a
f010cf0a:	6a 18                	push   $0x18
f010cf0c:	68 1f 6a 13 f0       	push   $0xf0136a1f
f010cf11:	e8 90 32 ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010cf16:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf19:	a3 e4 74 6e f0       	mov    %eax,0xf06e74e4
}
f010cf1e:	90                   	nop
f010cf1f:	c9                   	leave  
f010cf20:	c3                   	ret    

f010cf21 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010cf21:	55                   	push   %ebp
f010cf22:	89 e5                	mov    %esp,%ebp
f010cf24:	c7 05 e4 74 6e f0 03 	movl   $0x3,0xf06e74e4
f010cf2b:	00 00 00 
f010cf2e:	90                   	nop
f010cf2f:	5d                   	pop    %ebp
f010cf30:	c3                   	ret    

f010cf31 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010cf31:	55                   	push   %ebp
f010cf32:	89 e5                	mov    %esp,%ebp
f010cf34:	c7 05 e4 74 6e f0 04 	movl   $0x4,0xf06e74e4
f010cf3b:	00 00 00 
f010cf3e:	90                   	nop
f010cf3f:	5d                   	pop    %ebp
f010cf40:	c3                   	ret    

f010cf41 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010cf41:	55                   	push   %ebp
f010cf42:	89 e5                	mov    %esp,%ebp
f010cf44:	c7 05 e4 74 6e f0 05 	movl   $0x5,0xf06e74e4
f010cf4b:	00 00 00 
f010cf4e:	90                   	nop
f010cf4f:	5d                   	pop    %ebp
f010cf50:	c3                   	ret    

f010cf51 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010cf51:	55                   	push   %ebp
f010cf52:	89 e5                	mov    %esp,%ebp
f010cf54:	c7 05 e4 74 6e f0 07 	movl   $0x7,0xf06e74e4
f010cf5b:	00 00 00 
f010cf5e:	90                   	nop
f010cf5f:	5d                   	pop    %ebp
f010cf60:	c3                   	ret    

f010cf61 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010cf61:	55                   	push   %ebp
f010cf62:	89 e5                	mov    %esp,%ebp
f010cf64:	c7 05 e4 74 6e f0 06 	movl   $0x6,0xf06e74e4
f010cf6b:	00 00 00 
f010cf6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf71:	a3 08 f1 67 f0       	mov    %eax,0xf067f108
f010cf76:	90                   	nop
f010cf77:	5d                   	pop    %ebp
f010cf78:	c3                   	ret    

f010cf79 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010cf79:	55                   	push   %ebp
f010cf7a:	89 e5                	mov    %esp,%ebp
f010cf7c:	8b 15 e4 74 6e f0    	mov    0xf06e74e4,%edx
f010cf82:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf85:	39 c2                	cmp    %eax,%edx
f010cf87:	0f 94 c0             	sete   %al
f010cf8a:	0f b6 c0             	movzbl %al,%eax
f010cf8d:	5d                   	pop    %ebp
f010cf8e:	c3                   	ret    

f010cf8f <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010cf8f:	55                   	push   %ebp
f010cf90:	89 e5                	mov    %esp,%ebp
f010cf92:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cf97:	83 f8 03             	cmp    $0x3,%eax
f010cf9a:	75 07                	jne    f010cfa3 <isPageReplacmentAlgorithmCLOCK+0x14>
f010cf9c:	b8 01 00 00 00       	mov    $0x1,%eax
f010cfa1:	eb 05                	jmp    f010cfa8 <isPageReplacmentAlgorithmCLOCK+0x19>
f010cfa3:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfa8:	5d                   	pop    %ebp
f010cfa9:	c3                   	ret    

f010cfaa <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010cfaa:	55                   	push   %ebp
f010cfab:	89 e5                	mov    %esp,%ebp
f010cfad:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cfb2:	83 f8 04             	cmp    $0x4,%eax
f010cfb5:	75 07                	jne    f010cfbe <isPageReplacmentAlgorithmFIFO+0x14>
f010cfb7:	b8 01 00 00 00       	mov    $0x1,%eax
f010cfbc:	eb 05                	jmp    f010cfc3 <isPageReplacmentAlgorithmFIFO+0x19>
f010cfbe:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfc3:	5d                   	pop    %ebp
f010cfc4:	c3                   	ret    

f010cfc5 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010cfc5:	55                   	push   %ebp
f010cfc6:	89 e5                	mov    %esp,%ebp
f010cfc8:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cfcd:	83 f8 05             	cmp    $0x5,%eax
f010cfd0:	75 07                	jne    f010cfd9 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010cfd2:	b8 01 00 00 00       	mov    $0x1,%eax
f010cfd7:	eb 05                	jmp    f010cfde <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010cfd9:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfde:	5d                   	pop    %ebp
f010cfdf:	c3                   	ret    

f010cfe0 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010cfe0:	55                   	push   %ebp
f010cfe1:	89 e5                	mov    %esp,%ebp
f010cfe3:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cfe8:	83 f8 07             	cmp    $0x7,%eax
f010cfeb:	75 07                	jne    f010cff4 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010cfed:	b8 01 00 00 00       	mov    $0x1,%eax
f010cff2:	eb 05                	jmp    f010cff9 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010cff4:	b8 00 00 00 00       	mov    $0x0,%eax
f010cff9:	5d                   	pop    %ebp
f010cffa:	c3                   	ret    

f010cffb <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010cffb:	55                   	push   %ebp
f010cffc:	89 e5                	mov    %esp,%ebp
f010cffe:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010d003:	83 f8 06             	cmp    $0x6,%eax
f010d006:	75 07                	jne    f010d00f <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d008:	b8 01 00 00 00       	mov    $0x1,%eax
f010d00d:	eb 05                	jmp    f010d014 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d00f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d014:	5d                   	pop    %ebp
f010d015:	c3                   	ret    

f010d016 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d016:	55                   	push   %ebp
f010d017:	89 e5                	mov    %esp,%ebp
f010d019:	8b 45 08             	mov    0x8(%ebp),%eax
f010d01c:	a3 ac 74 6e f0       	mov    %eax,0xf06e74ac
f010d021:	90                   	nop
f010d022:	5d                   	pop    %ebp
f010d023:	c3                   	ret    

f010d024 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d024:	55                   	push   %ebp
f010d025:	89 e5                	mov    %esp,%ebp
f010d027:	a1 ac 74 6e f0       	mov    0xf06e74ac,%eax
f010d02c:	5d                   	pop    %ebp
f010d02d:	c3                   	ret    

f010d02e <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d02e:	55                   	push   %ebp
f010d02f:	89 e5                	mov    %esp,%ebp
f010d031:	8b 45 08             	mov    0x8(%ebp),%eax
f010d034:	a3 ec 74 6e f0       	mov    %eax,0xf06e74ec
f010d039:	90                   	nop
f010d03a:	5d                   	pop    %ebp
f010d03b:	c3                   	ret    

f010d03c <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d03c:	55                   	push   %ebp
f010d03d:	89 e5                	mov    %esp,%ebp
f010d03f:	a1 ec 74 6e f0       	mov    0xf06e74ec,%eax
f010d044:	5d                   	pop    %ebp
f010d045:	c3                   	ret    

f010d046 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d046:	55                   	push   %ebp
f010d047:	89 e5                	mov    %esp,%ebp
f010d049:	8b 45 08             	mov    0x8(%ebp),%eax
f010d04c:	a3 0c 75 6e f0       	mov    %eax,0xf06e750c
f010d051:	90                   	nop
f010d052:	5d                   	pop    %ebp
f010d053:	c3                   	ret    

f010d054 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d054:	55                   	push   %ebp
f010d055:	89 e5                	mov    %esp,%ebp
f010d057:	a1 0c 75 6e f0       	mov    0xf06e750c,%eax
f010d05c:	5d                   	pop    %ebp
f010d05d:	c3                   	ret    

f010d05e <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d05e:	55                   	push   %ebp
f010d05f:	89 e5                	mov    %esp,%ebp
f010d061:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d064:	8b 45 08             	mov    0x8(%ebp),%eax
f010d067:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d06a:	83 ec 04             	sub    $0x4,%esp
f010d06d:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d070:	52                   	push   %edx
f010d071:	ff 75 0c             	pushl  0xc(%ebp)
f010d074:	50                   	push   %eax
f010d075:	e8 15 9a ff ff       	call   f0106a8f <__static_cpt>
f010d07a:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d07d:	90                   	nop
f010d07e:	c9                   	leave  
f010d07f:	c3                   	ret    

f010d080 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d080:	55                   	push   %ebp
f010d081:	89 e5                	mov    %esp,%ebp
f010d083:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010d086:	83 ec 04             	sub    $0x4,%esp
f010d089:	68 3c 6a 13 f0       	push   $0xf0136a3c
f010d08e:	6a 50                	push   $0x50
f010d090:	68 1f 6a 13 f0       	push   $0xf0136a1f
f010d095:	e8 0c 31 ff ff       	call   f01001a6 <_panic>

f010d09a <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d09a:	55                   	push   %ebp
f010d09b:	89 e5                	mov    %esp,%ebp
f010d09d:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010d0a0:	83 ec 04             	sub    $0x4,%esp
f010d0a3:	68 70 6a 13 f0       	push   $0xf0136a70
f010d0a8:	6a 57                	push   $0x57
f010d0aa:	68 1f 6a 13 f0       	push   $0xf0136a1f
f010d0af:	e8 f2 30 ff ff       	call   f01001a6 <_panic>

f010d0b4 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d0b4:	55                   	push   %ebp
f010d0b5:	89 e5                	mov    %esp,%ebp
f010d0b7:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d0ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d0c1:	e9 aa 00 00 00       	jmp    f010d170 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d0c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0c9:	89 d0                	mov    %edx,%eax
f010d0cb:	c1 e0 02             	shl    $0x2,%eax
f010d0ce:	01 d0                	add    %edx,%eax
f010d0d0:	01 c0                	add    %eax,%eax
f010d0d2:	01 d0                	add    %edx,%eax
f010d0d4:	01 c0                	add    %eax,%eax
f010d0d6:	01 d0                	add    %edx,%eax
f010d0d8:	c1 e0 02             	shl    $0x2,%eax
f010d0db:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d0e0:	83 ec 04             	sub    $0x4,%esp
f010d0e3:	6a 5c                	push   $0x5c
f010d0e5:	6a 00                	push   $0x0
f010d0e7:	50                   	push   %eax
f010d0e8:	e8 98 31 02 00       	call   f0130285 <memset>
f010d0ed:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d0f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0f3:	89 d0                	mov    %edx,%eax
f010d0f5:	c1 e0 02             	shl    $0x2,%eax
f010d0f8:	01 d0                	add    %edx,%eax
f010d0fa:	01 c0                	add    %eax,%eax
f010d0fc:	01 d0                	add    %edx,%eax
f010d0fe:	01 c0                	add    %eax,%eax
f010d100:	01 d0                	add    %edx,%eax
f010d102:	c1 e0 02             	shl    $0x2,%eax
f010d105:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d10a:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d10d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d110:	89 d0                	mov    %edx,%eax
f010d112:	c1 e0 02             	shl    $0x2,%eax
f010d115:	01 d0                	add    %edx,%eax
f010d117:	01 c0                	add    %eax,%eax
f010d119:	01 d0                	add    %edx,%eax
f010d11b:	01 c0                	add    %eax,%eax
f010d11d:	01 d0                	add    %edx,%eax
f010d11f:	c1 e0 02             	shl    $0x2,%eax
f010d122:	05 c4 50 6e f0       	add    $0xf06e50c4,%eax
f010d127:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d12d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d130:	89 d0                	mov    %edx,%eax
f010d132:	c1 e0 02             	shl    $0x2,%eax
f010d135:	01 d0                	add    %edx,%eax
f010d137:	01 c0                	add    %eax,%eax
f010d139:	01 d0                	add    %edx,%eax
f010d13b:	01 c0                	add    %eax,%eax
f010d13d:	01 d0                	add    %edx,%eax
f010d13f:	c1 e0 02             	shl    $0x2,%eax
f010d142:	05 c8 50 6e f0       	add    $0xf06e50c8,%eax
f010d147:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d14d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d150:	89 d0                	mov    %edx,%eax
f010d152:	c1 e0 02             	shl    $0x2,%eax
f010d155:	01 d0                	add    %edx,%eax
f010d157:	01 c0                	add    %eax,%eax
f010d159:	01 d0                	add    %edx,%eax
f010d15b:	01 c0                	add    %eax,%eax
f010d15d:	01 d0                	add    %edx,%eax
f010d15f:	c1 e0 02             	shl    $0x2,%eax
f010d162:	05 d0 50 6e f0       	add    $0xf06e50d0,%eax
f010d167:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d16d:	ff 45 f4             	incl   -0xc(%ebp)
f010d170:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d174:	0f 8e 4c ff ff ff    	jle    f010d0c6 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d17a:	90                   	nop
f010d17b:	c9                   	leave  
f010d17c:	c3                   	ret    

f010d17d <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d17d:	55                   	push   %ebp
f010d17e:	89 e5                	mov    %esp,%ebp
f010d180:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010d183:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d18a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d191:	eb 2b                	jmp    f010d1be <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d193:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d196:	89 d0                	mov    %edx,%eax
f010d198:	c1 e0 02             	shl    $0x2,%eax
f010d19b:	01 d0                	add    %edx,%eax
f010d19d:	01 c0                	add    %eax,%eax
f010d19f:	01 d0                	add    %edx,%eax
f010d1a1:	01 c0                	add    %eax,%eax
f010d1a3:	01 d0                	add    %edx,%eax
f010d1a5:	c1 e0 02             	shl    $0x2,%eax
f010d1a8:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d1ad:	8a 00                	mov    (%eax),%al
f010d1af:	84 c0                	test   %al,%al
f010d1b1:	74 08                	je     f010d1bb <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d1b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010d1b9:	eb 09                	jmp    f010d1c4 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d1bb:	ff 45 f0             	incl   -0x10(%ebp)
f010d1be:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010d1c2:	7e cf                	jle    f010d193 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d1c4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010d1c8:	75 14                	jne    f010d1de <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010d1ca:	83 ec 04             	sub    $0x4,%esp
f010d1cd:	68 b4 6a 13 f0       	push   $0xf0136ab4
f010d1d2:	6a 53                	push   $0x53
f010d1d4:	68 04 6b 13 f0       	push   $0xf0136b04
f010d1d9:	e8 c8 2f ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d1de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d1e1:	89 d0                	mov    %edx,%eax
f010d1e3:	c1 e0 02             	shl    $0x2,%eax
f010d1e6:	01 d0                	add    %edx,%eax
f010d1e8:	01 c0                	add    %eax,%eax
f010d1ea:	01 d0                	add    %edx,%eax
f010d1ec:	01 c0                	add    %eax,%eax
f010d1ee:	01 d0                	add    %edx,%eax
f010d1f0:	c1 e0 02             	shl    $0x2,%eax
f010d1f3:	8d 90 80 50 6e f0    	lea    -0xf91af80(%eax),%edx
f010d1f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fc:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d1fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d201:	89 d0                	mov    %edx,%eax
f010d203:	c1 e0 02             	shl    $0x2,%eax
f010d206:	01 d0                	add    %edx,%eax
f010d208:	01 c0                	add    %eax,%eax
f010d20a:	01 d0                	add    %edx,%eax
f010d20c:	01 c0                	add    %eax,%eax
f010d20e:	01 d0                	add    %edx,%eax
f010d210:	c1 e0 02             	shl    $0x2,%eax
f010d213:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d218:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d21b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d21e:	c9                   	leave  
f010d21f:	c3                   	ret    

f010d220 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d220:	55                   	push   %ebp
f010d221:	89 e5                	mov    %esp,%ebp
f010d223:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d226:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d22d:	eb 7a                	jmp    f010d2a9 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d22f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d232:	89 d0                	mov    %edx,%eax
f010d234:	c1 e0 02             	shl    $0x2,%eax
f010d237:	01 d0                	add    %edx,%eax
f010d239:	01 c0                	add    %eax,%eax
f010d23b:	01 d0                	add    %edx,%eax
f010d23d:	01 c0                	add    %eax,%eax
f010d23f:	01 d0                	add    %edx,%eax
f010d241:	c1 e0 02             	shl    $0x2,%eax
f010d244:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d249:	8a 00                	mov    (%eax),%al
f010d24b:	84 c0                	test   %al,%al
f010d24d:	75 56                	jne    f010d2a5 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d24f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d252:	89 d0                	mov    %edx,%eax
f010d254:	c1 e0 02             	shl    $0x2,%eax
f010d257:	01 d0                	add    %edx,%eax
f010d259:	01 c0                	add    %eax,%eax
f010d25b:	01 d0                	add    %edx,%eax
f010d25d:	01 c0                	add    %eax,%eax
f010d25f:	01 d0                	add    %edx,%eax
f010d261:	c1 e0 02             	shl    $0x2,%eax
f010d264:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d269:	8b 00                	mov    (%eax),%eax
f010d26b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d26e:	75 36                	jne    f010d2a6 <get_semaphore_object_ID+0x86>
f010d270:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d273:	89 d0                	mov    %edx,%eax
f010d275:	c1 e0 02             	shl    $0x2,%eax
f010d278:	01 d0                	add    %edx,%eax
f010d27a:	01 c0                	add    %eax,%eax
f010d27c:	01 d0                	add    %edx,%eax
f010d27e:	01 c0                	add    %eax,%eax
f010d280:	01 d0                	add    %edx,%eax
f010d282:	c1 e0 02             	shl    $0x2,%eax
f010d285:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d28a:	83 c0 04             	add    $0x4,%eax
f010d28d:	83 ec 08             	sub    $0x8,%esp
f010d290:	50                   	push   %eax
f010d291:	ff 75 0c             	pushl  0xc(%ebp)
f010d294:	e8 0a 2f 02 00       	call   f01301a3 <strcmp>
f010d299:	83 c4 10             	add    $0x10,%esp
f010d29c:	85 c0                	test   %eax,%eax
f010d29e:	75 06                	jne    f010d2a6 <get_semaphore_object_ID+0x86>
		{
			return i;
f010d2a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2a3:	eb 0f                	jmp    f010d2b4 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d2a5:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d2a6:	ff 45 f4             	incl   -0xc(%ebp)
f010d2a9:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d2ad:	7e 80                	jle    f010d22f <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d2af:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d2b4:	c9                   	leave  
f010d2b5:	c3                   	ret    

f010d2b6 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d2b6:	55                   	push   %ebp
f010d2b7:	89 e5                	mov    %esp,%ebp
f010d2b9:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d2bc:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d2c0:	76 0a                	jbe    f010d2cc <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d2c2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d2c7:	e9 ac 00 00 00       	jmp    f010d378 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d2cc:	8b 55 08             	mov    0x8(%ebp),%edx
f010d2cf:	89 d0                	mov    %edx,%eax
f010d2d1:	c1 e0 02             	shl    $0x2,%eax
f010d2d4:	01 d0                	add    %edx,%eax
f010d2d6:	01 c0                	add    %eax,%eax
f010d2d8:	01 d0                	add    %edx,%eax
f010d2da:	01 c0                	add    %eax,%eax
f010d2dc:	01 d0                	add    %edx,%eax
f010d2de:	c1 e0 02             	shl    $0x2,%eax
f010d2e1:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d2e6:	83 ec 04             	sub    $0x4,%esp
f010d2e9:	6a 5c                	push   $0x5c
f010d2eb:	6a 00                	push   $0x0
f010d2ed:	50                   	push   %eax
f010d2ee:	e8 92 2f 02 00       	call   f0130285 <memset>
f010d2f3:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d2f6:	8b 55 08             	mov    0x8(%ebp),%edx
f010d2f9:	89 d0                	mov    %edx,%eax
f010d2fb:	c1 e0 02             	shl    $0x2,%eax
f010d2fe:	01 d0                	add    %edx,%eax
f010d300:	01 c0                	add    %eax,%eax
f010d302:	01 d0                	add    %edx,%eax
f010d304:	01 c0                	add    %eax,%eax
f010d306:	01 d0                	add    %edx,%eax
f010d308:	c1 e0 02             	shl    $0x2,%eax
f010d30b:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d310:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d313:	8b 55 08             	mov    0x8(%ebp),%edx
f010d316:	89 d0                	mov    %edx,%eax
f010d318:	c1 e0 02             	shl    $0x2,%eax
f010d31b:	01 d0                	add    %edx,%eax
f010d31d:	01 c0                	add    %eax,%eax
f010d31f:	01 d0                	add    %edx,%eax
f010d321:	01 c0                	add    %eax,%eax
f010d323:	01 d0                	add    %edx,%eax
f010d325:	c1 e0 02             	shl    $0x2,%eax
f010d328:	05 c4 50 6e f0       	add    $0xf06e50c4,%eax
f010d32d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d333:	8b 55 08             	mov    0x8(%ebp),%edx
f010d336:	89 d0                	mov    %edx,%eax
f010d338:	c1 e0 02             	shl    $0x2,%eax
f010d33b:	01 d0                	add    %edx,%eax
f010d33d:	01 c0                	add    %eax,%eax
f010d33f:	01 d0                	add    %edx,%eax
f010d341:	01 c0                	add    %eax,%eax
f010d343:	01 d0                	add    %edx,%eax
f010d345:	c1 e0 02             	shl    $0x2,%eax
f010d348:	05 c8 50 6e f0       	add    $0xf06e50c8,%eax
f010d34d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d353:	8b 55 08             	mov    0x8(%ebp),%edx
f010d356:	89 d0                	mov    %edx,%eax
f010d358:	c1 e0 02             	shl    $0x2,%eax
f010d35b:	01 d0                	add    %edx,%eax
f010d35d:	01 c0                	add    %eax,%eax
f010d35f:	01 d0                	add    %edx,%eax
f010d361:	01 c0                	add    %eax,%eax
f010d363:	01 d0                	add    %edx,%eax
f010d365:	c1 e0 02             	shl    $0x2,%eax
f010d368:	05 d0 50 6e f0       	add    $0xf06e50d0,%eax
f010d36d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d373:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d378:	c9                   	leave  
f010d379:	c3                   	ret    

f010d37a <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d37a:	55                   	push   %ebp
f010d37b:	89 e5                	mov    %esp,%ebp
f010d37d:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010d380:	83 ec 04             	sub    $0x4,%esp
f010d383:	68 24 6b 13 f0       	push   $0xf0136b24
f010d388:	68 94 00 00 00       	push   $0x94
f010d38d:	68 04 6b 13 f0       	push   $0xf0136b04
f010d392:	e8 0f 2e ff ff       	call   f01001a6 <_panic>

f010d397 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d397:	55                   	push   %ebp
f010d398:	89 e5                	mov    %esp,%ebp
f010d39a:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010d39d:	83 ec 04             	sub    $0x4,%esp
f010d3a0:	68 54 6b 13 f0       	push   $0xf0136b54
f010d3a5:	68 a6 00 00 00       	push   $0xa6
f010d3aa:	68 04 6b 13 f0       	push   $0xf0136b04
f010d3af:	e8 f2 2d ff ff       	call   f01001a6 <_panic>

f010d3b4 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d3b4:	55                   	push   %ebp
f010d3b5:	89 e5                	mov    %esp,%ebp
f010d3b7:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010d3ba:	83 ec 04             	sub    $0x4,%esp
f010d3bd:	68 80 6b 13 f0       	push   $0xf0136b80
f010d3c2:	68 ba 00 00 00       	push   $0xba
f010d3c7:	68 04 6b 13 f0       	push   $0xf0136b04
f010d3cc:	e8 d5 2d ff ff       	call   f01001a6 <_panic>

f010d3d1 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010d3d1:	55                   	push   %ebp
f010d3d2:	89 e5                	mov    %esp,%ebp
f010d3d4:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010d3d7:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d3de:	83 ec 0c             	sub    $0xc,%esp
f010d3e1:	ff 75 ec             	pushl  -0x14(%ebp)
f010d3e4:	e8 18 38 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010d3e9:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010d3ec:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d3f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d3f4:	74 17                	je     f010d40d <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010d3f6:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d3fb:	50                   	push   %eax
f010d3fc:	68 c0 6b 13 f0       	push   $0xf0136bc0
f010d401:	6a 1f                	push   $0x1f
f010d403:	68 14 6c 13 f0       	push   $0xf0136c14
f010d408:	e8 99 2d ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d40d:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d412:	85 c0                	test   %eax,%eax
f010d414:	74 17                	je     f010d42d <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010d416:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d41b:	50                   	push   %eax
f010d41c:	68 38 6c 13 f0       	push   $0xf0136c38
f010d421:	6a 26                	push   $0x26
f010d423:	68 14 6c 13 f0       	push   $0xf0136c14
f010d428:	e8 79 2d ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010d42d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010d432:	85 c0                	test   %eax,%eax
f010d434:	74 17                	je     f010d44d <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010d436:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010d43b:	50                   	push   %eax
f010d43c:	68 88 6c 13 f0       	push   $0xf0136c88
f010d441:	6a 2c                	push   $0x2c
f010d443:	68 14 6c 13 f0       	push   $0xf0136c14
f010d448:	e8 59 2d ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010d44d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010d454:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d45b:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f010d460:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d463:	eb 29                	jmp    f010d48e <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010d465:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010d468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d46b:	8b 50 0c             	mov    0xc(%eax),%edx
f010d46e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d471:	8b 40 08             	mov    0x8(%eax),%eax
f010d474:	83 ec 04             	sub    $0x4,%esp
f010d477:	52                   	push   %edx
f010d478:	50                   	push   %eax
f010d479:	68 d8 6c 13 f0       	push   $0xf0136cd8
f010d47e:	e8 aa 37 ff ff       	call   f0100c2d <cprintf>
f010d483:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d486:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010d48b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d48e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d492:	74 07                	je     f010d49b <test_initialize_MemBlocksList+0xca>
f010d494:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d497:	8b 00                	mov    (%eax),%eax
f010d499:	eb 05                	jmp    f010d4a0 <test_initialize_MemBlocksList+0xcf>
f010d49b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4a0:	a3 fc 74 6e f0       	mov    %eax,0xf06e74fc
f010d4a5:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010d4aa:	85 c0                	test   %eax,%eax
f010d4ac:	75 b7                	jne    f010d465 <test_initialize_MemBlocksList+0x94>
f010d4ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d4b2:	75 b1                	jne    f010d465 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010d4b4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d4b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d4bc:	74 14                	je     f010d4d2 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010d4be:	83 ec 04             	sub    $0x4,%esp
f010d4c1:	68 f8 6c 13 f0       	push   $0xf0136cf8
f010d4c6:	6a 38                	push   $0x38
f010d4c8:	68 14 6c 13 f0       	push   $0xf0136c14
f010d4cd:	e8 d4 2c ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010d4d2:	83 ec 0c             	sub    $0xc,%esp
f010d4d5:	68 50 6d 13 f0       	push   $0xf0136d50
f010d4da:	e8 4e 37 ff ff       	call   f0100c2d <cprintf>
f010d4df:	83 c4 10             	add    $0x10,%esp
}
f010d4e2:	90                   	nop
f010d4e3:	c9                   	leave  
f010d4e4:	c3                   	ret    

f010d4e5 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010d4e5:	55                   	push   %ebp
f010d4e6:	89 e5                	mov    %esp,%ebp
f010d4e8:	57                   	push   %edi
f010d4e9:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010d4ef:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d4f6:	83 ec 0c             	sub    $0xc,%esp
f010d4f9:	ff 75 f4             	pushl  -0xc(%ebp)
f010d4fc:	e8 00 37 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010d501:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010d504:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010d50b:	00 00 00 
f010d50e:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010d515:	00 00 00 
f010d518:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010d51f:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010d522:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010d529:	00 00 00 
f010d52c:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010d533:	00 00 00 
f010d536:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010d53d:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010d540:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010d543:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d548:	b8 00 00 00 00       	mov    $0x0,%eax
f010d54d:	89 d7                	mov    %edx,%edi
f010d54f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010d551:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010d554:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d559:	b8 00 00 00 00       	mov    $0x0,%eax
f010d55e:	89 d7                	mov    %edx,%edi
f010d560:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010d562:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010d569:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010d570:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010d577:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010d57e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d581:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010d584:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d587:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010d58a:	83 ec 0c             	sub    $0xc,%esp
f010d58d:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010d590:	50                   	push   %eax
f010d591:	e8 78 37 02 00       	call   f0130d0e <insert_sorted_allocList>
f010d596:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010d599:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d5a0:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d5a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d5a8:	74 14                	je     f010d5be <test_insert_sorted_allocList+0xd9>
f010d5aa:	83 ec 04             	sub    $0x4,%esp
f010d5ad:	68 9c 6d 13 f0       	push   $0xf0136d9c
f010d5b2:	6a 56                	push   $0x56
f010d5b4:	68 14 6c 13 f0       	push   $0xf0136c14
f010d5b9:	e8 e8 2b ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d5be:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d5c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d5c6:	74 14                	je     f010d5dc <test_insert_sorted_allocList+0xf7>
f010d5c8:	83 ec 04             	sub    $0x4,%esp
f010d5cb:	68 e8 6d 13 f0       	push   $0xf0136de8
f010d5d0:	6a 59                	push   $0x59
f010d5d2:	68 14 6c 13 f0       	push   $0xf0136c14
f010d5d7:	e8 ca 2b ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d5dc:	83 ec 0c             	sub    $0xc,%esp
f010d5df:	ff 75 f0             	pushl  -0x10(%ebp)
f010d5e2:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d5e5:	50                   	push   %eax
f010d5e6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d5e9:	50                   	push   %eax
f010d5ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d5ed:	50                   	push   %eax
f010d5ee:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d5f3:	e8 7d 26 00 00       	call   f010fc75 <check_list_data>
f010d5f8:	83 c4 20             	add    $0x20,%esp
f010d5fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d5fe:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d602:	74 14                	je     f010d618 <test_insert_sorted_allocList+0x133>
f010d604:	83 ec 04             	sub    $0x4,%esp
f010d607:	68 38 6e 13 f0       	push   $0xf0136e38
f010d60c:	6a 5d                	push   $0x5d
f010d60e:	68 14 6c 13 f0       	push   $0xf0136c14
f010d613:	e8 8e 2b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d618:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d61b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d61e:	74 14                	je     f010d634 <test_insert_sorted_allocList+0x14f>
f010d620:	83 ec 04             	sub    $0x4,%esp
f010d623:	68 88 6e 13 f0       	push   $0xf0136e88
f010d628:	6a 5e                	push   $0x5e
f010d62a:	68 14 6c 13 f0       	push   $0xf0136c14
f010d62f:	e8 72 2b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010d634:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010d63b:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010d642:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d645:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010d648:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d64b:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010d64e:	83 ec 0c             	sub    $0xc,%esp
f010d651:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010d654:	50                   	push   %eax
f010d655:	e8 b4 36 02 00       	call   f0130d0e <insert_sorted_allocList>
f010d65a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010d65d:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d664:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d669:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d66c:	74 14                	je     f010d682 <test_insert_sorted_allocList+0x19d>
f010d66e:	83 ec 04             	sub    $0x4,%esp
f010d671:	68 9c 6d 13 f0       	push   $0xf0136d9c
f010d676:	6a 6d                	push   $0x6d
f010d678:	68 14 6c 13 f0       	push   $0xf0136c14
f010d67d:	e8 24 2b ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d682:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d687:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d68a:	74 14                	je     f010d6a0 <test_insert_sorted_allocList+0x1bb>
f010d68c:	83 ec 04             	sub    $0x4,%esp
f010d68f:	68 e8 6d 13 f0       	push   $0xf0136de8
f010d694:	6a 70                	push   $0x70
f010d696:	68 14 6c 13 f0       	push   $0xf0136c14
f010d69b:	e8 06 2b ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d6a0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d6a7:	83 ec 0c             	sub    $0xc,%esp
f010d6aa:	ff 75 f0             	pushl  -0x10(%ebp)
f010d6ad:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d6b0:	50                   	push   %eax
f010d6b1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d6b4:	50                   	push   %eax
f010d6b5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d6b8:	50                   	push   %eax
f010d6b9:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d6be:	e8 b2 25 00 00       	call   f010fc75 <check_list_data>
f010d6c3:	83 c4 20             	add    $0x20,%esp
f010d6c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d6c9:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d6cd:	74 14                	je     f010d6e3 <test_insert_sorted_allocList+0x1fe>
f010d6cf:	83 ec 04             	sub    $0x4,%esp
f010d6d2:	68 38 6e 13 f0       	push   $0xf0136e38
f010d6d7:	6a 75                	push   $0x75
f010d6d9:	68 14 6c 13 f0       	push   $0xf0136c14
f010d6de:	e8 c3 2a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d6e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d6e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d6e9:	74 14                	je     f010d6ff <test_insert_sorted_allocList+0x21a>
f010d6eb:	83 ec 04             	sub    $0x4,%esp
f010d6ee:	68 88 6e 13 f0       	push   $0xf0136e88
f010d6f3:	6a 76                	push   $0x76
f010d6f5:	68 14 6c 13 f0       	push   $0xf0136c14
f010d6fa:	e8 a7 2a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010d6ff:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010d706:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010d70d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d710:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010d713:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d716:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010d719:	83 ec 0c             	sub    $0xc,%esp
f010d71c:	8d 45 90             	lea    -0x70(%ebp),%eax
f010d71f:	50                   	push   %eax
f010d720:	e8 e9 35 02 00       	call   f0130d0e <insert_sorted_allocList>
f010d725:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010d728:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d72f:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d734:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d737:	74 17                	je     f010d750 <test_insert_sorted_allocList+0x26b>
f010d739:	83 ec 04             	sub    $0x4,%esp
f010d73c:	68 9c 6d 13 f0       	push   $0xf0136d9c
f010d741:	68 85 00 00 00       	push   $0x85
f010d746:	68 14 6c 13 f0       	push   $0xf0136c14
f010d74b:	e8 56 2a ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010d750:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d755:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d758:	74 17                	je     f010d771 <test_insert_sorted_allocList+0x28c>
f010d75a:	83 ec 04             	sub    $0x4,%esp
f010d75d:	68 d4 6e 13 f0       	push   $0xf0136ed4
f010d762:	68 88 00 00 00       	push   $0x88
f010d767:	68 14 6c 13 f0       	push   $0xf0136c14
f010d76c:	e8 35 2a ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d771:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d778:	83 ec 0c             	sub    $0xc,%esp
f010d77b:	ff 75 f0             	pushl  -0x10(%ebp)
f010d77e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d781:	50                   	push   %eax
f010d782:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d785:	50                   	push   %eax
f010d786:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d789:	50                   	push   %eax
f010d78a:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d78f:	e8 e1 24 00 00       	call   f010fc75 <check_list_data>
f010d794:	83 c4 20             	add    $0x20,%esp
f010d797:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d79a:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d79e:	74 17                	je     f010d7b7 <test_insert_sorted_allocList+0x2d2>
f010d7a0:	83 ec 04             	sub    $0x4,%esp
f010d7a3:	68 38 6e 13 f0       	push   $0xf0136e38
f010d7a8:	68 8d 00 00 00       	push   $0x8d
f010d7ad:	68 14 6c 13 f0       	push   $0xf0136c14
f010d7b2:	e8 ef 29 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d7b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d7ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d7bd:	74 17                	je     f010d7d6 <test_insert_sorted_allocList+0x2f1>
f010d7bf:	83 ec 04             	sub    $0x4,%esp
f010d7c2:	68 88 6e 13 f0       	push   $0xf0136e88
f010d7c7:	68 8e 00 00 00       	push   $0x8e
f010d7cc:	68 14 6c 13 f0       	push   $0xf0136c14
f010d7d1:	e8 d0 29 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010d7d6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010d7dd:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010d7e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d7e7:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010d7ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010d7ed:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010d7f0:	83 ec 0c             	sub    $0xc,%esp
f010d7f3:	8d 45 80             	lea    -0x80(%ebp),%eax
f010d7f6:	50                   	push   %eax
f010d7f7:	e8 12 35 02 00       	call   f0130d0e <insert_sorted_allocList>
f010d7fc:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010d7ff:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d806:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d80b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d80e:	74 17                	je     f010d827 <test_insert_sorted_allocList+0x342>
f010d810:	83 ec 04             	sub    $0x4,%esp
f010d813:	68 9c 6d 13 f0       	push   $0xf0136d9c
f010d818:	68 9c 00 00 00       	push   $0x9c
f010d81d:	68 14 6c 13 f0       	push   $0xf0136c14
f010d822:	e8 7f 29 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d827:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d82c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d82f:	74 17                	je     f010d848 <test_insert_sorted_allocList+0x363>
f010d831:	83 ec 04             	sub    $0x4,%esp
f010d834:	68 e8 6d 13 f0       	push   $0xf0136de8
f010d839:	68 9f 00 00 00       	push   $0x9f
f010d83e:	68 14 6c 13 f0       	push   $0xf0136c14
f010d843:	e8 5e 29 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d848:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d84f:	83 ec 0c             	sub    $0xc,%esp
f010d852:	ff 75 f0             	pushl  -0x10(%ebp)
f010d855:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d858:	50                   	push   %eax
f010d859:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d85c:	50                   	push   %eax
f010d85d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d860:	50                   	push   %eax
f010d861:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d866:	e8 0a 24 00 00       	call   f010fc75 <check_list_data>
f010d86b:	83 c4 20             	add    $0x20,%esp
f010d86e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d871:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d875:	74 17                	je     f010d88e <test_insert_sorted_allocList+0x3a9>
f010d877:	83 ec 04             	sub    $0x4,%esp
f010d87a:	68 38 6e 13 f0       	push   $0xf0136e38
f010d87f:	68 a4 00 00 00       	push   $0xa4
f010d884:	68 14 6c 13 f0       	push   $0xf0136c14
f010d889:	e8 18 29 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d88e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d891:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d894:	74 17                	je     f010d8ad <test_insert_sorted_allocList+0x3c8>
f010d896:	83 ec 04             	sub    $0x4,%esp
f010d899:	68 88 6e 13 f0       	push   $0xf0136e88
f010d89e:	68 a5 00 00 00       	push   $0xa5
f010d8a3:	68 14 6c 13 f0       	push   $0xf0136c14
f010d8a8:	e8 f9 28 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010d8ad:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010d8b4:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010d8bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d8be:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010d8c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d8c7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010d8cd:	83 ec 0c             	sub    $0xc,%esp
f010d8d0:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010d8d6:	50                   	push   %eax
f010d8d7:	e8 32 34 02 00       	call   f0130d0e <insert_sorted_allocList>
f010d8dc:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010d8df:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d8e6:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d8eb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d8ee:	74 17                	je     f010d907 <test_insert_sorted_allocList+0x422>
f010d8f0:	83 ec 04             	sub    $0x4,%esp
f010d8f3:	68 9c 6d 13 f0       	push   $0xf0136d9c
f010d8f8:	68 b3 00 00 00       	push   $0xb3
f010d8fd:	68 14 6c 13 f0       	push   $0xf0136c14
f010d902:	e8 9f 28 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d907:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d90c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d90f:	74 17                	je     f010d928 <test_insert_sorted_allocList+0x443>
f010d911:	83 ec 04             	sub    $0x4,%esp
f010d914:	68 e8 6d 13 f0       	push   $0xf0136de8
f010d919:	68 b6 00 00 00       	push   $0xb6
f010d91e:	68 14 6c 13 f0       	push   $0xf0136c14
f010d923:	e8 7e 28 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d928:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d92f:	83 ec 0c             	sub    $0xc,%esp
f010d932:	ff 75 f0             	pushl  -0x10(%ebp)
f010d935:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d938:	50                   	push   %eax
f010d939:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d93c:	50                   	push   %eax
f010d93d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d940:	50                   	push   %eax
f010d941:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d946:	e8 2a 23 00 00       	call   f010fc75 <check_list_data>
f010d94b:	83 c4 20             	add    $0x20,%esp
f010d94e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d951:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d955:	74 17                	je     f010d96e <test_insert_sorted_allocList+0x489>
f010d957:	83 ec 04             	sub    $0x4,%esp
f010d95a:	68 38 6e 13 f0       	push   $0xf0136e38
f010d95f:	68 bb 00 00 00       	push   $0xbb
f010d964:	68 14 6c 13 f0       	push   $0xf0136c14
f010d969:	e8 38 28 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d96e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d971:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d974:	74 17                	je     f010d98d <test_insert_sorted_allocList+0x4a8>
f010d976:	83 ec 04             	sub    $0x4,%esp
f010d979:	68 88 6e 13 f0       	push   $0xf0136e88
f010d97e:	68 bc 00 00 00       	push   $0xbc
f010d983:	68 14 6c 13 f0       	push   $0xf0136c14
f010d988:	e8 19 28 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010d98d:	83 ec 0c             	sub    $0xc,%esp
f010d990:	68 24 6f 13 f0       	push   $0xf0136f24
f010d995:	e8 93 32 ff ff       	call   f0100c2d <cprintf>
f010d99a:	83 c4 10             	add    $0x10,%esp
}
f010d99d:	90                   	nop
f010d99e:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010d9a1:	c9                   	leave  
f010d9a2:	c3                   	ret    

f010d9a3 <test_find_block>:

void test_find_block()
{
f010d9a3:	55                   	push   %ebp
f010d9a4:	89 e5                	mov    %esp,%ebp
f010d9a6:	57                   	push   %edi
f010d9a7:	56                   	push   %esi
f010d9a8:	53                   	push   %ebx
f010d9a9:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010d9af:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d9b6:	83 ec 0c             	sub    $0xc,%esp
f010d9b9:	ff 75 e0             	pushl  -0x20(%ebp)
f010d9bc:	e8 40 32 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010d9c1:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010d9c4:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010d9cb:	00 00 00 
f010d9ce:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010d9d5:	00 00 00 
f010d9d8:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010d9df:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010d9e2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d9e5:	bb 9c 70 13 f0       	mov    $0xf013709c,%ebx
f010d9ea:	ba 06 00 00 00       	mov    $0x6,%edx
f010d9ef:	89 c7                	mov    %eax,%edi
f010d9f1:	89 de                	mov    %ebx,%esi
f010d9f3:	89 d1                	mov    %edx,%ecx
f010d9f5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010d9f7:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010d9fa:	bb b4 70 13 f0       	mov    $0xf01370b4,%ebx
f010d9ff:	ba 06 00 00 00       	mov    $0x6,%edx
f010da04:	89 c7                	mov    %eax,%edi
f010da06:	89 de                	mov    %ebx,%esi
f010da08:	89 d1                	mov    %edx,%ecx
f010da0a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010da0c:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010da13:	00 00 00 
f010da16:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010da1d:	00 00 00 
f010da20:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010da27:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010da2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010da31:	e9 5f 01 00 00       	jmp    f010db95 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010da36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da39:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010da3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da40:	c1 e2 04             	shl    $0x4,%edx
f010da43:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010da46:	01 da                	add    %ebx,%edx
f010da48:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010da4e:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010da50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da53:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010da57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da5a:	c1 e2 04             	shl    $0x4,%edx
f010da5d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010da60:	01 f2                	add    %esi,%edx
f010da62:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010da68:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010da6a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010da6e:	0f 85 92 00 00 00    	jne    f010db06 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010da74:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f010da79:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da7c:	c1 e2 04             	shl    $0x4,%edx
f010da7f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010da82:	01 fa                	add    %edi,%edx
f010da84:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010da8a:	89 02                	mov    %eax,(%edx)
f010da8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da8f:	c1 e0 04             	shl    $0x4,%eax
f010da92:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010da95:	01 d8                	add    %ebx,%eax
f010da97:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010da9c:	8b 00                	mov    (%eax),%eax
f010da9e:	85 c0                	test   %eax,%eax
f010daa0:	74 18                	je     f010daba <test_find_block+0x117>
f010daa2:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f010daa7:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010daad:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010dab0:	c1 e1 04             	shl    $0x4,%ecx
f010dab3:	01 ca                	add    %ecx,%edx
f010dab5:	89 50 04             	mov    %edx,0x4(%eax)
f010dab8:	eb 13                	jmp    f010dacd <test_find_block+0x12a>
f010daba:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010dac0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dac3:	c1 e2 04             	shl    $0x4,%edx
f010dac6:	01 d0                	add    %edx,%eax
f010dac8:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f010dacd:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010dad3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dad6:	c1 e2 04             	shl    $0x4,%edx
f010dad9:	01 d0                	add    %edx,%eax
f010dadb:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f010dae0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dae3:	c1 e0 04             	shl    $0x4,%eax
f010dae6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dae9:	01 f0                	add    %esi,%eax
f010daeb:	2d 98 00 00 00       	sub    $0x98,%eax
f010daf0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010daf6:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010dafb:	40                   	inc    %eax
f010dafc:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
f010db01:	e9 8c 00 00 00       	jmp    f010db92 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010db06:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f010db0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db0e:	c1 e2 04             	shl    $0x4,%edx
f010db11:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010db14:	01 fa                	add    %edi,%edx
f010db16:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010db1c:	89 02                	mov    %eax,(%edx)
f010db1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010db21:	c1 e0 04             	shl    $0x4,%eax
f010db24:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010db27:	01 d8                	add    %ebx,%eax
f010db29:	2d 98 00 00 00       	sub    $0x98,%eax
f010db2e:	8b 00                	mov    (%eax),%eax
f010db30:	85 c0                	test   %eax,%eax
f010db32:	74 17                	je     f010db4b <test_find_block+0x1a8>
f010db34:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f010db39:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010db3f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010db42:	c1 e1 04             	shl    $0x4,%ecx
f010db45:	01 ca                	add    %ecx,%edx
f010db47:	89 10                	mov    %edx,(%eax)
f010db49:	eb 13                	jmp    f010db5e <test_find_block+0x1bb>
f010db4b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010db51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db54:	c1 e2 04             	shl    $0x4,%edx
f010db57:	01 d0                	add    %edx,%eax
f010db59:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f010db5e:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010db64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db67:	c1 e2 04             	shl    $0x4,%edx
f010db6a:	01 d0                	add    %edx,%eax
f010db6c:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f010db71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010db74:	c1 e0 04             	shl    $0x4,%eax
f010db77:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010db7a:	01 f0                	add    %esi,%eax
f010db7c:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010db81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db87:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010db8c:	40                   	inc    %eax
f010db8d:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010db92:	ff 45 e4             	incl   -0x1c(%ebp)
f010db95:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010db99:	0f 8e 97 fe ff ff    	jle    f010da36 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010db9f:	83 ec 08             	sub    $0x8,%esp
f010dba2:	68 00 10 00 00       	push   $0x1000
f010dba7:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dbac:	e8 05 31 02 00       	call   f0130cb6 <find_block>
f010dbb1:	83 c4 10             	add    $0x10,%esp
f010dbb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010dbb7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dbbb:	74 17                	je     f010dbd4 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010dbbd:	83 ec 04             	sub    $0x4,%esp
f010dbc0:	68 64 6f 13 f0       	push   $0xf0136f64
f010dbc5:	68 de 00 00 00       	push   $0xde
f010dbca:	68 14 6c 13 f0       	push   $0xf0136c14
f010dbcf:	e8 d2 25 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010dbd4:	83 ec 08             	sub    $0x8,%esp
f010dbd7:	6a 00                	push   $0x0
f010dbd9:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dbde:	e8 d3 30 02 00       	call   f0130cb6 <find_block>
f010dbe3:	83 c4 10             	add    $0x10,%esp
f010dbe6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010dbe9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dbed:	74 17                	je     f010dc06 <test_find_block+0x263>
f010dbef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dbf2:	8b 40 0c             	mov    0xc(%eax),%eax
f010dbf5:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010dbfa:	75 0a                	jne    f010dc06 <test_find_block+0x263>
f010dbfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dbff:	8b 40 08             	mov    0x8(%eax),%eax
f010dc02:	85 c0                	test   %eax,%eax
f010dc04:	74 17                	je     f010dc1d <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dc06:	83 ec 04             	sub    $0x4,%esp
f010dc09:	68 c8 6f 13 f0       	push   $0xf0136fc8
f010dc0e:	68 e3 00 00 00       	push   $0xe3
f010dc13:	68 14 6c 13 f0       	push   $0xf0136c14
f010dc18:	e8 89 25 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010dc1d:	83 ec 08             	sub    $0x8,%esp
f010dc20:	68 00 70 00 00       	push   $0x7000
f010dc25:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dc2a:	e8 87 30 02 00       	call   f0130cb6 <find_block>
f010dc2f:	83 c4 10             	add    $0x10,%esp
f010dc32:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010dc35:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dc39:	74 1a                	je     f010dc55 <test_find_block+0x2b2>
f010dc3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc3e:	8b 40 0c             	mov    0xc(%eax),%eax
f010dc41:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010dc46:	75 0d                	jne    f010dc55 <test_find_block+0x2b2>
f010dc48:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc4b:	8b 40 08             	mov    0x8(%eax),%eax
f010dc4e:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010dc53:	74 17                	je     f010dc6c <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dc55:	83 ec 04             	sub    $0x4,%esp
f010dc58:	68 c8 6f 13 f0       	push   $0xf0136fc8
f010dc5d:	68 e8 00 00 00       	push   $0xe8
f010dc62:	68 14 6c 13 f0       	push   $0xf0136c14
f010dc67:	e8 3a 25 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010dc6c:	83 ec 08             	sub    $0x8,%esp
f010dc6f:	68 00 a4 01 00       	push   $0x1a400
f010dc74:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dc79:	e8 38 30 02 00       	call   f0130cb6 <find_block>
f010dc7e:	83 c4 10             	add    $0x10,%esp
f010dc81:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010dc84:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dc88:	74 1a                	je     f010dca4 <test_find_block+0x301>
f010dc8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc8d:	8b 40 0c             	mov    0xc(%eax),%eax
f010dc90:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010dc95:	75 0d                	jne    f010dca4 <test_find_block+0x301>
f010dc97:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc9a:	8b 40 08             	mov    0x8(%eax),%eax
f010dc9d:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010dca2:	74 17                	je     f010dcbb <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dca4:	83 ec 04             	sub    $0x4,%esp
f010dca7:	68 c8 6f 13 f0       	push   $0xf0136fc8
f010dcac:	68 ed 00 00 00       	push   $0xed
f010dcb1:	68 14 6c 13 f0       	push   $0xf0136c14
f010dcb6:	e8 eb 24 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010dcbb:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010dcc0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010dcc3:	75 09                	jne    f010dcce <test_find_block+0x32b>
f010dcc5:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010dcca:	85 c0                	test   %eax,%eax
f010dccc:	74 17                	je     f010dce5 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010dcce:	83 ec 04             	sub    $0x4,%esp
f010dcd1:	68 fc 6f 13 f0       	push   $0xf0136ffc
f010dcd6:	68 f2 00 00 00       	push   $0xf2
f010dcdb:	68 14 6c 13 f0       	push   $0xf0136c14
f010dce0:	e8 c1 24 ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010dce5:	83 ec 0c             	sub    $0xc,%esp
f010dce8:	68 60 70 13 f0       	push   $0xf0137060
f010dced:	e8 3b 2f ff ff       	call   f0100c2d <cprintf>
f010dcf2:	83 c4 10             	add    $0x10,%esp
}
f010dcf5:	90                   	nop
f010dcf6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010dcf9:	5b                   	pop    %ebx
f010dcfa:	5e                   	pop    %esi
f010dcfb:	5f                   	pop    %edi
f010dcfc:	5d                   	pop    %ebp
f010dcfd:	c3                   	ret    

f010dcfe <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010dcfe:	55                   	push   %ebp
f010dcff:	89 e5                	mov    %esp,%ebp
f010dd01:	57                   	push   %edi
f010dd02:	56                   	push   %esi
f010dd03:	53                   	push   %ebx
f010dd04:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010dd0a:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dd11:	83 ec 0c             	sub    $0xc,%esp
f010dd14:	ff 75 e0             	pushl  -0x20(%ebp)
f010dd17:	e8 e5 2e 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010dd1c:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010dd1f:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010dd26:	00 00 00 
f010dd29:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010dd30:	00 00 00 
f010dd33:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010dd3a:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010dd3d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010dd40:	bb 40 73 13 f0       	mov    $0xf0137340,%ebx
f010dd45:	ba 08 00 00 00       	mov    $0x8,%edx
f010dd4a:	89 c7                	mov    %eax,%edi
f010dd4c:	89 de                	mov    %ebx,%esi
f010dd4e:	89 d1                	mov    %edx,%ecx
f010dd50:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010dd52:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010dd55:	bb 60 73 13 f0       	mov    $0xf0137360,%ebx
f010dd5a:	ba 08 00 00 00       	mov    $0x8,%edx
f010dd5f:	89 c7                	mov    %eax,%edi
f010dd61:	89 de                	mov    %ebx,%esi
f010dd63:	89 d1                	mov    %edx,%ecx
f010dd65:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010dd67:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010dd6e:	00 00 00 
f010dd71:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010dd78:	00 00 00 
f010dd7b:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010dd82:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010dd85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010dd8c:	e9 5f 01 00 00       	jmp    f010def0 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010dd91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd94:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010dd98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd9b:	c1 e2 04             	shl    $0x4,%edx
f010dd9e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dda1:	01 da                	add    %ebx,%edx
f010dda3:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010dda9:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ddab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ddae:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ddb2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddb5:	c1 e2 04             	shl    $0x4,%edx
f010ddb8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ddbb:	01 f2                	add    %esi,%edx
f010ddbd:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ddc3:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ddc5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ddc9:	0f 85 92 00 00 00    	jne    f010de61 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ddcf:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010ddd4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddd7:	c1 e2 04             	shl    $0x4,%edx
f010ddda:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010dddd:	01 fa                	add    %edi,%edx
f010dddf:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010dde5:	89 02                	mov    %eax,(%edx)
f010dde7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ddea:	c1 e0 04             	shl    $0x4,%eax
f010dded:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ddf0:	01 d8                	add    %ebx,%eax
f010ddf2:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ddf7:	8b 00                	mov    (%eax),%eax
f010ddf9:	85 c0                	test   %eax,%eax
f010ddfb:	74 18                	je     f010de15 <test_alloc_block_FF+0x117>
f010ddfd:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010de02:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010de08:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010de0b:	c1 e1 04             	shl    $0x4,%ecx
f010de0e:	01 ca                	add    %ecx,%edx
f010de10:	89 50 04             	mov    %edx,0x4(%eax)
f010de13:	eb 13                	jmp    f010de28 <test_alloc_block_FF+0x12a>
f010de15:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010de1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de1e:	c1 e2 04             	shl    $0x4,%edx
f010de21:	01 d0                	add    %edx,%eax
f010de23:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010de28:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010de2e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de31:	c1 e2 04             	shl    $0x4,%edx
f010de34:	01 d0                	add    %edx,%eax
f010de36:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010de3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de3e:	c1 e0 04             	shl    $0x4,%eax
f010de41:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010de44:	01 f0                	add    %esi,%eax
f010de46:	2d d0 00 00 00       	sub    $0xd0,%eax
f010de4b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010de51:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010de56:	40                   	inc    %eax
f010de57:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
f010de5c:	e9 8c 00 00 00       	jmp    f010deed <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010de61:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010de66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de69:	c1 e2 04             	shl    $0x4,%edx
f010de6c:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010de6f:	01 fa                	add    %edi,%edx
f010de71:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010de77:	89 02                	mov    %eax,(%edx)
f010de79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de7c:	c1 e0 04             	shl    $0x4,%eax
f010de7f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010de82:	01 d8                	add    %ebx,%eax
f010de84:	2d d0 00 00 00       	sub    $0xd0,%eax
f010de89:	8b 00                	mov    (%eax),%eax
f010de8b:	85 c0                	test   %eax,%eax
f010de8d:	74 17                	je     f010dea6 <test_alloc_block_FF+0x1a8>
f010de8f:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010de94:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010de9a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010de9d:	c1 e1 04             	shl    $0x4,%ecx
f010dea0:	01 ca                	add    %ecx,%edx
f010dea2:	89 10                	mov    %edx,(%eax)
f010dea4:	eb 13                	jmp    f010deb9 <test_alloc_block_FF+0x1bb>
f010dea6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010deac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010deaf:	c1 e2 04             	shl    $0x4,%edx
f010deb2:	01 d0                	add    %edx,%eax
f010deb4:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010deb9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010debf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dec2:	c1 e2 04             	shl    $0x4,%edx
f010dec5:	01 d0                	add    %edx,%eax
f010dec7:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010decc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010decf:	c1 e0 04             	shl    $0x4,%eax
f010ded2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ded5:	01 f0                	add    %esi,%eax
f010ded7:	2d d4 00 00 00       	sub    $0xd4,%eax
f010dedc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dee2:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010dee7:	40                   	inc    %eax
f010dee8:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010deed:	ff 45 e4             	incl   -0x1c(%ebp)
f010def0:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010def4:	0f 8e 97 fe ff ff    	jle    f010dd91 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010defa:	83 ec 0c             	sub    $0xc,%esp
f010defd:	68 00 00 30 00       	push   $0x300000
f010df02:	e8 94 30 02 00       	call   f0130f9b <alloc_block_FF>
f010df07:	83 c4 10             	add    $0x10,%esp
f010df0a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010df0d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df11:	74 17                	je     f010df2a <test_alloc_block_FF+0x22c>
f010df13:	83 ec 04             	sub    $0x4,%esp
f010df16:	68 cc 70 13 f0       	push   $0xf01370cc
f010df1b:	68 15 01 00 00       	push   $0x115
f010df20:	68 14 6c 13 f0       	push   $0xf0136c14
f010df25:	e8 7c 22 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010df2a:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010df2f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010df32:	75 13                	jne    f010df47 <test_alloc_block_FF+0x249>
f010df34:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010df39:	83 f8 08             	cmp    $0x8,%eax
f010df3c:	75 09                	jne    f010df47 <test_alloc_block_FF+0x249>
f010df3e:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010df43:	85 c0                	test   %eax,%eax
f010df45:	74 17                	je     f010df5e <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010df47:	83 ec 04             	sub    $0x4,%esp
f010df4a:	68 40 71 13 f0       	push   $0xf0137140
f010df4f:	68 19 01 00 00       	push   $0x119
f010df54:	68 14 6c 13 f0       	push   $0xf0136c14
f010df59:	e8 48 22 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010df5e:	83 ec 0c             	sub    $0xc,%esp
f010df61:	68 00 24 00 00       	push   $0x2400
f010df66:	e8 30 30 02 00       	call   f0130f9b <alloc_block_FF>
f010df6b:	83 c4 10             	add    $0x10,%esp
f010df6e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010df71:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df75:	74 1a                	je     f010df91 <test_alloc_block_FF+0x293>
f010df77:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df7a:	8b 40 0c             	mov    0xc(%eax),%eax
f010df7d:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010df82:	75 0d                	jne    f010df91 <test_alloc_block_FF+0x293>
f010df84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df87:	8b 40 08             	mov    0x8(%eax),%eax
f010df8a:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010df8f:	74 17                	je     f010dfa8 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010df91:	83 ec 04             	sub    $0x4,%esp
f010df94:	68 b8 71 13 f0       	push   $0xf01371b8
f010df99:	68 21 01 00 00       	push   $0x121
f010df9e:	68 14 6c 13 f0       	push   $0xf0136c14
f010dfa3:	e8 fe 21 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010dfa8:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010dfad:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010dfb0:	75 13                	jne    f010dfc5 <test_alloc_block_FF+0x2c7>
f010dfb2:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010dfb7:	83 f8 07             	cmp    $0x7,%eax
f010dfba:	75 09                	jne    f010dfc5 <test_alloc_block_FF+0x2c7>
f010dfbc:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010dfc1:	85 c0                	test   %eax,%eax
f010dfc3:	74 17                	je     f010dfdc <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010dfc5:	83 ec 04             	sub    $0x4,%esp
f010dfc8:	68 fc 71 13 f0       	push   $0xf01371fc
f010dfcd:	68 25 01 00 00       	push   $0x125
f010dfd2:	68 14 6c 13 f0       	push   $0xf0136c14
f010dfd7:	e8 ca 21 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010dfdc:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010dfe3:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010dfe6:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010dfed:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010dff4:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010dffb:	83 ec 0c             	sub    $0xc,%esp
f010dffe:	ff 75 d8             	pushl  -0x28(%ebp)
f010e001:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e007:	50                   	push   %eax
f010e008:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e00b:	50                   	push   %eax
f010e00c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e00f:	50                   	push   %eax
f010e010:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e015:	e8 5b 1c 00 00       	call   f010fc75 <check_list_data>
f010e01a:	83 c4 20             	add    $0x20,%esp
f010e01d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e020:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e024:	74 17                	je     f010e03d <test_alloc_block_FF+0x33f>
f010e026:	83 ec 04             	sub    $0x4,%esp
f010e029:	68 60 72 13 f0       	push   $0xf0137260
f010e02e:	68 2d 01 00 00       	push   $0x12d
f010e033:	68 14 6c 13 f0       	push   $0xf0136c14
f010e038:	e8 69 21 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e03d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e043:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e046:	74 17                	je     f010e05f <test_alloc_block_FF+0x361>
f010e048:	83 ec 04             	sub    $0x4,%esp
f010e04b:	68 ac 72 13 f0       	push   $0xf01372ac
f010e050:	68 2e 01 00 00       	push   $0x12e
f010e055:	68 14 6c 13 f0       	push   $0xf0136c14
f010e05a:	e8 47 21 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010e05f:	83 ec 0c             	sub    $0xc,%esp
f010e062:	68 00 00 10 00       	push   $0x100000
f010e067:	e8 2f 2f 02 00       	call   f0130f9b <alloc_block_FF>
f010e06c:	83 c4 10             	add    $0x10,%esp
f010e06f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e072:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e076:	74 1a                	je     f010e092 <test_alloc_block_FF+0x394>
f010e078:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e07b:	8b 40 0c             	mov    0xc(%eax),%eax
f010e07e:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e083:	75 0d                	jne    f010e092 <test_alloc_block_FF+0x394>
f010e085:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e088:	8b 40 08             	mov    0x8(%eax),%eax
f010e08b:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e090:	74 17                	je     f010e0a9 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e092:	83 ec 04             	sub    $0x4,%esp
f010e095:	68 b8 71 13 f0       	push   $0xf01371b8
f010e09a:	68 36 01 00 00       	push   $0x136
f010e09f:	68 14 6c 13 f0       	push   $0xf0136c14
f010e0a4:	e8 fd 20 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e0a9:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e0ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e0b1:	4a                   	dec    %edx
f010e0b2:	39 d0                	cmp    %edx,%eax
f010e0b4:	75 13                	jne    f010e0c9 <test_alloc_block_FF+0x3cb>
f010e0b6:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e0bb:	83 f8 07             	cmp    $0x7,%eax
f010e0be:	75 09                	jne    f010e0c9 <test_alloc_block_FF+0x3cb>
f010e0c0:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e0c5:	85 c0                	test   %eax,%eax
f010e0c7:	74 17                	je     f010e0e0 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e0c9:	83 ec 04             	sub    $0x4,%esp
f010e0cc:	68 fc 71 13 f0       	push   $0xf01371fc
f010e0d1:	68 3a 01 00 00       	push   $0x13a
f010e0d6:	68 14 6c 13 f0       	push   $0xf0136c14
f010e0db:	e8 c6 20 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e0e0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e0e7:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010e0ea:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e0f1:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e0f8:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e0ff:	83 ec 0c             	sub    $0xc,%esp
f010e102:	ff 75 d8             	pushl  -0x28(%ebp)
f010e105:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e10b:	50                   	push   %eax
f010e10c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e10f:	50                   	push   %eax
f010e110:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e113:	50                   	push   %eax
f010e114:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e119:	e8 57 1b 00 00       	call   f010fc75 <check_list_data>
f010e11e:	83 c4 20             	add    $0x20,%esp
f010e121:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e124:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e128:	74 17                	je     f010e141 <test_alloc_block_FF+0x443>
f010e12a:	83 ec 04             	sub    $0x4,%esp
f010e12d:	68 60 72 13 f0       	push   $0xf0137260
f010e132:	68 42 01 00 00       	push   $0x142
f010e137:	68 14 6c 13 f0       	push   $0xf0136c14
f010e13c:	e8 65 20 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e141:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e147:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e14a:	74 17                	je     f010e163 <test_alloc_block_FF+0x465>
f010e14c:	83 ec 04             	sub    $0x4,%esp
f010e14f:	68 ac 72 13 f0       	push   $0xf01372ac
f010e154:	68 43 01 00 00       	push   $0x143
f010e159:	68 14 6c 13 f0       	push   $0xf0136c14
f010e15e:	e8 43 20 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010e163:	83 ec 0c             	sub    $0xc,%esp
f010e166:	68 f8 72 13 f0       	push   $0xf01372f8
f010e16b:	e8 bd 2a ff ff       	call   f0100c2d <cprintf>
f010e170:	83 c4 10             	add    $0x10,%esp
}
f010e173:	90                   	nop
f010e174:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e177:	5b                   	pop    %ebx
f010e178:	5e                   	pop    %esi
f010e179:	5f                   	pop    %edi
f010e17a:	5d                   	pop    %ebp
f010e17b:	c3                   	ret    

f010e17c <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010e17c:	55                   	push   %ebp
f010e17d:	89 e5                	mov    %esp,%ebp
f010e17f:	57                   	push   %edi
f010e180:	56                   	push   %esi
f010e181:	53                   	push   %ebx
f010e182:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010e188:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e18f:	83 ec 0c             	sub    $0xc,%esp
f010e192:	ff 75 e0             	pushl  -0x20(%ebp)
f010e195:	e8 67 2a 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010e19a:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e19d:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010e1a4:	00 00 00 
f010e1a7:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010e1ae:	00 00 00 
f010e1b1:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010e1b8:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010e1bb:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e1be:	bb 74 75 13 f0       	mov    $0xf0137574,%ebx
f010e1c3:	ba 07 00 00 00       	mov    $0x7,%edx
f010e1c8:	89 c7                	mov    %eax,%edi
f010e1ca:	89 de                	mov    %ebx,%esi
f010e1cc:	89 d1                	mov    %edx,%ecx
f010e1ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010e1d0:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e1d3:	bb 90 75 13 f0       	mov    $0xf0137590,%ebx
f010e1d8:	ba 07 00 00 00       	mov    $0x7,%edx
f010e1dd:	89 c7                	mov    %eax,%edi
f010e1df:	89 de                	mov    %ebx,%esi
f010e1e1:	89 d1                	mov    %edx,%ecx
f010e1e3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e1e5:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010e1ec:	00 00 00 
f010e1ef:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010e1f6:	00 00 00 
f010e1f9:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010e200:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e203:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e20a:	e9 5f 01 00 00       	jmp    f010e36e <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e20f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e212:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010e216:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e219:	c1 e2 04             	shl    $0x4,%edx
f010e21c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e21f:	01 da                	add    %ebx,%edx
f010e221:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010e227:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e229:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e22c:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010e230:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e233:	c1 e2 04             	shl    $0x4,%edx
f010e236:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e239:	01 f2                	add    %esi,%edx
f010e23b:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010e241:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e243:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e247:	0f 85 92 00 00 00    	jne    f010e2df <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e24d:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e252:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e255:	c1 e2 04             	shl    $0x4,%edx
f010e258:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e25b:	01 fa                	add    %edi,%edx
f010e25d:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010e263:	89 02                	mov    %eax,(%edx)
f010e265:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e268:	c1 e0 04             	shl    $0x4,%eax
f010e26b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e26e:	01 d8                	add    %ebx,%eax
f010e270:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e275:	8b 00                	mov    (%eax),%eax
f010e277:	85 c0                	test   %eax,%eax
f010e279:	74 18                	je     f010e293 <test_alloc_block_BF+0x117>
f010e27b:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e280:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e286:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e289:	c1 e1 04             	shl    $0x4,%ecx
f010e28c:	01 ca                	add    %ecx,%edx
f010e28e:	89 50 04             	mov    %edx,0x4(%eax)
f010e291:	eb 13                	jmp    f010e2a6 <test_alloc_block_BF+0x12a>
f010e293:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e299:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e29c:	c1 e2 04             	shl    $0x4,%edx
f010e29f:	01 d0                	add    %edx,%eax
f010e2a1:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e2a6:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e2ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e2af:	c1 e2 04             	shl    $0x4,%edx
f010e2b2:	01 d0                	add    %edx,%eax
f010e2b4:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e2b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e2bc:	c1 e0 04             	shl    $0x4,%eax
f010e2bf:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e2c2:	01 f0                	add    %esi,%eax
f010e2c4:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e2c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e2cf:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e2d4:	40                   	inc    %eax
f010e2d5:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
f010e2da:	e9 8c 00 00 00       	jmp    f010e36b <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e2df:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e2e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e2e7:	c1 e2 04             	shl    $0x4,%edx
f010e2ea:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e2ed:	01 fa                	add    %edi,%edx
f010e2ef:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010e2f5:	89 02                	mov    %eax,(%edx)
f010e2f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e2fa:	c1 e0 04             	shl    $0x4,%eax
f010e2fd:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e300:	01 d8                	add    %ebx,%eax
f010e302:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e307:	8b 00                	mov    (%eax),%eax
f010e309:	85 c0                	test   %eax,%eax
f010e30b:	74 17                	je     f010e324 <test_alloc_block_BF+0x1a8>
f010e30d:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e312:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e318:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e31b:	c1 e1 04             	shl    $0x4,%ecx
f010e31e:	01 ca                	add    %ecx,%edx
f010e320:	89 10                	mov    %edx,(%eax)
f010e322:	eb 13                	jmp    f010e337 <test_alloc_block_BF+0x1bb>
f010e324:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e32a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e32d:	c1 e2 04             	shl    $0x4,%edx
f010e330:	01 d0                	add    %edx,%eax
f010e332:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e337:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e33d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e340:	c1 e2 04             	shl    $0x4,%edx
f010e343:	01 d0                	add    %edx,%eax
f010e345:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e34a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e34d:	c1 e0 04             	shl    $0x4,%eax
f010e350:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e353:	01 f0                	add    %esi,%eax
f010e355:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e35a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e360:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e365:	40                   	inc    %eax
f010e366:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e36b:	ff 45 e4             	incl   -0x1c(%ebp)
f010e36e:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010e372:	0f 8e 97 fe ff ff    	jle    f010e20f <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010e378:	83 ec 0c             	sub    $0xc,%esp
f010e37b:	68 00 00 40 00       	push   $0x400000
f010e380:	e8 e3 2d 02 00       	call   f0131168 <alloc_block_BF>
f010e385:	83 c4 10             	add    $0x10,%esp
f010e388:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010e38b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e38f:	74 17                	je     f010e3a8 <test_alloc_block_BF+0x22c>
f010e391:	83 ec 04             	sub    $0x4,%esp
f010e394:	68 80 73 13 f0       	push   $0xf0137380
f010e399:	68 66 01 00 00       	push   $0x166
f010e39e:	68 14 6c 13 f0       	push   $0xf0136c14
f010e3a3:	e8 fe 1d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e3a8:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e3ad:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e3b0:	75 13                	jne    f010e3c5 <test_alloc_block_BF+0x249>
f010e3b2:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e3b7:	83 f8 07             	cmp    $0x7,%eax
f010e3ba:	75 09                	jne    f010e3c5 <test_alloc_block_BF+0x249>
f010e3bc:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e3c1:	85 c0                	test   %eax,%eax
f010e3c3:	74 17                	je     f010e3dc <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e3c5:	83 ec 04             	sub    $0x4,%esp
f010e3c8:	68 40 71 13 f0       	push   $0xf0137140
f010e3cd:	68 6a 01 00 00       	push   $0x16a
f010e3d2:	68 14 6c 13 f0       	push   $0xf0136c14
f010e3d7:	e8 ca 1d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e3dc:	83 ec 0c             	sub    $0xc,%esp
f010e3df:	68 00 00 10 00       	push   $0x100000
f010e3e4:	e8 7f 2d 02 00       	call   f0131168 <alloc_block_BF>
f010e3e9:	83 c4 10             	add    $0x10,%esp
f010e3ec:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010e3ef:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e3f3:	74 1a                	je     f010e40f <test_alloc_block_BF+0x293>
f010e3f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e3f8:	8b 40 0c             	mov    0xc(%eax),%eax
f010e3fb:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e400:	75 0d                	jne    f010e40f <test_alloc_block_BF+0x293>
f010e402:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e405:	8b 40 08             	mov    0x8(%eax),%eax
f010e408:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010e40d:	74 17                	je     f010e426 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e40f:	83 ec 04             	sub    $0x4,%esp
f010e412:	68 f4 73 13 f0       	push   $0xf01373f4
f010e417:	68 72 01 00 00       	push   $0x172
f010e41c:	68 14 6c 13 f0       	push   $0xf0136c14
f010e421:	e8 80 1d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e426:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e42b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e42e:	75 13                	jne    f010e443 <test_alloc_block_BF+0x2c7>
f010e430:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e435:	83 f8 06             	cmp    $0x6,%eax
f010e438:	75 09                	jne    f010e443 <test_alloc_block_BF+0x2c7>
f010e43a:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e43f:	85 c0                	test   %eax,%eax
f010e441:	74 17                	je     f010e45a <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e443:	83 ec 04             	sub    $0x4,%esp
f010e446:	68 38 74 13 f0       	push   $0xf0137438
f010e44b:	68 76 01 00 00       	push   $0x176
f010e450:	68 14 6c 13 f0       	push   $0xf0136c14
f010e455:	e8 4c 1d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e45a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e461:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010e464:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010e46b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010e472:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e479:	83 ec 0c             	sub    $0xc,%esp
f010e47c:	ff 75 d8             	pushl  -0x28(%ebp)
f010e47f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e485:	50                   	push   %eax
f010e486:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e489:	50                   	push   %eax
f010e48a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e48d:	50                   	push   %eax
f010e48e:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e493:	e8 dd 17 00 00       	call   f010fc75 <check_list_data>
f010e498:	83 c4 20             	add    $0x20,%esp
f010e49b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e49e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e4a2:	74 17                	je     f010e4bb <test_alloc_block_BF+0x33f>
f010e4a4:	83 ec 04             	sub    $0x4,%esp
f010e4a7:	68 9c 74 13 f0       	push   $0xf013749c
f010e4ac:	68 7e 01 00 00       	push   $0x17e
f010e4b1:	68 14 6c 13 f0       	push   $0xf0136c14
f010e4b6:	e8 eb 1c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e4bb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e4c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e4c4:	74 17                	je     f010e4dd <test_alloc_block_BF+0x361>
f010e4c6:	83 ec 04             	sub    $0x4,%esp
f010e4c9:	68 e8 74 13 f0       	push   $0xf01374e8
f010e4ce:	68 7f 01 00 00       	push   $0x17f
f010e4d3:	68 14 6c 13 f0       	push   $0xf0136c14
f010e4d8:	e8 c9 1c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e4dd:	83 ec 0c             	sub    $0xc,%esp
f010e4e0:	68 00 00 10 00       	push   $0x100000
f010e4e5:	e8 7e 2c 02 00       	call   f0131168 <alloc_block_BF>
f010e4ea:	83 c4 10             	add    $0x10,%esp
f010e4ed:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e4f0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e4f4:	74 1a                	je     f010e510 <test_alloc_block_BF+0x394>
f010e4f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e4f9:	8b 40 0c             	mov    0xc(%eax),%eax
f010e4fc:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e501:	75 0d                	jne    f010e510 <test_alloc_block_BF+0x394>
f010e503:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e506:	8b 40 08             	mov    0x8(%eax),%eax
f010e509:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e50e:	74 17                	je     f010e527 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e510:	83 ec 04             	sub    $0x4,%esp
f010e513:	68 f4 73 13 f0       	push   $0xf01373f4
f010e518:	68 87 01 00 00       	push   $0x187
f010e51d:	68 14 6c 13 f0       	push   $0xf0136c14
f010e522:	e8 7f 1c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e527:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e52c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e52f:	4a                   	dec    %edx
f010e530:	39 d0                	cmp    %edx,%eax
f010e532:	75 13                	jne    f010e547 <test_alloc_block_BF+0x3cb>
f010e534:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e539:	83 f8 06             	cmp    $0x6,%eax
f010e53c:	75 09                	jne    f010e547 <test_alloc_block_BF+0x3cb>
f010e53e:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e543:	85 c0                	test   %eax,%eax
f010e545:	74 17                	je     f010e55e <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e547:	83 ec 04             	sub    $0x4,%esp
f010e54a:	68 38 74 13 f0       	push   $0xf0137438
f010e54f:	68 8b 01 00 00       	push   $0x18b
f010e554:	68 14 6c 13 f0       	push   $0xf0136c14
f010e559:	e8 48 1c ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e55e:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e565:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e568:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e56f:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e576:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e57d:	83 ec 0c             	sub    $0xc,%esp
f010e580:	ff 75 d8             	pushl  -0x28(%ebp)
f010e583:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e589:	50                   	push   %eax
f010e58a:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e58d:	50                   	push   %eax
f010e58e:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e591:	50                   	push   %eax
f010e592:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e597:	e8 d9 16 00 00       	call   f010fc75 <check_list_data>
f010e59c:	83 c4 20             	add    $0x20,%esp
f010e59f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e5a2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e5a6:	74 17                	je     f010e5bf <test_alloc_block_BF+0x443>
f010e5a8:	83 ec 04             	sub    $0x4,%esp
f010e5ab:	68 9c 74 13 f0       	push   $0xf013749c
f010e5b0:	68 93 01 00 00       	push   $0x193
f010e5b5:	68 14 6c 13 f0       	push   $0xf0136c14
f010e5ba:	e8 e7 1b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e5bf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e5c5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e5c8:	74 17                	je     f010e5e1 <test_alloc_block_BF+0x465>
f010e5ca:	83 ec 04             	sub    $0x4,%esp
f010e5cd:	68 e8 74 13 f0       	push   $0xf01374e8
f010e5d2:	68 94 01 00 00       	push   $0x194
f010e5d7:	68 14 6c 13 f0       	push   $0xf0136c14
f010e5dc:	e8 c5 1b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010e5e1:	83 ec 0c             	sub    $0xc,%esp
f010e5e4:	68 00 0c 00 00       	push   $0xc00
f010e5e9:	e8 7a 2b 02 00       	call   f0131168 <alloc_block_BF>
f010e5ee:	83 c4 10             	add    $0x10,%esp
f010e5f1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010e5f4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e5f8:	74 1a                	je     f010e614 <test_alloc_block_BF+0x498>
f010e5fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e5fd:	8b 40 0c             	mov    0xc(%eax),%eax
f010e600:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e605:	75 0d                	jne    f010e614 <test_alloc_block_BF+0x498>
f010e607:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e60a:	8b 40 08             	mov    0x8(%eax),%eax
f010e60d:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010e612:	74 17                	je     f010e62b <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e614:	83 ec 04             	sub    $0x4,%esp
f010e617:	68 f4 73 13 f0       	push   $0xf01373f4
f010e61c:	68 9c 01 00 00       	push   $0x19c
f010e621:	68 14 6c 13 f0       	push   $0xf0136c14
f010e626:	e8 7b 1b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e62b:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e630:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e633:	83 ea 02             	sub    $0x2,%edx
f010e636:	39 d0                	cmp    %edx,%eax
f010e638:	75 13                	jne    f010e64d <test_alloc_block_BF+0x4d1>
f010e63a:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e63f:	83 f8 06             	cmp    $0x6,%eax
f010e642:	75 09                	jne    f010e64d <test_alloc_block_BF+0x4d1>
f010e644:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e649:	85 c0                	test   %eax,%eax
f010e64b:	74 17                	je     f010e664 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e64d:	83 ec 04             	sub    $0x4,%esp
f010e650:	68 38 74 13 f0       	push   $0xf0137438
f010e655:	68 a0 01 00 00       	push   $0x1a0
f010e65a:	68 14 6c 13 f0       	push   $0xf0136c14
f010e65f:	e8 42 1b ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e664:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e66b:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e66e:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010e675:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010e67c:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e683:	83 ec 0c             	sub    $0xc,%esp
f010e686:	ff 75 d8             	pushl  -0x28(%ebp)
f010e689:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e68f:	50                   	push   %eax
f010e690:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e693:	50                   	push   %eax
f010e694:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e697:	50                   	push   %eax
f010e698:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e69d:	e8 d3 15 00 00       	call   f010fc75 <check_list_data>
f010e6a2:	83 c4 20             	add    $0x20,%esp
f010e6a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e6a8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e6ac:	74 17                	je     f010e6c5 <test_alloc_block_BF+0x549>
f010e6ae:	83 ec 04             	sub    $0x4,%esp
f010e6b1:	68 9c 74 13 f0       	push   $0xf013749c
f010e6b6:	68 a8 01 00 00       	push   $0x1a8
f010e6bb:	68 14 6c 13 f0       	push   $0xf0136c14
f010e6c0:	e8 e1 1a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e6c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e6cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e6ce:	74 17                	je     f010e6e7 <test_alloc_block_BF+0x56b>
f010e6d0:	83 ec 04             	sub    $0x4,%esp
f010e6d3:	68 e8 74 13 f0       	push   $0xf01374e8
f010e6d8:	68 a9 01 00 00       	push   $0x1a9
f010e6dd:	68 14 6c 13 f0       	push   $0xf0136c14
f010e6e2:	e8 bf 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010e6e7:	83 ec 0c             	sub    $0xc,%esp
f010e6ea:	68 00 08 00 00       	push   $0x800
f010e6ef:	e8 74 2a 02 00       	call   f0131168 <alloc_block_BF>
f010e6f4:	83 c4 10             	add    $0x10,%esp
f010e6f7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010e6fa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e6fe:	74 17                	je     f010e717 <test_alloc_block_BF+0x59b>
f010e700:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e703:	8b 40 0c             	mov    0xc(%eax),%eax
f010e706:	3d 00 08 00 00       	cmp    $0x800,%eax
f010e70b:	75 0a                	jne    f010e717 <test_alloc_block_BF+0x59b>
f010e70d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e710:	8b 40 08             	mov    0x8(%eax),%eax
f010e713:	85 c0                	test   %eax,%eax
f010e715:	74 17                	je     f010e72e <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e717:	83 ec 04             	sub    $0x4,%esp
f010e71a:	68 f4 73 13 f0       	push   $0xf01373f4
f010e71f:	68 b1 01 00 00       	push   $0x1b1
f010e724:	68 14 6c 13 f0       	push   $0xf0136c14
f010e729:	e8 78 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e72e:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e733:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e736:	83 ea 02             	sub    $0x2,%edx
f010e739:	39 d0                	cmp    %edx,%eax
f010e73b:	75 13                	jne    f010e750 <test_alloc_block_BF+0x5d4>
f010e73d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e742:	83 f8 05             	cmp    $0x5,%eax
f010e745:	75 09                	jne    f010e750 <test_alloc_block_BF+0x5d4>
f010e747:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e74c:	85 c0                	test   %eax,%eax
f010e74e:	74 17                	je     f010e767 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e750:	83 ec 04             	sub    $0x4,%esp
f010e753:	68 38 74 13 f0       	push   $0xf0137438
f010e758:	68 b5 01 00 00       	push   $0x1b5
f010e75d:	68 14 6c 13 f0       	push   $0xf0136c14
f010e762:	e8 3f 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e767:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e76e:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010e771:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010e778:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010e77f:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e786:	83 ec 0c             	sub    $0xc,%esp
f010e789:	ff 75 d8             	pushl  -0x28(%ebp)
f010e78c:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e792:	50                   	push   %eax
f010e793:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e796:	50                   	push   %eax
f010e797:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e79a:	50                   	push   %eax
f010e79b:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e7a0:	e8 d0 14 00 00       	call   f010fc75 <check_list_data>
f010e7a5:	83 c4 20             	add    $0x20,%esp
f010e7a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e7ab:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e7af:	74 17                	je     f010e7c8 <test_alloc_block_BF+0x64c>
f010e7b1:	83 ec 04             	sub    $0x4,%esp
f010e7b4:	68 9c 74 13 f0       	push   $0xf013749c
f010e7b9:	68 bd 01 00 00       	push   $0x1bd
f010e7be:	68 14 6c 13 f0       	push   $0xf0136c14
f010e7c3:	e8 de 19 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e7c8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e7ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e7d1:	74 17                	je     f010e7ea <test_alloc_block_BF+0x66e>
f010e7d3:	83 ec 04             	sub    $0x4,%esp
f010e7d6:	68 e8 74 13 f0       	push   $0xf01374e8
f010e7db:	68 be 01 00 00       	push   $0x1be
f010e7e0:	68 14 6c 13 f0       	push   $0xf0136c14
f010e7e5:	e8 bc 19 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010e7ea:	83 ec 0c             	sub    $0xc,%esp
f010e7ed:	68 34 75 13 f0       	push   $0xf0137534
f010e7f2:	e8 36 24 ff ff       	call   f0100c2d <cprintf>
f010e7f7:	83 c4 10             	add    $0x10,%esp
}
f010e7fa:	90                   	nop
f010e7fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e7fe:	5b                   	pop    %ebx
f010e7ff:	5e                   	pop    %esi
f010e800:	5f                   	pop    %edi
f010e801:	5d                   	pop    %ebp
f010e802:	c3                   	ret    

f010e803 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010e803:	55                   	push   %ebp
f010e804:	89 e5                	mov    %esp,%ebp
f010e806:	57                   	push   %edi
f010e807:	56                   	push   %esi
f010e808:	53                   	push   %ebx
f010e809:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e80f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e816:	83 ec 0c             	sub    $0xc,%esp
f010e819:	ff 75 e0             	pushl  -0x20(%ebp)
f010e81c:	e8 e0 23 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010e821:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e824:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010e82b:	00 00 00 
f010e82e:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010e835:	00 00 00 
f010e838:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010e83f:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e842:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e845:	bb 40 73 13 f0       	mov    $0xf0137340,%ebx
f010e84a:	ba 08 00 00 00       	mov    $0x8,%edx
f010e84f:	89 c7                	mov    %eax,%edi
f010e851:	89 de                	mov    %ebx,%esi
f010e853:	89 d1                	mov    %edx,%ecx
f010e855:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010e857:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e85a:	bb a0 77 13 f0       	mov    $0xf01377a0,%ebx
f010e85f:	ba 08 00 00 00       	mov    $0x8,%edx
f010e864:	89 c7                	mov    %eax,%edi
f010e866:	89 de                	mov    %ebx,%esi
f010e868:	89 d1                	mov    %edx,%ecx
f010e86a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e86c:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010e873:	00 00 00 
f010e876:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010e87d:	00 00 00 
f010e880:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010e887:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010e88a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e891:	e9 5f 01 00 00       	jmp    f010e9f5 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e896:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e899:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e89d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8a0:	c1 e2 04             	shl    $0x4,%edx
f010e8a3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e8a6:	01 da                	add    %ebx,%edx
f010e8a8:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e8ae:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e8b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8b3:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e8b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8ba:	c1 e2 04             	shl    $0x4,%edx
f010e8bd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e8c0:	01 f2                	add    %esi,%edx
f010e8c2:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e8c8:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e8ca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e8ce:	0f 85 92 00 00 00    	jne    f010e966 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e8d4:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e8d9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8dc:	c1 e2 04             	shl    $0x4,%edx
f010e8df:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e8e2:	01 fa                	add    %edi,%edx
f010e8e4:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e8ea:	89 02                	mov    %eax,(%edx)
f010e8ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8ef:	c1 e0 04             	shl    $0x4,%eax
f010e8f2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e8f5:	01 d8                	add    %ebx,%eax
f010e8f7:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e8fc:	8b 00                	mov    (%eax),%eax
f010e8fe:	85 c0                	test   %eax,%eax
f010e900:	74 18                	je     f010e91a <test_alloc_block_NF+0x117>
f010e902:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e907:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e90d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e910:	c1 e1 04             	shl    $0x4,%ecx
f010e913:	01 ca                	add    %ecx,%edx
f010e915:	89 50 04             	mov    %edx,0x4(%eax)
f010e918:	eb 13                	jmp    f010e92d <test_alloc_block_NF+0x12a>
f010e91a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e920:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e923:	c1 e2 04             	shl    $0x4,%edx
f010e926:	01 d0                	add    %edx,%eax
f010e928:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e92d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e933:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e936:	c1 e2 04             	shl    $0x4,%edx
f010e939:	01 d0                	add    %edx,%eax
f010e93b:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e940:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e943:	c1 e0 04             	shl    $0x4,%eax
f010e946:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e949:	01 f0                	add    %esi,%eax
f010e94b:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e950:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e956:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e95b:	40                   	inc    %eax
f010e95c:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
f010e961:	e9 8c 00 00 00       	jmp    f010e9f2 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e966:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e96b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e96e:	c1 e2 04             	shl    $0x4,%edx
f010e971:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e974:	01 fa                	add    %edi,%edx
f010e976:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e97c:	89 02                	mov    %eax,(%edx)
f010e97e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e981:	c1 e0 04             	shl    $0x4,%eax
f010e984:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e987:	01 d8                	add    %ebx,%eax
f010e989:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e98e:	8b 00                	mov    (%eax),%eax
f010e990:	85 c0                	test   %eax,%eax
f010e992:	74 17                	je     f010e9ab <test_alloc_block_NF+0x1a8>
f010e994:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e999:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e99f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e9a2:	c1 e1 04             	shl    $0x4,%ecx
f010e9a5:	01 ca                	add    %ecx,%edx
f010e9a7:	89 10                	mov    %edx,(%eax)
f010e9a9:	eb 13                	jmp    f010e9be <test_alloc_block_NF+0x1bb>
f010e9ab:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e9b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9b4:	c1 e2 04             	shl    $0x4,%edx
f010e9b7:	01 d0                	add    %edx,%eax
f010e9b9:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e9be:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e9c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9c7:	c1 e2 04             	shl    $0x4,%edx
f010e9ca:	01 d0                	add    %edx,%eax
f010e9cc:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e9d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9d4:	c1 e0 04             	shl    $0x4,%eax
f010e9d7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e9da:	01 f0                	add    %esi,%eax
f010e9dc:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e9e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e9e7:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e9ec:	40                   	inc    %eax
f010e9ed:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010e9f2:	ff 45 e4             	incl   -0x1c(%ebp)
f010e9f5:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e9f9:	0f 8e 97 fe ff ff    	jle    f010e896 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010e9ff:	83 ec 0c             	sub    $0xc,%esp
f010ea02:	68 00 00 a0 00       	push   $0xa00000
f010ea07:	e8 6d 29 02 00       	call   f0131379 <alloc_block_NF>
f010ea0c:	83 c4 10             	add    $0x10,%esp
f010ea0f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010ea12:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ea16:	74 17                	je     f010ea2f <test_alloc_block_NF+0x22c>
f010ea18:	83 ec 04             	sub    $0x4,%esp
f010ea1b:	68 ac 75 13 f0       	push   $0xf01375ac
f010ea20:	68 e1 01 00 00       	push   $0x1e1
f010ea25:	68 14 6c 13 f0       	push   $0xf0136c14
f010ea2a:	e8 77 17 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ea2f:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ea34:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ea37:	75 13                	jne    f010ea4c <test_alloc_block_NF+0x249>
f010ea39:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ea3e:	83 f8 08             	cmp    $0x8,%eax
f010ea41:	75 09                	jne    f010ea4c <test_alloc_block_NF+0x249>
f010ea43:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010ea48:	85 c0                	test   %eax,%eax
f010ea4a:	74 17                	je     f010ea63 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ea4c:	83 ec 04             	sub    $0x4,%esp
f010ea4f:	68 40 71 13 f0       	push   $0xf0137140
f010ea54:	68 e5 01 00 00       	push   $0x1e5
f010ea59:	68 14 6c 13 f0       	push   $0xf0136c14
f010ea5e:	e8 43 17 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010ea63:	83 ec 0c             	sub    $0xc,%esp
f010ea66:	68 00 28 00 00       	push   $0x2800
f010ea6b:	e8 09 29 02 00       	call   f0131379 <alloc_block_NF>
f010ea70:	83 c4 10             	add    $0x10,%esp
f010ea73:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010ea76:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ea7a:	74 1a                	je     f010ea96 <test_alloc_block_NF+0x293>
f010ea7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea7f:	8b 40 0c             	mov    0xc(%eax),%eax
f010ea82:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010ea87:	75 0d                	jne    f010ea96 <test_alloc_block_NF+0x293>
f010ea89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea8c:	8b 40 08             	mov    0x8(%eax),%eax
f010ea8f:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ea94:	74 17                	je     f010eaad <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ea96:	83 ec 04             	sub    $0x4,%esp
f010ea99:	68 20 76 13 f0       	push   $0xf0137620
f010ea9e:	68 ed 01 00 00       	push   $0x1ed
f010eaa3:	68 14 6c 13 f0       	push   $0xf0136c14
f010eaa8:	e8 f9 16 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eaad:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010eab2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eab5:	75 13                	jne    f010eaca <test_alloc_block_NF+0x2c7>
f010eab7:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010eabc:	83 f8 07             	cmp    $0x7,%eax
f010eabf:	75 09                	jne    f010eaca <test_alloc_block_NF+0x2c7>
f010eac1:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010eac6:	85 c0                	test   %eax,%eax
f010eac8:	74 17                	je     f010eae1 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eaca:	83 ec 04             	sub    $0x4,%esp
f010eacd:	68 64 76 13 f0       	push   $0xf0137664
f010ead2:	68 f1 01 00 00       	push   $0x1f1
f010ead7:	68 14 6c 13 f0       	push   $0xf0136c14
f010eadc:	e8 c5 16 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010eae1:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eae8:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010eaeb:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010eaf2:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010eaf9:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eb00:	83 ec 0c             	sub    $0xc,%esp
f010eb03:	ff 75 d8             	pushl  -0x28(%ebp)
f010eb06:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010eb0c:	50                   	push   %eax
f010eb0d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eb10:	50                   	push   %eax
f010eb11:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eb14:	50                   	push   %eax
f010eb15:	68 c0 74 6e f0       	push   $0xf06e74c0
f010eb1a:	e8 56 11 00 00       	call   f010fc75 <check_list_data>
f010eb1f:	83 c4 20             	add    $0x20,%esp
f010eb22:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010eb25:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eb29:	74 17                	je     f010eb42 <test_alloc_block_NF+0x33f>
f010eb2b:	83 ec 04             	sub    $0x4,%esp
f010eb2e:	68 c8 76 13 f0       	push   $0xf01376c8
f010eb33:	68 f9 01 00 00       	push   $0x1f9
f010eb38:	68 14 6c 13 f0       	push   $0xf0136c14
f010eb3d:	e8 64 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010eb42:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eb48:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eb4b:	74 17                	je     f010eb64 <test_alloc_block_NF+0x361>
f010eb4d:	83 ec 04             	sub    $0x4,%esp
f010eb50:	68 14 77 13 f0       	push   $0xf0137714
f010eb55:	68 fa 01 00 00       	push   $0x1fa
f010eb5a:	68 14 6c 13 f0       	push   $0xf0136c14
f010eb5f:	e8 42 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010eb64:	83 ec 0c             	sub    $0xc,%esp
f010eb67:	68 00 00 20 00       	push   $0x200000
f010eb6c:	e8 08 28 02 00       	call   f0131379 <alloc_block_NF>
f010eb71:	83 c4 10             	add    $0x10,%esp
f010eb74:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010eb77:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb7b:	74 1a                	je     f010eb97 <test_alloc_block_NF+0x394>
f010eb7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb80:	8b 40 0c             	mov    0xc(%eax),%eax
f010eb83:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010eb88:	75 0d                	jne    f010eb97 <test_alloc_block_NF+0x394>
f010eb8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb8d:	8b 40 08             	mov    0x8(%eax),%eax
f010eb90:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010eb95:	74 17                	je     f010ebae <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010eb97:	83 ec 04             	sub    $0x4,%esp
f010eb9a:	68 20 76 13 f0       	push   $0xf0137620
f010eb9f:	68 03 02 00 00       	push   $0x203
f010eba4:	68 14 6c 13 f0       	push   $0xf0136c14
f010eba9:	e8 f8 15 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ebae:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ebb3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ebb6:	75 13                	jne    f010ebcb <test_alloc_block_NF+0x3c8>
f010ebb8:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ebbd:	83 f8 06             	cmp    $0x6,%eax
f010ebc0:	75 09                	jne    f010ebcb <test_alloc_block_NF+0x3c8>
f010ebc2:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010ebc7:	85 c0                	test   %eax,%eax
f010ebc9:	74 17                	je     f010ebe2 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ebcb:	83 ec 04             	sub    $0x4,%esp
f010ebce:	68 64 76 13 f0       	push   $0xf0137664
f010ebd3:	68 07 02 00 00       	push   $0x207
f010ebd8:	68 14 6c 13 f0       	push   $0xf0136c14
f010ebdd:	e8 c4 15 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ebe2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ebe9:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010ebec:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010ebf3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010ebfa:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ec01:	83 ec 0c             	sub    $0xc,%esp
f010ec04:	ff 75 d8             	pushl  -0x28(%ebp)
f010ec07:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ec0d:	50                   	push   %eax
f010ec0e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ec11:	50                   	push   %eax
f010ec12:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ec15:	50                   	push   %eax
f010ec16:	68 c0 74 6e f0       	push   $0xf06e74c0
f010ec1b:	e8 55 10 00 00       	call   f010fc75 <check_list_data>
f010ec20:	83 c4 20             	add    $0x20,%esp
f010ec23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ec26:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ec2a:	74 17                	je     f010ec43 <test_alloc_block_NF+0x440>
f010ec2c:	83 ec 04             	sub    $0x4,%esp
f010ec2f:	68 c8 76 13 f0       	push   $0xf01376c8
f010ec34:	68 0f 02 00 00       	push   $0x20f
f010ec39:	68 14 6c 13 f0       	push   $0xf0136c14
f010ec3e:	e8 63 15 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ec43:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ec49:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ec4c:	74 17                	je     f010ec65 <test_alloc_block_NF+0x462>
f010ec4e:	83 ec 04             	sub    $0x4,%esp
f010ec51:	68 14 77 13 f0       	push   $0xf0137714
f010ec56:	68 10 02 00 00       	push   $0x210
f010ec5b:	68 14 6c 13 f0       	push   $0xf0136c14
f010ec60:	e8 41 15 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010ec65:	83 ec 0c             	sub    $0xc,%esp
f010ec68:	68 00 00 08 00       	push   $0x80000
f010ec6d:	e8 07 27 02 00       	call   f0131379 <alloc_block_NF>
f010ec72:	83 c4 10             	add    $0x10,%esp
f010ec75:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010ec78:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ec7c:	74 1a                	je     f010ec98 <test_alloc_block_NF+0x495>
f010ec7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec81:	8b 40 0c             	mov    0xc(%eax),%eax
f010ec84:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010ec89:	75 0d                	jne    f010ec98 <test_alloc_block_NF+0x495>
f010ec8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec8e:	8b 40 08             	mov    0x8(%eax),%eax
f010ec91:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010ec96:	74 17                	je     f010ecaf <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ec98:	83 ec 04             	sub    $0x4,%esp
f010ec9b:	68 20 76 13 f0       	push   $0xf0137620
f010eca0:	68 19 02 00 00       	push   $0x219
f010eca5:	68 14 6c 13 f0       	push   $0xf0136c14
f010ecaa:	e8 f7 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ecaf:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ecb4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ecb7:	4a                   	dec    %edx
f010ecb8:	39 d0                	cmp    %edx,%eax
f010ecba:	75 13                	jne    f010eccf <test_alloc_block_NF+0x4cc>
f010ecbc:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ecc1:	83 f8 06             	cmp    $0x6,%eax
f010ecc4:	75 09                	jne    f010eccf <test_alloc_block_NF+0x4cc>
f010ecc6:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010eccb:	85 c0                	test   %eax,%eax
f010eccd:	74 17                	je     f010ece6 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eccf:	83 ec 04             	sub    $0x4,%esp
f010ecd2:	68 64 76 13 f0       	push   $0xf0137664
f010ecd7:	68 1d 02 00 00       	push   $0x21d
f010ecdc:	68 14 6c 13 f0       	push   $0xf0136c14
f010ece1:	e8 c0 14 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ece6:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eced:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010ecf0:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010ecf7:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010ecfe:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ed05:	83 ec 0c             	sub    $0xc,%esp
f010ed08:	ff 75 d8             	pushl  -0x28(%ebp)
f010ed0b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ed11:	50                   	push   %eax
f010ed12:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ed15:	50                   	push   %eax
f010ed16:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ed19:	50                   	push   %eax
f010ed1a:	68 c0 74 6e f0       	push   $0xf06e74c0
f010ed1f:	e8 51 0f 00 00       	call   f010fc75 <check_list_data>
f010ed24:	83 c4 20             	add    $0x20,%esp
f010ed27:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ed2a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ed2e:	74 17                	je     f010ed47 <test_alloc_block_NF+0x544>
f010ed30:	83 ec 04             	sub    $0x4,%esp
f010ed33:	68 c8 76 13 f0       	push   $0xf01376c8
f010ed38:	68 25 02 00 00       	push   $0x225
f010ed3d:	68 14 6c 13 f0       	push   $0xf0136c14
f010ed42:	e8 5f 14 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ed47:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ed4d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ed50:	74 17                	je     f010ed69 <test_alloc_block_NF+0x566>
f010ed52:	83 ec 04             	sub    $0x4,%esp
f010ed55:	68 14 77 13 f0       	push   $0xf0137714
f010ed5a:	68 26 02 00 00       	push   $0x226
f010ed5f:	68 14 6c 13 f0       	push   $0xf0136c14
f010ed64:	e8 3d 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010ed69:	83 ec 0c             	sub    $0xc,%esp
f010ed6c:	68 00 fc 07 00       	push   $0x7fc00
f010ed71:	e8 03 26 02 00       	call   f0131379 <alloc_block_NF>
f010ed76:	83 c4 10             	add    $0x10,%esp
f010ed79:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010ed7c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed80:	74 1a                	je     f010ed9c <test_alloc_block_NF+0x599>
f010ed82:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed85:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed88:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010ed8d:	75 0d                	jne    f010ed9c <test_alloc_block_NF+0x599>
f010ed8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed92:	8b 40 08             	mov    0x8(%eax),%eax
f010ed95:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010ed9a:	74 17                	je     f010edb3 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ed9c:	83 ec 04             	sub    $0x4,%esp
f010ed9f:	68 20 76 13 f0       	push   $0xf0137620
f010eda4:	68 2f 02 00 00       	push   $0x22f
f010eda9:	68 14 6c 13 f0       	push   $0xf0136c14
f010edae:	e8 f3 13 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010edb3:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010edb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010edbb:	83 ea 02             	sub    $0x2,%edx
f010edbe:	39 d0                	cmp    %edx,%eax
f010edc0:	75 13                	jne    f010edd5 <test_alloc_block_NF+0x5d2>
f010edc2:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010edc7:	83 f8 06             	cmp    $0x6,%eax
f010edca:	75 09                	jne    f010edd5 <test_alloc_block_NF+0x5d2>
f010edcc:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010edd1:	85 c0                	test   %eax,%eax
f010edd3:	74 17                	je     f010edec <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010edd5:	83 ec 04             	sub    $0x4,%esp
f010edd8:	68 64 76 13 f0       	push   $0xf0137664
f010eddd:	68 33 02 00 00       	push   $0x233
f010ede2:	68 14 6c 13 f0       	push   $0xf0136c14
f010ede7:	e8 ba 13 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010edec:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010edf3:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010edf6:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010edfd:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010ee04:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ee0b:	83 ec 0c             	sub    $0xc,%esp
f010ee0e:	ff 75 d8             	pushl  -0x28(%ebp)
f010ee11:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ee17:	50                   	push   %eax
f010ee18:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ee1b:	50                   	push   %eax
f010ee1c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ee1f:	50                   	push   %eax
f010ee20:	68 c0 74 6e f0       	push   $0xf06e74c0
f010ee25:	e8 4b 0e 00 00       	call   f010fc75 <check_list_data>
f010ee2a:	83 c4 20             	add    $0x20,%esp
f010ee2d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ee30:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ee34:	74 17                	je     f010ee4d <test_alloc_block_NF+0x64a>
f010ee36:	83 ec 04             	sub    $0x4,%esp
f010ee39:	68 c8 76 13 f0       	push   $0xf01376c8
f010ee3e:	68 3b 02 00 00       	push   $0x23b
f010ee43:	68 14 6c 13 f0       	push   $0xf0136c14
f010ee48:	e8 59 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ee4d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ee53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ee56:	74 17                	je     f010ee6f <test_alloc_block_NF+0x66c>
f010ee58:	83 ec 04             	sub    $0x4,%esp
f010ee5b:	68 14 77 13 f0       	push   $0xf0137714
f010ee60:	68 3c 02 00 00       	push   $0x23c
f010ee65:	68 14 6c 13 f0       	push   $0xf0136c14
f010ee6a:	e8 37 13 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010ee6f:	83 ec 0c             	sub    $0xc,%esp
f010ee72:	68 00 0c 00 00       	push   $0xc00
f010ee77:	e8 fd 24 02 00       	call   f0131379 <alloc_block_NF>
f010ee7c:	83 c4 10             	add    $0x10,%esp
f010ee7f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010ee82:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee86:	74 17                	je     f010ee9f <test_alloc_block_NF+0x69c>
f010ee88:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee8b:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee8e:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ee93:	75 0a                	jne    f010ee9f <test_alloc_block_NF+0x69c>
f010ee95:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee98:	8b 40 08             	mov    0x8(%eax),%eax
f010ee9b:	85 c0                	test   %eax,%eax
f010ee9d:	74 17                	je     f010eeb6 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ee9f:	83 ec 04             	sub    $0x4,%esp
f010eea2:	68 20 76 13 f0       	push   $0xf0137620
f010eea7:	68 45 02 00 00       	push   $0x245
f010eeac:	68 14 6c 13 f0       	push   $0xf0136c14
f010eeb1:	e8 f0 12 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eeb6:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010eebb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010eebe:	83 ea 02             	sub    $0x2,%edx
f010eec1:	39 d0                	cmp    %edx,%eax
f010eec3:	75 13                	jne    f010eed8 <test_alloc_block_NF+0x6d5>
f010eec5:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010eeca:	83 f8 05             	cmp    $0x5,%eax
f010eecd:	75 09                	jne    f010eed8 <test_alloc_block_NF+0x6d5>
f010eecf:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010eed4:	85 c0                	test   %eax,%eax
f010eed6:	74 17                	je     f010eeef <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eed8:	83 ec 04             	sub    $0x4,%esp
f010eedb:	68 64 76 13 f0       	push   $0xf0137664
f010eee0:	68 49 02 00 00       	push   $0x249
f010eee5:	68 14 6c 13 f0       	push   $0xf0136c14
f010eeea:	e8 b7 12 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eeef:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eef6:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010eef9:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010ef00:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010ef07:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ef0e:	83 ec 0c             	sub    $0xc,%esp
f010ef11:	ff 75 d8             	pushl  -0x28(%ebp)
f010ef14:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ef1a:	50                   	push   %eax
f010ef1b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ef1e:	50                   	push   %eax
f010ef1f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ef22:	50                   	push   %eax
f010ef23:	68 c0 74 6e f0       	push   $0xf06e74c0
f010ef28:	e8 48 0d 00 00       	call   f010fc75 <check_list_data>
f010ef2d:	83 c4 20             	add    $0x20,%esp
f010ef30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ef33:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ef37:	74 17                	je     f010ef50 <test_alloc_block_NF+0x74d>
f010ef39:	83 ec 04             	sub    $0x4,%esp
f010ef3c:	68 c8 76 13 f0       	push   $0xf01376c8
f010ef41:	68 51 02 00 00       	push   $0x251
f010ef46:	68 14 6c 13 f0       	push   $0xf0136c14
f010ef4b:	e8 56 12 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ef50:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ef56:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ef59:	74 17                	je     f010ef72 <test_alloc_block_NF+0x76f>
f010ef5b:	83 ec 04             	sub    $0x4,%esp
f010ef5e:	68 14 77 13 f0       	push   $0xf0137714
f010ef63:	68 52 02 00 00       	push   $0x252
f010ef68:	68 14 6c 13 f0       	push   $0xf0136c14
f010ef6d:	e8 34 12 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010ef72:	83 ec 0c             	sub    $0xc,%esp
f010ef75:	68 00 04 00 00       	push   $0x400
f010ef7a:	e8 fa 23 02 00       	call   f0131379 <alloc_block_NF>
f010ef7f:	83 c4 10             	add    $0x10,%esp
f010ef82:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010ef85:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef89:	74 1a                	je     f010efa5 <test_alloc_block_NF+0x7a2>
f010ef8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef8e:	8b 40 0c             	mov    0xc(%eax),%eax
f010ef91:	3d 00 04 00 00       	cmp    $0x400,%eax
f010ef96:	75 0d                	jne    f010efa5 <test_alloc_block_NF+0x7a2>
f010ef98:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef9b:	8b 40 08             	mov    0x8(%eax),%eax
f010ef9e:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010efa3:	74 17                	je     f010efbc <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010efa5:	83 ec 04             	sub    $0x4,%esp
f010efa8:	68 20 76 13 f0       	push   $0xf0137620
f010efad:	68 5b 02 00 00       	push   $0x25b
f010efb2:	68 14 6c 13 f0       	push   $0xf0136c14
f010efb7:	e8 ea 11 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010efbc:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010efc1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010efc4:	83 ea 03             	sub    $0x3,%edx
f010efc7:	39 d0                	cmp    %edx,%eax
f010efc9:	75 13                	jne    f010efde <test_alloc_block_NF+0x7db>
f010efcb:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010efd0:	83 f8 05             	cmp    $0x5,%eax
f010efd3:	75 09                	jne    f010efde <test_alloc_block_NF+0x7db>
f010efd5:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010efda:	85 c0                	test   %eax,%eax
f010efdc:	74 17                	je     f010eff5 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010efde:	83 ec 04             	sub    $0x4,%esp
f010efe1:	68 64 76 13 f0       	push   $0xf0137664
f010efe6:	68 5f 02 00 00       	push   $0x25f
f010efeb:	68 14 6c 13 f0       	push   $0xf0136c14
f010eff0:	e8 b1 11 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eff5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010effc:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010efff:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010f006:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010f00d:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f014:	83 ec 0c             	sub    $0xc,%esp
f010f017:	ff 75 d8             	pushl  -0x28(%ebp)
f010f01a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f020:	50                   	push   %eax
f010f021:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f024:	50                   	push   %eax
f010f025:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f028:	50                   	push   %eax
f010f029:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f02e:	e8 42 0c 00 00       	call   f010fc75 <check_list_data>
f010f033:	83 c4 20             	add    $0x20,%esp
f010f036:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f039:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f03d:	74 17                	je     f010f056 <test_alloc_block_NF+0x853>
f010f03f:	83 ec 04             	sub    $0x4,%esp
f010f042:	68 c8 76 13 f0       	push   $0xf01376c8
f010f047:	68 67 02 00 00       	push   $0x267
f010f04c:	68 14 6c 13 f0       	push   $0xf0136c14
f010f051:	e8 50 11 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f056:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f05c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f05f:	74 17                	je     f010f078 <test_alloc_block_NF+0x875>
f010f061:	83 ec 04             	sub    $0x4,%esp
f010f064:	68 14 77 13 f0       	push   $0xf0137714
f010f069:	68 68 02 00 00       	push   $0x268
f010f06e:	68 14 6c 13 f0       	push   $0xf0136c14
f010f073:	e8 2e 11 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010f078:	83 ec 0c             	sub    $0xc,%esp
f010f07b:	68 60 77 13 f0       	push   $0xf0137760
f010f080:	e8 a8 1b ff ff       	call   f0100c2d <cprintf>
f010f085:	83 c4 10             	add    $0x10,%esp

}
f010f088:	90                   	nop
f010f089:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f08c:	5b                   	pop    %ebx
f010f08d:	5e                   	pop    %esi
f010f08e:	5f                   	pop    %edi
f010f08f:	5d                   	pop    %ebp
f010f090:	c3                   	ret    

f010f091 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010f091:	55                   	push   %ebp
f010f092:	89 e5                	mov    %esp,%ebp
f010f094:	57                   	push   %edi
f010f095:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010f09b:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f0a2:	83 ec 0c             	sub    $0xc,%esp
f010f0a5:	ff 75 f4             	pushl  -0xc(%ebp)
f010f0a8:	e8 54 1b 02 00       	call   f0130c01 <initialize_MemBlocksList>
f010f0ad:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f0b0:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010f0b7:	00 00 00 
f010f0ba:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010f0c1:	00 00 00 
f010f0c4:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010f0cb:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010f0ce:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010f0d5:	00 00 00 
f010f0d8:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010f0df:	00 00 00 
f010f0e2:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010f0e9:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010f0ec:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010f0ef:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f0f4:	b8 00 00 00 00       	mov    $0x0,%eax
f010f0f9:	89 d7                	mov    %edx,%edi
f010f0fb:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010f0fd:	8d 55 98             	lea    -0x68(%ebp),%edx
f010f100:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f105:	b8 00 00 00 00       	mov    $0x0,%eax
f010f10a:	89 d7                	mov    %edx,%edi
f010f10c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010f10e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010f115:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010f11c:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010f123:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f126:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010f12d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f12e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f131:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f138:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f139:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f13c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f140:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010f143:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f146:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f14a:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010f14d:	83 ec 0c             	sub    $0xc,%esp
f010f150:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010f153:	50                   	push   %eax
f010f154:	e8 ed 27 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f159:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010f15c:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f161:	85 c0                	test   %eax,%eax
f010f163:	75 14                	jne    f010f179 <test_insert_sorted_with_merge_freeList+0xe8>
f010f165:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f16a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f16d:	75 0a                	jne    f010f179 <test_insert_sorted_with_merge_freeList+0xe8>
f010f16f:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f174:	83 f8 01             	cmp    $0x1,%eax
f010f177:	74 17                	je     f010f190 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f179:	83 ec 04             	sub    $0x4,%esp
f010f17c:	68 c0 77 13 f0       	push   $0xf01377c0
f010f181:	68 88 02 00 00       	push   $0x288
f010f186:	68 14 6c 13 f0       	push   $0xf0136c14
f010f18b:	e8 16 10 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010f190:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010f197:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f19e:	83 ec 0c             	sub    $0xc,%esp
f010f1a1:	ff 75 f0             	pushl  -0x10(%ebp)
f010f1a4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f1a7:	50                   	push   %eax
f010f1a8:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f1ab:	50                   	push   %eax
f010f1ac:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f1af:	50                   	push   %eax
f010f1b0:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f1b5:	e8 bb 0a 00 00       	call   f010fc75 <check_list_data>
f010f1ba:	83 c4 20             	add    $0x20,%esp
f010f1bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f1c0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f1c4:	74 17                	je     f010f1dd <test_insert_sorted_with_merge_freeList+0x14c>
f010f1c6:	83 ec 04             	sub    $0x4,%esp
f010f1c9:	68 2c 78 13 f0       	push   $0xf013782c
f010f1ce:	68 8e 02 00 00       	push   $0x28e
f010f1d3:	68 14 6c 13 f0       	push   $0xf0136c14
f010f1d8:	e8 c9 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f1dd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f1e0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1e3:	74 17                	je     f010f1fc <test_insert_sorted_with_merge_freeList+0x16b>
f010f1e5:	83 ec 04             	sub    $0x4,%esp
f010f1e8:	68 80 78 13 f0       	push   $0xf0137880
f010f1ed:	68 8f 02 00 00       	push   $0x28f
f010f1f2:	68 14 6c 13 f0       	push   $0xf0136c14
f010f1f7:	e8 aa 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010f1fc:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010f203:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f206:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010f20d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010f20e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f211:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010f218:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f219:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f21c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f220:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010f226:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f229:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f22d:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010f230:	83 ec 0c             	sub    $0xc,%esp
f010f233:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010f239:	50                   	push   %eax
f010f23a:	e8 07 27 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f23f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010f242:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f247:	85 c0                	test   %eax,%eax
f010f249:	75 14                	jne    f010f25f <test_insert_sorted_with_merge_freeList+0x1ce>
f010f24b:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f250:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f253:	75 0a                	jne    f010f25f <test_insert_sorted_with_merge_freeList+0x1ce>
f010f255:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f25a:	83 f8 02             	cmp    $0x2,%eax
f010f25d:	74 17                	je     f010f276 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f25f:	83 ec 04             	sub    $0x4,%esp
f010f262:	68 c0 77 13 f0       	push   $0xf01377c0
f010f267:	68 9e 02 00 00       	push   $0x29e
f010f26c:	68 14 6c 13 f0       	push   $0xf0136c14
f010f271:	e8 30 0f ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f276:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010f27d:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f284:	83 ec 0c             	sub    $0xc,%esp
f010f287:	ff 75 f0             	pushl  -0x10(%ebp)
f010f28a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f28d:	50                   	push   %eax
f010f28e:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f291:	50                   	push   %eax
f010f292:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f295:	50                   	push   %eax
f010f296:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f29b:	e8 d5 09 00 00       	call   f010fc75 <check_list_data>
f010f2a0:	83 c4 20             	add    $0x20,%esp
f010f2a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f2a6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f2aa:	74 17                	je     f010f2c3 <test_insert_sorted_with_merge_freeList+0x232>
f010f2ac:	83 ec 04             	sub    $0x4,%esp
f010f2af:	68 2c 78 13 f0       	push   $0xf013782c
f010f2b4:	68 a4 02 00 00       	push   $0x2a4
f010f2b9:	68 14 6c 13 f0       	push   $0xf0136c14
f010f2be:	e8 e3 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f2c3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f2c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f2c9:	74 17                	je     f010f2e2 <test_insert_sorted_with_merge_freeList+0x251>
f010f2cb:	83 ec 04             	sub    $0x4,%esp
f010f2ce:	68 80 78 13 f0       	push   $0xf0137880
f010f2d3:	68 a5 02 00 00       	push   $0x2a5
f010f2d8:	68 14 6c 13 f0       	push   $0xf0136c14
f010f2dd:	e8 c4 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010f2e2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010f2e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2ec:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010f2f3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f2f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2f7:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f2fe:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f2ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f302:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f306:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010f30c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f30f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f313:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010f319:	83 ec 0c             	sub    $0xc,%esp
f010f31c:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010f322:	50                   	push   %eax
f010f323:	e8 1e 26 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f328:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010f32b:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f330:	85 c0                	test   %eax,%eax
f010f332:	75 14                	jne    f010f348 <test_insert_sorted_with_merge_freeList+0x2b7>
f010f334:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f339:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f33c:	75 0a                	jne    f010f348 <test_insert_sorted_with_merge_freeList+0x2b7>
f010f33e:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f343:	83 f8 03             	cmp    $0x3,%eax
f010f346:	74 17                	je     f010f35f <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f348:	83 ec 04             	sub    $0x4,%esp
f010f34b:	68 c0 77 13 f0       	push   $0xf01377c0
f010f350:	68 b4 02 00 00       	push   $0x2b4
f010f355:	68 14 6c 13 f0       	push   $0xf0136c14
f010f35a:	e8 47 0e ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f35f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010f366:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f36d:	83 ec 0c             	sub    $0xc,%esp
f010f370:	ff 75 f0             	pushl  -0x10(%ebp)
f010f373:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f376:	50                   	push   %eax
f010f377:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f37a:	50                   	push   %eax
f010f37b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f37e:	50                   	push   %eax
f010f37f:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f384:	e8 ec 08 00 00       	call   f010fc75 <check_list_data>
f010f389:	83 c4 20             	add    $0x20,%esp
f010f38c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f38f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f393:	74 17                	je     f010f3ac <test_insert_sorted_with_merge_freeList+0x31b>
f010f395:	83 ec 04             	sub    $0x4,%esp
f010f398:	68 2c 78 13 f0       	push   $0xf013782c
f010f39d:	68 ba 02 00 00       	push   $0x2ba
f010f3a2:	68 14 6c 13 f0       	push   $0xf0136c14
f010f3a7:	e8 fa 0d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f3ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f3af:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f3b2:	74 17                	je     f010f3cb <test_insert_sorted_with_merge_freeList+0x33a>
f010f3b4:	83 ec 04             	sub    $0x4,%esp
f010f3b7:	68 80 78 13 f0       	push   $0xf0137880
f010f3bc:	68 bb 02 00 00       	push   $0x2bb
f010f3c1:	68 14 6c 13 f0       	push   $0xf0136c14
f010f3c6:	e8 db 0d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010f3cb:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010f3d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3d5:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010f3dc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f3dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3e0:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f3e7:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f3e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3eb:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f3ef:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010f3f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3f8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f3fc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010f402:	83 ec 0c             	sub    $0xc,%esp
f010f405:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010f40b:	50                   	push   %eax
f010f40c:	e8 35 25 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f411:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f414:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f419:	85 c0                	test   %eax,%eax
f010f41b:	75 14                	jne    f010f431 <test_insert_sorted_with_merge_freeList+0x3a0>
f010f41d:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f422:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f425:	75 0a                	jne    f010f431 <test_insert_sorted_with_merge_freeList+0x3a0>
f010f427:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f42c:	83 f8 04             	cmp    $0x4,%eax
f010f42f:	74 17                	je     f010f448 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f431:	83 ec 04             	sub    $0x4,%esp
f010f434:	68 c0 77 13 f0       	push   $0xf01377c0
f010f439:	68 ca 02 00 00       	push   $0x2ca
f010f43e:	68 14 6c 13 f0       	push   $0xf0136c14
f010f443:	e8 5e 0d ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f448:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f44f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f456:	83 ec 0c             	sub    $0xc,%esp
f010f459:	ff 75 f0             	pushl  -0x10(%ebp)
f010f45c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f45f:	50                   	push   %eax
f010f460:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f463:	50                   	push   %eax
f010f464:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f467:	50                   	push   %eax
f010f468:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f46d:	e8 03 08 00 00       	call   f010fc75 <check_list_data>
f010f472:	83 c4 20             	add    $0x20,%esp
f010f475:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f478:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f47c:	74 17                	je     f010f495 <test_insert_sorted_with_merge_freeList+0x404>
f010f47e:	83 ec 04             	sub    $0x4,%esp
f010f481:	68 2c 78 13 f0       	push   $0xf013782c
f010f486:	68 d0 02 00 00       	push   $0x2d0
f010f48b:	68 14 6c 13 f0       	push   $0xf0136c14
f010f490:	e8 11 0d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f495:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f498:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f49b:	74 17                	je     f010f4b4 <test_insert_sorted_with_merge_freeList+0x423>
f010f49d:	83 ec 04             	sub    $0x4,%esp
f010f4a0:	68 80 78 13 f0       	push   $0xf0137880
f010f4a5:	68 d1 02 00 00       	push   $0x2d1
f010f4aa:	68 14 6c 13 f0       	push   $0xf0136c14
f010f4af:	e8 f2 0c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010f4b4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010f4bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4be:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010f4c5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010f4c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4c9:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010f4d0:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f4d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4d4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f4d8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010f4de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4e1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f4e5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010f4eb:	83 ec 0c             	sub    $0xc,%esp
f010f4ee:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010f4f4:	50                   	push   %eax
f010f4f5:	e8 4c 24 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f4fa:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f4fd:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f502:	85 c0                	test   %eax,%eax
f010f504:	75 17                	jne    f010f51d <test_insert_sorted_with_merge_freeList+0x48c>
f010f506:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f50b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f50e:	42                   	inc    %edx
f010f50f:	39 d0                	cmp    %edx,%eax
f010f511:	75 0a                	jne    f010f51d <test_insert_sorted_with_merge_freeList+0x48c>
f010f513:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f518:	83 f8 04             	cmp    $0x4,%eax
f010f51b:	74 17                	je     f010f534 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f51d:	83 ec 04             	sub    $0x4,%esp
f010f520:	68 c0 77 13 f0       	push   $0xf01377c0
f010f525:	68 e3 02 00 00       	push   $0x2e3
f010f52a:	68 14 6c 13 f0       	push   $0xf0136c14
f010f52f:	e8 72 0c ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f534:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f53b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f542:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f545:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f548:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f54b:	48                   	dec    %eax
f010f54c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f550:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f553:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f557:	01 c8                	add    %ecx,%eax
f010f559:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f55d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f560:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f567:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f568:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f56b:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f572:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f573:	83 ec 0c             	sub    $0xc,%esp
f010f576:	ff 75 f0             	pushl  -0x10(%ebp)
f010f579:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f57c:	50                   	push   %eax
f010f57d:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f580:	50                   	push   %eax
f010f581:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f584:	50                   	push   %eax
f010f585:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f58a:	e8 e6 06 00 00       	call   f010fc75 <check_list_data>
f010f58f:	83 c4 20             	add    $0x20,%esp
f010f592:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f595:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f599:	74 17                	je     f010f5b2 <test_insert_sorted_with_merge_freeList+0x521>
f010f59b:	83 ec 04             	sub    $0x4,%esp
f010f59e:	68 2c 78 13 f0       	push   $0xf013782c
f010f5a3:	68 ec 02 00 00       	push   $0x2ec
f010f5a8:	68 14 6c 13 f0       	push   $0xf0136c14
f010f5ad:	e8 f4 0b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f5b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f5b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f5b8:	74 17                	je     f010f5d1 <test_insert_sorted_with_merge_freeList+0x540>
f010f5ba:	83 ec 04             	sub    $0x4,%esp
f010f5bd:	68 80 78 13 f0       	push   $0xf0137880
f010f5c2:	68 ed 02 00 00       	push   $0x2ed
f010f5c7:	68 14 6c 13 f0       	push   $0xf0136c14
f010f5cc:	e8 d5 0b ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f5d1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f5d8:	83 ec 0c             	sub    $0xc,%esp
f010f5db:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f5de:	50                   	push   %eax
f010f5df:	e8 5d 07 00 00       	call   f010fd41 <check_avaliable_list_data>
f010f5e4:	83 c4 10             	add    $0x10,%esp
f010f5e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f5ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f5ed:	8d 50 01             	lea    0x1(%eax),%edx
f010f5f0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f5f3:	39 c2                	cmp    %eax,%edx
f010f5f5:	74 17                	je     f010f60e <test_insert_sorted_with_merge_freeList+0x57d>
f010f5f7:	83 ec 04             	sub    $0x4,%esp
f010f5fa:	68 d4 78 13 f0       	push   $0xf01378d4
f010f5ff:	68 f2 02 00 00       	push   $0x2f2
f010f604:	68 14 6c 13 f0       	push   $0xf0136c14
f010f609:	e8 98 0b ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f60e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f612:	74 17                	je     f010f62b <test_insert_sorted_with_merge_freeList+0x59a>
f010f614:	83 ec 04             	sub    $0x4,%esp
f010f617:	68 2c 79 13 f0       	push   $0xf013792c
f010f61c:	68 f3 02 00 00       	push   $0x2f3
f010f621:	68 14 6c 13 f0       	push   $0xf0136c14
f010f626:	e8 7b 0b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010f62b:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010f632:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f635:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010f63c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f63d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f640:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f647:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f648:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f64b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f64f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010f655:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f658:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f65c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010f662:	83 ec 0c             	sub    $0xc,%esp
f010f665:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010f66b:	50                   	push   %eax
f010f66c:	e8 d5 22 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f671:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f674:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f679:	85 c0                	test   %eax,%eax
f010f67b:	75 19                	jne    f010f696 <test_insert_sorted_with_merge_freeList+0x605>
f010f67d:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f682:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f685:	83 c2 02             	add    $0x2,%edx
f010f688:	39 d0                	cmp    %edx,%eax
f010f68a:	75 0a                	jne    f010f696 <test_insert_sorted_with_merge_freeList+0x605>
f010f68c:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f691:	83 f8 04             	cmp    $0x4,%eax
f010f694:	74 17                	je     f010f6ad <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f696:	83 ec 04             	sub    $0x4,%esp
f010f699:	68 c0 77 13 f0       	push   $0xf01377c0
f010f69e:	68 05 03 00 00       	push   $0x305
f010f6a3:	68 14 6c 13 f0       	push   $0xf0136c14
f010f6a8:	e8 f9 0a ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f6ad:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f6b4:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f6bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6be:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f6c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6c4:	48                   	dec    %eax
f010f6c5:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f6c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6cc:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f6d0:	01 c8                	add    %ecx,%eax
f010f6d2:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f6d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6d9:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f6e0:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f6e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6e4:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f6eb:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f6ec:	83 ec 0c             	sub    $0xc,%esp
f010f6ef:	ff 75 f0             	pushl  -0x10(%ebp)
f010f6f2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f6f5:	50                   	push   %eax
f010f6f6:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f6f9:	50                   	push   %eax
f010f6fa:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f6fd:	50                   	push   %eax
f010f6fe:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f703:	e8 6d 05 00 00       	call   f010fc75 <check_list_data>
f010f708:	83 c4 20             	add    $0x20,%esp
f010f70b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f70e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f712:	74 17                	je     f010f72b <test_insert_sorted_with_merge_freeList+0x69a>
f010f714:	83 ec 04             	sub    $0x4,%esp
f010f717:	68 2c 78 13 f0       	push   $0xf013782c
f010f71c:	68 0e 03 00 00       	push   $0x30e
f010f721:	68 14 6c 13 f0       	push   $0xf0136c14
f010f726:	e8 7b 0a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f72b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f72e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f731:	74 17                	je     f010f74a <test_insert_sorted_with_merge_freeList+0x6b9>
f010f733:	83 ec 04             	sub    $0x4,%esp
f010f736:	68 80 78 13 f0       	push   $0xf0137880
f010f73b:	68 0f 03 00 00       	push   $0x30f
f010f740:	68 14 6c 13 f0       	push   $0xf0136c14
f010f745:	e8 5c 0a ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f74a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f751:	83 ec 0c             	sub    $0xc,%esp
f010f754:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f757:	50                   	push   %eax
f010f758:	e8 e4 05 00 00       	call   f010fd41 <check_avaliable_list_data>
f010f75d:	83 c4 10             	add    $0x10,%esp
f010f760:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f763:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f766:	8d 50 02             	lea    0x2(%eax),%edx
f010f769:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f76c:	39 c2                	cmp    %eax,%edx
f010f76e:	74 17                	je     f010f787 <test_insert_sorted_with_merge_freeList+0x6f6>
f010f770:	83 ec 04             	sub    $0x4,%esp
f010f773:	68 d4 78 13 f0       	push   $0xf01378d4
f010f778:	68 14 03 00 00       	push   $0x314
f010f77d:	68 14 6c 13 f0       	push   $0xf0136c14
f010f782:	e8 1f 0a ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f787:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f78b:	74 17                	je     f010f7a4 <test_insert_sorted_with_merge_freeList+0x713>
f010f78d:	83 ec 04             	sub    $0x4,%esp
f010f790:	68 2c 79 13 f0       	push   $0xf013792c
f010f795:	68 15 03 00 00       	push   $0x315
f010f79a:	68 14 6c 13 f0       	push   $0xf0136c14
f010f79f:	e8 02 0a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010f7a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f7ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7ae:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f7b5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f7b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7b9:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f7c0:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f7c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7c4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f7c8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010f7ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7d1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f7d5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010f7db:	83 ec 0c             	sub    $0xc,%esp
f010f7de:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010f7e4:	50                   	push   %eax
f010f7e5:	e8 5c 21 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f7ea:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f7ed:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f7f2:	85 c0                	test   %eax,%eax
f010f7f4:	75 19                	jne    f010f80f <test_insert_sorted_with_merge_freeList+0x77e>
f010f7f6:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f7fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f7fe:	83 c2 03             	add    $0x3,%edx
f010f801:	39 d0                	cmp    %edx,%eax
f010f803:	75 0a                	jne    f010f80f <test_insert_sorted_with_merge_freeList+0x77e>
f010f805:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f80a:	83 f8 04             	cmp    $0x4,%eax
f010f80d:	74 17                	je     f010f826 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f80f:	83 ec 04             	sub    $0x4,%esp
f010f812:	68 c0 77 13 f0       	push   $0xf01377c0
f010f817:	68 28 03 00 00       	push   $0x328
f010f81c:	68 14 6c 13 f0       	push   $0xf0136c14
f010f821:	e8 80 09 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f826:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f82d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010f834:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f837:	8d 50 01             	lea    0x1(%eax),%edx
f010f83a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f83d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f841:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010f845:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f848:	8d 50 01             	lea    0x1(%eax),%edx
f010f84b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f84e:	40                   	inc    %eax
f010f84f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f853:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f856:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f85a:	01 c8                	add    %ecx,%eax
f010f85c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f860:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f863:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f86a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f86b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f86e:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f875:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f876:	83 ec 0c             	sub    $0xc,%esp
f010f879:	ff 75 f0             	pushl  -0x10(%ebp)
f010f87c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f87f:	50                   	push   %eax
f010f880:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f883:	50                   	push   %eax
f010f884:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f887:	50                   	push   %eax
f010f888:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f88d:	e8 e3 03 00 00       	call   f010fc75 <check_list_data>
f010f892:	83 c4 20             	add    $0x20,%esp
f010f895:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f898:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f89c:	74 17                	je     f010f8b5 <test_insert_sorted_with_merge_freeList+0x824>
f010f89e:	83 ec 04             	sub    $0x4,%esp
f010f8a1:	68 2c 78 13 f0       	push   $0xf013782c
f010f8a6:	68 32 03 00 00       	push   $0x332
f010f8ab:	68 14 6c 13 f0       	push   $0xf0136c14
f010f8b0:	e8 f1 08 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f8b5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f8bb:	74 17                	je     f010f8d4 <test_insert_sorted_with_merge_freeList+0x843>
f010f8bd:	83 ec 04             	sub    $0x4,%esp
f010f8c0:	68 80 78 13 f0       	push   $0xf0137880
f010f8c5:	68 33 03 00 00       	push   $0x333
f010f8ca:	68 14 6c 13 f0       	push   $0xf0136c14
f010f8cf:	e8 d2 08 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f8d4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f8db:	83 ec 0c             	sub    $0xc,%esp
f010f8de:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8e1:	50                   	push   %eax
f010f8e2:	e8 5a 04 00 00       	call   f010fd41 <check_avaliable_list_data>
f010f8e7:	83 c4 10             	add    $0x10,%esp
f010f8ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f8ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f8f0:	8d 50 03             	lea    0x3(%eax),%edx
f010f8f3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8f6:	39 c2                	cmp    %eax,%edx
f010f8f8:	74 17                	je     f010f911 <test_insert_sorted_with_merge_freeList+0x880>
f010f8fa:	83 ec 04             	sub    $0x4,%esp
f010f8fd:	68 d4 78 13 f0       	push   $0xf01378d4
f010f902:	68 38 03 00 00       	push   $0x338
f010f907:	68 14 6c 13 f0       	push   $0xf0136c14
f010f90c:	e8 95 08 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f911:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f915:	74 17                	je     f010f92e <test_insert_sorted_with_merge_freeList+0x89d>
f010f917:	83 ec 04             	sub    $0x4,%esp
f010f91a:	68 2c 79 13 f0       	push   $0xf013792c
f010f91f:	68 39 03 00 00       	push   $0x339
f010f924:	68 14 6c 13 f0       	push   $0xf0136c14
f010f929:	e8 78 08 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f010f92e:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f010f935:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f938:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f010f93f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f940:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f943:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f94a:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f94b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f94e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f952:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f010f958:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f95b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f95f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f010f965:	83 ec 0c             	sub    $0xc,%esp
f010f968:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f96e:	50                   	push   %eax
f010f96f:	e8 d2 1f 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010f974:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f977:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f97c:	85 c0                	test   %eax,%eax
f010f97e:	75 19                	jne    f010f999 <test_insert_sorted_with_merge_freeList+0x908>
f010f980:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f985:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f988:	83 c2 04             	add    $0x4,%edx
f010f98b:	39 d0                	cmp    %edx,%eax
f010f98d:	75 0a                	jne    f010f999 <test_insert_sorted_with_merge_freeList+0x908>
f010f98f:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f994:	83 f8 04             	cmp    $0x4,%eax
f010f997:	74 17                	je     f010f9b0 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f999:	83 ec 04             	sub    $0x4,%esp
f010f99c:	68 c0 77 13 f0       	push   $0xf01377c0
f010f9a1:	68 4c 03 00 00       	push   $0x34c
f010f9a6:	68 14 6c 13 f0       	push   $0xf0136c14
f010f9ab:	e8 f6 07 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f9b0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f9b7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010f9be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9c1:	8d 50 01             	lea    0x1(%eax),%edx
f010f9c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9c7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f9cb:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010f9cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9d2:	8d 50 01             	lea    0x1(%eax),%edx
f010f9d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9d8:	40                   	inc    %eax
f010f9d9:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f9dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9e0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f9e4:	01 c8                	add    %ecx,%eax
f010f9e6:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f9ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9ed:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f9f4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f9f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9f8:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f9ff:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fa00:	83 ec 0c             	sub    $0xc,%esp
f010fa03:	ff 75 f0             	pushl  -0x10(%ebp)
f010fa06:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa09:	50                   	push   %eax
f010fa0a:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fa0d:	50                   	push   %eax
f010fa0e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fa11:	50                   	push   %eax
f010fa12:	68 c0 74 6e f0       	push   $0xf06e74c0
f010fa17:	e8 59 02 00 00       	call   f010fc75 <check_list_data>
f010fa1c:	83 c4 20             	add    $0x20,%esp
f010fa1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fa22:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa26:	74 17                	je     f010fa3f <test_insert_sorted_with_merge_freeList+0x9ae>
f010fa28:	83 ec 04             	sub    $0x4,%esp
f010fa2b:	68 2c 78 13 f0       	push   $0xf013782c
f010fa30:	68 56 03 00 00       	push   $0x356
f010fa35:	68 14 6c 13 f0       	push   $0xf0136c14
f010fa3a:	e8 67 07 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fa3f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fa45:	74 17                	je     f010fa5e <test_insert_sorted_with_merge_freeList+0x9cd>
f010fa47:	83 ec 04             	sub    $0x4,%esp
f010fa4a:	68 80 78 13 f0       	push   $0xf0137880
f010fa4f:	68 57 03 00 00       	push   $0x357
f010fa54:	68 14 6c 13 f0       	push   $0xf0136c14
f010fa59:	e8 48 07 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fa5e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fa65:	83 ec 0c             	sub    $0xc,%esp
f010fa68:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa6b:	50                   	push   %eax
f010fa6c:	e8 d0 02 00 00       	call   f010fd41 <check_avaliable_list_data>
f010fa71:	83 c4 10             	add    $0x10,%esp
f010fa74:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fa77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa7a:	8d 50 04             	lea    0x4(%eax),%edx
f010fa7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa80:	39 c2                	cmp    %eax,%edx
f010fa82:	74 17                	je     f010fa9b <test_insert_sorted_with_merge_freeList+0xa0a>
f010fa84:	83 ec 04             	sub    $0x4,%esp
f010fa87:	68 d4 78 13 f0       	push   $0xf01378d4
f010fa8c:	68 5c 03 00 00       	push   $0x35c
f010fa91:	68 14 6c 13 f0       	push   $0xf0136c14
f010fa96:	e8 0b 07 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fa9b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa9f:	74 17                	je     f010fab8 <test_insert_sorted_with_merge_freeList+0xa27>
f010faa1:	83 ec 04             	sub    $0x4,%esp
f010faa4:	68 2c 79 13 f0       	push   $0xf013792c
f010faa9:	68 5d 03 00 00       	push   $0x35d
f010faae:	68 14 6c 13 f0       	push   $0xf0136c14
f010fab3:	e8 ee 06 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f010fab8:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f010fabf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fac2:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f010fac9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f010faca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010facd:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f010fad4:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fad5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fad8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fadc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f010fae2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fae5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fae9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f010faef:	83 ec 0c             	sub    $0xc,%esp
f010faf2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f010faf8:	50                   	push   %eax
f010faf9:	e8 48 1e 02 00       	call   f0131946 <insert_sorted_with_merge_freeList>
f010fafe:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010fb01:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010fb06:	85 c0                	test   %eax,%eax
f010fb08:	75 19                	jne    f010fb23 <test_insert_sorted_with_merge_freeList+0xa92>
f010fb0a:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010fb0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fb12:	83 c2 06             	add    $0x6,%edx
f010fb15:	39 d0                	cmp    %edx,%eax
f010fb17:	75 0a                	jne    f010fb23 <test_insert_sorted_with_merge_freeList+0xa92>
f010fb19:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010fb1e:	83 f8 03             	cmp    $0x3,%eax
f010fb21:	74 17                	je     f010fb3a <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb23:	83 ec 04             	sub    $0x4,%esp
f010fb26:	68 c0 77 13 f0       	push   $0xf01377c0
f010fb2b:	68 70 03 00 00       	push   $0x370
f010fb30:	68 14 6c 13 f0       	push   $0xf0136c14
f010fb35:	e8 6c 06 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fb3a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010fb41:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f010fb48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb4b:	48                   	dec    %eax
f010fb4c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb53:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f010fb54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb57:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fb5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb5d:	48                   	dec    %eax
f010fb5e:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fb62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb65:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb69:	01 c1                	add    %eax,%ecx
f010fb6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb6e:	40                   	inc    %eax
f010fb6f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb73:	01 c8                	add    %ecx,%eax
f010fb75:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fb79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb7c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb83:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fb84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb87:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fb8e:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f010fb8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb92:	40                   	inc    %eax
f010fb93:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb9a:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f010fb9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb9e:	40                   	inc    %eax
f010fb9f:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fba6:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fba7:	83 ec 0c             	sub    $0xc,%esp
f010fbaa:	ff 75 f0             	pushl  -0x10(%ebp)
f010fbad:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbb0:	50                   	push   %eax
f010fbb1:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fbb4:	50                   	push   %eax
f010fbb5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fbb8:	50                   	push   %eax
f010fbb9:	68 c0 74 6e f0       	push   $0xf06e74c0
f010fbbe:	e8 b2 00 00 00       	call   f010fc75 <check_list_data>
f010fbc3:	83 c4 20             	add    $0x20,%esp
f010fbc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fbc9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fbcd:	74 17                	je     f010fbe6 <test_insert_sorted_with_merge_freeList+0xb55>
f010fbcf:	83 ec 04             	sub    $0x4,%esp
f010fbd2:	68 2c 78 13 f0       	push   $0xf013782c
f010fbd7:	68 7c 03 00 00       	push   $0x37c
f010fbdc:	68 14 6c 13 f0       	push   $0xf0136c14
f010fbe1:	e8 c0 05 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fbe6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbe9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fbec:	74 17                	je     f010fc05 <test_insert_sorted_with_merge_freeList+0xb74>
f010fbee:	83 ec 04             	sub    $0x4,%esp
f010fbf1:	68 80 78 13 f0       	push   $0xf0137880
f010fbf6:	68 7d 03 00 00       	push   $0x37d
f010fbfb:	68 14 6c 13 f0       	push   $0xf0136c14
f010fc00:	e8 a1 05 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fc05:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fc0c:	83 ec 0c             	sub    $0xc,%esp
f010fc0f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fc12:	50                   	push   %eax
f010fc13:	e8 29 01 00 00       	call   f010fd41 <check_avaliable_list_data>
f010fc18:	83 c4 10             	add    $0x10,%esp
f010fc1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fc1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fc21:	8d 50 06             	lea    0x6(%eax),%edx
f010fc24:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fc27:	39 c2                	cmp    %eax,%edx
f010fc29:	74 17                	je     f010fc42 <test_insert_sorted_with_merge_freeList+0xbb1>
f010fc2b:	83 ec 04             	sub    $0x4,%esp
f010fc2e:	68 d4 78 13 f0       	push   $0xf01378d4
f010fc33:	68 82 03 00 00       	push   $0x382
f010fc38:	68 14 6c 13 f0       	push   $0xf0136c14
f010fc3d:	e8 64 05 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fc42:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fc46:	74 17                	je     f010fc5f <test_insert_sorted_with_merge_freeList+0xbce>
f010fc48:	83 ec 04             	sub    $0x4,%esp
f010fc4b:	68 2c 79 13 f0       	push   $0xf013792c
f010fc50:	68 83 03 00 00       	push   $0x383
f010fc55:	68 14 6c 13 f0       	push   $0xf0136c14
f010fc5a:	e8 47 05 ff ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f010fc5f:	83 ec 0c             	sub    $0xc,%esp
f010fc62:	68 88 79 13 f0       	push   $0xf0137988
f010fc67:	e8 c1 0f ff ff       	call   f0100c2d <cprintf>
f010fc6c:	83 c4 10             	add    $0x10,%esp

}
f010fc6f:	90                   	nop
f010fc70:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010fc73:	c9                   	leave  
f010fc74:	c3                   	ret    

f010fc75 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f010fc75:	55                   	push   %ebp
f010fc76:	89 e5                	mov    %esp,%ebp
f010fc78:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010fc7b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010fc82:	8b 45 14             	mov    0x14(%ebp),%eax
f010fc85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f010fc8b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f010fc92:	8b 45 08             	mov    0x8(%ebp),%eax
f010fc95:	8b 00                	mov    (%eax),%eax
f010fc97:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fc9a:	eb 6e                	jmp    f010fd0a <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f010fc9c:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f010fc9f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010fca2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fca9:	8b 45 10             	mov    0x10(%ebp),%eax
f010fcac:	01 d0                	add    %edx,%eax
f010fcae:	8b 00                	mov    (%eax),%eax
f010fcb0:	85 c0                	test   %eax,%eax
f010fcb2:	74 e8                	je     f010fc9c <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f010fcb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fcb7:	8b 50 08             	mov    0x8(%eax),%edx
f010fcba:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010fcbd:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010fcc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010fcc7:	01 c8                	add    %ecx,%eax
f010fcc9:	8b 00                	mov    (%eax),%eax
f010fccb:	39 c2                	cmp    %eax,%edx
f010fccd:	75 1b                	jne    f010fcea <check_list_data+0x75>
f010fccf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fcd2:	8b 50 0c             	mov    0xc(%eax),%edx
f010fcd5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010fcd8:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010fcdf:	8b 45 10             	mov    0x10(%ebp),%eax
f010fce2:	01 c8                	add    %ecx,%eax
f010fce4:	8b 00                	mov    (%eax),%eax
f010fce6:	39 c2                	cmp    %eax,%edx
f010fce8:	74 07                	je     f010fcf1 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f010fcea:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcef:	eb 4e                	jmp    f010fd3f <check_list_data+0xca>
		}
		(*size)++;
f010fcf1:	8b 45 14             	mov    0x14(%ebp),%eax
f010fcf4:	8b 00                	mov    (%eax),%eax
f010fcf6:	8d 50 01             	lea    0x1(%eax),%edx
f010fcf9:	8b 45 14             	mov    0x14(%ebp),%eax
f010fcfc:	89 10                	mov    %edx,(%eax)
		i++;
f010fcfe:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f010fd01:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd04:	8b 40 08             	mov    0x8(%eax),%eax
f010fd07:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fd0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fd0e:	74 07                	je     f010fd17 <check_list_data+0xa2>
f010fd10:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd13:	8b 00                	mov    (%eax),%eax
f010fd15:	eb 05                	jmp    f010fd1c <check_list_data+0xa7>
f010fd17:	b8 00 00 00 00       	mov    $0x0,%eax
f010fd1c:	8b 55 08             	mov    0x8(%ebp),%edx
f010fd1f:	89 42 08             	mov    %eax,0x8(%edx)
f010fd22:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd25:	8b 40 08             	mov    0x8(%eax),%eax
f010fd28:	85 c0                	test   %eax,%eax
f010fd2a:	0f 85 6f ff ff ff    	jne    f010fc9f <check_list_data+0x2a>
f010fd30:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fd34:	0f 85 65 ff ff ff    	jne    f010fc9f <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f010fd3a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fd3f:	c9                   	leave  
f010fd40:	c3                   	ret    

f010fd41 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f010fd41:	55                   	push   %ebp
f010fd42:	89 e5                	mov    %esp,%ebp
f010fd44:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010fd47:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010fd4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd51:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f010fd57:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f010fd5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fd5f:	eb 30                	jmp    f010fd91 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f010fd61:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd64:	8b 40 08             	mov    0x8(%eax),%eax
f010fd67:	85 c0                	test   %eax,%eax
f010fd69:	75 0a                	jne    f010fd75 <check_avaliable_list_data+0x34>
f010fd6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd6e:	8b 40 0c             	mov    0xc(%eax),%eax
f010fd71:	85 c0                	test   %eax,%eax
f010fd73:	74 07                	je     f010fd7c <check_avaliable_list_data+0x3b>
		{
			return 0;
f010fd75:	b8 00 00 00 00       	mov    $0x0,%eax
f010fd7a:	eb 40                	jmp    f010fdbc <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f010fd7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd7f:	8b 00                	mov    (%eax),%eax
f010fd81:	8d 50 01             	lea    0x1(%eax),%edx
f010fd84:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd87:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f010fd89:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010fd8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fd91:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fd95:	74 07                	je     f010fd9e <check_avaliable_list_data+0x5d>
f010fd97:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd9a:	8b 00                	mov    (%eax),%eax
f010fd9c:	eb 05                	jmp    f010fda3 <check_avaliable_list_data+0x62>
f010fd9e:	b8 00 00 00 00       	mov    $0x0,%eax
f010fda3:	a3 fc 74 6e f0       	mov    %eax,0xf06e74fc
f010fda8:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010fdad:	85 c0                	test   %eax,%eax
f010fdaf:	75 b0                	jne    f010fd61 <check_avaliable_list_data+0x20>
f010fdb1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fdb5:	75 aa                	jne    f010fd61 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f010fdb7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fdbc:	c9                   	leave  
f010fdbd:	c3                   	ret    

f010fdbe <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f010fdbe:	55                   	push   %ebp
f010fdbf:	89 e5                	mov    %esp,%ebp
f010fdc1:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f010fdc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f010fdcb:	8b 45 08             	mov    0x8(%ebp),%eax
f010fdce:	8b 00                	mov    (%eax),%eax
f010fdd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010fdd3:	eb 27                	jmp    f010fdfc <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010fdd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fdd8:	8b 50 0c             	mov    0xc(%eax),%edx
f010fddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fdde:	8b 40 08             	mov    0x8(%eax),%eax
f010fde1:	83 ec 04             	sub    $0x4,%esp
f010fde4:	52                   	push   %edx
f010fde5:	50                   	push   %eax
f010fde6:	68 d8 6c 13 f0       	push   $0xf0136cd8
f010fdeb:	e8 3d 0e ff ff       	call   f0100c2d <cprintf>
f010fdf0:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f010fdf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010fdf6:	8b 40 08             	mov    0x8(%eax),%eax
f010fdf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010fdfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010fe00:	74 07                	je     f010fe09 <show_list_content+0x4b>
f010fe02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fe05:	8b 00                	mov    (%eax),%eax
f010fe07:	eb 05                	jmp    f010fe0e <show_list_content+0x50>
f010fe09:	b8 00 00 00 00       	mov    $0x0,%eax
f010fe0e:	8b 55 08             	mov    0x8(%ebp),%edx
f010fe11:	89 42 08             	mov    %eax,0x8(%edx)
f010fe14:	8b 45 08             	mov    0x8(%ebp),%eax
f010fe17:	8b 40 08             	mov    0x8(%eax),%eax
f010fe1a:	85 c0                	test   %eax,%eax
f010fe1c:	75 b7                	jne    f010fdd5 <show_list_content+0x17>
f010fe1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010fe22:	75 b1                	jne    f010fdd5 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f010fe24:	90                   	nop
f010fe25:	c9                   	leave  
f010fe26:	c3                   	ret    

f010fe27 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f010fe27:	55                   	push   %ebp
f010fe28:	89 e5                	mov    %esp,%ebp
f010fe2a:	57                   	push   %edi
f010fe2b:	56                   	push   %esi
f010fe2c:	53                   	push   %ebx
f010fe2d:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f010fe33:	83 ec 0c             	sub    $0xc,%esp
f010fe36:	68 dc 79 13 f0       	push   $0xf01379dc
f010fe3b:	e8 ed 0d ff ff       	call   f0100c2d <cprintf>
f010fe40:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f010fe43:	83 ec 0c             	sub    $0xc,%esp
f010fe46:	68 00 7a 13 f0       	push   $0xf0137a00
f010fe4b:	e8 dd 0d ff ff       	call   f0100c2d <cprintf>
f010fe50:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f010fe53:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f010fe5a:	83 ec 0c             	sub    $0xc,%esp
f010fe5d:	68 1c 7a 13 f0       	push   $0xf0137a1c
f010fe62:	e8 c6 0d ff ff       	call   f0100c2d <cprintf>
f010fe67:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f010fe6a:	8d 45 80             	lea    -0x80(%ebp),%eax
f010fe6d:	bb d6 7a 13 f0       	mov    $0xf0137ad6,%ebx
f010fe72:	ba 03 00 00 00       	mov    $0x3,%edx
f010fe77:	89 c7                	mov    %eax,%edi
f010fe79:	89 de                	mov    %ebx,%esi
f010fe7b:	89 d1                	mov    %edx,%ecx
f010fe7d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010fe7f:	8d 55 8c             	lea    -0x74(%ebp),%edx
f010fe82:	b9 16 00 00 00       	mov    $0x16,%ecx
f010fe87:	b8 00 00 00 00       	mov    $0x0,%eax
f010fe8c:	89 d7                	mov    %edx,%edi
f010fe8e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f010fe90:	83 ec 0c             	sub    $0xc,%esp
f010fe93:	8d 45 80             	lea    -0x80(%ebp),%eax
f010fe96:	50                   	push   %eax
f010fe97:	e8 f3 0d ff ff       	call   f0100c8f <execute_command>
f010fe9c:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010fe9f:	83 ec 0c             	sub    $0xc,%esp
f010fea2:	68 4a 7a 13 f0       	push   $0xf0137a4a
f010fea7:	e8 81 0d ff ff       	call   f0100c2d <cprintf>
f010feac:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f010feaf:	83 ec 0c             	sub    $0xc,%esp
f010feb2:	68 60 7a 13 f0       	push   $0xf0137a60
f010feb7:	e8 71 0d ff ff       	call   f0100c2d <cprintf>
f010febc:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f010febf:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f010fec6:	65 00 00 
f010fec9:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f010fecf:	b9 18 00 00 00       	mov    $0x18,%ecx
f010fed4:	b8 00 00 00 00       	mov    $0x0,%eax
f010fed9:	89 d7                	mov    %edx,%edi
f010fedb:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f010fedd:	83 ec 0c             	sub    $0xc,%esp
f010fee0:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f010fee6:	50                   	push   %eax
f010fee7:	e8 a3 0d ff ff       	call   f0100c8f <execute_command>
f010feec:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010feef:	83 ec 0c             	sub    $0xc,%esp
f010fef2:	68 4a 7a 13 f0       	push   $0xf0137a4a
f010fef7:	e8 31 0d ff ff       	call   f0100c2d <cprintf>
f010fefc:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f010feff:	83 ec 0c             	sub    $0xc,%esp
f010ff02:	68 88 7a 13 f0       	push   $0xf0137a88
f010ff07:	e8 21 0d ff ff       	call   f0100c2d <cprintf>
f010ff0c:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f010ff0f:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f010ff16:	75 00 00 
f010ff19:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f010ff1f:	b9 18 00 00 00       	mov    $0x18,%ecx
f010ff24:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff29:	89 d7                	mov    %edx,%edi
f010ff2b:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f010ff2d:	83 ec 0c             	sub    $0xc,%esp
f010ff30:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f010ff36:	50                   	push   %eax
f010ff37:	e8 53 0d ff ff       	call   f0100c8f <execute_command>
f010ff3c:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010ff3f:	83 ec 0c             	sub    $0xc,%esp
f010ff42:	68 4a 7a 13 f0       	push   $0xf0137a4a
f010ff47:	e8 e1 0c ff ff       	call   f0100c2d <cprintf>
f010ff4c:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f010ff4f:	83 ec 0c             	sub    $0xc,%esp
f010ff52:	68 b0 7a 13 f0       	push   $0xf0137ab0
f010ff57:	e8 d1 0c ff ff       	call   f0100c2d <cprintf>
f010ff5c:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f010ff5f:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f010ff66:	6d 6d 00 
f010ff69:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f010ff6f:	b9 18 00 00 00       	mov    $0x18,%ecx
f010ff74:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff79:	89 d7                	mov    %edx,%edi
f010ff7b:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f010ff7d:	83 ec 0c             	sub    $0xc,%esp
f010ff80:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f010ff86:	50                   	push   %eax
f010ff87:	e8 03 0d ff ff       	call   f0100c8f <execute_command>
f010ff8c:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010ff8f:	83 ec 0c             	sub    $0xc,%esp
f010ff92:	68 4a 7a 13 f0       	push   $0xf0137a4a
f010ff97:	e8 91 0c ff ff       	call   f0100c2d <cprintf>
f010ff9c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010ff9f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ffa4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ffa7:	5b                   	pop    %ebx
f010ffa8:	5e                   	pop    %esi
f010ffa9:	5f                   	pop    %edi
f010ffaa:	5d                   	pop    %ebp
f010ffab:	c3                   	ret    

f010ffac <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f010ffac:	55                   	push   %ebp
f010ffad:	89 e5                	mov    %esp,%ebp
f010ffaf:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f010ffb2:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f010ffb9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f010ffc0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010ffc7:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010ffcc:	ff 75 ec             	pushl  -0x14(%ebp)
f010ffcf:	ff 75 f0             	pushl  -0x10(%ebp)
f010ffd2:	ff 75 f4             	pushl  -0xc(%ebp)
f010ffd5:	50                   	push   %eax
f010ffd6:	e8 d1 74 ff ff       	call   f01074ac <pt_set_page_permissions>
f010ffdb:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010ffde:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010ffe3:	ff 75 ec             	pushl  -0x14(%ebp)
f010ffe6:	ff 75 f0             	pushl  -0x10(%ebp)
f010ffe9:	ff 75 f4             	pushl  -0xc(%ebp)
f010ffec:	50                   	push   %eax
f010ffed:	e8 2a 50 00 00       	call   f011501c <CP>
f010fff2:	83 c4 10             	add    $0x10,%esp
f010fff5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010fff8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fffc:	74 14                	je     f0110012 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f010fffe:	83 ec 04             	sub    $0x4,%esp
f0110001:	68 3c 7b 13 f0       	push   $0xf0137b3c
f0110006:	6a 59                	push   $0x59
f0110008:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011000d:	e8 94 01 ff ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110012:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110019:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110020:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110027:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011002c:	ff 75 ec             	pushl  -0x14(%ebp)
f011002f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110032:	ff 75 f4             	pushl  -0xc(%ebp)
f0110035:	50                   	push   %eax
f0110036:	e8 71 74 ff ff       	call   f01074ac <pt_set_page_permissions>
f011003b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011003e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110043:	ff 75 ec             	pushl  -0x14(%ebp)
f0110046:	ff 75 f0             	pushl  -0x10(%ebp)
f0110049:	ff 75 f4             	pushl  -0xc(%ebp)
f011004c:	50                   	push   %eax
f011004d:	e8 ca 4f 00 00       	call   f011501c <CP>
f0110052:	83 c4 10             	add    $0x10,%esp
f0110055:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110058:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011005c:	74 14                	je     f0110072 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f011005e:	83 ec 04             	sub    $0x4,%esp
f0110061:	68 7c 7b 13 f0       	push   $0xf0137b7c
f0110066:	6a 65                	push   $0x65
f0110068:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011006d:	e8 34 01 ff ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110072:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110079:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110080:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110087:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011008c:	ff 75 ec             	pushl  -0x14(%ebp)
f011008f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110092:	ff 75 f4             	pushl  -0xc(%ebp)
f0110095:	50                   	push   %eax
f0110096:	e8 11 74 ff ff       	call   f01074ac <pt_set_page_permissions>
f011009b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011009e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01100a3:	ff 75 ec             	pushl  -0x14(%ebp)
f01100a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01100a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01100ac:	50                   	push   %eax
f01100ad:	e8 6a 4f 00 00       	call   f011501c <CP>
f01100b2:	83 c4 10             	add    $0x10,%esp
f01100b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01100b8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01100bc:	74 14                	je     f01100d2 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01100be:	83 ec 04             	sub    $0x4,%esp
f01100c1:	68 a0 7b 13 f0       	push   $0xf0137ba0
f01100c6:	6a 70                	push   $0x70
f01100c8:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01100cd:	e8 d4 00 ff ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01100d2:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01100d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01100e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01100e7:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01100ec:	ff 75 ec             	pushl  -0x14(%ebp)
f01100ef:	ff 75 f0             	pushl  -0x10(%ebp)
f01100f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01100f5:	50                   	push   %eax
f01100f6:	e8 b1 73 ff ff       	call   f01074ac <pt_set_page_permissions>
f01100fb:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01100fe:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110103:	ff 75 ec             	pushl  -0x14(%ebp)
f0110106:	ff 75 f0             	pushl  -0x10(%ebp)
f0110109:	ff 75 f4             	pushl  -0xc(%ebp)
f011010c:	50                   	push   %eax
f011010d:	e8 0a 4f 00 00       	call   f011501c <CP>
f0110112:	83 c4 10             	add    $0x10,%esp
f0110115:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110118:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011011c:	74 14                	je     f0110132 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f011011e:	83 ec 04             	sub    $0x4,%esp
f0110121:	68 c4 7b 13 f0       	push   $0xf0137bc4
f0110126:	6a 7c                	push   $0x7c
f0110128:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011012d:	e8 74 00 ff ff       	call   f01001a6 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110132:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110139:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110140:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110147:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011014c:	ff 75 ec             	pushl  -0x14(%ebp)
f011014f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110152:	ff 75 f4             	pushl  -0xc(%ebp)
f0110155:	50                   	push   %eax
f0110156:	e8 51 73 ff ff       	call   f01074ac <pt_set_page_permissions>
f011015b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011015e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110163:	ff 75 ec             	pushl  -0x14(%ebp)
f0110166:	ff 75 f0             	pushl  -0x10(%ebp)
f0110169:	ff 75 f4             	pushl  -0xc(%ebp)
f011016c:	50                   	push   %eax
f011016d:	e8 aa 4e 00 00       	call   f011501c <CP>
f0110172:	83 c4 10             	add    $0x10,%esp
f0110175:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110178:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011017c:	74 17                	je     f0110195 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f011017e:	83 ec 04             	sub    $0x4,%esp
f0110181:	68 e8 7b 13 f0       	push   $0xf0137be8
f0110186:	68 88 00 00 00       	push   $0x88
f011018b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110190:	e8 11 00 ff ff       	call   f01001a6 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110195:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f011019c:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f01101a3:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01101aa:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01101af:	ff 75 ec             	pushl  -0x14(%ebp)
f01101b2:	ff 75 f0             	pushl  -0x10(%ebp)
f01101b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01101b8:	50                   	push   %eax
f01101b9:	e8 ee 72 ff ff       	call   f01074ac <pt_set_page_permissions>
f01101be:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01101c1:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01101c6:	ff 75 ec             	pushl  -0x14(%ebp)
f01101c9:	ff 75 f0             	pushl  -0x10(%ebp)
f01101cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01101cf:	50                   	push   %eax
f01101d0:	e8 47 4e 00 00       	call   f011501c <CP>
f01101d5:	83 c4 10             	add    $0x10,%esp
f01101d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01101db:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101df:	74 17                	je     f01101f8 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01101e1:	83 ec 04             	sub    $0x4,%esp
f01101e4:	68 0c 7c 13 f0       	push   $0xf0137c0c
f01101e9:	68 94 00 00 00       	push   $0x94
f01101ee:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01101f3:	e8 ae ff fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01101f8:	83 ec 0c             	sub    $0xc,%esp
f01101fb:	68 38 7c 13 f0       	push   $0xf0137c38
f0110200:	e8 28 0a ff ff       	call   f0100c2d <cprintf>
f0110205:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110208:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011020d:	c9                   	leave  
f011020e:	c3                   	ret    

f011020f <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f011020f:	55                   	push   %ebp
f0110210:	89 e5                	mov    %esp,%ebp
f0110212:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110215:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011021c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110223:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011022a:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011022f:	ff 75 ec             	pushl  -0x14(%ebp)
f0110232:	ff 75 f0             	pushl  -0x10(%ebp)
f0110235:	ff 75 f4             	pushl  -0xc(%ebp)
f0110238:	50                   	push   %eax
f0110239:	e8 6e 72 ff ff       	call   f01074ac <pt_set_page_permissions>
f011023e:	83 c4 10             	add    $0x10,%esp
	panic("This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110241:	83 ec 04             	sub    $0x4,%esp
f0110244:	68 88 7c 13 f0       	push   $0xf0137c88
f0110249:	68 a1 00 00 00       	push   $0xa1
f011024e:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110253:	e8 4e ff fe ff       	call   f01001a6 <_panic>

f0110258 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110258:	55                   	push   %ebp
f0110259:	89 e5                	mov    %esp,%ebp
f011025b:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f011025e:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110265:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011026a:	83 ec 08             	sub    $0x8,%esp
f011026d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110270:	50                   	push   %eax
f0110271:	e8 50 72 ff ff       	call   f01074c6 <pt_get_page_permissions>
f0110276:	83 c4 10             	add    $0x10,%esp
f0110279:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f011027c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110280:	74 17                	je     f0110299 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110282:	83 ec 04             	sub    $0x4,%esp
f0110285:	68 18 7d 13 f0       	push   $0xf0137d18
f011028a:	68 af 00 00 00       	push   $0xaf
f011028f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110294:	e8 0d ff fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110299:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01102a0:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01102a5:	83 ec 08             	sub    $0x8,%esp
f01102a8:	ff 75 f4             	pushl  -0xc(%ebp)
f01102ab:	50                   	push   %eax
f01102ac:	e8 15 72 ff ff       	call   f01074c6 <pt_get_page_permissions>
f01102b1:	83 c4 10             	add    $0x10,%esp
f01102b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01102b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01102bb:	74 17                	je     f01102d4 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01102bd:	83 ec 04             	sub    $0x4,%esp
f01102c0:	68 3c 7d 13 f0       	push   $0xf0137d3c
f01102c5:	68 b7 00 00 00       	push   $0xb7
f01102ca:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01102cf:	e8 d2 fe fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01102d4:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01102db:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01102e0:	83 ec 08             	sub    $0x8,%esp
f01102e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01102e6:	50                   	push   %eax
f01102e7:	e8 da 71 ff ff       	call   f01074c6 <pt_get_page_permissions>
f01102ec:	83 c4 10             	add    $0x10,%esp
f01102ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01102f2:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01102f6:	74 17                	je     f011030f <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01102f8:	83 ec 04             	sub    $0x4,%esp
f01102fb:	68 60 7d 13 f0       	push   $0xf0137d60
f0110300:	68 bf 00 00 00       	push   $0xbf
f0110305:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011030a:	e8 97 fe fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF1000000;
f011030f:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110316:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011031b:	83 ec 08             	sub    $0x8,%esp
f011031e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110321:	50                   	push   %eax
f0110322:	e8 9f 71 ff ff       	call   f01074c6 <pt_get_page_permissions>
f0110327:	83 c4 10             	add    $0x10,%esp
f011032a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011032d:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110331:	74 17                	je     f011034a <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110333:	83 ec 04             	sub    $0x4,%esp
f0110336:	68 84 7d 13 f0       	push   $0xf0137d84
f011033b:	68 c6 00 00 00       	push   $0xc6
f0110340:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110345:	e8 5c fe fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f011034a:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110351:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110356:	83 ec 08             	sub    $0x8,%esp
f0110359:	ff 75 f4             	pushl  -0xc(%ebp)
f011035c:	50                   	push   %eax
f011035d:	e8 64 71 ff ff       	call   f01074c6 <pt_get_page_permissions>
f0110362:	83 c4 10             	add    $0x10,%esp
f0110365:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110368:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f011036c:	74 17                	je     f0110385 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f011036e:	83 ec 04             	sub    $0x4,%esp
f0110371:	68 a8 7d 13 f0       	push   $0xf0137da8
f0110376:	68 cd 00 00 00       	push   $0xcd
f011037b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110380:	e8 21 fe fe ff       	call   f01001a6 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110385:	83 ec 0c             	sub    $0xc,%esp
f0110388:	68 cc 7d 13 f0       	push   $0xf0137dcc
f011038d:	e8 9b 08 ff ff       	call   f0100c2d <cprintf>
f0110392:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110395:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011039a:	c9                   	leave  
f011039b:	c3                   	ret    

f011039c <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f011039c:	55                   	push   %ebp
f011039d:	89 e5                	mov    %esp,%ebp
f011039f:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f01103a2:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01103a9:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01103ae:	83 ec 08             	sub    $0x8,%esp
f01103b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01103b4:	50                   	push   %eax
f01103b5:	e8 67 71 ff ff       	call   f0107521 <pt_clear_page_table_entry>
f01103ba:	83 c4 10             	add    $0x10,%esp

	int ret = CP(ptr_page_directory, va, 0, 0);
f01103bd:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01103c2:	6a 00                	push   $0x0
f01103c4:	6a 00                	push   $0x0
f01103c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01103c9:	50                   	push   %eax
f01103ca:	e8 4d 4c 00 00       	call   f011501c <CP>
f01103cf:	83 c4 10             	add    $0x10,%esp
f01103d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01103d5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01103d9:	74 17                	je     f01103f2 <test_pt_clear_page_table_entry+0x56>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01103db:	83 ec 04             	sub    $0x4,%esp
f01103de:	68 14 7e 13 f0       	push   $0xf0137e14
f01103e3:	68 de 00 00 00       	push   $0xde
f01103e8:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01103ed:	e8 b4 fd fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f01103f2:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01103f9:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01103fe:	83 ec 08             	sub    $0x8,%esp
f0110401:	ff 75 f4             	pushl  -0xc(%ebp)
f0110404:	50                   	push   %eax
f0110405:	e8 17 71 ff ff       	call   f0107521 <pt_clear_page_table_entry>
f011040a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, 0, 0);
f011040d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110412:	6a 00                	push   $0x0
f0110414:	6a 00                	push   $0x0
f0110416:	ff 75 f4             	pushl  -0xc(%ebp)
f0110419:	50                   	push   %eax
f011041a:	e8 fd 4b 00 00       	call   f011501c <CP>
f011041f:	83 c4 10             	add    $0x10,%esp
f0110422:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110425:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110429:	74 17                	je     f0110442 <test_pt_clear_page_table_entry+0xa6>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011042b:	83 ec 04             	sub    $0x4,%esp
f011042e:	68 40 7e 13 f0       	push   $0xf0137e40
f0110433:	68 e7 00 00 00       	push   $0xe7
f0110438:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011043d:	e8 64 fd fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110442:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110449:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011044e:	83 ec 08             	sub    $0x8,%esp
f0110451:	ff 75 f4             	pushl  -0xc(%ebp)
f0110454:	50                   	push   %eax
f0110455:	e8 c7 70 ff ff       	call   f0107521 <pt_clear_page_table_entry>
f011045a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, 0, 0);
f011045d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110462:	6a 00                	push   $0x0
f0110464:	6a 00                	push   $0x0
f0110466:	ff 75 f4             	pushl  -0xc(%ebp)
f0110469:	50                   	push   %eax
f011046a:	e8 ad 4b 00 00       	call   f011501c <CP>
f011046f:	83 c4 10             	add    $0x10,%esp
f0110472:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110475:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110479:	74 17                	je     f0110492 <test_pt_clear_page_table_entry+0xf6>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011047b:	83 ec 04             	sub    $0x4,%esp
f011047e:	68 6c 7e 13 f0       	push   $0xf0137e6c
f0110483:	68 f0 00 00 00       	push   $0xf0
f0110488:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011048d:	e8 14 fd fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0000000;
f0110492:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110499:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011049e:	83 ec 08             	sub    $0x8,%esp
f01104a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01104a4:	50                   	push   %eax
f01104a5:	e8 77 70 ff ff       	call   f0107521 <pt_clear_page_table_entry>
f01104aa:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, 0, 0);
f01104ad:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01104b2:	6a 00                	push   $0x0
f01104b4:	6a 00                	push   $0x0
f01104b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01104b9:	50                   	push   %eax
f01104ba:	e8 5d 4b 00 00       	call   f011501c <CP>
f01104bf:	83 c4 10             	add    $0x10,%esp
f01104c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01104c5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01104c9:	74 17                	je     f01104e2 <test_pt_clear_page_table_entry+0x146>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01104cb:	83 ec 04             	sub    $0x4,%esp
f01104ce:	68 98 7e 13 f0       	push   $0xf0137e98
f01104d3:	68 f9 00 00 00       	push   $0xf9
f01104d8:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01104dd:	e8 c4 fc fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01104e2:	83 ec 0c             	sub    $0xc,%esp
f01104e5:	68 c4 7e 13 f0       	push   $0xf0137ec4
f01104ea:	e8 3e 07 ff ff       	call   f0100c2d <cprintf>
f01104ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01104f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01104f7:	c9                   	leave  
f01104f8:	c3                   	ret    

f01104f9 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01104f9:	55                   	push   %ebp
f01104fa:	89 e5                	mov    %esp,%ebp
f01104fc:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01104ff:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110506:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011050b:	83 ec 08             	sub    $0x8,%esp
f011050e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110511:	50                   	push   %eax
f0110512:	e8 0a 70 ff ff       	call   f0107521 <pt_clear_page_table_entry>
f0110517:	83 c4 10             	add    $0x10,%esp
	panic("This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011051a:	83 ec 04             	sub    $0x4,%esp
f011051d:	68 10 7f 13 f0       	push   $0xf0137f10
f0110522:	68 04 01 00 00       	push   $0x104
f0110527:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011052c:	e8 75 fc fe ff       	call   f01001a6 <_panic>

f0110531 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0110531:	55                   	push   %ebp
f0110532:	89 e5                	mov    %esp,%ebp
f0110534:	57                   	push   %edi
f0110535:	56                   	push   %esi
f0110536:	53                   	push   %ebx
f0110537:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011053d:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0110544:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f011054b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110550:	83 ec 0c             	sub    $0xc,%esp
f0110553:	50                   	push   %eax
f0110554:	e8 20 4c 00 00       	call   f0115179 <ClearUserSpace>
f0110559:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f011055c:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0110563:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110568:	83 ec 08             	sub    $0x8,%esp
f011056b:	ff 75 dc             	pushl  -0x24(%ebp)
f011056e:	50                   	push   %eax
f011056f:	e8 c7 6f ff ff       	call   f010753b <virtual_to_physical>
f0110574:	83 c4 10             	add    $0x10,%esp
f0110577:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f011057a:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f011057e:	74 17                	je     f0110597 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0110580:	83 ec 04             	sub    $0x4,%esp
f0110583:	68 98 7f 13 f0       	push   $0xf0137f98
f0110588:	68 19 01 00 00       	push   $0x119
f011058d:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110592:	e8 0f fc fe ff       	call   f01001a6 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0110597:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011059e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01105a3:	83 ec 08             	sub    $0x8,%esp
f01105a6:	ff 75 dc             	pushl  -0x24(%ebp)
f01105a9:	50                   	push   %eax
f01105aa:	e8 8c 6f ff ff       	call   f010753b <virtual_to_physical>
f01105af:	83 c4 10             	add    $0x10,%esp
f01105b2:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01105b5:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01105ba:	83 ec 08             	sub    $0x8,%esp
f01105bd:	ff 75 dc             	pushl  -0x24(%ebp)
f01105c0:	50                   	push   %eax
f01105c1:	e8 bd 49 00 00       	call   f0114f83 <CA>
f01105c6:	83 c4 10             	add    $0x10,%esp
f01105c9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105cc:	74 17                	je     f01105e5 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f01105ce:	83 ec 04             	sub    $0x4,%esp
f01105d1:	68 d0 7f 13 f0       	push   $0xf0137fd0
f01105d6:	68 22 01 00 00       	push   $0x122
f01105db:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01105e0:	e8 c1 fb fe ff       	call   f01001a6 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01105e5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01105eb:	bb 9c 81 13 f0       	mov    $0xf013819c,%ebx
f01105f0:	ba 0d 00 00 00       	mov    $0xd,%edx
f01105f5:	89 c7                	mov    %eax,%edi
f01105f7:	89 de                	mov    %ebx,%esi
f01105f9:	89 d1                	mov    %edx,%ecx
f01105fb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01105fd:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0110600:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110605:	b0 00                	mov    $0x0,%al
f0110607:	89 d7                	mov    %edx,%edi
f0110609:	f3 aa                	rep stos %al,%es:(%edi)
f011060b:	83 ec 0c             	sub    $0xc,%esp
f011060e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110614:	50                   	push   %eax
f0110615:	e8 75 06 ff ff       	call   f0100c8f <execute_command>
f011061a:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f011061d:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110624:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110629:	83 ec 08             	sub    $0x8,%esp
f011062c:	ff 75 dc             	pushl  -0x24(%ebp)
f011062f:	50                   	push   %eax
f0110630:	e8 06 6f ff ff       	call   f010753b <virtual_to_physical>
f0110635:	83 c4 10             	add    $0x10,%esp
f0110638:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011063b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110640:	83 ec 08             	sub    $0x8,%esp
f0110643:	ff 75 dc             	pushl  -0x24(%ebp)
f0110646:	50                   	push   %eax
f0110647:	e8 37 49 00 00       	call   f0114f83 <CA>
f011064c:	83 c4 10             	add    $0x10,%esp
f011064f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110652:	74 17                	je     f011066b <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0110654:	83 ec 04             	sub    $0x4,%esp
f0110657:	68 08 80 13 f0       	push   $0xf0138008
f011065c:	68 2b 01 00 00       	push   $0x12b
f0110661:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110666:	e8 3b fb fe ff       	call   f01001a6 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f011066b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110671:	bb 00 82 13 f0       	mov    $0xf0138200,%ebx
f0110676:	ba 0d 00 00 00       	mov    $0xd,%edx
f011067b:	89 c7                	mov    %eax,%edi
f011067d:	89 de                	mov    %ebx,%esi
f011067f:	89 d1                	mov    %edx,%ecx
f0110681:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110683:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0110689:	b9 57 00 00 00       	mov    $0x57,%ecx
f011068e:	b0 00                	mov    $0x0,%al
f0110690:	89 d7                	mov    %edx,%edi
f0110692:	f3 aa                	rep stos %al,%es:(%edi)
f0110694:	83 ec 0c             	sub    $0xc,%esp
f0110697:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011069d:	50                   	push   %eax
f011069e:	e8 ec 05 ff ff       	call   f0100c8f <execute_command>
f01106a3:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f01106a6:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01106ad:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01106b2:	83 ec 08             	sub    $0x8,%esp
f01106b5:	ff 75 dc             	pushl  -0x24(%ebp)
f01106b8:	50                   	push   %eax
f01106b9:	e8 7d 6e ff ff       	call   f010753b <virtual_to_physical>
f01106be:	83 c4 10             	add    $0x10,%esp
f01106c1:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01106c4:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01106c9:	83 ec 08             	sub    $0x8,%esp
f01106cc:	ff 75 dc             	pushl  -0x24(%ebp)
f01106cf:	50                   	push   %eax
f01106d0:	e8 ae 48 00 00       	call   f0114f83 <CA>
f01106d5:	83 c4 10             	add    $0x10,%esp
f01106d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01106db:	74 17                	je     f01106f4 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01106dd:	83 ec 04             	sub    $0x4,%esp
f01106e0:	68 40 80 13 f0       	push   $0xf0138040
f01106e5:	68 34 01 00 00       	push   $0x134
f01106ea:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01106ef:	e8 b2 fa fe ff       	call   f01001a6 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01106f4:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01106fa:	bb 64 82 13 f0       	mov    $0xf0138264,%ebx
f01106ff:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110704:	89 c7                	mov    %eax,%edi
f0110706:	89 de                	mov    %ebx,%esi
f0110708:	89 d1                	mov    %edx,%ecx
f011070a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011070c:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0110712:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110717:	b0 00                	mov    $0x0,%al
f0110719:	89 d7                	mov    %edx,%edi
f011071b:	f3 aa                	rep stos %al,%es:(%edi)
f011071d:	83 ec 0c             	sub    $0xc,%esp
f0110720:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110726:	50                   	push   %eax
f0110727:	e8 63 05 ff ff       	call   f0100c8f <execute_command>
f011072c:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f011072f:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110736:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011073b:	83 ec 08             	sub    $0x8,%esp
f011073e:	ff 75 dc             	pushl  -0x24(%ebp)
f0110741:	50                   	push   %eax
f0110742:	e8 f4 6d ff ff       	call   f010753b <virtual_to_physical>
f0110747:	83 c4 10             	add    $0x10,%esp
f011074a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011074d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110752:	83 ec 08             	sub    $0x8,%esp
f0110755:	ff 75 dc             	pushl  -0x24(%ebp)
f0110758:	50                   	push   %eax
f0110759:	e8 25 48 00 00       	call   f0114f83 <CA>
f011075e:	83 c4 10             	add    $0x10,%esp
f0110761:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110764:	74 17                	je     f011077d <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0110766:	83 ec 04             	sub    $0x4,%esp
f0110769:	68 78 80 13 f0       	push   $0xf0138078
f011076e:	68 3d 01 00 00       	push   $0x13d
f0110773:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110778:	e8 29 fa fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001000;
f011077d:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110784:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110789:	83 ec 08             	sub    $0x8,%esp
f011078c:	ff 75 dc             	pushl  -0x24(%ebp)
f011078f:	50                   	push   %eax
f0110790:	e8 a6 6d ff ff       	call   f010753b <virtual_to_physical>
f0110795:	83 c4 10             	add    $0x10,%esp
f0110798:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011079b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01107a0:	83 ec 08             	sub    $0x8,%esp
f01107a3:	ff 75 dc             	pushl  -0x24(%ebp)
f01107a6:	50                   	push   %eax
f01107a7:	e8 d7 47 00 00       	call   f0114f83 <CA>
f01107ac:	83 c4 10             	add    $0x10,%esp
f01107af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01107b2:	74 17                	je     f01107cb <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f01107b4:	83 ec 04             	sub    $0x4,%esp
f01107b7:	68 b0 80 13 f0       	push   $0xf01380b0
f01107bc:	68 45 01 00 00       	push   $0x145
f01107c1:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01107c6:	e8 db f9 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001005;
f01107cb:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01107d2:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01107d7:	83 ec 08             	sub    $0x8,%esp
f01107da:	ff 75 dc             	pushl  -0x24(%ebp)
f01107dd:	50                   	push   %eax
f01107de:	e8 58 6d ff ff       	call   f010753b <virtual_to_physical>
f01107e3:	83 c4 10             	add    $0x10,%esp
f01107e6:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01107e9:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01107ee:	83 ec 08             	sub    $0x8,%esp
f01107f1:	ff 75 dc             	pushl  -0x24(%ebp)
f01107f4:	50                   	push   %eax
f01107f5:	e8 89 47 00 00       	call   f0114f83 <CA>
f01107fa:	83 c4 10             	add    $0x10,%esp
f01107fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110800:	74 17                	je     f0110819 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0110802:	83 ec 04             	sub    $0x4,%esp
f0110805:	68 e8 80 13 f0       	push   $0xf01380e8
f011080a:	68 4d 01 00 00       	push   $0x14d
f011080f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110814:	e8 8d f9 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0110819:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011081f:	bb c8 82 13 f0       	mov    $0xf01382c8,%ebx
f0110824:	ba 0e 00 00 00       	mov    $0xe,%edx
f0110829:	89 c7                	mov    %eax,%edi
f011082b:	89 de                	mov    %ebx,%esi
f011082d:	89 d1                	mov    %edx,%ecx
f011082f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110831:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0110837:	b9 56 00 00 00       	mov    $0x56,%ecx
f011083c:	b0 00                	mov    $0x0,%al
f011083e:	89 d7                	mov    %edx,%edi
f0110840:	f3 aa                	rep stos %al,%es:(%edi)
f0110842:	83 ec 0c             	sub    $0xc,%esp
f0110845:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011084b:	50                   	push   %eax
f011084c:	e8 3e 04 ff ff       	call   f0100c8f <execute_command>
f0110851:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0110854:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011085b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110860:	83 ec 08             	sub    $0x8,%esp
f0110863:	ff 75 dc             	pushl  -0x24(%ebp)
f0110866:	50                   	push   %eax
f0110867:	e8 cf 6c ff ff       	call   f010753b <virtual_to_physical>
f011086c:	83 c4 10             	add    $0x10,%esp
f011086f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110872:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110877:	83 ec 08             	sub    $0x8,%esp
f011087a:	ff 75 dc             	pushl  -0x24(%ebp)
f011087d:	50                   	push   %eax
f011087e:	e8 00 47 00 00       	call   f0114f83 <CA>
f0110883:	83 c4 10             	add    $0x10,%esp
f0110886:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110889:	74 17                	je     f01108a2 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f011088b:	83 ec 04             	sub    $0x4,%esp
f011088e:	68 20 81 13 f0       	push   $0xf0138120
f0110893:	68 56 01 00 00       	push   $0x156
f0110898:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011089d:	e8 04 f9 fe ff       	call   f01001a6 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f01108a2:	83 ec 0c             	sub    $0xc,%esp
f01108a5:	68 58 81 13 f0       	push   $0xf0138158
f01108aa:	e8 7e 03 ff ff       	call   f0100c2d <cprintf>
f01108af:	83 c4 10             	add    $0x10,%esp

	return 0;
f01108b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01108b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01108ba:	5b                   	pop    %ebx
f01108bb:	5e                   	pop    %esi
f01108bc:	5f                   	pop    %edi
f01108bd:	5d                   	pop    %ebp
f01108be:	c3                   	ret    

f01108bf <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f01108bf:	55                   	push   %ebp
f01108c0:	89 e5                	mov    %esp,%ebp
f01108c2:	57                   	push   %edi
f01108c3:	56                   	push   %esi
f01108c4:	53                   	push   %ebx
f01108c5:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01108cb:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01108d1:	bb dc 85 13 f0       	mov    $0xf01385dc,%ebx
f01108d6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01108db:	89 c7                	mov    %eax,%edi
f01108dd:	89 de                	mov    %ebx,%esi
f01108df:	89 d1                	mov    %edx,%ecx
f01108e1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01108e3:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01108e9:	b9 23 00 00 00       	mov    $0x23,%ecx
f01108ee:	b0 00                	mov    $0x0,%al
f01108f0:	89 d7                	mov    %edx,%edi
f01108f2:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01108f4:	6a 00                	push   $0x0
f01108f6:	6a 0a                	push   $0xa
f01108f8:	6a 14                	push   $0x14
f01108fa:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110900:	50                   	push   %eax
f0110901:	e8 77 77 ff ff       	call   f010807d <env_create>
f0110906:	83 c4 10             	add    $0x10,%esp
f0110909:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011090c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011090f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0110912:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0110915:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110918:	8b 40 60             	mov    0x60(%eax),%eax
f011091b:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011091e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110921:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0110924:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f011092b:	75 70 20 
f011092e:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0110935:	00 00 00 
f0110938:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011093e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110943:	b8 00 00 00 00       	mov    $0x0,%eax
f0110948:	89 d7                	mov    %edx,%edi
f011094a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011094c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011094f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110952:	83 ec 08             	sub    $0x8,%esp
f0110955:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011095b:	52                   	push   %edx
f011095c:	50                   	push   %eax
f011095d:	e8 db fb 01 00       	call   f013053d <ltostr>
f0110962:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110965:	83 ec 04             	sub    $0x4,%esp
f0110968:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011096e:	50                   	push   %eax
f011096f:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0110975:	50                   	push   %eax
f0110976:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f011097c:	50                   	push   %eax
f011097d:	e8 b3 fc 01 00       	call   f0130635 <strcconcat>
f0110982:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0110985:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011098c:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0110993:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f011099a:	83 ec 0c             	sub    $0xc,%esp
f011099d:	ff 75 d4             	pushl  -0x2c(%ebp)
f01109a0:	e8 d4 47 00 00       	call   f0115179 <ClearUserSpace>
f01109a5:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01109a8:	83 ec 04             	sub    $0x4,%esp
f01109ab:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01109b1:	50                   	push   %eax
f01109b2:	68 2c 83 13 f0       	push   $0xf013832c
f01109b7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01109bd:	50                   	push   %eax
f01109be:	e8 72 fc 01 00       	call   f0130635 <strcconcat>
f01109c3:	83 c4 10             	add    $0x10,%esp
f01109c6:	83 ec 0c             	sub    $0xc,%esp
f01109c9:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01109cf:	50                   	push   %eax
f01109d0:	e8 ba 02 ff ff       	call   f0100c8f <execute_command>
f01109d5:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01109d8:	83 ec 04             	sub    $0x4,%esp
f01109db:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01109e1:	50                   	push   %eax
f01109e2:	68 37 83 13 f0       	push   $0xf0138337
f01109e7:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01109ed:	50                   	push   %eax
f01109ee:	e8 42 fc 01 00       	call   f0130635 <strcconcat>
f01109f3:	83 c4 10             	add    $0x10,%esp
f01109f6:	83 ec 0c             	sub    $0xc,%esp
f01109f9:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01109ff:	50                   	push   %eax
f0110a00:	e8 8a 02 ff ff       	call   f0100c8f <execute_command>
f0110a05:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0110a08:	83 ec 04             	sub    $0x4,%esp
f0110a0b:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110a11:	50                   	push   %eax
f0110a12:	68 42 83 13 f0       	push   $0xf0138342
f0110a17:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110a1d:	50                   	push   %eax
f0110a1e:	e8 12 fc 01 00       	call   f0130635 <strcconcat>
f0110a23:	83 c4 10             	add    $0x10,%esp
f0110a26:	83 ec 0c             	sub    $0xc,%esp
f0110a29:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110a2f:	50                   	push   %eax
f0110a30:	e8 5a 02 ff ff       	call   f0100c8f <execute_command>
f0110a35:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0110a38:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0110a3f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a42:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0110a45:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0110a4c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a4f:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0110a52:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0110a59:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a5c:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0110a5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a62:	83 ec 08             	sub    $0x8,%esp
f0110a65:	50                   	push   %eax
f0110a66:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110a69:	e8 72 46 00 00       	call   f01150e0 <GP>
f0110a6e:	83 c4 10             	add    $0x10,%esp
f0110a71:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0110a74:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0110a7b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0110a82:	e8 43 b3 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0110a87:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0110a8a:	83 ec 0c             	sub    $0xc,%esp
f0110a8d:	68 50 83 13 f0       	push   $0xf0138350
f0110a92:	e8 96 01 ff ff       	call   f0100c2d <cprintf>
f0110a97:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0110a9a:	6a 03                	push   $0x3
f0110a9c:	68 00 00 90 02       	push   $0x2900000
f0110aa1:	68 00 00 80 02       	push   $0x2800000
f0110aa6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110aa9:	e8 7a 74 ff ff       	call   f0107f28 <cut_paste_pages>
f0110aae:	83 c4 10             	add    $0x10,%esp
f0110ab1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0110ab4:	e8 11 b3 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0110ab9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0110abc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0110ac3:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110ac7:	75 08                	jne    f0110ad1 <test_cut_paste_pages+0x212>
f0110ac9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110acc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110acf:	74 2b                	je     f0110afc <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110ad1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110ad4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110ad7:	83 ec 0c             	sub    $0xc,%esp
f0110ada:	50                   	push   %eax
f0110adb:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110ade:	68 80 83 13 f0       	push   $0xf0138380
f0110ae3:	68 94 01 00 00       	push   $0x194
f0110ae8:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110aed:	e8 40 f8 fe ff       	call   f0100332 <_warn>
f0110af2:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110af5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0110afc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110b00:	74 04                	je     f0110b06 <test_cut_paste_pages+0x247>
f0110b02:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0110b06:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110b0d:	83 ec 08             	sub    $0x8,%esp
f0110b10:	6a 00                	push   $0x0
f0110b12:	6a 01                	push   $0x1
f0110b14:	6a 00                	push   $0x0
f0110b16:	68 ff 0f 00 00       	push   $0xfff
f0110b1b:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b1e:	6a 01                	push   $0x1
f0110b20:	68 00 30 00 00       	push   $0x3000
f0110b25:	68 00 00 90 02       	push   $0x2900000
f0110b2a:	68 00 00 80 02       	push   $0x2800000
f0110b2f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b32:	e8 76 46 00 00       	call   f01151ad <CCP>
f0110b37:	83 c4 30             	add    $0x30,%esp
f0110b3a:	83 f8 01             	cmp    $0x1,%eax
f0110b3d:	74 21                	je     f0110b60 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110b3f:	83 ec 04             	sub    $0x4,%esp
f0110b42:	68 d4 83 13 f0       	push   $0xf01383d4
f0110b47:	68 9c 01 00 00       	push   $0x19c
f0110b4c:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110b51:	e8 dc f7 fe ff       	call   f0100332 <_warn>
f0110b56:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110b59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0110b60:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110b64:	74 04                	je     f0110b6a <test_cut_paste_pages+0x2ab>
f0110b66:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0110b6a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0110b71:	83 ec 04             	sub    $0x4,%esp
f0110b74:	6a 00                	push   $0x0
f0110b76:	68 00 00 90 02       	push   $0x2900000
f0110b7b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b7e:	e8 5f 41 00 00       	call   f0114ce2 <CB>
f0110b83:	83 c4 10             	add    $0x10,%esp
f0110b86:	85 c0                	test   %eax,%eax
f0110b88:	0f 84 f6 00 00 00    	je     f0110c84 <test_cut_paste_pages+0x3c5>
f0110b8e:	83 ec 04             	sub    $0x4,%esp
f0110b91:	6a 00                	push   $0x0
f0110b93:	68 00 10 90 02       	push   $0x2901000
f0110b98:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b9b:	e8 42 41 00 00       	call   f0114ce2 <CB>
f0110ba0:	83 c4 10             	add    $0x10,%esp
f0110ba3:	85 c0                	test   %eax,%eax
f0110ba5:	0f 84 d9 00 00 00    	je     f0110c84 <test_cut_paste_pages+0x3c5>
f0110bab:	83 ec 04             	sub    $0x4,%esp
f0110bae:	6a 00                	push   $0x0
f0110bb0:	68 00 20 90 02       	push   $0x2902000
f0110bb5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110bb8:	e8 25 41 00 00       	call   f0114ce2 <CB>
f0110bbd:	83 c4 10             	add    $0x10,%esp
f0110bc0:	85 c0                	test   %eax,%eax
f0110bc2:	0f 84 bc 00 00 00    	je     f0110c84 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0110bc8:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0110bcf:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0110bd6:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0110bdd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110be0:	8a 00                	mov    (%eax),%al
f0110be2:	3c 61                	cmp    $0x61,%al
f0110be4:	75 12                	jne    f0110bf8 <test_cut_paste_pages+0x339>
f0110be6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110be9:	8a 00                	mov    (%eax),%al
f0110beb:	3c 62                	cmp    $0x62,%al
f0110bed:	75 09                	jne    f0110bf8 <test_cut_paste_pages+0x339>
f0110bef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110bf2:	8a 00                	mov    (%eax),%al
f0110bf4:	3c 63                	cmp    $0x63,%al
f0110bf6:	74 21                	je     f0110c19 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110bf8:	83 ec 04             	sub    $0x4,%esp
f0110bfb:	68 20 84 13 f0       	push   $0xf0138420
f0110c00:	68 a9 01 00 00       	push   $0x1a9
f0110c05:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110c0a:	e8 23 f7 fe ff       	call   f0100332 <_warn>
f0110c0f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110c12:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0110c19:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110c1d:	74 04                	je     f0110c23 <test_cut_paste_pages+0x364>
f0110c1f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0110c23:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0110c2a:	83 ec 04             	sub    $0x4,%esp
f0110c2d:	6a 01                	push   $0x1
f0110c2f:	68 00 10 90 02       	push   $0x2901000
f0110c34:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110c37:	e8 a6 40 00 00       	call   f0114ce2 <CB>
f0110c3c:	83 c4 10             	add    $0x10,%esp
f0110c3f:	85 c0                	test   %eax,%eax
f0110c41:	74 41                	je     f0110c84 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0110c43:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110c46:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0110c49:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110c4c:	8a 00                	mov    (%eax),%al
f0110c4e:	3c 79                	cmp    $0x79,%al
f0110c50:	74 21                	je     f0110c73 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110c52:	83 ec 04             	sub    $0x4,%esp
f0110c55:	68 20 84 13 f0       	push   $0xf0138420
f0110c5a:	68 b4 01 00 00       	push   $0x1b4
f0110c5f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110c64:	e8 c9 f6 fe ff       	call   f0100332 <_warn>
f0110c69:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0110c6c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0110c73:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110c77:	74 04                	je     f0110c7d <test_cut_paste_pages+0x3be>
f0110c79:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0110c7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0110c84:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110c87:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0110c8a:	6a 02                	push   $0x2
f0110c8c:	68 00 f0 bf 02       	push   $0x2bff000
f0110c91:	68 00 10 90 02       	push   $0x2901000
f0110c96:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110c99:	e8 8a 72 ff ff       	call   f0107f28 <cut_paste_pages>
f0110c9e:	83 c4 10             	add    $0x10,%esp
f0110ca1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110ca4:	e8 21 b1 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0110ca9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0110cac:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110cb0:	75 0b                	jne    f0110cbd <test_cut_paste_pages+0x3fe>
f0110cb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110cb5:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110cb8:	83 f8 01             	cmp    $0x1,%eax
f0110cbb:	74 2b                	je     f0110ce8 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110cbd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110cc0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110cc3:	83 ec 0c             	sub    $0xc,%esp
f0110cc6:	50                   	push   %eax
f0110cc7:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110cca:	68 80 83 13 f0       	push   $0xf0138380
f0110ccf:	68 c5 01 00 00       	push   $0x1c5
f0110cd4:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110cd9:	e8 54 f6 fe ff       	call   f0100332 <_warn>
f0110cde:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110ce1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110ce8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110cec:	74 04                	je     f0110cf2 <test_cut_paste_pages+0x433>
f0110cee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110cf2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110cf9:	83 ec 08             	sub    $0x8,%esp
f0110cfc:	6a 00                	push   $0x0
f0110cfe:	6a 01                	push   $0x1
f0110d00:	6a 00                	push   $0x0
f0110d02:	68 ff 0f 00 00       	push   $0xfff
f0110d07:	ff 75 bc             	pushl  -0x44(%ebp)
f0110d0a:	6a 01                	push   $0x1
f0110d0c:	68 00 20 00 00       	push   $0x2000
f0110d11:	68 00 f0 bf 02       	push   $0x2bff000
f0110d16:	68 00 10 90 02       	push   $0x2901000
f0110d1b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d1e:	e8 8a 44 00 00       	call   f01151ad <CCP>
f0110d23:	83 c4 30             	add    $0x30,%esp
f0110d26:	83 f8 01             	cmp    $0x1,%eax
f0110d29:	74 21                	je     f0110d4c <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110d2b:	83 ec 04             	sub    $0x4,%esp
f0110d2e:	68 d4 83 13 f0       	push   $0xf01383d4
f0110d33:	68 cd 01 00 00       	push   $0x1cd
f0110d38:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110d3d:	e8 f0 f5 fe ff       	call   f0100332 <_warn>
f0110d42:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110d45:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110d4c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110d50:	74 04                	je     f0110d56 <test_cut_paste_pages+0x497>
f0110d52:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110d56:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0110d5d:	83 ec 04             	sub    $0x4,%esp
f0110d60:	6a 00                	push   $0x0
f0110d62:	68 ff f7 bf 02       	push   $0x2bff7ff
f0110d67:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d6a:	e8 73 3f 00 00       	call   f0114ce2 <CB>
f0110d6f:	83 c4 10             	add    $0x10,%esp
f0110d72:	85 c0                	test   %eax,%eax
f0110d74:	74 6b                	je     f0110de1 <test_cut_paste_pages+0x522>
f0110d76:	83 ec 04             	sub    $0x4,%esp
f0110d79:	6a 00                	push   $0x0
f0110d7b:	68 ff 0f c0 02       	push   $0x2c00fff
f0110d80:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d83:	e8 5a 3f 00 00       	call   f0114ce2 <CB>
f0110d88:	83 c4 10             	add    $0x10,%esp
f0110d8b:	85 c0                	test   %eax,%eax
f0110d8d:	74 52                	je     f0110de1 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0110d8f:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0110d96:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0110d9d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110da0:	8a 00                	mov    (%eax),%al
f0110da2:	3c 79                	cmp    $0x79,%al
f0110da4:	75 09                	jne    f0110daf <test_cut_paste_pages+0x4f0>
f0110da6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110da9:	8a 00                	mov    (%eax),%al
f0110dab:	3c 63                	cmp    $0x63,%al
f0110dad:	74 21                	je     f0110dd0 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110daf:	83 ec 04             	sub    $0x4,%esp
f0110db2:	68 20 84 13 f0       	push   $0xf0138420
f0110db7:	68 d9 01 00 00       	push   $0x1d9
f0110dbc:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110dc1:	e8 6c f5 fe ff       	call   f0100332 <_warn>
f0110dc6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110dc9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0110dd0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110dd4:	74 04                	je     f0110dda <test_cut_paste_pages+0x51b>
f0110dd6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0110dda:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0110de1:	83 ec 0c             	sub    $0xc,%esp
f0110de4:	68 59 84 13 f0       	push   $0xf0138459
f0110de9:	e8 3f fe fe ff       	call   f0100c2d <cprintf>
f0110dee:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0110df1:	83 ec 0c             	sub    $0xc,%esp
f0110df4:	68 68 84 13 f0       	push   $0xf0138468
f0110df9:	e8 2f fe fe ff       	call   f0100c2d <cprintf>
f0110dfe:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0110e01:	83 ec 04             	sub    $0x4,%esp
f0110e04:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0110e0a:	50                   	push   %eax
f0110e0b:	68 91 84 13 f0       	push   $0xf0138491
f0110e10:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110e16:	50                   	push   %eax
f0110e17:	e8 19 f8 01 00       	call   f0130635 <strcconcat>
f0110e1c:	83 c4 10             	add    $0x10,%esp
f0110e1f:	83 ec 0c             	sub    $0xc,%esp
f0110e22:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0110e28:	50                   	push   %eax
f0110e29:	e8 61 fe fe ff       	call   f0100c8f <execute_command>
f0110e2e:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0110e31:	83 ec 04             	sub    $0x4,%esp
f0110e34:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0110e3a:	50                   	push   %eax
f0110e3b:	68 9c 84 13 f0       	push   $0xf013849c
f0110e40:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110e46:	50                   	push   %eax
f0110e47:	e8 e9 f7 01 00       	call   f0130635 <strcconcat>
f0110e4c:	83 c4 10             	add    $0x10,%esp
f0110e4f:	83 ec 0c             	sub    $0xc,%esp
f0110e52:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0110e58:	50                   	push   %eax
f0110e59:	e8 31 fe fe ff       	call   f0100c8f <execute_command>
f0110e5e:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0110e61:	83 ec 04             	sub    $0x4,%esp
f0110e64:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0110e6a:	50                   	push   %eax
f0110e6b:	68 a7 84 13 f0       	push   $0xf01384a7
f0110e70:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110e76:	50                   	push   %eax
f0110e77:	e8 b9 f7 01 00       	call   f0130635 <strcconcat>
f0110e7c:	83 c4 10             	add    $0x10,%esp
f0110e7f:	83 ec 0c             	sub    $0xc,%esp
f0110e82:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0110e88:	50                   	push   %eax
f0110e89:	e8 01 fe fe ff       	call   f0100c8f <execute_command>
f0110e8e:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0110e91:	83 ec 04             	sub    $0x4,%esp
f0110e94:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0110e9a:	50                   	push   %eax
f0110e9b:	68 b2 84 13 f0       	push   $0xf01384b2
f0110ea0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110ea6:	50                   	push   %eax
f0110ea7:	e8 89 f7 01 00       	call   f0130635 <strcconcat>
f0110eac:	83 c4 10             	add    $0x10,%esp
f0110eaf:	83 ec 0c             	sub    $0xc,%esp
f0110eb2:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0110eb8:	50                   	push   %eax
f0110eb9:	e8 d1 fd fe ff       	call   f0100c8f <execute_command>
f0110ebe:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0110ec1:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0110ec8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ecb:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0110ece:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0110ed5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ed8:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0110edb:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0110ee2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ee5:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0110ee8:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0110eef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ef2:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0110ef5:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0110efc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110eff:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0110f02:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0110f09:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110f0c:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0110f0f:	83 ec 08             	sub    $0x8,%esp
f0110f12:	68 00 00 c0 01       	push   $0x1c00000
f0110f17:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f1a:	e8 c1 41 00 00       	call   f01150e0 <GP>
f0110f1f:	83 c4 10             	add    $0x10,%esp
f0110f22:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0110f25:	83 ec 08             	sub    $0x8,%esp
f0110f28:	68 00 00 40 01       	push   $0x1400000
f0110f2d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f30:	e8 ab 41 00 00       	call   f01150e0 <GP>
f0110f35:	83 c4 10             	add    $0x10,%esp
f0110f38:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0110f3b:	e8 8a ae ff ff       	call   f010bdca <sys_calculate_free_frames>
f0110f40:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0110f43:	6a 01                	push   $0x1
f0110f45:	68 00 00 40 01       	push   $0x1400000
f0110f4a:	68 00 00 c0 01       	push   $0x1c00000
f0110f4f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f52:	e8 d1 6f ff ff       	call   f0107f28 <cut_paste_pages>
f0110f57:	83 c4 10             	add    $0x10,%esp
f0110f5a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110f5d:	e8 68 ae ff ff       	call   f010bdca <sys_calculate_free_frames>
f0110f62:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0110f65:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0110f69:	75 08                	jne    f0110f73 <test_cut_paste_pages+0x6b4>
f0110f6b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110f6e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110f71:	74 2b                	je     f0110f9e <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110f73:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110f76:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110f79:	83 ec 0c             	sub    $0xc,%esp
f0110f7c:	50                   	push   %eax
f0110f7d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110f80:	68 c0 84 13 f0       	push   $0xf01384c0
f0110f85:	68 fc 01 00 00       	push   $0x1fc
f0110f8a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110f8f:	e8 9e f3 fe ff       	call   f0100332 <_warn>
f0110f94:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110f97:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110f9e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110fa2:	74 04                	je     f0110fa8 <test_cut_paste_pages+0x6e9>
f0110fa4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110fa8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0110faf:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0110fb6:	83 ec 08             	sub    $0x8,%esp
f0110fb9:	6a 00                	push   $0x0
f0110fbb:	68 ff 0f 00 00       	push   $0xfff
f0110fc0:	ff 75 a4             	pushl  -0x5c(%ebp)
f0110fc3:	68 ff 0f 00 00       	push   $0xfff
f0110fc8:	ff 75 a0             	pushl  -0x60(%ebp)
f0110fcb:	6a 01                	push   $0x1
f0110fcd:	68 00 10 00 00       	push   $0x1000
f0110fd2:	68 00 00 40 01       	push   $0x1400000
f0110fd7:	68 00 00 c0 01       	push   $0x1c00000
f0110fdc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110fdf:	e8 c9 41 00 00       	call   f01151ad <CCP>
f0110fe4:	83 c4 30             	add    $0x30,%esp
f0110fe7:	83 f8 01             	cmp    $0x1,%eax
f0110fea:	74 28                	je     f0111014 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110fec:	83 ec 04             	sub    $0x4,%esp
f0110fef:	68 d4 83 13 f0       	push   $0xf01383d4
f0110ff4:	68 05 02 00 00       	push   $0x205
f0110ff9:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0110ffe:	e8 2f f3 fe ff       	call   f0100332 <_warn>
f0111003:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111006:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011100d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111014:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111018:	74 04                	je     f011101e <test_cut_paste_pages+0x75f>
f011101a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011101e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111025:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111029:	0f 84 92 00 00 00    	je     f01110c1 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011102f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111036:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011103d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111044:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011104b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111052:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111059:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011105c:	8a 00                	mov    (%eax),%al
f011105e:	3c 61                	cmp    $0x61,%al
f0111060:	75 2d                	jne    f011108f <test_cut_paste_pages+0x7d0>
f0111062:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111065:	8a 00                	mov    (%eax),%al
f0111067:	3c 78                	cmp    $0x78,%al
f0111069:	75 24                	jne    f011108f <test_cut_paste_pages+0x7d0>
f011106b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011106e:	8a 00                	mov    (%eax),%al
f0111070:	3c 62                	cmp    $0x62,%al
f0111072:	75 1b                	jne    f011108f <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111074:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111077:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111079:	3c 79                	cmp    $0x79,%al
f011107b:	75 12                	jne    f011108f <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011107d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111080:	8a 00                	mov    (%eax),%al
f0111082:	3c 63                	cmp    $0x63,%al
f0111084:	75 09                	jne    f011108f <test_cut_paste_pages+0x7d0>
f0111086:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111089:	8a 00                	mov    (%eax),%al
f011108b:	3c 7a                	cmp    $0x7a,%al
f011108d:	74 21                	je     f01110b0 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011108f:	83 ec 04             	sub    $0x4,%esp
f0111092:	68 20 84 13 f0       	push   $0xf0138420
f0111097:	68 17 02 00 00       	push   $0x217
f011109c:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01110a1:	e8 8c f2 fe ff       	call   f0100332 <_warn>
f01110a6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01110a9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01110b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01110b4:	74 04                	je     f01110ba <test_cut_paste_pages+0x7fb>
f01110b6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01110ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01110c1:	e8 04 ad ff ff       	call   f010bdca <sys_calculate_free_frames>
f01110c6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01110c9:	6a 03                	push   $0x3
f01110cb:	68 00 f0 bf 01       	push   $0x1bff000
f01110d0:	68 00 00 40 01       	push   $0x1400000
f01110d5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01110d8:	e8 4b 6e ff ff       	call   f0107f28 <cut_paste_pages>
f01110dd:	83 c4 10             	add    $0x10,%esp
f01110e0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01110e3:	e8 e2 ac ff ff       	call   f010bdca <sys_calculate_free_frames>
f01110e8:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01110eb:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01110ef:	75 08                	jne    f01110f9 <test_cut_paste_pages+0x83a>
f01110f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110f4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01110f7:	74 2b                	je     f0111124 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01110f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110fc:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01110ff:	83 ec 0c             	sub    $0xc,%esp
f0111102:	50                   	push   %eax
f0111103:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111106:	68 c0 84 13 f0       	push   $0xf01384c0
f011110b:	68 26 02 00 00       	push   $0x226
f0111110:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111115:	e8 18 f2 fe ff       	call   f0100332 <_warn>
f011111a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011111d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111124:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111128:	74 04                	je     f011112e <test_cut_paste_pages+0x86f>
f011112a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011112e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111135:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011113c:	83 ec 04             	sub    $0x4,%esp
f011113f:	6a 00                	push   $0x0
f0111141:	68 00 00 40 01       	push   $0x1400000
f0111146:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111149:	e8 94 3b 00 00       	call   f0114ce2 <CB>
f011114e:	83 c4 10             	add    $0x10,%esp
f0111151:	83 f8 01             	cmp    $0x1,%eax
f0111154:	0f 85 80 00 00 00    	jne    f01111da <test_cut_paste_pages+0x91b>
f011115a:	83 ec 04             	sub    $0x4,%esp
f011115d:	6a 00                	push   $0x0
f011115f:	68 00 10 40 01       	push   $0x1401000
f0111164:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111167:	e8 76 3b 00 00       	call   f0114ce2 <CB>
f011116c:	83 c4 10             	add    $0x10,%esp
f011116f:	83 f8 01             	cmp    $0x1,%eax
f0111172:	75 66                	jne    f01111da <test_cut_paste_pages+0x91b>
f0111174:	83 ec 04             	sub    $0x4,%esp
f0111177:	6a 00                	push   $0x0
f0111179:	68 00 20 40 01       	push   $0x1402000
f011117e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111181:	e8 5c 3b 00 00       	call   f0114ce2 <CB>
f0111186:	83 c4 10             	add    $0x10,%esp
f0111189:	83 f8 01             	cmp    $0x1,%eax
f011118c:	75 4c                	jne    f01111da <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011118e:	83 ec 04             	sub    $0x4,%esp
f0111191:	6a 00                	push   $0x0
f0111193:	68 00 f0 bf 01       	push   $0x1bff000
f0111198:	ff 75 d4             	pushl  -0x2c(%ebp)
f011119b:	e8 42 3b 00 00       	call   f0114ce2 <CB>
f01111a0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01111a3:	85 c0                	test   %eax,%eax
f01111a5:	75 33                	jne    f01111da <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01111a7:	83 ec 04             	sub    $0x4,%esp
f01111aa:	6a 00                	push   $0x0
f01111ac:	68 00 00 c0 01       	push   $0x1c00000
f01111b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111b4:	e8 29 3b 00 00       	call   f0114ce2 <CB>
f01111b9:	83 c4 10             	add    $0x10,%esp
f01111bc:	83 f8 01             	cmp    $0x1,%eax
f01111bf:	75 19                	jne    f01111da <test_cut_paste_pages+0x91b>
f01111c1:	83 ec 04             	sub    $0x4,%esp
f01111c4:	6a 00                	push   $0x0
f01111c6:	68 00 10 c0 01       	push   $0x1c01000
f01111cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111ce:	e8 0f 3b 00 00       	call   f0114ce2 <CB>
f01111d3:	83 c4 10             	add    $0x10,%esp
f01111d6:	85 c0                	test   %eax,%eax
f01111d8:	74 28                	je     f0111202 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01111da:	83 ec 04             	sub    $0x4,%esp
f01111dd:	68 20 85 13 f0       	push   $0xf0138520
f01111e2:	68 2f 02 00 00       	push   $0x22f
f01111e7:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01111ec:	e8 41 f1 fe ff       	call   f0100332 <_warn>
f01111f1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01111f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01111fb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111202:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111206:	74 04                	je     f011120c <test_cut_paste_pages+0x94d>
f0111208:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011120c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111213:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111217:	0f 84 99 00 00 00    	je     f01112b6 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011121d:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111224:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011122b:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111232:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111239:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111240:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111247:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011124a:	8a 00                	mov    (%eax),%al
f011124c:	3c 61                	cmp    $0x61,%al
f011124e:	75 2d                	jne    f011127d <test_cut_paste_pages+0x9be>
f0111250:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111253:	8a 00                	mov    (%eax),%al
f0111255:	3c 78                	cmp    $0x78,%al
f0111257:	75 24                	jne    f011127d <test_cut_paste_pages+0x9be>
f0111259:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011125c:	8a 00                	mov    (%eax),%al
f011125e:	3c 62                	cmp    $0x62,%al
f0111260:	75 1b                	jne    f011127d <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111262:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111265:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111267:	3c 79                	cmp    $0x79,%al
f0111269:	75 12                	jne    f011127d <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011126b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011126e:	8a 00                	mov    (%eax),%al
f0111270:	3c 63                	cmp    $0x63,%al
f0111272:	75 09                	jne    f011127d <test_cut_paste_pages+0x9be>
f0111274:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111277:	8a 00                	mov    (%eax),%al
f0111279:	3c 7a                	cmp    $0x7a,%al
f011127b:	74 28                	je     f01112a5 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011127d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111284:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011128b:	83 ec 04             	sub    $0x4,%esp
f011128e:	68 20 84 13 f0       	push   $0xf0138420
f0111293:	68 43 02 00 00       	push   $0x243
f0111298:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011129d:	e8 90 f0 fe ff       	call   f0100332 <_warn>
f01112a2:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01112a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01112a9:	74 04                	je     f01112af <test_cut_paste_pages+0x9f0>
f01112ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01112af:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01112b6:	83 ec 0c             	sub    $0xc,%esp
f01112b9:	68 59 85 13 f0       	push   $0xf0138559
f01112be:	e8 6a f9 fe ff       	call   f0100c2d <cprintf>
f01112c3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01112c6:	83 ec 08             	sub    $0x8,%esp
f01112c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01112cc:	68 68 85 13 f0       	push   $0xf0138568
f01112d1:	e8 57 f9 fe ff       	call   f0100c2d <cprintf>
f01112d6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01112d9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01112dd:	75 10                	jne    f01112ef <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01112df:	83 ec 0c             	sub    $0xc,%esp
f01112e2:	68 9c 85 13 f0       	push   $0xf013859c
f01112e7:	e8 41 f9 fe ff       	call   f0100c2d <cprintf>
f01112ec:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01112ef:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01112f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01112f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01112fa:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01112fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111302:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111305:	5b                   	pop    %ebx
f0111306:	5e                   	pop    %esi
f0111307:	5f                   	pop    %edi
f0111308:	5d                   	pop    %ebp
f0111309:	c3                   	ret    

f011130a <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011130a:	55                   	push   %ebp
f011130b:	89 e5                	mov    %esp,%ebp
f011130d:	57                   	push   %edi
f011130e:	56                   	push   %esi
f011130f:	53                   	push   %ebx
f0111310:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111316:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011131c:	bb dc 85 13 f0       	mov    $0xf01385dc,%ebx
f0111321:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111326:	89 c7                	mov    %eax,%edi
f0111328:	89 de                	mov    %ebx,%esi
f011132a:	89 d1                	mov    %edx,%ecx
f011132c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011132e:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111334:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111339:	b0 00                	mov    $0x0,%al
f011133b:	89 d7                	mov    %edx,%edi
f011133d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011133f:	6a 00                	push   $0x0
f0111341:	6a 0a                	push   $0xa
f0111343:	6a 14                	push   $0x14
f0111345:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011134b:	50                   	push   %eax
f011134c:	e8 2c 6d ff ff       	call   f010807d <env_create>
f0111351:	83 c4 10             	add    $0x10,%esp
f0111354:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111357:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011135a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011135d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111360:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111363:	8b 40 60             	mov    0x60(%eax),%eax
f0111366:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011136c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111372:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111375:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011137c:	75 70 20 
f011137f:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111386:	00 00 00 
f0111389:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011138f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111394:	b8 00 00 00 00       	mov    $0x0,%eax
f0111399:	89 d7                	mov    %edx,%edi
f011139b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011139d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01113a0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01113a3:	83 ec 08             	sub    $0x8,%esp
f01113a6:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f01113ac:	52                   	push   %edx
f01113ad:	50                   	push   %eax
f01113ae:	e8 8a f1 01 00       	call   f013053d <ltostr>
f01113b3:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01113b6:	83 ec 04             	sub    $0x4,%esp
f01113b9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01113bf:	50                   	push   %eax
f01113c0:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01113c6:	50                   	push   %eax
f01113c7:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01113cd:	50                   	push   %eax
f01113ce:	e8 62 f2 01 00       	call   f0130635 <strcconcat>
f01113d3:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01113d6:	83 ec 0c             	sub    $0xc,%esp
f01113d9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01113dc:	e8 98 3d 00 00       	call   f0115179 <ClearUserSpace>
f01113e1:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01113e4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01113eb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01113f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01113f9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0111400:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0111407:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f011140e:	83 ec 0c             	sub    $0xc,%esp
f0111411:	68 10 86 13 f0       	push   $0xf0138610
f0111416:	e8 12 f8 fe ff       	call   f0100c2d <cprintf>
f011141b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011141e:	83 ec 04             	sub    $0x4,%esp
f0111421:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111427:	50                   	push   %eax
f0111428:	68 46 86 13 f0       	push   $0xf0138646
f011142d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111433:	50                   	push   %eax
f0111434:	e8 fc f1 01 00       	call   f0130635 <strcconcat>
f0111439:	83 c4 10             	add    $0x10,%esp
f011143c:	83 ec 0c             	sub    $0xc,%esp
f011143f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111445:	50                   	push   %eax
f0111446:	e8 44 f8 fe ff       	call   f0100c8f <execute_command>
f011144b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f011144e:	83 ec 04             	sub    $0x4,%esp
f0111451:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111457:	50                   	push   %eax
f0111458:	68 4b 86 13 f0       	push   $0xf013864b
f011145d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111463:	50                   	push   %eax
f0111464:	e8 cc f1 01 00       	call   f0130635 <strcconcat>
f0111469:	83 c4 10             	add    $0x10,%esp
f011146c:	83 ec 0c             	sub    $0xc,%esp
f011146f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111475:	50                   	push   %eax
f0111476:	e8 14 f8 fe ff       	call   f0100c8f <execute_command>
f011147b:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f011147e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111484:	bb 51 89 13 f0       	mov    $0xf0138951,%ebx
f0111489:	ba 0f 00 00 00       	mov    $0xf,%edx
f011148e:	89 c7                	mov    %eax,%edi
f0111490:	89 de                	mov    %ebx,%esi
f0111492:	89 d1                	mov    %edx,%ecx
f0111494:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111496:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011149c:	b9 55 00 00 00       	mov    $0x55,%ecx
f01114a1:	b0 00                	mov    $0x0,%al
f01114a3:	89 d7                	mov    %edx,%edi
f01114a5:	f3 aa                	rep stos %al,%es:(%edi)
f01114a7:	83 ec 0c             	sub    $0xc,%esp
f01114aa:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01114b0:	50                   	push   %eax
f01114b1:	e8 d9 f7 fe ff       	call   f0100c8f <execute_command>
f01114b6:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f01114b9:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01114bf:	bb b5 89 13 f0       	mov    $0xf01389b5,%ebx
f01114c4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01114c9:	89 c7                	mov    %eax,%edi
f01114cb:	89 de                	mov    %ebx,%esi
f01114cd:	89 d1                	mov    %edx,%ecx
f01114cf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01114d1:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01114d7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01114dc:	b0 00                	mov    $0x0,%al
f01114de:	89 d7                	mov    %edx,%edi
f01114e0:	f3 aa                	rep stos %al,%es:(%edi)
f01114e2:	83 ec 0c             	sub    $0xc,%esp
f01114e5:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01114eb:	50                   	push   %eax
f01114ec:	e8 9e f7 fe ff       	call   f0100c8f <execute_command>
f01114f1:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01114f4:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01114fa:	bb 19 8a 13 f0       	mov    $0xf0138a19,%ebx
f01114ff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111504:	89 c7                	mov    %eax,%edi
f0111506:	89 de                	mov    %ebx,%esi
f0111508:	89 d1                	mov    %edx,%ecx
f011150a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011150c:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111512:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111517:	b0 00                	mov    $0x0,%al
f0111519:	89 d7                	mov    %edx,%edi
f011151b:	f3 aa                	rep stos %al,%es:(%edi)
f011151d:	83 ec 0c             	sub    $0xc,%esp
f0111520:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111526:	50                   	push   %eax
f0111527:	e8 63 f7 fe ff       	call   f0100c8f <execute_command>
f011152c:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011152f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111535:	bb 7d 8a 13 f0       	mov    $0xf0138a7d,%ebx
f011153a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011153f:	89 c7                	mov    %eax,%edi
f0111541:	89 de                	mov    %ebx,%esi
f0111543:	89 d1                	mov    %edx,%ecx
f0111545:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111547:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011154d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111552:	b0 00                	mov    $0x0,%al
f0111554:	89 d7                	mov    %edx,%edi
f0111556:	f3 aa                	rep stos %al,%es:(%edi)
f0111558:	83 ec 0c             	sub    $0xc,%esp
f011155b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111561:	50                   	push   %eax
f0111562:	e8 28 f7 fe ff       	call   f0100c8f <execute_command>
f0111567:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f011156a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111570:	bb e1 8a 13 f0       	mov    $0xf0138ae1,%ebx
f0111575:	ba 0f 00 00 00       	mov    $0xf,%edx
f011157a:	89 c7                	mov    %eax,%edi
f011157c:	89 de                	mov    %ebx,%esi
f011157e:	89 d1                	mov    %edx,%ecx
f0111580:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111582:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111588:	b9 55 00 00 00       	mov    $0x55,%ecx
f011158d:	b0 00                	mov    $0x0,%al
f011158f:	89 d7                	mov    %edx,%edi
f0111591:	f3 aa                	rep stos %al,%es:(%edi)
f0111593:	83 ec 0c             	sub    $0xc,%esp
f0111596:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011159c:	50                   	push   %eax
f011159d:	e8 ed f6 fe ff       	call   f0100c8f <execute_command>
f01115a2:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f01115a5:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01115ab:	bb 45 8b 13 f0       	mov    $0xf0138b45,%ebx
f01115b0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01115b5:	89 c7                	mov    %eax,%edi
f01115b7:	89 de                	mov    %ebx,%esi
f01115b9:	89 d1                	mov    %edx,%ecx
f01115bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01115bd:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01115c3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01115c8:	b0 00                	mov    $0x0,%al
f01115ca:	89 d7                	mov    %edx,%edi
f01115cc:	f3 aa                	rep stos %al,%es:(%edi)
f01115ce:	83 ec 0c             	sub    $0xc,%esp
f01115d1:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01115d7:	50                   	push   %eax
f01115d8:	e8 b2 f6 fe ff       	call   f0100c8f <execute_command>
f01115dd:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01115e0:	83 ec 04             	sub    $0x4,%esp
f01115e3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01115e9:	50                   	push   %eax
f01115ea:	68 53 86 13 f0       	push   $0xf0138653
f01115ef:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01115f5:	50                   	push   %eax
f01115f6:	e8 3a f0 01 00       	call   f0130635 <strcconcat>
f01115fb:	83 c4 10             	add    $0x10,%esp
f01115fe:	83 ec 0c             	sub    $0xc,%esp
f0111601:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111607:	50                   	push   %eax
f0111608:	e8 82 f6 fe ff       	call   f0100c8f <execute_command>
f011160d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0111610:	83 ec 04             	sub    $0x4,%esp
f0111613:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111619:	50                   	push   %eax
f011161a:	68 5d 86 13 f0       	push   $0xf013865d
f011161f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111625:	50                   	push   %eax
f0111626:	e8 0a f0 01 00       	call   f0130635 <strcconcat>
f011162b:	83 c4 10             	add    $0x10,%esp
f011162e:	83 ec 0c             	sub    $0xc,%esp
f0111631:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111637:	50                   	push   %eax
f0111638:	e8 52 f6 fe ff       	call   f0100c8f <execute_command>
f011163d:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0111640:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111646:	bb a9 8b 13 f0       	mov    $0xf0138ba9,%ebx
f011164b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111650:	89 c7                	mov    %eax,%edi
f0111652:	89 de                	mov    %ebx,%esi
f0111654:	89 d1                	mov    %edx,%ecx
f0111656:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111658:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011165e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111663:	b0 00                	mov    $0x0,%al
f0111665:	89 d7                	mov    %edx,%edi
f0111667:	f3 aa                	rep stos %al,%es:(%edi)
f0111669:	83 ec 0c             	sub    $0xc,%esp
f011166c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111672:	50                   	push   %eax
f0111673:	e8 17 f6 fe ff       	call   f0100c8f <execute_command>
f0111678:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011167b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111681:	bb 0d 8c 13 f0       	mov    $0xf0138c0d,%ebx
f0111686:	ba 0f 00 00 00       	mov    $0xf,%edx
f011168b:	89 c7                	mov    %eax,%edi
f011168d:	89 de                	mov    %ebx,%esi
f011168f:	89 d1                	mov    %edx,%ecx
f0111691:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111693:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111699:	b9 55 00 00 00       	mov    $0x55,%ecx
f011169e:	b0 00                	mov    $0x0,%al
f01116a0:	89 d7                	mov    %edx,%edi
f01116a2:	f3 aa                	rep stos %al,%es:(%edi)
f01116a4:	83 ec 0c             	sub    $0xc,%esp
f01116a7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01116ad:	50                   	push   %eax
f01116ae:	e8 dc f5 fe ff       	call   f0100c8f <execute_command>
f01116b3:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01116b6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01116bc:	bb 71 8c 13 f0       	mov    $0xf0138c71,%ebx
f01116c1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01116c6:	89 c7                	mov    %eax,%edi
f01116c8:	89 de                	mov    %ebx,%esi
f01116ca:	89 d1                	mov    %edx,%ecx
f01116cc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01116ce:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01116d4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01116d9:	b0 00                	mov    $0x0,%al
f01116db:	89 d7                	mov    %edx,%edi
f01116dd:	f3 aa                	rep stos %al,%es:(%edi)
f01116df:	83 ec 0c             	sub    $0xc,%esp
f01116e2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01116e8:	50                   	push   %eax
f01116e9:	e8 a1 f5 fe ff       	call   f0100c8f <execute_command>
f01116ee:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01116f1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01116f8:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01116ff:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0111706:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f011170d:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0111714:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f011171b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0111722:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0111729:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0111730:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0111737:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011173e:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0111745:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111748:	8a 00                	mov    (%eax),%al
f011174a:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0111750:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111753:	8a 00                	mov    (%eax),%al
f0111755:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f011175b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011175e:	8a 00                	mov    (%eax),%al
f0111760:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111766:	e8 5f a6 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011176b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011176e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111771:	89 d0                	mov    %edx,%eax
f0111773:	01 c0                	add    %eax,%eax
f0111775:	01 d0                	add    %edx,%eax
f0111777:	01 c0                	add    %eax,%eax
f0111779:	50                   	push   %eax
f011177a:	68 00 00 10 00       	push   $0x100000
f011177f:	6a 00                	push   $0x0
f0111781:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111784:	e8 b9 67 ff ff       	call   f0107f42 <copy_paste_chunk>
f0111789:	83 c4 10             	add    $0x10,%esp
f011178c:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011178f:	e8 36 a6 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0111794:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111797:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011179e:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f01117a2:	75 08                	jne    f01117ac <test_copy_paste_chunk+0x4a2>
f01117a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01117a7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01117aa:	74 2b                	je     f01117d7 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01117ac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01117af:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01117b2:	83 ec 0c             	sub    $0xc,%esp
f01117b5:	50                   	push   %eax
f01117b6:	ff 75 88             	pushl  -0x78(%ebp)
f01117b9:	68 6c 86 13 f0       	push   $0xf013866c
f01117be:	68 96 02 00 00       	push   $0x296
f01117c3:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01117c8:	e8 65 eb fe ff       	call   f0100332 <_warn>
f01117cd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01117d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01117d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117db:	74 04                	je     f01117e1 <test_copy_paste_chunk+0x4d7>
f01117dd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01117e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01117e8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01117eb:	8a 00                	mov    (%eax),%al
f01117ed:	3c 61                	cmp    $0x61,%al
f01117ef:	75 75                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f01117f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01117f4:	8a 00                	mov    (%eax),%al
f01117f6:	3c 78                	cmp    $0x78,%al
f01117f8:	75 6c                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f01117fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01117fd:	8a 00                	mov    (%eax),%al
f01117ff:	3c 62                	cmp    $0x62,%al
f0111801:	75 63                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f0111803:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111806:	8a 00                	mov    (%eax),%al
f0111808:	3c 79                	cmp    $0x79,%al
f011180a:	75 5a                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f011180c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011180f:	8a 00                	mov    (%eax),%al
f0111811:	3c 63                	cmp    $0x63,%al
f0111813:	75 51                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f0111815:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111818:	8a 00                	mov    (%eax),%al
f011181a:	3c 7a                	cmp    $0x7a,%al
f011181c:	75 48                	jne    f0111866 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f011181e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111821:	8a 00                	mov    (%eax),%al
f0111823:	3c 64                	cmp    $0x64,%al
f0111825:	75 3f                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f0111827:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011182a:	8a 10                	mov    (%eax),%dl
f011182c:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111832:	38 c2                	cmp    %al,%dl
f0111834:	75 30                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f0111836:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111839:	8a 00                	mov    (%eax),%al
f011183b:	3c 65                	cmp    $0x65,%al
f011183d:	75 27                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f011183f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111842:	8a 10                	mov    (%eax),%dl
f0111844:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f011184a:	38 c2                	cmp    %al,%dl
f011184c:	75 18                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f011184e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111851:	8a 00                	mov    (%eax),%al
f0111853:	3c 66                	cmp    $0x66,%al
f0111855:	75 0f                	jne    f0111866 <test_copy_paste_chunk+0x55c>
f0111857:	8b 45 90             	mov    -0x70(%ebp),%eax
f011185a:	8a 10                	mov    (%eax),%dl
f011185c:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111862:	38 c2                	cmp    %al,%dl
f0111864:	74 21                	je     f0111887 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111866:	83 ec 04             	sub    $0x4,%esp
f0111869:	68 d0 86 13 f0       	push   $0xf01386d0
f011186e:	68 9f 02 00 00       	push   $0x29f
f0111873:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111878:	e8 b5 ea fe ff       	call   f0100332 <_warn>
f011187d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111880:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111887:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011188b:	74 04                	je     f0111891 <test_copy_paste_chunk+0x587>
f011188d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111891:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0111898:	83 ec 0c             	sub    $0xc,%esp
f011189b:	68 0a 87 13 f0       	push   $0xf013870a
f01118a0:	e8 88 f3 fe ff       	call   f0100c2d <cprintf>
f01118a5:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f01118a8:	83 ec 0c             	sub    $0xc,%esp
f01118ab:	68 1c 87 13 f0       	push   $0xf013871c
f01118b0:	e8 78 f3 fe ff       	call   f0100c2d <cprintf>
f01118b5:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01118b8:	83 ec 04             	sub    $0x4,%esp
f01118bb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01118c1:	50                   	push   %eax
f01118c2:	68 52 87 13 f0       	push   $0xf0138752
f01118c7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01118cd:	50                   	push   %eax
f01118ce:	e8 62 ed 01 00       	call   f0130635 <strcconcat>
f01118d3:	83 c4 10             	add    $0x10,%esp
f01118d6:	83 ec 0c             	sub    $0xc,%esp
f01118d9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01118df:	50                   	push   %eax
f01118e0:	e8 aa f3 fe ff       	call   f0100c8f <execute_command>
f01118e5:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01118e8:	83 ec 04             	sub    $0x4,%esp
f01118eb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01118f1:	50                   	push   %eax
f01118f2:	68 5c 87 13 f0       	push   $0xf013875c
f01118f7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01118fd:	50                   	push   %eax
f01118fe:	e8 32 ed 01 00       	call   f0130635 <strcconcat>
f0111903:	83 c4 10             	add    $0x10,%esp
f0111906:	83 ec 0c             	sub    $0xc,%esp
f0111909:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011190f:	50                   	push   %eax
f0111910:	e8 7a f3 fe ff       	call   f0100c8f <execute_command>
f0111915:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0111918:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011191e:	bb d5 8c 13 f0       	mov    $0xf0138cd5,%ebx
f0111923:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111928:	89 c7                	mov    %eax,%edi
f011192a:	89 de                	mov    %ebx,%esi
f011192c:	89 d1                	mov    %edx,%ecx
f011192e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111930:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111936:	b9 55 00 00 00       	mov    $0x55,%ecx
f011193b:	b0 00                	mov    $0x0,%al
f011193d:	89 d7                	mov    %edx,%edi
f011193f:	f3 aa                	rep stos %al,%es:(%edi)
f0111941:	83 ec 0c             	sub    $0xc,%esp
f0111944:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011194a:	50                   	push   %eax
f011194b:	e8 3f f3 fe ff       	call   f0100c8f <execute_command>
f0111950:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0111953:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111959:	bb 39 8d 13 f0       	mov    $0xf0138d39,%ebx
f011195e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111963:	89 c7                	mov    %eax,%edi
f0111965:	89 de                	mov    %ebx,%esi
f0111967:	89 d1                	mov    %edx,%ecx
f0111969:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011196b:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111971:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111976:	b0 00                	mov    $0x0,%al
f0111978:	89 d7                	mov    %edx,%edi
f011197a:	f3 aa                	rep stos %al,%es:(%edi)
f011197c:	83 ec 0c             	sub    $0xc,%esp
f011197f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111985:	50                   	push   %eax
f0111986:	e8 04 f3 fe ff       	call   f0100c8f <execute_command>
f011198b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011198e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111994:	bb 9d 8d 13 f0       	mov    $0xf0138d9d,%ebx
f0111999:	ba 0f 00 00 00       	mov    $0xf,%edx
f011199e:	89 c7                	mov    %eax,%edi
f01119a0:	89 de                	mov    %ebx,%esi
f01119a2:	89 d1                	mov    %edx,%ecx
f01119a4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119a6:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01119ac:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119b1:	b0 00                	mov    $0x0,%al
f01119b3:	89 d7                	mov    %edx,%edi
f01119b5:	f3 aa                	rep stos %al,%es:(%edi)
f01119b7:	83 ec 0c             	sub    $0xc,%esp
f01119ba:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01119c0:	50                   	push   %eax
f01119c1:	e8 c9 f2 fe ff       	call   f0100c8f <execute_command>
f01119c6:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01119c9:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01119cf:	bb 01 8e 13 f0       	mov    $0xf0138e01,%ebx
f01119d4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01119d9:	89 c7                	mov    %eax,%edi
f01119db:	89 de                	mov    %ebx,%esi
f01119dd:	89 d1                	mov    %edx,%ecx
f01119df:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119e1:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01119e7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119ec:	b0 00                	mov    $0x0,%al
f01119ee:	89 d7                	mov    %edx,%edi
f01119f0:	f3 aa                	rep stos %al,%es:(%edi)
f01119f2:	83 ec 0c             	sub    $0xc,%esp
f01119f5:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01119fb:	50                   	push   %eax
f01119fc:	e8 8e f2 fe ff       	call   f0100c8f <execute_command>
f0111a01:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0111a04:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111a0a:	bb 65 8e 13 f0       	mov    $0xf0138e65,%ebx
f0111a0f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111a14:	89 c7                	mov    %eax,%edi
f0111a16:	89 de                	mov    %ebx,%esi
f0111a18:	89 d1                	mov    %edx,%ecx
f0111a1a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a1c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111a22:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111a27:	b0 00                	mov    $0x0,%al
f0111a29:	89 d7                	mov    %edx,%edi
f0111a2b:	f3 aa                	rep stos %al,%es:(%edi)
f0111a2d:	83 ec 0c             	sub    $0xc,%esp
f0111a30:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111a36:	50                   	push   %eax
f0111a37:	e8 53 f2 fe ff       	call   f0100c8f <execute_command>
f0111a3c:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0111a3f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111a45:	bb c9 8e 13 f0       	mov    $0xf0138ec9,%ebx
f0111a4a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111a4f:	89 c7                	mov    %eax,%edi
f0111a51:	89 de                	mov    %ebx,%esi
f0111a53:	89 d1                	mov    %edx,%ecx
f0111a55:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a57:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111a5d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111a62:	b0 00                	mov    $0x0,%al
f0111a64:	89 d7                	mov    %edx,%edi
f0111a66:	f3 aa                	rep stos %al,%es:(%edi)
f0111a68:	83 ec 0c             	sub    $0xc,%esp
f0111a6b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111a71:	50                   	push   %eax
f0111a72:	e8 18 f2 fe ff       	call   f0100c8f <execute_command>
f0111a77:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0111a7a:	83 ec 04             	sub    $0x4,%esp
f0111a7d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111a83:	50                   	push   %eax
f0111a84:	68 66 87 13 f0       	push   $0xf0138766
f0111a89:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111a8f:	50                   	push   %eax
f0111a90:	e8 a0 eb 01 00       	call   f0130635 <strcconcat>
f0111a95:	83 c4 10             	add    $0x10,%esp
f0111a98:	83 ec 0c             	sub    $0xc,%esp
f0111a9b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111aa1:	50                   	push   %eax
f0111aa2:	e8 e8 f1 fe ff       	call   f0100c8f <execute_command>
f0111aa7:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0111aaa:	83 ec 04             	sub    $0x4,%esp
f0111aad:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111ab3:	50                   	push   %eax
f0111ab4:	68 70 87 13 f0       	push   $0xf0138770
f0111ab9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111abf:	50                   	push   %eax
f0111ac0:	e8 70 eb 01 00       	call   f0130635 <strcconcat>
f0111ac5:	83 c4 10             	add    $0x10,%esp
f0111ac8:	83 ec 0c             	sub    $0xc,%esp
f0111acb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111ad1:	50                   	push   %eax
f0111ad2:	e8 b8 f1 fe ff       	call   f0100c8f <execute_command>
f0111ad7:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0111ada:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111ae0:	bb 2d 8f 13 f0       	mov    $0xf0138f2d,%ebx
f0111ae5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111aea:	89 c7                	mov    %eax,%edi
f0111aec:	89 de                	mov    %ebx,%esi
f0111aee:	89 d1                	mov    %edx,%ecx
f0111af0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111af2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111af8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111afd:	b0 00                	mov    $0x0,%al
f0111aff:	89 d7                	mov    %edx,%edi
f0111b01:	f3 aa                	rep stos %al,%es:(%edi)
f0111b03:	83 ec 0c             	sub    $0xc,%esp
f0111b06:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111b0c:	50                   	push   %eax
f0111b0d:	e8 7d f1 fe ff       	call   f0100c8f <execute_command>
f0111b12:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0111b15:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111b1b:	bb 91 8f 13 f0       	mov    $0xf0138f91,%ebx
f0111b20:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111b25:	89 c7                	mov    %eax,%edi
f0111b27:	89 de                	mov    %ebx,%esi
f0111b29:	89 d1                	mov    %edx,%ecx
f0111b2b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b2d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111b33:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b38:	b0 00                	mov    $0x0,%al
f0111b3a:	89 d7                	mov    %edx,%edi
f0111b3c:	f3 aa                	rep stos %al,%es:(%edi)
f0111b3e:	83 ec 0c             	sub    $0xc,%esp
f0111b41:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111b47:	50                   	push   %eax
f0111b48:	e8 42 f1 fe ff       	call   f0100c8f <execute_command>
f0111b4d:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0111b50:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111b56:	bb f5 8f 13 f0       	mov    $0xf0138ff5,%ebx
f0111b5b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111b60:	89 c7                	mov    %eax,%edi
f0111b62:	89 de                	mov    %ebx,%esi
f0111b64:	89 d1                	mov    %edx,%ecx
f0111b66:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b68:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111b6e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b73:	b0 00                	mov    $0x0,%al
f0111b75:	89 d7                	mov    %edx,%edi
f0111b77:	f3 aa                	rep stos %al,%es:(%edi)
f0111b79:	83 ec 0c             	sub    $0xc,%esp
f0111b7c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111b82:	50                   	push   %eax
f0111b83:	e8 07 f1 fe ff       	call   f0100c8f <execute_command>
f0111b88:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0111b8b:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0111b92:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0111b99:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0111ba0:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0111ba7:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0111bae:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0111bb5:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0111bbc:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0111bc3:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0111bca:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0111bd1:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0111bd8:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0111bdf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111be2:	8a 00                	mov    (%eax),%al
f0111be4:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111bea:	e8 db a1 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0111bef:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0111bf2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111bf5:	89 d0                	mov    %edx,%eax
f0111bf7:	01 c0                	add    %eax,%eax
f0111bf9:	01 d0                	add    %edx,%eax
f0111bfb:	01 c0                	add    %eax,%eax
f0111bfd:	50                   	push   %eax
f0111bfe:	68 00 00 40 00       	push   $0x400000
f0111c03:	68 00 00 20 00       	push   $0x200000
f0111c08:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c0b:	e8 32 63 ff ff       	call   f0107f42 <copy_paste_chunk>
f0111c10:	83 c4 10             	add    $0x10,%esp
f0111c13:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111c16:	e8 af a1 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0111c1b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111c1e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111c25:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0111c29:	75 08                	jne    f0111c33 <test_copy_paste_chunk+0x929>
f0111c2b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111c2e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111c31:	74 2b                	je     f0111c5e <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111c33:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111c36:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111c39:	83 ec 0c             	sub    $0xc,%esp
f0111c3c:	50                   	push   %eax
f0111c3d:	ff 75 80             	pushl  -0x80(%ebp)
f0111c40:	68 7c 87 13 f0       	push   $0xf013877c
f0111c45:	68 cf 02 00 00       	push   $0x2cf
f0111c4a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111c4f:	e8 de e6 fe ff       	call   f0100332 <_warn>
f0111c54:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111c57:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111c5e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c62:	74 04                	je     f0111c68 <test_copy_paste_chunk+0x95e>
f0111c64:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111c68:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0111c6f:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0111c76:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111c79:	83 ec 08             	sub    $0x8,%esp
f0111c7c:	6a 01                	push   $0x1
f0111c7e:	6a 07                	push   $0x7
f0111c80:	6a 07                	push   $0x7
f0111c82:	6a 07                	push   $0x7
f0111c84:	6a 07                	push   $0x7
f0111c86:	6a 01                	push   $0x1
f0111c88:	68 00 20 00 00       	push   $0x2000
f0111c8d:	68 00 00 40 00       	push   $0x400000
f0111c92:	68 00 00 20 00       	push   $0x200000
f0111c97:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c9a:	e8 0e 35 00 00       	call   f01151ad <CCP>
f0111c9f:	83 c4 30             	add    $0x30,%esp
f0111ca2:	83 f8 01             	cmp    $0x1,%eax
f0111ca5:	74 2b                	je     f0111cd2 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0111ca7:	83 ec 04             	sub    $0x4,%esp
f0111caa:	68 d0 87 13 f0       	push   $0xf01387d0
f0111caf:	68 d8 02 00 00       	push   $0x2d8
f0111cb4:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111cb9:	e8 74 e6 fe ff       	call   f0100332 <_warn>
f0111cbe:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111cc1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0111cc8:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0111ccf:	00 00 00 
		}
		if (correct) eval += 5 ;
f0111cd2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111cd6:	74 04                	je     f0111cdc <test_copy_paste_chunk+0x9d2>
f0111cd8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111cdc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0111ce3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111ce6:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0111ce9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111cec:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0111cef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111cf2:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0111cf5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111cf8:	8a 00                	mov    (%eax),%al
f0111cfa:	3c 61                	cmp    $0x61,%al
f0111cfc:	75 69                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111cfe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111d01:	8a 00                	mov    (%eax),%al
f0111d03:	3c 61                	cmp    $0x61,%al
f0111d05:	75 60                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111d0a:	8a 00                	mov    (%eax),%al
f0111d0c:	3c 79                	cmp    $0x79,%al
f0111d0e:	75 57                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d10:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111d13:	8a 00                	mov    (%eax),%al
f0111d15:	3c 62                	cmp    $0x62,%al
f0111d17:	75 4e                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d1c:	8a 00                	mov    (%eax),%al
f0111d1e:	3c 63                	cmp    $0x63,%al
f0111d20:	75 45                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111d25:	8a 00                	mov    (%eax),%al
f0111d27:	3c 7a                	cmp    $0x7a,%al
f0111d29:	75 3c                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0111d2b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111d2e:	8a 00                	mov    (%eax),%al
f0111d30:	3c 77                	cmp    $0x77,%al
f0111d32:	75 33                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d34:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111d37:	8a 00                	mov    (%eax),%al
f0111d39:	3c 64                	cmp    $0x64,%al
f0111d3b:	75 2a                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d3d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111d40:	8a 00                	mov    (%eax),%al
f0111d42:	3c 65                	cmp    $0x65,%al
f0111d44:	75 21                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d46:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111d49:	8a 00                	mov    (%eax),%al
f0111d4b:	3c 65                	cmp    $0x65,%al
f0111d4d:	75 18                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111d52:	8a 00                	mov    (%eax),%al
f0111d54:	3c 66                	cmp    $0x66,%al
f0111d56:	75 0f                	jne    f0111d67 <test_copy_paste_chunk+0xa5d>
f0111d58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111d5b:	8a 10                	mov    (%eax),%dl
f0111d5d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111d63:	38 c2                	cmp    %al,%dl
f0111d65:	74 21                	je     f0111d88 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111d67:	83 ec 04             	sub    $0x4,%esp
f0111d6a:	68 d0 86 13 f0       	push   $0xf01386d0
f0111d6f:	68 e6 02 00 00       	push   $0x2e6
f0111d74:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111d79:	e8 b4 e5 fe ff       	call   f0100332 <_warn>
f0111d7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111d81:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111d88:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d8c:	74 04                	je     f0111d92 <test_copy_paste_chunk+0xa88>
f0111d8e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111d92:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0111d99:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111d9c:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111d9f:	e8 26 a0 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0111da4:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0111da7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111daa:	89 c2                	mov    %eax,%edx
f0111dac:	01 d2                	add    %edx,%edx
f0111dae:	01 d0                	add    %edx,%eax
f0111db0:	50                   	push   %eax
f0111db1:	68 00 08 20 00       	push   $0x200800
f0111db6:	68 00 08 40 00       	push   $0x400800
f0111dbb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dbe:	e8 7f 61 ff ff       	call   f0107f42 <copy_paste_chunk>
f0111dc3:	83 c4 10             	add    $0x10,%esp
f0111dc6:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111dc9:	e8 fc 9f ff ff       	call   f010bdca <sys_calculate_free_frames>
f0111dce:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111dd1:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0111dd5:	75 08                	jne    f0111ddf <test_copy_paste_chunk+0xad5>
f0111dd7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111dda:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111ddd:	74 2b                	je     f0111e0a <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111ddf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111de2:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111de5:	83 ec 0c             	sub    $0xc,%esp
f0111de8:	50                   	push   %eax
f0111de9:	ff 75 80             	pushl  -0x80(%ebp)
f0111dec:	68 7c 87 13 f0       	push   $0xf013877c
f0111df1:	68 f6 02 00 00       	push   $0x2f6
f0111df6:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111dfb:	e8 32 e5 fe ff       	call   f0100332 <_warn>
f0111e00:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111e03:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111e0a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e0e:	74 04                	je     f0111e14 <test_copy_paste_chunk+0xb0a>
f0111e10:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e14:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111e1b:	83 ec 08             	sub    $0x8,%esp
f0111e1e:	6a 01                	push   $0x1
f0111e20:	6a 07                	push   $0x7
f0111e22:	6a 07                	push   $0x7
f0111e24:	6a 07                	push   $0x7
f0111e26:	6a 07                	push   $0x7
f0111e28:	6a 01                	push   $0x1
f0111e2a:	68 00 20 00 00       	push   $0x2000
f0111e2f:	68 00 00 20 00       	push   $0x200000
f0111e34:	68 00 00 40 00       	push   $0x400000
f0111e39:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e3c:	e8 6c 33 00 00       	call   f01151ad <CCP>
f0111e41:	83 c4 30             	add    $0x30,%esp
f0111e44:	83 f8 01             	cmp    $0x1,%eax
f0111e47:	74 21                	je     f0111e6a <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0111e49:	83 ec 04             	sub    $0x4,%esp
f0111e4c:	68 1c 88 13 f0       	push   $0xf013881c
f0111e51:	68 fe 02 00 00       	push   $0x2fe
f0111e56:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111e5b:	e8 d2 e4 fe ff       	call   f0100332 <_warn>
f0111e60:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111e63:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111e6a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e6e:	74 04                	je     f0111e74 <test_copy_paste_chunk+0xb6a>
f0111e70:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e74:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0111e7b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e7e:	8a 00                	mov    (%eax),%al
f0111e80:	3c 61                	cmp    $0x61,%al
f0111e82:	75 69                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111e84:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e87:	8a 00                	mov    (%eax),%al
f0111e89:	3c 61                	cmp    $0x61,%al
f0111e8b:	75 60                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111e8d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111e90:	8a 00                	mov    (%eax),%al
f0111e92:	3c 79                	cmp    $0x79,%al
f0111e94:	75 57                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111e96:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111e99:	8a 00                	mov    (%eax),%al
f0111e9b:	3c 62                	cmp    $0x62,%al
f0111e9d:	75 4e                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111e9f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ea2:	8a 00                	mov    (%eax),%al
f0111ea4:	3c 7a                	cmp    $0x7a,%al
f0111ea6:	75 45                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111ea8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111eab:	8a 00                	mov    (%eax),%al
f0111ead:	3c 7a                	cmp    $0x7a,%al
f0111eaf:	75 3c                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0111eb1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111eb4:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0111eb6:	3c 64                	cmp    $0x64,%al
f0111eb8:	75 33                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0111eba:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111ebd:	8a 00                	mov    (%eax),%al
f0111ebf:	3c 64                	cmp    $0x64,%al
f0111ec1:	75 2a                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111ec3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111ec6:	8a 00                	mov    (%eax),%al
f0111ec8:	3c 65                	cmp    $0x65,%al
f0111eca:	75 21                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111ecc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111ecf:	8a 00                	mov    (%eax),%al
f0111ed1:	3c 78                	cmp    $0x78,%al
f0111ed3:	75 18                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111ed5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111ed8:	8a 00                	mov    (%eax),%al
f0111eda:	3c 66                	cmp    $0x66,%al
f0111edc:	75 0f                	jne    f0111eed <test_copy_paste_chunk+0xbe3>
f0111ede:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111ee1:	8a 10                	mov    (%eax),%dl
f0111ee3:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111ee9:	38 c2                	cmp    %al,%dl
f0111eeb:	74 21                	je     f0111f0e <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111eed:	83 ec 04             	sub    $0x4,%esp
f0111ef0:	68 d0 86 13 f0       	push   $0xf01386d0
f0111ef5:	68 07 03 00 00       	push   $0x307
f0111efa:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0111eff:	e8 2e e4 fe ff       	call   f0100332 <_warn>
f0111f04:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111f07:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111f0e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f12:	74 04                	je     f0111f18 <test_copy_paste_chunk+0xc0e>
f0111f14:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111f18:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0111f1f:	83 ec 0c             	sub    $0xc,%esp
f0111f22:	68 67 88 13 f0       	push   $0xf0138867
f0111f27:	e8 01 ed fe ff       	call   f0100c2d <cprintf>
f0111f2c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0111f2f:	83 ec 0c             	sub    $0xc,%esp
f0111f32:	68 78 88 13 f0       	push   $0xf0138878
f0111f37:	e8 f1 ec fe ff       	call   f0100c2d <cprintf>
f0111f3c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0111f3f:	83 ec 04             	sub    $0x4,%esp
f0111f42:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f48:	50                   	push   %eax
f0111f49:	68 ac 88 13 f0       	push   $0xf01388ac
f0111f4e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f54:	50                   	push   %eax
f0111f55:	e8 db e6 01 00       	call   f0130635 <strcconcat>
f0111f5a:	83 c4 10             	add    $0x10,%esp
f0111f5d:	83 ec 0c             	sub    $0xc,%esp
f0111f60:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f66:	50                   	push   %eax
f0111f67:	e8 23 ed fe ff       	call   f0100c8f <execute_command>
f0111f6c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0111f6f:	83 ec 04             	sub    $0x4,%esp
f0111f72:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f78:	50                   	push   %eax
f0111f79:	68 b6 88 13 f0       	push   $0xf01388b6
f0111f7e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f84:	50                   	push   %eax
f0111f85:	e8 ab e6 01 00       	call   f0130635 <strcconcat>
f0111f8a:	83 c4 10             	add    $0x10,%esp
f0111f8d:	83 ec 0c             	sub    $0xc,%esp
f0111f90:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f96:	50                   	push   %eax
f0111f97:	e8 f3 ec fe ff       	call   f0100c8f <execute_command>
f0111f9c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0111f9f:	83 ec 04             	sub    $0x4,%esp
f0111fa2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111fa8:	50                   	push   %eax
f0111fa9:	68 c0 88 13 f0       	push   $0xf01388c0
f0111fae:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111fb4:	50                   	push   %eax
f0111fb5:	e8 7b e6 01 00       	call   f0130635 <strcconcat>
f0111fba:	83 c4 10             	add    $0x10,%esp
f0111fbd:	83 ec 0c             	sub    $0xc,%esp
f0111fc0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111fc6:	50                   	push   %eax
f0111fc7:	e8 c3 ec fe ff       	call   f0100c8f <execute_command>
f0111fcc:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0111fcf:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111fd5:	bb 59 90 13 f0       	mov    $0xf0139059,%ebx
f0111fda:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111fdf:	89 c7                	mov    %eax,%edi
f0111fe1:	89 de                	mov    %ebx,%esi
f0111fe3:	89 d1                	mov    %edx,%ecx
f0111fe5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fe7:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111fed:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111ff2:	b0 00                	mov    $0x0,%al
f0111ff4:	89 d7                	mov    %edx,%edi
f0111ff6:	f3 aa                	rep stos %al,%es:(%edi)
f0111ff8:	83 ec 0c             	sub    $0xc,%esp
f0111ffb:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112001:	50                   	push   %eax
f0112002:	e8 88 ec fe ff       	call   f0100c8f <execute_command>
f0112007:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011200a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112010:	bb bd 90 13 f0       	mov    $0xf01390bd,%ebx
f0112015:	ba 0f 00 00 00       	mov    $0xf,%edx
f011201a:	89 c7                	mov    %eax,%edi
f011201c:	89 de                	mov    %ebx,%esi
f011201e:	89 d1                	mov    %edx,%ecx
f0112020:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112022:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112028:	b9 55 00 00 00       	mov    $0x55,%ecx
f011202d:	b0 00                	mov    $0x0,%al
f011202f:	89 d7                	mov    %edx,%edi
f0112031:	f3 aa                	rep stos %al,%es:(%edi)
f0112033:	83 ec 0c             	sub    $0xc,%esp
f0112036:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011203c:	50                   	push   %eax
f011203d:	e8 4d ec fe ff       	call   f0100c8f <execute_command>
f0112042:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112045:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011204b:	bb 21 91 13 f0       	mov    $0xf0139121,%ebx
f0112050:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112055:	89 c7                	mov    %eax,%edi
f0112057:	89 de                	mov    %ebx,%esi
f0112059:	89 d1                	mov    %edx,%ecx
f011205b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011205d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112063:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112068:	b0 00                	mov    $0x0,%al
f011206a:	89 d7                	mov    %edx,%edi
f011206c:	f3 aa                	rep stos %al,%es:(%edi)
f011206e:	83 ec 0c             	sub    $0xc,%esp
f0112071:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112077:	50                   	push   %eax
f0112078:	e8 12 ec fe ff       	call   f0100c8f <execute_command>
f011207d:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112080:	e8 45 9d ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112085:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112088:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011208b:	89 d0                	mov    %edx,%eax
f011208d:	01 c0                	add    %eax,%eax
f011208f:	01 d0                	add    %edx,%eax
f0112091:	c1 e0 02             	shl    $0x2,%eax
f0112094:	50                   	push   %eax
f0112095:	68 00 00 90 00       	push   $0x900000
f011209a:	68 00 00 80 00       	push   $0x800000
f011209f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120a2:	e8 9b 5e ff ff       	call   f0107f42 <copy_paste_chunk>
f01120a7:	83 c4 10             	add    $0x10,%esp
f01120aa:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01120b0:	e8 15 9d ff ff       	call   f010bdca <sys_calculate_free_frames>
f01120b5:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01120b8:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01120bf:	75 0b                	jne    f01120cc <test_copy_paste_chunk+0xdc2>
f01120c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01120c4:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01120c7:	83 f8 03             	cmp    $0x3,%eax
f01120ca:	74 2e                	je     f01120fa <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01120cc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01120cf:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01120d2:	83 ec 0c             	sub    $0xc,%esp
f01120d5:	50                   	push   %eax
f01120d6:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01120dc:	68 7c 87 13 f0       	push   $0xf013877c
f01120e1:	68 25 03 00 00       	push   $0x325
f01120e6:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01120eb:	e8 42 e2 fe ff       	call   f0100332 <_warn>
f01120f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01120f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01120fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120fe:	74 04                	je     f0112104 <test_copy_paste_chunk+0xdfa>
f0112100:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112104:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011210b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112112:	83 ec 08             	sub    $0x8,%esp
f0112115:	6a 01                	push   $0x1
f0112117:	6a 07                	push   $0x7
f0112119:	6a 07                	push   $0x7
f011211b:	6a 07                	push   $0x7
f011211d:	6a 07                	push   $0x7
f011211f:	6a 01                	push   $0x1
f0112121:	68 00 30 00 00       	push   $0x3000
f0112126:	68 00 00 90 00       	push   $0x900000
f011212b:	68 00 00 80 00       	push   $0x800000
f0112130:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112133:	e8 75 30 00 00       	call   f01151ad <CCP>
f0112138:	83 c4 30             	add    $0x30,%esp
f011213b:	83 f8 01             	cmp    $0x1,%eax
f011213e:	74 28                	je     f0112168 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112140:	83 ec 04             	sub    $0x4,%esp
f0112143:	68 1c 88 13 f0       	push   $0xf013881c
f0112148:	68 2e 03 00 00       	push   $0x32e
f011214d:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112152:	e8 db e1 fe ff       	call   f0100332 <_warn>
f0112157:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011215a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112161:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112168:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011216c:	74 04                	je     f0112172 <test_copy_paste_chunk+0xe68>
f011216e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112172:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112179:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011217d:	0f 84 9e 00 00 00    	je     f0112221 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112183:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011218a:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112191:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112198:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011219f:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01121a6:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01121ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01121b0:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01121b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01121b6:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01121b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01121bc:	8a 00                	mov    (%eax),%al
f01121be:	3c 61                	cmp    $0x61,%al
f01121c0:	75 2d                	jne    f01121ef <test_copy_paste_chunk+0xee5>
f01121c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01121c5:	8a 00                	mov    (%eax),%al
f01121c7:	3c 61                	cmp    $0x61,%al
f01121c9:	75 24                	jne    f01121ef <test_copy_paste_chunk+0xee5>
f01121cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01121ce:	8a 00                	mov    (%eax),%al
f01121d0:	3c 79                	cmp    $0x79,%al
f01121d2:	75 1b                	jne    f01121ef <test_copy_paste_chunk+0xee5>
f01121d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01121d7:	8a 00                	mov    (%eax),%al
f01121d9:	3c 62                	cmp    $0x62,%al
f01121db:	75 12                	jne    f01121ef <test_copy_paste_chunk+0xee5>
f01121dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121e0:	8a 00                	mov    (%eax),%al
f01121e2:	3c 63                	cmp    $0x63,%al
f01121e4:	75 09                	jne    f01121ef <test_copy_paste_chunk+0xee5>
f01121e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01121e9:	8a 00                	mov    (%eax),%al
f01121eb:	3c 7a                	cmp    $0x7a,%al
f01121ed:	74 21                	je     f0112210 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01121ef:	83 ec 04             	sub    $0x4,%esp
f01121f2:	68 d0 86 13 f0       	push   $0xf01386d0
f01121f7:	68 40 03 00 00       	push   $0x340
f01121fc:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112201:	e8 2c e1 fe ff       	call   f0100332 <_warn>
f0112206:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112209:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112210:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112214:	74 04                	je     f011221a <test_copy_paste_chunk+0xf10>
f0112216:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011221a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112221:	e8 a4 9b ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112226:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112229:	6a 00                	push   $0x0
f011222b:	6a 02                	push   $0x2
f011222d:	68 00 10 90 00       	push   $0x901000
f0112232:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112235:	e8 59 2b 00 00       	call   f0114d93 <SB>
f011223a:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011223d:	6a 00                	push   $0x0
f011223f:	6a 02                	push   $0x2
f0112241:	68 00 20 90 00       	push   $0x902000
f0112246:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112249:	e8 45 2b 00 00       	call   f0114d93 <SB>
f011224e:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112251:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112254:	c1 e0 03             	shl    $0x3,%eax
f0112257:	50                   	push   %eax
f0112258:	68 00 f0 bf 00       	push   $0xbff000
f011225d:	68 00 10 90 00       	push   $0x901000
f0112262:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112265:	e8 d8 5c ff ff       	call   f0107f42 <copy_paste_chunk>
f011226a:	83 c4 10             	add    $0x10,%esp
f011226d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112273:	e8 52 9b ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112278:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011227b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112282:	75 0b                	jne    f011228f <test_copy_paste_chunk+0xf85>
f0112284:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112287:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011228a:	83 f8 03             	cmp    $0x3,%eax
f011228d:	74 2e                	je     f01122bd <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011228f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112292:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112295:	83 ec 0c             	sub    $0xc,%esp
f0112298:	50                   	push   %eax
f0112299:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011229f:	68 7c 87 13 f0       	push   $0xf013877c
f01122a4:	68 50 03 00 00       	push   $0x350
f01122a9:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01122ae:	e8 7f e0 fe ff       	call   f0100332 <_warn>
f01122b3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01122b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01122bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122c1:	74 04                	je     f01122c7 <test_copy_paste_chunk+0xfbd>
f01122c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01122c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01122ce:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01122d5:	83 ec 08             	sub    $0x8,%esp
f01122d8:	6a 01                	push   $0x1
f01122da:	6a 07                	push   $0x7
f01122dc:	6a 03                	push   $0x3
f01122de:	6a 07                	push   $0x7
f01122e0:	6a 03                	push   $0x3
f01122e2:	6a 01                	push   $0x1
f01122e4:	68 00 20 00 00       	push   $0x2000
f01122e9:	68 00 f0 bf 00       	push   $0xbff000
f01122ee:	68 00 10 90 00       	push   $0x901000
f01122f3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122f6:	e8 b2 2e 00 00       	call   f01151ad <CCP>
f01122fb:	83 c4 30             	add    $0x30,%esp
f01122fe:	83 f8 01             	cmp    $0x1,%eax
f0112301:	74 28                	je     f011232b <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112303:	83 ec 04             	sub    $0x4,%esp
f0112306:	68 1c 88 13 f0       	push   $0xf013881c
f011230b:	68 59 03 00 00       	push   $0x359
f0112310:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112315:	e8 18 e0 fe ff       	call   f0100332 <_warn>
f011231a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011231d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112324:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011232b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011232f:	74 04                	je     f0112335 <test_copy_paste_chunk+0x102b>
f0112331:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112335:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011233c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112340:	74 72                	je     f01123b4 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112342:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112349:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112350:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112357:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011235e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112361:	8a 00                	mov    (%eax),%al
f0112363:	3c 62                	cmp    $0x62,%al
f0112365:	75 1b                	jne    f0112382 <test_copy_paste_chunk+0x1078>
f0112367:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011236a:	8a 00                	mov    (%eax),%al
f011236c:	3c 62                	cmp    $0x62,%al
f011236e:	75 12                	jne    f0112382 <test_copy_paste_chunk+0x1078>
f0112370:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112373:	8a 00                	mov    (%eax),%al
f0112375:	3c 7a                	cmp    $0x7a,%al
f0112377:	75 09                	jne    f0112382 <test_copy_paste_chunk+0x1078>
f0112379:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011237c:	8a 00                	mov    (%eax),%al
f011237e:	3c 7a                	cmp    $0x7a,%al
f0112380:	74 21                	je     f01123a3 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112382:	83 ec 04             	sub    $0x4,%esp
f0112385:	68 d0 86 13 f0       	push   $0xf01386d0
f011238a:	68 65 03 00 00       	push   $0x365
f011238f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112394:	e8 99 df fe ff       	call   f0100332 <_warn>
f0112399:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011239c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01123a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123a7:	74 04                	je     f01123ad <test_copy_paste_chunk+0x10a3>
f01123a9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01123ad:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01123b4:	83 ec 0c             	sub    $0xc,%esp
f01123b7:	68 ca 88 13 f0       	push   $0xf01388ca
f01123bc:	e8 6c e8 fe ff       	call   f0100c2d <cprintf>
f01123c1:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01123c4:	83 ec 08             	sub    $0x8,%esp
f01123c7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01123ca:	68 dc 88 13 f0       	push   $0xf01388dc
f01123cf:	e8 59 e8 fe ff       	call   f0100c2d <cprintf>
f01123d4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01123d7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01123db:	75 10                	jne    f01123ed <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01123dd:	83 ec 0c             	sub    $0xc,%esp
f01123e0:	68 10 89 13 f0       	push   $0xf0138910
f01123e5:	e8 43 e8 fe ff       	call   f0100c2d <cprintf>
f01123ea:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01123ed:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01123f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01123f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01123f8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01123fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112400:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112403:	5b                   	pop    %ebx
f0112404:	5e                   	pop    %esi
f0112405:	5f                   	pop    %edi
f0112406:	5d                   	pop    %ebp
f0112407:	c3                   	ret    

f0112408 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0112408:	55                   	push   %ebp
f0112409:	89 e5                	mov    %esp,%ebp
f011240b:	57                   	push   %edi
f011240c:	56                   	push   %esi
f011240d:	53                   	push   %ebx
f011240e:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112414:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011241a:	bb dc 85 13 f0       	mov    $0xf01385dc,%ebx
f011241f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112424:	89 c7                	mov    %eax,%edi
f0112426:	89 de                	mov    %ebx,%esi
f0112428:	89 d1                	mov    %edx,%ecx
f011242a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011242c:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112432:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112437:	b0 00                	mov    $0x0,%al
f0112439:	89 d7                	mov    %edx,%edi
f011243b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011243d:	6a 00                	push   $0x0
f011243f:	6a 0a                	push   $0xa
f0112441:	6a 14                	push   $0x14
f0112443:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112449:	50                   	push   %eax
f011244a:	e8 2e 5c ff ff       	call   f010807d <env_create>
f011244f:	83 c4 10             	add    $0x10,%esp
f0112452:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112455:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112458:	8b 40 5c             	mov    0x5c(%eax),%eax
f011245b:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f011245e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112461:	8b 40 60             	mov    0x60(%eax),%eax
f0112464:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112467:	8b 45 80             	mov    -0x80(%ebp),%eax
f011246a:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011246d:	83 ec 0c             	sub    $0xc,%esp
f0112470:	ff 75 cc             	pushl  -0x34(%ebp)
f0112473:	e8 01 2d 00 00       	call   f0115179 <ClearUserSpace>
f0112478:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011247b:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112482:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0112489:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112490:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0112494:	83 ec 0c             	sub    $0xc,%esp
f0112497:	68 88 91 13 f0       	push   $0xf0139188
f011249c:	e8 8c e7 fe ff       	call   f0100c2d <cprintf>
f01124a1:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f01124a4:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f01124ab:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f01124b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01124b5:	8a 00                	mov    (%eax),%al
f01124b7:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f01124bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124c0:	8a 00                	mov    (%eax),%al
f01124c2:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01124c8:	e8 fd 98 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01124cd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01124d0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01124d3:	89 d0                	mov    %edx,%eax
f01124d5:	01 c0                	add    %eax,%eax
f01124d7:	01 d0                	add    %edx,%eax
f01124d9:	01 c0                	add    %eax,%eax
f01124db:	83 ec 0c             	sub    $0xc,%esp
f01124de:	6a 02                	push   $0x2
f01124e0:	50                   	push   %eax
f01124e1:	68 00 40 10 f0       	push   $0xf0104000
f01124e6:	68 00 00 10 f0       	push   $0xf0100000
f01124eb:	ff 75 cc             	pushl  -0x34(%ebp)
f01124ee:	e8 69 5a ff ff       	call   f0107f5c <share_chunk>
f01124f3:	83 c4 20             	add    $0x20,%esp
f01124f6:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01124f9:	e8 cc 98 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01124fe:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112501:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112505:	75 08                	jne    f011250f <test_share_chunk+0x107>
f0112507:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011250a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011250d:	74 28                	je     f0112537 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f011250f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112512:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112515:	83 ec 0c             	sub    $0xc,%esp
f0112518:	50                   	push   %eax
f0112519:	ff 75 b0             	pushl  -0x50(%ebp)
f011251c:	68 b4 91 13 f0       	push   $0xf01391b4
f0112521:	68 a1 03 00 00       	push   $0x3a1
f0112526:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011252b:	e8 02 de fe ff       	call   f0100332 <_warn>
f0112530:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112533:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112537:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011253b:	74 04                	je     f0112541 <test_share_chunk+0x139>
f011253d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112541:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0112545:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112548:	c1 e0 03             	shl    $0x3,%eax
f011254b:	83 ec 08             	sub    $0x8,%esp
f011254e:	68 fd 00 00 00       	push   $0xfd
f0112553:	6a 07                	push   $0x7
f0112555:	6a 03                	push   $0x3
f0112557:	6a 07                	push   $0x7
f0112559:	6a 03                	push   $0x3
f011255b:	6a 01                	push   $0x1
f011255d:	50                   	push   %eax
f011255e:	68 00 40 10 f0       	push   $0xf0104000
f0112563:	68 00 00 10 f0       	push   $0xf0100000
f0112568:	ff 75 cc             	pushl  -0x34(%ebp)
f011256b:	e8 3d 2c 00 00       	call   f01151ad <CCP>
f0112570:	83 c4 30             	add    $0x30,%esp
f0112573:	85 c0                	test   %eax,%eax
f0112575:	75 1e                	jne    f0112595 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112577:	83 ec 04             	sub    $0x4,%esp
f011257a:	68 10 92 13 f0       	push   $0xf0139210
f011257f:	68 a9 03 00 00       	push   $0x3a9
f0112584:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112589:	e8 a4 dd fe ff       	call   f0100332 <_warn>
f011258e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112591:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112595:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112599:	74 04                	je     f011259f <test_share_chunk+0x197>
f011259b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f011259f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01125a2:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f01125a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125a8:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f01125ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01125ae:	8a 00                	mov    (%eax),%al
f01125b0:	3c 41                	cmp    $0x41,%al
f01125b2:	75 09                	jne    f01125bd <test_share_chunk+0x1b5>
f01125b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125b7:	8a 00                	mov    (%eax),%al
f01125b9:	3c 42                	cmp    $0x42,%al
f01125bb:	74 1e                	je     f01125db <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01125bd:	83 ec 04             	sub    $0x4,%esp
f01125c0:	68 58 92 13 f0       	push   $0xf0139258
f01125c5:	68 b3 03 00 00       	push   $0x3b3
f01125ca:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01125cf:	e8 5e dd fe ff       	call   f0100332 <_warn>
f01125d4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01125d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01125db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01125df:	74 04                	je     f01125e5 <test_share_chunk+0x1dd>
f01125e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01125e9:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01125ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01125f2:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01125f4:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01125fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125fd:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01125ff:	83 ec 0c             	sub    $0xc,%esp
f0112602:	68 8d 92 13 f0       	push   $0xf013928d
f0112607:	e8 21 e6 fe ff       	call   f0100c2d <cprintf>
f011260c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f011260f:	83 ec 0c             	sub    $0xc,%esp
f0112612:	68 9c 92 13 f0       	push   $0xf013929c
f0112617:	e8 11 e6 fe ff       	call   f0100c2d <cprintf>
f011261c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011261f:	e8 a6 97 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112624:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0112627:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011262a:	c1 e0 05             	shl    $0x5,%eax
f011262d:	83 ec 0c             	sub    $0xc,%esp
f0112630:	68 02 0e 00 00       	push   $0xe02
f0112635:	50                   	push   %eax
f0112636:	68 00 00 00 40       	push   $0x40000000
f011263b:	68 00 00 00 f0       	push   $0xf0000000
f0112640:	ff 75 cc             	pushl  -0x34(%ebp)
f0112643:	e8 14 59 ff ff       	call   f0107f5c <share_chunk>
f0112648:	83 c4 20             	add    $0x20,%esp
f011264b:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011264e:	e8 77 97 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112653:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0112656:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011265a:	75 1f                	jne    f011267b <test_share_chunk+0x273>
f011265c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011265f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112662:	89 c1                	mov    %eax,%ecx
f0112664:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112667:	c1 e0 05             	shl    $0x5,%eax
f011266a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011266d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112674:	99                   	cltd   
f0112675:	f7 fb                	idiv   %ebx
f0112677:	39 c1                	cmp    %eax,%ecx
f0112679:	74 28                	je     f01126a3 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011267b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011267e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112681:	83 ec 0c             	sub    $0xc,%esp
f0112684:	50                   	push   %eax
f0112685:	ff 75 a8             	pushl  -0x58(%ebp)
f0112688:	68 d8 92 13 f0       	push   $0xf01392d8
f011268d:	68 cb 03 00 00       	push   $0x3cb
f0112692:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112697:	e8 96 dc fe ff       	call   f0100332 <_warn>
f011269c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011269f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01126a3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01126a7:	74 04                	je     f01126ad <test_share_chunk+0x2a5>
f01126a9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01126ad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01126b1:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01126b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126bb:	c1 e0 05             	shl    $0x5,%eax
f01126be:	83 ec 08             	sub    $0x8,%esp
f01126c1:	6a 02                	push   $0x2
f01126c3:	6a 07                	push   $0x7
f01126c5:	6a 03                	push   $0x3
f01126c7:	68 07 0e 00 00       	push   $0xe07
f01126cc:	68 03 0e 00 00       	push   $0xe03
f01126d1:	6a ff                	push   $0xffffffff
f01126d3:	50                   	push   %eax
f01126d4:	68 00 00 00 40       	push   $0x40000000
f01126d9:	68 00 00 00 f0       	push   $0xf0000000
f01126de:	ff 75 cc             	pushl  -0x34(%ebp)
f01126e1:	e8 c7 2a 00 00       	call   f01151ad <CCP>
f01126e6:	83 c4 30             	add    $0x30,%esp
f01126e9:	85 c0                	test   %eax,%eax
f01126eb:	75 25                	jne    f0112712 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01126ed:	83 ec 04             	sub    $0x4,%esp
f01126f0:	68 10 92 13 f0       	push   $0xf0139210
f01126f5:	68 d4 03 00 00       	push   $0x3d4
f01126fa:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01126ff:	e8 2e dc fe ff       	call   f0100332 <_warn>
f0112704:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112707:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011270b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112712:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112715:	89 d0                	mov    %edx,%eax
f0112717:	01 c0                	add    %eax,%eax
f0112719:	01 d0                	add    %edx,%eax
f011271b:	c1 e0 02             	shl    $0x2,%eax
f011271e:	83 ec 08             	sub    $0x8,%esp
f0112721:	6a 02                	push   $0x2
f0112723:	6a 07                	push   $0x7
f0112725:	6a 03                	push   $0x3
f0112727:	68 07 0e 00 00       	push   $0xe07
f011272c:	68 03 0e 00 00       	push   $0xe03
f0112731:	6a 02                	push   $0x2
f0112733:	50                   	push   %eax
f0112734:	68 00 00 00 40       	push   $0x40000000
f0112739:	68 00 00 00 f0       	push   $0xf0000000
f011273e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112741:	e8 67 2a 00 00       	call   f01151ad <CCP>
f0112746:	83 c4 30             	add    $0x30,%esp
f0112749:	85 c0                	test   %eax,%eax
f011274b:	75 1e                	jne    f011276b <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011274d:	83 ec 04             	sub    $0x4,%esp
f0112750:	68 10 92 13 f0       	push   $0xf0139210
f0112755:	68 db 03 00 00       	push   $0x3db
f011275a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011275f:	e8 ce db fe ff       	call   f0100332 <_warn>
f0112764:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112767:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011276b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011276f:	74 04                	je     f0112775 <test_share_chunk+0x36d>
f0112771:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112775:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0112779:	b8 1c 76 6e f0       	mov    $0xf06e761c,%eax
f011277e:	05 00 00 00 10       	add    $0x10000000,%eax
f0112783:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112786:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112789:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f011278e:	83 ec 08             	sub    $0x8,%esp
f0112791:	6a 02                	push   $0x2
f0112793:	6a 07                	push   $0x7
f0112795:	6a 03                	push   $0x3
f0112797:	68 07 0e 00 00       	push   $0xe07
f011279c:	68 03 0e 00 00       	push   $0xe03
f01127a1:	6a 02                	push   $0x2
f01127a3:	50                   	push   %eax
f01127a4:	68 00 00 0a 40       	push   $0x400a0000
f01127a9:	68 00 00 0a f0       	push   $0xf00a0000
f01127ae:	ff 75 cc             	pushl  -0x34(%ebp)
f01127b1:	e8 f7 29 00 00       	call   f01151ad <CCP>
f01127b6:	83 c4 30             	add    $0x30,%esp
f01127b9:	85 c0                	test   %eax,%eax
f01127bb:	75 1e                	jne    f01127db <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01127bd:	83 ec 04             	sub    $0x4,%esp
f01127c0:	68 10 92 13 f0       	push   $0xf0139210
f01127c5:	68 e5 03 00 00       	push   $0x3e5
f01127ca:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01127cf:	e8 5e db fe ff       	call   f0100332 <_warn>
f01127d4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01127d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01127db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01127df:	74 04                	je     f01127e5 <test_share_chunk+0x3dd>
f01127e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01127e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01127e9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01127ed:	0f 84 a4 00 00 00    	je     f0112897 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01127f3:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01127fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01127fd:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0112800:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0112807:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011280a:	8a 00                	mov    (%eax),%al
f011280c:	3c 41                	cmp    $0x41,%al
f011280e:	75 09                	jne    f0112819 <test_share_chunk+0x411>
f0112810:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112813:	8a 00                	mov    (%eax),%al
f0112815:	3c 41                	cmp    $0x41,%al
f0112817:	74 1e                	je     f0112837 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112819:	83 ec 04             	sub    $0x4,%esp
f011281c:	68 58 92 13 f0       	push   $0xf0139258
f0112821:	68 f2 03 00 00       	push   $0x3f2
f0112826:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011282b:	e8 02 db fe ff       	call   f0100332 <_warn>
f0112830:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112833:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112837:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011283b:	74 04                	je     f0112841 <test_share_chunk+0x439>
f011283d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112841:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112845:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f011284c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011284f:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0112852:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112859:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011285c:	8a 00                	mov    (%eax),%al
f011285e:	3c 43                	cmp    $0x43,%al
f0112860:	75 09                	jne    f011286b <test_share_chunk+0x463>
f0112862:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112865:	8a 00                	mov    (%eax),%al
f0112867:	3c 43                	cmp    $0x43,%al
f0112869:	74 1e                	je     f0112889 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011286b:	83 ec 04             	sub    $0x4,%esp
f011286e:	68 58 92 13 f0       	push   $0xf0139258
f0112873:	68 fd 03 00 00       	push   $0x3fd
f0112878:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011287d:	e8 b0 da fe ff       	call   f0100332 <_warn>
f0112882:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112885:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112889:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011288d:	74 04                	je     f0112893 <test_share_chunk+0x48b>
f011288f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112893:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112897:	83 ec 0c             	sub    $0xc,%esp
f011289a:	68 67 88 13 f0       	push   $0xf0138867
f011289f:	e8 89 e3 fe ff       	call   f0100c2d <cprintf>
f01128a4:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f01128a7:	83 ec 0c             	sub    $0xc,%esp
f01128aa:	68 28 93 13 f0       	push   $0xf0139328
f01128af:	e8 79 e3 fe ff       	call   f0100c2d <cprintf>
f01128b4:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01128b7:	e8 0e 95 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01128bc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01128bf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01128c2:	89 d0                	mov    %edx,%eax
f01128c4:	c1 e0 03             	shl    $0x3,%eax
f01128c7:	01 d0                	add    %edx,%eax
f01128c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01128d0:	01 d0                	add    %edx,%eax
f01128d2:	c1 e0 03             	shl    $0x3,%eax
f01128d5:	83 ec 0c             	sub    $0xc,%esp
f01128d8:	6a 06                	push   $0x6
f01128da:	50                   	push   %eax
f01128db:	6a 00                	push   $0x0
f01128dd:	68 00 00 00 40       	push   $0x40000000
f01128e2:	ff 75 cc             	pushl  -0x34(%ebp)
f01128e5:	e8 72 56 ff ff       	call   f0107f5c <share_chunk>
f01128ea:	83 c4 20             	add    $0x20,%esp
f01128ed:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01128f0:	e8 d5 94 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01128f5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01128f8:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01128fc:	75 0b                	jne    f0112909 <test_share_chunk+0x501>
f01128fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112901:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112904:	83 f8 01             	cmp    $0x1,%eax
f0112907:	74 28                	je     f0112931 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112909:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011290c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011290f:	83 ec 0c             	sub    $0xc,%esp
f0112912:	50                   	push   %eax
f0112913:	ff 75 a0             	pushl  -0x60(%ebp)
f0112916:	68 d8 92 13 f0       	push   $0xf01392d8
f011291b:	68 13 04 00 00       	push   $0x413
f0112920:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112925:	e8 08 da fe ff       	call   f0100332 <_warn>
f011292a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011292d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112931:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112935:	74 04                	je     f011293b <test_share_chunk+0x533>
f0112937:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011293b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011293f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112946:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112949:	05 00 80 02 00       	add    $0x28000,%eax
f011294e:	c1 e0 02             	shl    $0x2,%eax
f0112951:	83 ec 08             	sub    $0x8,%esp
f0112954:	6a 02                	push   $0x2
f0112956:	6a 07                	push   $0x7
f0112958:	6a 03                	push   $0x3
f011295a:	6a 07                	push   $0x7
f011295c:	6a 07                	push   $0x7
f011295e:	6a ff                	push   $0xffffffff
f0112960:	50                   	push   %eax
f0112961:	6a 00                	push   $0x0
f0112963:	68 00 00 00 40       	push   $0x40000000
f0112968:	ff 75 cc             	pushl  -0x34(%ebp)
f011296b:	e8 3d 28 00 00       	call   f01151ad <CCP>
f0112970:	83 c4 30             	add    $0x30,%esp
f0112973:	85 c0                	test   %eax,%eax
f0112975:	75 25                	jne    f011299c <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112977:	83 ec 04             	sub    $0x4,%esp
f011297a:	68 10 92 13 f0       	push   $0xf0139210
f011297f:	68 1c 04 00 00       	push   $0x41c
f0112984:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112989:	e8 a4 d9 fe ff       	call   f0100332 <_warn>
f011298e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112991:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112995:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011299c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011299f:	89 d0                	mov    %edx,%eax
f01129a1:	01 c0                	add    %eax,%eax
f01129a3:	01 d0                	add    %edx,%eax
f01129a5:	c1 e0 02             	shl    $0x2,%eax
f01129a8:	83 ec 08             	sub    $0x8,%esp
f01129ab:	6a 02                	push   $0x2
f01129ad:	6a 07                	push   $0x7
f01129af:	6a 03                	push   $0x3
f01129b1:	6a 07                	push   $0x7
f01129b3:	6a 07                	push   $0x7
f01129b5:	6a 03                	push   $0x3
f01129b7:	50                   	push   %eax
f01129b8:	6a 00                	push   $0x0
f01129ba:	68 00 00 00 40       	push   $0x40000000
f01129bf:	ff 75 cc             	pushl  -0x34(%ebp)
f01129c2:	e8 e6 27 00 00       	call   f01151ad <CCP>
f01129c7:	83 c4 30             	add    $0x30,%esp
f01129ca:	85 c0                	test   %eax,%eax
f01129cc:	75 1e                	jne    f01129ec <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01129ce:	83 ec 04             	sub    $0x4,%esp
f01129d1:	68 10 92 13 f0       	push   $0xf0139210
f01129d6:	68 23 04 00 00       	push   $0x423
f01129db:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01129e0:	e8 4d d9 fe ff       	call   f0100332 <_warn>
f01129e5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01129e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01129ec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01129f0:	74 04                	je     f01129f6 <test_share_chunk+0x5ee>
f01129f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129f6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01129fa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01129fd:	89 d0                	mov    %edx,%eax
f01129ff:	01 c0                	add    %eax,%eax
f0112a01:	01 d0                	add    %edx,%eax
f0112a03:	c1 e0 02             	shl    $0x2,%eax
f0112a06:	f7 d8                	neg    %eax
f0112a08:	05 00 00 0a 00       	add    $0xa0000,%eax
f0112a0d:	83 ec 08             	sub    $0x8,%esp
f0112a10:	6a 02                	push   $0x2
f0112a12:	6a 07                	push   $0x7
f0112a14:	6a 03                	push   $0x3
f0112a16:	6a 07                	push   $0x7
f0112a18:	6a 07                	push   $0x7
f0112a1a:	6a 02                	push   $0x2
f0112a1c:	50                   	push   %eax
f0112a1d:	68 00 30 00 00       	push   $0x3000
f0112a22:	68 00 30 00 40       	push   $0x40003000
f0112a27:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a2a:	e8 7e 27 00 00       	call   f01151ad <CCP>
f0112a2f:	83 c4 30             	add    $0x30,%esp
f0112a32:	85 c0                	test   %eax,%eax
f0112a34:	75 1e                	jne    f0112a54 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112a36:	83 ec 04             	sub    $0x4,%esp
f0112a39:	68 10 92 13 f0       	push   $0xf0139210
f0112a3e:	68 2b 04 00 00       	push   $0x42b
f0112a43:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112a48:	e8 e5 d8 fe ff       	call   f0100332 <_warn>
f0112a4d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a50:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112a54:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112a58:	74 04                	je     f0112a5e <test_share_chunk+0x656>
f0112a5a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a5e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112a62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112a65:	c1 e0 02             	shl    $0x2,%eax
f0112a68:	83 ec 08             	sub    $0x8,%esp
f0112a6b:	6a 02                	push   $0x2
f0112a6d:	6a 07                	push   $0x7
f0112a6f:	6a 03                	push   $0x3
f0112a71:	6a 07                	push   $0x7
f0112a73:	6a 07                	push   $0x7
f0112a75:	6a 03                	push   $0x3
f0112a77:	50                   	push   %eax
f0112a78:	68 00 00 0a 00       	push   $0xa0000
f0112a7d:	68 00 00 0a 40       	push   $0x400a0000
f0112a82:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a85:	e8 23 27 00 00       	call   f01151ad <CCP>
f0112a8a:	83 c4 30             	add    $0x30,%esp
f0112a8d:	85 c0                	test   %eax,%eax
f0112a8f:	75 1e                	jne    f0112aaf <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112a91:	83 ec 04             	sub    $0x4,%esp
f0112a94:	68 10 92 13 f0       	push   $0xf0139210
f0112a99:	68 33 04 00 00       	push   $0x433
f0112a9e:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112aa3:	e8 8a d8 fe ff       	call   f0100332 <_warn>
f0112aa8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112aab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112aaf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ab3:	74 04                	je     f0112ab9 <test_share_chunk+0x6b1>
f0112ab5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ab9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112abd:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0112ac1:	0f 84 92 00 00 00    	je     f0112b59 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0112ac7:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0112ace:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0112ad5:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0112adc:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0112ae3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ae6:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0112ae9:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0112af0:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112af7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112afa:	8a 00                	mov    (%eax),%al
f0112afc:	3c 41                	cmp    $0x41,%al
f0112afe:	75 2d                	jne    f0112b2d <test_share_chunk+0x725>
f0112b00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b03:	8a 00                	mov    (%eax),%al
f0112b05:	3c 41                	cmp    $0x41,%al
f0112b07:	75 24                	jne    f0112b2d <test_share_chunk+0x725>
f0112b09:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112b0c:	8a 00                	mov    (%eax),%al
f0112b0e:	3c 41                	cmp    $0x41,%al
f0112b10:	75 1b                	jne    f0112b2d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112b12:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b15:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112b17:	3c 44                	cmp    $0x44,%al
f0112b19:	75 12                	jne    f0112b2d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112b1b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112b1e:	8a 00                	mov    (%eax),%al
f0112b20:	3c 44                	cmp    $0x44,%al
f0112b22:	75 09                	jne    f0112b2d <test_share_chunk+0x725>
f0112b24:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112b27:	8a 00                	mov    (%eax),%al
f0112b29:	3c 44                	cmp    $0x44,%al
f0112b2b:	74 1e                	je     f0112b4b <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112b2d:	83 ec 04             	sub    $0x4,%esp
f0112b30:	68 58 92 13 f0       	push   $0xf0139258
f0112b35:	68 45 04 00 00       	push   $0x445
f0112b3a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112b3f:	e8 ee d7 fe ff       	call   f0100332 <_warn>
f0112b44:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112b47:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112b4b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b4f:	74 04                	je     f0112b55 <test_share_chunk+0x74d>
f0112b51:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112b55:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112b59:	83 ec 0c             	sub    $0xc,%esp
f0112b5c:	68 ca 88 13 f0       	push   $0xf01388ca
f0112b61:	e8 c7 e0 fe ff       	call   f0100c2d <cprintf>
f0112b66:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0112b69:	83 ec 0c             	sub    $0xc,%esp
f0112b6c:	68 64 93 13 f0       	push   $0xf0139364
f0112b71:	e8 b7 e0 fe ff       	call   f0100c2d <cprintf>
f0112b76:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112b79:	e8 4c 92 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112b7e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0112b81:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112b84:	89 d0                	mov    %edx,%eax
f0112b86:	01 c0                	add    %eax,%eax
f0112b88:	01 d0                	add    %edx,%eax
f0112b8a:	01 c0                	add    %eax,%eax
f0112b8c:	01 d0                	add    %edx,%eax
f0112b8e:	83 ec 0c             	sub    $0xc,%esp
f0112b91:	6a 04                	push   $0x4
f0112b93:	50                   	push   %eax
f0112b94:	68 00 fc 3f 00       	push   $0x3ffc00
f0112b99:	68 00 fc 09 00       	push   $0x9fc00
f0112b9e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ba1:	e8 b6 53 ff ff       	call   f0107f5c <share_chunk>
f0112ba6:	83 c4 20             	add    $0x20,%esp
f0112ba9:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112bac:	e8 19 92 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112bb1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112bb4:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0112bb8:	75 0b                	jne    f0112bc5 <test_share_chunk+0x7bd>
f0112bba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112bbd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112bc0:	83 f8 01             	cmp    $0x1,%eax
f0112bc3:	74 28                	je     f0112bed <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112bc5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112bc8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112bcb:	83 ec 0c             	sub    $0xc,%esp
f0112bce:	50                   	push   %eax
f0112bcf:	ff 75 8c             	pushl  -0x74(%ebp)
f0112bd2:	68 d8 92 13 f0       	push   $0xf01392d8
f0112bd7:	68 5b 04 00 00       	push   $0x45b
f0112bdc:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112be1:	e8 4c d7 fe ff       	call   f0100332 <_warn>
f0112be6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112be9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112bed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112bf1:	74 04                	je     f0112bf7 <test_share_chunk+0x7ef>
f0112bf3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112bf7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112bfb:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112c02:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112c05:	89 d0                	mov    %edx,%eax
f0112c07:	01 c0                	add    %eax,%eax
f0112c09:	01 d0                	add    %edx,%eax
f0112c0b:	c1 e0 02             	shl    $0x2,%eax
f0112c0e:	83 ec 08             	sub    $0x8,%esp
f0112c11:	6a 02                	push   $0x2
f0112c13:	6a 07                	push   $0x7
f0112c15:	6a 07                	push   $0x7
f0112c17:	6a 07                	push   $0x7
f0112c19:	6a 05                	push   $0x5
f0112c1b:	6a ff                	push   $0xffffffff
f0112c1d:	50                   	push   %eax
f0112c1e:	68 00 f0 3f 00       	push   $0x3ff000
f0112c23:	68 00 f0 09 00       	push   $0x9f000
f0112c28:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c2b:	e8 7d 25 00 00       	call   f01151ad <CCP>
f0112c30:	83 c4 30             	add    $0x30,%esp
f0112c33:	85 c0                	test   %eax,%eax
f0112c35:	75 25                	jne    f0112c5c <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c37:	83 ec 04             	sub    $0x4,%esp
f0112c3a:	68 10 92 13 f0       	push   $0xf0139210
f0112c3f:	68 64 04 00 00       	push   $0x464
f0112c44:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112c49:	e8 e4 d6 fe ff       	call   f0100332 <_warn>
f0112c4e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c51:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112c55:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0112c5c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c60:	74 04                	je     f0112c66 <test_share_chunk+0x85e>
f0112c62:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c66:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112c6a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c6d:	c1 e0 02             	shl    $0x2,%eax
f0112c70:	83 ec 08             	sub    $0x8,%esp
f0112c73:	6a 02                	push   $0x2
f0112c75:	6a 07                	push   $0x7
f0112c77:	6a 07                	push   $0x7
f0112c79:	6a 07                	push   $0x7
f0112c7b:	6a 05                	push   $0x5
f0112c7d:	6a 03                	push   $0x3
f0112c7f:	50                   	push   %eax
f0112c80:	68 00 f0 3f 00       	push   $0x3ff000
f0112c85:	68 00 f0 09 00       	push   $0x9f000
f0112c8a:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c8d:	e8 1b 25 00 00       	call   f01151ad <CCP>
f0112c92:	83 c4 30             	add    $0x30,%esp
f0112c95:	85 c0                	test   %eax,%eax
f0112c97:	75 1e                	jne    f0112cb7 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c99:	83 ec 04             	sub    $0x4,%esp
f0112c9c:	68 10 92 13 f0       	push   $0xf0139210
f0112ca1:	68 6d 04 00 00       	push   $0x46d
f0112ca6:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112cab:	e8 82 d6 fe ff       	call   f0100332 <_warn>
f0112cb0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cb3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112cb7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112cbb:	74 04                	je     f0112cc1 <test_share_chunk+0x8b9>
f0112cbd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cc1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112cc5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112cc8:	c1 e0 03             	shl    $0x3,%eax
f0112ccb:	83 ec 08             	sub    $0x8,%esp
f0112cce:	6a 02                	push   $0x2
f0112cd0:	6a 07                	push   $0x7
f0112cd2:	6a 07                	push   $0x7
f0112cd4:	6a 07                	push   $0x7
f0112cd6:	6a 05                	push   $0x5
f0112cd8:	6a 04                	push   $0x4
f0112cda:	50                   	push   %eax
f0112cdb:	68 00 00 40 00       	push   $0x400000
f0112ce0:	68 00 00 0a 00       	push   $0xa0000
f0112ce5:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ce8:	e8 c0 24 00 00       	call   f01151ad <CCP>
f0112ced:	83 c4 30             	add    $0x30,%esp
f0112cf0:	85 c0                	test   %eax,%eax
f0112cf2:	75 1e                	jne    f0112d12 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112cf4:	83 ec 04             	sub    $0x4,%esp
f0112cf7:	68 10 92 13 f0       	push   $0xf0139210
f0112cfc:	68 75 04 00 00       	push   $0x475
f0112d01:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112d06:	e8 27 d6 fe ff       	call   f0100332 <_warn>
f0112d0b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d0e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112d12:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112d16:	74 04                	je     f0112d1c <test_share_chunk+0x914>
f0112d18:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d1c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112d20:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0112d24:	0f 84 b2 00 00 00    	je     f0112ddc <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0112d2a:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0112d31:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0112d38:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0112d3f:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0112d46:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0112d4d:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0112d54:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0112d5b:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0112d62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d65:	8a 00                	mov    (%eax),%al
f0112d67:	3c 44                	cmp    $0x44,%al
f0112d69:	75 45                	jne    f0112db0 <test_share_chunk+0x9a8>
f0112d6b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d6e:	8a 00                	mov    (%eax),%al
f0112d70:	3c 44                	cmp    $0x44,%al
f0112d72:	75 3c                	jne    f0112db0 <test_share_chunk+0x9a8>
f0112d74:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112d77:	8a 00                	mov    (%eax),%al
f0112d79:	3c 44                	cmp    $0x44,%al
f0112d7b:	75 33                	jne    f0112db0 <test_share_chunk+0x9a8>
f0112d7d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d80:	8a 00                	mov    (%eax),%al
f0112d82:	3c 44                	cmp    $0x44,%al
f0112d84:	75 2a                	jne    f0112db0 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0112d86:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d89:	8a 10                	mov    (%eax),%dl
f0112d8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112d8e:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0112d90:	38 c2                	cmp    %al,%dl
f0112d92:	75 1c                	jne    f0112db0 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0112d94:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d97:	8a 10                	mov    (%eax),%dl
f0112d99:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112d9c:	8a 00                	mov    (%eax),%al
f0112d9e:	38 c2                	cmp    %al,%dl
f0112da0:	75 0e                	jne    f0112db0 <test_share_chunk+0x9a8>
f0112da2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112da5:	8a 10                	mov    (%eax),%dl
f0112da7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112daa:	8a 00                	mov    (%eax),%al
f0112dac:	38 c2                	cmp    %al,%dl
f0112dae:	74 1e                	je     f0112dce <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112db0:	83 ec 04             	sub    $0x4,%esp
f0112db3:	68 58 92 13 f0       	push   $0xf0139258
f0112db8:	68 8a 04 00 00       	push   $0x48a
f0112dbd:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112dc2:	e8 6b d5 fe ff       	call   f0100332 <_warn>
f0112dc7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112dca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112dce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112dd2:	74 04                	je     f0112dd8 <test_share_chunk+0x9d0>
f0112dd4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112dd8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0112ddc:	83 ec 0c             	sub    $0xc,%esp
f0112ddf:	68 9c 93 13 f0       	push   $0xf013939c
f0112de4:	e8 44 de fe ff       	call   f0100c2d <cprintf>
f0112de9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0112dec:	83 ec 08             	sub    $0x8,%esp
f0112def:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112df2:	68 ac 93 13 f0       	push   $0xf01393ac
f0112df7:	e8 31 de fe ff       	call   f0100c2d <cprintf>
f0112dfc:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112dff:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112e03:	75 10                	jne    f0112e15 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0112e05:	83 ec 0c             	sub    $0xc,%esp
f0112e08:	68 dc 93 13 f0       	push   $0xf01393dc
f0112e0d:	e8 1b de fe ff       	call   f0100c2d <cprintf>
f0112e12:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112e15:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0112e1a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0112e1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112e20:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112e23:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112e28:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112e2b:	5b                   	pop    %ebx
f0112e2c:	5e                   	pop    %esi
f0112e2d:	5f                   	pop    %edi
f0112e2e:	5d                   	pop    %ebp
f0112e2f:	c3                   	ret    

f0112e30 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0112e30:	55                   	push   %ebp
f0112e31:	89 e5                	mov    %esp,%ebp
f0112e33:	57                   	push   %edi
f0112e34:	56                   	push   %esi
f0112e35:	53                   	push   %ebx
f0112e36:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112e3c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112e42:	bb dc 85 13 f0       	mov    $0xf01385dc,%ebx
f0112e47:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e4c:	89 c7                	mov    %eax,%edi
f0112e4e:	89 de                	mov    %ebx,%esi
f0112e50:	89 d1                	mov    %edx,%ecx
f0112e52:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e54:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112e5a:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112e5f:	b0 00                	mov    $0x0,%al
f0112e61:	89 d7                	mov    %edx,%edi
f0112e63:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112e65:	6a 00                	push   $0x0
f0112e67:	6a 0a                	push   $0xa
f0112e69:	6a 14                	push   $0x14
f0112e6b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112e71:	50                   	push   %eax
f0112e72:	e8 06 52 ff ff       	call   f010807d <env_create>
f0112e77:	83 c4 10             	add    $0x10,%esp
f0112e7a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112e7d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e80:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112e83:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0112e86:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e89:	8b 40 60             	mov    0x60(%eax),%eax
f0112e8c:	89 45 90             	mov    %eax,-0x70(%ebp)
f0112e8f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e92:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0112e95:	83 ec 0c             	sub    $0xc,%esp
f0112e98:	ff 75 d0             	pushl  -0x30(%ebp)
f0112e9b:	e8 d9 22 00 00       	call   f0115179 <ClearUserSpace>
f0112ea0:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0112ea3:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112eaa:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0112eb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112eb8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0112ebc:	83 ec 0c             	sub    $0xc,%esp
f0112ebf:	68 18 94 13 f0       	push   $0xf0139418
f0112ec4:	e8 64 dd fe ff       	call   f0100c2d <cprintf>
f0112ec9:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0112ecc:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0112ed3:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0112eda:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112edd:	8a 00                	mov    (%eax),%al
f0112edf:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0112ee5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112ee8:	8a 00                	mov    (%eax),%al
f0112eea:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0112ef0:	83 ec 08             	sub    $0x8,%esp
f0112ef3:	68 00 f0 bf ef       	push   $0xefbff000
f0112ef8:	ff 75 d0             	pushl  -0x30(%ebp)
f0112efb:	e8 e0 21 00 00       	call   f01150e0 <GP>
f0112f00:	83 c4 10             	add    $0x10,%esp
f0112f03:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112f06:	e8 bf 8e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112f0b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0112f0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112f11:	c1 e0 02             	shl    $0x2,%eax
f0112f14:	6a 02                	push   $0x2
f0112f16:	50                   	push   %eax
f0112f17:	68 00 f0 bf ef       	push   $0xefbff000
f0112f1c:	ff 75 d0             	pushl  -0x30(%ebp)
f0112f1f:	e8 52 50 ff ff       	call   f0107f76 <allocate_chunk>
f0112f24:	83 c4 10             	add    $0x10,%esp
f0112f27:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112f2a:	e8 9b 8e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112f2f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112f32:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112f36:	75 08                	jne    f0112f40 <test_allocate_chunk+0x110>
f0112f38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f3b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112f3e:	74 2a                	je     f0112f6a <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0112f40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f43:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112f46:	83 ec 08             	sub    $0x8,%esp
f0112f49:	6a 00                	push   $0x0
f0112f4b:	50                   	push   %eax
f0112f4c:	ff 75 b0             	pushl  -0x50(%ebp)
f0112f4f:	68 44 94 13 f0       	push   $0xf0139444
f0112f54:	68 c6 04 00 00       	push   $0x4c6
f0112f59:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112f5e:	e8 cf d3 fe ff       	call   f0100332 <_warn>
f0112f63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112f66:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112f6a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f6e:	74 04                	je     f0112f74 <test_allocate_chunk+0x144>
f0112f70:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f74:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112f78:	e8 4d 8e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112f7d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0112f80:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112f83:	01 c0                	add    %eax,%eax
f0112f85:	89 c1                	mov    %eax,%ecx
f0112f87:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0112f8a:	89 d0                	mov    %edx,%eax
f0112f8c:	c1 e0 02             	shl    $0x2,%eax
f0112f8f:	01 d0                	add    %edx,%eax
f0112f91:	f7 d8                	neg    %eax
f0112f93:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0112f98:	6a 02                	push   $0x2
f0112f9a:	51                   	push   %ecx
f0112f9b:	50                   	push   %eax
f0112f9c:	ff 75 d0             	pushl  -0x30(%ebp)
f0112f9f:	e8 d2 4f ff ff       	call   f0107f76 <allocate_chunk>
f0112fa4:	83 c4 10             	add    $0x10,%esp
f0112fa7:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112faa:	e8 1b 8e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0112faf:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112fb2:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112fb6:	75 08                	jne    f0112fc0 <test_allocate_chunk+0x190>
f0112fb8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112fbb:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112fbe:	74 2a                	je     f0112fea <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0112fc0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112fc3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112fc6:	83 ec 08             	sub    $0x8,%esp
f0112fc9:	6a 00                	push   $0x0
f0112fcb:	50                   	push   %eax
f0112fcc:	ff 75 b0             	pushl  -0x50(%ebp)
f0112fcf:	68 44 94 13 f0       	push   $0xf0139444
f0112fd4:	68 d4 04 00 00       	push   $0x4d4
f0112fd9:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0112fde:	e8 4f d3 fe ff       	call   f0100332 <_warn>
f0112fe3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112fe6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112fea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112fee:	74 04                	je     f0112ff4 <test_allocate_chunk+0x1c4>
f0112ff0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ff4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0112ff8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112ffb:	c1 e0 02             	shl    $0x2,%eax
f0112ffe:	83 ec 08             	sub    $0x8,%esp
f0113001:	6a 03                	push   $0x3
f0113003:	6a 00                	push   $0x0
f0113005:	6a 00                	push   $0x0
f0113007:	68 ff 0f 00 00       	push   $0xfff
f011300c:	ff 75 b8             	pushl  -0x48(%ebp)
f011300f:	6a 01                	push   $0x1
f0113011:	50                   	push   %eax
f0113012:	68 00 f0 bf ef       	push   $0xefbff000
f0113017:	6a 00                	push   $0x0
f0113019:	ff 75 d0             	pushl  -0x30(%ebp)
f011301c:	e8 8c 21 00 00       	call   f01151ad <CCP>
f0113021:	83 c4 30             	add    $0x30,%esp
f0113024:	85 c0                	test   %eax,%eax
f0113026:	75 1e                	jne    f0113046 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113028:	83 ec 04             	sub    $0x4,%esp
f011302b:	68 ac 94 13 f0       	push   $0xf01394ac
f0113030:	68 dc 04 00 00       	push   $0x4dc
f0113035:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011303a:	e8 f3 d2 fe ff       	call   f0100332 <_warn>
f011303f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113042:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113046:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011304a:	74 04                	je     f0113050 <test_allocate_chunk+0x220>
f011304c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113050:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113054:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113057:	8a 10                	mov    (%eax),%dl
f0113059:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f011305f:	38 c2                	cmp    %al,%dl
f0113061:	75 0f                	jne    f0113072 <test_allocate_chunk+0x242>
f0113063:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113066:	8a 10                	mov    (%eax),%dl
f0113068:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f011306e:	38 c2                	cmp    %al,%dl
f0113070:	74 1e                	je     f0113090 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113072:	83 ec 04             	sub    $0x4,%esp
f0113075:	68 f8 94 13 f0       	push   $0xf01394f8
f011307a:	68 e4 04 00 00       	push   $0x4e4
f011307f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113084:	e8 a9 d2 fe ff       	call   f0100332 <_warn>
f0113089:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011308c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113090:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113094:	74 04                	je     f011309a <test_allocate_chunk+0x26a>
f0113096:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011309a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011309e:	83 ec 0c             	sub    $0xc,%esp
f01130a1:	68 8d 92 13 f0       	push   $0xf013928d
f01130a6:	e8 82 db fe ff       	call   f0100c2d <cprintf>
f01130ab:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f01130ae:	83 ec 0c             	sub    $0xc,%esp
f01130b1:	68 30 95 13 f0       	push   $0xf0139530
f01130b6:	e8 72 db fe ff       	call   f0100c2d <cprintf>
f01130bb:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01130be:	e8 07 8d ff ff       	call   f010bdca <sys_calculate_free_frames>
f01130c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01130c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01130c9:	c1 e0 05             	shl    $0x5,%eax
f01130cc:	68 02 0e 00 00       	push   $0xe02
f01130d1:	50                   	push   %eax
f01130d2:	6a 00                	push   $0x0
f01130d4:	ff 75 d0             	pushl  -0x30(%ebp)
f01130d7:	e8 9a 4e ff ff       	call   f0107f76 <allocate_chunk>
f01130dc:	83 c4 10             	add    $0x10,%esp
f01130df:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01130e2:	e8 e3 8c ff ff       	call   f010bdca <sys_calculate_free_frames>
f01130e7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01130ea:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01130ee:	75 36                	jne    f0113126 <test_allocate_chunk+0x2f6>
f01130f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130f3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01130f6:	89 c1                	mov    %eax,%ecx
f01130f8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01130fb:	c1 e0 05             	shl    $0x5,%eax
f01130fe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113101:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113108:	99                   	cltd   
f0113109:	f7 fe                	idiv   %esi
f011310b:	89 c3                	mov    %eax,%ebx
f011310d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113110:	c1 e0 05             	shl    $0x5,%eax
f0113113:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113116:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011311d:	99                   	cltd   
f011311e:	f7 fe                	idiv   %esi
f0113120:	01 d8                	add    %ebx,%eax
f0113122:	39 c1                	cmp    %eax,%ecx
f0113124:	74 54                	je     f011317a <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113126:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113129:	c1 e0 05             	shl    $0x5,%eax
f011312c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011312f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113136:	99                   	cltd   
f0113137:	f7 ff                	idiv   %edi
f0113139:	89 c1                	mov    %eax,%ecx
f011313b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011313e:	c1 e0 05             	shl    $0x5,%eax
f0113141:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113144:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011314b:	99                   	cltd   
f011314c:	f7 fe                	idiv   %esi
f011314e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113151:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113154:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113157:	83 ec 08             	sub    $0x8,%esp
f011315a:	52                   	push   %edx
f011315b:	50                   	push   %eax
f011315c:	ff 75 a8             	pushl  -0x58(%ebp)
f011315f:	68 70 95 13 f0       	push   $0xf0139570
f0113164:	68 f9 04 00 00       	push   $0x4f9
f0113169:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011316e:	e8 bf d1 fe ff       	call   f0100332 <_warn>
f0113173:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113176:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011317a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011317e:	74 04                	je     f0113184 <test_allocate_chunk+0x354>
f0113180:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113184:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113188:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011318f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113192:	c1 e0 05             	shl    $0x5,%eax
f0113195:	83 ec 08             	sub    $0x8,%esp
f0113198:	6a 03                	push   $0x3
f011319a:	6a 00                	push   $0x0
f011319c:	6a 00                	push   $0x0
f011319e:	68 07 0e 00 00       	push   $0xe07
f01131a3:	68 03 0e 00 00       	push   $0xe03
f01131a8:	6a 01                	push   $0x1
f01131aa:	50                   	push   %eax
f01131ab:	6a 00                	push   $0x0
f01131ad:	6a 00                	push   $0x0
f01131af:	ff 75 d0             	pushl  -0x30(%ebp)
f01131b2:	e8 f6 1f 00 00       	call   f01151ad <CCP>
f01131b7:	83 c4 30             	add    $0x30,%esp
f01131ba:	85 c0                	test   %eax,%eax
f01131bc:	75 25                	jne    f01131e3 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01131be:	83 ec 04             	sub    $0x4,%esp
f01131c1:	68 ac 94 13 f0       	push   $0xf01394ac
f01131c6:	68 02 05 00 00       	push   $0x502
f01131cb:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01131d0:	e8 5d d1 fe ff       	call   f0100332 <_warn>
f01131d5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01131dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01131e3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131e7:	74 04                	je     f01131ed <test_allocate_chunk+0x3bd>
f01131e9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131ed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01131f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01131f5:	74 5a                	je     f0113251 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01131f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01131fa:	01 c0                	add    %eax,%eax
f01131fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01131ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113202:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0113205:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113208:	01 c0                	add    %eax,%eax
f011320a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011320d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113210:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113213:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113216:	8a 00                	mov    (%eax),%al
f0113218:	3c 4b                	cmp    $0x4b,%al
f011321a:	75 09                	jne    f0113225 <test_allocate_chunk+0x3f5>
f011321c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011321f:	8a 00                	mov    (%eax),%al
f0113221:	3c 4d                	cmp    $0x4d,%al
f0113223:	74 1e                	je     f0113243 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113225:	83 ec 04             	sub    $0x4,%esp
f0113228:	68 f8 94 13 f0       	push   $0xf01394f8
f011322d:	68 10 05 00 00       	push   $0x510
f0113232:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113237:	e8 f6 d0 fe ff       	call   f0100332 <_warn>
f011323c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011323f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113243:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113247:	74 04                	je     f011324d <test_allocate_chunk+0x41d>
f0113249:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011324d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113251:	83 ec 0c             	sub    $0xc,%esp
f0113254:	68 67 88 13 f0       	push   $0xf0138867
f0113259:	e8 cf d9 fe ff       	call   f0100c2d <cprintf>
f011325e:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113261:	83 ec 0c             	sub    $0xc,%esp
f0113264:	68 d0 95 13 f0       	push   $0xf01395d0
f0113269:	e8 bf d9 fe ff       	call   f0100c2d <cprintf>
f011326e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113271:	e8 54 8b ff ff       	call   f010bdca <sys_calculate_free_frames>
f0113276:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113279:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011327c:	c1 e0 06             	shl    $0x6,%eax
f011327f:	89 c2                	mov    %eax,%edx
f0113281:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113284:	c1 e0 05             	shl    $0x5,%eax
f0113287:	6a 00                	push   $0x0
f0113289:	52                   	push   %edx
f011328a:	50                   	push   %eax
f011328b:	ff 75 d0             	pushl  -0x30(%ebp)
f011328e:	e8 e3 4c ff ff       	call   f0107f76 <allocate_chunk>
f0113293:	83 c4 10             	add    $0x10,%esp
f0113296:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113299:	e8 2c 8b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011329e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f01132a1:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f01132a5:	75 36                	jne    f01132dd <test_allocate_chunk+0x4ad>
f01132a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132aa:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132ad:	89 c1                	mov    %eax,%ecx
f01132af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132b2:	c1 e0 06             	shl    $0x6,%eax
f01132b5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132b8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01132bf:	99                   	cltd   
f01132c0:	f7 ff                	idiv   %edi
f01132c2:	89 c3                	mov    %eax,%ebx
f01132c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132c7:	c1 e0 06             	shl    $0x6,%eax
f01132ca:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01132cd:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01132d4:	99                   	cltd   
f01132d5:	f7 fe                	idiv   %esi
f01132d7:	01 d8                	add    %ebx,%eax
f01132d9:	39 c1                	cmp    %eax,%ecx
f01132db:	74 54                	je     f0113331 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01132dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132e0:	c1 e0 06             	shl    $0x6,%eax
f01132e3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132e6:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01132ed:	99                   	cltd   
f01132ee:	f7 fb                	idiv   %ebx
f01132f0:	89 c1                	mov    %eax,%ecx
f01132f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132f5:	c1 e0 06             	shl    $0x6,%eax
f01132f8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01132fb:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113302:	99                   	cltd   
f0113303:	f7 ff                	idiv   %edi
f0113305:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113308:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011330b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011330e:	83 ec 08             	sub    $0x8,%esp
f0113311:	52                   	push   %edx
f0113312:	50                   	push   %eax
f0113313:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113316:	68 70 95 13 f0       	push   $0xf0139570
f011331b:	68 26 05 00 00       	push   $0x526
f0113320:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113325:	e8 08 d0 fe ff       	call   f0100332 <_warn>
f011332a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011332d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113331:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113335:	74 04                	je     f011333b <test_allocate_chunk+0x50b>
f0113337:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011333b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011333f:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113346:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113349:	c1 e0 06             	shl    $0x6,%eax
f011334c:	89 c2                	mov    %eax,%edx
f011334e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113351:	c1 e0 05             	shl    $0x5,%eax
f0113354:	83 ec 08             	sub    $0x8,%esp
f0113357:	6a 03                	push   $0x3
f0113359:	6a 00                	push   $0x0
f011335b:	6a 00                	push   $0x0
f011335d:	68 07 0e 00 00       	push   $0xe07
f0113362:	6a 01                	push   $0x1
f0113364:	6a 01                	push   $0x1
f0113366:	52                   	push   %edx
f0113367:	50                   	push   %eax
f0113368:	6a 00                	push   $0x0
f011336a:	ff 75 d0             	pushl  -0x30(%ebp)
f011336d:	e8 3b 1e 00 00       	call   f01151ad <CCP>
f0113372:	83 c4 30             	add    $0x30,%esp
f0113375:	85 c0                	test   %eax,%eax
f0113377:	75 25                	jne    f011339e <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113379:	83 ec 04             	sub    $0x4,%esp
f011337c:	68 ac 94 13 f0       	push   $0xf01394ac
f0113381:	68 2f 05 00 00       	push   $0x52f
f0113386:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011338b:	e8 a2 cf fe ff       	call   f0100332 <_warn>
f0113390:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113393:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113397:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011339e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133a2:	74 04                	je     f01133a8 <test_allocate_chunk+0x578>
f01133a4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01133a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f01133ac:	83 ec 0c             	sub    $0xc,%esp
f01133af:	68 ca 88 13 f0       	push   $0xf01388ca
f01133b4:	e8 74 d8 fe ff       	call   f0100c2d <cprintf>
f01133b9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f01133bc:	83 ec 0c             	sub    $0xc,%esp
f01133bf:	68 10 96 13 f0       	push   $0xf0139610
f01133c4:	e8 64 d8 fe ff       	call   f0100c2d <cprintf>
f01133c9:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01133cc:	e8 f9 89 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01133d1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01133d4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133d7:	c1 e0 06             	shl    $0x6,%eax
f01133da:	68 06 0e 00 00       	push   $0xe06
f01133df:	50                   	push   %eax
f01133e0:	68 00 00 00 80       	push   $0x80000000
f01133e5:	ff 75 d0             	pushl  -0x30(%ebp)
f01133e8:	e8 89 4b ff ff       	call   f0107f76 <allocate_chunk>
f01133ed:	83 c4 10             	add    $0x10,%esp
f01133f0:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01133f3:	e8 d2 89 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01133f8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01133fb:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01133ff:	75 36                	jne    f0113437 <test_allocate_chunk+0x607>
f0113401:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113404:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113407:	89 c1                	mov    %eax,%ecx
f0113409:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011340c:	c1 e0 06             	shl    $0x6,%eax
f011340f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113412:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113419:	99                   	cltd   
f011341a:	f7 fb                	idiv   %ebx
f011341c:	89 c3                	mov    %eax,%ebx
f011341e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113421:	c1 e0 06             	shl    $0x6,%eax
f0113424:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113427:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011342e:	99                   	cltd   
f011342f:	f7 fe                	idiv   %esi
f0113431:	01 d8                	add    %ebx,%eax
f0113433:	39 c1                	cmp    %eax,%ecx
f0113435:	74 54                	je     f011348b <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0113437:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011343a:	c1 e0 06             	shl    $0x6,%eax
f011343d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113440:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113447:	99                   	cltd   
f0113448:	f7 ff                	idiv   %edi
f011344a:	89 c1                	mov    %eax,%ecx
f011344c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011344f:	c1 e0 06             	shl    $0x6,%eax
f0113452:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113455:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011345c:	99                   	cltd   
f011345d:	f7 fb                	idiv   %ebx
f011345f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113462:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113465:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113468:	83 ec 08             	sub    $0x8,%esp
f011346b:	52                   	push   %edx
f011346c:	50                   	push   %eax
f011346d:	ff 75 9c             	pushl  -0x64(%ebp)
f0113470:	68 70 95 13 f0       	push   $0xf0139570
f0113475:	68 45 05 00 00       	push   $0x545
f011347a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011347f:	e8 ae ce fe ff       	call   f0100332 <_warn>
f0113484:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113487:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011348b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011348f:	74 04                	je     f0113495 <test_allocate_chunk+0x665>
f0113491:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113495:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113499:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01134a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01134a3:	c1 e0 06             	shl    $0x6,%eax
f01134a6:	83 ec 08             	sub    $0x8,%esp
f01134a9:	6a 03                	push   $0x3
f01134ab:	6a 00                	push   $0x0
f01134ad:	6a 00                	push   $0x0
f01134af:	68 07 0e 00 00       	push   $0xe07
f01134b4:	68 07 0e 00 00       	push   $0xe07
f01134b9:	6a 01                	push   $0x1
f01134bb:	50                   	push   %eax
f01134bc:	68 00 00 00 80       	push   $0x80000000
f01134c1:	6a 00                	push   $0x0
f01134c3:	ff 75 d0             	pushl  -0x30(%ebp)
f01134c6:	e8 e2 1c 00 00       	call   f01151ad <CCP>
f01134cb:	83 c4 30             	add    $0x30,%esp
f01134ce:	85 c0                	test   %eax,%eax
f01134d0:	75 25                	jne    f01134f7 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01134d2:	83 ec 04             	sub    $0x4,%esp
f01134d5:	68 ac 94 13 f0       	push   $0xf01394ac
f01134da:	68 4e 05 00 00       	push   $0x54e
f01134df:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01134e4:	e8 49 ce fe ff       	call   f0100332 <_warn>
f01134e9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134ec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01134f0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01134f7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134fb:	74 04                	je     f0113501 <test_allocate_chunk+0x6d1>
f01134fd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113501:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113505:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113509:	74 6f                	je     f011357a <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011350b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011350e:	01 c0                	add    %eax,%eax
f0113510:	05 00 00 00 80       	add    $0x80000000,%eax
f0113515:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113518:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011351b:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f011351e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113521:	89 d0                	mov    %edx,%eax
f0113523:	c1 e0 02             	shl    $0x2,%eax
f0113526:	01 d0                	add    %edx,%eax
f0113528:	01 c0                	add    %eax,%eax
f011352a:	01 d0                	add    %edx,%eax
f011352c:	01 c0                	add    %eax,%eax
f011352e:	05 00 00 00 80       	add    $0x80000000,%eax
f0113533:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113536:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113539:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011353c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011353f:	8a 00                	mov    (%eax),%al
f0113541:	3c 4b                	cmp    $0x4b,%al
f0113543:	75 09                	jne    f011354e <test_allocate_chunk+0x71e>
f0113545:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113548:	8a 00                	mov    (%eax),%al
f011354a:	3c 4d                	cmp    $0x4d,%al
f011354c:	74 1e                	je     f011356c <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011354e:	83 ec 04             	sub    $0x4,%esp
f0113551:	68 f8 94 13 f0       	push   $0xf01394f8
f0113556:	68 5c 05 00 00       	push   $0x55c
f011355b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113560:	e8 cd cd fe ff       	call   f0100332 <_warn>
f0113565:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113568:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011356c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113570:	74 04                	je     f0113576 <test_allocate_chunk+0x746>
f0113572:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113576:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011357a:	83 ec 0c             	sub    $0xc,%esp
f011357d:	68 9c 93 13 f0       	push   $0xf013939c
f0113582:	e8 a6 d6 fe ff       	call   f0100c2d <cprintf>
f0113587:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011358a:	83 ec 0c             	sub    $0xc,%esp
f011358d:	68 4c 96 13 f0       	push   $0xf013964c
f0113592:	e8 96 d6 fe ff       	call   f0100c2d <cprintf>
f0113597:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011359a:	e8 2b 88 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011359f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f01135a2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01135a5:	89 d0                	mov    %edx,%eax
f01135a7:	01 c0                	add    %eax,%eax
f01135a9:	01 d0                	add    %edx,%eax
f01135ab:	01 c0                	add    %eax,%eax
f01135ad:	01 d0                	add    %edx,%eax
f01135af:	68 04 0e 00 00       	push   $0xe04
f01135b4:	50                   	push   %eax
f01135b5:	68 00 fc 3f 40       	push   $0x403ffc00
f01135ba:	ff 75 d0             	pushl  -0x30(%ebp)
f01135bd:	e8 b4 49 ff ff       	call   f0107f76 <allocate_chunk>
f01135c2:	83 c4 10             	add    $0x10,%esp
f01135c5:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01135c8:	e8 fd 87 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01135cd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01135d0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01135d4:	75 0b                	jne    f01135e1 <test_allocate_chunk+0x7b1>
f01135d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135d9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135dc:	83 f8 05             	cmp    $0x5,%eax
f01135df:	74 2a                	je     f011360b <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01135e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135e4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135e7:	83 ec 08             	sub    $0x8,%esp
f01135ea:	6a 05                	push   $0x5
f01135ec:	50                   	push   %eax
f01135ed:	ff 75 98             	pushl  -0x68(%ebp)
f01135f0:	68 70 95 13 f0       	push   $0xf0139570
f01135f5:	68 73 05 00 00       	push   $0x573
f01135fa:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01135ff:	e8 2e cd fe ff       	call   f0100332 <_warn>
f0113604:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113607:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011360b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011360f:	74 04                	je     f0113615 <test_allocate_chunk+0x7e5>
f0113611:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113615:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113619:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113620:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113623:	89 d0                	mov    %edx,%eax
f0113625:	01 c0                	add    %eax,%eax
f0113627:	01 d0                	add    %edx,%eax
f0113629:	c1 e0 02             	shl    $0x2,%eax
f011362c:	83 ec 08             	sub    $0x8,%esp
f011362f:	6a 03                	push   $0x3
f0113631:	6a 00                	push   $0x0
f0113633:	6a 00                	push   $0x0
f0113635:	68 07 0e 00 00       	push   $0xe07
f011363a:	68 05 0e 00 00       	push   $0xe05
f011363f:	6a 01                	push   $0x1
f0113641:	50                   	push   %eax
f0113642:	68 00 f0 3f 40       	push   $0x403ff000
f0113647:	6a 00                	push   $0x0
f0113649:	ff 75 d0             	pushl  -0x30(%ebp)
f011364c:	e8 5c 1b 00 00       	call   f01151ad <CCP>
f0113651:	83 c4 30             	add    $0x30,%esp
f0113654:	85 c0                	test   %eax,%eax
f0113656:	75 25                	jne    f011367d <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113658:	83 ec 04             	sub    $0x4,%esp
f011365b:	68 ac 94 13 f0       	push   $0xf01394ac
f0113660:	68 7c 05 00 00       	push   $0x57c
f0113665:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011366a:	e8 c3 cc fe ff       	call   f0100332 <_warn>
f011366f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113672:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113676:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f011367d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113681:	74 04                	je     f0113687 <test_allocate_chunk+0x857>
f0113683:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113687:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011368b:	83 ec 0c             	sub    $0xc,%esp
f011368e:	68 83 96 13 f0       	push   $0xf0139683
f0113693:	e8 95 d5 fe ff       	call   f0100c2d <cprintf>
f0113698:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011369b:	83 ec 08             	sub    $0x8,%esp
f011369e:	ff 75 e4             	pushl  -0x1c(%ebp)
f01136a1:	68 94 96 13 f0       	push   $0xf0139694
f01136a6:	e8 82 d5 fe ff       	call   f0100c2d <cprintf>
f01136ab:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01136ae:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01136b2:	75 10                	jne    f01136c4 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f01136b4:	83 ec 0c             	sub    $0xc,%esp
f01136b7:	68 c8 96 13 f0       	push   $0xf01396c8
f01136bc:	e8 6c d5 fe ff       	call   f0100c2d <cprintf>
f01136c1:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01136c4:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01136c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01136cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01136cf:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01136d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01136d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01136da:	5b                   	pop    %ebx
f01136db:	5e                   	pop    %esi
f01136dc:	5f                   	pop    %edi
f01136dd:	5d                   	pop    %ebp
f01136de:	c3                   	ret    

f01136df <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01136df:	55                   	push   %ebp
f01136e0:	89 e5                	mov    %esp,%ebp
f01136e2:	57                   	push   %edi
f01136e3:	56                   	push   %esi
f01136e4:	53                   	push   %ebx
f01136e5:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01136eb:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01136ee:	bb dc 85 13 f0       	mov    $0xf01385dc,%ebx
f01136f3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136f8:	89 c7                	mov    %eax,%edi
f01136fa:	89 de                	mov    %ebx,%esi
f01136fc:	89 d1                	mov    %edx,%ecx
f01136fe:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113700:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0113703:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113708:	b0 00                	mov    $0x0,%al
f011370a:	89 d7                	mov    %edx,%edi
f011370c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011370e:	6a 00                	push   $0x0
f0113710:	6a 0a                	push   $0xa
f0113712:	6a 14                	push   $0x14
f0113714:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113717:	50                   	push   %eax
f0113718:	e8 60 49 ff ff       	call   f010807d <env_create>
f011371d:	83 c4 10             	add    $0x10,%esp
f0113720:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113723:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113726:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113729:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011372c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011372f:	8b 40 60             	mov    0x60(%eax),%eax
f0113732:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113735:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113738:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011373b:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113742:	75 70 20 
f0113745:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011374c:	00 00 00 
f011374f:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113752:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113757:	b8 00 00 00 00       	mov    $0x0,%eax
f011375c:	89 d7                	mov    %edx,%edi
f011375e:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113760:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113766:	83 ec 08             	sub    $0x8,%esp
f0113769:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011376f:	52                   	push   %edx
f0113770:	50                   	push   %eax
f0113771:	e8 c7 cd 01 00       	call   f013053d <ltostr>
f0113776:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113779:	83 ec 04             	sub    $0x4,%esp
f011377c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113782:	50                   	push   %eax
f0113783:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113789:	50                   	push   %eax
f011378a:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0113790:	50                   	push   %eax
f0113791:	e8 9f ce 01 00       	call   f0130635 <strcconcat>
f0113796:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113799:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01137a0:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01137a7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f01137ae:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f01137b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f01137b9:	83 ec 0c             	sub    $0xc,%esp
f01137bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01137bf:	e8 b5 19 00 00       	call   f0115179 <ClearUserSpace>
f01137c4:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01137c7:	83 ec 0c             	sub    $0xc,%esp
f01137ca:	68 08 97 13 f0       	push   $0xf0139708
f01137cf:	e8 59 d4 fe ff       	call   f0100c2d <cprintf>
f01137d4:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01137d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01137da:	c1 e0 03             	shl    $0x3,%eax
f01137dd:	83 ec 04             	sub    $0x4,%esp
f01137e0:	50                   	push   %eax
f01137e1:	6a 00                	push   $0x0
f01137e3:	ff 75 d8             	pushl  -0x28(%ebp)
f01137e6:	e8 bf 47 ff ff       	call   f0107faa <calculate_required_frames>
f01137eb:	83 c4 10             	add    $0x10,%esp
f01137ee:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01137f1:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01137f5:	74 23                	je     f011381a <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01137f7:	83 ec 0c             	sub    $0xc,%esp
f01137fa:	6a 03                	push   $0x3
f01137fc:	ff 75 c8             	pushl  -0x38(%ebp)
f01137ff:	68 3c 97 13 f0       	push   $0xf013973c
f0113804:	68 b5 05 00 00       	push   $0x5b5
f0113809:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011380e:	e8 1f cb fe ff       	call   f0100332 <_warn>
f0113813:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113816:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011381a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011381e:	74 04                	je     f0113824 <test_calculate_required_frames+0x145>
f0113820:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113824:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0113828:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011382b:	c1 e0 02             	shl    $0x2,%eax
f011382e:	83 ec 04             	sub    $0x4,%esp
f0113831:	50                   	push   %eax
f0113832:	6a 00                	push   $0x0
f0113834:	ff 75 d8             	pushl  -0x28(%ebp)
f0113837:	e8 6e 47 ff ff       	call   f0107faa <calculate_required_frames>
f011383c:	83 c4 10             	add    $0x10,%esp
f011383f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0113842:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0113849:	74 26                	je     f0113871 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f011384b:	83 ec 0c             	sub    $0xc,%esp
f011384e:	68 01 04 00 00       	push   $0x401
f0113853:	ff 75 c8             	pushl  -0x38(%ebp)
f0113856:	68 3c 97 13 f0       	push   $0xf013973c
f011385b:	68 bf 05 00 00       	push   $0x5bf
f0113860:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113865:	e8 c8 ca fe ff       	call   f0100332 <_warn>
f011386a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011386d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113871:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113875:	74 04                	je     f011387b <test_calculate_required_frames+0x19c>
f0113877:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011387b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011387f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113882:	c1 e0 0a             	shl    $0xa,%eax
f0113885:	83 ec 04             	sub    $0x4,%esp
f0113888:	50                   	push   %eax
f0113889:	6a 00                	push   $0x0
f011388b:	ff 75 d8             	pushl  -0x28(%ebp)
f011388e:	e8 17 47 ff ff       	call   f0107faa <calculate_required_frames>
f0113893:	83 c4 10             	add    $0x10,%esp
f0113896:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0113899:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011389c:	c1 e0 0a             	shl    $0xa,%eax
f011389f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01138a2:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01138a9:	99                   	cltd   
f01138aa:	f7 fb                	idiv   %ebx
f01138ac:	89 c1                	mov    %eax,%ecx
f01138ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01138b1:	c1 e0 0a             	shl    $0xa,%eax
f01138b4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01138b7:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01138be:	99                   	cltd   
f01138bf:	f7 fe                	idiv   %esi
f01138c1:	01 c8                	add    %ecx,%eax
f01138c3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01138c6:	74 4c                	je     f0113914 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01138c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01138cb:	c1 e0 0a             	shl    $0xa,%eax
f01138ce:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01138d1:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01138d8:	99                   	cltd   
f01138d9:	f7 fb                	idiv   %ebx
f01138db:	89 c1                	mov    %eax,%ecx
f01138dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01138e0:	c1 e0 0a             	shl    $0xa,%eax
f01138e3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01138e6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01138ed:	99                   	cltd   
f01138ee:	f7 fe                	idiv   %esi
f01138f0:	01 c8                	add    %ecx,%eax
f01138f2:	83 ec 0c             	sub    $0xc,%esp
f01138f5:	50                   	push   %eax
f01138f6:	ff 75 c8             	pushl  -0x38(%ebp)
f01138f9:	68 3c 97 13 f0       	push   $0xf013973c
f01138fe:	68 c9 05 00 00       	push   $0x5c9
f0113903:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113908:	e8 25 ca fe ff       	call   f0100332 <_warn>
f011390d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113910:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113914:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113918:	74 04                	je     f011391e <test_calculate_required_frames+0x23f>
f011391a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011391e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0113922:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113925:	89 d0                	mov    %edx,%eax
f0113927:	01 c0                	add    %eax,%eax
f0113929:	01 d0                	add    %edx,%eax
f011392b:	01 c0                	add    %eax,%eax
f011392d:	83 ec 04             	sub    $0x4,%esp
f0113930:	50                   	push   %eax
f0113931:	68 00 10 00 00       	push   $0x1000
f0113936:	ff 75 d8             	pushl  -0x28(%ebp)
f0113939:	e8 6c 46 ff ff       	call   f0107faa <calculate_required_frames>
f011393e:	83 c4 10             	add    $0x10,%esp
f0113941:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113944:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113948:	74 23                	je     f011396d <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011394a:	83 ec 0c             	sub    $0xc,%esp
f011394d:	6a 03                	push   $0x3
f011394f:	ff 75 c8             	pushl  -0x38(%ebp)
f0113952:	68 3c 97 13 f0       	push   $0xf013973c
f0113957:	68 d5 05 00 00       	push   $0x5d5
f011395c:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113961:	e8 cc c9 fe ff       	call   f0100332 <_warn>
f0113966:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113969:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011396d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113971:	74 04                	je     f0113977 <test_calculate_required_frames+0x298>
f0113973:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113977:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011397b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011397e:	89 c2                	mov    %eax,%edx
f0113980:	01 d2                	add    %edx,%edx
f0113982:	01 d0                	add    %edx,%eax
f0113984:	83 ec 04             	sub    $0x4,%esp
f0113987:	50                   	push   %eax
f0113988:	68 00 18 00 00       	push   $0x1800
f011398d:	ff 75 d8             	pushl  -0x28(%ebp)
f0113990:	e8 15 46 ff ff       	call   f0107faa <calculate_required_frames>
f0113995:	83 c4 10             	add    $0x10,%esp
f0113998:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011399b:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011399f:	74 23                	je     f01139c4 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01139a1:	83 ec 0c             	sub    $0xc,%esp
f01139a4:	6a 03                	push   $0x3
f01139a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01139a9:	68 3c 97 13 f0       	push   $0xf013973c
f01139ae:	68 df 05 00 00       	push   $0x5df
f01139b3:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01139b8:	e8 75 c9 fe ff       	call   f0100332 <_warn>
f01139bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01139c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139c8:	74 04                	je     f01139ce <test_calculate_required_frames+0x2ef>
f01139ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01139d2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01139d5:	89 d0                	mov    %edx,%eax
f01139d7:	c1 e0 02             	shl    $0x2,%eax
f01139da:	01 d0                	add    %edx,%eax
f01139dc:	01 c0                	add    %eax,%eax
f01139de:	83 ec 04             	sub    $0x4,%esp
f01139e1:	50                   	push   %eax
f01139e2:	68 00 00 40 00       	push   $0x400000
f01139e7:	ff 75 d8             	pushl  -0x28(%ebp)
f01139ea:	e8 bb 45 ff ff       	call   f0107faa <calculate_required_frames>
f01139ef:	83 c4 10             	add    $0x10,%esp
f01139f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01139f5:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01139fc:	74 26                	je     f0113a24 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01139fe:	83 ec 0c             	sub    $0xc,%esp
f0113a01:	68 03 0a 00 00       	push   $0xa03
f0113a06:	ff 75 c8             	pushl  -0x38(%ebp)
f0113a09:	68 3c 97 13 f0       	push   $0xf013973c
f0113a0e:	68 e9 05 00 00       	push   $0x5e9
f0113a13:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113a18:	e8 15 c9 fe ff       	call   f0100332 <_warn>
f0113a1d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a20:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a24:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a28:	74 04                	je     f0113a2e <test_calculate_required_frames+0x34f>
f0113a2a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a2e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113a32:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113a35:	01 c0                	add    %eax,%eax
f0113a37:	83 ec 04             	sub    $0x4,%esp
f0113a3a:	50                   	push   %eax
f0113a3b:	68 00 00 70 00       	push   $0x700000
f0113a40:	ff 75 d8             	pushl  -0x28(%ebp)
f0113a43:	e8 62 45 ff ff       	call   f0107faa <calculate_required_frames>
f0113a48:	83 c4 10             	add    $0x10,%esp
f0113a4b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0113a4e:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0113a55:	74 26                	je     f0113a7d <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0113a57:	83 ec 0c             	sub    $0xc,%esp
f0113a5a:	68 02 02 00 00       	push   $0x202
f0113a5f:	ff 75 c8             	pushl  -0x38(%ebp)
f0113a62:	68 3c 97 13 f0       	push   $0xf013973c
f0113a67:	68 f5 05 00 00       	push   $0x5f5
f0113a6c:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113a71:	e8 bc c8 fe ff       	call   f0100332 <_warn>
f0113a76:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a79:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113a7d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a81:	74 04                	je     f0113a87 <test_calculate_required_frames+0x3a8>
f0113a83:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113a87:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113a8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113a8e:	83 ec 04             	sub    $0x4,%esp
f0113a91:	50                   	push   %eax
f0113a92:	68 ff ff 3f 00       	push   $0x3fffff
f0113a97:	ff 75 d8             	pushl  -0x28(%ebp)
f0113a9a:	e8 0b 45 ff ff       	call   f0107faa <calculate_required_frames>
f0113a9f:	83 c4 10             	add    $0x10,%esp
f0113aa2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0113aa5:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0113aa9:	74 23                	je     f0113ace <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0113aab:	83 ec 0c             	sub    $0xc,%esp
f0113aae:	6a 04                	push   $0x4
f0113ab0:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ab3:	68 3c 97 13 f0       	push   $0xf013973c
f0113ab8:	68 ff 05 00 00       	push   $0x5ff
f0113abd:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113ac2:	e8 6b c8 fe ff       	call   f0100332 <_warn>
f0113ac7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113aca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113ace:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ad2:	74 04                	je     f0113ad8 <test_calculate_required_frames+0x3f9>
f0113ad4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ad8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113adc:	83 ec 0c             	sub    $0xc,%esp
f0113adf:	68 8d 92 13 f0       	push   $0xf013928d
f0113ae4:	e8 44 d1 fe ff       	call   f0100c2d <cprintf>
f0113ae9:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0113aec:	83 ec 0c             	sub    $0xc,%esp
f0113aef:	68 94 97 13 f0       	push   $0xf0139794
f0113af4:	e8 34 d1 fe ff       	call   f0100c2d <cprintf>
f0113af9:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113afc:	83 ec 04             	sub    $0x4,%esp
f0113aff:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113b05:	50                   	push   %eax
f0113b06:	68 46 86 13 f0       	push   $0xf0138646
f0113b0b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113b11:	50                   	push   %eax
f0113b12:	e8 1e cb 01 00       	call   f0130635 <strcconcat>
f0113b17:	83 c4 10             	add    $0x10,%esp
f0113b1a:	83 ec 0c             	sub    $0xc,%esp
f0113b1d:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113b23:	50                   	push   %eax
f0113b24:	e8 66 d1 fe ff       	call   f0100c8f <execute_command>
f0113b29:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113b2c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113b2f:	c1 e0 03             	shl    $0x3,%eax
f0113b32:	83 ec 04             	sub    $0x4,%esp
f0113b35:	50                   	push   %eax
f0113b36:	6a 00                	push   $0x0
f0113b38:	ff 75 d8             	pushl  -0x28(%ebp)
f0113b3b:	e8 6a 44 ff ff       	call   f0107faa <calculate_required_frames>
f0113b40:	83 c4 10             	add    $0x10,%esp
f0113b43:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113b46:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0113b4d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113b50:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113b53:	74 24                	je     f0113b79 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113b55:	83 ec 0c             	sub    $0xc,%esp
f0113b58:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113b5b:	ff 75 c8             	pushl  -0x38(%ebp)
f0113b5e:	68 3c 97 13 f0       	push   $0xf013973c
f0113b63:	68 13 06 00 00       	push   $0x613
f0113b68:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113b6d:	e8 c0 c7 fe ff       	call   f0100332 <_warn>
f0113b72:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b75:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b79:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b7d:	74 04                	je     f0113b83 <test_calculate_required_frames+0x4a4>
f0113b7f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b83:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0113b87:	83 ec 04             	sub    $0x4,%esp
f0113b8a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113b90:	50                   	push   %eax
f0113b91:	68 53 86 13 f0       	push   $0xf0138653
f0113b96:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113b9c:	50                   	push   %eax
f0113b9d:	e8 93 ca 01 00       	call   f0130635 <strcconcat>
f0113ba2:	83 c4 10             	add    $0x10,%esp
f0113ba5:	83 ec 0c             	sub    $0xc,%esp
f0113ba8:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113bae:	50                   	push   %eax
f0113baf:	e8 db d0 fe ff       	call   f0100c8f <execute_command>
f0113bb4:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0113bb7:	83 ec 04             	sub    $0x4,%esp
f0113bba:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113bc0:	50                   	push   %eax
f0113bc1:	68 c8 97 13 f0       	push   $0xf01397c8
f0113bc6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113bcc:	50                   	push   %eax
f0113bcd:	e8 63 ca 01 00       	call   f0130635 <strcconcat>
f0113bd2:	83 c4 10             	add    $0x10,%esp
f0113bd5:	83 ec 0c             	sub    $0xc,%esp
f0113bd8:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113bde:	50                   	push   %eax
f0113bdf:	e8 ab d0 fe ff       	call   f0100c8f <execute_command>
f0113be4:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0113be7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113bea:	c1 e0 03             	shl    $0x3,%eax
f0113bed:	83 ec 04             	sub    $0x4,%esp
f0113bf0:	50                   	push   %eax
f0113bf1:	6a 00                	push   $0x0
f0113bf3:	ff 75 d8             	pushl  -0x28(%ebp)
f0113bf6:	e8 af 43 ff ff       	call   f0107faa <calculate_required_frames>
f0113bfb:	83 c4 10             	add    $0x10,%esp
f0113bfe:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0113c01:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0113c08:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113c0b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113c0e:	74 24                	je     f0113c34 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113c10:	83 ec 0c             	sub    $0xc,%esp
f0113c13:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113c16:	ff 75 c8             	pushl  -0x38(%ebp)
f0113c19:	68 3c 97 13 f0       	push   $0xf013973c
f0113c1e:	68 21 06 00 00       	push   $0x621
f0113c23:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113c28:	e8 05 c7 fe ff       	call   f0100332 <_warn>
f0113c2d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c30:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c34:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c38:	74 04                	je     f0113c3e <test_calculate_required_frames+0x55f>
f0113c3a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c3e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113c42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113c45:	c1 e0 0a             	shl    $0xa,%eax
f0113c48:	83 ec 04             	sub    $0x4,%esp
f0113c4b:	50                   	push   %eax
f0113c4c:	6a 00                	push   $0x0
f0113c4e:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c51:	e8 54 43 ff ff       	call   f0107faa <calculate_required_frames>
f0113c56:	83 c4 10             	add    $0x10,%esp
f0113c59:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0113c5c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113c5f:	c1 e0 0a             	shl    $0xa,%eax
f0113c62:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113c65:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113c6c:	99                   	cltd   
f0113c6d:	f7 fb                	idiv   %ebx
f0113c6f:	89 c1                	mov    %eax,%ecx
f0113c71:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113c74:	c1 e0 0a             	shl    $0xa,%eax
f0113c77:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113c7a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113c81:	99                   	cltd   
f0113c82:	f7 fe                	idiv   %esi
f0113c84:	01 c8                	add    %ecx,%eax
f0113c86:	83 e8 05             	sub    $0x5,%eax
f0113c89:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0113c8c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113c8f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113c92:	74 24                	je     f0113cb8 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113c94:	83 ec 0c             	sub    $0xc,%esp
f0113c97:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113c9a:	ff 75 c8             	pushl  -0x38(%ebp)
f0113c9d:	68 3c 97 13 f0       	push   $0xf013973c
f0113ca2:	68 2c 06 00 00       	push   $0x62c
f0113ca7:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113cac:	e8 81 c6 fe ff       	call   f0100332 <_warn>
f0113cb1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cb4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113cb8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cbc:	74 04                	je     f0113cc2 <test_calculate_required_frames+0x5e3>
f0113cbe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113cc2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0113cc6:	83 ec 04             	sub    $0x4,%esp
f0113cc9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113ccf:	50                   	push   %eax
f0113cd0:	68 d4 97 13 f0       	push   $0xf01397d4
f0113cd5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113cdb:	50                   	push   %eax
f0113cdc:	e8 54 c9 01 00       	call   f0130635 <strcconcat>
f0113ce1:	83 c4 10             	add    $0x10,%esp
f0113ce4:	83 ec 0c             	sub    $0xc,%esp
f0113ce7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113ced:	50                   	push   %eax
f0113cee:	e8 9c cf fe ff       	call   f0100c8f <execute_command>
f0113cf3:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113cf6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113cf9:	89 c2                	mov    %eax,%edx
f0113cfb:	01 d2                	add    %edx,%edx
f0113cfd:	01 d0                	add    %edx,%eax
f0113cff:	83 ec 04             	sub    $0x4,%esp
f0113d02:	50                   	push   %eax
f0113d03:	68 00 18 00 00       	push   $0x1800
f0113d08:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d0b:	e8 9a 42 ff ff       	call   f0107faa <calculate_required_frames>
f0113d10:	83 c4 10             	add    $0x10,%esp
f0113d13:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113d16:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0113d1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113d20:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113d23:	74 24                	je     f0113d49 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113d25:	83 ec 0c             	sub    $0xc,%esp
f0113d28:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113d2b:	ff 75 c8             	pushl  -0x38(%ebp)
f0113d2e:	68 3c 97 13 f0       	push   $0xf013973c
f0113d33:	68 3b 06 00 00       	push   $0x63b
f0113d38:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113d3d:	e8 f0 c5 fe ff       	call   f0100332 <_warn>
f0113d42:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d45:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d49:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d4d:	74 04                	je     f0113d53 <test_calculate_required_frames+0x674>
f0113d4f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d53:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0113d57:	83 ec 04             	sub    $0x4,%esp
f0113d5a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113d60:	50                   	push   %eax
f0113d61:	68 ac 88 13 f0       	push   $0xf01388ac
f0113d66:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113d6c:	50                   	push   %eax
f0113d6d:	e8 c3 c8 01 00       	call   f0130635 <strcconcat>
f0113d72:	83 c4 10             	add    $0x10,%esp
f0113d75:	83 ec 0c             	sub    $0xc,%esp
f0113d78:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113d7e:	50                   	push   %eax
f0113d7f:	e8 0b cf fe ff       	call   f0100c8f <execute_command>
f0113d84:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0113d87:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113d8a:	89 d0                	mov    %edx,%eax
f0113d8c:	c1 e0 02             	shl    $0x2,%eax
f0113d8f:	01 d0                	add    %edx,%eax
f0113d91:	01 c0                	add    %eax,%eax
f0113d93:	83 ec 04             	sub    $0x4,%esp
f0113d96:	50                   	push   %eax
f0113d97:	68 00 00 40 00       	push   $0x400000
f0113d9c:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d9f:	e8 06 42 ff ff       	call   f0107faa <calculate_required_frames>
f0113da4:	83 c4 10             	add    $0x10,%esp
f0113da7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0113daa:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0113db1:	74 26                	je     f0113dd9 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0113db3:	83 ec 0c             	sub    $0xc,%esp
f0113db6:	68 03 0a 00 00       	push   $0xa03
f0113dbb:	ff 75 c8             	pushl  -0x38(%ebp)
f0113dbe:	68 3c 97 13 f0       	push   $0xf013973c
f0113dc3:	68 47 06 00 00       	push   $0x647
f0113dc8:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113dcd:	e8 60 c5 fe ff       	call   f0100332 <_warn>
f0113dd2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113dd5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113dd9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ddd:	74 04                	je     f0113de3 <test_calculate_required_frames+0x704>
f0113ddf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113de3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0113de7:	83 ec 04             	sub    $0x4,%esp
f0113dea:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113df0:	50                   	push   %eax
f0113df1:	68 b6 88 13 f0       	push   $0xf01388b6
f0113df6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113dfc:	50                   	push   %eax
f0113dfd:	e8 33 c8 01 00       	call   f0130635 <strcconcat>
f0113e02:	83 c4 10             	add    $0x10,%esp
f0113e05:	83 ec 0c             	sub    $0xc,%esp
f0113e08:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113e0e:	50                   	push   %eax
f0113e0f:	e8 7b ce fe ff       	call   f0100c8f <execute_command>
f0113e14:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0113e17:	83 ec 04             	sub    $0x4,%esp
f0113e1a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113e20:	50                   	push   %eax
f0113e21:	68 dc 97 13 f0       	push   $0xf01397dc
f0113e26:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113e2c:	50                   	push   %eax
f0113e2d:	e8 03 c8 01 00       	call   f0130635 <strcconcat>
f0113e32:	83 c4 10             	add    $0x10,%esp
f0113e35:	83 ec 0c             	sub    $0xc,%esp
f0113e38:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113e3e:	50                   	push   %eax
f0113e3f:	e8 4b ce fe ff       	call   f0100c8f <execute_command>
f0113e44:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113e47:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113e4a:	01 c0                	add    %eax,%eax
f0113e4c:	83 ec 04             	sub    $0x4,%esp
f0113e4f:	50                   	push   %eax
f0113e50:	68 00 00 70 00       	push   $0x700000
f0113e55:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e58:	e8 4d 41 ff ff       	call   f0107faa <calculate_required_frames>
f0113e5d:	83 c4 10             	add    $0x10,%esp
f0113e60:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0113e63:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0113e6a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e6d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113e70:	74 24                	je     f0113e96 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113e72:	83 ec 0c             	sub    $0xc,%esp
f0113e75:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113e78:	ff 75 c8             	pushl  -0x38(%ebp)
f0113e7b:	68 3c 97 13 f0       	push   $0xf013973c
f0113e80:	68 57 06 00 00       	push   $0x657
f0113e85:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113e8a:	e8 a3 c4 fe ff       	call   f0100332 <_warn>
f0113e8f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e92:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113e96:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e9a:	74 04                	je     f0113ea0 <test_calculate_required_frames+0x7c1>
f0113e9c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ea0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113ea4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ea7:	83 ec 04             	sub    $0x4,%esp
f0113eaa:	50                   	push   %eax
f0113eab:	68 ff ff 3f 00       	push   $0x3fffff
f0113eb0:	ff 75 d8             	pushl  -0x28(%ebp)
f0113eb3:	e8 f2 40 ff ff       	call   f0107faa <calculate_required_frames>
f0113eb8:	83 c4 10             	add    $0x10,%esp
f0113ebb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0113ebe:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0113ec5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113ec8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113ecb:	74 24                	je     f0113ef1 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113ecd:	83 ec 0c             	sub    $0xc,%esp
f0113ed0:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113ed3:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ed6:	68 3c 97 13 f0       	push   $0xf013973c
f0113edb:	68 62 06 00 00       	push   $0x662
f0113ee0:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0113ee5:	e8 48 c4 fe ff       	call   f0100332 <_warn>
f0113eea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113eed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113ef1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ef5:	74 04                	je     f0113efb <test_calculate_required_frames+0x81c>
f0113ef7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113efb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0113eff:	83 ec 0c             	sub    $0xc,%esp
f0113f02:	68 67 88 13 f0       	push   $0xf0138867
f0113f07:	e8 21 cd fe ff       	call   f0100c2d <cprintf>
f0113f0c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0113f0f:	83 ec 08             	sub    $0x8,%esp
f0113f12:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113f15:	68 e8 97 13 f0       	push   $0xf01397e8
f0113f1a:	e8 0e cd fe ff       	call   f0100c2d <cprintf>
f0113f1f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113f22:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113f26:	75 10                	jne    f0113f38 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0113f28:	83 ec 0c             	sub    $0xc,%esp
f0113f2b:	68 28 98 13 f0       	push   $0xf0139828
f0113f30:	e8 f8 cc fe ff       	call   f0100c2d <cprintf>
f0113f35:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113f38:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0113f3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0113f40:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113f43:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113f46:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113f4b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113f4e:	5b                   	pop    %ebx
f0113f4f:	5e                   	pop    %esi
f0113f50:	5f                   	pop    %edi
f0113f51:	5d                   	pop    %ebp
f0113f52:	c3                   	ret    

f0113f53 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0113f53:	55                   	push   %ebp
f0113f54:	89 e5                	mov    %esp,%ebp
f0113f56:	57                   	push   %edi
f0113f57:	56                   	push   %esi
f0113f58:	53                   	push   %ebx
f0113f59:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113f5f:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113f62:	bb dc 85 13 f0       	mov    $0xf01385dc,%ebx
f0113f67:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113f6c:	89 c7                	mov    %eax,%edi
f0113f6e:	89 de                	mov    %ebx,%esi
f0113f70:	89 d1                	mov    %edx,%ecx
f0113f72:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113f74:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0113f77:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113f7c:	b0 00                	mov    $0x0,%al
f0113f7e:	89 d7                	mov    %edx,%edi
f0113f80:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113f82:	6a 00                	push   $0x0
f0113f84:	6a 0a                	push   $0xa
f0113f86:	6a 14                	push   $0x14
f0113f88:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113f8b:	50                   	push   %eax
f0113f8c:	e8 ec 40 ff ff       	call   f010807d <env_create>
f0113f91:	83 c4 10             	add    $0x10,%esp
f0113f94:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113f97:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113f9a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113f9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113fa0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113fa3:	8b 40 60             	mov    0x60(%eax),%eax
f0113fa6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113fa9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113fac:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113faf:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113fb6:	75 70 20 
f0113fb9:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113fc0:	00 00 00 
f0113fc3:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113fc6:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113fcb:	b8 00 00 00 00       	mov    $0x0,%eax
f0113fd0:	89 d7                	mov    %edx,%edi
f0113fd2:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113fd4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113fd7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113fda:	83 ec 08             	sub    $0x8,%esp
f0113fdd:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113fe3:	52                   	push   %edx
f0113fe4:	50                   	push   %eax
f0113fe5:	e8 53 c5 01 00       	call   f013053d <ltostr>
f0113fea:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113fed:	83 ec 04             	sub    $0x4,%esp
f0113ff0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113ff6:	50                   	push   %eax
f0113ff7:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113ffd:	50                   	push   %eax
f0113ffe:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114004:	50                   	push   %eax
f0114005:	e8 2b c6 01 00       	call   f0130635 <strcconcat>
f011400a:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011400d:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114014:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011401b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114022:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114026:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011402d:	00 00 00 
	uint32 num_tables = 0;
f0114030:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114037:	00 00 00 
	ClearUserSpace(proc_directory);
f011403a:	83 ec 0c             	sub    $0xc,%esp
f011403d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114040:	e8 34 11 00 00       	call   f0115179 <ClearUserSpace>
f0114045:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114048:	83 ec 0c             	sub    $0xc,%esp
f011404b:	68 08 97 13 f0       	push   $0xf0139708
f0114050:	e8 d8 cb fe ff       	call   f0100c2d <cprintf>
f0114055:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114058:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011405b:	c1 e0 03             	shl    $0x3,%eax
f011405e:	89 c2                	mov    %eax,%edx
f0114060:	83 ec 0c             	sub    $0xc,%esp
f0114063:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114069:	50                   	push   %eax
f011406a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114070:	50                   	push   %eax
f0114071:	52                   	push   %edx
f0114072:	6a 00                	push   $0x0
f0114074:	ff 75 d8             	pushl  -0x28(%ebp)
f0114077:	e8 14 3f ff ff       	call   f0107f90 <calculate_allocated_space>
f011407c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011407f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114085:	85 c0                	test   %eax,%eax
f0114087:	74 27                	je     f01140b0 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114089:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011408f:	83 ec 0c             	sub    $0xc,%esp
f0114092:	6a 00                	push   $0x0
f0114094:	50                   	push   %eax
f0114095:	68 74 98 13 f0       	push   $0xf0139874
f011409a:	68 97 06 00 00       	push   $0x697
f011409f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01140a4:	e8 89 c2 fe ff       	call   f0100332 <_warn>
f01140a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01140b0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01140b6:	85 c0                	test   %eax,%eax
f01140b8:	74 27                	je     f01140e1 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01140ba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01140c0:	83 ec 0c             	sub    $0xc,%esp
f01140c3:	6a 00                	push   $0x0
f01140c5:	50                   	push   %eax
f01140c6:	68 d4 98 13 f0       	push   $0xf01398d4
f01140cb:	68 9c 06 00 00       	push   $0x69c
f01140d0:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01140d5:	e8 58 c2 fe ff       	call   f0100332 <_warn>
f01140da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140e1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140e5:	74 04                	je     f01140eb <test_calculate_allocated_space+0x198>
f01140e7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140eb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01140ef:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01140f6:	00 00 00 
		num_pages = 0;
f01140f9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114100:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114103:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114106:	c1 e0 02             	shl    $0x2,%eax
f0114109:	89 c2                	mov    %eax,%edx
f011410b:	83 ec 0c             	sub    $0xc,%esp
f011410e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114114:	50                   	push   %eax
f0114115:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011411b:	50                   	push   %eax
f011411c:	52                   	push   %edx
f011411d:	6a 00                	push   $0x0
f011411f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114122:	e8 69 3e ff ff       	call   f0107f90 <calculate_allocated_space>
f0114127:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011412a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114130:	85 c0                	test   %eax,%eax
f0114132:	74 27                	je     f011415b <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114134:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011413a:	83 ec 0c             	sub    $0xc,%esp
f011413d:	6a 00                	push   $0x0
f011413f:	50                   	push   %eax
f0114140:	68 74 98 13 f0       	push   $0xf0139874
f0114145:	68 a8 06 00 00       	push   $0x6a8
f011414a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011414f:	e8 de c1 fe ff       	call   f0100332 <_warn>
f0114154:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114157:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011415b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114161:	85 c0                	test   %eax,%eax
f0114163:	74 27                	je     f011418c <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114165:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011416b:	83 ec 0c             	sub    $0xc,%esp
f011416e:	6a 00                	push   $0x0
f0114170:	50                   	push   %eax
f0114171:	68 d4 98 13 f0       	push   $0xf01398d4
f0114176:	68 ad 06 00 00       	push   $0x6ad
f011417b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114180:	e8 ad c1 fe ff       	call   f0100332 <_warn>
f0114185:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114188:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011418c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114190:	74 04                	je     f0114196 <test_calculate_allocated_space+0x243>
f0114192:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114196:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011419a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01141a1:	00 00 00 
		num_pages = 0;
f01141a4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01141ab:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01141ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01141b1:	c1 e0 0a             	shl    $0xa,%eax
f01141b4:	89 c2                	mov    %eax,%edx
f01141b6:	83 ec 0c             	sub    $0xc,%esp
f01141b9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01141bf:	50                   	push   %eax
f01141c0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01141c6:	50                   	push   %eax
f01141c7:	52                   	push   %edx
f01141c8:	6a 00                	push   $0x0
f01141ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01141cd:	e8 be 3d ff ff       	call   f0107f90 <calculate_allocated_space>
f01141d2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01141d5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01141db:	85 c0                	test   %eax,%eax
f01141dd:	74 27                	je     f0114206 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01141df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01141e5:	83 ec 0c             	sub    $0xc,%esp
f01141e8:	6a 00                	push   $0x0
f01141ea:	50                   	push   %eax
f01141eb:	68 74 98 13 f0       	push   $0xf0139874
f01141f0:	68 b9 06 00 00       	push   $0x6b9
f01141f5:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01141fa:	e8 33 c1 fe ff       	call   f0100332 <_warn>
f01141ff:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114202:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114206:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011420c:	85 c0                	test   %eax,%eax
f011420e:	74 27                	je     f0114237 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114210:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114216:	83 ec 0c             	sub    $0xc,%esp
f0114219:	6a 00                	push   $0x0
f011421b:	50                   	push   %eax
f011421c:	68 d4 98 13 f0       	push   $0xf01398d4
f0114221:	68 be 06 00 00       	push   $0x6be
f0114226:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011422b:	e8 02 c1 fe ff       	call   f0100332 <_warn>
f0114230:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114233:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114237:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011423b:	74 04                	je     f0114241 <test_calculate_allocated_space+0x2ee>
f011423d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114241:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114245:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011424c:	00 00 00 
		num_pages = 0;
f011424f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114256:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114259:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011425c:	89 d0                	mov    %edx,%eax
f011425e:	01 c0                	add    %eax,%eax
f0114260:	01 d0                	add    %edx,%eax
f0114262:	01 c0                	add    %eax,%eax
f0114264:	05 00 10 00 00       	add    $0x1000,%eax
f0114269:	89 c2                	mov    %eax,%edx
f011426b:	83 ec 0c             	sub    $0xc,%esp
f011426e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114274:	50                   	push   %eax
f0114275:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011427b:	50                   	push   %eax
f011427c:	52                   	push   %edx
f011427d:	68 00 10 00 00       	push   $0x1000
f0114282:	ff 75 d8             	pushl  -0x28(%ebp)
f0114285:	e8 06 3d ff ff       	call   f0107f90 <calculate_allocated_space>
f011428a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011428d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114293:	85 c0                	test   %eax,%eax
f0114295:	74 27                	je     f01142be <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114297:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011429d:	83 ec 0c             	sub    $0xc,%esp
f01142a0:	6a 00                	push   $0x0
f01142a2:	50                   	push   %eax
f01142a3:	68 74 98 13 f0       	push   $0xf0139874
f01142a8:	68 cb 06 00 00       	push   $0x6cb
f01142ad:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01142b2:	e8 7b c0 fe ff       	call   f0100332 <_warn>
f01142b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01142be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01142c4:	85 c0                	test   %eax,%eax
f01142c6:	74 27                	je     f01142ef <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01142c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01142ce:	83 ec 0c             	sub    $0xc,%esp
f01142d1:	6a 00                	push   $0x0
f01142d3:	50                   	push   %eax
f01142d4:	68 d4 98 13 f0       	push   $0xf01398d4
f01142d9:	68 d0 06 00 00       	push   $0x6d0
f01142de:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01142e3:	e8 4a c0 fe ff       	call   f0100332 <_warn>
f01142e8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142ef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142f3:	74 04                	je     f01142f9 <test_calculate_allocated_space+0x3a6>
f01142f5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142f9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01142fd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114304:	00 00 00 
		num_pages = 0;
f0114307:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011430e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114311:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114314:	89 c2                	mov    %eax,%edx
f0114316:	01 d2                	add    %edx,%edx
f0114318:	01 d0                	add    %edx,%eax
f011431a:	05 00 18 00 00       	add    $0x1800,%eax
f011431f:	89 c2                	mov    %eax,%edx
f0114321:	83 ec 0c             	sub    $0xc,%esp
f0114324:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011432a:	50                   	push   %eax
f011432b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114331:	50                   	push   %eax
f0114332:	52                   	push   %edx
f0114333:	68 00 18 00 00       	push   $0x1800
f0114338:	ff 75 d8             	pushl  -0x28(%ebp)
f011433b:	e8 50 3c ff ff       	call   f0107f90 <calculate_allocated_space>
f0114340:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114343:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114349:	85 c0                	test   %eax,%eax
f011434b:	74 27                	je     f0114374 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011434d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114353:	83 ec 0c             	sub    $0xc,%esp
f0114356:	6a 00                	push   $0x0
f0114358:	50                   	push   %eax
f0114359:	68 74 98 13 f0       	push   $0xf0139874
f011435e:	68 dc 06 00 00       	push   $0x6dc
f0114363:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114368:	e8 c5 bf fe ff       	call   f0100332 <_warn>
f011436d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114370:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114374:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011437a:	85 c0                	test   %eax,%eax
f011437c:	74 27                	je     f01143a5 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011437e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114384:	83 ec 0c             	sub    $0xc,%esp
f0114387:	6a 00                	push   $0x0
f0114389:	50                   	push   %eax
f011438a:	68 d4 98 13 f0       	push   $0xf01398d4
f011438f:	68 e1 06 00 00       	push   $0x6e1
f0114394:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114399:	e8 94 bf fe ff       	call   f0100332 <_warn>
f011439e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143a9:	74 04                	je     f01143af <test_calculate_allocated_space+0x45c>
f01143ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f01143b3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01143ba:	00 00 00 
		num_pages = 0;
f01143bd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01143c4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01143c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01143ca:	89 d0                	mov    %edx,%eax
f01143cc:	c1 e0 02             	shl    $0x2,%eax
f01143cf:	01 d0                	add    %edx,%eax
f01143d1:	01 c0                	add    %eax,%eax
f01143d3:	05 00 00 40 00       	add    $0x400000,%eax
f01143d8:	89 c2                	mov    %eax,%edx
f01143da:	83 ec 0c             	sub    $0xc,%esp
f01143dd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01143e3:	50                   	push   %eax
f01143e4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01143ea:	50                   	push   %eax
f01143eb:	52                   	push   %edx
f01143ec:	68 00 00 40 00       	push   $0x400000
f01143f1:	ff 75 d8             	pushl  -0x28(%ebp)
f01143f4:	e8 97 3b ff ff       	call   f0107f90 <calculate_allocated_space>
f01143f9:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01143fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114402:	85 c0                	test   %eax,%eax
f0114404:	74 27                	je     f011442d <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114406:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011440c:	83 ec 0c             	sub    $0xc,%esp
f011440f:	6a 00                	push   $0x0
f0114411:	50                   	push   %eax
f0114412:	68 74 98 13 f0       	push   $0xf0139874
f0114417:	68 ed 06 00 00       	push   $0x6ed
f011441c:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114421:	e8 0c bf fe ff       	call   f0100332 <_warn>
f0114426:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114429:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011442d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114433:	85 c0                	test   %eax,%eax
f0114435:	74 27                	je     f011445e <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114437:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011443d:	83 ec 0c             	sub    $0xc,%esp
f0114440:	6a 00                	push   $0x0
f0114442:	50                   	push   %eax
f0114443:	68 d4 98 13 f0       	push   $0xf01398d4
f0114448:	68 f2 06 00 00       	push   $0x6f2
f011444d:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114452:	e8 db be fe ff       	call   f0100332 <_warn>
f0114457:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011445a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011445e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114462:	74 04                	je     f0114468 <test_calculate_allocated_space+0x515>
f0114464:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114468:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011446c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114473:	00 00 00 
		num_pages = 0;
f0114476:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011447d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114480:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114483:	05 00 00 38 00       	add    $0x380000,%eax
f0114488:	01 c0                	add    %eax,%eax
f011448a:	89 c2                	mov    %eax,%edx
f011448c:	83 ec 0c             	sub    $0xc,%esp
f011448f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114495:	50                   	push   %eax
f0114496:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011449c:	50                   	push   %eax
f011449d:	52                   	push   %edx
f011449e:	68 00 00 70 00       	push   $0x700000
f01144a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01144a6:	e8 e5 3a ff ff       	call   f0107f90 <calculate_allocated_space>
f01144ab:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01144ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01144b4:	85 c0                	test   %eax,%eax
f01144b6:	74 27                	je     f01144df <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01144b8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01144be:	83 ec 0c             	sub    $0xc,%esp
f01144c1:	6a 00                	push   $0x0
f01144c3:	50                   	push   %eax
f01144c4:	68 74 98 13 f0       	push   $0xf0139874
f01144c9:	68 ff 06 00 00       	push   $0x6ff
f01144ce:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01144d3:	e8 5a be fe ff       	call   f0100332 <_warn>
f01144d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01144df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144e5:	85 c0                	test   %eax,%eax
f01144e7:	74 27                	je     f0114510 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01144e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144ef:	83 ec 0c             	sub    $0xc,%esp
f01144f2:	6a 00                	push   $0x0
f01144f4:	50                   	push   %eax
f01144f5:	68 d4 98 13 f0       	push   $0xf01398d4
f01144fa:	68 04 07 00 00       	push   $0x704
f01144ff:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114504:	e8 29 be fe ff       	call   f0100332 <_warn>
f0114509:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011450c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114510:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114514:	74 04                	je     f011451a <test_calculate_allocated_space+0x5c7>
f0114516:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011451a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011451e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114525:	00 00 00 
		num_pages = 0;
f0114528:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011452f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114532:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114535:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011453a:	89 c2                	mov    %eax,%edx
f011453c:	83 ec 0c             	sub    $0xc,%esp
f011453f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114545:	50                   	push   %eax
f0114546:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011454c:	50                   	push   %eax
f011454d:	52                   	push   %edx
f011454e:	68 ff ff 3f 00       	push   $0x3fffff
f0114553:	ff 75 d8             	pushl  -0x28(%ebp)
f0114556:	e8 35 3a ff ff       	call   f0107f90 <calculate_allocated_space>
f011455b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011455e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114564:	85 c0                	test   %eax,%eax
f0114566:	74 27                	je     f011458f <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114568:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011456e:	83 ec 0c             	sub    $0xc,%esp
f0114571:	6a 00                	push   $0x0
f0114573:	50                   	push   %eax
f0114574:	68 74 98 13 f0       	push   $0xf0139874
f0114579:	68 10 07 00 00       	push   $0x710
f011457e:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114583:	e8 aa bd fe ff       	call   f0100332 <_warn>
f0114588:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011458b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011458f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114595:	85 c0                	test   %eax,%eax
f0114597:	74 27                	je     f01145c0 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114599:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011459f:	83 ec 0c             	sub    $0xc,%esp
f01145a2:	6a 00                	push   $0x0
f01145a4:	50                   	push   %eax
f01145a5:	68 d4 98 13 f0       	push   $0xf01398d4
f01145aa:	68 15 07 00 00       	push   $0x715
f01145af:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01145b4:	e8 79 bd fe ff       	call   f0100332 <_warn>
f01145b9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145bc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01145c0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145c4:	74 04                	je     f01145ca <test_calculate_allocated_space+0x677>
f01145c6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145ca:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01145ce:	83 ec 0c             	sub    $0xc,%esp
f01145d1:	68 8d 92 13 f0       	push   $0xf013928d
f01145d6:	e8 52 c6 fe ff       	call   f0100c2d <cprintf>
f01145db:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01145de:	83 ec 0c             	sub    $0xc,%esp
f01145e1:	68 94 97 13 f0       	push   $0xf0139794
f01145e6:	e8 42 c6 fe ff       	call   f0100c2d <cprintf>
f01145eb:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01145ee:	83 ec 04             	sub    $0x4,%esp
f01145f1:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01145f7:	50                   	push   %eax
f01145f8:	68 46 86 13 f0       	push   $0xf0138646
f01145fd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114603:	50                   	push   %eax
f0114604:	e8 2c c0 01 00       	call   f0130635 <strcconcat>
f0114609:	83 c4 10             	add    $0x10,%esp
f011460c:	83 ec 0c             	sub    $0xc,%esp
f011460f:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0114615:	50                   	push   %eax
f0114616:	e8 74 c6 fe ff       	call   f0100c8f <execute_command>
f011461b:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011461e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114625:	00 00 00 
		num_pages = 0;
f0114628:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011462f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114632:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114635:	c1 e0 03             	shl    $0x3,%eax
f0114638:	89 c2                	mov    %eax,%edx
f011463a:	83 ec 0c             	sub    $0xc,%esp
f011463d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114643:	50                   	push   %eax
f0114644:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011464a:	50                   	push   %eax
f011464b:	52                   	push   %edx
f011464c:	6a 00                	push   $0x0
f011464e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114651:	e8 3a 39 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114656:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114659:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0114660:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114667:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011466d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114670:	74 28                	je     f011469a <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114672:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114678:	83 ec 0c             	sub    $0xc,%esp
f011467b:	ff 75 c8             	pushl  -0x38(%ebp)
f011467e:	50                   	push   %eax
f011467f:	68 74 98 13 f0       	push   $0xf0139874
f0114684:	68 2c 07 00 00       	push   $0x72c
f0114689:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011468e:	e8 9f bc fe ff       	call   f0100332 <_warn>
f0114693:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114696:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011469a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01146a0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01146a3:	74 28                	je     f01146cd <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01146a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01146ab:	83 ec 0c             	sub    $0xc,%esp
f01146ae:	ff 75 c4             	pushl  -0x3c(%ebp)
f01146b1:	50                   	push   %eax
f01146b2:	68 d4 98 13 f0       	push   $0xf01398d4
f01146b7:	68 31 07 00 00       	push   $0x731
f01146bc:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01146c1:	e8 6c bc fe ff       	call   f0100332 <_warn>
f01146c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146d1:	74 04                	je     f01146d7 <test_calculate_allocated_space+0x784>
f01146d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01146db:	83 ec 04             	sub    $0x4,%esp
f01146de:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01146e4:	50                   	push   %eax
f01146e5:	68 53 86 13 f0       	push   $0xf0138653
f01146ea:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01146f0:	50                   	push   %eax
f01146f1:	e8 3f bf 01 00       	call   f0130635 <strcconcat>
f01146f6:	83 c4 10             	add    $0x10,%esp
f01146f9:	83 ec 0c             	sub    $0xc,%esp
f01146fc:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114702:	50                   	push   %eax
f0114703:	e8 87 c5 fe ff       	call   f0100c8f <execute_command>
f0114708:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011470b:	83 ec 04             	sub    $0x4,%esp
f011470e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114714:	50                   	push   %eax
f0114715:	68 c8 97 13 f0       	push   $0xf01397c8
f011471a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114720:	50                   	push   %eax
f0114721:	e8 0f bf 01 00       	call   f0130635 <strcconcat>
f0114726:	83 c4 10             	add    $0x10,%esp
f0114729:	83 ec 0c             	sub    $0xc,%esp
f011472c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114732:	50                   	push   %eax
f0114733:	e8 57 c5 fe ff       	call   f0100c8f <execute_command>
f0114738:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011473b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114742:	00 00 00 
		num_pages = 0;
f0114745:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011474c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f011474f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114752:	c1 e0 03             	shl    $0x3,%eax
f0114755:	89 c2                	mov    %eax,%edx
f0114757:	83 ec 0c             	sub    $0xc,%esp
f011475a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114760:	50                   	push   %eax
f0114761:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114767:	50                   	push   %eax
f0114768:	52                   	push   %edx
f0114769:	6a 00                	push   $0x0
f011476b:	ff 75 d8             	pushl  -0x28(%ebp)
f011476e:	e8 1d 38 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114773:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114776:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011477d:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114784:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011478a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011478d:	74 28                	je     f01147b7 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011478f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114795:	83 ec 0c             	sub    $0xc,%esp
f0114798:	ff 75 c8             	pushl  -0x38(%ebp)
f011479b:	50                   	push   %eax
f011479c:	68 74 98 13 f0       	push   $0xf0139874
f01147a1:	68 42 07 00 00       	push   $0x742
f01147a6:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01147ab:	e8 82 bb fe ff       	call   f0100332 <_warn>
f01147b0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147b3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01147b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147bd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01147c0:	74 28                	je     f01147ea <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01147c2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147c8:	83 ec 0c             	sub    $0xc,%esp
f01147cb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01147ce:	50                   	push   %eax
f01147cf:	68 d4 98 13 f0       	push   $0xf01398d4
f01147d4:	68 47 07 00 00       	push   $0x747
f01147d9:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01147de:	e8 4f bb fe ff       	call   f0100332 <_warn>
f01147e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147ea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147ee:	74 04                	je     f01147f4 <test_calculate_allocated_space+0x8a1>
f01147f0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147f4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01147f8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01147ff:	00 00 00 
		num_pages = 0;
f0114802:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114809:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011480c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011480f:	c1 e0 0a             	shl    $0xa,%eax
f0114812:	89 c2                	mov    %eax,%edx
f0114814:	83 ec 0c             	sub    $0xc,%esp
f0114817:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011481d:	50                   	push   %eax
f011481e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114824:	50                   	push   %eax
f0114825:	52                   	push   %edx
f0114826:	6a 00                	push   $0x0
f0114828:	ff 75 d8             	pushl  -0x28(%ebp)
f011482b:	e8 60 37 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114830:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114833:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011483a:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114841:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114847:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011484a:	74 28                	je     f0114874 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011484c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114852:	83 ec 0c             	sub    $0xc,%esp
f0114855:	ff 75 c8             	pushl  -0x38(%ebp)
f0114858:	50                   	push   %eax
f0114859:	68 74 98 13 f0       	push   $0xf0139874
f011485e:	68 55 07 00 00       	push   $0x755
f0114863:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114868:	e8 c5 ba fe ff       	call   f0100332 <_warn>
f011486d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114870:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114874:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011487a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011487d:	74 28                	je     f01148a7 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011487f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114885:	83 ec 0c             	sub    $0xc,%esp
f0114888:	ff 75 c4             	pushl  -0x3c(%ebp)
f011488b:	50                   	push   %eax
f011488c:	68 d4 98 13 f0       	push   $0xf01398d4
f0114891:	68 5a 07 00 00       	push   $0x75a
f0114896:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011489b:	e8 92 ba fe ff       	call   f0100332 <_warn>
f01148a0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01148a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148ab:	74 04                	je     f01148b1 <test_calculate_allocated_space+0x95e>
f01148ad:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01148b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01148b5:	83 ec 04             	sub    $0x4,%esp
f01148b8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01148be:	50                   	push   %eax
f01148bf:	68 d4 97 13 f0       	push   $0xf01397d4
f01148c4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01148ca:	50                   	push   %eax
f01148cb:	e8 65 bd 01 00       	call   f0130635 <strcconcat>
f01148d0:	83 c4 10             	add    $0x10,%esp
f01148d3:	83 ec 0c             	sub    $0xc,%esp
f01148d6:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01148dc:	50                   	push   %eax
f01148dd:	e8 ad c3 fe ff       	call   f0100c8f <execute_command>
f01148e2:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01148e5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01148ec:	00 00 00 
		num_pages = 0;
f01148ef:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01148f6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01148f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148fc:	89 c2                	mov    %eax,%edx
f01148fe:	01 d2                	add    %edx,%edx
f0114900:	01 d0                	add    %edx,%eax
f0114902:	05 00 18 00 00       	add    $0x1800,%eax
f0114907:	89 c2                	mov    %eax,%edx
f0114909:	83 ec 0c             	sub    $0xc,%esp
f011490c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114912:	50                   	push   %eax
f0114913:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114919:	50                   	push   %eax
f011491a:	52                   	push   %edx
f011491b:	68 00 18 00 00       	push   $0x1800
f0114920:	ff 75 d8             	pushl  -0x28(%ebp)
f0114923:	e8 68 36 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114928:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011492b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114932:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114939:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011493f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114942:	74 28                	je     f011496c <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114944:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011494a:	83 ec 0c             	sub    $0xc,%esp
f011494d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114950:	50                   	push   %eax
f0114951:	68 74 98 13 f0       	push   $0xf0139874
f0114956:	68 6b 07 00 00       	push   $0x76b
f011495b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114960:	e8 cd b9 fe ff       	call   f0100332 <_warn>
f0114965:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114968:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011496c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114972:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114975:	74 28                	je     f011499f <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114977:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011497d:	83 ec 0c             	sub    $0xc,%esp
f0114980:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114983:	50                   	push   %eax
f0114984:	68 d4 98 13 f0       	push   $0xf01398d4
f0114989:	68 70 07 00 00       	push   $0x770
f011498e:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114993:	e8 9a b9 fe ff       	call   f0100332 <_warn>
f0114998:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011499b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011499f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149a3:	74 04                	je     f01149a9 <test_calculate_allocated_space+0xa56>
f01149a5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149a9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01149ad:	83 ec 04             	sub    $0x4,%esp
f01149b0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01149b6:	50                   	push   %eax
f01149b7:	68 ac 88 13 f0       	push   $0xf01388ac
f01149bc:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149c2:	50                   	push   %eax
f01149c3:	e8 6d bc 01 00       	call   f0130635 <strcconcat>
f01149c8:	83 c4 10             	add    $0x10,%esp
f01149cb:	83 ec 0c             	sub    $0xc,%esp
f01149ce:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01149d4:	50                   	push   %eax
f01149d5:	e8 b5 c2 fe ff       	call   f0100c8f <execute_command>
f01149da:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01149dd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01149e4:	00 00 00 
		num_pages = 0;
f01149e7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01149ee:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01149f1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01149f4:	89 d0                	mov    %edx,%eax
f01149f6:	c1 e0 02             	shl    $0x2,%eax
f01149f9:	01 d0                	add    %edx,%eax
f01149fb:	01 c0                	add    %eax,%eax
f01149fd:	05 00 00 40 00       	add    $0x400000,%eax
f0114a02:	89 c2                	mov    %eax,%edx
f0114a04:	83 ec 0c             	sub    $0xc,%esp
f0114a07:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114a0d:	50                   	push   %eax
f0114a0e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114a14:	50                   	push   %eax
f0114a15:	52                   	push   %edx
f0114a16:	68 00 00 40 00       	push   $0x400000
f0114a1b:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a1e:	e8 6d 35 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114a23:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114a26:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114a2d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114a34:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a3a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114a3d:	74 28                	je     f0114a67 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114a3f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a45:	83 ec 0c             	sub    $0xc,%esp
f0114a48:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a4b:	50                   	push   %eax
f0114a4c:	68 74 98 13 f0       	push   $0xf0139874
f0114a51:	68 80 07 00 00       	push   $0x780
f0114a56:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114a5b:	e8 d2 b8 fe ff       	call   f0100332 <_warn>
f0114a60:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a63:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114a67:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a6d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a70:	74 28                	je     f0114a9a <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114a72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a78:	83 ec 0c             	sub    $0xc,%esp
f0114a7b:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114a7e:	50                   	push   %eax
f0114a7f:	68 d4 98 13 f0       	push   $0xf01398d4
f0114a84:	68 85 07 00 00       	push   $0x785
f0114a89:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114a8e:	e8 9f b8 fe ff       	call   f0100332 <_warn>
f0114a93:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a96:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a9a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a9e:	74 04                	je     f0114aa4 <test_calculate_allocated_space+0xb51>
f0114aa0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114aa4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114aa8:	83 ec 04             	sub    $0x4,%esp
f0114aab:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114ab1:	50                   	push   %eax
f0114ab2:	68 b6 88 13 f0       	push   $0xf01388b6
f0114ab7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114abd:	50                   	push   %eax
f0114abe:	e8 72 bb 01 00       	call   f0130635 <strcconcat>
f0114ac3:	83 c4 10             	add    $0x10,%esp
f0114ac6:	83 ec 0c             	sub    $0xc,%esp
f0114ac9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114acf:	50                   	push   %eax
f0114ad0:	e8 ba c1 fe ff       	call   f0100c8f <execute_command>
f0114ad5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114ad8:	83 ec 04             	sub    $0x4,%esp
f0114adb:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114ae1:	50                   	push   %eax
f0114ae2:	68 dc 97 13 f0       	push   $0xf01397dc
f0114ae7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114aed:	50                   	push   %eax
f0114aee:	e8 42 bb 01 00       	call   f0130635 <strcconcat>
f0114af3:	83 c4 10             	add    $0x10,%esp
f0114af6:	83 ec 0c             	sub    $0xc,%esp
f0114af9:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114aff:	50                   	push   %eax
f0114b00:	e8 8a c1 fe ff       	call   f0100c8f <execute_command>
f0114b05:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0114b08:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114b0f:	00 00 00 
		num_pages = 0;
f0114b12:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114b19:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114b1c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b1f:	05 00 00 38 00       	add    $0x380000,%eax
f0114b24:	01 c0                	add    %eax,%eax
f0114b26:	89 c2                	mov    %eax,%edx
f0114b28:	83 ec 0c             	sub    $0xc,%esp
f0114b2b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114b31:	50                   	push   %eax
f0114b32:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114b38:	50                   	push   %eax
f0114b39:	52                   	push   %edx
f0114b3a:	68 00 00 70 00       	push   $0x700000
f0114b3f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b42:	e8 49 34 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114b47:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114b4a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0114b51:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114b58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b5e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114b61:	74 28                	je     f0114b8b <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114b63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b69:	83 ec 0c             	sub    $0xc,%esp
f0114b6c:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b6f:	50                   	push   %eax
f0114b70:	68 74 98 13 f0       	push   $0xf0139874
f0114b75:	68 97 07 00 00       	push   $0x797
f0114b7a:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114b7f:	e8 ae b7 fe ff       	call   f0100332 <_warn>
f0114b84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114b8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b91:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114b94:	74 28                	je     f0114bbe <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114b96:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b9c:	83 ec 0c             	sub    $0xc,%esp
f0114b9f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ba2:	50                   	push   %eax
f0114ba3:	68 d4 98 13 f0       	push   $0xf01398d4
f0114ba8:	68 9c 07 00 00       	push   $0x79c
f0114bad:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114bb2:	e8 7b b7 fe ff       	call   f0100332 <_warn>
f0114bb7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114bbe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bc2:	74 04                	je     f0114bc8 <test_calculate_allocated_space+0xc75>
f0114bc4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bc8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0114bcc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114bd3:	00 00 00 
		num_pages = 0;
f0114bd6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114bdd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114be0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114be3:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114be8:	89 c2                	mov    %eax,%edx
f0114bea:	83 ec 0c             	sub    $0xc,%esp
f0114bed:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114bf3:	50                   	push   %eax
f0114bf4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114bfa:	50                   	push   %eax
f0114bfb:	52                   	push   %edx
f0114bfc:	68 ff ff 3f 00       	push   $0x3fffff
f0114c01:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c04:	e8 87 33 ff ff       	call   f0107f90 <calculate_allocated_space>
f0114c09:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114c0c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0114c13:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114c1a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c20:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114c23:	74 28                	je     f0114c4d <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114c25:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c2b:	83 ec 0c             	sub    $0xc,%esp
f0114c2e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c31:	50                   	push   %eax
f0114c32:	68 74 98 13 f0       	push   $0xf0139874
f0114c37:	68 aa 07 00 00       	push   $0x7aa
f0114c3c:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114c41:	e8 ec b6 fe ff       	call   f0100332 <_warn>
f0114c46:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c49:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114c4d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c53:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c56:	74 28                	je     f0114c80 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114c58:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c5e:	83 ec 0c             	sub    $0xc,%esp
f0114c61:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114c64:	50                   	push   %eax
f0114c65:	68 d4 98 13 f0       	push   $0xf01398d4
f0114c6a:	68 af 07 00 00       	push   $0x7af
f0114c6f:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114c74:	e8 b9 b6 fe ff       	call   f0100332 <_warn>
f0114c79:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c7c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c80:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c84:	74 04                	je     f0114c8a <test_calculate_allocated_space+0xd37>
f0114c86:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c8a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114c8e:	83 ec 0c             	sub    $0xc,%esp
f0114c91:	68 67 88 13 f0       	push   $0xf0138867
f0114c96:	e8 92 bf fe ff       	call   f0100c2d <cprintf>
f0114c9b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0114c9e:	83 ec 08             	sub    $0x8,%esp
f0114ca1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114ca4:	68 30 99 13 f0       	push   $0xf0139930
f0114ca9:	e8 7f bf fe ff       	call   f0100c2d <cprintf>
f0114cae:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114cb1:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114cb5:	75 10                	jne    f0114cc7 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0114cb7:	83 ec 0c             	sub    $0xc,%esp
f0114cba:	68 70 99 13 f0       	push   $0xf0139970
f0114cbf:	e8 69 bf fe ff       	call   f0100c2d <cprintf>
f0114cc4:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114cc7:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0114ccc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114ccf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114cd2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114cd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114cda:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114cdd:	5b                   	pop    %ebx
f0114cde:	5e                   	pop    %esi
f0114cdf:	5f                   	pop    %edi
f0114ce0:	5d                   	pop    %ebp
f0114ce1:	c3                   	ret    

f0114ce2 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0114ce2:	55                   	push   %ebp
f0114ce3:	89 e5                	mov    %esp,%ebp
f0114ce5:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0114ce8:	8b 45 10             	mov    0x10(%ebp),%eax
f0114ceb:	ba 01 00 00 00       	mov    $0x1,%edx
f0114cf0:	88 c1                	mov    %al,%cl
f0114cf2:	d3 e2                	shl    %cl,%edx
f0114cf4:	89 d0                	mov    %edx,%eax
f0114cf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114cf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114cfc:	c1 e8 16             	shr    $0x16,%eax
f0114cff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114d06:	8b 45 08             	mov    0x8(%ebp),%eax
f0114d09:	01 d0                	add    %edx,%eax
f0114d0b:	8b 00                	mov    (%eax),%eax
f0114d0d:	83 e0 01             	and    $0x1,%eax
f0114d10:	85 c0                	test   %eax,%eax
f0114d12:	75 07                	jne    f0114d1b <CB+0x39>
f0114d14:	b8 00 00 00 00       	mov    $0x0,%eax
f0114d19:	eb 76                	jmp    f0114d91 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114d1e:	c1 e8 16             	shr    $0x16,%eax
f0114d21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114d28:	8b 45 08             	mov    0x8(%ebp),%eax
f0114d2b:	01 d0                	add    %edx,%eax
f0114d2d:	8b 00                	mov    (%eax),%eax
f0114d2f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114d3a:	c1 e8 0c             	shr    $0xc,%eax
f0114d3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0114d40:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114d45:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0114d48:	72 17                	jb     f0114d61 <CB+0x7f>
f0114d4a:	ff 75 f0             	pushl  -0x10(%ebp)
f0114d4d:	68 bc 99 13 f0       	push   $0xf01399bc
f0114d52:	68 ca 07 00 00       	push   $0x7ca
f0114d57:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114d5c:	e8 45 b4 fe ff       	call   f01001a6 <_panic>
f0114d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114d64:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114d69:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0114d6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114d6f:	c1 e8 0c             	shr    $0xc,%eax
f0114d72:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114d77:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114d7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114d81:	01 d0                	add    %edx,%eax
f0114d83:	8b 00                	mov    (%eax),%eax
f0114d85:	23 45 f4             	and    -0xc(%ebp),%eax
f0114d88:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114d8b:	0f 94 c0             	sete   %al
f0114d8e:	0f b6 c0             	movzbl %al,%eax
}
f0114d91:	c9                   	leave  
f0114d92:	c3                   	ret    

f0114d93 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0114d93:	55                   	push   %ebp
f0114d94:	89 e5                	mov    %esp,%ebp
f0114d96:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0114d99:	8b 45 10             	mov    0x10(%ebp),%eax
f0114d9c:	ba 01 00 00 00       	mov    $0x1,%edx
f0114da1:	88 c1                	mov    %al,%cl
f0114da3:	d3 e2                	shl    %cl,%edx
f0114da5:	89 d0                	mov    %edx,%eax
f0114da7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114dad:	c1 e8 16             	shr    $0x16,%eax
f0114db0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114db7:	8b 45 08             	mov    0x8(%ebp),%eax
f0114dba:	01 d0                	add    %edx,%eax
f0114dbc:	8b 00                	mov    (%eax),%eax
f0114dbe:	83 e0 01             	and    $0x1,%eax
f0114dc1:	85 c0                	test   %eax,%eax
f0114dc3:	75 0a                	jne    f0114dcf <SB+0x3c>
f0114dc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0114dca:	e9 cd 00 00 00       	jmp    f0114e9c <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114dd2:	c1 e8 16             	shr    $0x16,%eax
f0114dd5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114ddc:	8b 45 08             	mov    0x8(%ebp),%eax
f0114ddf:	01 d0                	add    %edx,%eax
f0114de1:	8b 00                	mov    (%eax),%eax
f0114de3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114de8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114deb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114dee:	c1 e8 0c             	shr    $0xc,%eax
f0114df1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0114df4:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114df9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0114dfc:	72 17                	jb     f0114e15 <SB+0x82>
f0114dfe:	ff 75 f0             	pushl  -0x10(%ebp)
f0114e01:	68 bc 99 13 f0       	push   $0xf01399bc
f0114e06:	68 d2 07 00 00       	push   $0x7d2
f0114e0b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114e10:	e8 91 b3 fe ff       	call   f01001a6 <_panic>
f0114e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114e18:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114e1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0114e20:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0114e24:	74 3c                	je     f0114e62 <SB+0xcf>
f0114e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e29:	c1 e8 0c             	shr    $0xc,%eax
f0114e2c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114e31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114e3b:	01 d0                	add    %edx,%eax
f0114e3d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0114e40:	c1 ea 0c             	shr    $0xc,%edx
f0114e43:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0114e49:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0114e50:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0114e53:	01 ca                	add    %ecx,%edx
f0114e55:	8b 12                	mov    (%edx),%edx
f0114e57:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114e5a:	f7 d1                	not    %ecx
f0114e5c:	21 ca                	and    %ecx,%edx
f0114e5e:	89 10                	mov    %edx,(%eax)
f0114e60:	eb 35                	jmp    f0114e97 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0114e62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e65:	c1 e8 0c             	shr    $0xc,%eax
f0114e68:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114e6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114e74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114e77:	01 c2                	add    %eax,%edx
f0114e79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e7c:	c1 e8 0c             	shr    $0xc,%eax
f0114e7f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114e84:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0114e8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114e8e:	01 c8                	add    %ecx,%eax
f0114e90:	8b 00                	mov    (%eax),%eax
f0114e92:	0b 45 f4             	or     -0xc(%ebp),%eax
f0114e95:	89 02                	mov    %eax,(%edx)
	return 0;
f0114e97:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114e9c:	c9                   	leave  
f0114e9d:	c3                   	ret    

f0114e9e <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0114e9e:	55                   	push   %ebp
f0114e9f:	89 e5                	mov    %esp,%ebp
f0114ea1:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114ea4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114ea7:	c1 e8 16             	shr    $0x16,%eax
f0114eaa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114eb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0114eb4:	01 d0                	add    %edx,%eax
f0114eb6:	8b 00                	mov    (%eax),%eax
f0114eb8:	83 e0 01             	and    $0x1,%eax
f0114ebb:	85 c0                	test   %eax,%eax
f0114ebd:	75 0a                	jne    f0114ec9 <CPs+0x2b>
f0114ebf:	b8 00 00 00 00       	mov    $0x0,%eax
f0114ec4:	e9 b8 00 00 00       	jmp    f0114f81 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114ecc:	c1 e8 16             	shr    $0x16,%eax
f0114ecf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114ed6:	8b 45 08             	mov    0x8(%ebp),%eax
f0114ed9:	01 d0                	add    %edx,%eax
f0114edb:	8b 00                	mov    (%eax),%eax
f0114edd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114ee2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114ee8:	c1 e8 0c             	shr    $0xc,%eax
f0114eeb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0114eee:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114ef3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0114ef6:	72 17                	jb     f0114f0f <CPs+0x71>
f0114ef8:	ff 75 f0             	pushl  -0x10(%ebp)
f0114efb:	68 bc 99 13 f0       	push   $0xf01399bc
f0114f00:	68 db 07 00 00       	push   $0x7db
f0114f05:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114f0a:	e8 97 b2 fe ff       	call   f01001a6 <_panic>
f0114f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114f12:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114f17:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0114f1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114f21:	eb 53                	jmp    f0114f76 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0114f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114f26:	ba 01 00 00 00       	mov    $0x1,%edx
f0114f2b:	88 c1                	mov    %al,%cl
f0114f2d:	d3 e2                	shl    %cl,%edx
f0114f2f:	89 d0                	mov    %edx,%eax
f0114f31:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0114f34:	8b 45 14             	mov    0x14(%ebp),%eax
f0114f37:	23 45 e4             	and    -0x1c(%ebp),%eax
f0114f3a:	85 c0                	test   %eax,%eax
f0114f3c:	74 34                	je     f0114f72 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0114f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114f41:	c1 e8 0c             	shr    $0xc,%eax
f0114f44:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114f49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114f50:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114f53:	01 d0                	add    %edx,%eax
f0114f55:	8b 00                	mov    (%eax),%eax
f0114f57:	33 45 10             	xor    0x10(%ebp),%eax
f0114f5a:	23 45 e4             	and    -0x1c(%ebp),%eax
f0114f5d:	85 c0                	test   %eax,%eax
f0114f5f:	0f 94 c0             	sete   %al
f0114f62:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0114f65:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f69:	75 08                	jne    f0114f73 <CPs+0xd5>
f0114f6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0114f70:	eb 0f                	jmp    f0114f81 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0114f72:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0114f73:	ff 45 f4             	incl   -0xc(%ebp)
f0114f76:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0114f7a:	7e a7                	jle    f0114f23 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0114f7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0114f81:	c9                   	leave  
f0114f82:	c3                   	ret    

f0114f83 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0114f83:	55                   	push   %ebp
f0114f84:	89 e5                	mov    %esp,%ebp
f0114f86:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114f89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114f8c:	c1 e8 16             	shr    $0x16,%eax
f0114f8f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114f96:	8b 45 08             	mov    0x8(%ebp),%eax
f0114f99:	01 d0                	add    %edx,%eax
f0114f9b:	8b 00                	mov    (%eax),%eax
f0114f9d:	83 e0 01             	and    $0x1,%eax
f0114fa0:	85 c0                	test   %eax,%eax
f0114fa2:	75 07                	jne    f0114fab <CA+0x28>
f0114fa4:	b8 00 00 00 00       	mov    $0x0,%eax
f0114fa9:	eb 6f                	jmp    f011501a <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114fae:	c1 e8 16             	shr    $0x16,%eax
f0114fb1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114fb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0114fbb:	01 d0                	add    %edx,%eax
f0114fbd:	8b 00                	mov    (%eax),%eax
f0114fbf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0114fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114fca:	c1 e8 0c             	shr    $0xc,%eax
f0114fcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114fd0:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114fd5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0114fd8:	72 17                	jb     f0114ff1 <CA+0x6e>
f0114fda:	ff 75 f4             	pushl  -0xc(%ebp)
f0114fdd:	68 bc 99 13 f0       	push   $0xf01399bc
f0114fe2:	68 ea 07 00 00       	push   $0x7ea
f0114fe7:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0114fec:	e8 b5 b1 fe ff       	call   f01001a6 <_panic>
f0114ff1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114ff4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114ff9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0114ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114fff:	c1 e8 0c             	shr    $0xc,%eax
f0115002:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115007:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011500e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115011:	01 d0                	add    %edx,%eax
f0115013:	8b 00                	mov    (%eax),%eax
f0115015:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f011501a:	c9                   	leave  
f011501b:	c3                   	ret    

f011501c <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011501c:	55                   	push   %ebp
f011501d:	89 e5                	mov    %esp,%ebp
f011501f:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0115022:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115025:	c1 e8 16             	shr    $0x16,%eax
f0115028:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011502f:	8b 45 08             	mov    0x8(%ebp),%eax
f0115032:	01 d0                	add    %edx,%eax
f0115034:	8b 00                	mov    (%eax),%eax
f0115036:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0115039:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011503c:	83 e0 01             	and    $0x1,%eax
f011503f:	85 c0                	test   %eax,%eax
f0115041:	0f 84 92 00 00 00    	je     f01150d9 <CP+0xbd>
	{
		uint32 *t = NULL;
f0115047:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f011504e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115051:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115056:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115059:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011505c:	c1 e8 0c             	shr    $0xc,%eax
f011505f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0115062:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0115067:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f011506a:	72 17                	jb     f0115083 <CP+0x67>
f011506c:	ff 75 ec             	pushl  -0x14(%ebp)
f011506f:	68 bc 99 13 f0       	push   $0xf01399bc
f0115074:	68 f5 07 00 00       	push   $0x7f5
f0115079:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011507e:	e8 23 b1 fe ff       	call   f01001a6 <_panic>
f0115083:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115086:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011508b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f011508e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115091:	c1 e8 0c             	shr    $0xc,%eax
f0115094:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115099:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01150a3:	01 d0                	add    %edx,%eax
f01150a5:	8b 00                	mov    (%eax),%eax
f01150a7:	23 45 10             	and    0x10(%ebp),%eax
f01150aa:	3b 45 10             	cmp    0x10(%ebp),%eax
f01150ad:	75 2a                	jne    f01150d9 <CP+0xbd>
f01150af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150b2:	c1 e8 0c             	shr    $0xc,%eax
f01150b5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01150ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01150c4:	01 d0                	add    %edx,%eax
f01150c6:	8b 00                	mov    (%eax),%eax
f01150c8:	f7 d0                	not    %eax
f01150ca:	23 45 14             	and    0x14(%ebp),%eax
f01150cd:	3b 45 14             	cmp    0x14(%ebp),%eax
f01150d0:	75 07                	jne    f01150d9 <CP+0xbd>
			return 1;
f01150d2:	b8 01 00 00 00       	mov    $0x1,%eax
f01150d7:	eb 05                	jmp    f01150de <CP+0xc2>
	}
	return 0;
f01150d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01150de:	c9                   	leave  
f01150df:	c3                   	ret    

f01150e0 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01150e0:	55                   	push   %ebp
f01150e1:	89 e5                	mov    %esp,%ebp
f01150e3:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01150e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150e9:	c1 e8 16             	shr    $0x16,%eax
f01150ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01150f6:	01 d0                	add    %edx,%eax
f01150f8:	8b 00                	mov    (%eax),%eax
f01150fa:	83 e0 01             	and    $0x1,%eax
f01150fd:	85 c0                	test   %eax,%eax
f01150ff:	75 07                	jne    f0115108 <GP+0x28>
f0115101:	b8 00 00 00 00       	mov    $0x0,%eax
f0115106:	eb 6f                	jmp    f0115177 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115108:	8b 45 0c             	mov    0xc(%ebp),%eax
f011510b:	c1 e8 16             	shr    $0x16,%eax
f011510e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115115:	8b 45 08             	mov    0x8(%ebp),%eax
f0115118:	01 d0                	add    %edx,%eax
f011511a:	8b 00                	mov    (%eax),%eax
f011511c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115121:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115127:	c1 e8 0c             	shr    $0xc,%eax
f011512a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011512d:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0115132:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115135:	72 17                	jb     f011514e <GP+0x6e>
f0115137:	ff 75 f4             	pushl  -0xc(%ebp)
f011513a:	68 bc 99 13 f0       	push   $0xf01399bc
f011513f:	68 02 08 00 00       	push   $0x802
f0115144:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0115149:	e8 58 b0 fe ff       	call   f01001a6 <_panic>
f011514e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115151:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115156:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0115159:	8b 45 0c             	mov    0xc(%ebp),%eax
f011515c:	c1 e8 0c             	shr    $0xc,%eax
f011515f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115164:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011516b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011516e:	01 d0                	add    %edx,%eax
f0115170:	8b 00                	mov    (%eax),%eax
f0115172:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0115177:	c9                   	leave  
f0115178:	c3                   	ret    

f0115179 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0115179:	55                   	push   %ebp
f011517a:	89 e5                	mov    %esp,%ebp
f011517c:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011517f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115186:	eb 18                	jmp    f01151a0 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115188:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011518b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115192:	8b 45 08             	mov    0x8(%ebp),%eax
f0115195:	01 d0                	add    %edx,%eax
f0115197:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011519d:	ff 45 fc             	incl   -0x4(%ebp)
f01151a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01151a3:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01151a8:	76 de                	jbe    f0115188 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01151aa:	90                   	nop
f01151ab:	c9                   	leave  
f01151ac:	c3                   	ret    

f01151ad <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01151ad:	55                   	push   %ebp
f01151ae:	89 e5                	mov    %esp,%ebp
f01151b0:	83 ec 38             	sub    $0x38,%esp
f01151b3:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01151b6:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01151b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01151bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01151c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01151c4:	8b 45 10             	mov    0x10(%ebp),%eax
f01151c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01151cc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01151cf:	e9 ea 01 00 00       	jmp    f01153be <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01151d4:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01151d8:	74 44                	je     f011521e <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01151da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01151dd:	83 ec 04             	sub    $0x4,%esp
f01151e0:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01151e3:	52                   	push   %edx
f01151e4:	50                   	push   %eax
f01151e5:	ff 75 08             	pushl  0x8(%ebp)
f01151e8:	e8 14 1a ff ff       	call   f0106c01 <get_frame_info>
f01151ed:	83 c4 10             	add    $0x10,%esp
f01151f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01151f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151f6:	85 c0                	test   %eax,%eax
f01151f8:	75 24                	jne    f011521e <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01151fa:	83 ec 04             	sub    $0x4,%esp
f01151fd:	68 ec 99 13 f0       	push   $0xf01399ec
f0115202:	68 1d 08 00 00       	push   $0x81d
f0115207:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011520c:	e8 21 b1 fe ff       	call   f0100332 <_warn>
f0115211:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115214:	b8 00 00 00 00       	mov    $0x0,%eax
f0115219:	e9 b6 01 00 00       	jmp    f01153d4 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f011521e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115221:	83 ec 04             	sub    $0x4,%esp
f0115224:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0115227:	52                   	push   %edx
f0115228:	50                   	push   %eax
f0115229:	ff 75 08             	pushl  0x8(%ebp)
f011522c:	e8 d0 19 ff ff       	call   f0106c01 <get_frame_info>
f0115231:	83 c4 10             	add    $0x10,%esp
f0115234:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115237:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011523a:	85 c0                	test   %eax,%eax
f011523c:	75 24                	jne    f0115262 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011523e:	83 ec 04             	sub    $0x4,%esp
f0115241:	68 18 9a 13 f0       	push   $0xf0139a18
f0115246:	68 24 08 00 00       	push   $0x824
f011524b:	68 5e 7b 13 f0       	push   $0xf0137b5e
f0115250:	e8 dd b0 fe ff       	call   f0100332 <_warn>
f0115255:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115258:	b8 00 00 00 00       	mov    $0x0,%eax
f011525d:	e9 72 01 00 00       	jmp    f01153d4 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115262:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115266:	75 70                	jne    f01152d8 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115268:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011526b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011526e:	c1 ea 0c             	shr    $0xc,%edx
f0115271:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115277:	c1 e2 02             	shl    $0x2,%edx
f011527a:	01 d0                	add    %edx,%eax
f011527c:	8b 00                	mov    (%eax),%eax
f011527e:	c1 e8 0c             	shr    $0xc,%eax
f0115281:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115284:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115287:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011528a:	c1 ea 0c             	shr    $0xc,%edx
f011528d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115293:	c1 e2 02             	shl    $0x2,%edx
f0115296:	01 d0                	add    %edx,%eax
f0115298:	8b 00                	mov    (%eax),%eax
f011529a:	c1 e8 0c             	shr    $0xc,%eax
f011529d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01152a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01152a3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01152a6:	74 30                	je     f01152d8 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01152a8:	83 ec 04             	sub    $0x4,%esp
f01152ab:	ff 75 e4             	pushl  -0x1c(%ebp)
f01152ae:	ff 75 e8             	pushl  -0x18(%ebp)
f01152b1:	ff 75 f0             	pushl  -0x10(%ebp)
f01152b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01152b7:	68 44 9a 13 f0       	push   $0xf0139a44
f01152bc:	68 2e 08 00 00       	push   $0x82e
f01152c1:	68 5e 7b 13 f0       	push   $0xf0137b5e
f01152c6:	e8 67 b0 fe ff       	call   f0100332 <_warn>
f01152cb:	83 c4 20             	add    $0x20,%esp
				return 0;
f01152ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01152d3:	e9 fc 00 00 00       	jmp    f01153d4 <CCP+0x227>
			}
		}
		if (ref != -1)
f01152d8:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01152dc:	74 52                	je     f0115330 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01152de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01152e2:	74 0e                	je     f01152f2 <CCP+0x145>
f01152e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01152e7:	8b 40 08             	mov    0x8(%eax),%eax
f01152ea:	0f b7 c0             	movzwl %ax,%eax
f01152ed:	3b 45 18             	cmp    0x18(%ebp),%eax
f01152f0:	74 3e                	je     f0115330 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01152f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01152f6:	74 0b                	je     f0115303 <CCP+0x156>
f01152f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01152fb:	8b 40 08             	mov    0x8(%eax),%eax
f01152fe:	0f b7 c0             	movzwl %ax,%eax
f0115301:	eb 05                	jmp    f0115308 <CCP+0x15b>
f0115303:	b8 00 00 00 00       	mov    $0x0,%eax
f0115308:	83 ec 0c             	sub    $0xc,%esp
f011530b:	50                   	push   %eax
f011530c:	ff 75 f0             	pushl  -0x10(%ebp)
f011530f:	68 a0 9a 13 f0       	push   $0xf0139aa0
f0115314:	68 36 08 00 00       	push   $0x836
f0115319:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011531e:	e8 0f b0 fe ff       	call   f0100332 <_warn>
f0115323:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115326:	b8 00 00 00 00       	mov    $0x0,%eax
f011532b:	e9 a4 00 00 00       	jmp    f01153d4 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115330:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115333:	ff 75 20             	pushl  0x20(%ebp)
f0115336:	ff 75 1c             	pushl  0x1c(%ebp)
f0115339:	50                   	push   %eax
f011533a:	ff 75 08             	pushl  0x8(%ebp)
f011533d:	e8 5c fb ff ff       	call   f0114e9e <CPs>
f0115342:	83 c4 10             	add    $0x10,%esp
f0115345:	85 c0                	test   %eax,%eax
f0115347:	7f 21                	jg     f011536a <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115349:	83 ec 04             	sub    $0x4,%esp
f011534c:	68 10 9b 13 f0       	push   $0xf0139b10
f0115351:	68 3c 08 00 00       	push   $0x83c
f0115356:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011535b:	e8 d2 af fe ff       	call   f0100332 <_warn>
f0115360:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115363:	b8 00 00 00 00       	mov    $0x0,%eax
f0115368:	eb 6a                	jmp    f01153d4 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f011536a:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011536e:	74 3a                	je     f01153aa <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115370:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115373:	ff 75 28             	pushl  0x28(%ebp)
f0115376:	ff 75 24             	pushl  0x24(%ebp)
f0115379:	50                   	push   %eax
f011537a:	ff 75 08             	pushl  0x8(%ebp)
f011537d:	e8 1c fb ff ff       	call   f0114e9e <CPs>
f0115382:	83 c4 10             	add    $0x10,%esp
f0115385:	85 c0                	test   %eax,%eax
f0115387:	7f 21                	jg     f01153aa <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115389:	83 ec 04             	sub    $0x4,%esp
f011538c:	68 58 9b 13 f0       	push   $0xf0139b58
f0115391:	68 43 08 00 00       	push   $0x843
f0115396:	68 5e 7b 13 f0       	push   $0xf0137b5e
f011539b:	e8 92 af fe ff       	call   f0100332 <_warn>
f01153a0:	83 c4 10             	add    $0x10,%esp
				return 0;
f01153a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01153a8:	eb 2a                	jmp    f01153d4 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01153aa:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01153ae:	74 07                	je     f01153b7 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01153b0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01153b7:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01153be:	8b 55 10             	mov    0x10(%ebp),%edx
f01153c1:	8b 45 14             	mov    0x14(%ebp),%eax
f01153c4:	01 d0                	add    %edx,%eax
f01153c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01153c9:	0f 87 05 fe ff ff    	ja     f01151d4 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01153cf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01153d4:	c9                   	leave  
f01153d5:	c3                   	ret    

f01153d6 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01153d6:	55                   	push   %ebp
f01153d7:	89 e5                	mov    %esp,%ebp
f01153d9:	57                   	push   %edi
f01153da:	56                   	push   %esi
f01153db:	53                   	push   %ebx
f01153dc:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01153e2:	a0 ce fc 18 f0       	mov    0xf018fcce,%al
f01153e7:	84 c0                	test   %al,%al
f01153e9:	0f 84 a8 09 00 00    	je     f0115d97 <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01153ef:	c6 05 ce fc 18 f0 00 	movb   $0x0,0xf018fcce
		char command[100] = "load fos_add 20";
f01153f6:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01153fc:	bb f8 9d 13 f0       	mov    $0xf0139df8,%ebx
f0115401:	ba 04 00 00 00       	mov    $0x4,%edx
f0115406:	89 c7                	mov    %eax,%edi
f0115408:	89 de                	mov    %ebx,%esi
f011540a:	89 d1                	mov    %edx,%ecx
f011540c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011540e:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115414:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115419:	b8 00 00 00 00       	mov    $0x0,%eax
f011541e:	89 d7                	mov    %edx,%edi
f0115420:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115422:	83 ec 0c             	sub    $0xc,%esp
f0115425:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011542b:	50                   	push   %eax
f011542c:	e8 5e b8 fe ff       	call   f0100c8f <execute_command>
f0115431:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115434:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011543a:	bb 5c 9e 13 f0       	mov    $0xf0139e5c,%ebx
f011543f:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115444:	89 c7                	mov    %eax,%edi
f0115446:	89 de                	mov    %ebx,%esi
f0115448:	89 d1                	mov    %edx,%ecx
f011544a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011544c:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115452:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115457:	b0 00                	mov    $0x0,%al
f0115459:	89 d7                	mov    %edx,%edi
f011545b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011545d:	83 ec 0c             	sub    $0xc,%esp
f0115460:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115466:	50                   	push   %eax
f0115467:	e8 23 b8 fe ff       	call   f0100c8f <execute_command>
f011546c:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011546f:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115475:	bb c0 9e 13 f0       	mov    $0xf0139ec0,%ebx
f011547a:	ba 17 00 00 00       	mov    $0x17,%edx
f011547f:	89 c7                	mov    %eax,%edi
f0115481:	89 de                	mov    %ebx,%esi
f0115483:	89 d1                	mov    %edx,%ecx
f0115485:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115487:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f011548d:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115492:	b0 00                	mov    $0x0,%al
f0115494:	89 d7                	mov    %edx,%edi
f0115496:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115498:	83 ec 0c             	sub    $0xc,%esp
f011549b:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01154a1:	50                   	push   %eax
f01154a2:	e8 e8 b7 fe ff       	call   f0100c8f <execute_command>
f01154a7:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01154aa:	83 ec 04             	sub    $0x4,%esp
f01154ad:	6a 00                	push   $0x0
f01154af:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01154b2:	50                   	push   %eax
f01154b3:	68 00 10 00 00       	push   $0x1000
f01154b8:	e8 1b 39 ff ff       	call   f0108dd8 <envid2env>
f01154bd:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01154c0:	83 ec 04             	sub    $0x4,%esp
f01154c3:	6a 00                	push   $0x0
f01154c5:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01154c8:	50                   	push   %eax
f01154c9:	68 01 10 00 00       	push   $0x1001
f01154ce:	e8 05 39 ff ff       	call   f0108dd8 <envid2env>
f01154d3:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01154d6:	83 ec 04             	sub    $0x4,%esp
f01154d9:	6a 00                	push   $0x0
f01154db:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01154de:	50                   	push   %eax
f01154df:	68 02 10 00 00       	push   $0x1002
f01154e4:	e8 ef 38 ff ff       	call   f0108dd8 <envid2env>
f01154e9:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01154ec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01154ef:	85 c0                	test   %eax,%eax
f01154f1:	74 0e                	je     f0115501 <test_priority_normal_and_higher+0x12b>
f01154f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154f6:	85 c0                	test   %eax,%eax
f01154f8:	74 07                	je     f0115501 <test_priority_normal_and_higher+0x12b>
f01154fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01154fd:	85 c0                	test   %eax,%eax
f01154ff:	75 14                	jne    f0115515 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115501:	83 ec 04             	sub    $0x4,%esp
f0115504:	68 98 9b 13 f0       	push   $0xf0139b98
f0115509:	6a 26                	push   $0x26
f011550b:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115510:	e8 91 ac fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115515:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115518:	8b 40 74             	mov    0x74(%eax),%eax
f011551b:	83 f8 14             	cmp    $0x14,%eax
f011551e:	75 16                	jne    f0115536 <test_priority_normal_and_higher+0x160>
f0115520:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115523:	8b 40 74             	mov    0x74(%eax),%eax
f0115526:	83 f8 0f             	cmp    $0xf,%eax
f0115529:	75 0b                	jne    f0115536 <test_priority_normal_and_higher+0x160>
f011552b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011552e:	8b 40 74             	mov    0x74(%eax),%eax
f0115531:	83 f8 0a             	cmp    $0xa,%eax
f0115534:	74 14                	je     f011554a <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115536:	83 ec 04             	sub    $0x4,%esp
f0115539:	68 cc 9b 13 f0       	push   $0xf0139bcc
f011553e:	6a 29                	push   $0x29
f0115540:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115545:	e8 5c ac fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f011554a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115551:	eb 43                	jmp    f0115596 <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115553:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115556:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115559:	89 d0                	mov    %edx,%eax
f011555b:	01 c0                	add    %eax,%eax
f011555d:	01 d0                	add    %edx,%eax
f011555f:	c1 e0 03             	shl    $0x3,%eax
f0115562:	01 c8                	add    %ecx,%eax
f0115564:	83 c0 78             	add    $0x78,%eax
f0115567:	8b 10                	mov    (%eax),%edx
f0115569:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011556c:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115573:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115576:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115579:	89 d0                	mov    %edx,%eax
f011557b:	01 c0                	add    %eax,%eax
f011557d:	01 d0                	add    %edx,%eax
f011557f:	c1 e0 03             	shl    $0x3,%eax
f0115582:	01 c8                	add    %ecx,%eax
f0115584:	83 e8 80             	sub    $0xffffff80,%eax
f0115587:	8b 10                	mov    (%eax),%edx
f0115589:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011558c:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115593:	ff 45 e4             	incl   -0x1c(%ebp)
f0115596:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011559a:	7e b7                	jle    f0115553 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011559c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01155a3:	eb 43                	jmp    f01155e8 <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01155a5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01155a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01155ab:	89 d0                	mov    %edx,%eax
f01155ad:	01 c0                	add    %eax,%eax
f01155af:	01 d0                	add    %edx,%eax
f01155b1:	c1 e0 03             	shl    $0x3,%eax
f01155b4:	01 c8                	add    %ecx,%eax
f01155b6:	83 c0 78             	add    $0x78,%eax
f01155b9:	8b 10                	mov    (%eax),%edx
f01155bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01155be:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01155c5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01155c8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01155cb:	89 d0                	mov    %edx,%eax
f01155cd:	01 c0                	add    %eax,%eax
f01155cf:	01 d0                	add    %edx,%eax
f01155d1:	c1 e0 03             	shl    $0x3,%eax
f01155d4:	01 c8                	add    %ecx,%eax
f01155d6:	83 e8 80             	sub    $0xffffff80,%eax
f01155d9:	8b 10                	mov    (%eax),%edx
f01155db:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01155de:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01155e5:	ff 45 e0             	incl   -0x20(%ebp)
f01155e8:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01155ec:	7e b7                	jle    f01155a5 <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01155ee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01155f5:	eb 43                	jmp    f011563a <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01155f7:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01155fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01155fd:	89 d0                	mov    %edx,%eax
f01155ff:	01 c0                	add    %eax,%eax
f0115601:	01 d0                	add    %edx,%eax
f0115603:	c1 e0 03             	shl    $0x3,%eax
f0115606:	01 c8                	add    %ecx,%eax
f0115608:	83 c0 78             	add    $0x78,%eax
f011560b:	8b 10                	mov    (%eax),%edx
f011560d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115610:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115617:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f011561a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011561d:	89 d0                	mov    %edx,%eax
f011561f:	01 c0                	add    %eax,%eax
f0115621:	01 d0                	add    %edx,%eax
f0115623:	c1 e0 03             	shl    $0x3,%eax
f0115626:	01 c8                	add    %ecx,%eax
f0115628:	83 e8 80             	sub    $0xffffff80,%eax
f011562b:	8b 10                	mov    (%eax),%edx
f011562d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115630:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115637:	ff 45 dc             	incl   -0x24(%ebp)
f011563a:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011563e:	7e b7                	jle    f01155f7 <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115640:	e8 85 67 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115645:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115648:	e8 3f e6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011564d:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115650:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115653:	83 ec 08             	sub    $0x8,%esp
f0115656:	6a 03                	push   $0x3
f0115658:	50                   	push   %eax
f0115659:	e8 61 4c ff ff       	call   f010a2bf <set_program_priority>
f011565e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115661:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115664:	83 ec 08             	sub    $0x8,%esp
f0115667:	6a 03                	push   $0x3
f0115669:	50                   	push   %eax
f011566a:	e8 50 4c ff ff       	call   f010a2bf <set_program_priority>
f011566f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115672:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115675:	83 ec 08             	sub    $0x8,%esp
f0115678:	6a 03                	push   $0x3
f011567a:	50                   	push   %eax
f011567b:	e8 3f 4c ff ff       	call   f010a2bf <set_program_priority>
f0115680:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115683:	e8 04 e6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115688:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011568b:	74 14                	je     f01156a1 <test_priority_normal_and_higher+0x2cb>
f011568d:	83 ec 04             	sub    $0x4,%esp
f0115690:	68 18 9c 13 f0       	push   $0xf0139c18
f0115695:	6a 45                	push   $0x45
f0115697:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011569c:	e8 05 ab fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01156a1:	e8 24 67 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01156a6:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01156a9:	74 14                	je     f01156bf <test_priority_normal_and_higher+0x2e9>
f01156ab:	83 ec 04             	sub    $0x4,%esp
f01156ae:	68 18 9c 13 f0       	push   $0xf0139c18
f01156b3:	6a 46                	push   $0x46
f01156b5:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01156ba:	e8 e7 aa fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01156bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01156c2:	8b 40 74             	mov    0x74(%eax),%eax
f01156c5:	83 f8 14             	cmp    $0x14,%eax
f01156c8:	75 16                	jne    f01156e0 <test_priority_normal_and_higher+0x30a>
f01156ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01156cd:	8b 40 74             	mov    0x74(%eax),%eax
f01156d0:	83 f8 0f             	cmp    $0xf,%eax
f01156d3:	75 0b                	jne    f01156e0 <test_priority_normal_and_higher+0x30a>
f01156d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01156d8:	8b 40 74             	mov    0x74(%eax),%eax
f01156db:	83 f8 0a             	cmp    $0xa,%eax
f01156de:	74 14                	je     f01156f4 <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01156e0:	83 ec 04             	sub    $0x4,%esp
f01156e3:	68 44 9c 13 f0       	push   $0xf0139c44
f01156e8:	6a 49                	push   $0x49
f01156ea:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01156ef:	e8 b2 aa fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01156f4:	e8 d1 66 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01156f9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01156fc:	e8 8b e5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115701:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115704:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115707:	83 ec 08             	sub    $0x8,%esp
f011570a:	6a 04                	push   $0x4
f011570c:	50                   	push   %eax
f011570d:	e8 ad 4b ff ff       	call   f010a2bf <set_program_priority>
f0115712:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115715:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115718:	83 ec 08             	sub    $0x8,%esp
f011571b:	6a 04                	push   $0x4
f011571d:	50                   	push   %eax
f011571e:	e8 9c 4b ff ff       	call   f010a2bf <set_program_priority>
f0115723:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115726:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115729:	83 ec 08             	sub    $0x8,%esp
f011572c:	6a 04                	push   $0x4
f011572e:	50                   	push   %eax
f011572f:	e8 8b 4b ff ff       	call   f010a2bf <set_program_priority>
f0115734:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115737:	e8 50 e5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011573c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011573f:	74 14                	je     f0115755 <test_priority_normal_and_higher+0x37f>
f0115741:	83 ec 04             	sub    $0x4,%esp
f0115744:	68 18 9c 13 f0       	push   $0xf0139c18
f0115749:	6a 53                	push   $0x53
f011574b:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115750:	e8 51 aa fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115755:	e8 70 66 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011575a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011575d:	74 14                	je     f0115773 <test_priority_normal_and_higher+0x39d>
f011575f:	83 ec 04             	sub    $0x4,%esp
f0115762:	68 98 9c 13 f0       	push   $0xf0139c98
f0115767:	6a 54                	push   $0x54
f0115769:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011576e:	e8 33 aa fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115773:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115776:	8b 40 74             	mov    0x74(%eax),%eax
f0115779:	83 f8 14             	cmp    $0x14,%eax
f011577c:	75 16                	jne    f0115794 <test_priority_normal_and_higher+0x3be>
f011577e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115781:	8b 40 74             	mov    0x74(%eax),%eax
f0115784:	83 f8 0f             	cmp    $0xf,%eax
f0115787:	75 0b                	jne    f0115794 <test_priority_normal_and_higher+0x3be>
f0115789:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011578c:	8b 40 74             	mov    0x74(%eax),%eax
f011578f:	83 f8 14             	cmp    $0x14,%eax
f0115792:	74 14                	je     f01157a8 <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115794:	83 ec 04             	sub    $0x4,%esp
f0115797:	68 c8 9c 13 f0       	push   $0xf0139cc8
f011579c:	6a 57                	push   $0x57
f011579e:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01157a3:	e8 fe a9 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01157a8:	e8 1d 66 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01157ad:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01157b0:	e8 d7 e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01157b5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01157b8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01157bb:	83 ec 08             	sub    $0x8,%esp
f01157be:	6a 04                	push   $0x4
f01157c0:	50                   	push   %eax
f01157c1:	e8 f9 4a ff ff       	call   f010a2bf <set_program_priority>
f01157c6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01157c9:	e8 be e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01157ce:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01157d1:	74 14                	je     f01157e7 <test_priority_normal_and_higher+0x411>
f01157d3:	83 ec 04             	sub    $0x4,%esp
f01157d6:	68 18 9c 13 f0       	push   $0xf0139c18
f01157db:	6a 5f                	push   $0x5f
f01157dd:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01157e2:	e8 bf a9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01157e7:	e8 de 65 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01157ec:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01157ef:	74 14                	je     f0115805 <test_priority_normal_and_higher+0x42f>
f01157f1:	83 ec 04             	sub    $0x4,%esp
f01157f4:	68 18 9c 13 f0       	push   $0xf0139c18
f01157f9:	6a 60                	push   $0x60
f01157fb:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115800:	e8 a1 a9 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115805:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115808:	8b 40 74             	mov    0x74(%eax),%eax
f011580b:	83 f8 14             	cmp    $0x14,%eax
f011580e:	75 16                	jne    f0115826 <test_priority_normal_and_higher+0x450>
f0115810:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115813:	8b 40 74             	mov    0x74(%eax),%eax
f0115816:	83 f8 0f             	cmp    $0xf,%eax
f0115819:	75 0b                	jne    f0115826 <test_priority_normal_and_higher+0x450>
f011581b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011581e:	8b 40 74             	mov    0x74(%eax),%eax
f0115821:	83 f8 14             	cmp    $0x14,%eax
f0115824:	74 14                	je     f011583a <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f0115826:	83 ec 04             	sub    $0x4,%esp
f0115829:	68 10 9d 13 f0       	push   $0xf0139d10
f011582e:	6a 63                	push   $0x63
f0115830:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115835:	e8 6c a9 fe ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011583a:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0115841:	eb 1a                	jmp    f011585d <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115843:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115846:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0115849:	89 d0                	mov    %edx,%eax
f011584b:	01 c0                	add    %eax,%eax
f011584d:	01 d0                	add    %edx,%eax
f011584f:	c1 e0 03             	shl    $0x3,%eax
f0115852:	01 c8                	add    %ecx,%eax
f0115854:	83 c0 7c             	add    $0x7c,%eax
f0115857:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011585a:	ff 45 d8             	incl   -0x28(%ebp)
f011585d:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0115861:	7e e0                	jle    f0115843 <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115863:	e8 62 65 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115868:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011586b:	e8 1c e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115870:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115873:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115876:	83 ec 08             	sub    $0x8,%esp
f0115879:	6a 04                	push   $0x4
f011587b:	50                   	push   %eax
f011587c:	e8 3e 4a ff ff       	call   f010a2bf <set_program_priority>
f0115881:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115884:	e8 03 e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115889:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011588c:	74 14                	je     f01158a2 <test_priority_normal_and_higher+0x4cc>
f011588e:	83 ec 04             	sub    $0x4,%esp
f0115891:	68 18 9c 13 f0       	push   $0xf0139c18
f0115896:	6a 70                	push   $0x70
f0115898:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011589d:	e8 04 a9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01158a2:	e8 23 65 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01158a7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01158aa:	74 14                	je     f01158c0 <test_priority_normal_and_higher+0x4ea>
f01158ac:	83 ec 04             	sub    $0x4,%esp
f01158af:	68 18 9c 13 f0       	push   $0xf0139c18
f01158b4:	6a 71                	push   $0x71
f01158b6:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01158bb:	e8 e6 a8 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01158c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01158c3:	8b 40 74             	mov    0x74(%eax),%eax
f01158c6:	83 f8 14             	cmp    $0x14,%eax
f01158c9:	75 16                	jne    f01158e1 <test_priority_normal_and_higher+0x50b>
f01158cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01158ce:	8b 40 74             	mov    0x74(%eax),%eax
f01158d1:	83 f8 0f             	cmp    $0xf,%eax
f01158d4:	75 0b                	jne    f01158e1 <test_priority_normal_and_higher+0x50b>
f01158d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158d9:	8b 40 74             	mov    0x74(%eax),%eax
f01158dc:	83 f8 14             	cmp    $0x14,%eax
f01158df:	74 14                	je     f01158f5 <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f01158e1:	83 ec 04             	sub    $0x4,%esp
f01158e4:	68 10 9d 13 f0       	push   $0xf0139d10
f01158e9:	6a 74                	push   $0x74
f01158eb:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01158f0:	e8 b1 a8 fe ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f01158f5:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01158fc:	eb 1a                	jmp    f0115918 <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01158fe:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115901:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0115904:	89 d0                	mov    %edx,%eax
f0115906:	01 c0                	add    %eax,%eax
f0115908:	01 d0                	add    %edx,%eax
f011590a:	c1 e0 03             	shl    $0x3,%eax
f011590d:	01 c8                	add    %ecx,%eax
f011590f:	83 c0 7c             	add    $0x7c,%eax
f0115912:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0115915:	ff 45 d4             	incl   -0x2c(%ebp)
f0115918:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011591c:	7e e0                	jle    f01158fe <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011591e:	e8 a7 64 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115923:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115926:	e8 61 e3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011592b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011592e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115931:	83 ec 08             	sub    $0x8,%esp
f0115934:	6a 05                	push   $0x5
f0115936:	50                   	push   %eax
f0115937:	e8 83 49 ff ff       	call   f010a2bf <set_program_priority>
f011593c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011593f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115942:	83 ec 08             	sub    $0x8,%esp
f0115945:	6a 05                	push   $0x5
f0115947:	50                   	push   %eax
f0115948:	e8 72 49 ff ff       	call   f010a2bf <set_program_priority>
f011594d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115950:	e8 37 e3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115955:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115958:	74 14                	je     f011596e <test_priority_normal_and_higher+0x598>
f011595a:	83 ec 04             	sub    $0x4,%esp
f011595d:	68 18 9c 13 f0       	push   $0xf0139c18
f0115962:	6a 7f                	push   $0x7f
f0115964:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115969:	e8 38 a8 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011596e:	e8 57 64 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115973:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115976:	74 17                	je     f011598f <test_priority_normal_and_higher+0x5b9>
f0115978:	83 ec 04             	sub    $0x4,%esp
f011597b:	68 18 9c 13 f0       	push   $0xf0139c18
f0115980:	68 80 00 00 00       	push   $0x80
f0115985:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011598a:	e8 17 a8 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011598f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115992:	8b 40 74             	mov    0x74(%eax),%eax
f0115995:	83 f8 14             	cmp    $0x14,%eax
f0115998:	75 16                	jne    f01159b0 <test_priority_normal_and_higher+0x5da>
f011599a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011599d:	8b 40 74             	mov    0x74(%eax),%eax
f01159a0:	83 f8 1e             	cmp    $0x1e,%eax
f01159a3:	75 0b                	jne    f01159b0 <test_priority_normal_and_higher+0x5da>
f01159a5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01159a8:	8b 40 74             	mov    0x74(%eax),%eax
f01159ab:	83 f8 28             	cmp    $0x28,%eax
f01159ae:	74 17                	je     f01159c7 <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f01159b0:	83 ec 04             	sub    $0x4,%esp
f01159b3:	68 4c 9d 13 f0       	push   $0xf0139d4c
f01159b8:	68 83 00 00 00       	push   $0x83
f01159bd:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01159c2:	e8 df a7 fe ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f01159c7:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01159ce:	eb 1a                	jmp    f01159ea <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01159d0:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01159d3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01159d6:	89 d0                	mov    %edx,%eax
f01159d8:	01 c0                	add    %eax,%eax
f01159da:	01 d0                	add    %edx,%eax
f01159dc:	c1 e0 03             	shl    $0x3,%eax
f01159df:	01 c8                	add    %ecx,%eax
f01159e1:	83 c0 7c             	add    $0x7c,%eax
f01159e4:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01159e7:	ff 45 d0             	incl   -0x30(%ebp)
f01159ea:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01159ee:	7e e0                	jle    f01159d0 <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01159f0:	e8 d5 63 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01159f5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01159f8:	e8 8f e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01159fd:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115a00:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a03:	83 ec 08             	sub    $0x8,%esp
f0115a06:	6a 05                	push   $0x5
f0115a08:	50                   	push   %eax
f0115a09:	e8 b1 48 ff ff       	call   f010a2bf <set_program_priority>
f0115a0e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115a11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a14:	83 ec 08             	sub    $0x8,%esp
f0115a17:	6a 04                	push   $0x4
f0115a19:	50                   	push   %eax
f0115a1a:	e8 a0 48 ff ff       	call   f010a2bf <set_program_priority>
f0115a1f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115a22:	e8 65 e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115a27:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115a2a:	74 17                	je     f0115a43 <test_priority_normal_and_higher+0x66d>
f0115a2c:	83 ec 04             	sub    $0x4,%esp
f0115a2f:	68 18 9c 13 f0       	push   $0xf0139c18
f0115a34:	68 8e 00 00 00       	push   $0x8e
f0115a39:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115a3e:	e8 63 a7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115a43:	e8 82 63 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115a48:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115a4b:	74 17                	je     f0115a64 <test_priority_normal_and_higher+0x68e>
f0115a4d:	83 ec 04             	sub    $0x4,%esp
f0115a50:	68 18 9c 13 f0       	push   $0xf0139c18
f0115a55:	68 8f 00 00 00       	push   $0x8f
f0115a5a:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115a5f:	e8 42 a7 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115a64:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a67:	8b 40 74             	mov    0x74(%eax),%eax
f0115a6a:	83 f8 14             	cmp    $0x14,%eax
f0115a6d:	75 16                	jne    f0115a85 <test_priority_normal_and_higher+0x6af>
f0115a6f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a72:	8b 40 74             	mov    0x74(%eax),%eax
f0115a75:	83 f8 1e             	cmp    $0x1e,%eax
f0115a78:	75 0b                	jne    f0115a85 <test_priority_normal_and_higher+0x6af>
f0115a7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a7d:	8b 40 74             	mov    0x74(%eax),%eax
f0115a80:	83 f8 28             	cmp    $0x28,%eax
f0115a83:	74 17                	je     f0115a9c <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f0115a85:	83 ec 04             	sub    $0x4,%esp
f0115a88:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0115a8d:	68 92 00 00 00       	push   $0x92
f0115a92:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115a97:	e8 0a a7 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f0115a9c:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0115aa3:	eb 1a                	jmp    f0115abf <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115aa5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115aa8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115aab:	89 d0                	mov    %edx,%eax
f0115aad:	01 c0                	add    %eax,%eax
f0115aaf:	01 d0                	add    %edx,%eax
f0115ab1:	c1 e0 03             	shl    $0x3,%eax
f0115ab4:	01 c8                	add    %ecx,%eax
f0115ab6:	83 c0 7c             	add    $0x7c,%eax
f0115ab9:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0115abc:	ff 45 cc             	incl   -0x34(%ebp)
f0115abf:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0115ac3:	7e e0                	jle    f0115aa5 <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115ac5:	e8 00 63 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115aca:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115acd:	e8 ba e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115ad2:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115ad5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ad8:	83 ec 08             	sub    $0x8,%esp
f0115adb:	6a 05                	push   $0x5
f0115add:	50                   	push   %eax
f0115ade:	e8 dc 47 ff ff       	call   f010a2bf <set_program_priority>
f0115ae3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115ae6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ae9:	83 ec 08             	sub    $0x8,%esp
f0115aec:	6a 04                	push   $0x4
f0115aee:	50                   	push   %eax
f0115aef:	e8 cb 47 ff ff       	call   f010a2bf <set_program_priority>
f0115af4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115af7:	e8 90 e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115afc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115aff:	74 17                	je     f0115b18 <test_priority_normal_and_higher+0x742>
f0115b01:	83 ec 04             	sub    $0x4,%esp
f0115b04:	68 18 9c 13 f0       	push   $0xf0139c18
f0115b09:	68 9d 00 00 00       	push   $0x9d
f0115b0e:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115b13:	e8 8e a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115b18:	e8 ad 62 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0115b1d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115b20:	74 17                	je     f0115b39 <test_priority_normal_and_higher+0x763>
f0115b22:	83 ec 04             	sub    $0x4,%esp
f0115b25:	68 18 9c 13 f0       	push   $0xf0139c18
f0115b2a:	68 9e 00 00 00       	push   $0x9e
f0115b2f:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115b34:	e8 6d a6 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0115b39:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b3c:	8b 40 74             	mov    0x74(%eax),%eax
f0115b3f:	83 f8 14             	cmp    $0x14,%eax
f0115b42:	75 16                	jne    f0115b5a <test_priority_normal_and_higher+0x784>
f0115b44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b47:	8b 40 74             	mov    0x74(%eax),%eax
f0115b4a:	83 f8 3c             	cmp    $0x3c,%eax
f0115b4d:	75 0b                	jne    f0115b5a <test_priority_normal_and_higher+0x784>
f0115b4f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b52:	8b 40 74             	mov    0x74(%eax),%eax
f0115b55:	83 f8 28             	cmp    $0x28,%eax
f0115b58:	74 17                	je     f0115b71 <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f0115b5a:	83 ec 04             	sub    $0x4,%esp
f0115b5d:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0115b62:	68 a1 00 00 00       	push   $0xa1
f0115b67:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115b6c:	e8 35 a6 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f0115b71:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0115b78:	eb 1a                	jmp    f0115b94 <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0115b7a:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115b7d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0115b80:	89 d0                	mov    %edx,%eax
f0115b82:	01 c0                	add    %eax,%eax
f0115b84:	01 d0                	add    %edx,%eax
f0115b86:	c1 e0 03             	shl    $0x3,%eax
f0115b89:	01 c8                	add    %ecx,%eax
f0115b8b:	83 c0 7c             	add    $0x7c,%eax
f0115b8e:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0115b91:	ff 45 c8             	incl   -0x38(%ebp)
f0115b94:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0115b98:	7e e0                	jle    f0115b7a <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115b9a:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0115ba1:	eb 1a                	jmp    f0115bbd <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0115ba3:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115ba6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115ba9:	89 d0                	mov    %edx,%eax
f0115bab:	01 c0                	add    %eax,%eax
f0115bad:	01 d0                	add    %edx,%eax
f0115baf:	c1 e0 03             	shl    $0x3,%eax
f0115bb2:	01 c8                	add    %ecx,%eax
f0115bb4:	83 c0 7c             	add    $0x7c,%eax
f0115bb7:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115bba:	ff 45 c4             	incl   -0x3c(%ebp)
f0115bbd:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0115bc1:	7e e0                	jle    f0115ba3 <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115bc3:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0115bca:	eb 79                	jmp    f0115c45 <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0115bcc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115bcf:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0115bd6:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115bd9:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115bdc:	89 d0                	mov    %edx,%eax
f0115bde:	01 c0                	add    %eax,%eax
f0115be0:	01 d0                	add    %edx,%eax
f0115be2:	c1 e0 03             	shl    $0x3,%eax
f0115be5:	01 d8                	add    %ebx,%eax
f0115be7:	83 c0 78             	add    $0x78,%eax
f0115bea:	8b 00                	mov    (%eax),%eax
f0115bec:	39 c1                	cmp    %eax,%ecx
f0115bee:	74 17                	je     f0115c07 <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f0115bf0:	83 ec 04             	sub    $0x4,%esp
f0115bf3:	68 88 9d 13 f0       	push   $0xf0139d88
f0115bf8:	68 af 00 00 00       	push   $0xaf
f0115bfd:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115c02:	e8 9f a5 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0115c07:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115c0a:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0115c11:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115c14:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115c17:	89 d0                	mov    %edx,%eax
f0115c19:	01 c0                	add    %eax,%eax
f0115c1b:	01 d0                	add    %edx,%eax
f0115c1d:	c1 e0 03             	shl    $0x3,%eax
f0115c20:	01 d8                	add    %ebx,%eax
f0115c22:	83 e8 80             	sub    $0xffffff80,%eax
f0115c25:	8b 00                	mov    (%eax),%eax
f0115c27:	39 c1                	cmp    %eax,%ecx
f0115c29:	74 17                	je     f0115c42 <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f0115c2b:	83 ec 04             	sub    $0x4,%esp
f0115c2e:	68 88 9d 13 f0       	push   $0xf0139d88
f0115c33:	68 b2 00 00 00       	push   $0xb2
f0115c38:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115c3d:	e8 64 a5 fe ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115c42:	ff 45 c0             	incl   -0x40(%ebp)
f0115c45:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0115c49:	7e 81                	jle    f0115bcc <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115c4b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0115c52:	eb 79                	jmp    f0115ccd <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0115c54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115c57:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0115c5e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0115c61:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115c64:	89 d0                	mov    %edx,%eax
f0115c66:	01 c0                	add    %eax,%eax
f0115c68:	01 d0                	add    %edx,%eax
f0115c6a:	c1 e0 03             	shl    $0x3,%eax
f0115c6d:	01 d8                	add    %ebx,%eax
f0115c6f:	83 c0 78             	add    $0x78,%eax
f0115c72:	8b 00                	mov    (%eax),%eax
f0115c74:	39 c1                	cmp    %eax,%ecx
f0115c76:	74 17                	je     f0115c8f <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f0115c78:	83 ec 04             	sub    $0x4,%esp
f0115c7b:	68 88 9d 13 f0       	push   $0xf0139d88
f0115c80:	68 b8 00 00 00       	push   $0xb8
f0115c85:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115c8a:	e8 17 a5 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0115c8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115c92:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0115c99:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0115c9c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115c9f:	89 d0                	mov    %edx,%eax
f0115ca1:	01 c0                	add    %eax,%eax
f0115ca3:	01 d0                	add    %edx,%eax
f0115ca5:	c1 e0 03             	shl    $0x3,%eax
f0115ca8:	01 d8                	add    %ebx,%eax
f0115caa:	83 e8 80             	sub    $0xffffff80,%eax
f0115cad:	8b 00                	mov    (%eax),%eax
f0115caf:	39 c1                	cmp    %eax,%ecx
f0115cb1:	74 17                	je     f0115cca <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f0115cb3:	83 ec 04             	sub    $0x4,%esp
f0115cb6:	68 88 9d 13 f0       	push   $0xf0139d88
f0115cbb:	68 bb 00 00 00       	push   $0xbb
f0115cc0:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115cc5:	e8 dc a4 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115cca:	ff 45 bc             	incl   -0x44(%ebp)
f0115ccd:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0115cd1:	7e 81                	jle    f0115c54 <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0115cd3:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0115cda:	eb 79                	jmp    f0115d55 <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0115cdc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115cdf:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0115ce6:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0115ce9:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0115cec:	89 d0                	mov    %edx,%eax
f0115cee:	01 c0                	add    %eax,%eax
f0115cf0:	01 d0                	add    %edx,%eax
f0115cf2:	c1 e0 03             	shl    $0x3,%eax
f0115cf5:	01 d8                	add    %ebx,%eax
f0115cf7:	83 c0 78             	add    $0x78,%eax
f0115cfa:	8b 00                	mov    (%eax),%eax
f0115cfc:	39 c1                	cmp    %eax,%ecx
f0115cfe:	74 17                	je     f0115d17 <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f0115d00:	83 ec 04             	sub    $0x4,%esp
f0115d03:	68 88 9d 13 f0       	push   $0xf0139d88
f0115d08:	68 c1 00 00 00       	push   $0xc1
f0115d0d:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115d12:	e8 8f a4 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0115d17:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115d1a:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0115d21:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0115d24:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0115d27:	89 d0                	mov    %edx,%eax
f0115d29:	01 c0                	add    %eax,%eax
f0115d2b:	01 d0                	add    %edx,%eax
f0115d2d:	c1 e0 03             	shl    $0x3,%eax
f0115d30:	01 d8                	add    %ebx,%eax
f0115d32:	83 e8 80             	sub    $0xffffff80,%eax
f0115d35:	8b 00                	mov    (%eax),%eax
f0115d37:	39 c1                	cmp    %eax,%ecx
f0115d39:	74 17                	je     f0115d52 <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f0115d3b:	83 ec 04             	sub    $0x4,%esp
f0115d3e:	68 88 9d 13 f0       	push   $0xf0139d88
f0115d43:	68 c4 00 00 00       	push   $0xc4
f0115d48:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115d4d:	e8 54 a4 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0115d52:	ff 45 b8             	incl   -0x48(%ebp)
f0115d55:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0115d59:	7e 81                	jle    f0115cdc <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0115d5b:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0115d62:	75 6e 61 
f0115d65:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0115d6c:	6c 00 00 
f0115d6f:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0115d75:	b9 17 00 00 00       	mov    $0x17,%ecx
f0115d7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d7f:	89 d7                	mov    %edx,%edi
f0115d81:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0115d83:	83 ec 0c             	sub    $0xc,%esp
f0115d86:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0115d8c:	50                   	push   %eax
f0115d8d:	e8 fd ae fe ff       	call   f0100c8f <execute_command>
f0115d92:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0115d95:	eb 10                	jmp    f0115da7 <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0115d97:	83 ec 0c             	sub    $0xc,%esp
f0115d9a:	68 bc 9d 13 f0       	push   $0xf0139dbc
f0115d9f:	e8 89 ae fe ff       	call   f0100c2d <cprintf>
f0115da4:	83 c4 10             	add    $0x10,%esp
	}
}
f0115da7:	90                   	nop
f0115da8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115dab:	5b                   	pop    %ebx
f0115dac:	5e                   	pop    %esi
f0115dad:	5f                   	pop    %edi
f0115dae:	5d                   	pop    %ebp
f0115daf:	c3                   	ret    

f0115db0 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0115db0:	55                   	push   %ebp
f0115db1:	89 e5                	mov    %esp,%ebp
f0115db3:	57                   	push   %edi
f0115db4:	56                   	push   %esi
f0115db5:	53                   	push   %ebx
f0115db6:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0115dbc:	a0 ce fc 18 f0       	mov    0xf018fcce,%al
f0115dc1:	84 c0                	test   %al,%al
f0115dc3:	0f 84 ac 09 00 00    	je     f0116775 <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0115dc9:	c6 05 ce fc 18 f0 00 	movb   $0x0,0xf018fcce
		char command[100] = "load fos_add 20";
f0115dd0:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0115dd6:	bb f8 9d 13 f0       	mov    $0xf0139df8,%ebx
f0115ddb:	ba 04 00 00 00       	mov    $0x4,%edx
f0115de0:	89 c7                	mov    %eax,%edi
f0115de2:	89 de                	mov    %ebx,%esi
f0115de4:	89 d1                	mov    %edx,%ecx
f0115de6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115de8:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0115dee:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115df3:	b8 00 00 00 00       	mov    $0x0,%eax
f0115df8:	89 d7                	mov    %edx,%edi
f0115dfa:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115dfc:	83 ec 0c             	sub    $0xc,%esp
f0115dff:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0115e05:	50                   	push   %eax
f0115e06:	e8 84 ae fe ff       	call   f0100c8f <execute_command>
f0115e0b:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0115e0e:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0115e14:	bb b4 a0 13 f0       	mov    $0xf013a0b4,%ebx
f0115e19:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115e1e:	89 c7                	mov    %eax,%edi
f0115e20:	89 de                	mov    %ebx,%esi
f0115e22:	89 d1                	mov    %edx,%ecx
f0115e24:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115e26:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0115e2c:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115e31:	b0 00                	mov    $0x0,%al
f0115e33:	89 d7                	mov    %edx,%edi
f0115e35:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115e37:	83 ec 0c             	sub    $0xc,%esp
f0115e3a:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0115e40:	50                   	push   %eax
f0115e41:	e8 49 ae fe ff       	call   f0100c8f <execute_command>
f0115e46:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0115e49:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0115e4f:	bb 18 a1 13 f0       	mov    $0xf013a118,%ebx
f0115e54:	ba 17 00 00 00       	mov    $0x17,%edx
f0115e59:	89 c7                	mov    %eax,%edi
f0115e5b:	89 de                	mov    %ebx,%esi
f0115e5d:	89 d1                	mov    %edx,%ecx
f0115e5f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115e61:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0115e67:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115e6c:	b0 00                	mov    $0x0,%al
f0115e6e:	89 d7                	mov    %edx,%edi
f0115e70:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115e72:	83 ec 0c             	sub    $0xc,%esp
f0115e75:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0115e7b:	50                   	push   %eax
f0115e7c:	e8 0e ae fe ff       	call   f0100c8f <execute_command>
f0115e81:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115e84:	83 ec 04             	sub    $0x4,%esp
f0115e87:	6a 00                	push   $0x0
f0115e89:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0115e8c:	50                   	push   %eax
f0115e8d:	68 00 10 00 00       	push   $0x1000
f0115e92:	e8 41 2f ff ff       	call   f0108dd8 <envid2env>
f0115e97:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115e9a:	83 ec 04             	sub    $0x4,%esp
f0115e9d:	6a 00                	push   $0x0
f0115e9f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0115ea2:	50                   	push   %eax
f0115ea3:	68 01 10 00 00       	push   $0x1001
f0115ea8:	e8 2b 2f ff ff       	call   f0108dd8 <envid2env>
f0115ead:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115eb0:	83 ec 04             	sub    $0x4,%esp
f0115eb3:	6a 00                	push   $0x0
f0115eb5:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0115eb8:	50                   	push   %eax
f0115eb9:	68 02 10 00 00       	push   $0x1002
f0115ebe:	e8 15 2f ff ff       	call   f0108dd8 <envid2env>
f0115ec3:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115ec6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ec9:	85 c0                	test   %eax,%eax
f0115ecb:	74 0e                	je     f0115edb <test_priority_normal_and_lower+0x12b>
f0115ecd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115ed0:	85 c0                	test   %eax,%eax
f0115ed2:	74 07                	je     f0115edb <test_priority_normal_and_lower+0x12b>
f0115ed4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115ed7:	85 c0                	test   %eax,%eax
f0115ed9:	75 17                	jne    f0115ef2 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0115edb:	83 ec 04             	sub    $0x4,%esp
f0115ede:	68 98 9b 13 f0       	push   $0xf0139b98
f0115ee3:	68 eb 00 00 00       	push   $0xeb
f0115ee8:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115eed:	e8 b4 a2 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115ef2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ef5:	8b 40 74             	mov    0x74(%eax),%eax
f0115ef8:	83 f8 14             	cmp    $0x14,%eax
f0115efb:	75 16                	jne    f0115f13 <test_priority_normal_and_lower+0x163>
f0115efd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115f00:	8b 40 74             	mov    0x74(%eax),%eax
f0115f03:	83 f8 1e             	cmp    $0x1e,%eax
f0115f06:	75 0b                	jne    f0115f13 <test_priority_normal_and_lower+0x163>
f0115f08:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115f0b:	8b 40 74             	mov    0x74(%eax),%eax
f0115f0e:	83 f8 28             	cmp    $0x28,%eax
f0115f11:	74 17                	je     f0115f2a <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0115f13:	83 ec 04             	sub    $0x4,%esp
f0115f16:	68 cc 9b 13 f0       	push   $0xf0139bcc
f0115f1b:	68 ee 00 00 00       	push   $0xee
f0115f20:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0115f25:	e8 7c a2 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f0115f2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115f31:	eb 43                	jmp    f0115f76 <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f33:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0115f36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115f39:	89 d0                	mov    %edx,%eax
f0115f3b:	01 c0                	add    %eax,%eax
f0115f3d:	01 d0                	add    %edx,%eax
f0115f3f:	c1 e0 03             	shl    $0x3,%eax
f0115f42:	01 c8                	add    %ecx,%eax
f0115f44:	83 c0 78             	add    $0x78,%eax
f0115f47:	8b 10                	mov    (%eax),%edx
f0115f49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115f4c:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f53:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0115f56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115f59:	89 d0                	mov    %edx,%eax
f0115f5b:	01 c0                	add    %eax,%eax
f0115f5d:	01 d0                	add    %edx,%eax
f0115f5f:	c1 e0 03             	shl    $0x3,%eax
f0115f62:	01 c8                	add    %ecx,%eax
f0115f64:	83 e8 80             	sub    $0xffffff80,%eax
f0115f67:	8b 10                	mov    (%eax),%edx
f0115f69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115f6c:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115f73:	ff 45 e4             	incl   -0x1c(%ebp)
f0115f76:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115f7a:	7e b7                	jle    f0115f33 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0115f7c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115f83:	eb 43                	jmp    f0115fc8 <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f85:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0115f88:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115f8b:	89 d0                	mov    %edx,%eax
f0115f8d:	01 c0                	add    %eax,%eax
f0115f8f:	01 d0                	add    %edx,%eax
f0115f91:	c1 e0 03             	shl    $0x3,%eax
f0115f94:	01 c8                	add    %ecx,%eax
f0115f96:	83 c0 78             	add    $0x78,%eax
f0115f99:	8b 10                	mov    (%eax),%edx
f0115f9b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115f9e:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115fa5:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0115fa8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115fab:	89 d0                	mov    %edx,%eax
f0115fad:	01 c0                	add    %eax,%eax
f0115faf:	01 d0                	add    %edx,%eax
f0115fb1:	c1 e0 03             	shl    $0x3,%eax
f0115fb4:	01 c8                	add    %ecx,%eax
f0115fb6:	83 e8 80             	sub    $0xffffff80,%eax
f0115fb9:	8b 10                	mov    (%eax),%edx
f0115fbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115fbe:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0115fc5:	ff 45 e0             	incl   -0x20(%ebp)
f0115fc8:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0115fcc:	7e b7                	jle    f0115f85 <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0115fce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115fd5:	eb 43                	jmp    f011601a <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115fd7:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0115fda:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115fdd:	89 d0                	mov    %edx,%eax
f0115fdf:	01 c0                	add    %eax,%eax
f0115fe1:	01 d0                	add    %edx,%eax
f0115fe3:	c1 e0 03             	shl    $0x3,%eax
f0115fe6:	01 c8                	add    %ecx,%eax
f0115fe8:	83 c0 78             	add    $0x78,%eax
f0115feb:	8b 10                	mov    (%eax),%edx
f0115fed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115ff0:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115ff7:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0115ffa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115ffd:	89 d0                	mov    %edx,%eax
f0115fff:	01 c0                	add    %eax,%eax
f0116001:	01 d0                	add    %edx,%eax
f0116003:	c1 e0 03             	shl    $0x3,%eax
f0116006:	01 c8                	add    %ecx,%eax
f0116008:	83 e8 80             	sub    $0xffffff80,%eax
f011600b:	8b 10                	mov    (%eax),%edx
f011600d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116010:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116017:	ff 45 dc             	incl   -0x24(%ebp)
f011601a:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011601e:	7e b7                	jle    f0115fd7 <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116020:	e8 a5 5d ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116025:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116028:	e8 5f dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011602d:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116030:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116033:	83 ec 08             	sub    $0x8,%esp
f0116036:	6a 03                	push   $0x3
f0116038:	50                   	push   %eax
f0116039:	e8 81 42 ff ff       	call   f010a2bf <set_program_priority>
f011603e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116041:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116044:	83 ec 08             	sub    $0x8,%esp
f0116047:	6a 03                	push   $0x3
f0116049:	50                   	push   %eax
f011604a:	e8 70 42 ff ff       	call   f010a2bf <set_program_priority>
f011604f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116052:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116055:	83 ec 08             	sub    $0x8,%esp
f0116058:	6a 03                	push   $0x3
f011605a:	50                   	push   %eax
f011605b:	e8 5f 42 ff ff       	call   f010a2bf <set_program_priority>
f0116060:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116063:	e8 24 dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116068:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011606b:	74 17                	je     f0116084 <test_priority_normal_and_lower+0x2d4>
f011606d:	83 ec 04             	sub    $0x4,%esp
f0116070:	68 18 9c 13 f0       	push   $0xf0139c18
f0116075:	68 0a 01 00 00       	push   $0x10a
f011607a:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011607f:	e8 22 a1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116084:	e8 41 5d ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116089:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011608c:	74 17                	je     f01160a5 <test_priority_normal_and_lower+0x2f5>
f011608e:	83 ec 04             	sub    $0x4,%esp
f0116091:	68 18 9c 13 f0       	push   $0xf0139c18
f0116096:	68 0b 01 00 00       	push   $0x10b
f011609b:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01160a0:	e8 01 a1 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01160a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01160a8:	8b 40 74             	mov    0x74(%eax),%eax
f01160ab:	83 f8 14             	cmp    $0x14,%eax
f01160ae:	75 16                	jne    f01160c6 <test_priority_normal_and_lower+0x316>
f01160b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01160b3:	8b 40 74             	mov    0x74(%eax),%eax
f01160b6:	83 f8 1e             	cmp    $0x1e,%eax
f01160b9:	75 0b                	jne    f01160c6 <test_priority_normal_and_lower+0x316>
f01160bb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01160be:	8b 40 74             	mov    0x74(%eax),%eax
f01160c1:	83 f8 28             	cmp    $0x28,%eax
f01160c4:	74 17                	je     f01160dd <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01160c6:	83 ec 04             	sub    $0x4,%esp
f01160c9:	68 44 9c 13 f0       	push   $0xf0139c44
f01160ce:	68 0e 01 00 00       	push   $0x10e
f01160d3:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01160d8:	e8 c9 a0 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01160dd:	e8 e8 5c ff ff       	call   f010bdca <sys_calculate_free_frames>
f01160e2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160e5:	e8 a2 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01160ea:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01160ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01160f0:	83 ec 08             	sub    $0x8,%esp
f01160f3:	6a 02                	push   $0x2
f01160f5:	50                   	push   %eax
f01160f6:	e8 c4 41 ff ff       	call   f010a2bf <set_program_priority>
f01160fb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01160fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116101:	83 ec 08             	sub    $0x8,%esp
f0116104:	6a 02                	push   $0x2
f0116106:	50                   	push   %eax
f0116107:	e8 b3 41 ff ff       	call   f010a2bf <set_program_priority>
f011610c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011610f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116112:	83 ec 08             	sub    $0x8,%esp
f0116115:	6a 02                	push   $0x2
f0116117:	50                   	push   %eax
f0116118:	e8 a2 41 ff ff       	call   f010a2bf <set_program_priority>
f011611d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116120:	e8 67 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116125:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116128:	74 17                	je     f0116141 <test_priority_normal_and_lower+0x391>
f011612a:	83 ec 04             	sub    $0x4,%esp
f011612d:	68 18 9c 13 f0       	push   $0xf0139c18
f0116132:	68 18 01 00 00       	push   $0x118
f0116137:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011613c:	e8 65 a0 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116141:	e8 84 5c ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116146:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116149:	74 21                	je     f011616c <test_priority_normal_and_lower+0x3bc>
f011614b:	e8 7a 5c ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116150:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116153:	29 c2                	sub    %eax,%edx
f0116155:	89 d0                	mov    %edx,%eax
f0116157:	50                   	push   %eax
f0116158:	68 98 9c 13 f0       	push   $0xf0139c98
f011615d:	68 19 01 00 00       	push   $0x119
f0116162:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116167:	e8 3a a0 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011616c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011616f:	8b 40 74             	mov    0x74(%eax),%eax
f0116172:	83 f8 0a             	cmp    $0xa,%eax
f0116175:	75 16                	jne    f011618d <test_priority_normal_and_lower+0x3dd>
f0116177:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011617a:	8b 40 74             	mov    0x74(%eax),%eax
f011617d:	83 f8 0f             	cmp    $0xf,%eax
f0116180:	75 0b                	jne    f011618d <test_priority_normal_and_lower+0x3dd>
f0116182:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116185:	8b 40 74             	mov    0x74(%eax),%eax
f0116188:	83 f8 14             	cmp    $0x14,%eax
f011618b:	74 17                	je     f01161a4 <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f011618d:	83 ec 04             	sub    $0x4,%esp
f0116190:	68 c8 9c 13 f0       	push   $0xf0139cc8
f0116195:	68 1c 01 00 00       	push   $0x11c
f011619a:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011619f:	e8 02 a0 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01161a4:	e8 21 5c ff ff       	call   f010bdca <sys_calculate_free_frames>
f01161a9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01161ac:	e8 db da fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01161b1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01161b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01161b7:	83 ec 08             	sub    $0x8,%esp
f01161ba:	6a 02                	push   $0x2
f01161bc:	50                   	push   %eax
f01161bd:	e8 fd 40 ff ff       	call   f010a2bf <set_program_priority>
f01161c2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01161c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01161c8:	83 ec 08             	sub    $0x8,%esp
f01161cb:	6a 02                	push   $0x2
f01161cd:	50                   	push   %eax
f01161ce:	e8 ec 40 ff ff       	call   f010a2bf <set_program_priority>
f01161d3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01161d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01161d9:	83 ec 08             	sub    $0x8,%esp
f01161dc:	6a 02                	push   $0x2
f01161de:	50                   	push   %eax
f01161df:	e8 db 40 ff ff       	call   f010a2bf <set_program_priority>
f01161e4:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01161e7:	e8 a0 da fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01161ec:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01161ef:	74 17                	je     f0116208 <test_priority_normal_and_lower+0x458>
f01161f1:	83 ec 04             	sub    $0x4,%esp
f01161f4:	68 18 9c 13 f0       	push   $0xf0139c18
f01161f9:	68 26 01 00 00       	push   $0x126
f01161fe:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116203:	e8 9e 9f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116208:	e8 bd 5b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011620d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116210:	74 21                	je     f0116233 <test_priority_normal_and_lower+0x483>
f0116212:	e8 b3 5b ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116217:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011621a:	29 c2                	sub    %eax,%edx
f011621c:	89 d0                	mov    %edx,%eax
f011621e:	50                   	push   %eax
f011621f:	68 98 9c 13 f0       	push   $0xf0139c98
f0116224:	68 27 01 00 00       	push   $0x127
f0116229:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011622e:	e8 73 9f fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116233:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116236:	8b 40 74             	mov    0x74(%eax),%eax
f0116239:	83 f8 0a             	cmp    $0xa,%eax
f011623c:	75 16                	jne    f0116254 <test_priority_normal_and_lower+0x4a4>
f011623e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116241:	8b 40 74             	mov    0x74(%eax),%eax
f0116244:	83 f8 0f             	cmp    $0xf,%eax
f0116247:	75 0b                	jne    f0116254 <test_priority_normal_and_lower+0x4a4>
f0116249:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011624c:	8b 40 74             	mov    0x74(%eax),%eax
f011624f:	83 f8 0a             	cmp    $0xa,%eax
f0116252:	74 17                	je     f011626b <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116254:	83 ec 04             	sub    $0x4,%esp
f0116257:	68 c8 9c 13 f0       	push   $0xf0139cc8
f011625c:	68 2a 01 00 00       	push   $0x12a
f0116261:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116266:	e8 3b 9f fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f011626b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116272:	eb 79                	jmp    f01162ed <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116274:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116277:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011627e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116281:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116284:	89 d0                	mov    %edx,%eax
f0116286:	01 c0                	add    %eax,%eax
f0116288:	01 d0                	add    %edx,%eax
f011628a:	c1 e0 03             	shl    $0x3,%eax
f011628d:	01 d8                	add    %ebx,%eax
f011628f:	83 c0 78             	add    $0x78,%eax
f0116292:	8b 00                	mov    (%eax),%eax
f0116294:	39 c1                	cmp    %eax,%ecx
f0116296:	74 17                	je     f01162af <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f0116298:	83 ec 04             	sub    $0x4,%esp
f011629b:	68 88 9d 13 f0       	push   $0xf0139d88
f01162a0:	68 2f 01 00 00       	push   $0x12f
f01162a5:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01162aa:	e8 f7 9e fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01162af:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01162b2:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01162b9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01162bc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01162bf:	89 d0                	mov    %edx,%eax
f01162c1:	01 c0                	add    %eax,%eax
f01162c3:	01 d0                	add    %edx,%eax
f01162c5:	c1 e0 03             	shl    $0x3,%eax
f01162c8:	01 d8                	add    %ebx,%eax
f01162ca:	83 e8 80             	sub    $0xffffff80,%eax
f01162cd:	8b 00                	mov    (%eax),%eax
f01162cf:	39 c1                	cmp    %eax,%ecx
f01162d1:	74 17                	je     f01162ea <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f01162d3:	83 ec 04             	sub    $0x4,%esp
f01162d6:	68 88 9d 13 f0       	push   $0xf0139d88
f01162db:	68 32 01 00 00       	push   $0x132
f01162e0:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01162e5:	e8 bc 9e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01162ea:	ff 45 d8             	incl   -0x28(%ebp)
f01162ed:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01162f1:	7e 81                	jle    f0116274 <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01162f3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01162fa:	eb 79                	jmp    f0116375 <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01162fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01162ff:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116306:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116309:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011630c:	89 d0                	mov    %edx,%eax
f011630e:	01 c0                	add    %eax,%eax
f0116310:	01 d0                	add    %edx,%eax
f0116312:	c1 e0 03             	shl    $0x3,%eax
f0116315:	01 d8                	add    %ebx,%eax
f0116317:	83 c0 78             	add    $0x78,%eax
f011631a:	8b 00                	mov    (%eax),%eax
f011631c:	39 c1                	cmp    %eax,%ecx
f011631e:	74 17                	je     f0116337 <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f0116320:	83 ec 04             	sub    $0x4,%esp
f0116323:	68 88 9d 13 f0       	push   $0xf0139d88
f0116328:	68 38 01 00 00       	push   $0x138
f011632d:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116332:	e8 6f 9e fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116337:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011633a:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116341:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116344:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116347:	89 d0                	mov    %edx,%eax
f0116349:	01 c0                	add    %eax,%eax
f011634b:	01 d0                	add    %edx,%eax
f011634d:	c1 e0 03             	shl    $0x3,%eax
f0116350:	01 d8                	add    %ebx,%eax
f0116352:	83 e8 80             	sub    $0xffffff80,%eax
f0116355:	8b 00                	mov    (%eax),%eax
f0116357:	39 c1                	cmp    %eax,%ecx
f0116359:	74 17                	je     f0116372 <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f011635b:	83 ec 04             	sub    $0x4,%esp
f011635e:	68 88 9d 13 f0       	push   $0xf0139d88
f0116363:	68 3b 01 00 00       	push   $0x13b
f0116368:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011636d:	e8 34 9e fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116372:	ff 45 d4             	incl   -0x2c(%ebp)
f0116375:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116379:	7e 81                	jle    f01162fc <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011637b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116382:	eb 79                	jmp    f01163fd <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116384:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116387:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011638e:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116391:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116394:	89 d0                	mov    %edx,%eax
f0116396:	01 c0                	add    %eax,%eax
f0116398:	01 d0                	add    %edx,%eax
f011639a:	c1 e0 03             	shl    $0x3,%eax
f011639d:	01 d8                	add    %ebx,%eax
f011639f:	83 c0 78             	add    $0x78,%eax
f01163a2:	8b 00                	mov    (%eax),%eax
f01163a4:	39 c1                	cmp    %eax,%ecx
f01163a6:	74 17                	je     f01163bf <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f01163a8:	83 ec 04             	sub    $0x4,%esp
f01163ab:	68 88 9d 13 f0       	push   $0xf0139d88
f01163b0:	68 41 01 00 00       	push   $0x141
f01163b5:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01163ba:	e8 e7 9d fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01163bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01163c2:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01163c9:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01163cc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01163cf:	89 d0                	mov    %edx,%eax
f01163d1:	01 c0                	add    %eax,%eax
f01163d3:	01 d0                	add    %edx,%eax
f01163d5:	c1 e0 03             	shl    $0x3,%eax
f01163d8:	01 d8                	add    %ebx,%eax
f01163da:	83 e8 80             	sub    $0xffffff80,%eax
f01163dd:	8b 00                	mov    (%eax),%eax
f01163df:	39 c1                	cmp    %eax,%ecx
f01163e1:	74 17                	je     f01163fa <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f01163e3:	83 ec 04             	sub    $0x4,%esp
f01163e6:	68 88 9d 13 f0       	push   $0xf0139d88
f01163eb:	68 44 01 00 00       	push   $0x144
f01163f0:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01163f5:	e8 ac 9d fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01163fa:	ff 45 d0             	incl   -0x30(%ebp)
f01163fd:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116401:	7e 81                	jle    f0116384 <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116403:	e8 c2 59 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116408:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011640b:	e8 7c d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116410:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116413:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116416:	83 ec 08             	sub    $0x8,%esp
f0116419:	6a 01                	push   $0x1
f011641b:	50                   	push   %eax
f011641c:	e8 9e 3e ff ff       	call   f010a2bf <set_program_priority>
f0116421:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116424:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116427:	83 ec 08             	sub    $0x8,%esp
f011642a:	6a 01                	push   $0x1
f011642c:	50                   	push   %eax
f011642d:	e8 8d 3e ff ff       	call   f010a2bf <set_program_priority>
f0116432:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116435:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116438:	83 ec 08             	sub    $0x8,%esp
f011643b:	6a 01                	push   $0x1
f011643d:	50                   	push   %eax
f011643e:	e8 7c 3e ff ff       	call   f010a2bf <set_program_priority>
f0116443:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116446:	e8 41 d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011644b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011644e:	74 17                	je     f0116467 <test_priority_normal_and_lower+0x6b7>
f0116450:	83 ec 04             	sub    $0x4,%esp
f0116453:	68 18 9c 13 f0       	push   $0xf0139c18
f0116458:	68 4d 01 00 00       	push   $0x14d
f011645d:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116462:	e8 3f 9d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116467:	e8 5e 59 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011646c:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011646f:	83 f8 0d             	cmp    $0xd,%eax
f0116472:	74 17                	je     f011648b <test_priority_normal_and_lower+0x6db>
f0116474:	83 ec 04             	sub    $0x4,%esp
f0116477:	68 24 9f 13 f0       	push   $0xf0139f24
f011647c:	68 4e 01 00 00       	push   $0x14e
f0116481:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116486:	e8 1b 9d fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011648b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011648e:	8b 40 74             	mov    0x74(%eax),%eax
f0116491:	83 f8 05             	cmp    $0x5,%eax
f0116494:	75 16                	jne    f01164ac <test_priority_normal_and_lower+0x6fc>
f0116496:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116499:	8b 40 74             	mov    0x74(%eax),%eax
f011649c:	83 f8 07             	cmp    $0x7,%eax
f011649f:	75 0b                	jne    f01164ac <test_priority_normal_and_lower+0x6fc>
f01164a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01164a4:	8b 40 74             	mov    0x74(%eax),%eax
f01164a7:	83 f8 05             	cmp    $0x5,%eax
f01164aa:	74 17                	je     f01164c3 <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f01164ac:	83 ec 04             	sub    $0x4,%esp
f01164af:	68 6c 9f 13 f0       	push   $0xf0139f6c
f01164b4:	68 51 01 00 00       	push   $0x151
f01164b9:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01164be:	e8 e3 9c fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f01164c3:	e8 02 59 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01164c8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01164cb:	e8 bc d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01164d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01164d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164d6:	83 ec 08             	sub    $0x8,%esp
f01164d9:	6a 01                	push   $0x1
f01164db:	50                   	push   %eax
f01164dc:	e8 de 3d ff ff       	call   f010a2bf <set_program_priority>
f01164e1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164e4:	e8 a3 d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01164e9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01164ec:	74 17                	je     f0116505 <test_priority_normal_and_lower+0x755>
f01164ee:	83 ec 04             	sub    $0x4,%esp
f01164f1:	68 18 9c 13 f0       	push   $0xf0139c18
f01164f6:	68 57 01 00 00       	push   $0x157
f01164fb:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116500:	e8 a1 9c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116505:	e8 c0 58 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011650a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011650d:	83 f8 03             	cmp    $0x3,%eax
f0116510:	74 17                	je     f0116529 <test_priority_normal_and_lower+0x779>
f0116512:	83 ec 04             	sub    $0x4,%esp
f0116515:	68 18 9c 13 f0       	push   $0xf0139c18
f011651a:	68 58 01 00 00       	push   $0x158
f011651f:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116524:	e8 7d 9c fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116529:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011652c:	8b 40 74             	mov    0x74(%eax),%eax
f011652f:	83 f8 02             	cmp    $0x2,%eax
f0116532:	75 16                	jne    f011654a <test_priority_normal_and_lower+0x79a>
f0116534:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116537:	8b 40 74             	mov    0x74(%eax),%eax
f011653a:	83 f8 07             	cmp    $0x7,%eax
f011653d:	75 0b                	jne    f011654a <test_priority_normal_and_lower+0x79a>
f011653f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116542:	8b 40 74             	mov    0x74(%eax),%eax
f0116545:	83 f8 05             	cmp    $0x5,%eax
f0116548:	74 17                	je     f0116561 <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f011654a:	83 ec 04             	sub    $0x4,%esp
f011654d:	68 4c 9d 13 f0       	push   $0xf0139d4c
f0116552:	68 5b 01 00 00       	push   $0x15b
f0116557:	68 b1 9b 13 f0       	push   $0xf0139bb1
f011655c:	e8 45 9c fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f0116561:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116568:	eb 7f                	jmp    f01165e9 <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011656a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011656d:	83 c0 08             	add    $0x8,%eax
f0116570:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116577:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011657a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011657d:	89 d0                	mov    %edx,%eax
f011657f:	01 c0                	add    %eax,%eax
f0116581:	01 d0                	add    %edx,%eax
f0116583:	c1 e0 03             	shl    $0x3,%eax
f0116586:	01 d8                	add    %ebx,%eax
f0116588:	83 c0 78             	add    $0x78,%eax
f011658b:	8b 00                	mov    (%eax),%eax
f011658d:	39 c1                	cmp    %eax,%ecx
f011658f:	74 17                	je     f01165a8 <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116591:	83 ec 04             	sub    $0x4,%esp
f0116594:	68 9c 9f 13 f0       	push   $0xf0139f9c
f0116599:	68 60 01 00 00       	push   $0x160
f011659e:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01165a3:	e8 fe 9b fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01165a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01165ab:	83 c0 08             	add    $0x8,%eax
f01165ae:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01165b5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01165b8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01165bb:	89 d0                	mov    %edx,%eax
f01165bd:	01 c0                	add    %eax,%eax
f01165bf:	01 d0                	add    %edx,%eax
f01165c1:	c1 e0 03             	shl    $0x3,%eax
f01165c4:	01 d8                	add    %ebx,%eax
f01165c6:	83 e8 80             	sub    $0xffffff80,%eax
f01165c9:	8b 00                	mov    (%eax),%eax
f01165cb:	39 c1                	cmp    %eax,%ecx
f01165cd:	74 17                	je     f01165e6 <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01165cf:	83 ec 04             	sub    $0x4,%esp
f01165d2:	68 9c 9f 13 f0       	push   $0xf0139f9c
f01165d7:	68 63 01 00 00       	push   $0x163
f01165dc:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01165e1:	e8 c0 9b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01165e6:	ff 45 cc             	incl   -0x34(%ebp)
f01165e9:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01165ed:	0f 8e 77 ff ff ff    	jle    f011656a <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01165f3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01165fa:	eb 7f                	jmp    f011667b <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01165fc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01165ff:	83 c0 03             	add    $0x3,%eax
f0116602:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116609:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f011660c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011660f:	89 d0                	mov    %edx,%eax
f0116611:	01 c0                	add    %eax,%eax
f0116613:	01 d0                	add    %edx,%eax
f0116615:	c1 e0 03             	shl    $0x3,%eax
f0116618:	01 d8                	add    %ebx,%eax
f011661a:	83 c0 78             	add    $0x78,%eax
f011661d:	8b 00                	mov    (%eax),%eax
f011661f:	39 c1                	cmp    %eax,%ecx
f0116621:	74 17                	je     f011663a <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116623:	ff 75 c8             	pushl  -0x38(%ebp)
f0116626:	68 08 a0 13 f0       	push   $0xf013a008
f011662b:	68 69 01 00 00       	push   $0x169
f0116630:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116635:	e8 6c 9b fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011663a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011663d:	83 c0 03             	add    $0x3,%eax
f0116640:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116647:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f011664a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011664d:	89 d0                	mov    %edx,%eax
f011664f:	01 c0                	add    %eax,%eax
f0116651:	01 d0                	add    %edx,%eax
f0116653:	c1 e0 03             	shl    $0x3,%eax
f0116656:	01 d8                	add    %ebx,%eax
f0116658:	83 e8 80             	sub    $0xffffff80,%eax
f011665b:	8b 00                	mov    (%eax),%eax
f011665d:	39 c1                	cmp    %eax,%ecx
f011665f:	74 17                	je     f0116678 <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116661:	83 ec 04             	sub    $0x4,%esp
f0116664:	68 9c 9f 13 f0       	push   $0xf0139f9c
f0116669:	68 6c 01 00 00       	push   $0x16c
f011666e:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116673:	e8 2e 9b fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116678:	ff 45 c8             	incl   -0x38(%ebp)
f011667b:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011667f:	0f 8e 77 ff ff ff    	jle    f01165fc <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116685:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011668c:	eb 7f                	jmp    f011670d <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011668e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116691:	83 c0 05             	add    $0x5,%eax
f0116694:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011669b:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011669e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01166a1:	89 d0                	mov    %edx,%eax
f01166a3:	01 c0                	add    %eax,%eax
f01166a5:	01 d0                	add    %edx,%eax
f01166a7:	c1 e0 03             	shl    $0x3,%eax
f01166aa:	01 d8                	add    %ebx,%eax
f01166ac:	83 c0 78             	add    $0x78,%eax
f01166af:	8b 00                	mov    (%eax),%eax
f01166b1:	39 c1                	cmp    %eax,%ecx
f01166b3:	74 17                	je     f01166cc <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01166b5:	83 ec 04             	sub    $0x4,%esp
f01166b8:	68 9c 9f 13 f0       	push   $0xf0139f9c
f01166bd:	68 72 01 00 00       	push   $0x172
f01166c2:	68 b1 9b 13 f0       	push   $0xf0139bb1
f01166c7:	e8 da 9a fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01166cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01166cf:	83 c0 05             	add    $0x5,%eax
f01166d2:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01166d9:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01166dc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01166df:	89 d0                	mov    %edx,%eax
f01166e1:	01 c0                	add    %eax,%eax
f01166e3:	01 d0                	add    %edx,%eax
f01166e5:	c1 e0 03             	shl    $0x3,%eax
f01166e8:	01 d8                	add    %ebx,%eax
f01166ea:	83 e8 80             	sub    $0xffffff80,%eax
f01166ed:	8b 00                	mov    (%eax),%eax
f01166ef:	39 c1                	cmp    %eax,%ecx
f01166f1:	74 17                	je     f011670a <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01166f3:	83 ec 04             	sub    $0x4,%esp
f01166f6:	68 9c 9f 13 f0       	push   $0xf0139f9c
f01166fb:	68 75 01 00 00       	push   $0x175
f0116700:	68 b1 9b 13 f0       	push   $0xf0139bb1
f0116705:	e8 9c 9a fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011670a:	ff 45 c4             	incl   -0x3c(%ebp)
f011670d:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116711:	0f 8e 77 ff ff ff    	jle    f011668e <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116717:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011671a:	83 ec 08             	sub    $0x8,%esp
f011671d:	6a 05                	push   $0x5
f011671f:	50                   	push   %eax
f0116720:	e8 9a 3b ff ff       	call   f010a2bf <set_program_priority>
f0116725:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116728:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011672b:	83 ec 08             	sub    $0x8,%esp
f011672e:	6a 05                	push   $0x5
f0116730:	50                   	push   %eax
f0116731:	e8 89 3b ff ff       	call   f010a2bf <set_program_priority>
f0116736:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116739:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116740:	75 6e 61 
f0116743:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011674a:	6c 00 00 
f011674d:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116753:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116758:	b8 00 00 00 00       	mov    $0x0,%eax
f011675d:	89 d7                	mov    %edx,%edi
f011675f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116761:	83 ec 0c             	sub    $0xc,%esp
f0116764:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011676a:	50                   	push   %eax
f011676b:	e8 1f a5 fe ff       	call   f0100c8f <execute_command>
f0116770:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116773:	eb 10                	jmp    f0116785 <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116775:	83 ec 0c             	sub    $0xc,%esp
f0116778:	68 78 a0 13 f0       	push   $0xf013a078
f011677d:	e8 ab a4 fe ff       	call   f0100c2d <cprintf>
f0116782:	83 c4 10             	add    $0x10,%esp
	}
}
f0116785:	90                   	nop
f0116786:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116789:	5b                   	pop    %ebx
f011678a:	5e                   	pop    %esi
f011678b:	5f                   	pop    %edi
f011678c:	5d                   	pop    %ebp
f011678d:	c3                   	ret    

f011678e <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f011678e:	55                   	push   %ebp
f011678f:	89 e5                	mov    %esp,%ebp
f0116791:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0116796:	83 f8 03             	cmp    $0x3,%eax
f0116799:	75 04                	jne    f011679f <isKHeapPlacementStrategyNEXTFIT+0x11>
f011679b:	b0 01                	mov    $0x1,%al
f011679d:	eb 02                	jmp    f01167a1 <isKHeapPlacementStrategyNEXTFIT+0x13>
f011679f:	b0 00                	mov    $0x0,%al
f01167a1:	5d                   	pop    %ebp
f01167a2:	c3                   	ret    

f01167a3 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01167a3:	55                   	push   %ebp
f01167a4:	89 e5                	mov    %esp,%ebp
f01167a6:	57                   	push   %edi
f01167a7:	53                   	push   %ebx
f01167a8:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f01167ae:	83 ec 0c             	sub    $0xc,%esp
f01167b1:	68 7c a1 13 f0       	push   $0xf013a17c
f01167b6:	e8 72 a4 fe ff       	call   f0100c2d <cprintf>
f01167bb:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01167be:	83 ec 0c             	sub    $0xc,%esp
f01167c1:	68 ac a1 13 f0       	push   $0xf013a1ac
f01167c6:	e8 62 a4 fe ff       	call   f0100c2d <cprintf>
f01167cb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01167ce:	83 ec 0c             	sub    $0xc,%esp
f01167d1:	68 7c a1 13 f0       	push   $0xf013a17c
f01167d6:	e8 52 a4 fe ff       	call   f0100c2d <cprintf>
f01167db:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01167de:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01167e2:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01167e6:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01167ec:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01167f2:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01167f9:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116800:	e8 c5 55 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116805:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0116808:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f011680e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116813:	b8 00 00 00 00       	mov    $0x0,%eax
f0116818:	89 d7                	mov    %edx,%edi
f011681a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f011681c:	e8 a9 55 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116821:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116824:	e8 63 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116829:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f011682c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116833:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116836:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011683b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011683e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116841:	ba 00 00 00 00       	mov    $0x0,%edx
f0116846:	f7 75 d4             	divl   -0x2c(%ebp)
f0116849:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011684c:	29 d0                	sub    %edx,%eax
f011684e:	89 c1                	mov    %eax,%ecx
f0116850:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0116857:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011685c:	0f b6 d0             	movzbl %al,%edx
f011685f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116862:	01 d0                	add    %edx,%eax
f0116864:	48                   	dec    %eax
f0116865:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116868:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011686b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116870:	f7 75 cc             	divl   -0x34(%ebp)
f0116873:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116876:	29 d0                	sub    %edx,%eax
f0116878:	01 c1                	add    %eax,%ecx
f011687a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0116881:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116886:	0f b6 c0             	movzbl %al,%eax
f0116889:	c1 e0 04             	shl    $0x4,%eax
f011688c:	89 c2                	mov    %eax,%edx
f011688e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116891:	01 d0                	add    %edx,%eax
f0116893:	48                   	dec    %eax
f0116894:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116897:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011689a:	ba 00 00 00 00       	mov    $0x0,%edx
f011689f:	f7 75 c4             	divl   -0x3c(%ebp)
f01168a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168a5:	29 d0                	sub    %edx,%eax
f01168a7:	01 c8                	add    %ecx,%eax
f01168a9:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01168ae:	29 c2                	sub    %eax,%edx
f01168b0:	89 d0                	mov    %edx,%eax
f01168b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01168b5:	83 ec 0c             	sub    $0xc,%esp
f01168b8:	ff 75 bc             	pushl  -0x44(%ebp)
f01168bb:	e8 1c 0b ff ff       	call   f01073dc <kmalloc>
f01168c0:	83 c4 10             	add    $0x10,%esp
f01168c3:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f01168c9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01168cf:	85 c0                	test   %eax,%eax
f01168d1:	74 14                	je     f01168e7 <test_kmalloc+0x144>
f01168d3:	83 ec 04             	sub    $0x4,%esp
f01168d6:	68 08 a2 13 f0       	push   $0xf013a208
f01168db:	6a 40                	push   $0x40
f01168dd:	68 3a a2 13 f0       	push   $0xf013a23a
f01168e2:	e8 bf 98 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01168e7:	e8 a0 d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01168ec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01168ef:	74 14                	je     f0116905 <test_kmalloc+0x162>
f01168f1:	83 ec 04             	sub    $0x4,%esp
f01168f4:	68 54 a2 13 f0       	push   $0xf013a254
f01168f9:	6a 41                	push   $0x41
f01168fb:	68 3a a2 13 f0       	push   $0xf013a23a
f0116900:	e8 a1 98 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116905:	e8 c0 54 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011690a:	89 c2                	mov    %eax,%edx
f011690c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011690f:	39 c2                	cmp    %eax,%edx
f0116911:	74 14                	je     f0116927 <test_kmalloc+0x184>
f0116913:	83 ec 04             	sub    $0x4,%esp
f0116916:	68 bc a2 13 f0       	push   $0xf013a2bc
f011691b:	6a 42                	push   $0x42
f011691d:	68 3a a2 13 f0       	push   $0xf013a23a
f0116922:	e8 7f 98 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0116927:	83 ec 0c             	sub    $0xc,%esp
f011692a:	68 fc a2 13 f0       	push   $0xf013a2fc
f011692f:	e8 f9 a2 fe ff       	call   f0100c2d <cprintf>
f0116934:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116937:	e8 8e 54 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011693c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011693f:	e8 48 d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116944:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116947:	83 ec 0c             	sub    $0xc,%esp
f011694a:	68 00 fc 1f 00       	push   $0x1ffc00
f011694f:	e8 88 0a ff ff       	call   f01073dc <kmalloc>
f0116954:	83 c4 10             	add    $0x10,%esp
f0116957:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011695d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116963:	89 c1                	mov    %eax,%ecx
f0116965:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011696c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011696f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116974:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0116977:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011697a:	ba 00 00 00 00       	mov    $0x0,%edx
f011697f:	f7 75 b8             	divl   -0x48(%ebp)
f0116982:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116985:	29 d0                	sub    %edx,%eax
f0116987:	89 c3                	mov    %eax,%ebx
f0116989:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0116990:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116995:	0f b6 d0             	movzbl %al,%edx
f0116998:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011699b:	01 d0                	add    %edx,%eax
f011699d:	48                   	dec    %eax
f011699e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01169a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01169a9:	f7 75 b0             	divl   -0x50(%ebp)
f01169ac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169af:	29 d0                	sub    %edx,%eax
f01169b1:	01 c3                	add    %eax,%ebx
f01169b3:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01169ba:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01169bf:	0f b6 c0             	movzbl %al,%eax
f01169c2:	c1 e0 04             	shl    $0x4,%eax
f01169c5:	89 c2                	mov    %eax,%edx
f01169c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169ca:	01 d0                	add    %edx,%eax
f01169cc:	48                   	dec    %eax
f01169cd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01169d0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01169d8:	f7 75 a8             	divl   -0x58(%ebp)
f01169db:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169de:	29 d0                	sub    %edx,%eax
f01169e0:	01 d8                	add    %ebx,%eax
f01169e2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01169e7:	39 c1                	cmp    %eax,%ecx
f01169e9:	74 14                	je     f01169ff <test_kmalloc+0x25c>
f01169eb:	83 ec 04             	sub    $0x4,%esp
f01169ee:	68 20 a3 13 f0       	push   $0xf013a320
f01169f3:	6a 49                	push   $0x49
f01169f5:	68 3a a2 13 f0       	push   $0xf013a23a
f01169fa:	e8 a7 97 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01169ff:	e8 88 d2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116a04:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116a07:	74 14                	je     f0116a1d <test_kmalloc+0x27a>
f0116a09:	83 ec 04             	sub    $0x4,%esp
f0116a0c:	68 54 a2 13 f0       	push   $0xf013a254
f0116a11:	6a 4a                	push   $0x4a
f0116a13:	68 3a a2 13 f0       	push   $0xf013a23a
f0116a18:	e8 89 97 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116a1d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116a20:	e8 a5 53 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116a25:	29 c3                	sub    %eax,%ebx
f0116a27:	89 d8                	mov    %ebx,%eax
f0116a29:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116a2e:	74 14                	je     f0116a44 <test_kmalloc+0x2a1>
f0116a30:	83 ec 04             	sub    $0x4,%esp
f0116a33:	68 bc a2 13 f0       	push   $0xf013a2bc
f0116a38:	6a 4b                	push   $0x4b
f0116a3a:	68 3a a2 13 f0       	push   $0xf013a23a
f0116a3f:	e8 62 97 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116a44:	e8 81 53 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116a49:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a4c:	e8 3b d2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116a51:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0116a54:	83 ec 0c             	sub    $0xc,%esp
f0116a57:	68 00 fc 1f 00       	push   $0x1ffc00
f0116a5c:	e8 7b 09 ff ff       	call   f01073dc <kmalloc>
f0116a61:	83 c4 10             	add    $0x10,%esp
f0116a64:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116a6a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116a70:	89 c1                	mov    %eax,%ecx
f0116a72:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0116a79:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0116a7c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116a81:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0116a84:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116a87:	ba 00 00 00 00       	mov    $0x0,%edx
f0116a8c:	f7 75 a0             	divl   -0x60(%ebp)
f0116a8f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116a92:	29 d0                	sub    %edx,%eax
f0116a94:	89 c3                	mov    %eax,%ebx
f0116a96:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0116a9d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116aa2:	0f b6 d0             	movzbl %al,%edx
f0116aa5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116aa8:	01 d0                	add    %edx,%eax
f0116aaa:	48                   	dec    %eax
f0116aab:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0116aae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116ab1:	ba 00 00 00 00       	mov    $0x0,%edx
f0116ab6:	f7 75 98             	divl   -0x68(%ebp)
f0116ab9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116abc:	29 d0                	sub    %edx,%eax
f0116abe:	01 c3                	add    %eax,%ebx
f0116ac0:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0116ac7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116acc:	0f b6 c0             	movzbl %al,%eax
f0116acf:	c1 e0 04             	shl    $0x4,%eax
f0116ad2:	89 c2                	mov    %eax,%edx
f0116ad4:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116ad7:	01 d0                	add    %edx,%eax
f0116ad9:	48                   	dec    %eax
f0116ada:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0116add:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116ae0:	ba 00 00 00 00       	mov    $0x0,%edx
f0116ae5:	f7 75 90             	divl   -0x70(%ebp)
f0116ae8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116aeb:	29 d0                	sub    %edx,%eax
f0116aed:	01 d8                	add    %ebx,%eax
f0116aef:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0116af4:	39 c1                	cmp    %eax,%ecx
f0116af6:	74 14                	je     f0116b0c <test_kmalloc+0x369>
f0116af8:	83 ec 04             	sub    $0x4,%esp
f0116afb:	68 20 a3 13 f0       	push   $0xf013a320
f0116b00:	6a 51                	push   $0x51
f0116b02:	68 3a a2 13 f0       	push   $0xf013a23a
f0116b07:	e8 9a 96 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116b0c:	e8 7b d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116b11:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116b14:	74 14                	je     f0116b2a <test_kmalloc+0x387>
f0116b16:	83 ec 04             	sub    $0x4,%esp
f0116b19:	68 54 a2 13 f0       	push   $0xf013a254
f0116b1e:	6a 52                	push   $0x52
f0116b20:	68 3a a2 13 f0       	push   $0xf013a23a
f0116b25:	e8 7c 96 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116b2a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116b2d:	e8 98 52 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116b32:	29 c3                	sub    %eax,%ebx
f0116b34:	89 d8                	mov    %ebx,%eax
f0116b36:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116b3b:	74 14                	je     f0116b51 <test_kmalloc+0x3ae>
f0116b3d:	83 ec 04             	sub    $0x4,%esp
f0116b40:	68 bc a2 13 f0       	push   $0xf013a2bc
f0116b45:	6a 53                	push   $0x53
f0116b47:	68 3a a2 13 f0       	push   $0xf013a23a
f0116b4c:	e8 55 96 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116b51:	e8 74 52 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116b56:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b59:	e8 2e d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116b5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0116b61:	83 ec 0c             	sub    $0xc,%esp
f0116b64:	68 00 08 00 00       	push   $0x800
f0116b69:	e8 6e 08 ff ff       	call   f01073dc <kmalloc>
f0116b6e:	83 c4 10             	add    $0x10,%esp
f0116b71:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116b77:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0116b7d:	89 c1                	mov    %eax,%ecx
f0116b7f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0116b86:	8b 45 88             	mov    -0x78(%ebp),%eax
f0116b89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116b8e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0116b91:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116b94:	ba 00 00 00 00       	mov    $0x0,%edx
f0116b99:	f7 75 88             	divl   -0x78(%ebp)
f0116b9c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116b9f:	29 d0                	sub    %edx,%eax
f0116ba1:	89 c3                	mov    %eax,%ebx
f0116ba3:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0116baa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116baf:	0f b6 d0             	movzbl %al,%edx
f0116bb2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0116bb5:	01 d0                	add    %edx,%eax
f0116bb7:	48                   	dec    %eax
f0116bb8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0116bbe:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116bc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bc9:	f7 75 80             	divl   -0x80(%ebp)
f0116bcc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116bd2:	29 d0                	sub    %edx,%eax
f0116bd4:	01 c3                	add    %eax,%ebx
f0116bd6:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0116bdd:	10 00 00 
f0116be0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116be5:	0f b6 c0             	movzbl %al,%eax
f0116be8:	c1 e0 04             	shl    $0x4,%eax
f0116beb:	89 c2                	mov    %eax,%edx
f0116bed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0116bf3:	01 d0                	add    %edx,%eax
f0116bf5:	48                   	dec    %eax
f0116bf6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0116bfc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116c02:	ba 00 00 00 00       	mov    $0x0,%edx
f0116c07:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0116c0d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116c13:	29 d0                	sub    %edx,%eax
f0116c15:	01 d8                	add    %ebx,%eax
f0116c17:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0116c1c:	39 c1                	cmp    %eax,%ecx
f0116c1e:	74 14                	je     f0116c34 <test_kmalloc+0x491>
f0116c20:	83 ec 04             	sub    $0x4,%esp
f0116c23:	68 20 a3 13 f0       	push   $0xf013a320
f0116c28:	6a 59                	push   $0x59
f0116c2a:	68 3a a2 13 f0       	push   $0xf013a23a
f0116c2f:	e8 72 95 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c34:	e8 53 d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c39:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116c3c:	74 14                	je     f0116c52 <test_kmalloc+0x4af>
f0116c3e:	83 ec 04             	sub    $0x4,%esp
f0116c41:	68 54 a2 13 f0       	push   $0xf013a254
f0116c46:	6a 5a                	push   $0x5a
f0116c48:	68 3a a2 13 f0       	push   $0xf013a23a
f0116c4d:	e8 54 95 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116c52:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116c55:	e8 70 51 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116c5a:	29 c3                	sub    %eax,%ebx
f0116c5c:	89 d8                	mov    %ebx,%eax
f0116c5e:	83 f8 01             	cmp    $0x1,%eax
f0116c61:	74 14                	je     f0116c77 <test_kmalloc+0x4d4>
f0116c63:	83 ec 04             	sub    $0x4,%esp
f0116c66:	68 bc a2 13 f0       	push   $0xf013a2bc
f0116c6b:	6a 5b                	push   $0x5b
f0116c6d:	68 3a a2 13 f0       	push   $0xf013a23a
f0116c72:	e8 2f 95 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116c77:	e8 4e 51 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116c7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c7f:	e8 08 d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c84:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0116c87:	83 ec 0c             	sub    $0xc,%esp
f0116c8a:	68 00 08 00 00       	push   $0x800
f0116c8f:	e8 48 07 ff ff       	call   f01073dc <kmalloc>
f0116c94:	83 c4 10             	add    $0x10,%esp
f0116c97:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116c9d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116ca3:	89 c1                	mov    %eax,%ecx
f0116ca5:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0116cac:	10 00 00 
f0116caf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0116cb5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116cba:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0116cc0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0116cc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0116ccb:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0116cd1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0116cd7:	29 d0                	sub    %edx,%eax
f0116cd9:	89 c3                	mov    %eax,%ebx
f0116cdb:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0116ce2:	10 00 00 
f0116ce5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116cea:	0f b6 d0             	movzbl %al,%edx
f0116ced:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0116cf3:	01 d0                	add    %edx,%eax
f0116cf5:	48                   	dec    %eax
f0116cf6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0116cfc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0116d02:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d07:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0116d0d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0116d13:	29 d0                	sub    %edx,%eax
f0116d15:	01 c3                	add    %eax,%ebx
f0116d17:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0116d1e:	10 00 00 
f0116d21:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116d26:	0f b6 c0             	movzbl %al,%eax
f0116d29:	c1 e0 04             	shl    $0x4,%eax
f0116d2c:	89 c2                	mov    %eax,%edx
f0116d2e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0116d34:	01 d0                	add    %edx,%eax
f0116d36:	48                   	dec    %eax
f0116d37:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0116d3d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0116d43:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d48:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0116d4e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0116d54:	29 d0                	sub    %edx,%eax
f0116d56:	01 d8                	add    %ebx,%eax
f0116d58:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0116d5d:	39 c1                	cmp    %eax,%ecx
f0116d5f:	74 14                	je     f0116d75 <test_kmalloc+0x5d2>
f0116d61:	83 ec 04             	sub    $0x4,%esp
f0116d64:	68 20 a3 13 f0       	push   $0xf013a320
f0116d69:	6a 61                	push   $0x61
f0116d6b:	68 3a a2 13 f0       	push   $0xf013a23a
f0116d70:	e8 31 94 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116d75:	e8 12 cf fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116d7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116d7d:	74 14                	je     f0116d93 <test_kmalloc+0x5f0>
f0116d7f:	83 ec 04             	sub    $0x4,%esp
f0116d82:	68 54 a2 13 f0       	push   $0xf013a254
f0116d87:	6a 62                	push   $0x62
f0116d89:	68 3a a2 13 f0       	push   $0xf013a23a
f0116d8e:	e8 13 94 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116d93:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116d96:	e8 2f 50 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116d9b:	29 c3                	sub    %eax,%ebx
f0116d9d:	89 d8                	mov    %ebx,%eax
f0116d9f:	83 f8 01             	cmp    $0x1,%eax
f0116da2:	74 14                	je     f0116db8 <test_kmalloc+0x615>
f0116da4:	83 ec 04             	sub    $0x4,%esp
f0116da7:	68 bc a2 13 f0       	push   $0xf013a2bc
f0116dac:	6a 63                	push   $0x63
f0116dae:	68 3a a2 13 f0       	push   $0xf013a23a
f0116db3:	e8 ee 93 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0116db8:	e8 0d 50 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116dbd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116dc0:	e8 c7 ce fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116dc5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0116dc8:	83 ec 0c             	sub    $0xc,%esp
f0116dcb:	68 00 1c 00 00       	push   $0x1c00
f0116dd0:	e8 07 06 ff ff       	call   f01073dc <kmalloc>
f0116dd5:	83 c4 10             	add    $0x10,%esp
f0116dd8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116dde:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116de4:	89 c1                	mov    %eax,%ecx
f0116de6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0116ded:	10 00 00 
f0116df0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0116df6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116dfb:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0116e01:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0116e07:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e0c:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0116e12:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0116e18:	29 d0                	sub    %edx,%eax
f0116e1a:	89 c3                	mov    %eax,%ebx
f0116e1c:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0116e23:	10 00 00 
f0116e26:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116e2b:	0f b6 d0             	movzbl %al,%edx
f0116e2e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0116e34:	01 d0                	add    %edx,%eax
f0116e36:	48                   	dec    %eax
f0116e37:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0116e3d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0116e43:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e48:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0116e4e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0116e54:	29 d0                	sub    %edx,%eax
f0116e56:	01 c3                	add    %eax,%ebx
f0116e58:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0116e5f:	10 00 00 
f0116e62:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116e67:	0f b6 c0             	movzbl %al,%eax
f0116e6a:	c1 e0 04             	shl    $0x4,%eax
f0116e6d:	89 c2                	mov    %eax,%edx
f0116e6f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0116e75:	01 d0                	add    %edx,%eax
f0116e77:	48                   	dec    %eax
f0116e78:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0116e7e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116e84:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e89:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0116e8f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116e95:	29 d0                	sub    %edx,%eax
f0116e97:	01 d8                	add    %ebx,%eax
f0116e99:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0116e9e:	39 c1                	cmp    %eax,%ecx
f0116ea0:	74 14                	je     f0116eb6 <test_kmalloc+0x713>
f0116ea2:	83 ec 04             	sub    $0x4,%esp
f0116ea5:	68 20 a3 13 f0       	push   $0xf013a320
f0116eaa:	6a 69                	push   $0x69
f0116eac:	68 3a a2 13 f0       	push   $0xf013a23a
f0116eb1:	e8 f0 92 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116eb6:	e8 d1 cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ebb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116ebe:	74 14                	je     f0116ed4 <test_kmalloc+0x731>
f0116ec0:	83 ec 04             	sub    $0x4,%esp
f0116ec3:	68 54 a2 13 f0       	push   $0xf013a254
f0116ec8:	6a 6a                	push   $0x6a
f0116eca:	68 3a a2 13 f0       	push   $0xf013a23a
f0116ecf:	e8 d2 92 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116ed4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116ed7:	e8 ee 4e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116edc:	29 c3                	sub    %eax,%ebx
f0116ede:	89 d8                	mov    %ebx,%eax
f0116ee0:	83 f8 02             	cmp    $0x2,%eax
f0116ee3:	74 14                	je     f0116ef9 <test_kmalloc+0x756>
f0116ee5:	83 ec 04             	sub    $0x4,%esp
f0116ee8:	68 bc a2 13 f0       	push   $0xf013a2bc
f0116eed:	6a 6b                	push   $0x6b
f0116eef:	68 3a a2 13 f0       	push   $0xf013a23a
f0116ef4:	e8 ad 92 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116ef9:	e8 cc 4e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0116efe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f01:	e8 86 cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116f06:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0116f09:	83 ec 0c             	sub    $0xc,%esp
f0116f0c:	68 00 fc 2f 00       	push   $0x2ffc00
f0116f11:	e8 c6 04 ff ff       	call   f01073dc <kmalloc>
f0116f16:	83 c4 10             	add    $0x10,%esp
f0116f19:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116f1f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116f25:	89 c1                	mov    %eax,%ecx
f0116f27:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0116f2e:	10 00 00 
f0116f31:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0116f37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116f3c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0116f42:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0116f48:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f4d:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0116f53:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0116f59:	29 d0                	sub    %edx,%eax
f0116f5b:	89 c3                	mov    %eax,%ebx
f0116f5d:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0116f64:	10 00 00 
f0116f67:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116f6c:	0f b6 d0             	movzbl %al,%edx
f0116f6f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0116f75:	01 d0                	add    %edx,%eax
f0116f77:	48                   	dec    %eax
f0116f78:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0116f7e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0116f84:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f89:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0116f8f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0116f95:	29 d0                	sub    %edx,%eax
f0116f97:	01 c3                	add    %eax,%ebx
f0116f99:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0116fa0:	10 00 00 
f0116fa3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116fa8:	0f b6 c0             	movzbl %al,%eax
f0116fab:	c1 e0 04             	shl    $0x4,%eax
f0116fae:	89 c2                	mov    %eax,%edx
f0116fb0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0116fb6:	01 d0                	add    %edx,%eax
f0116fb8:	48                   	dec    %eax
f0116fb9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0116fbf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116fc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0116fca:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0116fd0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116fd6:	29 d0                	sub    %edx,%eax
f0116fd8:	01 d8                	add    %ebx,%eax
f0116fda:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0116fdf:	39 c1                	cmp    %eax,%ecx
f0116fe1:	74 14                	je     f0116ff7 <test_kmalloc+0x854>
f0116fe3:	83 ec 04             	sub    $0x4,%esp
f0116fe6:	68 20 a3 13 f0       	push   $0xf013a320
f0116feb:	6a 71                	push   $0x71
f0116fed:	68 3a a2 13 f0       	push   $0xf013a23a
f0116ff2:	e8 af 91 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116ff7:	e8 90 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ffc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116fff:	74 14                	je     f0117015 <test_kmalloc+0x872>
f0117001:	83 ec 04             	sub    $0x4,%esp
f0117004:	68 54 a2 13 f0       	push   $0xf013a254
f0117009:	6a 72                	push   $0x72
f011700b:	68 3a a2 13 f0       	push   $0xf013a23a
f0117010:	e8 91 91 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117015:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117018:	e8 ad 4d ff ff       	call   f010bdca <sys_calculate_free_frames>
f011701d:	29 c3                	sub    %eax,%ebx
f011701f:	89 d8                	mov    %ebx,%eax
f0117021:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117026:	74 14                	je     f011703c <test_kmalloc+0x899>
f0117028:	83 ec 04             	sub    $0x4,%esp
f011702b:	68 bc a2 13 f0       	push   $0xf013a2bc
f0117030:	6a 73                	push   $0x73
f0117032:	68 3a a2 13 f0       	push   $0xf013a23a
f0117037:	e8 6a 91 fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011703c:	e8 89 4d ff ff       	call   f010bdca <sys_calculate_free_frames>
f0117041:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117044:	e8 43 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117049:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011704c:	83 ec 0c             	sub    $0xc,%esp
f011704f:	68 00 fc 5f 00       	push   $0x5ffc00
f0117054:	e8 83 03 ff ff       	call   f01073dc <kmalloc>
f0117059:	83 c4 10             	add    $0x10,%esp
f011705c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117062:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117068:	89 c1                	mov    %eax,%ecx
f011706a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117071:	10 00 00 
f0117074:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011707a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011707f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117085:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011708b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117090:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117096:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011709c:	29 d0                	sub    %edx,%eax
f011709e:	89 c3                	mov    %eax,%ebx
f01170a0:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01170a7:	10 00 00 
f01170aa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01170af:	0f b6 d0             	movzbl %al,%edx
f01170b2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01170b8:	01 d0                	add    %edx,%eax
f01170ba:	48                   	dec    %eax
f01170bb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01170c1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01170c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01170cc:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01170d2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01170d8:	29 d0                	sub    %edx,%eax
f01170da:	01 c3                	add    %eax,%ebx
f01170dc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01170e3:	10 00 00 
f01170e6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01170eb:	0f b6 c0             	movzbl %al,%eax
f01170ee:	c1 e0 04             	shl    $0x4,%eax
f01170f1:	89 c2                	mov    %eax,%edx
f01170f3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01170f9:	01 d0                	add    %edx,%eax
f01170fb:	48                   	dec    %eax
f01170fc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117102:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117108:	ba 00 00 00 00       	mov    $0x0,%edx
f011710d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117113:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117119:	29 d0                	sub    %edx,%eax
f011711b:	01 d8                	add    %ebx,%eax
f011711d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117122:	39 c1                	cmp    %eax,%ecx
f0117124:	74 14                	je     f011713a <test_kmalloc+0x997>
f0117126:	83 ec 04             	sub    $0x4,%esp
f0117129:	68 20 a3 13 f0       	push   $0xf013a320
f011712e:	6a 79                	push   $0x79
f0117130:	68 3a a2 13 f0       	push   $0xf013a23a
f0117135:	e8 6c 90 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011713a:	e8 4d cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011713f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117142:	74 14                	je     f0117158 <test_kmalloc+0x9b5>
f0117144:	83 ec 04             	sub    $0x4,%esp
f0117147:	68 54 a2 13 f0       	push   $0xf013a254
f011714c:	6a 7a                	push   $0x7a
f011714e:	68 3a a2 13 f0       	push   $0xf013a23a
f0117153:	e8 4e 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117158:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011715b:	e8 6a 4c ff ff       	call   f010bdca <sys_calculate_free_frames>
f0117160:	29 c3                	sub    %eax,%ebx
f0117162:	89 d8                	mov    %ebx,%eax
f0117164:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117169:	74 14                	je     f011717f <test_kmalloc+0x9dc>
f011716b:	83 ec 04             	sub    $0x4,%esp
f011716e:	68 bc a2 13 f0       	push   $0xf013a2bc
f0117173:	6a 7b                	push   $0x7b
f0117175:	68 3a a2 13 f0       	push   $0xf013a23a
f011717a:	e8 27 90 fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011717f:	e8 46 4c ff ff       	call   f010bdca <sys_calculate_free_frames>
f0117184:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117187:	e8 00 cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011718c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011718f:	83 ec 0c             	sub    $0xc,%esp
f0117192:	68 00 38 00 00       	push   $0x3800
f0117197:	e8 40 02 ff ff       	call   f01073dc <kmalloc>
f011719c:	83 c4 10             	add    $0x10,%esp
f011719f:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01171a5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01171ab:	89 c1                	mov    %eax,%ecx
f01171ad:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01171b4:	10 00 00 
f01171b7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01171bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01171c2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01171c8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01171ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01171d3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01171d9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01171df:	29 d0                	sub    %edx,%eax
f01171e1:	89 c3                	mov    %eax,%ebx
f01171e3:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01171ea:	10 00 00 
f01171ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01171f2:	0f b6 d0             	movzbl %al,%edx
f01171f5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01171fb:	01 d0                	add    %edx,%eax
f01171fd:	48                   	dec    %eax
f01171fe:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117204:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011720a:	ba 00 00 00 00       	mov    $0x0,%edx
f011720f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0117215:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011721b:	29 d0                	sub    %edx,%eax
f011721d:	01 c3                	add    %eax,%ebx
f011721f:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0117226:	10 00 00 
f0117229:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011722e:	0f b6 c0             	movzbl %al,%eax
f0117231:	c1 e0 04             	shl    $0x4,%eax
f0117234:	89 c2                	mov    %eax,%edx
f0117236:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011723c:	01 d0                	add    %edx,%eax
f011723e:	48                   	dec    %eax
f011723f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117245:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011724b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117250:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117256:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011725c:	29 d0                	sub    %edx,%eax
f011725e:	01 d8                	add    %ebx,%eax
f0117260:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117265:	39 c1                	cmp    %eax,%ecx
f0117267:	74 17                	je     f0117280 <test_kmalloc+0xadd>
f0117269:	83 ec 04             	sub    $0x4,%esp
f011726c:	68 20 a3 13 f0       	push   $0xf013a320
f0117271:	68 81 00 00 00       	push   $0x81
f0117276:	68 3a a2 13 f0       	push   $0xf013a23a
f011727b:	e8 26 8f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117280:	e8 07 ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117285:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117288:	74 17                	je     f01172a1 <test_kmalloc+0xafe>
f011728a:	83 ec 04             	sub    $0x4,%esp
f011728d:	68 54 a2 13 f0       	push   $0xf013a254
f0117292:	68 82 00 00 00       	push   $0x82
f0117297:	68 3a a2 13 f0       	push   $0xf013a23a
f011729c:	e8 05 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01172a1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01172a4:	e8 21 4b ff ff       	call   f010bdca <sys_calculate_free_frames>
f01172a9:	29 c3                	sub    %eax,%ebx
f01172ab:	89 d8                	mov    %ebx,%eax
f01172ad:	83 f8 04             	cmp    $0x4,%eax
f01172b0:	74 17                	je     f01172c9 <test_kmalloc+0xb26>
f01172b2:	83 ec 04             	sub    $0x4,%esp
f01172b5:	68 bc a2 13 f0       	push   $0xf013a2bc
f01172ba:	68 83 00 00 00       	push   $0x83
f01172bf:	68 3a a2 13 f0       	push   $0xf013a23a
f01172c4:	e8 dd 8e fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f01172c9:	83 ec 0c             	sub    $0xc,%esp
f01172cc:	68 86 a3 13 f0       	push   $0xf013a386
f01172d1:	e8 57 99 fe ff       	call   f0100c2d <cprintf>
f01172d6:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01172d9:	e8 ec 4a ff ff       	call   f010bdca <sys_calculate_free_frames>
f01172de:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01172e1:	e8 a6 c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01172e6:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01172e9:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01172f0:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01172f3:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01172f9:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01172ff:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117305:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117308:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f011730a:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117310:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117316:	01 c2                	add    %eax,%edx
f0117318:	8a 45 f2             	mov    -0xe(%ebp),%al
f011731b:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f011731d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117323:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117329:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117330:	fd 0f 00 
			shortArr[0] = minShort;
f0117333:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117339:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011733c:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011733f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117345:	01 c0                	add    %eax,%eax
f0117347:	89 c2                	mov    %eax,%edx
f0117349:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011734f:	01 c2                	add    %eax,%edx
f0117351:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117355:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117358:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011735e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117364:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f011736b:	01 00 00 
			intArr[0] = minInt;
f011736e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117374:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117377:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117379:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011737f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117386:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011738c:	01 c2                	add    %eax,%edx
f011738e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117391:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117393:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117399:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011739f:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f01173a6:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01173a9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173af:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01173b2:	88 10                	mov    %dl,(%eax)
f01173b4:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01173ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01173bd:	66 89 42 02          	mov    %ax,0x2(%edx)
f01173c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01173ca:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01173cd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01173d3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01173da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173e0:	01 c2                	add    %eax,%edx
f01173e2:	8a 45 f2             	mov    -0xe(%ebp),%al
f01173e5:	88 02                	mov    %al,(%edx)
f01173e7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01173ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01173f4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173fa:	01 c2                	add    %eax,%edx
f01173fc:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117400:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117404:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011740a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117411:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117417:	01 c2                	add    %eax,%edx
f0117419:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011741c:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f011741f:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117426:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117429:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011742f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117435:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011743b:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011743e:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117440:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117446:	89 c2                	mov    %eax,%edx
f0117448:	c1 ea 1f             	shr    $0x1f,%edx
f011744b:	01 d0                	add    %edx,%eax
f011744d:	d1 f8                	sar    %eax
f011744f:	89 c2                	mov    %eax,%edx
f0117451:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117457:	01 c2                	add    %eax,%edx
f0117459:	8a 45 f2             	mov    -0xe(%ebp),%al
f011745c:	88 c1                	mov    %al,%cl
f011745e:	c0 e9 07             	shr    $0x7,%cl
f0117461:	01 c8                	add    %ecx,%eax
f0117463:	d0 f8                	sar    %al
f0117465:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117467:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011746d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117473:	01 c2                	add    %eax,%edx
f0117475:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117478:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f011747a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117480:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117486:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f011748d:	1b 00 00 
			shortArr2[0] = minShort;
f0117490:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117496:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117499:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f011749c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01174a2:	01 c0                	add    %eax,%eax
f01174a4:	89 c2                	mov    %eax,%edx
f01174a6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01174ac:	01 c2                	add    %eax,%edx
f01174ae:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01174b2:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01174b5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01174bb:	8a 00                	mov    (%eax),%al
f01174bd:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01174c0:	75 15                	jne    f01174d7 <test_kmalloc+0xd34>
f01174c2:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01174c8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01174ce:	01 d0                	add    %edx,%eax
f01174d0:	8a 00                	mov    (%eax),%al
f01174d2:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01174d5:	74 17                	je     f01174ee <test_kmalloc+0xd4b>
f01174d7:	83 ec 04             	sub    $0x4,%esp
f01174da:	68 90 a3 13 f0       	push   $0xf013a390
f01174df:	68 b2 00 00 00       	push   $0xb2
f01174e4:	68 3a a2 13 f0       	push   $0xf013a23a
f01174e9:	e8 b8 8c fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01174ee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01174f4:	66 8b 00             	mov    (%eax),%ax
f01174f7:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01174fb:	75 1b                	jne    f0117518 <test_kmalloc+0xd75>
f01174fd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117503:	01 c0                	add    %eax,%eax
f0117505:	89 c2                	mov    %eax,%edx
f0117507:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011750d:	01 d0                	add    %edx,%eax
f011750f:	66 8b 00             	mov    (%eax),%ax
f0117512:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117516:	74 17                	je     f011752f <test_kmalloc+0xd8c>
f0117518:	83 ec 04             	sub    $0x4,%esp
f011751b:	68 90 a3 13 f0       	push   $0xf013a390
f0117520:	68 b3 00 00 00       	push   $0xb3
f0117525:	68 3a a2 13 f0       	push   $0xf013a23a
f011752a:	e8 77 8c fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f011752f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117535:	8b 00                	mov    (%eax),%eax
f0117537:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011753a:	75 1c                	jne    f0117558 <test_kmalloc+0xdb5>
f011753c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117542:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117549:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011754f:	01 d0                	add    %edx,%eax
f0117551:	8b 00                	mov    (%eax),%eax
f0117553:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117556:	74 17                	je     f011756f <test_kmalloc+0xdcc>
f0117558:	83 ec 04             	sub    $0x4,%esp
f011755b:	68 90 a3 13 f0       	push   $0xf013a390
f0117560:	68 b4 00 00 00       	push   $0xb4
f0117565:	68 3a a2 13 f0       	push   $0xf013a23a
f011756a:	e8 37 8c fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011756f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117575:	8a 00                	mov    (%eax),%al
f0117577:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011757a:	75 1c                	jne    f0117598 <test_kmalloc+0xdf5>
f011757c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117582:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117589:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011758f:	01 d0                	add    %edx,%eax
f0117591:	8a 00                	mov    (%eax),%al
f0117593:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117596:	74 17                	je     f01175af <test_kmalloc+0xe0c>
f0117598:	83 ec 04             	sub    $0x4,%esp
f011759b:	68 90 a3 13 f0       	push   $0xf013a390
f01175a0:	68 b6 00 00 00       	push   $0xb6
f01175a5:	68 3a a2 13 f0       	push   $0xf013a23a
f01175aa:	e8 f7 8b fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01175af:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01175b5:	66 8b 40 02          	mov    0x2(%eax),%ax
f01175b9:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01175bd:	75 1f                	jne    f01175de <test_kmalloc+0xe3b>
f01175bf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01175c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01175cc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01175d2:	01 d0                	add    %edx,%eax
f01175d4:	66 8b 40 02          	mov    0x2(%eax),%ax
f01175d8:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01175dc:	74 17                	je     f01175f5 <test_kmalloc+0xe52>
f01175de:	83 ec 04             	sub    $0x4,%esp
f01175e1:	68 90 a3 13 f0       	push   $0xf013a390
f01175e6:	68 b7 00 00 00       	push   $0xb7
f01175eb:	68 3a a2 13 f0       	push   $0xf013a23a
f01175f0:	e8 b1 8b fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01175f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01175fb:	8b 40 04             	mov    0x4(%eax),%eax
f01175fe:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117601:	75 1d                	jne    f0117620 <test_kmalloc+0xe7d>
f0117603:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117609:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117610:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117616:	01 d0                	add    %edx,%eax
f0117618:	8b 40 04             	mov    0x4(%eax),%eax
f011761b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011761e:	74 17                	je     f0117637 <test_kmalloc+0xe94>
f0117620:	83 ec 04             	sub    $0x4,%esp
f0117623:	68 90 a3 13 f0       	push   $0xf013a390
f0117628:	68 b8 00 00 00       	push   $0xb8
f011762d:	68 3a a2 13 f0       	push   $0xf013a23a
f0117632:	e8 6f 8b fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117637:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011763d:	8a 00                	mov    (%eax),%al
f011763f:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117642:	75 40                	jne    f0117684 <test_kmalloc+0xee1>
f0117644:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011764a:	89 c2                	mov    %eax,%edx
f011764c:	c1 ea 1f             	shr    $0x1f,%edx
f011764f:	01 d0                	add    %edx,%eax
f0117651:	d1 f8                	sar    %eax
f0117653:	89 c2                	mov    %eax,%edx
f0117655:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011765b:	01 d0                	add    %edx,%eax
f011765d:	8a 10                	mov    (%eax),%dl
f011765f:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117662:	88 c1                	mov    %al,%cl
f0117664:	c0 e9 07             	shr    $0x7,%cl
f0117667:	01 c8                	add    %ecx,%eax
f0117669:	d0 f8                	sar    %al
f011766b:	38 c2                	cmp    %al,%dl
f011766d:	75 15                	jne    f0117684 <test_kmalloc+0xee1>
f011766f:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117675:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011767b:	01 d0                	add    %edx,%eax
f011767d:	8a 00                	mov    (%eax),%al
f011767f:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117682:	74 17                	je     f011769b <test_kmalloc+0xef8>
f0117684:	83 ec 04             	sub    $0x4,%esp
f0117687:	68 90 a3 13 f0       	push   $0xf013a390
f011768c:	68 ba 00 00 00       	push   $0xba
f0117691:	68 3a a2 13 f0       	push   $0xf013a23a
f0117696:	e8 0b 8b fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f011769b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01176a1:	66 8b 00             	mov    (%eax),%ax
f01176a4:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01176a8:	75 1b                	jne    f01176c5 <test_kmalloc+0xf22>
f01176aa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01176b0:	01 c0                	add    %eax,%eax
f01176b2:	89 c2                	mov    %eax,%edx
f01176b4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01176ba:	01 d0                	add    %edx,%eax
f01176bc:	66 8b 00             	mov    (%eax),%ax
f01176bf:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01176c3:	74 17                	je     f01176dc <test_kmalloc+0xf39>
f01176c5:	83 ec 04             	sub    $0x4,%esp
f01176c8:	68 90 a3 13 f0       	push   $0xf013a390
f01176cd:	68 bb 00 00 00       	push   $0xbb
f01176d2:	68 3a a2 13 f0       	push   $0xf013a23a
f01176d7:	e8 ca 8a fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01176dc:	e8 e9 46 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01176e1:	89 c2                	mov    %eax,%edx
f01176e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01176e6:	39 c2                	cmp    %eax,%edx
f01176e8:	74 17                	je     f0117701 <test_kmalloc+0xf5e>
f01176ea:	83 ec 04             	sub    $0x4,%esp
f01176ed:	68 bc a2 13 f0       	push   $0xf013a2bc
f01176f2:	68 bd 00 00 00       	push   $0xbd
f01176f7:	68 3a a2 13 f0       	push   $0xf013a23a
f01176fc:	e8 a5 8a fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117701:	e8 86 c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117706:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117709:	74 17                	je     f0117722 <test_kmalloc+0xf7f>
f011770b:	83 ec 04             	sub    $0x4,%esp
f011770e:	68 54 a2 13 f0       	push   $0xf013a254
f0117713:	68 be 00 00 00       	push   $0xbe
f0117718:	68 3a a2 13 f0       	push   $0xf013a23a
f011771d:	e8 84 8a fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f0117722:	83 ec 0c             	sub    $0xc,%esp
f0117725:	68 c5 a3 13 f0       	push   $0xf013a3c5
f011772a:	e8 fe 94 fe ff       	call   f0100c2d <cprintf>
f011772f:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0117732:	e8 93 46 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0117737:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011773a:	e8 4d c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011773f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0117742:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0117749:	10 00 00 
f011774c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117752:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117757:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011775d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117763:	ba 00 00 00 00       	mov    $0x0,%edx
f0117768:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011776e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117774:	29 d0                	sub    %edx,%eax
f0117776:	89 c1                	mov    %eax,%ecx
f0117778:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011777f:	10 00 00 
f0117782:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117787:	0f b6 d0             	movzbl %al,%edx
f011778a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117790:	01 d0                	add    %edx,%eax
f0117792:	48                   	dec    %eax
f0117793:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0117799:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011779f:	ba 00 00 00 00       	mov    $0x0,%edx
f01177a4:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01177aa:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01177b0:	29 d0                	sub    %edx,%eax
f01177b2:	01 c1                	add    %eax,%ecx
f01177b4:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01177bb:	10 00 00 
f01177be:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01177c3:	0f b6 c0             	movzbl %al,%eax
f01177c6:	c1 e0 04             	shl    $0x4,%eax
f01177c9:	89 c2                	mov    %eax,%edx
f01177cb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01177d1:	01 d0                	add    %edx,%eax
f01177d3:	48                   	dec    %eax
f01177d4:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01177da:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01177e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01177e5:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01177eb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01177f1:	29 d0                	sub    %edx,%eax
f01177f3:	01 c8                	add    %ecx,%eax
f01177f5:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01177fa:	29 c2                	sub    %eax,%edx
f01177fc:	89 d0                	mov    %edx,%eax
f01177fe:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0117804:	83 ec 0c             	sub    $0xc,%esp
f0117807:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f011780d:	e8 ca fb fe ff       	call   f01073dc <kmalloc>
f0117812:	83 c4 10             	add    $0x10,%esp
f0117815:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f011781b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0117821:	85 c0                	test   %eax,%eax
f0117823:	74 17                	je     f011783c <test_kmalloc+0x1099>
f0117825:	83 ec 04             	sub    $0x4,%esp
f0117828:	68 08 a2 13 f0       	push   $0xf013a208
f011782d:	68 c8 00 00 00       	push   $0xc8
f0117832:	68 3a a2 13 f0       	push   $0xf013a23a
f0117837:	e8 6a 89 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011783c:	e8 4b c4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117841:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117844:	74 17                	je     f011785d <test_kmalloc+0x10ba>
f0117846:	83 ec 04             	sub    $0x4,%esp
f0117849:	68 54 a2 13 f0       	push   $0xf013a254
f011784e:	68 c9 00 00 00       	push   $0xc9
f0117853:	68 3a a2 13 f0       	push   $0xf013a23a
f0117858:	e8 49 89 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011785d:	e8 68 45 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0117862:	89 c2                	mov    %eax,%edx
f0117864:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117867:	39 c2                	cmp    %eax,%edx
f0117869:	74 17                	je     f0117882 <test_kmalloc+0x10df>
f011786b:	83 ec 04             	sub    $0x4,%esp
f011786e:	68 bc a2 13 f0       	push   $0xf013a2bc
f0117873:	68 ca 00 00 00       	push   $0xca
f0117878:	68 3a a2 13 f0       	push   $0xf013a23a
f011787d:	e8 24 89 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0117882:	83 ec 0c             	sub    $0xc,%esp
f0117885:	68 cc a3 13 f0       	push   $0xf013a3cc
f011788a:	e8 9e 93 fe ff       	call   f0100c2d <cprintf>
f011788f:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0117892:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117898:	05 00 40 00 00       	add    $0x4000,%eax
f011789d:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01178a3:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01178aa:	10 00 00 
f01178ad:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01178b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01178b8:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01178be:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01178c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01178c9:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01178cf:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01178d5:	29 d0                	sub    %edx,%eax
f01178d7:	89 c1                	mov    %eax,%ecx
f01178d9:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01178e0:	10 00 00 
f01178e3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01178e8:	0f b6 d0             	movzbl %al,%edx
f01178eb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01178f1:	01 d0                	add    %edx,%eax
f01178f3:	48                   	dec    %eax
f01178f4:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01178fa:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117900:	ba 00 00 00 00       	mov    $0x0,%edx
f0117905:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011790b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117911:	29 d0                	sub    %edx,%eax
f0117913:	01 c1                	add    %eax,%ecx
f0117915:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011791c:	10 00 00 
f011791f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117924:	0f b6 c0             	movzbl %al,%eax
f0117927:	c1 e0 04             	shl    $0x4,%eax
f011792a:	89 c2                	mov    %eax,%edx
f011792c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0117932:	01 d0                	add    %edx,%eax
f0117934:	48                   	dec    %eax
f0117935:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011793b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117941:	ba 00 00 00 00       	mov    $0x0,%edx
f0117946:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011794c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117952:	29 d0                	sub    %edx,%eax
f0117954:	01 c8                	add    %ecx,%eax
f0117956:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011795b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011795e:	eb 6a                	jmp    f01179ca <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0117960:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0117965:	83 ec 04             	sub    $0x4,%esp
f0117968:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f011796e:	52                   	push   %edx
f011796f:	ff 75 f4             	pushl  -0xc(%ebp)
f0117972:	50                   	push   %eax
f0117973:	e8 f1 ef fe ff       	call   f0106969 <get_page_table>
f0117978:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011797b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117984:	c1 ea 0c             	shr    $0xc,%edx
f0117987:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011798d:	c1 e2 02             	shl    $0x2,%edx
f0117990:	01 d0                	add    %edx,%eax
f0117992:	8b 00                	mov    (%eax),%eax
f0117994:	25 ff 0f 00 00       	and    $0xfff,%eax
f0117999:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011799f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01179a5:	83 e0 04             	and    $0x4,%eax
f01179a8:	85 c0                	test   %eax,%eax
f01179aa:	74 17                	je     f01179c3 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01179ac:	83 ec 04             	sub    $0x4,%esp
f01179af:	68 d4 a3 13 f0       	push   $0xf013a3d4
f01179b4:	68 d7 00 00 00       	push   $0xd7
f01179b9:	68 3a a2 13 f0       	push   $0xf013a23a
f01179be:	e8 e3 87 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01179c3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01179ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01179cd:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01179d3:	72 8b                	jb     f0117960 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01179d5:	83 ec 0c             	sub    $0xc,%esp
f01179d8:	68 1e a4 13 f0       	push   $0xf013a41e
f01179dd:	e8 4b 92 fe ff       	call   f0100c2d <cprintf>
f01179e2:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01179e5:	83 ec 0c             	sub    $0xc,%esp
f01179e8:	68 28 a4 13 f0       	push   $0xf013a428
f01179ed:	e8 3b 92 fe ff       	call   f0100c2d <cprintf>
f01179f2:	83 c4 10             	add    $0x10,%esp

	return 1;
f01179f5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01179fa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01179fd:	5b                   	pop    %ebx
f01179fe:	5f                   	pop    %edi
f01179ff:	5d                   	pop    %ebp
f0117a00:	c3                   	ret    

f0117a01 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0117a01:	55                   	push   %ebp
f0117a02:	89 e5                	mov    %esp,%ebp
f0117a04:	57                   	push   %edi
f0117a05:	53                   	push   %ebx
f0117a06:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0117a0c:	83 ec 0c             	sub    $0xc,%esp
f0117a0f:	68 7c a1 13 f0       	push   $0xf013a17c
f0117a14:	e8 14 92 fe ff       	call   f0100c2d <cprintf>
f0117a19:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117a1c:	83 ec 0c             	sub    $0xc,%esp
f0117a1f:	68 ac a1 13 f0       	push   $0xf013a1ac
f0117a24:	e8 04 92 fe ff       	call   f0100c2d <cprintf>
f0117a29:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117a2c:	83 ec 0c             	sub    $0xc,%esp
f0117a2f:	68 7c a1 13 f0       	push   $0xf013a17c
f0117a34:	e8 f4 91 fe ff       	call   f0100c2d <cprintf>
f0117a39:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0117a3c:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0117a42:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0117a47:	b8 00 00 00 00       	mov    $0x0,%eax
f0117a4c:	89 d7                	mov    %edx,%edi
f0117a4e:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0117a50:	83 ec 0c             	sub    $0xc,%esp
f0117a53:	68 64 a4 13 f0       	push   $0xf013a464
f0117a58:	e8 d0 91 fe ff       	call   f0100c2d <cprintf>
f0117a5d:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0117a60:	e8 65 43 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0117a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0117a68:	e8 1f c2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117a6d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117a70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117a77:	eb 1f                	jmp    f0117a98 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0117a79:	83 ec 0c             	sub    $0xc,%esp
f0117a7c:	68 00 00 20 00       	push   $0x200000
f0117a81:	e8 56 f9 fe ff       	call   f01073dc <kmalloc>
f0117a86:	83 c4 10             	add    $0x10,%esp
f0117a89:	89 c2                	mov    %eax,%edx
f0117a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117a8e:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117a95:	ff 45 f4             	incl   -0xc(%ebp)
f0117a98:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0117a9c:	7e db                	jle    f0117a79 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0117a9e:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0117aa5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0117aa8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117aad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0117ab0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117ab3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ab8:	f7 75 e8             	divl   -0x18(%ebp)
f0117abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117abe:	29 d0                	sub    %edx,%eax
f0117ac0:	89 c1                	mov    %eax,%ecx
f0117ac2:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0117ac9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117ace:	0f b6 d0             	movzbl %al,%edx
f0117ad1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117ad4:	01 d0                	add    %edx,%eax
f0117ad6:	48                   	dec    %eax
f0117ad7:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117ada:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117add:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ae2:	f7 75 e0             	divl   -0x20(%ebp)
f0117ae5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117ae8:	29 d0                	sub    %edx,%eax
f0117aea:	01 c1                	add    %eax,%ecx
f0117aec:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0117af3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117af8:	0f b6 c0             	movzbl %al,%eax
f0117afb:	c1 e0 04             	shl    $0x4,%eax
f0117afe:	89 c2                	mov    %eax,%edx
f0117b00:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117b03:	01 d0                	add    %edx,%eax
f0117b05:	48                   	dec    %eax
f0117b06:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0117b09:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117b0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b11:	f7 75 d8             	divl   -0x28(%ebp)
f0117b14:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117b17:	29 d0                	sub    %edx,%eax
f0117b19:	01 c8                	add    %ecx,%eax
f0117b1b:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0117b20:	29 c2                	sub    %eax,%edx
f0117b22:	89 d0                	mov    %edx,%eax
f0117b24:	83 ec 0c             	sub    $0xc,%esp
f0117b27:	50                   	push   %eax
f0117b28:	e8 af f8 fe ff       	call   f01073dc <kmalloc>
f0117b2d:	83 c4 10             	add    $0x10,%esp
f0117b30:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117b36:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0117b3c:	89 c1                	mov    %eax,%ecx
f0117b3e:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0117b45:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117b50:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b58:	f7 75 d0             	divl   -0x30(%ebp)
f0117b5b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b5e:	29 d0                	sub    %edx,%eax
f0117b60:	89 c3                	mov    %eax,%ebx
f0117b62:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0117b69:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117b6e:	0f b6 d0             	movzbl %al,%edx
f0117b71:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b74:	01 d0                	add    %edx,%eax
f0117b76:	48                   	dec    %eax
f0117b77:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0117b7a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b82:	f7 75 c8             	divl   -0x38(%ebp)
f0117b85:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117b88:	29 d0                	sub    %edx,%eax
f0117b8a:	01 c3                	add    %eax,%ebx
f0117b8c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0117b93:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117b98:	0f b6 c0             	movzbl %al,%eax
f0117b9b:	c1 e0 04             	shl    $0x4,%eax
f0117b9e:	89 c2                	mov    %eax,%edx
f0117ba0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117ba3:	01 d0                	add    %edx,%eax
f0117ba5:	48                   	dec    %eax
f0117ba6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0117ba9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117bac:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bb1:	f7 75 c0             	divl   -0x40(%ebp)
f0117bb4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117bb7:	29 d0                	sub    %edx,%eax
f0117bb9:	01 d8                	add    %ebx,%eax
f0117bbb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117bc0:	39 c1                	cmp    %eax,%ecx
f0117bc2:	0f 85 ed 04 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117bc8:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0117bce:	89 c1                	mov    %eax,%ecx
f0117bd0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117bd7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117bda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117bdf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117be2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117be5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bea:	f7 75 b8             	divl   -0x48(%ebp)
f0117bed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bf0:	29 d0                	sub    %edx,%eax
f0117bf2:	89 c3                	mov    %eax,%ebx
f0117bf4:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117bfb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117c00:	0f b6 d0             	movzbl %al,%edx
f0117c03:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c06:	01 d0                	add    %edx,%eax
f0117c08:	48                   	dec    %eax
f0117c09:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117c0c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117c0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c14:	f7 75 b0             	divl   -0x50(%ebp)
f0117c17:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117c1a:	29 d0                	sub    %edx,%eax
f0117c1c:	01 c3                	add    %eax,%ebx
f0117c1e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117c25:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117c2a:	0f b6 c0             	movzbl %al,%eax
f0117c2d:	c1 e0 04             	shl    $0x4,%eax
f0117c30:	89 c2                	mov    %eax,%edx
f0117c32:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117c35:	01 d0                	add    %edx,%eax
f0117c37:	48                   	dec    %eax
f0117c38:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117c3b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117c3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c43:	f7 75 a8             	divl   -0x58(%ebp)
f0117c46:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117c49:	29 d0                	sub    %edx,%eax
f0117c4b:	01 d8                	add    %ebx,%eax
f0117c4d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117c52:	39 c1                	cmp    %eax,%ecx
f0117c54:	0f 85 5b 04 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117c5a:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0117c60:	89 c1                	mov    %eax,%ecx
f0117c62:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117c69:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117c6c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c71:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117c74:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117c77:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c7c:	f7 75 a0             	divl   -0x60(%ebp)
f0117c7f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117c82:	29 d0                	sub    %edx,%eax
f0117c84:	89 c3                	mov    %eax,%ebx
f0117c86:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117c8d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117c92:	0f b6 d0             	movzbl %al,%edx
f0117c95:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c98:	01 d0                	add    %edx,%eax
f0117c9a:	48                   	dec    %eax
f0117c9b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117c9e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117ca1:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ca6:	f7 75 98             	divl   -0x68(%ebp)
f0117ca9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117cac:	29 d0                	sub    %edx,%eax
f0117cae:	01 c3                	add    %eax,%ebx
f0117cb0:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117cb7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117cbc:	0f b6 c0             	movzbl %al,%eax
f0117cbf:	c1 e0 04             	shl    $0x4,%eax
f0117cc2:	89 c2                	mov    %eax,%edx
f0117cc4:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117cc7:	01 d0                	add    %edx,%eax
f0117cc9:	48                   	dec    %eax
f0117cca:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117ccd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117cd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cd5:	f7 75 90             	divl   -0x70(%ebp)
f0117cd8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117cdb:	29 d0                	sub    %edx,%eax
f0117cdd:	01 d8                	add    %ebx,%eax
f0117cdf:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117ce4:	39 c1                	cmp    %eax,%ecx
f0117ce6:	0f 85 c9 03 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0117cec:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0117cf2:	89 c1                	mov    %eax,%ecx
f0117cf4:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117cfb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117cfe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d03:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117d06:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117d09:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d0e:	f7 75 88             	divl   -0x78(%ebp)
f0117d11:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117d14:	29 d0                	sub    %edx,%eax
f0117d16:	89 c3                	mov    %eax,%ebx
f0117d18:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117d1f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117d24:	0f b6 d0             	movzbl %al,%edx
f0117d27:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117d2a:	01 d0                	add    %edx,%eax
f0117d2c:	48                   	dec    %eax
f0117d2d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117d33:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d3e:	f7 75 80             	divl   -0x80(%ebp)
f0117d41:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117d47:	29 d0                	sub    %edx,%eax
f0117d49:	01 c3                	add    %eax,%ebx
f0117d4b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117d52:	10 00 00 
f0117d55:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117d5a:	0f b6 c0             	movzbl %al,%eax
f0117d5d:	c1 e0 04             	shl    $0x4,%eax
f0117d60:	89 c2                	mov    %eax,%edx
f0117d62:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117d68:	01 d0                	add    %edx,%eax
f0117d6a:	48                   	dec    %eax
f0117d6b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117d71:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d7c:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117d82:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117d88:	29 d0                	sub    %edx,%eax
f0117d8a:	01 d8                	add    %ebx,%eax
f0117d8c:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117d91:	39 c1                	cmp    %eax,%ecx
f0117d93:	0f 85 1c 03 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0117d99:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0117d9f:	89 c1                	mov    %eax,%ecx
f0117da1:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117da8:	10 00 00 
f0117dab:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117db1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117db6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117dbc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117dc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dc7:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117dcd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117dd3:	29 d0                	sub    %edx,%eax
f0117dd5:	89 c3                	mov    %eax,%ebx
f0117dd7:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117dde:	10 00 00 
f0117de1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117de6:	0f b6 d0             	movzbl %al,%edx
f0117de9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117def:	01 d0                	add    %edx,%eax
f0117df1:	48                   	dec    %eax
f0117df2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117df8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117dfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e03:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117e09:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117e0f:	29 d0                	sub    %edx,%eax
f0117e11:	01 c3                	add    %eax,%ebx
f0117e13:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117e1a:	10 00 00 
f0117e1d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117e22:	0f b6 c0             	movzbl %al,%eax
f0117e25:	c1 e0 04             	shl    $0x4,%eax
f0117e28:	89 c2                	mov    %eax,%edx
f0117e2a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117e30:	01 d0                	add    %edx,%eax
f0117e32:	48                   	dec    %eax
f0117e33:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117e39:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117e3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e44:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117e4a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117e50:	29 d0                	sub    %edx,%eax
f0117e52:	01 d8                	add    %ebx,%eax
f0117e54:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0117e59:	39 c1                	cmp    %eax,%ecx
f0117e5b:	0f 85 54 02 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0117e61:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0117e67:	89 c1                	mov    %eax,%ecx
f0117e69:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117e70:	10 00 00 
f0117e73:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117e79:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e7e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117e84:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117e8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e8f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117e95:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117e9b:	29 d0                	sub    %edx,%eax
f0117e9d:	89 c3                	mov    %eax,%ebx
f0117e9f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117ea6:	10 00 00 
f0117ea9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117eae:	0f b6 d0             	movzbl %al,%edx
f0117eb1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117eb7:	01 d0                	add    %edx,%eax
f0117eb9:	48                   	dec    %eax
f0117eba:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117ec0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117ec6:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ecb:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117ed1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117ed7:	29 d0                	sub    %edx,%eax
f0117ed9:	01 c3                	add    %eax,%ebx
f0117edb:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117ee2:	10 00 00 
f0117ee5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117eea:	0f b6 c0             	movzbl %al,%eax
f0117eed:	c1 e0 04             	shl    $0x4,%eax
f0117ef0:	89 c2                	mov    %eax,%edx
f0117ef2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117ef8:	01 d0                	add    %edx,%eax
f0117efa:	48                   	dec    %eax
f0117efb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117f01:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117f07:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f0c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117f12:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117f18:	29 d0                	sub    %edx,%eax
f0117f1a:	01 d8                	add    %ebx,%eax
f0117f1c:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0117f21:	39 c1                	cmp    %eax,%ecx
f0117f23:	0f 85 8c 01 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0117f29:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0117f2f:	89 c1                	mov    %eax,%ecx
f0117f31:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117f38:	10 00 00 
f0117f3b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117f41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f46:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117f4c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117f52:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f57:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117f5d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117f63:	29 d0                	sub    %edx,%eax
f0117f65:	89 c3                	mov    %eax,%ebx
f0117f67:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117f6e:	10 00 00 
f0117f71:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117f76:	0f b6 d0             	movzbl %al,%edx
f0117f79:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117f7f:	01 d0                	add    %edx,%eax
f0117f81:	48                   	dec    %eax
f0117f82:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117f88:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117f8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f93:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117f99:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117f9f:	29 d0                	sub    %edx,%eax
f0117fa1:	01 c3                	add    %eax,%ebx
f0117fa3:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117faa:	10 00 00 
f0117fad:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117fb2:	0f b6 c0             	movzbl %al,%eax
f0117fb5:	c1 e0 04             	shl    $0x4,%eax
f0117fb8:	89 c2                	mov    %eax,%edx
f0117fba:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117fc0:	01 d0                	add    %edx,%eax
f0117fc2:	48                   	dec    %eax
f0117fc3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117fc9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117fcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fd4:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117fda:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117fe0:	29 d0                	sub    %edx,%eax
f0117fe2:	01 d8                	add    %ebx,%eax
f0117fe4:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0117fe9:	39 c1                	cmp    %eax,%ecx
f0117feb:	0f 85 c4 00 00 00    	jne    f01180b5 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0117ff1:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0117ff7:	89 c1                	mov    %eax,%ecx
f0117ff9:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118000:	10 00 00 
f0118003:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118009:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011800e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118014:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011801a:	ba 00 00 00 00       	mov    $0x0,%edx
f011801f:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118025:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011802b:	29 d0                	sub    %edx,%eax
f011802d:	89 c3                	mov    %eax,%ebx
f011802f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118036:	10 00 00 
f0118039:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011803e:	0f b6 d0             	movzbl %al,%edx
f0118041:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118047:	01 d0                	add    %edx,%eax
f0118049:	48                   	dec    %eax
f011804a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118050:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118056:	ba 00 00 00 00       	mov    $0x0,%edx
f011805b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118061:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118067:	29 d0                	sub    %edx,%eax
f0118069:	01 c3                	add    %eax,%ebx
f011806b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118072:	10 00 00 
f0118075:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011807a:	0f b6 c0             	movzbl %al,%eax
f011807d:	c1 e0 04             	shl    $0x4,%eax
f0118080:	89 c2                	mov    %eax,%edx
f0118082:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118088:	01 d0                	add    %edx,%eax
f011808a:	48                   	dec    %eax
f011808b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118091:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118097:	ba 00 00 00 00       	mov    $0x0,%edx
f011809c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01180a2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01180a8:	29 d0                	sub    %edx,%eax
f01180aa:	01 d8                	add    %ebx,%eax
f01180ac:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01180b1:	39 c1                	cmp    %eax,%ecx
f01180b3:	74 17                	je     f01180cc <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01180b5:	83 ec 04             	sub    $0x4,%esp
f01180b8:	68 b4 a4 13 f0       	push   $0xf013a4b4
f01180bd:	68 03 01 00 00       	push   $0x103
f01180c2:	68 3a a2 13 f0       	push   $0xf013a23a
f01180c7:	e8 da 80 fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01180cc:	e8 bb bb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01180d1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01180d4:	74 17                	je     f01180ed <test_kmalloc_nextfit+0x6ec>
f01180d6:	83 ec 04             	sub    $0x4,%esp
f01180d9:	68 54 a2 13 f0       	push   $0xf013a254
f01180de:	68 05 01 00 00       	push   $0x105
f01180e3:	68 3a a2 13 f0       	push   $0xf013a23a
f01180e8:	e8 b9 80 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01180ed:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01180f0:	e8 d5 3c ff ff       	call   f010bdca <sys_calculate_free_frames>
f01180f5:	29 c3                	sub    %eax,%ebx
f01180f7:	89 d9                	mov    %ebx,%ecx
f01180f9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118100:	10 00 00 
f0118103:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118109:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011810e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118114:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011811a:	ba 00 00 00 00       	mov    $0x0,%edx
f011811f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118125:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011812b:	29 d0                	sub    %edx,%eax
f011812d:	89 c3                	mov    %eax,%ebx
f011812f:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118136:	10 00 00 
f0118139:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011813e:	0f b6 d0             	movzbl %al,%edx
f0118141:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118147:	01 d0                	add    %edx,%eax
f0118149:	48                   	dec    %eax
f011814a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118150:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118156:	ba 00 00 00 00       	mov    $0x0,%edx
f011815b:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118161:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118167:	29 d0                	sub    %edx,%eax
f0118169:	01 c3                	add    %eax,%ebx
f011816b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118172:	10 00 00 
f0118175:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011817a:	0f b6 c0             	movzbl %al,%eax
f011817d:	c1 e0 04             	shl    $0x4,%eax
f0118180:	89 c2                	mov    %eax,%edx
f0118182:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118188:	01 d0                	add    %edx,%eax
f011818a:	48                   	dec    %eax
f011818b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118191:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118197:	ba 00 00 00 00       	mov    $0x0,%edx
f011819c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01181a2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01181a8:	29 d0                	sub    %edx,%eax
f01181aa:	01 d8                	add    %ebx,%eax
f01181ac:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01181b1:	29 c2                	sub    %eax,%edx
f01181b3:	89 d0                	mov    %edx,%eax
f01181b5:	c1 e8 0c             	shr    $0xc,%eax
f01181b8:	39 c1                	cmp    %eax,%ecx
f01181ba:	74 17                	je     f01181d3 <test_kmalloc_nextfit+0x7d2>
f01181bc:	83 ec 04             	sub    $0x4,%esp
f01181bf:	68 f7 a4 13 f0       	push   $0xf013a4f7
f01181c4:	68 06 01 00 00       	push   $0x106
f01181c9:	68 3a a2 13 f0       	push   $0xf013a23a
f01181ce:	e8 d3 7f fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01181d3:	e8 b4 ba fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01181d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01181db:	e8 ea 3b ff ff       	call   f010bdca <sys_calculate_free_frames>
f01181e0:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01181e3:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01181e9:	83 ec 0c             	sub    $0xc,%esp
f01181ec:	50                   	push   %eax
f01181ed:	e8 04 f2 fe ff       	call   f01073f6 <kfree>
f01181f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01181f5:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01181fb:	83 ec 0c             	sub    $0xc,%esp
f01181fe:	50                   	push   %eax
f01181ff:	e8 f2 f1 fe ff       	call   f01073f6 <kfree>
f0118204:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0118207:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f011820d:	83 ec 0c             	sub    $0xc,%esp
f0118210:	50                   	push   %eax
f0118211:	e8 e0 f1 fe ff       	call   f01073f6 <kfree>
f0118216:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0118219:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f011821f:	83 ec 0c             	sub    $0xc,%esp
f0118222:	50                   	push   %eax
f0118223:	e8 ce f1 fe ff       	call   f01073f6 <kfree>
f0118228:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011822b:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118231:	83 ec 0c             	sub    $0xc,%esp
f0118234:	50                   	push   %eax
f0118235:	e8 bc f1 fe ff       	call   f01073f6 <kfree>
f011823a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011823d:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118243:	83 ec 0c             	sub    $0xc,%esp
f0118246:	50                   	push   %eax
f0118247:	e8 aa f1 fe ff       	call   f01073f6 <kfree>
f011824c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011824f:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118255:	83 ec 0c             	sub    $0xc,%esp
f0118258:	50                   	push   %eax
f0118259:	e8 98 f1 fe ff       	call   f01073f6 <kfree>
f011825e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118261:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118267:	83 ec 0c             	sub    $0xc,%esp
f011826a:	50                   	push   %eax
f011826b:	e8 86 f1 fe ff       	call   f01073f6 <kfree>
f0118270:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118273:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118279:	83 ec 0c             	sub    $0xc,%esp
f011827c:	50                   	push   %eax
f011827d:	e8 74 f1 fe ff       	call   f01073f6 <kfree>
f0118282:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118285:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011828b:	83 ec 0c             	sub    $0xc,%esp
f011828e:	50                   	push   %eax
f011828f:	e8 62 f1 fe ff       	call   f01073f6 <kfree>
f0118294:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118297:	e8 f0 b9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011829c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011829f:	74 17                	je     f01182b8 <test_kmalloc_nextfit+0x8b7>
f01182a1:	83 ec 04             	sub    $0x4,%esp
f01182a4:	68 54 a2 13 f0       	push   $0xf013a254
f01182a9:	68 17 01 00 00       	push   $0x117
f01182ae:	68 3a a2 13 f0       	push   $0xf013a23a
f01182b3:	e8 ee 7e fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01182b8:	e8 0d 3b ff ff       	call   f010bdca <sys_calculate_free_frames>
f01182bd:	89 c2                	mov    %eax,%edx
f01182bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01182c2:	89 d1                	mov    %edx,%ecx
f01182c4:	29 c1                	sub    %eax,%ecx
f01182c6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01182cd:	10 00 00 
f01182d0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01182d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182db:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01182e1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01182e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01182ec:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01182f2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01182f8:	29 d0                	sub    %edx,%eax
f01182fa:	89 c3                	mov    %eax,%ebx
f01182fc:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118303:	10 00 00 
f0118306:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011830b:	0f b6 d0             	movzbl %al,%edx
f011830e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118314:	01 d0                	add    %edx,%eax
f0118316:	48                   	dec    %eax
f0118317:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011831d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118323:	ba 00 00 00 00       	mov    $0x0,%edx
f0118328:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011832e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118334:	29 d0                	sub    %edx,%eax
f0118336:	01 c3                	add    %eax,%ebx
f0118338:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011833f:	10 00 00 
f0118342:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118347:	0f b6 c0             	movzbl %al,%eax
f011834a:	c1 e0 04             	shl    $0x4,%eax
f011834d:	89 c2                	mov    %eax,%edx
f011834f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118355:	01 d0                	add    %edx,%eax
f0118357:	48                   	dec    %eax
f0118358:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011835e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118364:	ba 00 00 00 00       	mov    $0x0,%edx
f0118369:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011836f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118375:	29 d0                	sub    %edx,%eax
f0118377:	01 d8                	add    %ebx,%eax
f0118379:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f011837e:	29 c2                	sub    %eax,%edx
f0118380:	89 d0                	mov    %edx,%eax
f0118382:	c1 e8 0c             	shr    $0xc,%eax
f0118385:	39 c1                	cmp    %eax,%ecx
f0118387:	74 17                	je     f01183a0 <test_kmalloc_nextfit+0x99f>
f0118389:	83 ec 04             	sub    $0x4,%esp
f011838c:	68 08 a5 13 f0       	push   $0xf013a508
f0118391:	68 18 01 00 00       	push   $0x118
f0118396:	68 3a a2 13 f0       	push   $0xf013a23a
f011839b:	e8 06 7e fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f01183a0:	e8 e7 b8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01183a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01183a8:	e8 1d 3a ff ff       	call   f010bdca <sys_calculate_free_frames>
f01183ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01183b0:	83 ec 0c             	sub    $0xc,%esp
f01183b3:	68 00 fc 0f 00       	push   $0xffc00
f01183b8:	e8 1f f0 fe ff       	call   f01073dc <kmalloc>
f01183bd:	83 c4 10             	add    $0x10,%esp
f01183c0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01183c6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01183cd:	10 00 00 
f01183d0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01183d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183db:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01183e1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01183e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01183ec:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01183f2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01183f8:	29 d0                	sub    %edx,%eax
f01183fa:	89 c1                	mov    %eax,%ecx
f01183fc:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118403:	10 00 00 
f0118406:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011840b:	0f b6 d0             	movzbl %al,%edx
f011840e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118414:	01 d0                	add    %edx,%eax
f0118416:	48                   	dec    %eax
f0118417:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011841d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118423:	ba 00 00 00 00       	mov    $0x0,%edx
f0118428:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011842e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118434:	29 d0                	sub    %edx,%eax
f0118436:	01 c1                	add    %eax,%ecx
f0118438:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011843f:	10 00 00 
f0118442:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118447:	0f b6 c0             	movzbl %al,%eax
f011844a:	c1 e0 04             	shl    $0x4,%eax
f011844d:	89 c2                	mov    %eax,%edx
f011844f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118455:	01 d0                	add    %edx,%eax
f0118457:	48                   	dec    %eax
f0118458:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011845e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118464:	ba 00 00 00 00       	mov    $0x0,%edx
f0118469:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011846f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118475:	29 d0                	sub    %edx,%eax
f0118477:	01 c8                	add    %ecx,%eax
f0118479:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011847f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118485:	39 c2                	cmp    %eax,%edx
f0118487:	74 17                	je     f01184a0 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118489:	83 ec 04             	sub    $0x4,%esp
f011848c:	68 48 a5 13 f0       	push   $0xf013a548
f0118491:	68 1f 01 00 00       	push   $0x11f
f0118496:	68 3a a2 13 f0       	push   $0xf013a23a
f011849b:	e8 06 7d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184a0:	e8 e7 b7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01184a5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01184a8:	74 17                	je     f01184c1 <test_kmalloc_nextfit+0xac0>
f01184aa:	83 ec 04             	sub    $0x4,%esp
f01184ad:	68 54 a2 13 f0       	push   $0xf013a254
f01184b2:	68 20 01 00 00       	push   $0x120
f01184b7:	68 3a a2 13 f0       	push   $0xf013a23a
f01184bc:	e8 e5 7c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01184c1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01184c4:	e8 01 39 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01184c9:	29 c3                	sub    %eax,%ebx
f01184cb:	89 d8                	mov    %ebx,%eax
f01184cd:	3d 00 01 00 00       	cmp    $0x100,%eax
f01184d2:	74 17                	je     f01184eb <test_kmalloc_nextfit+0xaea>
f01184d4:	83 ec 04             	sub    $0x4,%esp
f01184d7:	68 f7 a4 13 f0       	push   $0xf013a4f7
f01184dc:	68 21 01 00 00       	push   $0x121
f01184e1:	68 3a a2 13 f0       	push   $0xf013a23a
f01184e6:	e8 bb 7c fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01184eb:	e8 9c b7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01184f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01184f3:	e8 d2 38 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01184f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01184fb:	83 ec 0c             	sub    $0xc,%esp
f01184fe:	68 00 04 00 00       	push   $0x400
f0118503:	e8 d4 ee fe ff       	call   f01073dc <kmalloc>
f0118508:	83 c4 10             	add    $0x10,%esp
f011850b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118511:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118518:	10 00 00 
f011851b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118521:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118526:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011852c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118532:	ba 00 00 00 00       	mov    $0x0,%edx
f0118537:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011853d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118543:	29 d0                	sub    %edx,%eax
f0118545:	89 c1                	mov    %eax,%ecx
f0118547:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011854e:	10 00 00 
f0118551:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118556:	0f b6 d0             	movzbl %al,%edx
f0118559:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011855f:	01 d0                	add    %edx,%eax
f0118561:	48                   	dec    %eax
f0118562:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118568:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011856e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118573:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118579:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011857f:	29 d0                	sub    %edx,%eax
f0118581:	01 c1                	add    %eax,%ecx
f0118583:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011858a:	10 00 00 
f011858d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118592:	0f b6 c0             	movzbl %al,%eax
f0118595:	c1 e0 04             	shl    $0x4,%eax
f0118598:	89 c2                	mov    %eax,%edx
f011859a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01185a0:	01 d0                	add    %edx,%eax
f01185a2:	48                   	dec    %eax
f01185a3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01185a9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01185af:	ba 00 00 00 00       	mov    $0x0,%edx
f01185b4:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01185ba:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01185c0:	29 d0                	sub    %edx,%eax
f01185c2:	01 c8                	add    %ecx,%eax
f01185c4:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01185ca:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185d0:	39 c2                	cmp    %eax,%edx
f01185d2:	74 17                	je     f01185eb <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01185d4:	83 ec 04             	sub    $0x4,%esp
f01185d7:	68 48 a5 13 f0       	push   $0xf013a548
f01185dc:	68 27 01 00 00       	push   $0x127
f01185e1:	68 3a a2 13 f0       	push   $0xf013a23a
f01185e6:	e8 bb 7b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185eb:	e8 9c b6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01185f0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01185f3:	74 17                	je     f011860c <test_kmalloc_nextfit+0xc0b>
f01185f5:	83 ec 04             	sub    $0x4,%esp
f01185f8:	68 54 a2 13 f0       	push   $0xf013a254
f01185fd:	68 28 01 00 00       	push   $0x128
f0118602:	68 3a a2 13 f0       	push   $0xf013a23a
f0118607:	e8 9a 7b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011860c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011860f:	e8 b6 37 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118614:	29 c3                	sub    %eax,%ebx
f0118616:	89 d8                	mov    %ebx,%eax
f0118618:	83 f8 01             	cmp    $0x1,%eax
f011861b:	74 17                	je     f0118634 <test_kmalloc_nextfit+0xc33>
f011861d:	83 ec 04             	sub    $0x4,%esp
f0118620:	68 f7 a4 13 f0       	push   $0xf013a4f7
f0118625:	68 29 01 00 00       	push   $0x129
f011862a:	68 3a a2 13 f0       	push   $0xf013a23a
f011862f:	e8 72 7b fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118634:	e8 53 b6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118639:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011863c:	e8 89 37 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118641:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0118644:	83 ec 0c             	sub    $0xc,%esp
f0118647:	68 00 00 50 00       	push   $0x500000
f011864c:	e8 8b ed fe ff       	call   f01073dc <kmalloc>
f0118651:	83 c4 10             	add    $0x10,%esp
f0118654:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011865a:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0118661:	10 00 00 
f0118664:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011866a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011866f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118675:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011867b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118680:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118686:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011868c:	29 d0                	sub    %edx,%eax
f011868e:	89 c1                	mov    %eax,%ecx
f0118690:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118697:	10 00 00 
f011869a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011869f:	0f b6 d0             	movzbl %al,%edx
f01186a2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01186a8:	01 d0                	add    %edx,%eax
f01186aa:	48                   	dec    %eax
f01186ab:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01186b1:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01186b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01186bc:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01186c2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01186c8:	29 d0                	sub    %edx,%eax
f01186ca:	01 c1                	add    %eax,%ecx
f01186cc:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01186d3:	10 00 00 
f01186d6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01186db:	0f b6 c0             	movzbl %al,%eax
f01186de:	c1 e0 04             	shl    $0x4,%eax
f01186e1:	89 c2                	mov    %eax,%edx
f01186e3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01186e9:	01 d0                	add    %edx,%eax
f01186eb:	48                   	dec    %eax
f01186ec:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01186f2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01186f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01186fd:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0118703:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118709:	29 d0                	sub    %edx,%eax
f011870b:	01 c8                	add    %ecx,%eax
f011870d:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0118713:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118719:	39 c2                	cmp    %eax,%edx
f011871b:	74 17                	je     f0118734 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f011871d:	83 ec 04             	sub    $0x4,%esp
f0118720:	68 48 a5 13 f0       	push   $0xf013a548
f0118725:	68 2f 01 00 00       	push   $0x12f
f011872a:	68 3a a2 13 f0       	push   $0xf013a23a
f011872f:	e8 72 7a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118734:	e8 53 b5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118739:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011873c:	74 17                	je     f0118755 <test_kmalloc_nextfit+0xd54>
f011873e:	83 ec 04             	sub    $0x4,%esp
f0118741:	68 54 a2 13 f0       	push   $0xf013a254
f0118746:	68 30 01 00 00       	push   $0x130
f011874b:	68 3a a2 13 f0       	push   $0xf013a23a
f0118750:	e8 51 7a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118755:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118758:	e8 6d 36 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011875d:	29 c3                	sub    %eax,%ebx
f011875f:	89 d8                	mov    %ebx,%eax
f0118761:	3d 00 05 00 00       	cmp    $0x500,%eax
f0118766:	74 17                	je     f011877f <test_kmalloc_nextfit+0xd7e>
f0118768:	83 ec 04             	sub    $0x4,%esp
f011876b:	68 f7 a4 13 f0       	push   $0xf013a4f7
f0118770:	68 31 01 00 00       	push   $0x131
f0118775:	68 3a a2 13 f0       	push   $0xf013a23a
f011877a:	e8 27 7a fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011877f:	e8 08 b5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118784:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118787:	e8 3e 36 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011878c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011878f:	83 ec 0c             	sub    $0xc,%esp
f0118792:	68 00 00 10 00       	push   $0x100000
f0118797:	e8 40 ec fe ff       	call   f01073dc <kmalloc>
f011879c:	83 c4 10             	add    $0x10,%esp
f011879f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f01187a5:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f01187ac:	10 00 00 
f01187af:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01187b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187ba:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f01187c0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01187c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01187cb:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f01187d1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01187d7:	29 d0                	sub    %edx,%eax
f01187d9:	89 c1                	mov    %eax,%ecx
f01187db:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01187e2:	10 00 00 
f01187e5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01187ea:	0f b6 d0             	movzbl %al,%edx
f01187ed:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01187f3:	01 d0                	add    %edx,%eax
f01187f5:	48                   	dec    %eax
f01187f6:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01187fc:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118802:	ba 00 00 00 00       	mov    $0x0,%edx
f0118807:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f011880d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118813:	29 d0                	sub    %edx,%eax
f0118815:	01 c1                	add    %eax,%ecx
f0118817:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f011881e:	10 00 00 
f0118821:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118826:	0f b6 c0             	movzbl %al,%eax
f0118829:	c1 e0 04             	shl    $0x4,%eax
f011882c:	89 c2                	mov    %eax,%edx
f011882e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118834:	01 d0                	add    %edx,%eax
f0118836:	48                   	dec    %eax
f0118837:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f011883d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118843:	ba 00 00 00 00       	mov    $0x0,%edx
f0118848:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f011884e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118854:	29 d0                	sub    %edx,%eax
f0118856:	01 c8                	add    %ecx,%eax
f0118858:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011885e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118864:	39 c2                	cmp    %eax,%edx
f0118866:	74 17                	je     f011887f <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0118868:	83 ec 04             	sub    $0x4,%esp
f011886b:	68 48 a5 13 f0       	push   $0xf013a548
f0118870:	68 37 01 00 00       	push   $0x137
f0118875:	68 3a a2 13 f0       	push   $0xf013a23a
f011887a:	e8 27 79 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011887f:	e8 08 b4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118884:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118887:	74 17                	je     f01188a0 <test_kmalloc_nextfit+0xe9f>
f0118889:	83 ec 04             	sub    $0x4,%esp
f011888c:	68 54 a2 13 f0       	push   $0xf013a254
f0118891:	68 38 01 00 00       	push   $0x138
f0118896:	68 3a a2 13 f0       	push   $0xf013a23a
f011889b:	e8 06 79 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01188a0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01188a3:	e8 22 35 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01188a8:	29 c3                	sub    %eax,%ebx
f01188aa:	89 d8                	mov    %ebx,%eax
f01188ac:	3d 00 01 00 00       	cmp    $0x100,%eax
f01188b1:	74 17                	je     f01188ca <test_kmalloc_nextfit+0xec9>
f01188b3:	83 ec 04             	sub    $0x4,%esp
f01188b6:	68 f7 a4 13 f0       	push   $0xf013a4f7
f01188bb:	68 39 01 00 00       	push   $0x139
f01188c0:	68 3a a2 13 f0       	push   $0xf013a23a
f01188c5:	e8 dc 78 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01188ca:	e8 bd b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01188cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01188d2:	e8 f3 34 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01188d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f01188da:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01188e0:	83 ec 0c             	sub    $0xc,%esp
f01188e3:	50                   	push   %eax
f01188e4:	e8 0d eb fe ff       	call   f01073f6 <kfree>
f01188e9:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188ec:	e8 9b b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01188f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01188f4:	74 17                	je     f011890d <test_kmalloc_nextfit+0xf0c>
f01188f6:	83 ec 04             	sub    $0x4,%esp
f01188f9:	68 54 a2 13 f0       	push   $0xf013a254
f01188fe:	68 3e 01 00 00       	push   $0x13e
f0118903:	68 3a a2 13 f0       	push   $0xf013a23a
f0118908:	e8 99 78 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011890d:	e8 b8 34 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118912:	89 c2                	mov    %eax,%edx
f0118914:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118917:	29 c2                	sub    %eax,%edx
f0118919:	89 d0                	mov    %edx,%eax
f011891b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118920:	74 17                	je     f0118939 <test_kmalloc_nextfit+0xf38>
f0118922:	83 ec 04             	sub    $0x4,%esp
f0118925:	68 08 a5 13 f0       	push   $0xf013a508
f011892a:	68 3f 01 00 00       	push   $0x13f
f011892f:	68 3a a2 13 f0       	push   $0xf013a23a
f0118934:	e8 6d 78 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118939:	e8 4e b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011893e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118941:	e8 84 34 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118946:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0118949:	83 ec 0c             	sub    $0xc,%esp
f011894c:	68 00 04 00 00       	push   $0x400
f0118951:	e8 86 ea fe ff       	call   f01073dc <kmalloc>
f0118956:	83 c4 10             	add    $0x10,%esp
f0118959:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011895f:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0118966:	10 00 00 
f0118969:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011896f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118974:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011897a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118980:	ba 00 00 00 00       	mov    $0x0,%edx
f0118985:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011898b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118991:	29 d0                	sub    %edx,%eax
f0118993:	89 c1                	mov    %eax,%ecx
f0118995:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011899c:	10 00 00 
f011899f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01189a4:	0f b6 d0             	movzbl %al,%edx
f01189a7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01189ad:	01 d0                	add    %edx,%eax
f01189af:	48                   	dec    %eax
f01189b0:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f01189b6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01189bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01189c1:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f01189c7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01189cd:	29 d0                	sub    %edx,%eax
f01189cf:	01 c1                	add    %eax,%ecx
f01189d1:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01189d8:	10 00 00 
f01189db:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01189e0:	0f b6 c0             	movzbl %al,%eax
f01189e3:	c1 e0 04             	shl    $0x4,%eax
f01189e6:	89 c2                	mov    %eax,%edx
f01189e8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01189ee:	01 d0                	add    %edx,%eax
f01189f0:	48                   	dec    %eax
f01189f1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01189f7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01189fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a02:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0118a08:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118a0e:	29 d0                	sub    %edx,%eax
f0118a10:	01 c8                	add    %ecx,%eax
f0118a12:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0118a18:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118a1e:	39 c2                	cmp    %eax,%edx
f0118a20:	74 17                	je     f0118a39 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0118a22:	83 ec 04             	sub    $0x4,%esp
f0118a25:	68 48 a5 13 f0       	push   $0xf013a548
f0118a2a:	68 45 01 00 00       	push   $0x145
f0118a2f:	68 3a a2 13 f0       	push   $0xf013a23a
f0118a34:	e8 6d 77 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a39:	e8 4e b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118a3e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118a41:	74 17                	je     f0118a5a <test_kmalloc_nextfit+0x1059>
f0118a43:	83 ec 04             	sub    $0x4,%esp
f0118a46:	68 54 a2 13 f0       	push   $0xf013a254
f0118a4b:	68 46 01 00 00       	push   $0x146
f0118a50:	68 3a a2 13 f0       	push   $0xf013a23a
f0118a55:	e8 4c 77 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118a5a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118a5d:	e8 68 33 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118a62:	29 c3                	sub    %eax,%ebx
f0118a64:	89 d8                	mov    %ebx,%eax
f0118a66:	83 f8 01             	cmp    $0x1,%eax
f0118a69:	74 17                	je     f0118a82 <test_kmalloc_nextfit+0x1081>
f0118a6b:	83 ec 04             	sub    $0x4,%esp
f0118a6e:	68 f7 a4 13 f0       	push   $0xf013a4f7
f0118a73:	68 47 01 00 00       	push   $0x147
f0118a78:	68 3a a2 13 f0       	push   $0xf013a23a
f0118a7d:	e8 24 77 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118a82:	e8 05 b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118a87:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118a8a:	e8 3b 33 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118a8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0118a92:	83 ec 0c             	sub    $0xc,%esp
f0118a95:	68 00 e0 1f 00       	push   $0x1fe000
f0118a9a:	e8 3d e9 fe ff       	call   f01073dc <kmalloc>
f0118a9f:	83 c4 10             	add    $0x10,%esp
f0118aa2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0118aa8:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0118aaf:	10 00 00 
f0118ab2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118ab8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118abd:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0118ac3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118ac9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ace:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0118ad4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118ada:	29 d0                	sub    %edx,%eax
f0118adc:	89 c1                	mov    %eax,%ecx
f0118ade:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0118ae5:	10 00 00 
f0118ae8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118aed:	0f b6 d0             	movzbl %al,%edx
f0118af0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118af6:	01 d0                	add    %edx,%eax
f0118af8:	48                   	dec    %eax
f0118af9:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0118aff:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118b05:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b0a:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0118b10:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118b16:	29 d0                	sub    %edx,%eax
f0118b18:	01 c1                	add    %eax,%ecx
f0118b1a:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0118b21:	10 00 00 
f0118b24:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118b29:	0f b6 c0             	movzbl %al,%eax
f0118b2c:	c1 e0 04             	shl    $0x4,%eax
f0118b2f:	89 c2                	mov    %eax,%edx
f0118b31:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118b37:	01 d0                	add    %edx,%eax
f0118b39:	48                   	dec    %eax
f0118b3a:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0118b40:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118b46:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b4b:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0118b51:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118b57:	29 d0                	sub    %edx,%eax
f0118b59:	01 c8                	add    %ecx,%eax
f0118b5b:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0118b61:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b67:	39 c2                	cmp    %eax,%edx
f0118b69:	74 17                	je     f0118b82 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0118b6b:	83 ec 04             	sub    $0x4,%esp
f0118b6e:	68 48 a5 13 f0       	push   $0xf013a548
f0118b73:	68 4d 01 00 00       	push   $0x14d
f0118b78:	68 3a a2 13 f0       	push   $0xf013a23a
f0118b7d:	e8 24 76 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b82:	e8 05 b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118b87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118b8a:	74 17                	je     f0118ba3 <test_kmalloc_nextfit+0x11a2>
f0118b8c:	83 ec 04             	sub    $0x4,%esp
f0118b8f:	68 54 a2 13 f0       	push   $0xf013a254
f0118b94:	68 4e 01 00 00       	push   $0x14e
f0118b99:	68 3a a2 13 f0       	push   $0xf013a23a
f0118b9e:	e8 03 76 fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118ba3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118ba6:	e8 1f 32 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118bab:	29 c3                	sub    %eax,%ebx
f0118bad:	89 d8                	mov    %ebx,%eax
f0118baf:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0118bb4:	74 17                	je     f0118bcd <test_kmalloc_nextfit+0x11cc>
f0118bb6:	83 ec 04             	sub    $0x4,%esp
f0118bb9:	68 f7 a4 13 f0       	push   $0xf013a4f7
f0118bbe:	68 50 01 00 00       	push   $0x150
f0118bc3:	68 3a a2 13 f0       	push   $0xf013a23a
f0118bc8:	e8 d9 75 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118bcd:	e8 ba b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118bd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118bd5:	e8 f0 31 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118bda:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0118bdd:	83 ec 0c             	sub    $0xc,%esp
f0118be0:	68 00 00 08 00       	push   $0x80000
f0118be5:	e8 f2 e7 fe ff       	call   f01073dc <kmalloc>
f0118bea:	83 c4 10             	add    $0x10,%esp
f0118bed:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0118bf3:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0118bfa:	10 00 00 
f0118bfd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118c03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c08:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0118c0e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118c14:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c19:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0118c1f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118c25:	29 d0                	sub    %edx,%eax
f0118c27:	89 c1                	mov    %eax,%ecx
f0118c29:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0118c30:	10 00 00 
f0118c33:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118c38:	0f b6 d0             	movzbl %al,%edx
f0118c3b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118c41:	01 d0                	add    %edx,%eax
f0118c43:	48                   	dec    %eax
f0118c44:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0118c4a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118c50:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c55:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0118c5b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118c61:	29 d0                	sub    %edx,%eax
f0118c63:	01 c1                	add    %eax,%ecx
f0118c65:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0118c6c:	10 00 00 
f0118c6f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118c74:	0f b6 c0             	movzbl %al,%eax
f0118c77:	c1 e0 04             	shl    $0x4,%eax
f0118c7a:	89 c2                	mov    %eax,%edx
f0118c7c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118c82:	01 d0                	add    %edx,%eax
f0118c84:	48                   	dec    %eax
f0118c85:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0118c8b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0118c91:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c96:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0118c9c:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0118ca2:	29 d0                	sub    %edx,%eax
f0118ca4:	01 c8                	add    %ecx,%eax
f0118ca6:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0118cac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cb2:	39 c2                	cmp    %eax,%edx
f0118cb4:	74 17                	je     f0118ccd <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0118cb6:	83 ec 04             	sub    $0x4,%esp
f0118cb9:	68 48 a5 13 f0       	push   $0xf013a548
f0118cbe:	68 56 01 00 00       	push   $0x156
f0118cc3:	68 3a a2 13 f0       	push   $0xf013a23a
f0118cc8:	e8 d9 74 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ccd:	e8 ba af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118cd2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118cd5:	74 17                	je     f0118cee <test_kmalloc_nextfit+0x12ed>
f0118cd7:	83 ec 04             	sub    $0x4,%esp
f0118cda:	68 54 a2 13 f0       	push   $0xf013a254
f0118cdf:	68 57 01 00 00       	push   $0x157
f0118ce4:	68 3a a2 13 f0       	push   $0xf013a23a
f0118ce9:	e8 b8 74 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118cee:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118cf1:	e8 d4 30 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118cf6:	29 c3                	sub    %eax,%ebx
f0118cf8:	89 d8                	mov    %ebx,%eax
f0118cfa:	3d 80 00 00 00       	cmp    $0x80,%eax
f0118cff:	74 17                	je     f0118d18 <test_kmalloc_nextfit+0x1317>
f0118d01:	83 ec 04             	sub    $0x4,%esp
f0118d04:	68 f7 a4 13 f0       	push   $0xf013a4f7
f0118d09:	68 58 01 00 00       	push   $0x158
f0118d0e:	68 3a a2 13 f0       	push   $0xf013a23a
f0118d13:	e8 8e 74 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0118d18:	83 ec 0c             	sub    $0xc,%esp
f0118d1b:	68 68 a5 13 f0       	push   $0xf013a568
f0118d20:	e8 08 7f fe ff       	call   f0100c2d <cprintf>
f0118d25:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0118d28:	e8 5f af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118d2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118d30:	e8 95 30 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118d35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0118d38:	83 ec 0c             	sub    $0xc,%esp
f0118d3b:	68 00 00 38 00       	push   $0x380000
f0118d40:	e8 97 e6 fe ff       	call   f01073dc <kmalloc>
f0118d45:	83 c4 10             	add    $0x10,%esp
f0118d48:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0118d4e:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0118d55:	10 00 00 
f0118d58:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0118d5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d63:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0118d69:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0118d6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d74:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0118d7a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0118d80:	29 d0                	sub    %edx,%eax
f0118d82:	89 c1                	mov    %eax,%ecx
f0118d84:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0118d8b:	10 00 00 
f0118d8e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118d93:	0f b6 d0             	movzbl %al,%edx
f0118d96:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0118d9c:	01 d0                	add    %edx,%eax
f0118d9e:	48                   	dec    %eax
f0118d9f:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0118da5:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0118dab:	ba 00 00 00 00       	mov    $0x0,%edx
f0118db0:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0118db6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0118dbc:	29 d0                	sub    %edx,%eax
f0118dbe:	01 c1                	add    %eax,%ecx
f0118dc0:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0118dc7:	10 00 00 
f0118dca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118dcf:	0f b6 c0             	movzbl %al,%eax
f0118dd2:	c1 e0 04             	shl    $0x4,%eax
f0118dd5:	89 c2                	mov    %eax,%edx
f0118dd7:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0118ddd:	01 d0                	add    %edx,%eax
f0118ddf:	48                   	dec    %eax
f0118de0:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0118de6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0118dec:	ba 00 00 00 00       	mov    $0x0,%edx
f0118df1:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0118df7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0118dfd:	29 d0                	sub    %edx,%eax
f0118dff:	01 c8                	add    %ecx,%eax
f0118e01:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0118e07:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118e0d:	39 c2                	cmp    %eax,%edx
f0118e0f:	74 17                	je     f0118e28 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0118e11:	83 ec 04             	sub    $0x4,%esp
f0118e14:	68 48 a5 13 f0       	push   $0xf013a548
f0118e19:	68 62 01 00 00       	push   $0x162
f0118e1e:	68 3a a2 13 f0       	push   $0xf013a23a
f0118e23:	e8 7e 73 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e28:	e8 5f ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118e30:	74 17                	je     f0118e49 <test_kmalloc_nextfit+0x1448>
f0118e32:	83 ec 04             	sub    $0x4,%esp
f0118e35:	68 54 a2 13 f0       	push   $0xf013a254
f0118e3a:	68 63 01 00 00       	push   $0x163
f0118e3f:	68 3a a2 13 f0       	push   $0xf013a23a
f0118e44:	e8 5d 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118e49:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118e4c:	e8 79 2f ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118e51:	29 c3                	sub    %eax,%ebx
f0118e53:	89 d8                	mov    %ebx,%eax
f0118e55:	3d 80 03 00 00       	cmp    $0x380,%eax
f0118e5a:	74 17                	je     f0118e73 <test_kmalloc_nextfit+0x1472>
f0118e5c:	83 ec 04             	sub    $0x4,%esp
f0118e5f:	68 f7 a4 13 f0       	push   $0xf013a4f7
f0118e64:	68 64 01 00 00       	push   $0x164
f0118e69:	68 3a a2 13 f0       	push   $0xf013a23a
f0118e6e:	e8 33 73 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e73:	e8 14 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e78:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e7b:	e8 4a 2f ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118e80:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0118e83:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0118e89:	83 ec 0c             	sub    $0xc,%esp
f0118e8c:	50                   	push   %eax
f0118e8d:	e8 64 e5 fe ff       	call   f01073f6 <kfree>
f0118e92:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e95:	e8 f2 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e9a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118e9d:	74 17                	je     f0118eb6 <test_kmalloc_nextfit+0x14b5>
f0118e9f:	83 ec 04             	sub    $0x4,%esp
f0118ea2:	68 54 a2 13 f0       	push   $0xf013a254
f0118ea7:	68 69 01 00 00       	push   $0x169
f0118eac:	68 3a a2 13 f0       	push   $0xf013a23a
f0118eb1:	e8 f0 72 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118eb6:	e8 0f 2f ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118ebb:	89 c2                	mov    %eax,%edx
f0118ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118ec0:	29 c2                	sub    %eax,%edx
f0118ec2:	89 d0                	mov    %edx,%eax
f0118ec4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118ec9:	74 17                	je     f0118ee2 <test_kmalloc_nextfit+0x14e1>
f0118ecb:	83 ec 04             	sub    $0x4,%esp
f0118ece:	68 08 a5 13 f0       	push   $0xf013a508
f0118ed3:	68 6a 01 00 00       	push   $0x16a
f0118ed8:	68 3a a2 13 f0       	push   $0xf013a23a
f0118edd:	e8 c4 72 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118ee2:	e8 a5 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118ee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118eea:	e8 db 2e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0118eef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0118ef2:	83 ec 0c             	sub    $0xc,%esp
f0118ef5:	68 00 fc 3f 00       	push   $0x3ffc00
f0118efa:	e8 dd e4 fe ff       	call   f01073dc <kmalloc>
f0118eff:	83 c4 10             	add    $0x10,%esp
f0118f02:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0118f08:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0118f0f:	10 00 00 
f0118f12:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0118f18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f1d:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0118f23:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0118f29:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f2e:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0118f34:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0118f3a:	29 d0                	sub    %edx,%eax
f0118f3c:	89 c1                	mov    %eax,%ecx
f0118f3e:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0118f45:	10 00 00 
f0118f48:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118f4d:	0f b6 d0             	movzbl %al,%edx
f0118f50:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0118f56:	01 d0                	add    %edx,%eax
f0118f58:	48                   	dec    %eax
f0118f59:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0118f5f:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0118f65:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f6a:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0118f70:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0118f76:	29 d0                	sub    %edx,%eax
f0118f78:	01 c1                	add    %eax,%ecx
f0118f7a:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0118f81:	10 00 00 
f0118f84:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118f89:	0f b6 c0             	movzbl %al,%eax
f0118f8c:	c1 e0 04             	shl    $0x4,%eax
f0118f8f:	89 c2                	mov    %eax,%edx
f0118f91:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0118f97:	01 d0                	add    %edx,%eax
f0118f99:	48                   	dec    %eax
f0118f9a:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0118fa0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0118fa6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fab:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0118fb1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0118fb7:	29 d0                	sub    %edx,%eax
f0118fb9:	01 c8                	add    %ecx,%eax
f0118fbb:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0118fc1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118fc7:	39 c2                	cmp    %eax,%edx
f0118fc9:	74 17                	je     f0118fe2 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0118fcb:	83 ec 04             	sub    $0x4,%esp
f0118fce:	68 48 a5 13 f0       	push   $0xf013a548
f0118fd3:	68 70 01 00 00       	push   $0x170
f0118fd8:	68 3a a2 13 f0       	push   $0xf013a23a
f0118fdd:	e8 c4 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118fe2:	e8 a5 ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118fe7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118fea:	74 17                	je     f0119003 <test_kmalloc_nextfit+0x1602>
f0118fec:	83 ec 04             	sub    $0x4,%esp
f0118fef:	68 54 a2 13 f0       	push   $0xf013a254
f0118ff4:	68 71 01 00 00       	push   $0x171
f0118ff9:	68 3a a2 13 f0       	push   $0xf013a23a
f0118ffe:	e8 a3 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119003:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119006:	e8 bf 2d ff ff       	call   f010bdca <sys_calculate_free_frames>
f011900b:	29 c3                	sub    %eax,%ebx
f011900d:	89 d8                	mov    %ebx,%eax
f011900f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119014:	74 17                	je     f011902d <test_kmalloc_nextfit+0x162c>
f0119016:	83 ec 04             	sub    $0x4,%esp
f0119019:	68 f7 a4 13 f0       	push   $0xf013a4f7
f011901e:	68 72 01 00 00       	push   $0x172
f0119023:	68 3a a2 13 f0       	push   $0xf013a23a
f0119028:	e8 79 71 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011902d:	83 ec 0c             	sub    $0xc,%esp
f0119030:	68 a4 a5 13 f0       	push   $0xf013a5a4
f0119035:	e8 f3 7b fe ff       	call   f0100c2d <cprintf>
f011903a:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011903d:	e8 4a ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119042:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119045:	e8 80 2d ff ff       	call   f010bdca <sys_calculate_free_frames>
f011904a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011904d:	83 ec 0c             	sub    $0xc,%esp
f0119050:	68 00 00 60 00       	push   $0x600000
f0119055:	e8 82 e3 fe ff       	call   f01073dc <kmalloc>
f011905a:	83 c4 10             	add    $0x10,%esp
f011905d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119063:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119069:	85 c0                	test   %eax,%eax
f011906b:	74 17                	je     f0119084 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011906d:	83 ec 04             	sub    $0x4,%esp
f0119070:	68 48 a5 13 f0       	push   $0xf013a548
f0119075:	68 7c 01 00 00       	push   $0x17c
f011907a:	68 3a a2 13 f0       	push   $0xf013a23a
f011907f:	e8 22 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119084:	e8 03 ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119089:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011908c:	74 17                	je     f01190a5 <test_kmalloc_nextfit+0x16a4>
f011908e:	83 ec 04             	sub    $0x4,%esp
f0119091:	68 54 a2 13 f0       	push   $0xf013a254
f0119096:	68 7d 01 00 00       	push   $0x17d
f011909b:	68 3a a2 13 f0       	push   $0xf013a23a
f01190a0:	e8 01 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f01190a5:	e8 20 2d ff ff       	call   f010bdca <sys_calculate_free_frames>
f01190aa:	89 c2                	mov    %eax,%edx
f01190ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01190af:	39 c2                	cmp    %eax,%edx
f01190b1:	74 17                	je     f01190ca <test_kmalloc_nextfit+0x16c9>
f01190b3:	83 ec 04             	sub    $0x4,%esp
f01190b6:	68 f7 a4 13 f0       	push   $0xf013a4f7
f01190bb:	68 7e 01 00 00       	push   $0x17e
f01190c0:	68 3a a2 13 f0       	push   $0xf013a23a
f01190c5:	e8 dc 70 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f01190ca:	83 ec 0c             	sub    $0xc,%esp
f01190cd:	68 dc a5 13 f0       	push   $0xf013a5dc
f01190d2:	e8 56 7b fe ff       	call   f0100c2d <cprintf>
f01190d7:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f01190da:	83 ec 0c             	sub    $0xc,%esp
f01190dd:	68 18 a6 13 f0       	push   $0xf013a618
f01190e2:	e8 46 7b fe ff       	call   f0100c2d <cprintf>
f01190e7:	83 c4 10             	add    $0x10,%esp
	return 1;
f01190ea:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01190ef:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01190f2:	5b                   	pop    %ebx
f01190f3:	5f                   	pop    %edi
f01190f4:	5d                   	pop    %ebp
f01190f5:	c3                   	ret    

f01190f6 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f01190f6:	55                   	push   %ebp
f01190f7:	89 e5                	mov    %esp,%ebp
f01190f9:	57                   	push   %edi
f01190fa:	53                   	push   %ebx
f01190fb:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119101:	83 ec 0c             	sub    $0xc,%esp
f0119104:	68 7c a1 13 f0       	push   $0xf013a17c
f0119109:	e8 1f 7b fe ff       	call   f0100c2d <cprintf>
f011910e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119111:	83 ec 0c             	sub    $0xc,%esp
f0119114:	68 ac a1 13 f0       	push   $0xf013a1ac
f0119119:	e8 0f 7b fe ff       	call   f0100c2d <cprintf>
f011911e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119121:	83 ec 0c             	sub    $0xc,%esp
f0119124:	68 7c a1 13 f0       	push   $0xf013a17c
f0119129:	e8 ff 7a fe ff       	call   f0100c2d <cprintf>
f011912e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119131:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119137:	b9 14 00 00 00       	mov    $0x14,%ecx
f011913c:	b8 00 00 00 00       	mov    $0x0,%eax
f0119141:	89 d7                	mov    %edx,%edi
f0119143:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119145:	e8 80 2c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011914a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011914d:	e8 3a ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119152:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119155:	83 ec 0c             	sub    $0xc,%esp
f0119158:	68 00 fc 2f 00       	push   $0x2ffc00
f011915d:	e8 7a e2 fe ff       	call   f01073dc <kmalloc>
f0119162:	83 c4 10             	add    $0x10,%esp
f0119165:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011916b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119171:	89 c1                	mov    %eax,%ecx
f0119173:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011917a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011917d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119182:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119185:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119188:	ba 00 00 00 00       	mov    $0x0,%edx
f011918d:	f7 75 ec             	divl   -0x14(%ebp)
f0119190:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119193:	29 d0                	sub    %edx,%eax
f0119195:	89 c3                	mov    %eax,%ebx
f0119197:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011919e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01191a3:	0f b6 d0             	movzbl %al,%edx
f01191a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01191a9:	01 d0                	add    %edx,%eax
f01191ab:	48                   	dec    %eax
f01191ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01191af:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01191b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01191b7:	f7 75 e4             	divl   -0x1c(%ebp)
f01191ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01191bd:	29 d0                	sub    %edx,%eax
f01191bf:	01 c3                	add    %eax,%ebx
f01191c1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01191c8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01191cd:	0f b6 c0             	movzbl %al,%eax
f01191d0:	c1 e0 04             	shl    $0x4,%eax
f01191d3:	89 c2                	mov    %eax,%edx
f01191d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01191d8:	01 d0                	add    %edx,%eax
f01191da:	48                   	dec    %eax
f01191db:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01191de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01191e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01191e6:	f7 75 dc             	divl   -0x24(%ebp)
f01191e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01191ec:	29 d0                	sub    %edx,%eax
f01191ee:	01 d8                	add    %ebx,%eax
f01191f0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01191f5:	39 c1                	cmp    %eax,%ecx
f01191f7:	74 17                	je     f0119210 <test_kmalloc_bestfit1+0x11a>
f01191f9:	83 ec 04             	sub    $0x4,%esp
f01191fc:	68 54 a6 13 f0       	push   $0xf013a654
f0119201:	68 98 01 00 00       	push   $0x198
f0119206:	68 3a a2 13 f0       	push   $0xf013a23a
f011920b:	e8 96 6f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119210:	e8 77 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119215:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119218:	74 17                	je     f0119231 <test_kmalloc_bestfit1+0x13b>
f011921a:	83 ec 04             	sub    $0x4,%esp
f011921d:	68 54 a2 13 f0       	push   $0xf013a254
f0119222:	68 99 01 00 00       	push   $0x199
f0119227:	68 3a a2 13 f0       	push   $0xf013a23a
f011922c:	e8 75 6f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119231:	e8 94 2b ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119236:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119239:	29 c2                	sub    %eax,%edx
f011923b:	89 d0                	mov    %edx,%eax
f011923d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119242:	74 17                	je     f011925b <test_kmalloc_bestfit1+0x165>
f0119244:	83 ec 04             	sub    $0x4,%esp
f0119247:	68 84 a6 13 f0       	push   $0xf013a684
f011924c:	68 9a 01 00 00       	push   $0x19a
f0119251:	68 3a a2 13 f0       	push   $0xf013a23a
f0119256:	e8 4b 6f fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011925b:	e8 6a 2b ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119260:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119263:	e8 24 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119268:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011926b:	83 ec 0c             	sub    $0xc,%esp
f011926e:	68 00 fc 2f 00       	push   $0x2ffc00
f0119273:	e8 64 e1 fe ff       	call   f01073dc <kmalloc>
f0119278:	83 c4 10             	add    $0x10,%esp
f011927b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119281:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119287:	89 c1                	mov    %eax,%ecx
f0119289:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119290:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119293:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119298:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011929b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011929e:	ba 00 00 00 00       	mov    $0x0,%edx
f01192a3:	f7 75 d4             	divl   -0x2c(%ebp)
f01192a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01192a9:	29 d0                	sub    %edx,%eax
f01192ab:	89 c3                	mov    %eax,%ebx
f01192ad:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01192b4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01192b9:	0f b6 d0             	movzbl %al,%edx
f01192bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01192bf:	01 d0                	add    %edx,%eax
f01192c1:	48                   	dec    %eax
f01192c2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01192c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01192c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01192cd:	f7 75 cc             	divl   -0x34(%ebp)
f01192d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01192d3:	29 d0                	sub    %edx,%eax
f01192d5:	01 c3                	add    %eax,%ebx
f01192d7:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01192de:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01192e3:	0f b6 c0             	movzbl %al,%eax
f01192e6:	c1 e0 04             	shl    $0x4,%eax
f01192e9:	89 c2                	mov    %eax,%edx
f01192eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192ee:	01 d0                	add    %edx,%eax
f01192f0:	48                   	dec    %eax
f01192f1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01192f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01192f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01192fc:	f7 75 c4             	divl   -0x3c(%ebp)
f01192ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119302:	29 d0                	sub    %edx,%eax
f0119304:	01 d8                	add    %ebx,%eax
f0119306:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011930b:	39 c1                	cmp    %eax,%ecx
f011930d:	74 17                	je     f0119326 <test_kmalloc_bestfit1+0x230>
f011930f:	83 ec 04             	sub    $0x4,%esp
f0119312:	68 54 a6 13 f0       	push   $0xf013a654
f0119317:	68 a0 01 00 00       	push   $0x1a0
f011931c:	68 3a a2 13 f0       	push   $0xf013a23a
f0119321:	e8 80 6e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119326:	e8 61 a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011932b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011932e:	74 17                	je     f0119347 <test_kmalloc_bestfit1+0x251>
f0119330:	83 ec 04             	sub    $0x4,%esp
f0119333:	68 54 a2 13 f0       	push   $0xf013a254
f0119338:	68 a1 01 00 00       	push   $0x1a1
f011933d:	68 3a a2 13 f0       	push   $0xf013a23a
f0119342:	e8 5f 6e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119347:	e8 7e 2a ff ff       	call   f010bdca <sys_calculate_free_frames>
f011934c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011934f:	29 c2                	sub    %eax,%edx
f0119351:	89 d0                	mov    %edx,%eax
f0119353:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119358:	74 17                	je     f0119371 <test_kmalloc_bestfit1+0x27b>
f011935a:	83 ec 04             	sub    $0x4,%esp
f011935d:	68 84 a6 13 f0       	push   $0xf013a684
f0119362:	68 a2 01 00 00       	push   $0x1a2
f0119367:	68 3a a2 13 f0       	push   $0xf013a23a
f011936c:	e8 35 6e fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119371:	e8 54 2a ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119376:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119379:	e8 0e a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011937e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119381:	83 ec 0c             	sub    $0xc,%esp
f0119384:	68 00 fc 1f 00       	push   $0x1ffc00
f0119389:	e8 4e e0 fe ff       	call   f01073dc <kmalloc>
f011938e:	83 c4 10             	add    $0x10,%esp
f0119391:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119397:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011939d:	89 c1                	mov    %eax,%ecx
f011939f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01193a6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01193a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01193b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01193b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01193b9:	f7 75 bc             	divl   -0x44(%ebp)
f01193bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01193bf:	29 d0                	sub    %edx,%eax
f01193c1:	89 c3                	mov    %eax,%ebx
f01193c3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01193ca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01193cf:	0f b6 d0             	movzbl %al,%edx
f01193d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01193d5:	01 d0                	add    %edx,%eax
f01193d7:	48                   	dec    %eax
f01193d8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01193db:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01193de:	ba 00 00 00 00       	mov    $0x0,%edx
f01193e3:	f7 75 b4             	divl   -0x4c(%ebp)
f01193e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01193e9:	29 d0                	sub    %edx,%eax
f01193eb:	01 c3                	add    %eax,%ebx
f01193ed:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01193f4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01193f9:	0f b6 c0             	movzbl %al,%eax
f01193fc:	c1 e0 04             	shl    $0x4,%eax
f01193ff:	89 c2                	mov    %eax,%edx
f0119401:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119404:	01 d0                	add    %edx,%eax
f0119406:	48                   	dec    %eax
f0119407:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011940a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011940d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119412:	f7 75 ac             	divl   -0x54(%ebp)
f0119415:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119418:	29 d0                	sub    %edx,%eax
f011941a:	01 d8                	add    %ebx,%eax
f011941c:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119421:	39 c1                	cmp    %eax,%ecx
f0119423:	74 17                	je     f011943c <test_kmalloc_bestfit1+0x346>
f0119425:	83 ec 04             	sub    $0x4,%esp
f0119428:	68 54 a6 13 f0       	push   $0xf013a654
f011942d:	68 a8 01 00 00       	push   $0x1a8
f0119432:	68 3a a2 13 f0       	push   $0xf013a23a
f0119437:	e8 6a 6d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011943c:	e8 4b a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119441:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119444:	74 17                	je     f011945d <test_kmalloc_bestfit1+0x367>
f0119446:	83 ec 04             	sub    $0x4,%esp
f0119449:	68 54 a2 13 f0       	push   $0xf013a254
f011944e:	68 a9 01 00 00       	push   $0x1a9
f0119453:	68 3a a2 13 f0       	push   $0xf013a23a
f0119458:	e8 49 6d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011945d:	e8 68 29 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119462:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119465:	29 c2                	sub    %eax,%edx
f0119467:	89 d0                	mov    %edx,%eax
f0119469:	3d 00 02 00 00       	cmp    $0x200,%eax
f011946e:	74 17                	je     f0119487 <test_kmalloc_bestfit1+0x391>
f0119470:	83 ec 04             	sub    $0x4,%esp
f0119473:	68 84 a6 13 f0       	push   $0xf013a684
f0119478:	68 aa 01 00 00       	push   $0x1aa
f011947d:	68 3a a2 13 f0       	push   $0xf013a23a
f0119482:	e8 1f 6d fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119487:	e8 3e 29 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011948c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011948f:	e8 f8 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119494:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119497:	83 ec 0c             	sub    $0xc,%esp
f011949a:	68 00 fc 1f 00       	push   $0x1ffc00
f011949f:	e8 38 df fe ff       	call   f01073dc <kmalloc>
f01194a4:	83 c4 10             	add    $0x10,%esp
f01194a7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f01194ad:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01194b3:	89 c1                	mov    %eax,%ecx
f01194b5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01194bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01194bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194c4:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01194c7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01194ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01194cf:	f7 75 a4             	divl   -0x5c(%ebp)
f01194d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01194d5:	29 d0                	sub    %edx,%eax
f01194d7:	89 c3                	mov    %eax,%ebx
f01194d9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01194e0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01194e5:	0f b6 d0             	movzbl %al,%edx
f01194e8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01194eb:	01 d0                	add    %edx,%eax
f01194ed:	48                   	dec    %eax
f01194ee:	89 45 98             	mov    %eax,-0x68(%ebp)
f01194f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01194f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01194f9:	f7 75 9c             	divl   -0x64(%ebp)
f01194fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01194ff:	29 d0                	sub    %edx,%eax
f0119501:	01 c3                	add    %eax,%ebx
f0119503:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011950a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011950f:	0f b6 c0             	movzbl %al,%eax
f0119512:	c1 e0 04             	shl    $0x4,%eax
f0119515:	89 c2                	mov    %eax,%edx
f0119517:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011951a:	01 d0                	add    %edx,%eax
f011951c:	48                   	dec    %eax
f011951d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119520:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119523:	ba 00 00 00 00       	mov    $0x0,%edx
f0119528:	f7 75 94             	divl   -0x6c(%ebp)
f011952b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011952e:	29 d0                	sub    %edx,%eax
f0119530:	01 d8                	add    %ebx,%eax
f0119532:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119537:	39 c1                	cmp    %eax,%ecx
f0119539:	74 17                	je     f0119552 <test_kmalloc_bestfit1+0x45c>
f011953b:	83 ec 04             	sub    $0x4,%esp
f011953e:	68 54 a6 13 f0       	push   $0xf013a654
f0119543:	68 b0 01 00 00       	push   $0x1b0
f0119548:	68 3a a2 13 f0       	push   $0xf013a23a
f011954d:	e8 54 6c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119552:	e8 35 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119557:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011955a:	74 17                	je     f0119573 <test_kmalloc_bestfit1+0x47d>
f011955c:	83 ec 04             	sub    $0x4,%esp
f011955f:	68 54 a2 13 f0       	push   $0xf013a254
f0119564:	68 b1 01 00 00       	push   $0x1b1
f0119569:	68 3a a2 13 f0       	push   $0xf013a23a
f011956e:	e8 33 6c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119573:	e8 52 28 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119578:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011957b:	29 c2                	sub    %eax,%edx
f011957d:	89 d0                	mov    %edx,%eax
f011957f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119584:	74 17                	je     f011959d <test_kmalloc_bestfit1+0x4a7>
f0119586:	83 ec 04             	sub    $0x4,%esp
f0119589:	68 84 a6 13 f0       	push   $0xf013a684
f011958e:	68 b2 01 00 00       	push   $0x1b2
f0119593:	68 3a a2 13 f0       	push   $0xf013a23a
f0119598:	e8 09 6c fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011959d:	e8 28 28 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01195a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01195a5:	e8 e2 a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01195aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f01195ad:	83 ec 0c             	sub    $0xc,%esp
f01195b0:	68 00 fc 0f 00       	push   $0xffc00
f01195b5:	e8 22 de fe ff       	call   f01073dc <kmalloc>
f01195ba:	83 c4 10             	add    $0x10,%esp
f01195bd:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f01195c3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01195c9:	89 c1                	mov    %eax,%ecx
f01195cb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01195d2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01195d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195da:	89 45 88             	mov    %eax,-0x78(%ebp)
f01195dd:	8b 45 88             	mov    -0x78(%ebp),%eax
f01195e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01195e5:	f7 75 8c             	divl   -0x74(%ebp)
f01195e8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01195eb:	29 d0                	sub    %edx,%eax
f01195ed:	89 c3                	mov    %eax,%ebx
f01195ef:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01195f6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01195fb:	0f b6 d0             	movzbl %al,%edx
f01195fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119601:	01 d0                	add    %edx,%eax
f0119603:	48                   	dec    %eax
f0119604:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119607:	8b 45 80             	mov    -0x80(%ebp),%eax
f011960a:	ba 00 00 00 00       	mov    $0x0,%edx
f011960f:	f7 75 84             	divl   -0x7c(%ebp)
f0119612:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119615:	29 d0                	sub    %edx,%eax
f0119617:	01 c3                	add    %eax,%ebx
f0119619:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119620:	10 00 00 
f0119623:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119628:	0f b6 c0             	movzbl %al,%eax
f011962b:	c1 e0 04             	shl    $0x4,%eax
f011962e:	89 c2                	mov    %eax,%edx
f0119630:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119636:	01 d0                	add    %edx,%eax
f0119638:	48                   	dec    %eax
f0119639:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011963f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119645:	ba 00 00 00 00       	mov    $0x0,%edx
f011964a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119650:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119656:	29 d0                	sub    %edx,%eax
f0119658:	01 d8                	add    %ebx,%eax
f011965a:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011965f:	39 c1                	cmp    %eax,%ecx
f0119661:	74 17                	je     f011967a <test_kmalloc_bestfit1+0x584>
f0119663:	83 ec 04             	sub    $0x4,%esp
f0119666:	68 54 a6 13 f0       	push   $0xf013a654
f011966b:	68 b8 01 00 00       	push   $0x1b8
f0119670:	68 3a a2 13 f0       	push   $0xf013a23a
f0119675:	e8 2c 6b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011967a:	e8 0d a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011967f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119682:	74 17                	je     f011969b <test_kmalloc_bestfit1+0x5a5>
f0119684:	83 ec 04             	sub    $0x4,%esp
f0119687:	68 54 a2 13 f0       	push   $0xf013a254
f011968c:	68 b9 01 00 00       	push   $0x1b9
f0119691:	68 3a a2 13 f0       	push   $0xf013a23a
f0119696:	e8 0b 6b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011969b:	e8 2a 27 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01196a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01196a3:	29 c2                	sub    %eax,%edx
f01196a5:	89 d0                	mov    %edx,%eax
f01196a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f01196ac:	74 17                	je     f01196c5 <test_kmalloc_bestfit1+0x5cf>
f01196ae:	83 ec 04             	sub    $0x4,%esp
f01196b1:	68 84 a6 13 f0       	push   $0xf013a684
f01196b6:	68 ba 01 00 00       	push   $0x1ba
f01196bb:	68 3a a2 13 f0       	push   $0xf013a23a
f01196c0:	e8 e1 6a fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01196c5:	e8 00 27 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01196ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01196cd:	e8 ba a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01196d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f01196d5:	83 ec 0c             	sub    $0xc,%esp
f01196d8:	68 00 fc 0f 00       	push   $0xffc00
f01196dd:	e8 fa dc fe ff       	call   f01073dc <kmalloc>
f01196e2:	83 c4 10             	add    $0x10,%esp
f01196e5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f01196eb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01196f1:	89 c1                	mov    %eax,%ecx
f01196f3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01196fa:	10 00 00 
f01196fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119703:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119708:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011970e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119714:	ba 00 00 00 00       	mov    $0x0,%edx
f0119719:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011971f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119725:	29 d0                	sub    %edx,%eax
f0119727:	89 c3                	mov    %eax,%ebx
f0119729:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119730:	10 00 00 
f0119733:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119738:	0f b6 d0             	movzbl %al,%edx
f011973b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119741:	01 d0                	add    %edx,%eax
f0119743:	48                   	dec    %eax
f0119744:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011974a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119750:	ba 00 00 00 00       	mov    $0x0,%edx
f0119755:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011975b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119761:	29 d0                	sub    %edx,%eax
f0119763:	01 c3                	add    %eax,%ebx
f0119765:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011976c:	10 00 00 
f011976f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119774:	0f b6 c0             	movzbl %al,%eax
f0119777:	c1 e0 04             	shl    $0x4,%eax
f011977a:	89 c2                	mov    %eax,%edx
f011977c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119782:	01 d0                	add    %edx,%eax
f0119784:	48                   	dec    %eax
f0119785:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011978b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119791:	ba 00 00 00 00       	mov    $0x0,%edx
f0119796:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011979c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01197a2:	29 d0                	sub    %edx,%eax
f01197a4:	01 d8                	add    %ebx,%eax
f01197a6:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f01197ab:	39 c1                	cmp    %eax,%ecx
f01197ad:	74 17                	je     f01197c6 <test_kmalloc_bestfit1+0x6d0>
f01197af:	83 ec 04             	sub    $0x4,%esp
f01197b2:	68 54 a6 13 f0       	push   $0xf013a654
f01197b7:	68 c0 01 00 00       	push   $0x1c0
f01197bc:	68 3a a2 13 f0       	push   $0xf013a23a
f01197c1:	e8 e0 69 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197c6:	e8 c1 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01197cb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01197ce:	74 17                	je     f01197e7 <test_kmalloc_bestfit1+0x6f1>
f01197d0:	83 ec 04             	sub    $0x4,%esp
f01197d3:	68 54 a2 13 f0       	push   $0xf013a254
f01197d8:	68 c1 01 00 00       	push   $0x1c1
f01197dd:	68 3a a2 13 f0       	push   $0xf013a23a
f01197e2:	e8 bf 69 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f01197e7:	e8 de 25 ff ff       	call   f010bdca <sys_calculate_free_frames>
f01197ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01197ef:	29 c2                	sub    %eax,%edx
f01197f1:	89 d0                	mov    %edx,%eax
f01197f3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01197f8:	74 17                	je     f0119811 <test_kmalloc_bestfit1+0x71b>
f01197fa:	83 ec 04             	sub    $0x4,%esp
f01197fd:	68 84 a6 13 f0       	push   $0xf013a684
f0119802:	68 c2 01 00 00       	push   $0x1c2
f0119807:	68 3a a2 13 f0       	push   $0xf013a23a
f011980c:	e8 95 69 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119811:	e8 b4 25 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119816:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119819:	e8 6e a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011981e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0119821:	83 ec 0c             	sub    $0xc,%esp
f0119824:	68 00 fc 0f 00       	push   $0xffc00
f0119829:	e8 ae db fe ff       	call   f01073dc <kmalloc>
f011982e:	83 c4 10             	add    $0x10,%esp
f0119831:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0119837:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011983d:	89 c1                	mov    %eax,%ecx
f011983f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0119846:	10 00 00 
f0119849:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011984f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119854:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011985a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119860:	ba 00 00 00 00       	mov    $0x0,%edx
f0119865:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011986b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119871:	29 d0                	sub    %edx,%eax
f0119873:	89 c3                	mov    %eax,%ebx
f0119875:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011987c:	10 00 00 
f011987f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119884:	0f b6 d0             	movzbl %al,%edx
f0119887:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011988d:	01 d0                	add    %edx,%eax
f011988f:	48                   	dec    %eax
f0119890:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0119896:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011989c:	ba 00 00 00 00       	mov    $0x0,%edx
f01198a1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01198a7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01198ad:	29 d0                	sub    %edx,%eax
f01198af:	01 c3                	add    %eax,%ebx
f01198b1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01198b8:	10 00 00 
f01198bb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01198c0:	0f b6 c0             	movzbl %al,%eax
f01198c3:	c1 e0 04             	shl    $0x4,%eax
f01198c6:	89 c2                	mov    %eax,%edx
f01198c8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01198ce:	01 d0                	add    %edx,%eax
f01198d0:	48                   	dec    %eax
f01198d1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01198d7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01198dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01198e2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01198e8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01198ee:	29 d0                	sub    %edx,%eax
f01198f0:	01 d8                	add    %ebx,%eax
f01198f2:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f01198f7:	39 c1                	cmp    %eax,%ecx
f01198f9:	74 17                	je     f0119912 <test_kmalloc_bestfit1+0x81c>
f01198fb:	83 ec 04             	sub    $0x4,%esp
f01198fe:	68 54 a6 13 f0       	push   $0xf013a654
f0119903:	68 c8 01 00 00       	push   $0x1c8
f0119908:	68 3a a2 13 f0       	push   $0xf013a23a
f011990d:	e8 94 68 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119912:	e8 75 a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119917:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011991a:	74 17                	je     f0119933 <test_kmalloc_bestfit1+0x83d>
f011991c:	83 ec 04             	sub    $0x4,%esp
f011991f:	68 54 a2 13 f0       	push   $0xf013a254
f0119924:	68 c9 01 00 00       	push   $0x1c9
f0119929:	68 3a a2 13 f0       	push   $0xf013a23a
f011992e:	e8 73 68 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119933:	e8 92 24 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119938:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011993b:	29 c2                	sub    %eax,%edx
f011993d:	89 d0                	mov    %edx,%eax
f011993f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119944:	74 17                	je     f011995d <test_kmalloc_bestfit1+0x867>
f0119946:	83 ec 04             	sub    $0x4,%esp
f0119949:	68 84 a6 13 f0       	push   $0xf013a684
f011994e:	68 ca 01 00 00       	push   $0x1ca
f0119953:	68 3a a2 13 f0       	push   $0xf013a23a
f0119958:	e8 49 68 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011995d:	e8 68 24 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119962:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119965:	e8 22 a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011996a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011996d:	83 ec 0c             	sub    $0xc,%esp
f0119970:	68 00 fc 0f 00       	push   $0xffc00
f0119975:	e8 62 da fe ff       	call   f01073dc <kmalloc>
f011997a:	83 c4 10             	add    $0x10,%esp
f011997d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f0119983:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119989:	89 c1                	mov    %eax,%ecx
f011998b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0119992:	10 00 00 
f0119995:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011999b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01199a0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01199a6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01199ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01199b7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01199bd:	29 d0                	sub    %edx,%eax
f01199bf:	89 c3                	mov    %eax,%ebx
f01199c1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01199c8:	10 00 00 
f01199cb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01199d0:	0f b6 d0             	movzbl %al,%edx
f01199d3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01199d9:	01 d0                	add    %edx,%eax
f01199db:	48                   	dec    %eax
f01199dc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01199e2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01199e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01199ed:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01199f3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01199f9:	29 d0                	sub    %edx,%eax
f01199fb:	01 c3                	add    %eax,%ebx
f01199fd:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119a04:	10 00 00 
f0119a07:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119a0c:	0f b6 c0             	movzbl %al,%eax
f0119a0f:	c1 e0 04             	shl    $0x4,%eax
f0119a12:	89 c2                	mov    %eax,%edx
f0119a14:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119a1a:	01 d0                	add    %edx,%eax
f0119a1c:	48                   	dec    %eax
f0119a1d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119a23:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119a29:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a2e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119a34:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119a3a:	29 d0                	sub    %edx,%eax
f0119a3c:	01 d8                	add    %ebx,%eax
f0119a3e:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0119a43:	39 c1                	cmp    %eax,%ecx
f0119a45:	74 17                	je     f0119a5e <test_kmalloc_bestfit1+0x968>
f0119a47:	83 ec 04             	sub    $0x4,%esp
f0119a4a:	68 54 a6 13 f0       	push   $0xf013a654
f0119a4f:	68 d0 01 00 00       	push   $0x1d0
f0119a54:	68 3a a2 13 f0       	push   $0xf013a23a
f0119a59:	e8 48 67 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a5e:	e8 29 a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a63:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119a66:	74 17                	je     f0119a7f <test_kmalloc_bestfit1+0x989>
f0119a68:	83 ec 04             	sub    $0x4,%esp
f0119a6b:	68 54 a2 13 f0       	push   $0xf013a254
f0119a70:	68 d1 01 00 00       	push   $0x1d1
f0119a75:	68 3a a2 13 f0       	push   $0xf013a23a
f0119a7a:	e8 27 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119a7f:	e8 46 23 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119a84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119a87:	29 c2                	sub    %eax,%edx
f0119a89:	89 d0                	mov    %edx,%eax
f0119a8b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119a90:	74 17                	je     f0119aa9 <test_kmalloc_bestfit1+0x9b3>
f0119a92:	83 ec 04             	sub    $0x4,%esp
f0119a95:	68 84 a6 13 f0       	push   $0xf013a684
f0119a9a:	68 d2 01 00 00       	push   $0x1d2
f0119a9f:	68 3a a2 13 f0       	push   $0xf013a23a
f0119aa4:	e8 fd 66 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119aa9:	e8 1c 23 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119aae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ab1:	e8 d6 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0119ab9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119abf:	83 ec 0c             	sub    $0xc,%esp
f0119ac2:	50                   	push   %eax
f0119ac3:	e8 2e d9 fe ff       	call   f01073f6 <kfree>
f0119ac8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119acb:	e8 bc a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ad0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ad3:	74 17                	je     f0119aec <test_kmalloc_bestfit1+0x9f6>
f0119ad5:	83 ec 04             	sub    $0x4,%esp
f0119ad8:	68 54 a2 13 f0       	push   $0xf013a254
f0119add:	68 db 01 00 00       	push   $0x1db
f0119ae2:	68 3a a2 13 f0       	push   $0xf013a23a
f0119ae7:	e8 ba 66 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119aec:	e8 d9 22 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119af1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119af4:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119af9:	74 17                	je     f0119b12 <test_kmalloc_bestfit1+0xa1c>
f0119afb:	83 ec 04             	sub    $0x4,%esp
f0119afe:	68 97 a6 13 f0       	push   $0xf013a697
f0119b03:	68 dc 01 00 00       	push   $0x1dc
f0119b08:	68 3a a2 13 f0       	push   $0xf013a23a
f0119b0d:	e8 94 66 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119b12:	e8 b3 22 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119b17:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b1a:	e8 6d a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0119b22:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119b28:	83 ec 0c             	sub    $0xc,%esp
f0119b2b:	50                   	push   %eax
f0119b2c:	e8 c5 d8 fe ff       	call   f01073f6 <kfree>
f0119b31:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b34:	e8 53 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b39:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b3c:	74 17                	je     f0119b55 <test_kmalloc_bestfit1+0xa5f>
f0119b3e:	83 ec 04             	sub    $0x4,%esp
f0119b41:	68 54 a2 13 f0       	push   $0xf013a254
f0119b46:	68 e2 01 00 00       	push   $0x1e2
f0119b4b:	68 3a a2 13 f0       	push   $0xf013a23a
f0119b50:	e8 51 66 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119b55:	e8 70 22 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119b5a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119b5d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119b62:	74 17                	je     f0119b7b <test_kmalloc_bestfit1+0xa85>
f0119b64:	83 ec 04             	sub    $0x4,%esp
f0119b67:	68 97 a6 13 f0       	push   $0xf013a697
f0119b6c:	68 e3 01 00 00       	push   $0x1e3
f0119b71:	68 3a a2 13 f0       	push   $0xf013a23a
f0119b76:	e8 2b 66 fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119b7b:	e8 4a 22 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119b80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b83:	e8 04 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b88:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f0119b8b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119b91:	83 ec 0c             	sub    $0xc,%esp
f0119b94:	50                   	push   %eax
f0119b95:	e8 5c d8 fe ff       	call   f01073f6 <kfree>
f0119b9a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b9d:	e8 ea a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ba2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ba5:	74 17                	je     f0119bbe <test_kmalloc_bestfit1+0xac8>
f0119ba7:	83 ec 04             	sub    $0x4,%esp
f0119baa:	68 54 a2 13 f0       	push   $0xf013a254
f0119baf:	68 e9 01 00 00       	push   $0x1e9
f0119bb4:	68 3a a2 13 f0       	push   $0xf013a23a
f0119bb9:	e8 e8 65 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0119bbe:	e8 07 22 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119bc3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119bc6:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119bcb:	74 17                	je     f0119be4 <test_kmalloc_bestfit1+0xaee>
f0119bcd:	83 ec 04             	sub    $0x4,%esp
f0119bd0:	68 97 a6 13 f0       	push   $0xf013a697
f0119bd5:	68 ea 01 00 00       	push   $0x1ea
f0119bda:	68 3a a2 13 f0       	push   $0xf013a23a
f0119bdf:	e8 c2 65 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0119be4:	e8 e1 21 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119be9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119bec:	e8 9b a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119bf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f0119bf4:	83 ec 0c             	sub    $0xc,%esp
f0119bf7:	68 00 00 08 00       	push   $0x80000
f0119bfc:	e8 db d7 fe ff       	call   f01073dc <kmalloc>
f0119c01:	83 c4 10             	add    $0x10,%esp
f0119c04:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119c0a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119c10:	89 c1                	mov    %eax,%ecx
f0119c12:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119c19:	10 00 00 
f0119c1c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119c22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c27:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119c2d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c33:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c38:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119c3e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c44:	29 d0                	sub    %edx,%eax
f0119c46:	89 c3                	mov    %eax,%ebx
f0119c48:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119c4f:	10 00 00 
f0119c52:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119c57:	0f b6 d0             	movzbl %al,%edx
f0119c5a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119c60:	01 d0                	add    %edx,%eax
f0119c62:	48                   	dec    %eax
f0119c63:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119c69:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119c6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c74:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119c7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119c80:	29 d0                	sub    %edx,%eax
f0119c82:	01 c3                	add    %eax,%ebx
f0119c84:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119c8b:	10 00 00 
f0119c8e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119c93:	0f b6 c0             	movzbl %al,%eax
f0119c96:	c1 e0 04             	shl    $0x4,%eax
f0119c99:	89 c2                	mov    %eax,%edx
f0119c9b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119ca1:	01 d0                	add    %edx,%eax
f0119ca3:	48                   	dec    %eax
f0119ca4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119caa:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119cb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cb5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119cbb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119cc1:	29 d0                	sub    %edx,%eax
f0119cc3:	01 d8                	add    %ebx,%eax
f0119cc5:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119cca:	39 c1                	cmp    %eax,%ecx
f0119ccc:	74 17                	je     f0119ce5 <test_kmalloc_bestfit1+0xbef>
f0119cce:	83 ec 04             	sub    $0x4,%esp
f0119cd1:	68 54 a6 13 f0       	push   $0xf013a654
f0119cd6:	68 f3 01 00 00       	push   $0x1f3
f0119cdb:	68 3a a2 13 f0       	push   $0xf013a23a
f0119ce0:	e8 c1 64 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ce5:	e8 a2 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119cea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ced:	74 17                	je     f0119d06 <test_kmalloc_bestfit1+0xc10>
f0119cef:	83 ec 04             	sub    $0x4,%esp
f0119cf2:	68 54 a2 13 f0       	push   $0xf013a254
f0119cf7:	68 f4 01 00 00       	push   $0x1f4
f0119cfc:	68 3a a2 13 f0       	push   $0xf013a23a
f0119d01:	e8 a0 64 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f0119d06:	e8 bf 20 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119d0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119d0e:	29 c2                	sub    %eax,%edx
f0119d10:	89 d0                	mov    %edx,%eax
f0119d12:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119d17:	74 17                	je     f0119d30 <test_kmalloc_bestfit1+0xc3a>
f0119d19:	83 ec 04             	sub    $0x4,%esp
f0119d1c:	68 84 a6 13 f0       	push   $0xf013a684
f0119d21:	68 f5 01 00 00       	push   $0x1f5
f0119d26:	68 3a a2 13 f0       	push   $0xf013a23a
f0119d2b:	e8 76 64 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0119d30:	e8 95 20 ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119d35:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d38:	e8 4f 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0119d40:	83 ec 0c             	sub    $0xc,%esp
f0119d43:	68 00 fc 0f 00       	push   $0xffc00
f0119d48:	e8 8f d6 fe ff       	call   f01073dc <kmalloc>
f0119d4d:	83 c4 10             	add    $0x10,%esp
f0119d50:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119d56:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119d5c:	89 c1                	mov    %eax,%ecx
f0119d5e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119d65:	10 00 00 
f0119d68:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119d6e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d73:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119d79:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119d7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d84:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119d8a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119d90:	29 d0                	sub    %edx,%eax
f0119d92:	89 c3                	mov    %eax,%ebx
f0119d94:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119d9b:	10 00 00 
f0119d9e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119da3:	0f b6 d0             	movzbl %al,%edx
f0119da6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119dac:	01 d0                	add    %edx,%eax
f0119dae:	48                   	dec    %eax
f0119daf:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119db5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119dbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dc0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119dc6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119dcc:	29 d0                	sub    %edx,%eax
f0119dce:	01 c3                	add    %eax,%ebx
f0119dd0:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119dd7:	10 00 00 
f0119dda:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119ddf:	0f b6 c0             	movzbl %al,%eax
f0119de2:	c1 e0 04             	shl    $0x4,%eax
f0119de5:	89 c2                	mov    %eax,%edx
f0119de7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119ded:	01 d0                	add    %edx,%eax
f0119def:	48                   	dec    %eax
f0119df0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119df6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119dfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e01:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119e07:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119e0d:	29 d0                	sub    %edx,%eax
f0119e0f:	01 d8                	add    %ebx,%eax
f0119e11:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119e16:	39 c1                	cmp    %eax,%ecx
f0119e18:	74 17                	je     f0119e31 <test_kmalloc_bestfit1+0xd3b>
f0119e1a:	83 ec 04             	sub    $0x4,%esp
f0119e1d:	68 54 a6 13 f0       	push   $0xf013a654
f0119e22:	68 fb 01 00 00       	push   $0x1fb
f0119e27:	68 3a a2 13 f0       	push   $0xf013a23a
f0119e2c:	e8 75 63 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e31:	e8 56 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e36:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e39:	74 17                	je     f0119e52 <test_kmalloc_bestfit1+0xd5c>
f0119e3b:	83 ec 04             	sub    $0x4,%esp
f0119e3e:	68 54 a2 13 f0       	push   $0xf013a254
f0119e43:	68 fc 01 00 00       	push   $0x1fc
f0119e48:	68 3a a2 13 f0       	push   $0xf013a23a
f0119e4d:	e8 54 63 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119e52:	e8 73 1f ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119e57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e5a:	29 c2                	sub    %eax,%edx
f0119e5c:	89 d0                	mov    %edx,%eax
f0119e5e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e63:	74 17                	je     f0119e7c <test_kmalloc_bestfit1+0xd86>
f0119e65:	83 ec 04             	sub    $0x4,%esp
f0119e68:	68 84 a6 13 f0       	push   $0xf013a684
f0119e6d:	68 fd 01 00 00       	push   $0x1fd
f0119e72:	68 3a a2 13 f0       	push   $0xf013a23a
f0119e77:	e8 2a 63 fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0119e7c:	e8 49 1f ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119e81:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e84:	e8 03 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e89:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f0119e8c:	83 ec 0c             	sub    $0xc,%esp
f0119e8f:	68 00 fc 03 00       	push   $0x3fc00
f0119e94:	e8 43 d5 fe ff       	call   f01073dc <kmalloc>
f0119e99:	83 c4 10             	add    $0x10,%esp
f0119e9c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0119ea2:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ea8:	89 c1                	mov    %eax,%ecx
f0119eaa:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119eb1:	10 00 00 
f0119eb4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119eba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ebf:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119ec5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119ecb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ed0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119ed6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119edc:	29 d0                	sub    %edx,%eax
f0119ede:	89 c3                	mov    %eax,%ebx
f0119ee0:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0119ee7:	10 00 00 
f0119eea:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119eef:	0f b6 d0             	movzbl %al,%edx
f0119ef2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119ef8:	01 d0                	add    %edx,%eax
f0119efa:	48                   	dec    %eax
f0119efb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0119f01:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119f07:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f0c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0119f12:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119f18:	29 d0                	sub    %edx,%eax
f0119f1a:	01 c3                	add    %eax,%ebx
f0119f1c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0119f23:	10 00 00 
f0119f26:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119f2b:	0f b6 c0             	movzbl %al,%eax
f0119f2e:	c1 e0 04             	shl    $0x4,%eax
f0119f31:	89 c2                	mov    %eax,%edx
f0119f33:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119f39:	01 d0                	add    %edx,%eax
f0119f3b:	48                   	dec    %eax
f0119f3c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0119f42:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119f48:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f4d:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0119f53:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119f59:	29 d0                	sub    %edx,%eax
f0119f5b:	01 d8                	add    %ebx,%eax
f0119f5d:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f0119f62:	39 c1                	cmp    %eax,%ecx
f0119f64:	74 17                	je     f0119f7d <test_kmalloc_bestfit1+0xe87>
f0119f66:	83 ec 04             	sub    $0x4,%esp
f0119f69:	68 54 a6 13 f0       	push   $0xf013a654
f0119f6e:	68 03 02 00 00       	push   $0x203
f0119f73:	68 3a a2 13 f0       	push   $0xf013a23a
f0119f78:	e8 29 62 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f7d:	e8 0a 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119f82:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f85:	74 17                	je     f0119f9e <test_kmalloc_bestfit1+0xea8>
f0119f87:	83 ec 04             	sub    $0x4,%esp
f0119f8a:	68 54 a2 13 f0       	push   $0xf013a254
f0119f8f:	68 04 02 00 00       	push   $0x204
f0119f94:	68 3a a2 13 f0       	push   $0xf013a23a
f0119f99:	e8 08 62 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0119f9e:	e8 27 1e ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119fa3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119fa6:	29 c2                	sub    %eax,%edx
f0119fa8:	89 d0                	mov    %edx,%eax
f0119faa:	83 f8 40             	cmp    $0x40,%eax
f0119fad:	74 17                	je     f0119fc6 <test_kmalloc_bestfit1+0xed0>
f0119faf:	83 ec 04             	sub    $0x4,%esp
f0119fb2:	68 84 a6 13 f0       	push   $0xf013a684
f0119fb7:	68 05 02 00 00       	push   $0x205
f0119fbc:	68 3a a2 13 f0       	push   $0xf013a23a
f0119fc1:	e8 e0 61 fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0119fc6:	e8 ff 1d ff ff       	call   f010bdca <sys_calculate_free_frames>
f0119fcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119fce:	e8 b9 9c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119fd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f0119fd6:	83 ec 0c             	sub    $0xc,%esp
f0119fd9:	68 00 fc 3f 00       	push   $0x3ffc00
f0119fde:	e8 f9 d3 fe ff       	call   f01073dc <kmalloc>
f0119fe3:	83 c4 10             	add    $0x10,%esp
f0119fe6:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f0119fec:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119ff2:	89 c1                	mov    %eax,%ecx
f0119ff4:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0119ffb:	10 00 00 
f0119ffe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a004:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a009:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a00f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a015:	ba 00 00 00 00       	mov    $0x0,%edx
f011a01a:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a020:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a026:	29 d0                	sub    %edx,%eax
f011a028:	89 c3                	mov    %eax,%ebx
f011a02a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a031:	10 00 00 
f011a034:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a039:	0f b6 d0             	movzbl %al,%edx
f011a03c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a042:	01 d0                	add    %edx,%eax
f011a044:	48                   	dec    %eax
f011a045:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a04b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a051:	ba 00 00 00 00       	mov    $0x0,%edx
f011a056:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a05c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a062:	29 d0                	sub    %edx,%eax
f011a064:	01 c3                	add    %eax,%ebx
f011a066:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a06d:	10 00 00 
f011a070:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a075:	0f b6 c0             	movzbl %al,%eax
f011a078:	c1 e0 04             	shl    $0x4,%eax
f011a07b:	89 c2                	mov    %eax,%edx
f011a07d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a083:	01 d0                	add    %edx,%eax
f011a085:	48                   	dec    %eax
f011a086:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a08c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a092:	ba 00 00 00 00       	mov    $0x0,%edx
f011a097:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a09d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a0a3:	29 d0                	sub    %edx,%eax
f011a0a5:	01 d8                	add    %ebx,%eax
f011a0a7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a0ac:	39 c1                	cmp    %eax,%ecx
f011a0ae:	74 17                	je     f011a0c7 <test_kmalloc_bestfit1+0xfd1>
f011a0b0:	83 ec 04             	sub    $0x4,%esp
f011a0b3:	68 54 a6 13 f0       	push   $0xf013a654
f011a0b8:	68 0b 02 00 00       	push   $0x20b
f011a0bd:	68 3a a2 13 f0       	push   $0xf013a23a
f011a0c2:	e8 df 60 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0c7:	e8 c0 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a0cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a0cf:	74 17                	je     f011a0e8 <test_kmalloc_bestfit1+0xff2>
f011a0d1:	83 ec 04             	sub    $0x4,%esp
f011a0d4:	68 54 a2 13 f0       	push   $0xf013a254
f011a0d9:	68 0c 02 00 00       	push   $0x20c
f011a0de:	68 3a a2 13 f0       	push   $0xf013a23a
f011a0e3:	e8 be 60 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011a0e8:	e8 dd 1c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a0ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a0f0:	29 c2                	sub    %eax,%edx
f011a0f2:	89 d0                	mov    %edx,%eax
f011a0f4:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a0f9:	74 17                	je     f011a112 <test_kmalloc_bestfit1+0x101c>
f011a0fb:	83 ec 04             	sub    $0x4,%esp
f011a0fe:	68 84 a6 13 f0       	push   $0xf013a684
f011a103:	68 0d 02 00 00       	push   $0x20d
f011a108:	68 3a a2 13 f0       	push   $0xf013a23a
f011a10d:	e8 94 60 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011a112:	e8 b3 1c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a117:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a11a:	e8 6d 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a11f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011a122:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a128:	83 ec 0c             	sub    $0xc,%esp
f011a12b:	50                   	push   %eax
f011a12c:	e8 c5 d2 fe ff       	call   f01073f6 <kfree>
f011a131:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a134:	e8 53 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a139:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a13c:	74 17                	je     f011a155 <test_kmalloc_bestfit1+0x105f>
f011a13e:	83 ec 04             	sub    $0x4,%esp
f011a141:	68 54 a2 13 f0       	push   $0xf013a254
f011a146:	68 16 02 00 00       	push   $0x216
f011a14b:	68 3a a2 13 f0       	push   $0xf013a23a
f011a150:	e8 51 60 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a155:	e8 70 1c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a15a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a15d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a162:	74 17                	je     f011a17b <test_kmalloc_bestfit1+0x1085>
f011a164:	83 ec 04             	sub    $0x4,%esp
f011a167:	68 97 a6 13 f0       	push   $0xf013a697
f011a16c:	68 17 02 00 00       	push   $0x217
f011a171:	68 3a a2 13 f0       	push   $0xf013a23a
f011a176:	e8 2b 60 fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011a17b:	e8 4a 1c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a180:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a183:	e8 04 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a188:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011a18b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a191:	83 ec 0c             	sub    $0xc,%esp
f011a194:	50                   	push   %eax
f011a195:	e8 5c d2 fe ff       	call   f01073f6 <kfree>
f011a19a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a19d:	e8 ea 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a1a2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a1a5:	74 17                	je     f011a1be <test_kmalloc_bestfit1+0x10c8>
f011a1a7:	83 ec 04             	sub    $0x4,%esp
f011a1aa:	68 54 a2 13 f0       	push   $0xf013a254
f011a1af:	68 1d 02 00 00       	push   $0x21d
f011a1b4:	68 3a a2 13 f0       	push   $0xf013a23a
f011a1b9:	e8 e8 5f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011a1be:	e8 07 1c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a1c3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a1c6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a1cb:	74 17                	je     f011a1e4 <test_kmalloc_bestfit1+0x10ee>
f011a1cd:	83 ec 04             	sub    $0x4,%esp
f011a1d0:	68 97 a6 13 f0       	push   $0xf013a697
f011a1d5:	68 1e 02 00 00       	push   $0x21e
f011a1da:	68 3a a2 13 f0       	push   $0xf013a23a
f011a1df:	e8 c2 5f fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011a1e4:	e8 e1 1b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a1e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1ec:	e8 9b 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a1f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011a1f4:	83 ec 0c             	sub    $0xc,%esp
f011a1f7:	68 00 fc 1f 00       	push   $0x1ffc00
f011a1fc:	e8 db d1 fe ff       	call   f01073dc <kmalloc>
f011a201:	83 c4 10             	add    $0x10,%esp
f011a204:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011a20a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011a210:	89 c1                	mov    %eax,%ecx
f011a212:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a219:	10 00 00 
f011a21c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a222:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a227:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a22d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a233:	ba 00 00 00 00       	mov    $0x0,%edx
f011a238:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a23e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a244:	29 d0                	sub    %edx,%eax
f011a246:	89 c3                	mov    %eax,%ebx
f011a248:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a24f:	10 00 00 
f011a252:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a257:	0f b6 d0             	movzbl %al,%edx
f011a25a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a260:	01 d0                	add    %edx,%eax
f011a262:	48                   	dec    %eax
f011a263:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a269:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a26f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a274:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a27a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a280:	29 d0                	sub    %edx,%eax
f011a282:	01 c3                	add    %eax,%ebx
f011a284:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a28b:	10 00 00 
f011a28e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a293:	0f b6 c0             	movzbl %al,%eax
f011a296:	c1 e0 04             	shl    $0x4,%eax
f011a299:	89 c2                	mov    %eax,%edx
f011a29b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a2a1:	01 d0                	add    %edx,%eax
f011a2a3:	48                   	dec    %eax
f011a2a4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a2aa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a2b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2b5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a2bb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a2c1:	29 d0                	sub    %edx,%eax
f011a2c3:	01 d8                	add    %ebx,%eax
f011a2c5:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011a2ca:	39 c1                	cmp    %eax,%ecx
f011a2cc:	74 17                	je     f011a2e5 <test_kmalloc_bestfit1+0x11ef>
f011a2ce:	83 ec 04             	sub    $0x4,%esp
f011a2d1:	68 54 a6 13 f0       	push   $0xf013a654
f011a2d6:	68 27 02 00 00       	push   $0x227
f011a2db:	68 3a a2 13 f0       	push   $0xf013a23a
f011a2e0:	e8 c1 5e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2e5:	e8 a2 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a2ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a2ed:	74 17                	je     f011a306 <test_kmalloc_bestfit1+0x1210>
f011a2ef:	83 ec 04             	sub    $0x4,%esp
f011a2f2:	68 54 a2 13 f0       	push   $0xf013a254
f011a2f7:	68 28 02 00 00       	push   $0x228
f011a2fc:	68 3a a2 13 f0       	push   $0xf013a23a
f011a301:	e8 a0 5e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011a306:	e8 bf 1a ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a30b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a30e:	29 c2                	sub    %eax,%edx
f011a310:	89 d0                	mov    %edx,%eax
f011a312:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a317:	74 17                	je     f011a330 <test_kmalloc_bestfit1+0x123a>
f011a319:	83 ec 04             	sub    $0x4,%esp
f011a31c:	68 84 a6 13 f0       	push   $0xf013a684
f011a321:	68 29 02 00 00       	push   $0x229
f011a326:	68 3a a2 13 f0       	push   $0xf013a23a
f011a32b:	e8 76 5e fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011a330:	83 ec 0c             	sub    $0xc,%esp
f011a333:	68 a4 a6 13 f0       	push   $0xf013a6a4
f011a338:	e8 f0 68 fe ff       	call   f0100c2d <cprintf>
f011a33d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a340:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a345:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a348:	5b                   	pop    %ebx
f011a349:	5f                   	pop    %edi
f011a34a:	5d                   	pop    %ebp
f011a34b:	c3                   	ret    

f011a34c <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011a34c:	55                   	push   %ebp
f011a34d:	89 e5                	mov    %esp,%ebp
f011a34f:	57                   	push   %edi
f011a350:	53                   	push   %ebx
f011a351:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011a357:	83 ec 0c             	sub    $0xc,%esp
f011a35a:	68 7c a1 13 f0       	push   $0xf013a17c
f011a35f:	e8 c9 68 fe ff       	call   f0100c2d <cprintf>
f011a364:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a367:	83 ec 0c             	sub    $0xc,%esp
f011a36a:	68 ac a1 13 f0       	push   $0xf013a1ac
f011a36f:	e8 b9 68 fe ff       	call   f0100c2d <cprintf>
f011a374:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a377:	83 ec 0c             	sub    $0xc,%esp
f011a37a:	68 7c a1 13 f0       	push   $0xf013a17c
f011a37f:	e8 a9 68 fe ff       	call   f0100c2d <cprintf>
f011a384:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a387:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011a38d:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a392:	b8 00 00 00 00       	mov    $0x0,%eax
f011a397:	89 d7                	mov    %edx,%edi
f011a399:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011a39b:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011a3a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a3a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a3aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011a3ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a3b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3b5:	f7 75 f4             	divl   -0xc(%ebp)
f011a3b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a3bb:	29 d0                	sub    %edx,%eax
f011a3bd:	89 c1                	mov    %eax,%ecx
f011a3bf:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a3c6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a3cb:	0f b6 d0             	movzbl %al,%edx
f011a3ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a3d1:	01 d0                	add    %edx,%eax
f011a3d3:	48                   	dec    %eax
f011a3d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a3d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a3da:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3df:	f7 75 ec             	divl   -0x14(%ebp)
f011a3e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a3e5:	29 d0                	sub    %edx,%eax
f011a3e7:	01 c1                	add    %eax,%ecx
f011a3e9:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a3f0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a3f5:	0f b6 c0             	movzbl %al,%eax
f011a3f8:	c1 e0 04             	shl    $0x4,%eax
f011a3fb:	89 c2                	mov    %eax,%edx
f011a3fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a400:	01 d0                	add    %edx,%eax
f011a402:	48                   	dec    %eax
f011a403:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a406:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a409:	ba 00 00 00 00       	mov    $0x0,%edx
f011a40e:	f7 75 e4             	divl   -0x1c(%ebp)
f011a411:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a414:	29 d0                	sub    %edx,%eax
f011a416:	01 c8                	add    %ecx,%eax
f011a418:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011a41d:	29 c2                	sub    %eax,%edx
f011a41f:	89 d0                	mov    %edx,%eax
f011a421:	83 ec 0c             	sub    $0xc,%esp
f011a424:	50                   	push   %eax
f011a425:	e8 b2 cf fe ff       	call   f01073dc <kmalloc>
f011a42a:	83 c4 10             	add    $0x10,%esp
f011a42d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011a433:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a439:	85 c0                	test   %eax,%eax
f011a43b:	74 17                	je     f011a454 <test_kmalloc_bestfit2+0x108>
f011a43d:	83 ec 04             	sub    $0x4,%esp
f011a440:	68 ec a6 13 f0       	push   $0xf013a6ec
f011a445:	68 3f 02 00 00       	push   $0x23f
f011a44a:	68 3a a2 13 f0       	push   $0xf013a23a
f011a44f:	e8 52 5d fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a454:	e8 71 19 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a459:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a45c:	e8 2b 98 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a461:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a464:	83 ec 0c             	sub    $0xc,%esp
f011a467:	68 00 fc 1f 00       	push   $0x1ffc00
f011a46c:	e8 6b cf fe ff       	call   f01073dc <kmalloc>
f011a471:	83 c4 10             	add    $0x10,%esp
f011a474:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a47a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a480:	89 c1                	mov    %eax,%ecx
f011a482:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a489:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a48c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a491:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a494:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a497:	ba 00 00 00 00       	mov    $0x0,%edx
f011a49c:	f7 75 d4             	divl   -0x2c(%ebp)
f011a49f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a4a2:	29 d0                	sub    %edx,%eax
f011a4a4:	89 c3                	mov    %eax,%ebx
f011a4a6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a4ad:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a4b2:	0f b6 d0             	movzbl %al,%edx
f011a4b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a4b8:	01 d0                	add    %edx,%eax
f011a4ba:	48                   	dec    %eax
f011a4bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a4be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a4c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4c6:	f7 75 cc             	divl   -0x34(%ebp)
f011a4c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a4cc:	29 d0                	sub    %edx,%eax
f011a4ce:	01 c3                	add    %eax,%ebx
f011a4d0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a4d7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a4dc:	0f b6 c0             	movzbl %al,%eax
f011a4df:	c1 e0 04             	shl    $0x4,%eax
f011a4e2:	89 c2                	mov    %eax,%edx
f011a4e4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a4e7:	01 d0                	add    %edx,%eax
f011a4e9:	48                   	dec    %eax
f011a4ea:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a4ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a4f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4f5:	f7 75 c4             	divl   -0x3c(%ebp)
f011a4f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a4fb:	29 d0                	sub    %edx,%eax
f011a4fd:	01 d8                	add    %ebx,%eax
f011a4ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a504:	39 c1                	cmp    %eax,%ecx
f011a506:	74 17                	je     f011a51f <test_kmalloc_bestfit2+0x1d3>
f011a508:	83 ec 04             	sub    $0x4,%esp
f011a50b:	68 54 a6 13 f0       	push   $0xf013a654
f011a510:	68 49 02 00 00       	push   $0x249
f011a515:	68 3a a2 13 f0       	push   $0xf013a23a
f011a51a:	e8 87 5c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a51f:	e8 68 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a524:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a527:	74 17                	je     f011a540 <test_kmalloc_bestfit2+0x1f4>
f011a529:	83 ec 04             	sub    $0x4,%esp
f011a52c:	68 54 a2 13 f0       	push   $0xf013a254
f011a531:	68 4a 02 00 00       	push   $0x24a
f011a536:	68 3a a2 13 f0       	push   $0xf013a23a
f011a53b:	e8 66 5c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a540:	e8 85 18 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a545:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a548:	29 c2                	sub    %eax,%edx
f011a54a:	89 d0                	mov    %edx,%eax
f011a54c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a551:	74 17                	je     f011a56a <test_kmalloc_bestfit2+0x21e>
f011a553:	83 ec 04             	sub    $0x4,%esp
f011a556:	68 84 a6 13 f0       	push   $0xf013a684
f011a55b:	68 4b 02 00 00       	push   $0x24b
f011a560:	68 3a a2 13 f0       	push   $0xf013a23a
f011a565:	e8 3c 5c fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a56a:	e8 5b 18 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a56f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a572:	e8 15 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a577:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a57a:	83 ec 0c             	sub    $0xc,%esp
f011a57d:	68 00 fc 1f 00       	push   $0x1ffc00
f011a582:	e8 55 ce fe ff       	call   f01073dc <kmalloc>
f011a587:	83 c4 10             	add    $0x10,%esp
f011a58a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011a590:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a596:	89 c1                	mov    %eax,%ecx
f011a598:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a59f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a5a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5a7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a5aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a5ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5b2:	f7 75 bc             	divl   -0x44(%ebp)
f011a5b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a5b8:	29 d0                	sub    %edx,%eax
f011a5ba:	89 c3                	mov    %eax,%ebx
f011a5bc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a5c3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a5c8:	0f b6 d0             	movzbl %al,%edx
f011a5cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a5ce:	01 d0                	add    %edx,%eax
f011a5d0:	48                   	dec    %eax
f011a5d1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a5d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a5d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5dc:	f7 75 b4             	divl   -0x4c(%ebp)
f011a5df:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a5e2:	29 d0                	sub    %edx,%eax
f011a5e4:	01 c3                	add    %eax,%ebx
f011a5e6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a5ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a5f2:	0f b6 c0             	movzbl %al,%eax
f011a5f5:	c1 e0 04             	shl    $0x4,%eax
f011a5f8:	89 c2                	mov    %eax,%edx
f011a5fa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a5fd:	01 d0                	add    %edx,%eax
f011a5ff:	48                   	dec    %eax
f011a600:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a603:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a606:	ba 00 00 00 00       	mov    $0x0,%edx
f011a60b:	f7 75 ac             	divl   -0x54(%ebp)
f011a60e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a611:	29 d0                	sub    %edx,%eax
f011a613:	01 d8                	add    %ebx,%eax
f011a615:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011a61a:	39 c1                	cmp    %eax,%ecx
f011a61c:	74 17                	je     f011a635 <test_kmalloc_bestfit2+0x2e9>
f011a61e:	83 ec 04             	sub    $0x4,%esp
f011a621:	68 54 a6 13 f0       	push   $0xf013a654
f011a626:	68 51 02 00 00       	push   $0x251
f011a62b:	68 3a a2 13 f0       	push   $0xf013a23a
f011a630:	e8 71 5b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a635:	e8 52 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a63a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a63d:	74 17                	je     f011a656 <test_kmalloc_bestfit2+0x30a>
f011a63f:	83 ec 04             	sub    $0x4,%esp
f011a642:	68 54 a2 13 f0       	push   $0xf013a254
f011a647:	68 52 02 00 00       	push   $0x252
f011a64c:	68 3a a2 13 f0       	push   $0xf013a23a
f011a651:	e8 50 5b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a656:	e8 6f 17 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a65b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a65e:	29 c2                	sub    %eax,%edx
f011a660:	89 d0                	mov    %edx,%eax
f011a662:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a667:	74 17                	je     f011a680 <test_kmalloc_bestfit2+0x334>
f011a669:	83 ec 04             	sub    $0x4,%esp
f011a66c:	68 84 a6 13 f0       	push   $0xf013a684
f011a671:	68 53 02 00 00       	push   $0x253
f011a676:	68 3a a2 13 f0       	push   $0xf013a23a
f011a67b:	e8 26 5b fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a680:	e8 45 17 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a685:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a688:	e8 ff 95 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a68d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011a690:	83 ec 0c             	sub    $0xc,%esp
f011a693:	68 00 08 00 00       	push   $0x800
f011a698:	e8 3f cd fe ff       	call   f01073dc <kmalloc>
f011a69d:	83 c4 10             	add    $0x10,%esp
f011a6a0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011a6a6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a6ac:	89 c1                	mov    %eax,%ecx
f011a6ae:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a6b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a6b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6bd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a6c0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6c8:	f7 75 a4             	divl   -0x5c(%ebp)
f011a6cb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a6ce:	29 d0                	sub    %edx,%eax
f011a6d0:	89 c3                	mov    %eax,%ebx
f011a6d2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a6d9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a6de:	0f b6 d0             	movzbl %al,%edx
f011a6e1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6e4:	01 d0                	add    %edx,%eax
f011a6e6:	48                   	dec    %eax
f011a6e7:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a6ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6f2:	f7 75 9c             	divl   -0x64(%ebp)
f011a6f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6f8:	29 d0                	sub    %edx,%eax
f011a6fa:	01 c3                	add    %eax,%ebx
f011a6fc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a703:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a708:	0f b6 c0             	movzbl %al,%eax
f011a70b:	c1 e0 04             	shl    $0x4,%eax
f011a70e:	89 c2                	mov    %eax,%edx
f011a710:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a713:	01 d0                	add    %edx,%eax
f011a715:	48                   	dec    %eax
f011a716:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a719:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a71c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a721:	f7 75 94             	divl   -0x6c(%ebp)
f011a724:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a727:	29 d0                	sub    %edx,%eax
f011a729:	01 d8                	add    %ebx,%eax
f011a72b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011a730:	39 c1                	cmp    %eax,%ecx
f011a732:	74 17                	je     f011a74b <test_kmalloc_bestfit2+0x3ff>
f011a734:	83 ec 04             	sub    $0x4,%esp
f011a737:	68 54 a6 13 f0       	push   $0xf013a654
f011a73c:	68 59 02 00 00       	push   $0x259
f011a741:	68 3a a2 13 f0       	push   $0xf013a23a
f011a746:	e8 5b 5a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a74b:	e8 3c 95 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a750:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a753:	74 17                	je     f011a76c <test_kmalloc_bestfit2+0x420>
f011a755:	83 ec 04             	sub    $0x4,%esp
f011a758:	68 54 a2 13 f0       	push   $0xf013a254
f011a75d:	68 5a 02 00 00       	push   $0x25a
f011a762:	68 3a a2 13 f0       	push   $0xf013a23a
f011a767:	e8 3a 5a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011a76c:	e8 59 16 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a771:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a774:	29 c2                	sub    %eax,%edx
f011a776:	89 d0                	mov    %edx,%eax
f011a778:	83 f8 01             	cmp    $0x1,%eax
f011a77b:	74 17                	je     f011a794 <test_kmalloc_bestfit2+0x448>
f011a77d:	83 ec 04             	sub    $0x4,%esp
f011a780:	68 84 a6 13 f0       	push   $0xf013a684
f011a785:	68 5b 02 00 00       	push   $0x25b
f011a78a:	68 3a a2 13 f0       	push   $0xf013a23a
f011a78f:	e8 12 5a fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a794:	e8 31 16 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a799:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a79c:	e8 eb 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a7a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011a7a4:	83 ec 0c             	sub    $0xc,%esp
f011a7a7:	68 00 08 00 00       	push   $0x800
f011a7ac:	e8 2b cc fe ff       	call   f01073dc <kmalloc>
f011a7b1:	83 c4 10             	add    $0x10,%esp
f011a7b4:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011a7ba:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a7c0:	89 c1                	mov    %eax,%ecx
f011a7c2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a7c9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a7cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7d1:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a7d4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a7d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7dc:	f7 75 8c             	divl   -0x74(%ebp)
f011a7df:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a7e2:	29 d0                	sub    %edx,%eax
f011a7e4:	89 c3                	mov    %eax,%ebx
f011a7e6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a7ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a7f2:	0f b6 d0             	movzbl %al,%edx
f011a7f5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a7f8:	01 d0                	add    %edx,%eax
f011a7fa:	48                   	dec    %eax
f011a7fb:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a7fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a801:	ba 00 00 00 00       	mov    $0x0,%edx
f011a806:	f7 75 84             	divl   -0x7c(%ebp)
f011a809:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a80c:	29 d0                	sub    %edx,%eax
f011a80e:	01 c3                	add    %eax,%ebx
f011a810:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a817:	10 00 00 
f011a81a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a81f:	0f b6 c0             	movzbl %al,%eax
f011a822:	c1 e0 04             	shl    $0x4,%eax
f011a825:	89 c2                	mov    %eax,%edx
f011a827:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a82d:	01 d0                	add    %edx,%eax
f011a82f:	48                   	dec    %eax
f011a830:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a836:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a83c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a841:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a847:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a84d:	29 d0                	sub    %edx,%eax
f011a84f:	01 d8                	add    %ebx,%eax
f011a851:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011a856:	39 c1                	cmp    %eax,%ecx
f011a858:	74 17                	je     f011a871 <test_kmalloc_bestfit2+0x525>
f011a85a:	83 ec 04             	sub    $0x4,%esp
f011a85d:	68 54 a6 13 f0       	push   $0xf013a654
f011a862:	68 61 02 00 00       	push   $0x261
f011a867:	68 3a a2 13 f0       	push   $0xf013a23a
f011a86c:	e8 35 59 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a871:	e8 16 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a876:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a879:	74 17                	je     f011a892 <test_kmalloc_bestfit2+0x546>
f011a87b:	83 ec 04             	sub    $0x4,%esp
f011a87e:	68 54 a2 13 f0       	push   $0xf013a254
f011a883:	68 62 02 00 00       	push   $0x262
f011a888:	68 3a a2 13 f0       	push   $0xf013a23a
f011a88d:	e8 14 59 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011a892:	e8 33 15 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a897:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a89a:	29 c2                	sub    %eax,%edx
f011a89c:	89 d0                	mov    %edx,%eax
f011a89e:	83 f8 01             	cmp    $0x1,%eax
f011a8a1:	74 17                	je     f011a8ba <test_kmalloc_bestfit2+0x56e>
f011a8a3:	83 ec 04             	sub    $0x4,%esp
f011a8a6:	68 84 a6 13 f0       	push   $0xf013a684
f011a8ab:	68 63 02 00 00       	push   $0x263
f011a8b0:	68 3a a2 13 f0       	push   $0xf013a23a
f011a8b5:	e8 ec 58 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a8ba:	e8 0b 15 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a8bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a8c2:	e8 c5 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011a8ca:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a8d0:	83 ec 0c             	sub    $0xc,%esp
f011a8d3:	50                   	push   %eax
f011a8d4:	e8 1d cb fe ff       	call   f01073f6 <kfree>
f011a8d9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8dc:	e8 ab 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a8e4:	74 17                	je     f011a8fd <test_kmalloc_bestfit2+0x5b1>
f011a8e6:	83 ec 04             	sub    $0x4,%esp
f011a8e9:	68 54 a2 13 f0       	push   $0xf013a254
f011a8ee:	68 69 02 00 00       	push   $0x269
f011a8f3:	68 3a a2 13 f0       	push   $0xf013a23a
f011a8f8:	e8 a9 58 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011a8fd:	e8 c8 14 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a902:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011a905:	83 f8 01             	cmp    $0x1,%eax
f011a908:	74 17                	je     f011a921 <test_kmalloc_bestfit2+0x5d5>
f011a90a:	83 ec 04             	sub    $0x4,%esp
f011a90d:	68 84 a6 13 f0       	push   $0xf013a684
f011a912:	68 6a 02 00 00       	push   $0x26a
f011a917:	68 3a a2 13 f0       	push   $0xf013a23a
f011a91c:	e8 85 58 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011a921:	e8 a4 14 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011a926:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a929:	e8 5e 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a92e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011a931:	83 ec 0c             	sub    $0xc,%esp
f011a934:	68 00 1c 00 00       	push   $0x1c00
f011a939:	e8 9e ca fe ff       	call   f01073dc <kmalloc>
f011a93e:	83 c4 10             	add    $0x10,%esp
f011a941:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011a947:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a94d:	89 c1                	mov    %eax,%ecx
f011a94f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a956:	10 00 00 
f011a959:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a95f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a964:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a96a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a970:	ba 00 00 00 00       	mov    $0x0,%edx
f011a975:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a97b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a981:	29 d0                	sub    %edx,%eax
f011a983:	89 c3                	mov    %eax,%ebx
f011a985:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a98c:	10 00 00 
f011a98f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a994:	0f b6 d0             	movzbl %al,%edx
f011a997:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a99d:	01 d0                	add    %edx,%eax
f011a99f:	48                   	dec    %eax
f011a9a0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a9a6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a9ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9b1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a9b7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a9bd:	29 d0                	sub    %edx,%eax
f011a9bf:	01 c3                	add    %eax,%ebx
f011a9c1:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a9c8:	10 00 00 
f011a9cb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a9d0:	0f b6 c0             	movzbl %al,%eax
f011a9d3:	c1 e0 04             	shl    $0x4,%eax
f011a9d6:	89 c2                	mov    %eax,%edx
f011a9d8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a9de:	01 d0                	add    %edx,%eax
f011a9e0:	48                   	dec    %eax
f011a9e1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a9e7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a9ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9f2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a9f8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a9fe:	29 d0                	sub    %edx,%eax
f011aa00:	01 d8                	add    %ebx,%eax
f011aa02:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011aa07:	39 c1                	cmp    %eax,%ecx
f011aa09:	74 17                	je     f011aa22 <test_kmalloc_bestfit2+0x6d6>
f011aa0b:	83 ec 04             	sub    $0x4,%esp
f011aa0e:	68 54 a6 13 f0       	push   $0xf013a654
f011aa13:	68 70 02 00 00       	push   $0x270
f011aa18:	68 3a a2 13 f0       	push   $0xf013a23a
f011aa1d:	e8 84 57 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa22:	e8 65 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aa27:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aa2a:	74 17                	je     f011aa43 <test_kmalloc_bestfit2+0x6f7>
f011aa2c:	83 ec 04             	sub    $0x4,%esp
f011aa2f:	68 54 a2 13 f0       	push   $0xf013a254
f011aa34:	68 71 02 00 00       	push   $0x271
f011aa39:	68 3a a2 13 f0       	push   $0xf013a23a
f011aa3e:	e8 63 57 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011aa43:	e8 82 13 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011aa48:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011aa4b:	29 c2                	sub    %eax,%edx
f011aa4d:	89 d0                	mov    %edx,%eax
f011aa4f:	83 f8 02             	cmp    $0x2,%eax
f011aa52:	74 17                	je     f011aa6b <test_kmalloc_bestfit2+0x71f>
f011aa54:	83 ec 04             	sub    $0x4,%esp
f011aa57:	68 84 a6 13 f0       	push   $0xf013a684
f011aa5c:	68 72 02 00 00       	push   $0x272
f011aa61:	68 3a a2 13 f0       	push   $0xf013a23a
f011aa66:	e8 3b 57 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aa6b:	e8 5a 13 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011aa70:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aa73:	e8 14 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aa78:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011aa7b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011aa81:	83 ec 0c             	sub    $0xc,%esp
f011aa84:	50                   	push   %eax
f011aa85:	e8 6c c9 fe ff       	call   f01073f6 <kfree>
f011aa8a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa8d:	e8 fa 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aa92:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aa95:	74 17                	je     f011aaae <test_kmalloc_bestfit2+0x762>
f011aa97:	83 ec 04             	sub    $0x4,%esp
f011aa9a:	68 54 a2 13 f0       	push   $0xf013a254
f011aa9f:	68 78 02 00 00       	push   $0x278
f011aaa4:	68 3a a2 13 f0       	push   $0xf013a23a
f011aaa9:	e8 f8 56 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011aaae:	e8 17 13 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011aab3:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011aab6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aabb:	74 17                	je     f011aad4 <test_kmalloc_bestfit2+0x788>
f011aabd:	83 ec 04             	sub    $0x4,%esp
f011aac0:	68 08 a5 13 f0       	push   $0xf013a508
f011aac5:	68 79 02 00 00       	push   $0x279
f011aaca:	68 3a a2 13 f0       	push   $0xf013a23a
f011aacf:	e8 d2 56 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011aad4:	e8 f1 12 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011aad9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aadc:	e8 ab 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aae1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011aae4:	83 ec 0c             	sub    $0xc,%esp
f011aae7:	68 00 fc 2f 00       	push   $0x2ffc00
f011aaec:	e8 eb c8 fe ff       	call   f01073dc <kmalloc>
f011aaf1:	83 c4 10             	add    $0x10,%esp
f011aaf4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011aafa:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ab00:	89 c1                	mov    %eax,%ecx
f011ab02:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ab09:	10 00 00 
f011ab0c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ab12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab17:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ab1d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab28:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ab2e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab34:	29 d0                	sub    %edx,%eax
f011ab36:	89 c3                	mov    %eax,%ebx
f011ab38:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ab3f:	10 00 00 
f011ab42:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ab47:	0f b6 d0             	movzbl %al,%edx
f011ab4a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ab50:	01 d0                	add    %edx,%eax
f011ab52:	48                   	dec    %eax
f011ab53:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ab59:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab64:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ab6a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab70:	29 d0                	sub    %edx,%eax
f011ab72:	01 c3                	add    %eax,%ebx
f011ab74:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ab7b:	10 00 00 
f011ab7e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ab83:	0f b6 c0             	movzbl %al,%eax
f011ab86:	c1 e0 04             	shl    $0x4,%eax
f011ab89:	89 c2                	mov    %eax,%edx
f011ab8b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ab91:	01 d0                	add    %edx,%eax
f011ab93:	48                   	dec    %eax
f011ab94:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ab9a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011aba0:	ba 00 00 00 00       	mov    $0x0,%edx
f011aba5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011abab:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011abb1:	29 d0                	sub    %edx,%eax
f011abb3:	01 d8                	add    %ebx,%eax
f011abb5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011abba:	39 c1                	cmp    %eax,%ecx
f011abbc:	74 17                	je     f011abd5 <test_kmalloc_bestfit2+0x889>
f011abbe:	83 ec 04             	sub    $0x4,%esp
f011abc1:	68 54 a6 13 f0       	push   $0xf013a654
f011abc6:	68 7f 02 00 00       	push   $0x27f
f011abcb:	68 3a a2 13 f0       	push   $0xf013a23a
f011abd0:	e8 d1 55 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abd5:	e8 b2 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011abda:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011abdd:	74 17                	je     f011abf6 <test_kmalloc_bestfit2+0x8aa>
f011abdf:	83 ec 04             	sub    $0x4,%esp
f011abe2:	68 54 a2 13 f0       	push   $0xf013a254
f011abe7:	68 80 02 00 00       	push   $0x280
f011abec:	68 3a a2 13 f0       	push   $0xf013a23a
f011abf1:	e8 b0 55 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011abf6:	e8 cf 11 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011abfb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011abfe:	29 c2                	sub    %eax,%edx
f011ac00:	89 d0                	mov    %edx,%eax
f011ac02:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ac07:	74 17                	je     f011ac20 <test_kmalloc_bestfit2+0x8d4>
f011ac09:	83 ec 04             	sub    $0x4,%esp
f011ac0c:	68 84 a6 13 f0       	push   $0xf013a684
f011ac11:	68 81 02 00 00       	push   $0x281
f011ac16:	68 3a a2 13 f0       	push   $0xf013a23a
f011ac1b:	e8 86 55 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ac20:	e8 a5 11 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011ac25:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ac28:	e8 5f 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ac2d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011ac30:	83 ec 0c             	sub    $0xc,%esp
f011ac33:	68 00 18 20 00       	push   $0x201800
f011ac38:	e8 9f c7 fe ff       	call   f01073dc <kmalloc>
f011ac3d:	83 c4 10             	add    $0x10,%esp
f011ac40:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ac46:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ac4c:	89 c1                	mov    %eax,%ecx
f011ac4e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ac55:	10 00 00 
f011ac58:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ac5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac63:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ac69:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ac6f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac74:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ac7a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ac80:	29 d0                	sub    %edx,%eax
f011ac82:	89 c3                	mov    %eax,%ebx
f011ac84:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ac8b:	10 00 00 
f011ac8e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ac93:	0f b6 d0             	movzbl %al,%edx
f011ac96:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ac9c:	01 d0                	add    %edx,%eax
f011ac9e:	48                   	dec    %eax
f011ac9f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011aca5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011acab:	ba 00 00 00 00       	mov    $0x0,%edx
f011acb0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011acb6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011acbc:	29 d0                	sub    %edx,%eax
f011acbe:	01 c3                	add    %eax,%ebx
f011acc0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011acc7:	10 00 00 
f011acca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011accf:	0f b6 c0             	movzbl %al,%eax
f011acd2:	c1 e0 04             	shl    $0x4,%eax
f011acd5:	89 c2                	mov    %eax,%edx
f011acd7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011acdd:	01 d0                	add    %edx,%eax
f011acdf:	48                   	dec    %eax
f011ace0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ace6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011acec:	ba 00 00 00 00       	mov    $0x0,%edx
f011acf1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011acf7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011acfd:	29 d0                	sub    %edx,%eax
f011acff:	01 d8                	add    %ebx,%eax
f011ad01:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011ad06:	39 c1                	cmp    %eax,%ecx
f011ad08:	74 17                	je     f011ad21 <test_kmalloc_bestfit2+0x9d5>
f011ad0a:	83 ec 04             	sub    $0x4,%esp
f011ad0d:	68 54 a6 13 f0       	push   $0xf013a654
f011ad12:	68 87 02 00 00       	push   $0x287
f011ad17:	68 3a a2 13 f0       	push   $0xf013a23a
f011ad1c:	e8 85 54 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad21:	e8 66 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ad26:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ad29:	74 17                	je     f011ad42 <test_kmalloc_bestfit2+0x9f6>
f011ad2b:	83 ec 04             	sub    $0x4,%esp
f011ad2e:	68 54 a2 13 f0       	push   $0xf013a254
f011ad33:	68 88 02 00 00       	push   $0x288
f011ad38:	68 3a a2 13 f0       	push   $0xf013a23a
f011ad3d:	e8 64 54 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011ad42:	e8 83 10 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011ad47:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ad4a:	29 c2                	sub    %eax,%edx
f011ad4c:	89 d0                	mov    %edx,%eax
f011ad4e:	3d 02 02 00 00       	cmp    $0x202,%eax
f011ad53:	74 17                	je     f011ad6c <test_kmalloc_bestfit2+0xa20>
f011ad55:	83 ec 04             	sub    $0x4,%esp
f011ad58:	68 84 a6 13 f0       	push   $0xf013a684
f011ad5d:	68 89 02 00 00       	push   $0x289
f011ad62:	68 3a a2 13 f0       	push   $0xf013a23a
f011ad67:	e8 3a 54 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad6c:	e8 59 10 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011ad71:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ad74:	e8 13 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ad79:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011ad7c:	83 ec 0c             	sub    $0xc,%esp
f011ad7f:	68 00 fc 4f 00       	push   $0x4ffc00
f011ad84:	e8 53 c6 fe ff       	call   f01073dc <kmalloc>
f011ad89:	83 c4 10             	add    $0x10,%esp
f011ad8c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011ad92:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ad98:	89 c1                	mov    %eax,%ecx
f011ad9a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ada1:	10 00 00 
f011ada4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011adaa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011adaf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011adb5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011adbb:	ba 00 00 00 00       	mov    $0x0,%edx
f011adc0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011adc6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011adcc:	29 d0                	sub    %edx,%eax
f011adce:	89 c3                	mov    %eax,%ebx
f011add0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011add7:	10 00 00 
f011adda:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011addf:	0f b6 d0             	movzbl %al,%edx
f011ade2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ade8:	01 d0                	add    %edx,%eax
f011adea:	48                   	dec    %eax
f011adeb:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011adf1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011adf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011adfc:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ae02:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ae08:	29 d0                	sub    %edx,%eax
f011ae0a:	01 c3                	add    %eax,%ebx
f011ae0c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ae13:	10 00 00 
f011ae16:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ae1b:	0f b6 c0             	movzbl %al,%eax
f011ae1e:	c1 e0 04             	shl    $0x4,%eax
f011ae21:	89 c2                	mov    %eax,%edx
f011ae23:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ae29:	01 d0                	add    %edx,%eax
f011ae2b:	48                   	dec    %eax
f011ae2c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ae32:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ae38:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae3d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ae43:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ae49:	29 d0                	sub    %edx,%eax
f011ae4b:	01 d8                	add    %ebx,%eax
f011ae4d:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ae52:	39 c1                	cmp    %eax,%ecx
f011ae54:	74 17                	je     f011ae6d <test_kmalloc_bestfit2+0xb21>
f011ae56:	83 ec 04             	sub    $0x4,%esp
f011ae59:	68 54 a6 13 f0       	push   $0xf013a654
f011ae5e:	68 8f 02 00 00       	push   $0x28f
f011ae63:	68 3a a2 13 f0       	push   $0xf013a23a
f011ae68:	e8 39 53 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae6d:	e8 1a 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae72:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ae75:	74 17                	je     f011ae8e <test_kmalloc_bestfit2+0xb42>
f011ae77:	83 ec 04             	sub    $0x4,%esp
f011ae7a:	68 54 a2 13 f0       	push   $0xf013a254
f011ae7f:	68 90 02 00 00       	push   $0x290
f011ae84:	68 3a a2 13 f0       	push   $0xf013a23a
f011ae89:	e8 18 53 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ae8e:	e8 37 0f ff ff       	call   f010bdca <sys_calculate_free_frames>
f011ae93:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ae96:	29 c2                	sub    %eax,%edx
f011ae98:	89 d0                	mov    %edx,%eax
f011ae9a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ae9f:	74 17                	je     f011aeb8 <test_kmalloc_bestfit2+0xb6c>
f011aea1:	83 ec 04             	sub    $0x4,%esp
f011aea4:	68 84 a6 13 f0       	push   $0xf013a684
f011aea9:	68 91 02 00 00       	push   $0x291
f011aeae:	68 3a a2 13 f0       	push   $0xf013a23a
f011aeb3:	e8 ee 52 fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aeb8:	e8 0d 0f ff ff       	call   f010bdca <sys_calculate_free_frames>
f011aebd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aec0:	e8 c7 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aec5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011aec8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011aece:	83 ec 0c             	sub    $0xc,%esp
f011aed1:	50                   	push   %eax
f011aed2:	e8 1f c5 fe ff       	call   f01073f6 <kfree>
f011aed7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aeda:	e8 ad 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aedf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aee2:	74 17                	je     f011aefb <test_kmalloc_bestfit2+0xbaf>
f011aee4:	83 ec 04             	sub    $0x4,%esp
f011aee7:	68 54 a2 13 f0       	push   $0xf013a254
f011aeec:	68 97 02 00 00       	push   $0x297
f011aef1:	68 3a a2 13 f0       	push   $0xf013a23a
f011aef6:	e8 ab 52 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011aefb:	e8 ca 0e ff ff       	call   f010bdca <sys_calculate_free_frames>
f011af00:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011af03:	3d 02 02 00 00       	cmp    $0x202,%eax
f011af08:	74 17                	je     f011af21 <test_kmalloc_bestfit2+0xbd5>
f011af0a:	83 ec 04             	sub    $0x4,%esp
f011af0d:	68 08 a5 13 f0       	push   $0xf013a508
f011af12:	68 98 02 00 00       	push   $0x298
f011af17:	68 3a a2 13 f0       	push   $0xf013a23a
f011af1c:	e8 85 52 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af21:	e8 a4 0e ff ff       	call   f010bdca <sys_calculate_free_frames>
f011af26:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af29:	e8 5e 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011af31:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011af37:	83 ec 0c             	sub    $0xc,%esp
f011af3a:	50                   	push   %eax
f011af3b:	e8 b6 c4 fe ff       	call   f01073f6 <kfree>
f011af40:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af43:	e8 44 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af48:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af4b:	74 17                	je     f011af64 <test_kmalloc_bestfit2+0xc18>
f011af4d:	83 ec 04             	sub    $0x4,%esp
f011af50:	68 54 a2 13 f0       	push   $0xf013a254
f011af55:	68 9e 02 00 00       	push   $0x29e
f011af5a:	68 3a a2 13 f0       	push   $0xf013a23a
f011af5f:	e8 42 52 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011af64:	e8 61 0e ff ff       	call   f010bdca <sys_calculate_free_frames>
f011af69:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011af6c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af71:	74 17                	je     f011af8a <test_kmalloc_bestfit2+0xc3e>
f011af73:	83 ec 04             	sub    $0x4,%esp
f011af76:	68 34 a7 13 f0       	push   $0xf013a734
f011af7b:	68 9f 02 00 00       	push   $0x29f
f011af80:	68 3a a2 13 f0       	push   $0xf013a23a
f011af85:	e8 1c 52 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011af8a:	e8 3b 0e ff ff       	call   f010bdca <sys_calculate_free_frames>
f011af8f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af92:	e8 f5 8c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af97:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011af9a:	83 ec 0c             	sub    $0xc,%esp
f011af9d:	68 00 fc 1f 00       	push   $0x1ffc00
f011afa2:	e8 35 c4 fe ff       	call   f01073dc <kmalloc>
f011afa7:	83 c4 10             	add    $0x10,%esp
f011afaa:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011afb0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011afb6:	89 c1                	mov    %eax,%ecx
f011afb8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011afbf:	10 00 00 
f011afc2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011afc8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011afcd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011afd3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011afd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011afde:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011afe4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011afea:	29 d0                	sub    %edx,%eax
f011afec:	89 c3                	mov    %eax,%ebx
f011afee:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011aff5:	10 00 00 
f011aff8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011affd:	0f b6 d0             	movzbl %al,%edx
f011b000:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b006:	01 d0                	add    %edx,%eax
f011b008:	48                   	dec    %eax
f011b009:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b00f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b015:	ba 00 00 00 00       	mov    $0x0,%edx
f011b01a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b020:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b026:	29 d0                	sub    %edx,%eax
f011b028:	01 c3                	add    %eax,%ebx
f011b02a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b031:	10 00 00 
f011b034:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b039:	0f b6 c0             	movzbl %al,%eax
f011b03c:	c1 e0 04             	shl    $0x4,%eax
f011b03f:	89 c2                	mov    %eax,%edx
f011b041:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b047:	01 d0                	add    %edx,%eax
f011b049:	48                   	dec    %eax
f011b04a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b050:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b056:	ba 00 00 00 00       	mov    $0x0,%edx
f011b05b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b061:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b067:	29 d0                	sub    %edx,%eax
f011b069:	01 d8                	add    %ebx,%eax
f011b06b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b070:	39 c1                	cmp    %eax,%ecx
f011b072:	74 17                	je     f011b08b <test_kmalloc_bestfit2+0xd3f>
f011b074:	83 ec 04             	sub    $0x4,%esp
f011b077:	68 54 a6 13 f0       	push   $0xf013a654
f011b07c:	68 a5 02 00 00       	push   $0x2a5
f011b081:	68 3a a2 13 f0       	push   $0xf013a23a
f011b086:	e8 1b 51 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b08b:	e8 fc 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b090:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b093:	74 17                	je     f011b0ac <test_kmalloc_bestfit2+0xd60>
f011b095:	83 ec 04             	sub    $0x4,%esp
f011b098:	68 54 a2 13 f0       	push   $0xf013a254
f011b09d:	68 a6 02 00 00       	push   $0x2a6
f011b0a2:	68 3a a2 13 f0       	push   $0xf013a23a
f011b0a7:	e8 fa 50 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b0ac:	e8 19 0d ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b0b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b0b4:	29 c2                	sub    %eax,%edx
f011b0b6:	89 d0                	mov    %edx,%eax
f011b0b8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b0bd:	74 17                	je     f011b0d6 <test_kmalloc_bestfit2+0xd8a>
f011b0bf:	83 ec 04             	sub    $0x4,%esp
f011b0c2:	68 72 a7 13 f0       	push   $0xf013a772
f011b0c7:	68 a7 02 00 00       	push   $0x2a7
f011b0cc:	68 3a a2 13 f0       	push   $0xf013a23a
f011b0d1:	e8 d0 50 fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b0d6:	e8 ef 0c ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b0db:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b0de:	e8 a9 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b0e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011b0e6:	83 ec 0c             	sub    $0xc,%esp
f011b0e9:	68 00 18 00 00       	push   $0x1800
f011b0ee:	e8 e9 c2 fe ff       	call   f01073dc <kmalloc>
f011b0f3:	83 c4 10             	add    $0x10,%esp
f011b0f6:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b0fc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b102:	89 c1                	mov    %eax,%ecx
f011b104:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b10b:	10 00 00 
f011b10e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b114:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b119:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b11f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b125:	ba 00 00 00 00       	mov    $0x0,%edx
f011b12a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b130:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b136:	29 d0                	sub    %edx,%eax
f011b138:	89 c3                	mov    %eax,%ebx
f011b13a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b141:	10 00 00 
f011b144:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b149:	0f b6 d0             	movzbl %al,%edx
f011b14c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b152:	01 d0                	add    %edx,%eax
f011b154:	48                   	dec    %eax
f011b155:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b15b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b161:	ba 00 00 00 00       	mov    $0x0,%edx
f011b166:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b16c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b172:	29 d0                	sub    %edx,%eax
f011b174:	01 c3                	add    %eax,%ebx
f011b176:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b17d:	10 00 00 
f011b180:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b185:	0f b6 c0             	movzbl %al,%eax
f011b188:	c1 e0 04             	shl    $0x4,%eax
f011b18b:	89 c2                	mov    %eax,%edx
f011b18d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b193:	01 d0                	add    %edx,%eax
f011b195:	48                   	dec    %eax
f011b196:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b19c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b1a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1a7:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b1ad:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b1b3:	29 d0                	sub    %edx,%eax
f011b1b5:	01 d8                	add    %ebx,%eax
f011b1b7:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011b1bc:	39 c1                	cmp    %eax,%ecx
f011b1be:	74 17                	je     f011b1d7 <test_kmalloc_bestfit2+0xe8b>
f011b1c0:	83 ec 04             	sub    $0x4,%esp
f011b1c3:	68 54 a6 13 f0       	push   $0xf013a654
f011b1c8:	68 ad 02 00 00       	push   $0x2ad
f011b1cd:	68 3a a2 13 f0       	push   $0xf013a23a
f011b1d2:	e8 cf 4f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1d7:	e8 b0 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b1dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b1df:	74 17                	je     f011b1f8 <test_kmalloc_bestfit2+0xeac>
f011b1e1:	83 ec 04             	sub    $0x4,%esp
f011b1e4:	68 54 a2 13 f0       	push   $0xf013a254
f011b1e9:	68 ae 02 00 00       	push   $0x2ae
f011b1ee:	68 3a a2 13 f0       	push   $0xf013a23a
f011b1f3:	e8 ae 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011b1f8:	e8 cd 0b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b1fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b200:	29 c2                	sub    %eax,%edx
f011b202:	89 d0                	mov    %edx,%eax
f011b204:	83 f8 02             	cmp    $0x2,%eax
f011b207:	74 17                	je     f011b220 <test_kmalloc_bestfit2+0xed4>
f011b209:	83 ec 04             	sub    $0x4,%esp
f011b20c:	68 72 a7 13 f0       	push   $0xf013a772
f011b211:	68 af 02 00 00       	push   $0x2af
f011b216:	68 3a a2 13 f0       	push   $0xf013a23a
f011b21b:	e8 86 4f fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b220:	e8 a5 0b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b225:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b228:	e8 5f 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b22d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011b230:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b236:	83 ec 0c             	sub    $0xc,%esp
f011b239:	50                   	push   %eax
f011b23a:	e8 b7 c1 fe ff       	call   f01073f6 <kfree>
f011b23f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b242:	e8 45 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b247:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b24a:	74 17                	je     f011b263 <test_kmalloc_bestfit2+0xf17>
f011b24c:	83 ec 04             	sub    $0x4,%esp
f011b24f:	68 54 a2 13 f0       	push   $0xf013a254
f011b254:	68 b5 02 00 00       	push   $0x2b5
f011b259:	68 3a a2 13 f0       	push   $0xf013a23a
f011b25e:	e8 43 4f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b263:	e8 62 0b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b268:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b26b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b270:	74 17                	je     f011b289 <test_kmalloc_bestfit2+0xf3d>
f011b272:	83 ec 04             	sub    $0x4,%esp
f011b275:	68 34 a7 13 f0       	push   $0xf013a734
f011b27a:	68 b6 02 00 00       	push   $0x2b6
f011b27f:	68 3a a2 13 f0       	push   $0xf013a23a
f011b284:	e8 1d 4f fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b289:	e8 3c 0b ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b28e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b291:	e8 f6 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b296:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011b299:	83 ec 0c             	sub    $0xc,%esp
f011b29c:	68 00 fc 2f 00       	push   $0x2ffc00
f011b2a1:	e8 36 c1 fe ff       	call   f01073dc <kmalloc>
f011b2a6:	83 c4 10             	add    $0x10,%esp
f011b2a9:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b2af:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b2b5:	89 c1                	mov    %eax,%ecx
f011b2b7:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b2be:	10 00 00 
f011b2c1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b2c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2cc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b2d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b2d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2dd:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b2e3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b2e9:	29 d0                	sub    %edx,%eax
f011b2eb:	89 c3                	mov    %eax,%ebx
f011b2ed:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b2f4:	10 00 00 
f011b2f7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b2fc:	0f b6 d0             	movzbl %al,%edx
f011b2ff:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b305:	01 d0                	add    %edx,%eax
f011b307:	48                   	dec    %eax
f011b308:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b30e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b314:	ba 00 00 00 00       	mov    $0x0,%edx
f011b319:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b31f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b325:	29 d0                	sub    %edx,%eax
f011b327:	01 c3                	add    %eax,%ebx
f011b329:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b330:	10 00 00 
f011b333:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b338:	0f b6 c0             	movzbl %al,%eax
f011b33b:	c1 e0 04             	shl    $0x4,%eax
f011b33e:	89 c2                	mov    %eax,%edx
f011b340:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b346:	01 d0                	add    %edx,%eax
f011b348:	48                   	dec    %eax
f011b349:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b34f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b355:	ba 00 00 00 00       	mov    $0x0,%edx
f011b35a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b360:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b366:	29 d0                	sub    %edx,%eax
f011b368:	01 d8                	add    %ebx,%eax
f011b36a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b36f:	39 c1                	cmp    %eax,%ecx
f011b371:	74 17                	je     f011b38a <test_kmalloc_bestfit2+0x103e>
f011b373:	83 ec 04             	sub    $0x4,%esp
f011b376:	68 54 a6 13 f0       	push   $0xf013a654
f011b37b:	68 bc 02 00 00       	push   $0x2bc
f011b380:	68 3a a2 13 f0       	push   $0xf013a23a
f011b385:	e8 1c 4e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b38a:	e8 fd 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b38f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b392:	74 17                	je     f011b3ab <test_kmalloc_bestfit2+0x105f>
f011b394:	83 ec 04             	sub    $0x4,%esp
f011b397:	68 54 a2 13 f0       	push   $0xf013a254
f011b39c:	68 bd 02 00 00       	push   $0x2bd
f011b3a1:	68 3a a2 13 f0       	push   $0xf013a23a
f011b3a6:	e8 fb 4d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b3ab:	e8 1a 0a ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b3b0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b3b3:	29 c2                	sub    %eax,%edx
f011b3b5:	89 d0                	mov    %edx,%eax
f011b3b7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b3bc:	74 17                	je     f011b3d5 <test_kmalloc_bestfit2+0x1089>
f011b3be:	83 ec 04             	sub    $0x4,%esp
f011b3c1:	68 34 a7 13 f0       	push   $0xf013a734
f011b3c6:	68 be 02 00 00       	push   $0x2be
f011b3cb:	68 3a a2 13 f0       	push   $0xf013a23a
f011b3d0:	e8 d1 4d fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011b3d5:	e8 f0 09 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b3da:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3dd:	e8 aa 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b3e2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011b3e5:	83 ec 0c             	sub    $0xc,%esp
f011b3e8:	68 00 fc 3f 00       	push   $0x3ffc00
f011b3ed:	e8 ea bf fe ff       	call   f01073dc <kmalloc>
f011b3f2:	83 c4 10             	add    $0x10,%esp
f011b3f5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b3fb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b401:	89 c1                	mov    %eax,%ecx
f011b403:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b40a:	10 00 00 
f011b40d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b413:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b418:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b41e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b424:	ba 00 00 00 00       	mov    $0x0,%edx
f011b429:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b42f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b435:	29 d0                	sub    %edx,%eax
f011b437:	89 c3                	mov    %eax,%ebx
f011b439:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b440:	10 00 00 
f011b443:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b448:	0f b6 d0             	movzbl %al,%edx
f011b44b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b451:	01 d0                	add    %edx,%eax
f011b453:	48                   	dec    %eax
f011b454:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b45a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b460:	ba 00 00 00 00       	mov    $0x0,%edx
f011b465:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b46b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b471:	29 d0                	sub    %edx,%eax
f011b473:	01 c3                	add    %eax,%ebx
f011b475:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b47c:	10 00 00 
f011b47f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b484:	0f b6 c0             	movzbl %al,%eax
f011b487:	c1 e0 04             	shl    $0x4,%eax
f011b48a:	89 c2                	mov    %eax,%edx
f011b48c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b492:	01 d0                	add    %edx,%eax
f011b494:	48                   	dec    %eax
f011b495:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b49b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b4a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4a6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b4ac:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b4b2:	29 d0                	sub    %edx,%eax
f011b4b4:	01 d8                	add    %ebx,%eax
f011b4b6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b4bb:	39 c1                	cmp    %eax,%ecx
f011b4bd:	74 17                	je     f011b4d6 <test_kmalloc_bestfit2+0x118a>
f011b4bf:	83 ec 04             	sub    $0x4,%esp
f011b4c2:	68 54 a6 13 f0       	push   $0xf013a654
f011b4c7:	68 c4 02 00 00       	push   $0x2c4
f011b4cc:	68 3a a2 13 f0       	push   $0xf013a23a
f011b4d1:	e8 d0 4c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4d6:	e8 b1 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b4db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4de:	74 17                	je     f011b4f7 <test_kmalloc_bestfit2+0x11ab>
f011b4e0:	83 ec 04             	sub    $0x4,%esp
f011b4e3:	68 54 a2 13 f0       	push   $0xf013a254
f011b4e8:	68 c5 02 00 00       	push   $0x2c5
f011b4ed:	68 3a a2 13 f0       	push   $0xf013a23a
f011b4f2:	e8 af 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b4f7:	e8 ce 08 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b4fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b4ff:	29 c2                	sub    %eax,%edx
f011b501:	89 d0                	mov    %edx,%eax
f011b503:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b508:	74 17                	je     f011b521 <test_kmalloc_bestfit2+0x11d5>
f011b50a:	83 ec 04             	sub    $0x4,%esp
f011b50d:	68 34 a7 13 f0       	push   $0xf013a734
f011b512:	68 c6 02 00 00       	push   $0x2c6
f011b517:	68 3a a2 13 f0       	push   $0xf013a23a
f011b51c:	e8 85 4c fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011b521:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011b528:	10 00 00 
f011b52b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011b531:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b536:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011b53c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b542:	ba 00 00 00 00       	mov    $0x0,%edx
f011b547:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011b54d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b553:	29 d0                	sub    %edx,%eax
f011b555:	89 c1                	mov    %eax,%ecx
f011b557:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011b55e:	10 00 00 
f011b561:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b566:	0f b6 d0             	movzbl %al,%edx
f011b569:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011b56f:	01 d0                	add    %edx,%eax
f011b571:	48                   	dec    %eax
f011b572:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011b578:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b57e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b583:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011b589:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b58f:	29 d0                	sub    %edx,%eax
f011b591:	01 c1                	add    %eax,%ecx
f011b593:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011b59a:	10 00 00 
f011b59d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b5a2:	0f b6 c0             	movzbl %al,%eax
f011b5a5:	c1 e0 04             	shl    $0x4,%eax
f011b5a8:	89 c2                	mov    %eax,%edx
f011b5aa:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011b5b0:	01 d0                	add    %edx,%eax
f011b5b2:	48                   	dec    %eax
f011b5b3:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011b5b9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b5bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5c4:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011b5ca:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b5d0:	29 d0                	sub    %edx,%eax
f011b5d2:	01 c8                	add    %ecx,%eax
f011b5d4:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011b5d9:	29 c2                	sub    %eax,%edx
f011b5db:	89 d0                	mov    %edx,%eax
f011b5dd:	83 ec 0c             	sub    $0xc,%esp
f011b5e0:	50                   	push   %eax
f011b5e1:	e8 f6 bd fe ff       	call   f01073dc <kmalloc>
f011b5e6:	83 c4 10             	add    $0x10,%esp
f011b5e9:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011b5ef:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011b5f5:	85 c0                	test   %eax,%eax
f011b5f7:	74 17                	je     f011b610 <test_kmalloc_bestfit2+0x12c4>
f011b5f9:	83 ec 04             	sub    $0x4,%esp
f011b5fc:	68 84 a7 13 f0       	push   $0xf013a784
f011b601:	68 ce 02 00 00       	push   $0x2ce
f011b606:	68 3a a2 13 f0       	push   $0xf013a23a
f011b60b:	e8 96 4b fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011b610:	83 ec 0c             	sub    $0xc,%esp
f011b613:	68 e8 a7 13 f0       	push   $0xf013a7e8
f011b618:	e8 10 56 fe ff       	call   f0100c2d <cprintf>
f011b61d:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011b620:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b625:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b628:	5b                   	pop    %ebx
f011b629:	5f                   	pop    %edi
f011b62a:	5d                   	pop    %ebp
f011b62b:	c3                   	ret    

f011b62c <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011b62c:	55                   	push   %ebp
f011b62d:	89 e5                	mov    %esp,%ebp
f011b62f:	57                   	push   %edi
f011b630:	53                   	push   %ebx
f011b631:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b637:	83 ec 0c             	sub    $0xc,%esp
f011b63a:	68 7c a1 13 f0       	push   $0xf013a17c
f011b63f:	e8 e9 55 fe ff       	call   f0100c2d <cprintf>
f011b644:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b647:	83 ec 0c             	sub    $0xc,%esp
f011b64a:	68 ac a1 13 f0       	push   $0xf013a1ac
f011b64f:	e8 d9 55 fe ff       	call   f0100c2d <cprintf>
f011b654:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b657:	83 ec 0c             	sub    $0xc,%esp
f011b65a:	68 7c a1 13 f0       	push   $0xf013a17c
f011b65f:	e8 c9 55 fe ff       	call   f0100c2d <cprintf>
f011b664:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b667:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b66d:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b672:	b8 00 00 00 00       	mov    $0x0,%eax
f011b677:	89 d7                	mov    %edx,%edi
f011b679:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b67b:	e8 4a 07 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b680:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b683:	e8 04 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b688:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011b68b:	83 ec 0c             	sub    $0xc,%esp
f011b68e:	68 00 fc 0f 00       	push   $0xffc00
f011b693:	e8 44 bd fe ff       	call   f01073dc <kmalloc>
f011b698:	83 c4 10             	add    $0x10,%esp
f011b69b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b6a1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b6a7:	89 c1                	mov    %eax,%ecx
f011b6a9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b6b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b6b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b6b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b6bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6be:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6c3:	f7 75 ec             	divl   -0x14(%ebp)
f011b6c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b6c9:	29 d0                	sub    %edx,%eax
f011b6cb:	89 c3                	mov    %eax,%ebx
f011b6cd:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b6d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b6d9:	0f b6 d0             	movzbl %al,%edx
f011b6dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b6df:	01 d0                	add    %edx,%eax
f011b6e1:	48                   	dec    %eax
f011b6e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b6e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b6e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ed:	f7 75 e4             	divl   -0x1c(%ebp)
f011b6f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b6f3:	29 d0                	sub    %edx,%eax
f011b6f5:	01 c3                	add    %eax,%ebx
f011b6f7:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b6fe:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b703:	0f b6 c0             	movzbl %al,%eax
f011b706:	c1 e0 04             	shl    $0x4,%eax
f011b709:	89 c2                	mov    %eax,%edx
f011b70b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b70e:	01 d0                	add    %edx,%eax
f011b710:	48                   	dec    %eax
f011b711:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b714:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b717:	ba 00 00 00 00       	mov    $0x0,%edx
f011b71c:	f7 75 dc             	divl   -0x24(%ebp)
f011b71f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b722:	29 d0                	sub    %edx,%eax
f011b724:	01 d8                	add    %ebx,%eax
f011b726:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b72b:	39 c1                	cmp    %eax,%ecx
f011b72d:	74 17                	je     f011b746 <test_kmalloc_firstfit1+0x11a>
f011b72f:	83 ec 04             	sub    $0x4,%esp
f011b732:	68 54 a6 13 f0       	push   $0xf013a654
f011b737:	68 e6 02 00 00       	push   $0x2e6
f011b73c:	68 3a a2 13 f0       	push   $0xf013a23a
f011b741:	e8 60 4a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b746:	e8 41 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b74b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b74e:	74 17                	je     f011b767 <test_kmalloc_firstfit1+0x13b>
f011b750:	83 ec 04             	sub    $0x4,%esp
f011b753:	68 54 a2 13 f0       	push   $0xf013a254
f011b758:	68 e7 02 00 00       	push   $0x2e7
f011b75d:	68 3a a2 13 f0       	push   $0xf013a23a
f011b762:	e8 3f 4a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b767:	e8 5e 06 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b76c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b76f:	29 c2                	sub    %eax,%edx
f011b771:	89 d0                	mov    %edx,%eax
f011b773:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b778:	74 17                	je     f011b791 <test_kmalloc_firstfit1+0x165>
f011b77a:	83 ec 04             	sub    $0x4,%esp
f011b77d:	68 84 a6 13 f0       	push   $0xf013a684
f011b782:	68 e8 02 00 00       	push   $0x2e8
f011b787:	68 3a a2 13 f0       	push   $0xf013a23a
f011b78c:	e8 15 4a fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b791:	e8 34 06 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b796:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b799:	e8 ee 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b79e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011b7a1:	83 ec 0c             	sub    $0xc,%esp
f011b7a4:	68 00 fc 0f 00       	push   $0xffc00
f011b7a9:	e8 2e bc fe ff       	call   f01073dc <kmalloc>
f011b7ae:	83 c4 10             	add    $0x10,%esp
f011b7b1:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011b7b7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b7bd:	89 c1                	mov    %eax,%ecx
f011b7bf:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b7c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b7c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b7d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7d9:	f7 75 d4             	divl   -0x2c(%ebp)
f011b7dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7df:	29 d0                	sub    %edx,%eax
f011b7e1:	89 c3                	mov    %eax,%ebx
f011b7e3:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b7ea:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b7ef:	0f b6 d0             	movzbl %al,%edx
f011b7f2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b7f5:	01 d0                	add    %edx,%eax
f011b7f7:	48                   	dec    %eax
f011b7f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b7fb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011b803:	f7 75 cc             	divl   -0x34(%ebp)
f011b806:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b809:	29 d0                	sub    %edx,%eax
f011b80b:	01 c3                	add    %eax,%ebx
f011b80d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b814:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b819:	0f b6 c0             	movzbl %al,%eax
f011b81c:	c1 e0 04             	shl    $0x4,%eax
f011b81f:	89 c2                	mov    %eax,%edx
f011b821:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b824:	01 d0                	add    %edx,%eax
f011b826:	48                   	dec    %eax
f011b827:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b82a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b82d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b832:	f7 75 c4             	divl   -0x3c(%ebp)
f011b835:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b838:	29 d0                	sub    %edx,%eax
f011b83a:	01 d8                	add    %ebx,%eax
f011b83c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011b841:	39 c1                	cmp    %eax,%ecx
f011b843:	74 17                	je     f011b85c <test_kmalloc_firstfit1+0x230>
f011b845:	83 ec 04             	sub    $0x4,%esp
f011b848:	68 54 a6 13 f0       	push   $0xf013a654
f011b84d:	68 ee 02 00 00       	push   $0x2ee
f011b852:	68 3a a2 13 f0       	push   $0xf013a23a
f011b857:	e8 4a 49 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b85c:	e8 2b 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b861:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b864:	74 17                	je     f011b87d <test_kmalloc_firstfit1+0x251>
f011b866:	83 ec 04             	sub    $0x4,%esp
f011b869:	68 54 a2 13 f0       	push   $0xf013a254
f011b86e:	68 ef 02 00 00       	push   $0x2ef
f011b873:	68 3a a2 13 f0       	push   $0xf013a23a
f011b878:	e8 29 49 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b87d:	e8 48 05 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b882:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b885:	29 c2                	sub    %eax,%edx
f011b887:	89 d0                	mov    %edx,%eax
f011b889:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b88e:	74 17                	je     f011b8a7 <test_kmalloc_firstfit1+0x27b>
f011b890:	83 ec 04             	sub    $0x4,%esp
f011b893:	68 84 a6 13 f0       	push   $0xf013a684
f011b898:	68 f0 02 00 00       	push   $0x2f0
f011b89d:	68 3a a2 13 f0       	push   $0xf013a23a
f011b8a2:	e8 ff 48 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b8a7:	e8 1e 05 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b8ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8af:	e8 d8 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b8b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011b8b7:	83 ec 0c             	sub    $0xc,%esp
f011b8ba:	68 00 fc 0f 00       	push   $0xffc00
f011b8bf:	e8 18 bb fe ff       	call   f01073dc <kmalloc>
f011b8c4:	83 c4 10             	add    $0x10,%esp
f011b8c7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b8cd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b8d3:	89 c1                	mov    %eax,%ecx
f011b8d5:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b8dc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b8df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8e4:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b8e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8ef:	f7 75 bc             	divl   -0x44(%ebp)
f011b8f2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8f5:	29 d0                	sub    %edx,%eax
f011b8f7:	89 c3                	mov    %eax,%ebx
f011b8f9:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b900:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b905:	0f b6 d0             	movzbl %al,%edx
f011b908:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b90b:	01 d0                	add    %edx,%eax
f011b90d:	48                   	dec    %eax
f011b90e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b911:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b914:	ba 00 00 00 00       	mov    $0x0,%edx
f011b919:	f7 75 b4             	divl   -0x4c(%ebp)
f011b91c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b91f:	29 d0                	sub    %edx,%eax
f011b921:	01 c3                	add    %eax,%ebx
f011b923:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b92a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b92f:	0f b6 c0             	movzbl %al,%eax
f011b932:	c1 e0 04             	shl    $0x4,%eax
f011b935:	89 c2                	mov    %eax,%edx
f011b937:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b93a:	01 d0                	add    %edx,%eax
f011b93c:	48                   	dec    %eax
f011b93d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b940:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b943:	ba 00 00 00 00       	mov    $0x0,%edx
f011b948:	f7 75 ac             	divl   -0x54(%ebp)
f011b94b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b94e:	29 d0                	sub    %edx,%eax
f011b950:	01 d8                	add    %ebx,%eax
f011b952:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b957:	39 c1                	cmp    %eax,%ecx
f011b959:	74 17                	je     f011b972 <test_kmalloc_firstfit1+0x346>
f011b95b:	83 ec 04             	sub    $0x4,%esp
f011b95e:	68 54 a6 13 f0       	push   $0xf013a654
f011b963:	68 f6 02 00 00       	push   $0x2f6
f011b968:	68 3a a2 13 f0       	push   $0xf013a23a
f011b96d:	e8 34 48 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b972:	e8 15 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b977:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b97a:	74 17                	je     f011b993 <test_kmalloc_firstfit1+0x367>
f011b97c:	83 ec 04             	sub    $0x4,%esp
f011b97f:	68 54 a2 13 f0       	push   $0xf013a254
f011b984:	68 f7 02 00 00       	push   $0x2f7
f011b989:	68 3a a2 13 f0       	push   $0xf013a23a
f011b98e:	e8 13 48 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b993:	e8 32 04 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b998:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b99b:	29 c2                	sub    %eax,%edx
f011b99d:	89 d0                	mov    %edx,%eax
f011b99f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b9a4:	74 17                	je     f011b9bd <test_kmalloc_firstfit1+0x391>
f011b9a6:	83 ec 04             	sub    $0x4,%esp
f011b9a9:	68 84 a6 13 f0       	push   $0xf013a684
f011b9ae:	68 f8 02 00 00       	push   $0x2f8
f011b9b3:	68 3a a2 13 f0       	push   $0xf013a23a
f011b9b8:	e8 e9 47 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b9bd:	e8 08 04 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011b9c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b9c5:	e8 c2 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b9ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011b9cd:	83 ec 0c             	sub    $0xc,%esp
f011b9d0:	68 00 fc 0f 00       	push   $0xffc00
f011b9d5:	e8 02 ba fe ff       	call   f01073dc <kmalloc>
f011b9da:	83 c4 10             	add    $0x10,%esp
f011b9dd:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011b9e3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b9e9:	89 c1                	mov    %eax,%ecx
f011b9eb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b9f2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b9f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9fa:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b9fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ba00:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba05:	f7 75 a4             	divl   -0x5c(%ebp)
f011ba08:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ba0b:	29 d0                	sub    %edx,%eax
f011ba0d:	89 c3                	mov    %eax,%ebx
f011ba0f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ba16:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ba1b:	0f b6 d0             	movzbl %al,%edx
f011ba1e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ba21:	01 d0                	add    %edx,%eax
f011ba23:	48                   	dec    %eax
f011ba24:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ba27:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ba2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba2f:	f7 75 9c             	divl   -0x64(%ebp)
f011ba32:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ba35:	29 d0                	sub    %edx,%eax
f011ba37:	01 c3                	add    %eax,%ebx
f011ba39:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ba40:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ba45:	0f b6 c0             	movzbl %al,%eax
f011ba48:	c1 e0 04             	shl    $0x4,%eax
f011ba4b:	89 c2                	mov    %eax,%edx
f011ba4d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ba50:	01 d0                	add    %edx,%eax
f011ba52:	48                   	dec    %eax
f011ba53:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ba56:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba59:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba5e:	f7 75 94             	divl   -0x6c(%ebp)
f011ba61:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba64:	29 d0                	sub    %edx,%eax
f011ba66:	01 d8                	add    %ebx,%eax
f011ba68:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ba6d:	39 c1                	cmp    %eax,%ecx
f011ba6f:	74 17                	je     f011ba88 <test_kmalloc_firstfit1+0x45c>
f011ba71:	83 ec 04             	sub    $0x4,%esp
f011ba74:	68 54 a6 13 f0       	push   $0xf013a654
f011ba79:	68 fe 02 00 00       	push   $0x2fe
f011ba7e:	68 3a a2 13 f0       	push   $0xf013a23a
f011ba83:	e8 1e 47 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba88:	e8 ff 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ba90:	74 17                	je     f011baa9 <test_kmalloc_firstfit1+0x47d>
f011ba92:	83 ec 04             	sub    $0x4,%esp
f011ba95:	68 54 a2 13 f0       	push   $0xf013a254
f011ba9a:	68 ff 02 00 00       	push   $0x2ff
f011ba9f:	68 3a a2 13 f0       	push   $0xf013a23a
f011baa4:	e8 fd 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011baa9:	e8 1c 03 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011baae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bab1:	29 c2                	sub    %eax,%edx
f011bab3:	89 d0                	mov    %edx,%eax
f011bab5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011baba:	74 17                	je     f011bad3 <test_kmalloc_firstfit1+0x4a7>
f011babc:	83 ec 04             	sub    $0x4,%esp
f011babf:	68 84 a6 13 f0       	push   $0xf013a684
f011bac4:	68 00 03 00 00       	push   $0x300
f011bac9:	68 3a a2 13 f0       	push   $0xf013a23a
f011bace:	e8 d3 46 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bad3:	e8 f2 02 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011bad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011badb:	e8 ac 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011bae3:	83 ec 0c             	sub    $0xc,%esp
f011bae6:	68 00 fc 1f 00       	push   $0x1ffc00
f011baeb:	e8 ec b8 fe ff       	call   f01073dc <kmalloc>
f011baf0:	83 c4 10             	add    $0x10,%esp
f011baf3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011baf9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011baff:	89 c1                	mov    %eax,%ecx
f011bb01:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bb08:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bb0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb10:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bb13:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bb16:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb1b:	f7 75 8c             	divl   -0x74(%ebp)
f011bb1e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bb21:	29 d0                	sub    %edx,%eax
f011bb23:	89 c3                	mov    %eax,%ebx
f011bb25:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bb2c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bb31:	0f b6 d0             	movzbl %al,%edx
f011bb34:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bb37:	01 d0                	add    %edx,%eax
f011bb39:	48                   	dec    %eax
f011bb3a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bb3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb40:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb45:	f7 75 84             	divl   -0x7c(%ebp)
f011bb48:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb4b:	29 d0                	sub    %edx,%eax
f011bb4d:	01 c3                	add    %eax,%ebx
f011bb4f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bb56:	10 00 00 
f011bb59:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bb5e:	0f b6 c0             	movzbl %al,%eax
f011bb61:	c1 e0 04             	shl    $0x4,%eax
f011bb64:	89 c2                	mov    %eax,%edx
f011bb66:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bb6c:	01 d0                	add    %edx,%eax
f011bb6e:	48                   	dec    %eax
f011bb6f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bb75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb80:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bb86:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb8c:	29 d0                	sub    %edx,%eax
f011bb8e:	01 d8                	add    %ebx,%eax
f011bb90:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bb95:	39 c1                	cmp    %eax,%ecx
f011bb97:	74 17                	je     f011bbb0 <test_kmalloc_firstfit1+0x584>
f011bb99:	83 ec 04             	sub    $0x4,%esp
f011bb9c:	68 54 a6 13 f0       	push   $0xf013a654
f011bba1:	68 06 03 00 00       	push   $0x306
f011bba6:	68 3a a2 13 f0       	push   $0xf013a23a
f011bbab:	e8 f6 45 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbb0:	e8 d7 80 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bbb5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bbb8:	74 17                	je     f011bbd1 <test_kmalloc_firstfit1+0x5a5>
f011bbba:	83 ec 04             	sub    $0x4,%esp
f011bbbd:	68 54 a2 13 f0       	push   $0xf013a254
f011bbc2:	68 07 03 00 00       	push   $0x307
f011bbc7:	68 3a a2 13 f0       	push   $0xf013a23a
f011bbcc:	e8 d5 45 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bbd1:	e8 f4 01 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011bbd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bbd9:	29 c2                	sub    %eax,%edx
f011bbdb:	89 d0                	mov    %edx,%eax
f011bbdd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bbe2:	74 17                	je     f011bbfb <test_kmalloc_firstfit1+0x5cf>
f011bbe4:	83 ec 04             	sub    $0x4,%esp
f011bbe7:	68 84 a6 13 f0       	push   $0xf013a684
f011bbec:	68 08 03 00 00       	push   $0x308
f011bbf1:	68 3a a2 13 f0       	push   $0xf013a23a
f011bbf6:	e8 ab 45 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bbfb:	e8 ca 01 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011bc00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc03:	e8 84 80 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bc08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011bc0b:	83 ec 0c             	sub    $0xc,%esp
f011bc0e:	68 00 fc 1f 00       	push   $0x1ffc00
f011bc13:	e8 c4 b7 fe ff       	call   f01073dc <kmalloc>
f011bc18:	83 c4 10             	add    $0x10,%esp
f011bc1b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011bc21:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bc27:	89 c1                	mov    %eax,%ecx
f011bc29:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bc30:	10 00 00 
f011bc33:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bc39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc3e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bc44:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc4f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bc55:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc5b:	29 d0                	sub    %edx,%eax
f011bc5d:	89 c3                	mov    %eax,%ebx
f011bc5f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bc66:	10 00 00 
f011bc69:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bc6e:	0f b6 d0             	movzbl %al,%edx
f011bc71:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bc77:	01 d0                	add    %edx,%eax
f011bc79:	48                   	dec    %eax
f011bc7a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bc80:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bc86:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc8b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bc91:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bc97:	29 d0                	sub    %edx,%eax
f011bc99:	01 c3                	add    %eax,%ebx
f011bc9b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bca2:	10 00 00 
f011bca5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bcaa:	0f b6 c0             	movzbl %al,%eax
f011bcad:	c1 e0 04             	shl    $0x4,%eax
f011bcb0:	89 c2                	mov    %eax,%edx
f011bcb2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bcb8:	01 d0                	add    %edx,%eax
f011bcba:	48                   	dec    %eax
f011bcbb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bcc1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bcc7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bccc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bcd2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bcd8:	29 d0                	sub    %edx,%eax
f011bcda:	01 d8                	add    %ebx,%eax
f011bcdc:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011bce1:	39 c1                	cmp    %eax,%ecx
f011bce3:	74 17                	je     f011bcfc <test_kmalloc_firstfit1+0x6d0>
f011bce5:	83 ec 04             	sub    $0x4,%esp
f011bce8:	68 54 a6 13 f0       	push   $0xf013a654
f011bced:	68 0e 03 00 00       	push   $0x30e
f011bcf2:	68 3a a2 13 f0       	push   $0xf013a23a
f011bcf7:	e8 aa 44 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcfc:	e8 8b 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bd01:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bd04:	74 17                	je     f011bd1d <test_kmalloc_firstfit1+0x6f1>
f011bd06:	83 ec 04             	sub    $0x4,%esp
f011bd09:	68 54 a2 13 f0       	push   $0xf013a254
f011bd0e:	68 0f 03 00 00       	push   $0x30f
f011bd13:	68 3a a2 13 f0       	push   $0xf013a23a
f011bd18:	e8 89 44 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bd1d:	e8 a8 00 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011bd22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bd25:	29 c2                	sub    %eax,%edx
f011bd27:	89 d0                	mov    %edx,%eax
f011bd29:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bd2e:	74 17                	je     f011bd47 <test_kmalloc_firstfit1+0x71b>
f011bd30:	83 ec 04             	sub    $0x4,%esp
f011bd33:	68 84 a6 13 f0       	push   $0xf013a684
f011bd38:	68 10 03 00 00       	push   $0x310
f011bd3d:	68 3a a2 13 f0       	push   $0xf013a23a
f011bd42:	e8 5f 44 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd47:	e8 7e 00 ff ff       	call   f010bdca <sys_calculate_free_frames>
f011bd4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd4f:	e8 38 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bd54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011bd57:	83 ec 0c             	sub    $0xc,%esp
f011bd5a:	68 00 fc 2f 00       	push   $0x2ffc00
f011bd5f:	e8 78 b6 fe ff       	call   f01073dc <kmalloc>
f011bd64:	83 c4 10             	add    $0x10,%esp
f011bd67:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011bd6d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bd73:	89 c1                	mov    %eax,%ecx
f011bd75:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bd7c:	10 00 00 
f011bd7f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011bd85:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd8a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bd90:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bd96:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd9b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bda1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bda7:	29 d0                	sub    %edx,%eax
f011bda9:	89 c3                	mov    %eax,%ebx
f011bdab:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bdb2:	10 00 00 
f011bdb5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bdba:	0f b6 d0             	movzbl %al,%edx
f011bdbd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bdc3:	01 d0                	add    %edx,%eax
f011bdc5:	48                   	dec    %eax
f011bdc6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bdcc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bdd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdd7:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bddd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bde3:	29 d0                	sub    %edx,%eax
f011bde5:	01 c3                	add    %eax,%ebx
f011bde7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bdee:	10 00 00 
f011bdf1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bdf6:	0f b6 c0             	movzbl %al,%eax
f011bdf9:	c1 e0 04             	shl    $0x4,%eax
f011bdfc:	89 c2                	mov    %eax,%edx
f011bdfe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011be04:	01 d0                	add    %edx,%eax
f011be06:	48                   	dec    %eax
f011be07:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011be0d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011be13:	ba 00 00 00 00       	mov    $0x0,%edx
f011be18:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011be1e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011be24:	29 d0                	sub    %edx,%eax
f011be26:	01 d8                	add    %ebx,%eax
f011be28:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011be2d:	39 c1                	cmp    %eax,%ecx
f011be2f:	74 17                	je     f011be48 <test_kmalloc_firstfit1+0x81c>
f011be31:	83 ec 04             	sub    $0x4,%esp
f011be34:	68 54 a6 13 f0       	push   $0xf013a654
f011be39:	68 16 03 00 00       	push   $0x316
f011be3e:	68 3a a2 13 f0       	push   $0xf013a23a
f011be43:	e8 5e 43 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be48:	e8 3f 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be4d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011be50:	74 17                	je     f011be69 <test_kmalloc_firstfit1+0x83d>
f011be52:	83 ec 04             	sub    $0x4,%esp
f011be55:	68 54 a2 13 f0       	push   $0xf013a254
f011be5a:	68 17 03 00 00       	push   $0x317
f011be5f:	68 3a a2 13 f0       	push   $0xf013a23a
f011be64:	e8 3d 43 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011be69:	e8 5c ff fe ff       	call   f010bdca <sys_calculate_free_frames>
f011be6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011be71:	29 c2                	sub    %eax,%edx
f011be73:	89 d0                	mov    %edx,%eax
f011be75:	3d 00 03 00 00       	cmp    $0x300,%eax
f011be7a:	74 17                	je     f011be93 <test_kmalloc_firstfit1+0x867>
f011be7c:	83 ec 04             	sub    $0x4,%esp
f011be7f:	68 84 a6 13 f0       	push   $0xf013a684
f011be84:	68 18 03 00 00       	push   $0x318
f011be89:	68 3a a2 13 f0       	push   $0xf013a23a
f011be8e:	e8 13 43 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011be93:	e8 32 ff fe ff       	call   f010bdca <sys_calculate_free_frames>
f011be98:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be9b:	e8 ec 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bea0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011bea3:	83 ec 0c             	sub    $0xc,%esp
f011bea6:	68 00 fc 2f 00       	push   $0x2ffc00
f011beab:	e8 2c b5 fe ff       	call   f01073dc <kmalloc>
f011beb0:	83 c4 10             	add    $0x10,%esp
f011beb3:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011beb9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011bebf:	89 c1                	mov    %eax,%ecx
f011bec1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011bec8:	10 00 00 
f011becb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011bed1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bed6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011bedc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bee2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bee7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011beed:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bef3:	29 d0                	sub    %edx,%eax
f011bef5:	89 c3                	mov    %eax,%ebx
f011bef7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011befe:	10 00 00 
f011bf01:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bf06:	0f b6 d0             	movzbl %al,%edx
f011bf09:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bf0f:	01 d0                	add    %edx,%eax
f011bf11:	48                   	dec    %eax
f011bf12:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bf18:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bf1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf23:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bf29:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011bf2f:	29 d0                	sub    %edx,%eax
f011bf31:	01 c3                	add    %eax,%ebx
f011bf33:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bf3a:	10 00 00 
f011bf3d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bf42:	0f b6 c0             	movzbl %al,%eax
f011bf45:	c1 e0 04             	shl    $0x4,%eax
f011bf48:	89 c2                	mov    %eax,%edx
f011bf4a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bf50:	01 d0                	add    %edx,%eax
f011bf52:	48                   	dec    %eax
f011bf53:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bf59:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bf5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf64:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bf6a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bf70:	29 d0                	sub    %edx,%eax
f011bf72:	01 d8                	add    %ebx,%eax
f011bf74:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011bf79:	39 c1                	cmp    %eax,%ecx
f011bf7b:	74 17                	je     f011bf94 <test_kmalloc_firstfit1+0x968>
f011bf7d:	83 ec 04             	sub    $0x4,%esp
f011bf80:	68 54 a6 13 f0       	push   $0xf013a654
f011bf85:	68 1e 03 00 00       	push   $0x31e
f011bf8a:	68 3a a2 13 f0       	push   $0xf013a23a
f011bf8f:	e8 12 42 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf94:	e8 f3 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bf9c:	74 17                	je     f011bfb5 <test_kmalloc_firstfit1+0x989>
f011bf9e:	83 ec 04             	sub    $0x4,%esp
f011bfa1:	68 54 a2 13 f0       	push   $0xf013a254
f011bfa6:	68 1f 03 00 00       	push   $0x31f
f011bfab:	68 3a a2 13 f0       	push   $0xf013a23a
f011bfb0:	e8 f1 41 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011bfb5:	e8 10 fe fe ff       	call   f010bdca <sys_calculate_free_frames>
f011bfba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bfbd:	29 c2                	sub    %eax,%edx
f011bfbf:	89 d0                	mov    %edx,%eax
f011bfc1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bfc6:	74 17                	je     f011bfdf <test_kmalloc_firstfit1+0x9b3>
f011bfc8:	83 ec 04             	sub    $0x4,%esp
f011bfcb:	68 84 a6 13 f0       	push   $0xf013a684
f011bfd0:	68 20 03 00 00       	push   $0x320
f011bfd5:	68 3a a2 13 f0       	push   $0xf013a23a
f011bfda:	e8 c7 41 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bfdf:	e8 e6 fd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011bfe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bfe7:	e8 a0 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bfec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011bfef:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bff5:	83 ec 0c             	sub    $0xc,%esp
f011bff8:	50                   	push   %eax
f011bff9:	e8 f8 b3 fe ff       	call   f01073f6 <kfree>
f011bffe:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c001:	e8 86 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c006:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c009:	74 17                	je     f011c022 <test_kmalloc_firstfit1+0x9f6>
f011c00b:	83 ec 04             	sub    $0x4,%esp
f011c00e:	68 54 a2 13 f0       	push   $0xf013a254
f011c013:	68 29 03 00 00       	push   $0x329
f011c018:	68 3a a2 13 f0       	push   $0xf013a23a
f011c01d:	e8 84 41 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c022:	e8 a3 fd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c027:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c02a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c02f:	74 17                	je     f011c048 <test_kmalloc_firstfit1+0xa1c>
f011c031:	83 ec 04             	sub    $0x4,%esp
f011c034:	68 97 a6 13 f0       	push   $0xf013a697
f011c039:	68 2a 03 00 00       	push   $0x32a
f011c03e:	68 3a a2 13 f0       	push   $0xf013a23a
f011c043:	e8 5e 41 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c048:	e8 7d fd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c04d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c050:	e8 37 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c055:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c058:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c05e:	83 ec 0c             	sub    $0xc,%esp
f011c061:	50                   	push   %eax
f011c062:	e8 8f b3 fe ff       	call   f01073f6 <kfree>
f011c067:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c06a:	e8 1d 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c06f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c072:	74 17                	je     f011c08b <test_kmalloc_firstfit1+0xa5f>
f011c074:	83 ec 04             	sub    $0x4,%esp
f011c077:	68 54 a2 13 f0       	push   $0xf013a254
f011c07c:	68 30 03 00 00       	push   $0x330
f011c081:	68 3a a2 13 f0       	push   $0xf013a23a
f011c086:	e8 1b 41 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c08b:	e8 3a fd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c090:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c093:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c098:	74 17                	je     f011c0b1 <test_kmalloc_firstfit1+0xa85>
f011c09a:	83 ec 04             	sub    $0x4,%esp
f011c09d:	68 97 a6 13 f0       	push   $0xf013a697
f011c0a2:	68 31 03 00 00       	push   $0x331
f011c0a7:	68 3a a2 13 f0       	push   $0xf013a23a
f011c0ac:	e8 f5 40 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c0b1:	e8 14 fd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c0b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0b9:	e8 ce 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c0be:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c0c1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c0c7:	83 ec 0c             	sub    $0xc,%esp
f011c0ca:	50                   	push   %eax
f011c0cb:	e8 26 b3 fe ff       	call   f01073f6 <kfree>
f011c0d0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0d3:	e8 b4 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c0d8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c0db:	74 17                	je     f011c0f4 <test_kmalloc_firstfit1+0xac8>
f011c0dd:	83 ec 04             	sub    $0x4,%esp
f011c0e0:	68 54 a2 13 f0       	push   $0xf013a254
f011c0e5:	68 37 03 00 00       	push   $0x337
f011c0ea:	68 3a a2 13 f0       	push   $0xf013a23a
f011c0ef:	e8 b2 40 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011c0f4:	e8 d1 fc fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c0f9:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c0fc:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c101:	74 17                	je     f011c11a <test_kmalloc_firstfit1+0xaee>
f011c103:	83 ec 04             	sub    $0x4,%esp
f011c106:	68 97 a6 13 f0       	push   $0xf013a697
f011c10b:	68 38 03 00 00       	push   $0x338
f011c110:	68 3a a2 13 f0       	push   $0xf013a23a
f011c115:	e8 8c 40 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c11a:	e8 ab fc fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c11f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c122:	e8 65 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c127:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011c12a:	83 ec 0c             	sub    $0xc,%esp
f011c12d:	68 00 fc 07 00       	push   $0x7fc00
f011c132:	e8 a5 b2 fe ff       	call   f01073dc <kmalloc>
f011c137:	83 c4 10             	add    $0x10,%esp
f011c13a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c140:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c146:	89 c1                	mov    %eax,%ecx
f011c148:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c14f:	10 00 00 
f011c152:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c158:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c15d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c163:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c169:	ba 00 00 00 00       	mov    $0x0,%edx
f011c16e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c174:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c17a:	29 d0                	sub    %edx,%eax
f011c17c:	89 c3                	mov    %eax,%ebx
f011c17e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c185:	10 00 00 
f011c188:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c18d:	0f b6 d0             	movzbl %al,%edx
f011c190:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c196:	01 d0                	add    %edx,%eax
f011c198:	48                   	dec    %eax
f011c199:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c19f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c1a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1aa:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c1b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c1b6:	29 d0                	sub    %edx,%eax
f011c1b8:	01 c3                	add    %eax,%ebx
f011c1ba:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c1c1:	10 00 00 
f011c1c4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c1c9:	0f b6 c0             	movzbl %al,%eax
f011c1cc:	c1 e0 04             	shl    $0x4,%eax
f011c1cf:	89 c2                	mov    %eax,%edx
f011c1d1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c1d7:	01 d0                	add    %edx,%eax
f011c1d9:	48                   	dec    %eax
f011c1da:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c1e0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c1e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1eb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c1f1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c1f7:	29 d0                	sub    %edx,%eax
f011c1f9:	01 d8                	add    %ebx,%eax
f011c1fb:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c200:	39 c1                	cmp    %eax,%ecx
f011c202:	74 17                	je     f011c21b <test_kmalloc_firstfit1+0xbef>
f011c204:	83 ec 04             	sub    $0x4,%esp
f011c207:	68 54 a6 13 f0       	push   $0xf013a654
f011c20c:	68 41 03 00 00       	push   $0x341
f011c211:	68 3a a2 13 f0       	push   $0xf013a23a
f011c216:	e8 8b 3f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c21b:	e8 6c 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c220:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c223:	74 17                	je     f011c23c <test_kmalloc_firstfit1+0xc10>
f011c225:	83 ec 04             	sub    $0x4,%esp
f011c228:	68 54 a2 13 f0       	push   $0xf013a254
f011c22d:	68 42 03 00 00       	push   $0x342
f011c232:	68 3a a2 13 f0       	push   $0xf013a23a
f011c237:	e8 6a 3f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011c23c:	e8 89 fb fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c241:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c244:	29 c2                	sub    %eax,%edx
f011c246:	89 d0                	mov    %edx,%eax
f011c248:	3d 80 00 00 00       	cmp    $0x80,%eax
f011c24d:	74 17                	je     f011c266 <test_kmalloc_firstfit1+0xc3a>
f011c24f:	83 ec 04             	sub    $0x4,%esp
f011c252:	68 84 a6 13 f0       	push   $0xf013a684
f011c257:	68 43 03 00 00       	push   $0x343
f011c25c:	68 3a a2 13 f0       	push   $0xf013a23a
f011c261:	e8 40 3f fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011c266:	e8 5f fb fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c26b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c26e:	e8 19 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c273:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011c276:	83 ec 0c             	sub    $0xc,%esp
f011c279:	68 00 fc 0f 00       	push   $0xffc00
f011c27e:	e8 59 b1 fe ff       	call   f01073dc <kmalloc>
f011c283:	83 c4 10             	add    $0x10,%esp
f011c286:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c28c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c292:	89 c1                	mov    %eax,%ecx
f011c294:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c29b:	10 00 00 
f011c29e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c2a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2a9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c2af:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2ba:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c2c0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c2c6:	29 d0                	sub    %edx,%eax
f011c2c8:	89 c3                	mov    %eax,%ebx
f011c2ca:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c2d1:	10 00 00 
f011c2d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c2d9:	0f b6 d0             	movzbl %al,%edx
f011c2dc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c2e2:	01 d0                	add    %edx,%eax
f011c2e4:	48                   	dec    %eax
f011c2e5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c2eb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c2f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2f6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c2fc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c302:	29 d0                	sub    %edx,%eax
f011c304:	01 c3                	add    %eax,%ebx
f011c306:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c30d:	10 00 00 
f011c310:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c315:	0f b6 c0             	movzbl %al,%eax
f011c318:	c1 e0 04             	shl    $0x4,%eax
f011c31b:	89 c2                	mov    %eax,%edx
f011c31d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c323:	01 d0                	add    %edx,%eax
f011c325:	48                   	dec    %eax
f011c326:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c32c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c332:	ba 00 00 00 00       	mov    $0x0,%edx
f011c337:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c33d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c343:	29 d0                	sub    %edx,%eax
f011c345:	01 d8                	add    %ebx,%eax
f011c347:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c34c:	39 c1                	cmp    %eax,%ecx
f011c34e:	74 17                	je     f011c367 <test_kmalloc_firstfit1+0xd3b>
f011c350:	83 ec 04             	sub    $0x4,%esp
f011c353:	68 54 a6 13 f0       	push   $0xf013a654
f011c358:	68 49 03 00 00       	push   $0x349
f011c35d:	68 3a a2 13 f0       	push   $0xf013a23a
f011c362:	e8 3f 3e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c367:	e8 20 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c36c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c36f:	74 17                	je     f011c388 <test_kmalloc_firstfit1+0xd5c>
f011c371:	83 ec 04             	sub    $0x4,%esp
f011c374:	68 54 a2 13 f0       	push   $0xf013a254
f011c379:	68 4a 03 00 00       	push   $0x34a
f011c37e:	68 3a a2 13 f0       	push   $0xf013a23a
f011c383:	e8 1e 3e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c388:	e8 3d fa fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c38d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c390:	29 c2                	sub    %eax,%edx
f011c392:	89 d0                	mov    %edx,%eax
f011c394:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c399:	74 17                	je     f011c3b2 <test_kmalloc_firstfit1+0xd86>
f011c39b:	83 ec 04             	sub    $0x4,%esp
f011c39e:	68 84 a6 13 f0       	push   $0xf013a684
f011c3a3:	68 4b 03 00 00       	push   $0x34b
f011c3a8:	68 3a a2 13 f0       	push   $0xf013a23a
f011c3ad:	e8 f4 3d fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c3b2:	e8 13 fa fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c3b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3ba:	e8 cd 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c3bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011c3c2:	83 ec 0c             	sub    $0xc,%esp
f011c3c5:	68 00 fc 03 00       	push   $0x3fc00
f011c3ca:	e8 0d b0 fe ff       	call   f01073dc <kmalloc>
f011c3cf:	83 c4 10             	add    $0x10,%esp
f011c3d2:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011c3d8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c3de:	89 c1                	mov    %eax,%ecx
f011c3e0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c3e7:	10 00 00 
f011c3ea:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c3f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3f5:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c3fb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c401:	ba 00 00 00 00       	mov    $0x0,%edx
f011c406:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c40c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c412:	29 d0                	sub    %edx,%eax
f011c414:	89 c3                	mov    %eax,%ebx
f011c416:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c41d:	10 00 00 
f011c420:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c425:	0f b6 d0             	movzbl %al,%edx
f011c428:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c42e:	01 d0                	add    %edx,%eax
f011c430:	48                   	dec    %eax
f011c431:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c437:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c43d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c442:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c448:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c44e:	29 d0                	sub    %edx,%eax
f011c450:	01 c3                	add    %eax,%ebx
f011c452:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c459:	10 00 00 
f011c45c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c461:	0f b6 c0             	movzbl %al,%eax
f011c464:	c1 e0 04             	shl    $0x4,%eax
f011c467:	89 c2                	mov    %eax,%edx
f011c469:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c46f:	01 d0                	add    %edx,%eax
f011c471:	48                   	dec    %eax
f011c472:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c478:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c47e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c483:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c489:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c48f:	29 d0                	sub    %edx,%eax
f011c491:	01 d8                	add    %ebx,%eax
f011c493:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011c498:	39 c1                	cmp    %eax,%ecx
f011c49a:	74 17                	je     f011c4b3 <test_kmalloc_firstfit1+0xe87>
f011c49c:	83 ec 04             	sub    $0x4,%esp
f011c49f:	68 54 a6 13 f0       	push   $0xf013a654
f011c4a4:	68 52 03 00 00       	push   $0x352
f011c4a9:	68 3a a2 13 f0       	push   $0xf013a23a
f011c4ae:	e8 f3 3c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4b3:	e8 d4 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c4b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4bb:	74 17                	je     f011c4d4 <test_kmalloc_firstfit1+0xea8>
f011c4bd:	83 ec 04             	sub    $0x4,%esp
f011c4c0:	68 54 a2 13 f0       	push   $0xf013a254
f011c4c5:	68 53 03 00 00       	push   $0x353
f011c4ca:	68 3a a2 13 f0       	push   $0xf013a23a
f011c4cf:	e8 d2 3c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011c4d4:	e8 f1 f8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c4d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c4dc:	29 c2                	sub    %eax,%edx
f011c4de:	89 d0                	mov    %edx,%eax
f011c4e0:	83 f8 40             	cmp    $0x40,%eax
f011c4e3:	74 17                	je     f011c4fc <test_kmalloc_firstfit1+0xed0>
f011c4e5:	83 ec 04             	sub    $0x4,%esp
f011c4e8:	68 84 a6 13 f0       	push   $0xf013a684
f011c4ed:	68 54 03 00 00       	push   $0x354
f011c4f2:	68 3a a2 13 f0       	push   $0xf013a23a
f011c4f7:	e8 aa 3c fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011c4fc:	e8 c9 f8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c501:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c504:	e8 83 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c509:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011c50c:	83 ec 0c             	sub    $0xc,%esp
f011c50f:	68 00 00 20 00       	push   $0x200000
f011c514:	e8 c3 ae fe ff       	call   f01073dc <kmalloc>
f011c519:	83 c4 10             	add    $0x10,%esp
f011c51c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c522:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c528:	89 c1                	mov    %eax,%ecx
f011c52a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c531:	10 00 00 
f011c534:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c53a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c53f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c545:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c54b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c550:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c556:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c55c:	29 d0                	sub    %edx,%eax
f011c55e:	89 c3                	mov    %eax,%ebx
f011c560:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c567:	10 00 00 
f011c56a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c56f:	0f b6 d0             	movzbl %al,%edx
f011c572:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c578:	01 d0                	add    %edx,%eax
f011c57a:	48                   	dec    %eax
f011c57b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c581:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c587:	ba 00 00 00 00       	mov    $0x0,%edx
f011c58c:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c592:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c598:	29 d0                	sub    %edx,%eax
f011c59a:	01 c3                	add    %eax,%ebx
f011c59c:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c5a3:	10 00 00 
f011c5a6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c5ab:	0f b6 c0             	movzbl %al,%eax
f011c5ae:	c1 e0 04             	shl    $0x4,%eax
f011c5b1:	89 c2                	mov    %eax,%edx
f011c5b3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c5b9:	01 d0                	add    %edx,%eax
f011c5bb:	48                   	dec    %eax
f011c5bc:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c5c2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c5c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5cd:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c5d3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c5d9:	29 d0                	sub    %edx,%eax
f011c5db:	01 d8                	add    %ebx,%eax
f011c5dd:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c5e2:	39 c1                	cmp    %eax,%ecx
f011c5e4:	74 17                	je     f011c5fd <test_kmalloc_firstfit1+0xfd1>
f011c5e6:	83 ec 04             	sub    $0x4,%esp
f011c5e9:	68 54 a6 13 f0       	push   $0xf013a654
f011c5ee:	68 5a 03 00 00       	push   $0x35a
f011c5f3:	68 3a a2 13 f0       	push   $0xf013a23a
f011c5f8:	e8 a9 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c5fd:	e8 c8 f7 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c602:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c605:	29 c2                	sub    %eax,%edx
f011c607:	89 d0                	mov    %edx,%eax
f011c609:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c60e:	74 17                	je     f011c627 <test_kmalloc_firstfit1+0xffb>
f011c610:	83 ec 04             	sub    $0x4,%esp
f011c613:	68 84 a6 13 f0       	push   $0xf013a684
f011c618:	68 5b 03 00 00       	push   $0x35b
f011c61d:	68 3a a2 13 f0       	push   $0xf013a23a
f011c622:	e8 7f 3b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c627:	e8 60 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c62c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c62f:	74 17                	je     f011c648 <test_kmalloc_firstfit1+0x101c>
f011c631:	83 ec 04             	sub    $0x4,%esp
f011c634:	68 54 a2 13 f0       	push   $0xf013a254
f011c639:	68 5c 03 00 00       	push   $0x35c
f011c63e:	68 3a a2 13 f0       	push   $0xf013a23a
f011c643:	e8 5e 3b fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011c648:	e8 7d f7 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c64d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c650:	e8 37 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c655:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011c658:	83 ec 0c             	sub    $0xc,%esp
f011c65b:	68 00 fc 3f 00       	push   $0x3ffc00
f011c660:	e8 77 ad fe ff       	call   f01073dc <kmalloc>
f011c665:	83 c4 10             	add    $0x10,%esp
f011c668:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011c66e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c674:	89 c1                	mov    %eax,%ecx
f011c676:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c67d:	10 00 00 
f011c680:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c686:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c68b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c691:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c697:	ba 00 00 00 00       	mov    $0x0,%edx
f011c69c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c6a2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c6a8:	29 d0                	sub    %edx,%eax
f011c6aa:	89 c3                	mov    %eax,%ebx
f011c6ac:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c6b3:	10 00 00 
f011c6b6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c6bb:	0f b6 d0             	movzbl %al,%edx
f011c6be:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c6c4:	01 d0                	add    %edx,%eax
f011c6c6:	48                   	dec    %eax
f011c6c7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c6cd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6d8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c6de:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6e4:	29 d0                	sub    %edx,%eax
f011c6e6:	01 c3                	add    %eax,%ebx
f011c6e8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c6ef:	10 00 00 
f011c6f2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c6f7:	0f b6 c0             	movzbl %al,%eax
f011c6fa:	c1 e0 04             	shl    $0x4,%eax
f011c6fd:	89 c2                	mov    %eax,%edx
f011c6ff:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c705:	01 d0                	add    %edx,%eax
f011c707:	48                   	dec    %eax
f011c708:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c70e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c714:	ba 00 00 00 00       	mov    $0x0,%edx
f011c719:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c71f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c725:	29 d0                	sub    %edx,%eax
f011c727:	01 d8                	add    %ebx,%eax
f011c729:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011c72e:	39 c1                	cmp    %eax,%ecx
f011c730:	74 17                	je     f011c749 <test_kmalloc_firstfit1+0x111d>
f011c732:	83 ec 04             	sub    $0x4,%esp
f011c735:	68 54 a6 13 f0       	push   $0xf013a654
f011c73a:	68 63 03 00 00       	push   $0x363
f011c73f:	68 3a a2 13 f0       	push   $0xf013a23a
f011c744:	e8 5d 3a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c749:	e8 3e 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c74e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c751:	74 17                	je     f011c76a <test_kmalloc_firstfit1+0x113e>
f011c753:	83 ec 04             	sub    $0x4,%esp
f011c756:	68 54 a2 13 f0       	push   $0xf013a254
f011c75b:	68 64 03 00 00       	push   $0x364
f011c760:	68 3a a2 13 f0       	push   $0xf013a23a
f011c765:	e8 3c 3a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011c76a:	e8 5b f6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c76f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c772:	29 c2                	sub    %eax,%edx
f011c774:	89 d0                	mov    %edx,%eax
f011c776:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c77b:	74 17                	je     f011c794 <test_kmalloc_firstfit1+0x1168>
f011c77d:	83 ec 04             	sub    $0x4,%esp
f011c780:	68 84 a6 13 f0       	push   $0xf013a684
f011c785:	68 65 03 00 00       	push   $0x365
f011c78a:	68 3a a2 13 f0       	push   $0xf013a23a
f011c78f:	e8 12 3a fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011c794:	e8 31 f6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c799:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c79c:	e8 eb 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011c7a4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c7aa:	83 ec 0c             	sub    $0xc,%esp
f011c7ad:	50                   	push   %eax
f011c7ae:	e8 43 ac fe ff       	call   f01073f6 <kfree>
f011c7b3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7b6:	e8 d1 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7be:	74 17                	je     f011c7d7 <test_kmalloc_firstfit1+0x11ab>
f011c7c0:	83 ec 04             	sub    $0x4,%esp
f011c7c3:	68 54 a2 13 f0       	push   $0xf013a254
f011c7c8:	68 6e 03 00 00       	push   $0x36e
f011c7cd:	68 3a a2 13 f0       	push   $0xf013a23a
f011c7d2:	e8 cf 39 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c7d7:	e8 ee f5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c7dc:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c7df:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7e4:	74 17                	je     f011c7fd <test_kmalloc_firstfit1+0x11d1>
f011c7e6:	83 ec 04             	sub    $0x4,%esp
f011c7e9:	68 97 a6 13 f0       	push   $0xf013a697
f011c7ee:	68 6f 03 00 00       	push   $0x36f
f011c7f3:	68 3a a2 13 f0       	push   $0xf013a23a
f011c7f8:	e8 a9 39 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011c7fd:	e8 c8 f5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c802:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c805:	e8 82 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c80a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011c80d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c813:	83 ec 0c             	sub    $0xc,%esp
f011c816:	50                   	push   %eax
f011c817:	e8 da ab fe ff       	call   f01073f6 <kfree>
f011c81c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c81f:	e8 68 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c824:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c827:	74 17                	je     f011c840 <test_kmalloc_firstfit1+0x1214>
f011c829:	83 ec 04             	sub    $0x4,%esp
f011c82c:	68 54 a2 13 f0       	push   $0xf013a254
f011c831:	68 75 03 00 00       	push   $0x375
f011c836:	68 3a a2 13 f0       	push   $0xf013a23a
f011c83b:	e8 66 39 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c840:	e8 85 f5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c845:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c848:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c84d:	74 17                	je     f011c866 <test_kmalloc_firstfit1+0x123a>
f011c84f:	83 ec 04             	sub    $0x4,%esp
f011c852:	68 97 a6 13 f0       	push   $0xf013a697
f011c857:	68 76 03 00 00       	push   $0x376
f011c85c:	68 3a a2 13 f0       	push   $0xf013a23a
f011c861:	e8 40 39 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011c866:	e8 5f f5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c86b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c86e:	e8 19 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c873:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011c876:	83 ec 0c             	sub    $0xc,%esp
f011c879:	68 00 00 10 00       	push   $0x100000
f011c87e:	e8 59 ab fe ff       	call   f01073dc <kmalloc>
f011c883:	83 c4 10             	add    $0x10,%esp
f011c886:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011c88c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011c892:	89 c1                	mov    %eax,%ecx
f011c894:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c89b:	10 00 00 
f011c89e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c8a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8a9:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c8af:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c8b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8ba:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c8c0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c8c6:	29 d0                	sub    %edx,%eax
f011c8c8:	89 c3                	mov    %eax,%ebx
f011c8ca:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c8d1:	10 00 00 
f011c8d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c8d9:	0f b6 d0             	movzbl %al,%edx
f011c8dc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c8e2:	01 d0                	add    %edx,%eax
f011c8e4:	48                   	dec    %eax
f011c8e5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c8eb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c8f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8f6:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c8fc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c902:	29 d0                	sub    %edx,%eax
f011c904:	01 c3                	add    %eax,%ebx
f011c906:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c90d:	10 00 00 
f011c910:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c915:	0f b6 c0             	movzbl %al,%eax
f011c918:	c1 e0 04             	shl    $0x4,%eax
f011c91b:	89 c2                	mov    %eax,%edx
f011c91d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c923:	01 d0                	add    %edx,%eax
f011c925:	48                   	dec    %eax
f011c926:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c92c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c932:	ba 00 00 00 00       	mov    $0x0,%edx
f011c937:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c93d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c943:	29 d0                	sub    %edx,%eax
f011c945:	01 d8                	add    %ebx,%eax
f011c947:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011c94c:	39 c1                	cmp    %eax,%ecx
f011c94e:	74 17                	je     f011c967 <test_kmalloc_firstfit1+0x133b>
f011c950:	83 ec 04             	sub    $0x4,%esp
f011c953:	68 54 a6 13 f0       	push   $0xf013a654
f011c958:	68 80 03 00 00       	push   $0x380
f011c95d:	68 3a a2 13 f0       	push   $0xf013a23a
f011c962:	e8 3f 38 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c967:	e8 20 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c96c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c96f:	74 17                	je     f011c988 <test_kmalloc_firstfit1+0x135c>
f011c971:	83 ec 04             	sub    $0x4,%esp
f011c974:	68 54 a2 13 f0       	push   $0xf013a254
f011c979:	68 81 03 00 00       	push   $0x381
f011c97e:	68 3a a2 13 f0       	push   $0xf013a23a
f011c983:	e8 1e 38 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c988:	e8 3d f4 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011c98d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c990:	29 c2                	sub    %eax,%edx
f011c992:	89 d0                	mov    %edx,%eax
f011c994:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c999:	74 17                	je     f011c9b2 <test_kmalloc_firstfit1+0x1386>
f011c99b:	83 ec 04             	sub    $0x4,%esp
f011c99e:	68 84 a6 13 f0       	push   $0xf013a684
f011c9a3:	68 82 03 00 00       	push   $0x382
f011c9a8:	68 3a a2 13 f0       	push   $0xf013a23a
f011c9ad:	e8 f4 37 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011c9b2:	83 ec 0c             	sub    $0xc,%esp
f011c9b5:	68 30 a8 13 f0       	push   $0xf013a830
f011c9ba:	e8 6e 42 fe ff       	call   f0100c2d <cprintf>
f011c9bf:	83 c4 10             	add    $0x10,%esp

	return 1;
f011c9c2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011c9c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c9ca:	5b                   	pop    %ebx
f011c9cb:	5f                   	pop    %edi
f011c9cc:	5d                   	pop    %ebp
f011c9cd:	c3                   	ret    

f011c9ce <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011c9ce:	55                   	push   %ebp
f011c9cf:	89 e5                	mov    %esp,%ebp
f011c9d1:	57                   	push   %edi
f011c9d2:	53                   	push   %ebx
f011c9d3:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011c9d9:	83 ec 0c             	sub    $0xc,%esp
f011c9dc:	68 7c a1 13 f0       	push   $0xf013a17c
f011c9e1:	e8 47 42 fe ff       	call   f0100c2d <cprintf>
f011c9e6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c9e9:	83 ec 0c             	sub    $0xc,%esp
f011c9ec:	68 ac a1 13 f0       	push   $0xf013a1ac
f011c9f1:	e8 37 42 fe ff       	call   f0100c2d <cprintf>
f011c9f6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c9f9:	83 ec 0c             	sub    $0xc,%esp
f011c9fc:	68 7c a1 13 f0       	push   $0xf013a17c
f011ca01:	e8 27 42 fe ff       	call   f0100c2d <cprintf>
f011ca06:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ca09:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011ca0f:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ca14:	b8 00 00 00 00       	mov    $0x0,%eax
f011ca19:	89 d7                	mov    %edx,%edi
f011ca1b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011ca1d:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011ca24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ca27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ca2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ca32:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca37:	f7 75 f4             	divl   -0xc(%ebp)
f011ca3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ca3d:	29 d0                	sub    %edx,%eax
f011ca3f:	89 c1                	mov    %eax,%ecx
f011ca41:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ca48:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ca4d:	0f b6 d0             	movzbl %al,%edx
f011ca50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ca53:	01 d0                	add    %edx,%eax
f011ca55:	48                   	dec    %eax
f011ca56:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ca59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ca5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca61:	f7 75 ec             	divl   -0x14(%ebp)
f011ca64:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ca67:	29 d0                	sub    %edx,%eax
f011ca69:	01 c1                	add    %eax,%ecx
f011ca6b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ca72:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ca77:	0f b6 c0             	movzbl %al,%eax
f011ca7a:	c1 e0 04             	shl    $0x4,%eax
f011ca7d:	89 c2                	mov    %eax,%edx
f011ca7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ca82:	01 d0                	add    %edx,%eax
f011ca84:	48                   	dec    %eax
f011ca85:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ca88:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ca8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca90:	f7 75 e4             	divl   -0x1c(%ebp)
f011ca93:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ca96:	29 d0                	sub    %edx,%eax
f011ca98:	01 c8                	add    %ecx,%eax
f011ca9a:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ca9f:	29 c2                	sub    %eax,%edx
f011caa1:	89 d0                	mov    %edx,%eax
f011caa3:	83 ec 0c             	sub    $0xc,%esp
f011caa6:	50                   	push   %eax
f011caa7:	e8 30 a9 fe ff       	call   f01073dc <kmalloc>
f011caac:	83 c4 10             	add    $0x10,%esp
f011caaf:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011cab5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011cabb:	85 c0                	test   %eax,%eax
f011cabd:	74 17                	je     f011cad6 <test_kmalloc_firstfit2+0x108>
f011cabf:	83 ec 04             	sub    $0x4,%esp
f011cac2:	68 7c a8 13 f0       	push   $0xf013a87c
f011cac7:	68 97 03 00 00       	push   $0x397
f011cacc:	68 3a a2 13 f0       	push   $0xf013a23a
f011cad1:	e8 d0 36 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cad6:	e8 ef f2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cadb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cade:	e8 a9 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cae3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011cae6:	83 ec 0c             	sub    $0xc,%esp
f011cae9:	68 00 fc 1f 00       	push   $0x1ffc00
f011caee:	e8 e9 a8 fe ff       	call   f01073dc <kmalloc>
f011caf3:	83 c4 10             	add    $0x10,%esp
f011caf6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cafc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011cb02:	89 c1                	mov    %eax,%ecx
f011cb04:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cb0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cb0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb13:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cb16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cb19:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb1e:	f7 75 d4             	divl   -0x2c(%ebp)
f011cb21:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cb24:	29 d0                	sub    %edx,%eax
f011cb26:	89 c3                	mov    %eax,%ebx
f011cb28:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cb2f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cb34:	0f b6 d0             	movzbl %al,%edx
f011cb37:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cb3a:	01 d0                	add    %edx,%eax
f011cb3c:	48                   	dec    %eax
f011cb3d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cb40:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb43:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb48:	f7 75 cc             	divl   -0x34(%ebp)
f011cb4b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb4e:	29 d0                	sub    %edx,%eax
f011cb50:	01 c3                	add    %eax,%ebx
f011cb52:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cb59:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cb5e:	0f b6 c0             	movzbl %al,%eax
f011cb61:	c1 e0 04             	shl    $0x4,%eax
f011cb64:	89 c2                	mov    %eax,%edx
f011cb66:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cb69:	01 d0                	add    %edx,%eax
f011cb6b:	48                   	dec    %eax
f011cb6c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cb6f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb72:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb77:	f7 75 c4             	divl   -0x3c(%ebp)
f011cb7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb7d:	29 d0                	sub    %edx,%eax
f011cb7f:	01 d8                	add    %ebx,%eax
f011cb81:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cb86:	39 c1                	cmp    %eax,%ecx
f011cb88:	74 17                	je     f011cba1 <test_kmalloc_firstfit2+0x1d3>
f011cb8a:	83 ec 04             	sub    $0x4,%esp
f011cb8d:	68 54 a6 13 f0       	push   $0xf013a654
f011cb92:	68 a1 03 00 00       	push   $0x3a1
f011cb97:	68 3a a2 13 f0       	push   $0xf013a23a
f011cb9c:	e8 05 36 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cba1:	e8 e6 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cba6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cba9:	74 17                	je     f011cbc2 <test_kmalloc_firstfit2+0x1f4>
f011cbab:	83 ec 04             	sub    $0x4,%esp
f011cbae:	68 54 a2 13 f0       	push   $0xf013a254
f011cbb3:	68 a2 03 00 00       	push   $0x3a2
f011cbb8:	68 3a a2 13 f0       	push   $0xf013a23a
f011cbbd:	e8 e4 35 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cbc2:	e8 03 f2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cbc7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cbca:	29 c2                	sub    %eax,%edx
f011cbcc:	89 d0                	mov    %edx,%eax
f011cbce:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cbd3:	74 17                	je     f011cbec <test_kmalloc_firstfit2+0x21e>
f011cbd5:	83 ec 04             	sub    $0x4,%esp
f011cbd8:	68 84 a6 13 f0       	push   $0xf013a684
f011cbdd:	68 a3 03 00 00       	push   $0x3a3
f011cbe2:	68 3a a2 13 f0       	push   $0xf013a23a
f011cbe7:	e8 ba 35 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbec:	e8 d9 f1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cbf1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbf4:	e8 93 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cbf9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011cbfc:	83 ec 0c             	sub    $0xc,%esp
f011cbff:	68 00 fc 1f 00       	push   $0x1ffc00
f011cc04:	e8 d3 a7 fe ff       	call   f01073dc <kmalloc>
f011cc09:	83 c4 10             	add    $0x10,%esp
f011cc0c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cc12:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011cc18:	89 c1                	mov    %eax,%ecx
f011cc1a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cc21:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cc24:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc29:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cc2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc34:	f7 75 bc             	divl   -0x44(%ebp)
f011cc37:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc3a:	29 d0                	sub    %edx,%eax
f011cc3c:	89 c3                	mov    %eax,%ebx
f011cc3e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cc45:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cc4a:	0f b6 d0             	movzbl %al,%edx
f011cc4d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cc50:	01 d0                	add    %edx,%eax
f011cc52:	48                   	dec    %eax
f011cc53:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cc56:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc59:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc5e:	f7 75 b4             	divl   -0x4c(%ebp)
f011cc61:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc64:	29 d0                	sub    %edx,%eax
f011cc66:	01 c3                	add    %eax,%ebx
f011cc68:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cc6f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cc74:	0f b6 c0             	movzbl %al,%eax
f011cc77:	c1 e0 04             	shl    $0x4,%eax
f011cc7a:	89 c2                	mov    %eax,%edx
f011cc7c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cc7f:	01 d0                	add    %edx,%eax
f011cc81:	48                   	dec    %eax
f011cc82:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cc85:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc88:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc8d:	f7 75 ac             	divl   -0x54(%ebp)
f011cc90:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc93:	29 d0                	sub    %edx,%eax
f011cc95:	01 d8                	add    %ebx,%eax
f011cc97:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cc9c:	39 c1                	cmp    %eax,%ecx
f011cc9e:	74 17                	je     f011ccb7 <test_kmalloc_firstfit2+0x2e9>
f011cca0:	83 ec 04             	sub    $0x4,%esp
f011cca3:	68 54 a6 13 f0       	push   $0xf013a654
f011cca8:	68 a9 03 00 00       	push   $0x3a9
f011ccad:	68 3a a2 13 f0       	push   $0xf013a23a
f011ccb2:	e8 ef 34 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccb7:	e8 d0 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ccbc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ccbf:	74 17                	je     f011ccd8 <test_kmalloc_firstfit2+0x30a>
f011ccc1:	83 ec 04             	sub    $0x4,%esp
f011ccc4:	68 54 a2 13 f0       	push   $0xf013a254
f011ccc9:	68 aa 03 00 00       	push   $0x3aa
f011ccce:	68 3a a2 13 f0       	push   $0xf013a23a
f011ccd3:	e8 ce 34 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ccd8:	e8 ed f0 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ccdd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cce0:	29 c2                	sub    %eax,%edx
f011cce2:	89 d0                	mov    %edx,%eax
f011cce4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cce9:	74 17                	je     f011cd02 <test_kmalloc_firstfit2+0x334>
f011cceb:	83 ec 04             	sub    $0x4,%esp
f011ccee:	68 84 a6 13 f0       	push   $0xf013a684
f011ccf3:	68 ab 03 00 00       	push   $0x3ab
f011ccf8:	68 3a a2 13 f0       	push   $0xf013a23a
f011ccfd:	e8 a4 34 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011cd02:	e8 c3 f0 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cd07:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd0a:	e8 7d 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cd0f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011cd12:	83 ec 0c             	sub    $0xc,%esp
f011cd15:	68 00 08 00 00       	push   $0x800
f011cd1a:	e8 bd a6 fe ff       	call   f01073dc <kmalloc>
f011cd1f:	83 c4 10             	add    $0x10,%esp
f011cd22:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cd28:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cd2e:	89 c1                	mov    %eax,%ecx
f011cd30:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cd37:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cd3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd3f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cd42:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd45:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd4a:	f7 75 a4             	divl   -0x5c(%ebp)
f011cd4d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd50:	29 d0                	sub    %edx,%eax
f011cd52:	89 c3                	mov    %eax,%ebx
f011cd54:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cd5b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cd60:	0f b6 d0             	movzbl %al,%edx
f011cd63:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cd66:	01 d0                	add    %edx,%eax
f011cd68:	48                   	dec    %eax
f011cd69:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cd6c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd6f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd74:	f7 75 9c             	divl   -0x64(%ebp)
f011cd77:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd7a:	29 d0                	sub    %edx,%eax
f011cd7c:	01 c3                	add    %eax,%ebx
f011cd7e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cd85:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cd8a:	0f b6 c0             	movzbl %al,%eax
f011cd8d:	c1 e0 04             	shl    $0x4,%eax
f011cd90:	89 c2                	mov    %eax,%edx
f011cd92:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cd95:	01 d0                	add    %edx,%eax
f011cd97:	48                   	dec    %eax
f011cd98:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cd9b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cda3:	f7 75 94             	divl   -0x6c(%ebp)
f011cda6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cda9:	29 d0                	sub    %edx,%eax
f011cdab:	01 d8                	add    %ebx,%eax
f011cdad:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cdb2:	39 c1                	cmp    %eax,%ecx
f011cdb4:	73 17                	jae    f011cdcd <test_kmalloc_firstfit2+0x3ff>
f011cdb6:	83 ec 04             	sub    $0x4,%esp
f011cdb9:	68 54 a6 13 f0       	push   $0xf013a654
f011cdbe:	68 b1 03 00 00       	push   $0x3b1
f011cdc3:	68 3a a2 13 f0       	push   $0xf013a23a
f011cdc8:	e8 d9 33 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cdcd:	e8 ba 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cdd2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cdd5:	74 17                	je     f011cdee <test_kmalloc_firstfit2+0x420>
f011cdd7:	83 ec 04             	sub    $0x4,%esp
f011cdda:	68 54 a2 13 f0       	push   $0xf013a254
f011cddf:	68 b2 03 00 00       	push   $0x3b2
f011cde4:	68 3a a2 13 f0       	push   $0xf013a23a
f011cde9:	e8 b8 33 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011cdee:	e8 d7 ef fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cdf3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cdf6:	29 c2                	sub    %eax,%edx
f011cdf8:	89 d0                	mov    %edx,%eax
f011cdfa:	83 f8 01             	cmp    $0x1,%eax
f011cdfd:	74 17                	je     f011ce16 <test_kmalloc_firstfit2+0x448>
f011cdff:	83 ec 04             	sub    $0x4,%esp
f011ce02:	68 84 a6 13 f0       	push   $0xf013a684
f011ce07:	68 b3 03 00 00       	push   $0x3b3
f011ce0c:	68 3a a2 13 f0       	push   $0xf013a23a
f011ce11:	e8 90 33 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ce16:	e8 af ef fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ce1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce1e:	e8 69 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ce23:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ce26:	83 ec 0c             	sub    $0xc,%esp
f011ce29:	68 00 08 00 00       	push   $0x800
f011ce2e:	e8 a9 a5 fe ff       	call   f01073dc <kmalloc>
f011ce33:	83 c4 10             	add    $0x10,%esp
f011ce36:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ce3c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ce42:	89 c1                	mov    %eax,%ecx
f011ce44:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ce4b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ce4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce53:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ce56:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce59:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce5e:	f7 75 8c             	divl   -0x74(%ebp)
f011ce61:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce64:	29 d0                	sub    %edx,%eax
f011ce66:	89 c3                	mov    %eax,%ebx
f011ce68:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ce6f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ce74:	0f b6 d0             	movzbl %al,%edx
f011ce77:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ce7a:	01 d0                	add    %edx,%eax
f011ce7c:	48                   	dec    %eax
f011ce7d:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ce80:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce83:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce88:	f7 75 84             	divl   -0x7c(%ebp)
f011ce8b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce8e:	29 d0                	sub    %edx,%eax
f011ce90:	01 c3                	add    %eax,%ebx
f011ce92:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ce99:	10 00 00 
f011ce9c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cea1:	0f b6 c0             	movzbl %al,%eax
f011cea4:	c1 e0 04             	shl    $0x4,%eax
f011cea7:	89 c2                	mov    %eax,%edx
f011cea9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ceaf:	01 d0                	add    %edx,%eax
f011ceb1:	48                   	dec    %eax
f011ceb2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ceb8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cebe:	ba 00 00 00 00       	mov    $0x0,%edx
f011cec3:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cec9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cecf:	29 d0                	sub    %edx,%eax
f011ced1:	01 d8                	add    %ebx,%eax
f011ced3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011ced8:	39 c1                	cmp    %eax,%ecx
f011ceda:	74 17                	je     f011cef3 <test_kmalloc_firstfit2+0x525>
f011cedc:	83 ec 04             	sub    $0x4,%esp
f011cedf:	68 54 a6 13 f0       	push   $0xf013a654
f011cee4:	68 b9 03 00 00       	push   $0x3b9
f011cee9:	68 3a a2 13 f0       	push   $0xf013a23a
f011ceee:	e8 b3 32 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cef3:	e8 94 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cef8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cefb:	74 17                	je     f011cf14 <test_kmalloc_firstfit2+0x546>
f011cefd:	83 ec 04             	sub    $0x4,%esp
f011cf00:	68 54 a2 13 f0       	push   $0xf013a254
f011cf05:	68 ba 03 00 00       	push   $0x3ba
f011cf0a:	68 3a a2 13 f0       	push   $0xf013a23a
f011cf0f:	e8 92 32 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011cf14:	e8 b1 ee fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cf19:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cf1c:	29 c2                	sub    %eax,%edx
f011cf1e:	89 d0                	mov    %edx,%eax
f011cf20:	83 f8 01             	cmp    $0x1,%eax
f011cf23:	74 17                	je     f011cf3c <test_kmalloc_firstfit2+0x56e>
f011cf25:	83 ec 04             	sub    $0x4,%esp
f011cf28:	68 84 a6 13 f0       	push   $0xf013a684
f011cf2d:	68 bb 03 00 00       	push   $0x3bb
f011cf32:	68 3a a2 13 f0       	push   $0xf013a23a
f011cf37:	e8 6a 32 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf3c:	e8 89 ee fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cf41:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf44:	e8 43 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf49:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011cf4c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cf52:	83 ec 0c             	sub    $0xc,%esp
f011cf55:	50                   	push   %eax
f011cf56:	e8 9b a4 fe ff       	call   f01073f6 <kfree>
f011cf5b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf5e:	e8 29 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf63:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cf66:	74 17                	je     f011cf7f <test_kmalloc_firstfit2+0x5b1>
f011cf68:	83 ec 04             	sub    $0x4,%esp
f011cf6b:	68 54 a2 13 f0       	push   $0xf013a254
f011cf70:	68 c1 03 00 00       	push   $0x3c1
f011cf75:	68 3a a2 13 f0       	push   $0xf013a23a
f011cf7a:	e8 27 32 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011cf7f:	e8 46 ee fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cf84:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011cf87:	83 f8 01             	cmp    $0x1,%eax
f011cf8a:	74 17                	je     f011cfa3 <test_kmalloc_firstfit2+0x5d5>
f011cf8c:	83 ec 04             	sub    $0x4,%esp
f011cf8f:	68 97 a6 13 f0       	push   $0xf013a697
f011cf94:	68 c2 03 00 00       	push   $0x3c2
f011cf99:	68 3a a2 13 f0       	push   $0xf013a23a
f011cf9e:	e8 03 32 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011cfa3:	e8 22 ee fe ff       	call   f010bdca <sys_calculate_free_frames>
f011cfa8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfab:	e8 dc 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cfb0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011cfb3:	83 ec 0c             	sub    $0xc,%esp
f011cfb6:	68 00 1c 00 00       	push   $0x1c00
f011cfbb:	e8 1c a4 fe ff       	call   f01073dc <kmalloc>
f011cfc0:	83 c4 10             	add    $0x10,%esp
f011cfc3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011cfc9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cfcf:	89 c1                	mov    %eax,%ecx
f011cfd1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cfd8:	10 00 00 
f011cfdb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cfe1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfe6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cfec:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cff2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cff7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cffd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d003:	29 d0                	sub    %edx,%eax
f011d005:	89 c3                	mov    %eax,%ebx
f011d007:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d00e:	10 00 00 
f011d011:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d016:	0f b6 d0             	movzbl %al,%edx
f011d019:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d01f:	01 d0                	add    %edx,%eax
f011d021:	48                   	dec    %eax
f011d022:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d028:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d02e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d033:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d039:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d03f:	29 d0                	sub    %edx,%eax
f011d041:	01 c3                	add    %eax,%ebx
f011d043:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d04a:	10 00 00 
f011d04d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d052:	0f b6 c0             	movzbl %al,%eax
f011d055:	c1 e0 04             	shl    $0x4,%eax
f011d058:	89 c2                	mov    %eax,%edx
f011d05a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d060:	01 d0                	add    %edx,%eax
f011d062:	48                   	dec    %eax
f011d063:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d069:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d06f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d074:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d07a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d080:	29 d0                	sub    %edx,%eax
f011d082:	01 d8                	add    %ebx,%eax
f011d084:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d089:	39 c1                	cmp    %eax,%ecx
f011d08b:	74 17                	je     f011d0a4 <test_kmalloc_firstfit2+0x6d6>
f011d08d:	83 ec 04             	sub    $0x4,%esp
f011d090:	68 54 a6 13 f0       	push   $0xf013a654
f011d095:	68 c8 03 00 00       	push   $0x3c8
f011d09a:	68 3a a2 13 f0       	push   $0xf013a23a
f011d09f:	e8 02 31 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0a4:	e8 e3 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d0a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d0ac:	74 17                	je     f011d0c5 <test_kmalloc_firstfit2+0x6f7>
f011d0ae:	83 ec 04             	sub    $0x4,%esp
f011d0b1:	68 54 a2 13 f0       	push   $0xf013a254
f011d0b6:	68 c9 03 00 00       	push   $0x3c9
f011d0bb:	68 3a a2 13 f0       	push   $0xf013a23a
f011d0c0:	e8 e1 30 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d0c5:	e8 00 ed fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d0ca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d0cd:	29 c2                	sub    %eax,%edx
f011d0cf:	89 d0                	mov    %edx,%eax
f011d0d1:	83 f8 02             	cmp    $0x2,%eax
f011d0d4:	74 17                	je     f011d0ed <test_kmalloc_firstfit2+0x71f>
f011d0d6:	83 ec 04             	sub    $0x4,%esp
f011d0d9:	68 84 a6 13 f0       	push   $0xf013a684
f011d0de:	68 ca 03 00 00       	push   $0x3ca
f011d0e3:	68 3a a2 13 f0       	push   $0xf013a23a
f011d0e8:	e8 b9 30 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d0ed:	e8 d8 ec fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d0f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0f5:	e8 92 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d0fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011d0fd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d103:	83 ec 0c             	sub    $0xc,%esp
f011d106:	50                   	push   %eax
f011d107:	e8 ea a2 fe ff       	call   f01073f6 <kfree>
f011d10c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d10f:	e8 78 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d114:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d117:	74 17                	je     f011d130 <test_kmalloc_firstfit2+0x762>
f011d119:	83 ec 04             	sub    $0x4,%esp
f011d11c:	68 54 a2 13 f0       	push   $0xf013a254
f011d121:	68 d0 03 00 00       	push   $0x3d0
f011d126:	68 3a a2 13 f0       	push   $0xf013a23a
f011d12b:	e8 76 30 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d130:	e8 95 ec fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d135:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d138:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d13d:	74 17                	je     f011d156 <test_kmalloc_firstfit2+0x788>
f011d13f:	83 ec 04             	sub    $0x4,%esp
f011d142:	68 97 a6 13 f0       	push   $0xf013a697
f011d147:	68 d1 03 00 00       	push   $0x3d1
f011d14c:	68 3a a2 13 f0       	push   $0xf013a23a
f011d151:	e8 50 30 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d156:	e8 6f ec fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d15b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d15e:	e8 29 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d163:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d166:	83 ec 0c             	sub    $0xc,%esp
f011d169:	68 00 fc 2f 00       	push   $0x2ffc00
f011d16e:	e8 69 a2 fe ff       	call   f01073dc <kmalloc>
f011d173:	83 c4 10             	add    $0x10,%esp
f011d176:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d17c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d182:	89 c1                	mov    %eax,%ecx
f011d184:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d18b:	10 00 00 
f011d18e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d194:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d199:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d19f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d1a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1aa:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d1b0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d1b6:	29 d0                	sub    %edx,%eax
f011d1b8:	89 c3                	mov    %eax,%ebx
f011d1ba:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d1c1:	10 00 00 
f011d1c4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d1c9:	0f b6 d0             	movzbl %al,%edx
f011d1cc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d1d2:	01 d0                	add    %edx,%eax
f011d1d4:	48                   	dec    %eax
f011d1d5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d1db:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1e6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d1ec:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1f2:	29 d0                	sub    %edx,%eax
f011d1f4:	01 c3                	add    %eax,%ebx
f011d1f6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d1fd:	10 00 00 
f011d200:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d205:	0f b6 c0             	movzbl %al,%eax
f011d208:	c1 e0 04             	shl    $0x4,%eax
f011d20b:	89 c2                	mov    %eax,%edx
f011d20d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d213:	01 d0                	add    %edx,%eax
f011d215:	48                   	dec    %eax
f011d216:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d21c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d222:	ba 00 00 00 00       	mov    $0x0,%edx
f011d227:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d22d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d233:	29 d0                	sub    %edx,%eax
f011d235:	01 d8                	add    %ebx,%eax
f011d237:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011d23c:	39 c1                	cmp    %eax,%ecx
f011d23e:	74 17                	je     f011d257 <test_kmalloc_firstfit2+0x889>
f011d240:	83 ec 04             	sub    $0x4,%esp
f011d243:	68 54 a6 13 f0       	push   $0xf013a654
f011d248:	68 d7 03 00 00       	push   $0x3d7
f011d24d:	68 3a a2 13 f0       	push   $0xf013a23a
f011d252:	e8 4f 2f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d257:	e8 30 6a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d25c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d25f:	74 17                	je     f011d278 <test_kmalloc_firstfit2+0x8aa>
f011d261:	83 ec 04             	sub    $0x4,%esp
f011d264:	68 54 a2 13 f0       	push   $0xf013a254
f011d269:	68 d8 03 00 00       	push   $0x3d8
f011d26e:	68 3a a2 13 f0       	push   $0xf013a23a
f011d273:	e8 2e 2f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d278:	e8 4d eb fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d27d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d280:	29 c2                	sub    %eax,%edx
f011d282:	89 d0                	mov    %edx,%eax
f011d284:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d289:	74 17                	je     f011d2a2 <test_kmalloc_firstfit2+0x8d4>
f011d28b:	83 ec 04             	sub    $0x4,%esp
f011d28e:	68 84 a6 13 f0       	push   $0xf013a684
f011d293:	68 d9 03 00 00       	push   $0x3d9
f011d298:	68 3a a2 13 f0       	push   $0xf013a23a
f011d29d:	e8 04 2f fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011d2a2:	e8 23 eb fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d2a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2aa:	e8 dd 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d2af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011d2b2:	83 ec 0c             	sub    $0xc,%esp
f011d2b5:	68 00 18 20 00       	push   $0x201800
f011d2ba:	e8 1d a1 fe ff       	call   f01073dc <kmalloc>
f011d2bf:	83 c4 10             	add    $0x10,%esp
f011d2c2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d2c8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d2ce:	89 c1                	mov    %eax,%ecx
f011d2d0:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d2d7:	10 00 00 
f011d2da:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d2e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2e5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d2eb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2f6:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d2fc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d302:	29 d0                	sub    %edx,%eax
f011d304:	89 c3                	mov    %eax,%ebx
f011d306:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d30d:	10 00 00 
f011d310:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d315:	0f b6 d0             	movzbl %al,%edx
f011d318:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d31e:	01 d0                	add    %edx,%eax
f011d320:	48                   	dec    %eax
f011d321:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d327:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d32d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d332:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d338:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d33e:	29 d0                	sub    %edx,%eax
f011d340:	01 c3                	add    %eax,%ebx
f011d342:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d349:	10 00 00 
f011d34c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d351:	0f b6 c0             	movzbl %al,%eax
f011d354:	c1 e0 04             	shl    $0x4,%eax
f011d357:	89 c2                	mov    %eax,%edx
f011d359:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d35f:	01 d0                	add    %edx,%eax
f011d361:	48                   	dec    %eax
f011d362:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d368:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d36e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d373:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d379:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d37f:	29 d0                	sub    %edx,%eax
f011d381:	01 d8                	add    %ebx,%eax
f011d383:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011d388:	39 c1                	cmp    %eax,%ecx
f011d38a:	74 17                	je     f011d3a3 <test_kmalloc_firstfit2+0x9d5>
f011d38c:	83 ec 04             	sub    $0x4,%esp
f011d38f:	68 54 a6 13 f0       	push   $0xf013a654
f011d394:	68 df 03 00 00       	push   $0x3df
f011d399:	68 3a a2 13 f0       	push   $0xf013a23a
f011d39e:	e8 03 2e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3a3:	e8 e4 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d3a8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d3ab:	74 17                	je     f011d3c4 <test_kmalloc_firstfit2+0x9f6>
f011d3ad:	83 ec 04             	sub    $0x4,%esp
f011d3b0:	68 54 a2 13 f0       	push   $0xf013a254
f011d3b5:	68 e0 03 00 00       	push   $0x3e0
f011d3ba:	68 3a a2 13 f0       	push   $0xf013a23a
f011d3bf:	e8 e2 2d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011d3c4:	e8 01 ea fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d3c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d3cc:	29 c2                	sub    %eax,%edx
f011d3ce:	89 d0                	mov    %edx,%eax
f011d3d0:	3d 02 02 00 00       	cmp    $0x202,%eax
f011d3d5:	74 17                	je     f011d3ee <test_kmalloc_firstfit2+0xa20>
f011d3d7:	83 ec 04             	sub    $0x4,%esp
f011d3da:	68 84 a6 13 f0       	push   $0xf013a684
f011d3df:	68 e1 03 00 00       	push   $0x3e1
f011d3e4:	68 3a a2 13 f0       	push   $0xf013a23a
f011d3e9:	e8 b8 2d fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d3ee:	e8 d7 e9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d3f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3f6:	e8 91 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d3fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011d3fe:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d404:	83 ec 0c             	sub    $0xc,%esp
f011d407:	50                   	push   %eax
f011d408:	e8 e9 9f fe ff       	call   f01073f6 <kfree>
f011d40d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d410:	e8 77 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d415:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d418:	74 17                	je     f011d431 <test_kmalloc_firstfit2+0xa63>
f011d41a:	83 ec 04             	sub    $0x4,%esp
f011d41d:	68 54 a2 13 f0       	push   $0xf013a254
f011d422:	68 e7 03 00 00       	push   $0x3e7
f011d427:	68 3a a2 13 f0       	push   $0xf013a23a
f011d42c:	e8 75 2d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d431:	e8 94 e9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d436:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d439:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d43e:	74 17                	je     f011d457 <test_kmalloc_firstfit2+0xa89>
f011d440:	83 ec 04             	sub    $0x4,%esp
f011d443:	68 97 a6 13 f0       	push   $0xf013a697
f011d448:	68 e8 03 00 00       	push   $0x3e8
f011d44d:	68 3a a2 13 f0       	push   $0xf013a23a
f011d452:	e8 4f 2d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011d457:	e8 6e e9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d45c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d45f:	e8 28 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d464:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011d467:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d46d:	83 ec 0c             	sub    $0xc,%esp
f011d470:	50                   	push   %eax
f011d471:	e8 80 9f fe ff       	call   f01073f6 <kfree>
f011d476:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d479:	e8 4c e9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d47e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d481:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d486:	74 17                	je     f011d49f <test_kmalloc_firstfit2+0xad1>
f011d488:	83 ec 04             	sub    $0x4,%esp
f011d48b:	68 97 a6 13 f0       	push   $0xf013a697
f011d490:	68 ee 03 00 00       	push   $0x3ee
f011d495:	68 3a a2 13 f0       	push   $0xf013a23a
f011d49a:	e8 07 2d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d49f:	e8 e8 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d4a4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d4a7:	74 17                	je     f011d4c0 <test_kmalloc_firstfit2+0xaf2>
f011d4a9:	83 ec 04             	sub    $0x4,%esp
f011d4ac:	68 54 a2 13 f0       	push   $0xf013a254
f011d4b1:	68 ef 03 00 00       	push   $0x3ef
f011d4b6:	68 3a a2 13 f0       	push   $0xf013a23a
f011d4bb:	e8 e6 2c fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011d4c0:	e8 05 e9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d4c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4c8:	e8 bf 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d4cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011d4d0:	83 ec 0c             	sub    $0xc,%esp
f011d4d3:	68 00 fc 4f 00       	push   $0x4ffc00
f011d4d8:	e8 ff 9e fe ff       	call   f01073dc <kmalloc>
f011d4dd:	83 c4 10             	add    $0x10,%esp
f011d4e0:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011d4e6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d4ec:	89 c1                	mov    %eax,%ecx
f011d4ee:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d4f5:	10 00 00 
f011d4f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d4fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d503:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d509:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d50f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d514:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d51a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d520:	29 d0                	sub    %edx,%eax
f011d522:	89 c3                	mov    %eax,%ebx
f011d524:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d52b:	10 00 00 
f011d52e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d533:	0f b6 d0             	movzbl %al,%edx
f011d536:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d53c:	01 d0                	add    %edx,%eax
f011d53e:	48                   	dec    %eax
f011d53f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d545:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d54b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d550:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d556:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d55c:	29 d0                	sub    %edx,%eax
f011d55e:	01 c3                	add    %eax,%ebx
f011d560:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d567:	10 00 00 
f011d56a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d56f:	0f b6 c0             	movzbl %al,%eax
f011d572:	c1 e0 04             	shl    $0x4,%eax
f011d575:	89 c2                	mov    %eax,%edx
f011d577:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d57d:	01 d0                	add    %edx,%eax
f011d57f:	48                   	dec    %eax
f011d580:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d586:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d58c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d591:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d597:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d59d:	29 d0                	sub    %edx,%eax
f011d59f:	01 d8                	add    %ebx,%eax
f011d5a1:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011d5a6:	39 c1                	cmp    %eax,%ecx
f011d5a8:	74 17                	je     f011d5c1 <test_kmalloc_firstfit2+0xbf3>
f011d5aa:	83 ec 04             	sub    $0x4,%esp
f011d5ad:	68 54 a6 13 f0       	push   $0xf013a654
f011d5b2:	68 f5 03 00 00       	push   $0x3f5
f011d5b7:	68 3a a2 13 f0       	push   $0xf013a23a
f011d5bc:	e8 e5 2b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5c1:	e8 c6 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d5c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d5c9:	74 17                	je     f011d5e2 <test_kmalloc_firstfit2+0xc14>
f011d5cb:	83 ec 04             	sub    $0x4,%esp
f011d5ce:	68 54 a2 13 f0       	push   $0xf013a254
f011d5d3:	68 f6 03 00 00       	push   $0x3f6
f011d5d8:	68 3a a2 13 f0       	push   $0xf013a23a
f011d5dd:	e8 c4 2b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d5e2:	e8 e3 e7 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d5e7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d5ea:	29 c2                	sub    %eax,%edx
f011d5ec:	89 d0                	mov    %edx,%eax
f011d5ee:	3d 00 05 00 00       	cmp    $0x500,%eax
f011d5f3:	74 17                	je     f011d60c <test_kmalloc_firstfit2+0xc3e>
f011d5f5:	83 ec 04             	sub    $0x4,%esp
f011d5f8:	68 84 a6 13 f0       	push   $0xf013a684
f011d5fd:	68 f7 03 00 00       	push   $0x3f7
f011d602:	68 3a a2 13 f0       	push   $0xf013a23a
f011d607:	e8 9a 2b fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d60c:	e8 b9 e7 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d611:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d614:	e8 73 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d619:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011d61c:	83 ec 0c             	sub    $0xc,%esp
f011d61f:	68 00 fc 2f 00       	push   $0x2ffc00
f011d624:	e8 b3 9d fe ff       	call   f01073dc <kmalloc>
f011d629:	83 c4 10             	add    $0x10,%esp
f011d62c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d632:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d638:	89 c1                	mov    %eax,%ecx
f011d63a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d641:	10 00 00 
f011d644:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d64a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d64f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d655:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d65b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d660:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d666:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d66c:	29 d0                	sub    %edx,%eax
f011d66e:	89 c3                	mov    %eax,%ebx
f011d670:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d677:	10 00 00 
f011d67a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d67f:	0f b6 d0             	movzbl %al,%edx
f011d682:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d688:	01 d0                	add    %edx,%eax
f011d68a:	48                   	dec    %eax
f011d68b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d691:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d697:	ba 00 00 00 00       	mov    $0x0,%edx
f011d69c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d6a2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d6a8:	29 d0                	sub    %edx,%eax
f011d6aa:	01 c3                	add    %eax,%ebx
f011d6ac:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d6b3:	10 00 00 
f011d6b6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d6bb:	0f b6 c0             	movzbl %al,%eax
f011d6be:	c1 e0 04             	shl    $0x4,%eax
f011d6c1:	89 c2                	mov    %eax,%edx
f011d6c3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d6c9:	01 d0                	add    %edx,%eax
f011d6cb:	48                   	dec    %eax
f011d6cc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d6d2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d6d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6dd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d6e3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d6e9:	29 d0                	sub    %edx,%eax
f011d6eb:	01 d8                	add    %ebx,%eax
f011d6ed:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d6f2:	39 c1                	cmp    %eax,%ecx
f011d6f4:	74 17                	je     f011d70d <test_kmalloc_firstfit2+0xd3f>
f011d6f6:	83 ec 04             	sub    $0x4,%esp
f011d6f9:	68 54 a6 13 f0       	push   $0xf013a654
f011d6fe:	68 05 04 00 00       	push   $0x405
f011d703:	68 3a a2 13 f0       	push   $0xf013a23a
f011d708:	e8 99 2a fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d70d:	e8 7a 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d712:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d715:	74 17                	je     f011d72e <test_kmalloc_firstfit2+0xd60>
f011d717:	83 ec 04             	sub    $0x4,%esp
f011d71a:	68 54 a2 13 f0       	push   $0xf013a254
f011d71f:	68 06 04 00 00       	push   $0x406
f011d724:	68 3a a2 13 f0       	push   $0xf013a23a
f011d729:	e8 78 2a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d72e:	e8 97 e6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d733:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d736:	29 c2                	sub    %eax,%edx
f011d738:	89 d0                	mov    %edx,%eax
f011d73a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d73f:	74 17                	je     f011d758 <test_kmalloc_firstfit2+0xd8a>
f011d741:	83 ec 04             	sub    $0x4,%esp
f011d744:	68 84 a6 13 f0       	push   $0xf013a684
f011d749:	68 07 04 00 00       	push   $0x407
f011d74e:	68 3a a2 13 f0       	push   $0xf013a23a
f011d753:	e8 4e 2a fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011d758:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d75f:	10 00 00 
f011d762:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d768:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d76d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d773:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d779:	ba 00 00 00 00       	mov    $0x0,%edx
f011d77e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d784:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d78a:	29 d0                	sub    %edx,%eax
f011d78c:	89 c1                	mov    %eax,%ecx
f011d78e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d795:	10 00 00 
f011d798:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d79d:	0f b6 d0             	movzbl %al,%edx
f011d7a0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d7a6:	01 d0                	add    %edx,%eax
f011d7a8:	48                   	dec    %eax
f011d7a9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d7af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d7b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7ba:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d7c0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d7c6:	29 d0                	sub    %edx,%eax
f011d7c8:	01 c1                	add    %eax,%ecx
f011d7ca:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d7d1:	10 00 00 
f011d7d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d7d9:	0f b6 c0             	movzbl %al,%eax
f011d7dc:	c1 e0 04             	shl    $0x4,%eax
f011d7df:	89 c2                	mov    %eax,%edx
f011d7e1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d7e7:	01 d0                	add    %edx,%eax
f011d7e9:	48                   	dec    %eax
f011d7ea:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d7f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d7f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7fb:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d801:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d807:	29 d0                	sub    %edx,%eax
f011d809:	01 c8                	add    %ecx,%eax
f011d80b:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011d810:	29 c2                	sub    %eax,%edx
f011d812:	89 d0                	mov    %edx,%eax
f011d814:	83 ec 0c             	sub    $0xc,%esp
f011d817:	50                   	push   %eax
f011d818:	e8 bf 9b fe ff       	call   f01073dc <kmalloc>
f011d81d:	83 c4 10             	add    $0x10,%esp
f011d820:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011d826:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d82c:	85 c0                	test   %eax,%eax
f011d82e:	74 17                	je     f011d847 <test_kmalloc_firstfit2+0xe79>
f011d830:	83 ec 04             	sub    $0x4,%esp
f011d833:	68 84 a7 13 f0       	push   $0xf013a784
f011d838:	68 0d 04 00 00       	push   $0x40d
f011d83d:	68 3a a2 13 f0       	push   $0xf013a23a
f011d842:	e8 5f 29 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011d847:	83 ec 0c             	sub    $0xc,%esp
f011d84a:	68 c4 a8 13 f0       	push   $0xf013a8c4
f011d84f:	e8 d9 33 fe ff       	call   f0100c2d <cprintf>
f011d854:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011d857:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d85c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d85f:	5b                   	pop    %ebx
f011d860:	5f                   	pop    %edi
f011d861:	5d                   	pop    %ebp
f011d862:	c3                   	ret    

f011d863 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011d863:	55                   	push   %ebp
f011d864:	89 e5                	mov    %esp,%ebp
f011d866:	57                   	push   %edi
f011d867:	53                   	push   %ebx
f011d868:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011d86e:	83 ec 0c             	sub    $0xc,%esp
f011d871:	68 7c a1 13 f0       	push   $0xf013a17c
f011d876:	e8 b2 33 fe ff       	call   f0100c2d <cprintf>
f011d87b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d87e:	83 ec 0c             	sub    $0xc,%esp
f011d881:	68 ac a1 13 f0       	push   $0xf013a1ac
f011d886:	e8 a2 33 fe ff       	call   f0100c2d <cprintf>
f011d88b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d88e:	83 ec 0c             	sub    $0xc,%esp
f011d891:	68 7c a1 13 f0       	push   $0xf013a17c
f011d896:	e8 92 33 fe ff       	call   f0100c2d <cprintf>
f011d89b:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011d89e:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011d8a4:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011d8a9:	b8 00 00 00 00       	mov    $0x0,%eax
f011d8ae:	89 d7                	mov    %edx,%edi
f011d8b0:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011d8b2:	e8 13 e5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011d8b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011d8ba:	e8 cd 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d8bf:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011d8c2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011d8c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d8d0:	eb 1f                	jmp    f011d8f1 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011d8d2:	83 ec 0c             	sub    $0xc,%esp
f011d8d5:	68 00 00 20 00       	push   $0x200000
f011d8da:	e8 fd 9a fe ff       	call   f01073dc <kmalloc>
f011d8df:	83 c4 10             	add    $0x10,%esp
f011d8e2:	89 c2                	mov    %eax,%edx
f011d8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d8e7:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011d8ee:	ff 45 f4             	incl   -0xc(%ebp)
f011d8f1:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011d8f5:	7e db                	jle    f011d8d2 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011d8f7:	83 ec 0c             	sub    $0xc,%esp
f011d8fa:	68 00 b0 1f 00       	push   $0x1fb000
f011d8ff:	e8 d8 9a fe ff       	call   f01073dc <kmalloc>
f011d904:	83 c4 10             	add    $0x10,%esp
f011d907:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011d90d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011d913:	89 c1                	mov    %eax,%ecx
f011d915:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d91c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d91f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d924:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d927:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d92a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d92f:	f7 75 e4             	divl   -0x1c(%ebp)
f011d932:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d935:	29 d0                	sub    %edx,%eax
f011d937:	89 c3                	mov    %eax,%ebx
f011d939:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d940:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d945:	0f b6 d0             	movzbl %al,%edx
f011d948:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d94b:	01 d0                	add    %edx,%eax
f011d94d:	48                   	dec    %eax
f011d94e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d951:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d954:	ba 00 00 00 00       	mov    $0x0,%edx
f011d959:	f7 75 dc             	divl   -0x24(%ebp)
f011d95c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d95f:	29 d0                	sub    %edx,%eax
f011d961:	01 c3                	add    %eax,%ebx
f011d963:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d96a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d96f:	0f b6 c0             	movzbl %al,%eax
f011d972:	c1 e0 04             	shl    $0x4,%eax
f011d975:	89 c2                	mov    %eax,%edx
f011d977:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d97a:	01 d0                	add    %edx,%eax
f011d97c:	48                   	dec    %eax
f011d97d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d980:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d983:	ba 00 00 00 00       	mov    $0x0,%edx
f011d988:	f7 75 d4             	divl   -0x2c(%ebp)
f011d98b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d98e:	29 d0                	sub    %edx,%eax
f011d990:	01 d8                	add    %ebx,%eax
f011d992:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d997:	39 c1                	cmp    %eax,%ecx
f011d999:	0f 85 c0 04 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011d99f:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011d9a5:	89 c1                	mov    %eax,%ecx
f011d9a7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d9ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d9b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d9b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d9bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9c1:	f7 75 cc             	divl   -0x34(%ebp)
f011d9c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d9c7:	29 d0                	sub    %edx,%eax
f011d9c9:	89 c3                	mov    %eax,%ebx
f011d9cb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d9d2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d9d7:	0f b6 d0             	movzbl %al,%edx
f011d9da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d9dd:	01 d0                	add    %edx,%eax
f011d9df:	48                   	dec    %eax
f011d9e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d9e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9eb:	f7 75 c4             	divl   -0x3c(%ebp)
f011d9ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9f1:	29 d0                	sub    %edx,%eax
f011d9f3:	01 c3                	add    %eax,%ebx
f011d9f5:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d9fc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011da01:	0f b6 c0             	movzbl %al,%eax
f011da04:	c1 e0 04             	shl    $0x4,%eax
f011da07:	89 c2                	mov    %eax,%edx
f011da09:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011da0c:	01 d0                	add    %edx,%eax
f011da0e:	48                   	dec    %eax
f011da0f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011da12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da15:	ba 00 00 00 00       	mov    $0x0,%edx
f011da1a:	f7 75 bc             	divl   -0x44(%ebp)
f011da1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da20:	29 d0                	sub    %edx,%eax
f011da22:	01 d8                	add    %ebx,%eax
f011da24:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011da29:	39 c1                	cmp    %eax,%ecx
f011da2b:	0f 85 2e 04 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011da31:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011da37:	89 c1                	mov    %eax,%ecx
f011da39:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011da40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011da43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da48:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011da4b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011da53:	f7 75 b4             	divl   -0x4c(%ebp)
f011da56:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da59:	29 d0                	sub    %edx,%eax
f011da5b:	89 c3                	mov    %eax,%ebx
f011da5d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011da64:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011da69:	0f b6 d0             	movzbl %al,%edx
f011da6c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011da6f:	01 d0                	add    %edx,%eax
f011da71:	48                   	dec    %eax
f011da72:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011da75:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011da78:	ba 00 00 00 00       	mov    $0x0,%edx
f011da7d:	f7 75 ac             	divl   -0x54(%ebp)
f011da80:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011da83:	29 d0                	sub    %edx,%eax
f011da85:	01 c3                	add    %eax,%ebx
f011da87:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011da8e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011da93:	0f b6 c0             	movzbl %al,%eax
f011da96:	c1 e0 04             	shl    $0x4,%eax
f011da99:	89 c2                	mov    %eax,%edx
f011da9b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011da9e:	01 d0                	add    %edx,%eax
f011daa0:	48                   	dec    %eax
f011daa1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011daa4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011daa7:	ba 00 00 00 00       	mov    $0x0,%edx
f011daac:	f7 75 a4             	divl   -0x5c(%ebp)
f011daaf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011dab2:	29 d0                	sub    %edx,%eax
f011dab4:	01 d8                	add    %ebx,%eax
f011dab6:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011dabb:	39 c1                	cmp    %eax,%ecx
f011dabd:	0f 85 9c 03 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011dac3:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011dac9:	89 c1                	mov    %eax,%ecx
f011dacb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dad2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dad5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dada:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dadd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dae0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dae5:	f7 75 9c             	divl   -0x64(%ebp)
f011dae8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011daeb:	29 d0                	sub    %edx,%eax
f011daed:	89 c3                	mov    %eax,%ebx
f011daef:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011daf6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dafb:	0f b6 d0             	movzbl %al,%edx
f011dafe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011db01:	01 d0                	add    %edx,%eax
f011db03:	48                   	dec    %eax
f011db04:	89 45 90             	mov    %eax,-0x70(%ebp)
f011db07:	8b 45 90             	mov    -0x70(%ebp),%eax
f011db0a:	ba 00 00 00 00       	mov    $0x0,%edx
f011db0f:	f7 75 94             	divl   -0x6c(%ebp)
f011db12:	8b 45 90             	mov    -0x70(%ebp),%eax
f011db15:	29 d0                	sub    %edx,%eax
f011db17:	01 c3                	add    %eax,%ebx
f011db19:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011db20:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011db25:	0f b6 c0             	movzbl %al,%eax
f011db28:	c1 e0 04             	shl    $0x4,%eax
f011db2b:	89 c2                	mov    %eax,%edx
f011db2d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011db30:	01 d0                	add    %edx,%eax
f011db32:	48                   	dec    %eax
f011db33:	89 45 88             	mov    %eax,-0x78(%ebp)
f011db36:	8b 45 88             	mov    -0x78(%ebp),%eax
f011db39:	ba 00 00 00 00       	mov    $0x0,%edx
f011db3e:	f7 75 8c             	divl   -0x74(%ebp)
f011db41:	8b 45 88             	mov    -0x78(%ebp),%eax
f011db44:	29 d0                	sub    %edx,%eax
f011db46:	01 d8                	add    %ebx,%eax
f011db48:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011db4d:	39 c1                	cmp    %eax,%ecx
f011db4f:	0f 85 0a 03 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011db55:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011db5b:	89 c1                	mov    %eax,%ecx
f011db5d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011db64:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011db67:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db6c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011db6f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011db72:	ba 00 00 00 00       	mov    $0x0,%edx
f011db77:	f7 75 84             	divl   -0x7c(%ebp)
f011db7a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011db7d:	29 d0                	sub    %edx,%eax
f011db7f:	89 c3                	mov    %eax,%ebx
f011db81:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011db88:	10 00 00 
f011db8b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011db90:	0f b6 d0             	movzbl %al,%edx
f011db93:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011db99:	01 d0                	add    %edx,%eax
f011db9b:	48                   	dec    %eax
f011db9c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011dba2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dba8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbad:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011dbb3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011dbb9:	29 d0                	sub    %edx,%eax
f011dbbb:	01 c3                	add    %eax,%ebx
f011dbbd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011dbc4:	10 00 00 
f011dbc7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dbcc:	0f b6 c0             	movzbl %al,%eax
f011dbcf:	c1 e0 04             	shl    $0x4,%eax
f011dbd2:	89 c2                	mov    %eax,%edx
f011dbd4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011dbda:	01 d0                	add    %edx,%eax
f011dbdc:	48                   	dec    %eax
f011dbdd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011dbe3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dbe9:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbee:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011dbf4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dbfa:	29 d0                	sub    %edx,%eax
f011dbfc:	01 d8                	add    %ebx,%eax
f011dbfe:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011dc03:	39 c1                	cmp    %eax,%ecx
f011dc05:	0f 85 54 02 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011dc0b:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011dc11:	89 c1                	mov    %eax,%ecx
f011dc13:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dc1a:	10 00 00 
f011dc1d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dc23:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc28:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dc2e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dc34:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc39:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dc3f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dc45:	29 d0                	sub    %edx,%eax
f011dc47:	89 c3                	mov    %eax,%ebx
f011dc49:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dc50:	10 00 00 
f011dc53:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dc58:	0f b6 d0             	movzbl %al,%edx
f011dc5b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dc61:	01 d0                	add    %edx,%eax
f011dc63:	48                   	dec    %eax
f011dc64:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dc6a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dc70:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc75:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dc7b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dc81:	29 d0                	sub    %edx,%eax
f011dc83:	01 c3                	add    %eax,%ebx
f011dc85:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dc8c:	10 00 00 
f011dc8f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dc94:	0f b6 c0             	movzbl %al,%eax
f011dc97:	c1 e0 04             	shl    $0x4,%eax
f011dc9a:	89 c2                	mov    %eax,%edx
f011dc9c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dca2:	01 d0                	add    %edx,%eax
f011dca4:	48                   	dec    %eax
f011dca5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011dcab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dcb1:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcb6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011dcbc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dcc2:	29 d0                	sub    %edx,%eax
f011dcc4:	01 d8                	add    %ebx,%eax
f011dcc6:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011dccb:	39 c1                	cmp    %eax,%ecx
f011dccd:	0f 85 8c 01 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011dcd3:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011dcd9:	89 c1                	mov    %eax,%ecx
f011dcdb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011dce2:	10 00 00 
f011dce5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011dceb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcf0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011dcf6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dcfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd01:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011dd07:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dd0d:	29 d0                	sub    %edx,%eax
f011dd0f:	89 c3                	mov    %eax,%ebx
f011dd11:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011dd18:	10 00 00 
f011dd1b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dd20:	0f b6 d0             	movzbl %al,%edx
f011dd23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dd29:	01 d0                	add    %edx,%eax
f011dd2b:	48                   	dec    %eax
f011dd2c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011dd32:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dd38:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd3d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011dd43:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dd49:	29 d0                	sub    %edx,%eax
f011dd4b:	01 c3                	add    %eax,%ebx
f011dd4d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dd54:	10 00 00 
f011dd57:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dd5c:	0f b6 c0             	movzbl %al,%eax
f011dd5f:	c1 e0 04             	shl    $0x4,%eax
f011dd62:	89 c2                	mov    %eax,%edx
f011dd64:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dd6a:	01 d0                	add    %edx,%eax
f011dd6c:	48                   	dec    %eax
f011dd6d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011dd73:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dd79:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd7e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011dd84:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dd8a:	29 d0                	sub    %edx,%eax
f011dd8c:	01 d8                	add    %ebx,%eax
f011dd8e:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011dd93:	39 c1                	cmp    %eax,%ecx
f011dd95:	0f 85 c4 00 00 00    	jne    f011de5f <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011dd9b:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011dda1:	89 c1                	mov    %eax,%ecx
f011dda3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ddaa:	10 00 00 
f011ddad:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ddb3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddb8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ddbe:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ddc4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddc9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ddcf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ddd5:	29 d0                	sub    %edx,%eax
f011ddd7:	89 c3                	mov    %eax,%ebx
f011ddd9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011dde0:	10 00 00 
f011dde3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dde8:	0f b6 d0             	movzbl %al,%edx
f011ddeb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ddf1:	01 d0                	add    %edx,%eax
f011ddf3:	48                   	dec    %eax
f011ddf4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ddfa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011de00:	ba 00 00 00 00       	mov    $0x0,%edx
f011de05:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011de0b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011de11:	29 d0                	sub    %edx,%eax
f011de13:	01 c3                	add    %eax,%ebx
f011de15:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011de1c:	10 00 00 
f011de1f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011de24:	0f b6 c0             	movzbl %al,%eax
f011de27:	c1 e0 04             	shl    $0x4,%eax
f011de2a:	89 c2                	mov    %eax,%edx
f011de2c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011de32:	01 d0                	add    %edx,%eax
f011de34:	48                   	dec    %eax
f011de35:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011de3b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de41:	ba 00 00 00 00       	mov    $0x0,%edx
f011de46:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011de4c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de52:	29 d0                	sub    %edx,%eax
f011de54:	01 d8                	add    %ebx,%eax
f011de56:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011de5b:	39 c1                	cmp    %eax,%ecx
f011de5d:	74 17                	je     f011de76 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011de5f:	83 ec 04             	sub    $0x4,%esp
f011de62:	68 10 a9 13 f0       	push   $0xf013a910
f011de67:	68 31 04 00 00       	push   $0x431
f011de6c:	68 3a a2 13 f0       	push   $0xf013a23a
f011de71:	e8 30 23 fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de76:	e8 11 5e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011de7b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011de7e:	74 17                	je     f011de97 <test_kmalloc_worstfit+0x634>
f011de80:	83 ec 04             	sub    $0x4,%esp
f011de83:	68 54 a2 13 f0       	push   $0xf013a254
f011de88:	68 33 04 00 00       	push   $0x433
f011de8d:	68 3a a2 13 f0       	push   $0xf013a23a
f011de92:	e8 0f 23 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011de97:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011de9a:	e8 2b df fe ff       	call   f010bdca <sys_calculate_free_frames>
f011de9f:	29 c3                	sub    %eax,%ebx
f011dea1:	89 d8                	mov    %ebx,%eax
f011dea3:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011dea8:	74 17                	je     f011dec1 <test_kmalloc_worstfit+0x65e>
f011deaa:	83 ec 04             	sub    $0x4,%esp
f011dead:	68 f7 a4 13 f0       	push   $0xf013a4f7
f011deb2:	68 34 04 00 00       	push   $0x434
f011deb7:	68 3a a2 13 f0       	push   $0xf013a23a
f011debc:	e8 e5 22 fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011dec1:	e8 04 df fe ff       	call   f010bdca <sys_calculate_free_frames>
f011dec6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011dec9:	e8 be 5d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dece:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011ded1:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ded7:	83 ec 0c             	sub    $0xc,%esp
f011deda:	50                   	push   %eax
f011dedb:	e8 16 95 fe ff       	call   f01073f6 <kfree>
f011dee0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011dee3:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011dee9:	83 ec 0c             	sub    $0xc,%esp
f011deec:	50                   	push   %eax
f011deed:	e8 04 95 fe ff       	call   f01073f6 <kfree>
f011def2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011def5:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011defb:	83 ec 0c             	sub    $0xc,%esp
f011defe:	50                   	push   %eax
f011deff:	e8 f2 94 fe ff       	call   f01073f6 <kfree>
f011df04:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011df07:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011df0d:	83 ec 0c             	sub    $0xc,%esp
f011df10:	50                   	push   %eax
f011df11:	e8 e0 94 fe ff       	call   f01073f6 <kfree>
f011df16:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011df19:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011df1f:	83 ec 0c             	sub    $0xc,%esp
f011df22:	50                   	push   %eax
f011df23:	e8 ce 94 fe ff       	call   f01073f6 <kfree>
f011df28:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011df2b:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011df31:	83 ec 0c             	sub    $0xc,%esp
f011df34:	50                   	push   %eax
f011df35:	e8 bc 94 fe ff       	call   f01073f6 <kfree>
f011df3a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011df3d:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011df43:	83 ec 0c             	sub    $0xc,%esp
f011df46:	50                   	push   %eax
f011df47:	e8 aa 94 fe ff       	call   f01073f6 <kfree>
f011df4c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011df4f:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011df55:	83 ec 0c             	sub    $0xc,%esp
f011df58:	50                   	push   %eax
f011df59:	e8 98 94 fe ff       	call   f01073f6 <kfree>
f011df5e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011df61:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011df67:	83 ec 0c             	sub    $0xc,%esp
f011df6a:	50                   	push   %eax
f011df6b:	e8 86 94 fe ff       	call   f01073f6 <kfree>
f011df70:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011df73:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011df79:	83 ec 0c             	sub    $0xc,%esp
f011df7c:	50                   	push   %eax
f011df7d:	e8 74 94 fe ff       	call   f01073f6 <kfree>
f011df82:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011df85:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011df8b:	83 ec 0c             	sub    $0xc,%esp
f011df8e:	50                   	push   %eax
f011df8f:	e8 62 94 fe ff       	call   f01073f6 <kfree>
f011df94:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011df97:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011df9d:	83 ec 0c             	sub    $0xc,%esp
f011dfa0:	50                   	push   %eax
f011dfa1:	e8 50 94 fe ff       	call   f01073f6 <kfree>
f011dfa6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011dfa9:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011dfaf:	83 ec 0c             	sub    $0xc,%esp
f011dfb2:	50                   	push   %eax
f011dfb3:	e8 3e 94 fe ff       	call   f01073f6 <kfree>
f011dfb8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011dfbb:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011dfc1:	83 ec 0c             	sub    $0xc,%esp
f011dfc4:	50                   	push   %eax
f011dfc5:	e8 2c 94 fe ff       	call   f01073f6 <kfree>
f011dfca:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011dfcd:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011dfd3:	83 ec 0c             	sub    $0xc,%esp
f011dfd6:	50                   	push   %eax
f011dfd7:	e8 1a 94 fe ff       	call   f01073f6 <kfree>
f011dfdc:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfdf:	e8 a8 5c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dfe4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011dfe7:	74 17                	je     f011e000 <test_kmalloc_worstfit+0x79d>
f011dfe9:	83 ec 04             	sub    $0x4,%esp
f011dfec:	68 54 a2 13 f0       	push   $0xf013a254
f011dff1:	68 4a 04 00 00       	push   $0x44a
f011dff6:	68 3a a2 13 f0       	push   $0xf013a23a
f011dffb:	e8 a6 21 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e000:	e8 c5 dd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e005:	89 c2                	mov    %eax,%edx
f011e007:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e00a:	29 c2                	sub    %eax,%edx
f011e00c:	89 d0                	mov    %edx,%eax
f011e00e:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e013:	74 17                	je     f011e02c <test_kmalloc_worstfit+0x7c9>
f011e015:	83 ec 04             	sub    $0x4,%esp
f011e018:	68 08 a5 13 f0       	push   $0xf013a508
f011e01d:	68 4b 04 00 00       	push   $0x44b
f011e022:	68 3a a2 13 f0       	push   $0xf013a23a
f011e027:	e8 7a 21 fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e02c:	e8 99 dd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e031:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e034:	e8 53 5c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e039:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e03c:	83 ec 0c             	sub    $0xc,%esp
f011e03f:	68 00 00 10 00       	push   $0x100000
f011e044:	e8 93 93 fe ff       	call   f01073dc <kmalloc>
f011e049:	83 c4 10             	add    $0x10,%esp
f011e04c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e052:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e059:	10 00 00 
f011e05c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e062:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e067:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e06d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e073:	ba 00 00 00 00       	mov    $0x0,%edx
f011e078:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e07e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e084:	29 d0                	sub    %edx,%eax
f011e086:	89 c1                	mov    %eax,%ecx
f011e088:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e08f:	10 00 00 
f011e092:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e097:	0f b6 d0             	movzbl %al,%edx
f011e09a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e0a0:	01 d0                	add    %edx,%eax
f011e0a2:	48                   	dec    %eax
f011e0a3:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e0a9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e0af:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0b4:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e0ba:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e0c0:	29 d0                	sub    %edx,%eax
f011e0c2:	01 c1                	add    %eax,%ecx
f011e0c4:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011e0cb:	10 00 00 
f011e0ce:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e0d3:	0f b6 c0             	movzbl %al,%eax
f011e0d6:	c1 e0 04             	shl    $0x4,%eax
f011e0d9:	89 c2                	mov    %eax,%edx
f011e0db:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e0e1:	01 d0                	add    %edx,%eax
f011e0e3:	48                   	dec    %eax
f011e0e4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011e0ea:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e0f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0f5:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011e0fb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e101:	29 d0                	sub    %edx,%eax
f011e103:	01 c8                	add    %ecx,%eax
f011e105:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e10b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e111:	39 c2                	cmp    %eax,%edx
f011e113:	74 17                	je     f011e12c <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011e115:	83 ec 04             	sub    $0x4,%esp
f011e118:	68 54 a9 13 f0       	push   $0xf013a954
f011e11d:	68 52 04 00 00       	push   $0x452
f011e122:	68 3a a2 13 f0       	push   $0xf013a23a
f011e127:	e8 7a 20 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e12c:	e8 5b 5b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e131:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e134:	74 17                	je     f011e14d <test_kmalloc_worstfit+0x8ea>
f011e136:	83 ec 04             	sub    $0x4,%esp
f011e139:	68 54 a2 13 f0       	push   $0xf013a254
f011e13e:	68 53 04 00 00       	push   $0x453
f011e143:	68 3a a2 13 f0       	push   $0xf013a23a
f011e148:	e8 59 20 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e14d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e150:	e8 75 dc fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e155:	29 c3                	sub    %eax,%ebx
f011e157:	89 d8                	mov    %ebx,%eax
f011e159:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e15e:	74 17                	je     f011e177 <test_kmalloc_worstfit+0x914>
f011e160:	83 ec 04             	sub    $0x4,%esp
f011e163:	68 72 a7 13 f0       	push   $0xf013a772
f011e168:	68 54 04 00 00       	push   $0x454
f011e16d:	68 3a a2 13 f0       	push   $0xf013a23a
f011e172:	e8 2f 20 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e177:	ff 45 e8             	incl   -0x18(%ebp)
f011e17a:	83 ec 08             	sub    $0x8,%esp
f011e17d:	ff 75 e8             	pushl  -0x18(%ebp)
f011e180:	68 74 a9 13 f0       	push   $0xf013a974
f011e185:	e8 a3 2a fe ff       	call   f0100c2d <cprintf>
f011e18a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e18d:	e8 38 dc fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e192:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e195:	e8 f2 5a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e19a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e19d:	83 ec 0c             	sub    $0xc,%esp
f011e1a0:	68 00 00 40 00       	push   $0x400000
f011e1a5:	e8 32 92 fe ff       	call   f01073dc <kmalloc>
f011e1aa:	83 c4 10             	add    $0x10,%esp
f011e1ad:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e1b3:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011e1ba:	10 00 00 
f011e1bd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e1c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e1c8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011e1ce:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e1d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d9:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011e1df:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e1e5:	29 d0                	sub    %edx,%eax
f011e1e7:	89 c1                	mov    %eax,%ecx
f011e1e9:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011e1f0:	10 00 00 
f011e1f3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e1f8:	0f b6 d0             	movzbl %al,%edx
f011e1fb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e201:	01 d0                	add    %edx,%eax
f011e203:	48                   	dec    %eax
f011e204:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011e20a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e210:	ba 00 00 00 00       	mov    $0x0,%edx
f011e215:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011e21b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e221:	29 d0                	sub    %edx,%eax
f011e223:	01 c1                	add    %eax,%ecx
f011e225:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011e22c:	10 00 00 
f011e22f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e234:	0f b6 c0             	movzbl %al,%eax
f011e237:	c1 e0 04             	shl    $0x4,%eax
f011e23a:	89 c2                	mov    %eax,%edx
f011e23c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e242:	01 d0                	add    %edx,%eax
f011e244:	48                   	dec    %eax
f011e245:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011e24b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e251:	ba 00 00 00 00       	mov    $0x0,%edx
f011e256:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011e25c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e262:	29 d0                	sub    %edx,%eax
f011e264:	01 c8                	add    %ecx,%eax
f011e266:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e26c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e272:	39 c2                	cmp    %eax,%edx
f011e274:	74 17                	je     f011e28d <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011e276:	83 ec 04             	sub    $0x4,%esp
f011e279:	68 54 a9 13 f0       	push   $0xf013a954
f011e27e:	68 5b 04 00 00       	push   $0x45b
f011e283:	68 3a a2 13 f0       	push   $0xf013a23a
f011e288:	e8 19 1f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e28d:	e8 fa 59 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e292:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e295:	74 17                	je     f011e2ae <test_kmalloc_worstfit+0xa4b>
f011e297:	83 ec 04             	sub    $0x4,%esp
f011e29a:	68 54 a2 13 f0       	push   $0xf013a254
f011e29f:	68 5c 04 00 00       	push   $0x45c
f011e2a4:	68 3a a2 13 f0       	push   $0xf013a23a
f011e2a9:	e8 f8 1e fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e2ae:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e2b1:	e8 14 db fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e2b6:	29 c3                	sub    %eax,%ebx
f011e2b8:	89 d8                	mov    %ebx,%eax
f011e2ba:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e2bf:	74 17                	je     f011e2d8 <test_kmalloc_worstfit+0xa75>
f011e2c1:	83 ec 04             	sub    $0x4,%esp
f011e2c4:	68 72 a7 13 f0       	push   $0xf013a772
f011e2c9:	68 5d 04 00 00       	push   $0x45d
f011e2ce:	68 3a a2 13 f0       	push   $0xf013a23a
f011e2d3:	e8 ce 1e fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e2d8:	ff 45 e8             	incl   -0x18(%ebp)
f011e2db:	83 ec 08             	sub    $0x8,%esp
f011e2de:	ff 75 e8             	pushl  -0x18(%ebp)
f011e2e1:	68 74 a9 13 f0       	push   $0xf013a974
f011e2e6:	e8 42 29 fe ff       	call   f0100c2d <cprintf>
f011e2eb:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e2ee:	e8 d7 da fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e2f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e2f6:	e8 91 59 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e2fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e2fe:	83 ec 0c             	sub    $0xc,%esp
f011e301:	68 00 00 60 00       	push   $0x600000
f011e306:	e8 d1 90 fe ff       	call   f01073dc <kmalloc>
f011e30b:	83 c4 10             	add    $0x10,%esp
f011e30e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e314:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011e31b:	10 00 00 
f011e31e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e324:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e329:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011e32f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e335:	ba 00 00 00 00       	mov    $0x0,%edx
f011e33a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011e340:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e346:	29 d0                	sub    %edx,%eax
f011e348:	89 c1                	mov    %eax,%ecx
f011e34a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011e351:	10 00 00 
f011e354:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e359:	0f b6 d0             	movzbl %al,%edx
f011e35c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e362:	01 d0                	add    %edx,%eax
f011e364:	48                   	dec    %eax
f011e365:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011e36b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e371:	ba 00 00 00 00       	mov    $0x0,%edx
f011e376:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011e37c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e382:	29 d0                	sub    %edx,%eax
f011e384:	01 c1                	add    %eax,%ecx
f011e386:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011e38d:	10 00 00 
f011e390:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e395:	0f b6 c0             	movzbl %al,%eax
f011e398:	c1 e0 04             	shl    $0x4,%eax
f011e39b:	89 c2                	mov    %eax,%edx
f011e39d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011e3a3:	01 d0                	add    %edx,%eax
f011e3a5:	48                   	dec    %eax
f011e3a6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011e3ac:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e3b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3b7:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011e3bd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e3c3:	29 d0                	sub    %edx,%eax
f011e3c5:	01 c8                	add    %ecx,%eax
f011e3c7:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011e3cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e3d3:	39 c2                	cmp    %eax,%edx
f011e3d5:	74 17                	je     f011e3ee <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011e3d7:	83 ec 04             	sub    $0x4,%esp
f011e3da:	68 54 a9 13 f0       	push   $0xf013a954
f011e3df:	68 64 04 00 00       	push   $0x464
f011e3e4:	68 3a a2 13 f0       	push   $0xf013a23a
f011e3e9:	e8 b8 1d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3ee:	e8 99 58 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e3f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e3f6:	74 17                	je     f011e40f <test_kmalloc_worstfit+0xbac>
f011e3f8:	83 ec 04             	sub    $0x4,%esp
f011e3fb:	68 54 a2 13 f0       	push   $0xf013a254
f011e400:	68 65 04 00 00       	push   $0x465
f011e405:	68 3a a2 13 f0       	push   $0xf013a23a
f011e40a:	e8 97 1d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e40f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e412:	e8 b3 d9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e417:	29 c3                	sub    %eax,%ebx
f011e419:	89 d8                	mov    %ebx,%eax
f011e41b:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e420:	74 17                	je     f011e439 <test_kmalloc_worstfit+0xbd6>
f011e422:	83 ec 04             	sub    $0x4,%esp
f011e425:	68 72 a7 13 f0       	push   $0xf013a772
f011e42a:	68 66 04 00 00       	push   $0x466
f011e42f:	68 3a a2 13 f0       	push   $0xf013a23a
f011e434:	e8 6d 1d fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e439:	ff 45 e8             	incl   -0x18(%ebp)
f011e43c:	83 ec 08             	sub    $0x8,%esp
f011e43f:	ff 75 e8             	pushl  -0x18(%ebp)
f011e442:	68 74 a9 13 f0       	push   $0xf013a974
f011e447:	e8 e1 27 fe ff       	call   f0100c2d <cprintf>
f011e44c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e44f:	e8 76 d9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e454:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e457:	e8 30 58 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e45c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011e45f:	83 ec 0c             	sub    $0xc,%esp
f011e462:	68 00 00 50 00       	push   $0x500000
f011e467:	e8 70 8f fe ff       	call   f01073dc <kmalloc>
f011e46c:	83 c4 10             	add    $0x10,%esp
f011e46f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011e475:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011e47c:	10 00 00 
f011e47f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e485:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e48a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011e490:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e496:	ba 00 00 00 00       	mov    $0x0,%edx
f011e49b:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011e4a1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e4a7:	29 d0                	sub    %edx,%eax
f011e4a9:	89 c1                	mov    %eax,%ecx
f011e4ab:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011e4b2:	10 00 00 
f011e4b5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e4ba:	0f b6 d0             	movzbl %al,%edx
f011e4bd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011e4c3:	01 d0                	add    %edx,%eax
f011e4c5:	48                   	dec    %eax
f011e4c6:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011e4cc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e4d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4d7:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011e4dd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e4e3:	29 d0                	sub    %edx,%eax
f011e4e5:	01 c1                	add    %eax,%ecx
f011e4e7:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011e4ee:	10 00 00 
f011e4f1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e4f6:	0f b6 c0             	movzbl %al,%eax
f011e4f9:	c1 e0 04             	shl    $0x4,%eax
f011e4fc:	89 c2                	mov    %eax,%edx
f011e4fe:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011e504:	01 d0                	add    %edx,%eax
f011e506:	48                   	dec    %eax
f011e507:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011e50d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e513:	ba 00 00 00 00       	mov    $0x0,%edx
f011e518:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011e51e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e524:	29 d0                	sub    %edx,%eax
f011e526:	01 c8                	add    %ecx,%eax
f011e528:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011e52e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e534:	39 c2                	cmp    %eax,%edx
f011e536:	74 17                	je     f011e54f <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011e538:	83 ec 04             	sub    $0x4,%esp
f011e53b:	68 54 a9 13 f0       	push   $0xf013a954
f011e540:	68 6d 04 00 00       	push   $0x46d
f011e545:	68 3a a2 13 f0       	push   $0xf013a23a
f011e54a:	e8 57 1c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e54f:	e8 38 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e554:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e557:	74 17                	je     f011e570 <test_kmalloc_worstfit+0xd0d>
f011e559:	83 ec 04             	sub    $0x4,%esp
f011e55c:	68 54 a2 13 f0       	push   $0xf013a254
f011e561:	68 6e 04 00 00       	push   $0x46e
f011e566:	68 3a a2 13 f0       	push   $0xf013a23a
f011e56b:	e8 36 1c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e570:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e573:	e8 52 d8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e578:	29 c3                	sub    %eax,%ebx
f011e57a:	89 d8                	mov    %ebx,%eax
f011e57c:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e581:	74 17                	je     f011e59a <test_kmalloc_worstfit+0xd37>
f011e583:	83 ec 04             	sub    $0x4,%esp
f011e586:	68 72 a7 13 f0       	push   $0xf013a772
f011e58b:	68 6f 04 00 00       	push   $0x46f
f011e590:	68 3a a2 13 f0       	push   $0xf013a23a
f011e595:	e8 0c 1c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e59a:	ff 45 e8             	incl   -0x18(%ebp)
f011e59d:	83 ec 08             	sub    $0x8,%esp
f011e5a0:	ff 75 e8             	pushl  -0x18(%ebp)
f011e5a3:	68 74 a9 13 f0       	push   $0xf013a974
f011e5a8:	e8 80 26 fe ff       	call   f0100c2d <cprintf>
f011e5ad:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e5b0:	e8 15 d8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e5b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e5b8:	e8 cf 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e5bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011e5c0:	83 ec 0c             	sub    $0xc,%esp
f011e5c3:	68 00 00 40 00       	push   $0x400000
f011e5c8:	e8 0f 8e fe ff       	call   f01073dc <kmalloc>
f011e5cd:	83 c4 10             	add    $0x10,%esp
f011e5d0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011e5d6:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011e5dd:	10 00 00 
f011e5e0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011e5e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5eb:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011e5f1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e5f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5fc:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011e602:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e608:	29 d0                	sub    %edx,%eax
f011e60a:	89 c1                	mov    %eax,%ecx
f011e60c:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011e613:	10 00 00 
f011e616:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e61b:	0f b6 d0             	movzbl %al,%edx
f011e61e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e624:	01 d0                	add    %edx,%eax
f011e626:	48                   	dec    %eax
f011e627:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011e62d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e633:	ba 00 00 00 00       	mov    $0x0,%edx
f011e638:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011e63e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e644:	29 d0                	sub    %edx,%eax
f011e646:	01 c1                	add    %eax,%ecx
f011e648:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011e64f:	10 00 00 
f011e652:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e657:	0f b6 c0             	movzbl %al,%eax
f011e65a:	c1 e0 04             	shl    $0x4,%eax
f011e65d:	89 c2                	mov    %eax,%edx
f011e65f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e665:	01 d0                	add    %edx,%eax
f011e667:	48                   	dec    %eax
f011e668:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011e66e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e674:	ba 00 00 00 00       	mov    $0x0,%edx
f011e679:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011e67f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e685:	29 d0                	sub    %edx,%eax
f011e687:	01 c8                	add    %ecx,%eax
f011e689:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011e68f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e695:	39 c2                	cmp    %eax,%edx
f011e697:	74 17                	je     f011e6b0 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011e699:	83 ec 04             	sub    $0x4,%esp
f011e69c:	68 54 a9 13 f0       	push   $0xf013a954
f011e6a1:	68 76 04 00 00       	push   $0x476
f011e6a6:	68 3a a2 13 f0       	push   $0xf013a23a
f011e6ab:	e8 f6 1a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6b0:	e8 d7 55 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e6b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e6b8:	74 17                	je     f011e6d1 <test_kmalloc_worstfit+0xe6e>
f011e6ba:	83 ec 04             	sub    $0x4,%esp
f011e6bd:	68 54 a2 13 f0       	push   $0xf013a254
f011e6c2:	68 77 04 00 00       	push   $0x477
f011e6c7:	68 3a a2 13 f0       	push   $0xf013a23a
f011e6cc:	e8 d5 1a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e6d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e6d4:	e8 f1 d6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e6d9:	29 c3                	sub    %eax,%ebx
f011e6db:	89 d8                	mov    %ebx,%eax
f011e6dd:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e6e2:	74 17                	je     f011e6fb <test_kmalloc_worstfit+0xe98>
f011e6e4:	83 ec 04             	sub    $0x4,%esp
f011e6e7:	68 72 a7 13 f0       	push   $0xf013a772
f011e6ec:	68 78 04 00 00       	push   $0x478
f011e6f1:	68 3a a2 13 f0       	push   $0xf013a23a
f011e6f6:	e8 ab 1a fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e6fb:	ff 45 e8             	incl   -0x18(%ebp)
f011e6fe:	83 ec 08             	sub    $0x8,%esp
f011e701:	ff 75 e8             	pushl  -0x18(%ebp)
f011e704:	68 74 a9 13 f0       	push   $0xf013a974
f011e709:	e8 1f 25 fe ff       	call   f0100c2d <cprintf>
f011e70e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e711:	e8 b4 d6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e716:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e719:	e8 6e 55 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e71e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011e721:	83 ec 0c             	sub    $0xc,%esp
f011e724:	68 00 00 20 00       	push   $0x200000
f011e729:	e8 ae 8c fe ff       	call   f01073dc <kmalloc>
f011e72e:	83 c4 10             	add    $0x10,%esp
f011e731:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011e737:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011e73e:	10 00 00 
f011e741:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e747:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e74c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011e752:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e758:	ba 00 00 00 00       	mov    $0x0,%edx
f011e75d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011e763:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e769:	29 d0                	sub    %edx,%eax
f011e76b:	89 c1                	mov    %eax,%ecx
f011e76d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011e774:	10 00 00 
f011e777:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e77c:	0f b6 d0             	movzbl %al,%edx
f011e77f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e785:	01 d0                	add    %edx,%eax
f011e787:	48                   	dec    %eax
f011e788:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011e78e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e794:	ba 00 00 00 00       	mov    $0x0,%edx
f011e799:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011e79f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e7a5:	29 d0                	sub    %edx,%eax
f011e7a7:	01 c1                	add    %eax,%ecx
f011e7a9:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011e7b0:	10 00 00 
f011e7b3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e7b8:	0f b6 c0             	movzbl %al,%eax
f011e7bb:	c1 e0 04             	shl    $0x4,%eax
f011e7be:	89 c2                	mov    %eax,%edx
f011e7c0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e7c6:	01 d0                	add    %edx,%eax
f011e7c8:	48                   	dec    %eax
f011e7c9:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011e7cf:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011e7d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7da:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011e7e0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011e7e6:	29 d0                	sub    %edx,%eax
f011e7e8:	01 c8                	add    %ecx,%eax
f011e7ea:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011e7f0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e7f6:	39 c2                	cmp    %eax,%edx
f011e7f8:	74 17                	je     f011e811 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011e7fa:	83 ec 04             	sub    $0x4,%esp
f011e7fd:	68 54 a9 13 f0       	push   $0xf013a954
f011e802:	68 7f 04 00 00       	push   $0x47f
f011e807:	68 3a a2 13 f0       	push   $0xf013a23a
f011e80c:	e8 95 19 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e811:	e8 76 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e816:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e819:	74 17                	je     f011e832 <test_kmalloc_worstfit+0xfcf>
f011e81b:	83 ec 04             	sub    $0x4,%esp
f011e81e:	68 54 a2 13 f0       	push   $0xf013a254
f011e823:	68 80 04 00 00       	push   $0x480
f011e828:	68 3a a2 13 f0       	push   $0xf013a23a
f011e82d:	e8 74 19 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e832:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e835:	e8 90 d5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e83a:	29 c3                	sub    %eax,%ebx
f011e83c:	89 d8                	mov    %ebx,%eax
f011e83e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e843:	74 17                	je     f011e85c <test_kmalloc_worstfit+0xff9>
f011e845:	83 ec 04             	sub    $0x4,%esp
f011e848:	68 72 a7 13 f0       	push   $0xf013a772
f011e84d:	68 81 04 00 00       	push   $0x481
f011e852:	68 3a a2 13 f0       	push   $0xf013a23a
f011e857:	e8 4a 19 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e85c:	ff 45 e8             	incl   -0x18(%ebp)
f011e85f:	83 ec 08             	sub    $0x8,%esp
f011e862:	ff 75 e8             	pushl  -0x18(%ebp)
f011e865:	68 74 a9 13 f0       	push   $0xf013a974
f011e86a:	e8 be 23 fe ff       	call   f0100c2d <cprintf>
f011e86f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e872:	e8 53 d5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e877:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e87a:	e8 0d 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e87f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011e882:	83 ec 0c             	sub    $0xc,%esp
f011e885:	68 00 00 18 00       	push   $0x180000
f011e88a:	e8 4d 8b fe ff       	call   f01073dc <kmalloc>
f011e88f:	83 c4 10             	add    $0x10,%esp
f011e892:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011e898:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011e89f:	10 00 00 
f011e8a2:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011e8a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8ad:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011e8b3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e8b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8be:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011e8c4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e8ca:	29 d0                	sub    %edx,%eax
f011e8cc:	89 c1                	mov    %eax,%ecx
f011e8ce:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011e8d5:	10 00 00 
f011e8d8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e8dd:	0f b6 d0             	movzbl %al,%edx
f011e8e0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011e8e6:	01 d0                	add    %edx,%eax
f011e8e8:	48                   	dec    %eax
f011e8e9:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011e8ef:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e8f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8fa:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011e900:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e906:	29 d0                	sub    %edx,%eax
f011e908:	01 c1                	add    %eax,%ecx
f011e90a:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011e911:	10 00 00 
f011e914:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e919:	0f b6 c0             	movzbl %al,%eax
f011e91c:	c1 e0 04             	shl    $0x4,%eax
f011e91f:	89 c2                	mov    %eax,%edx
f011e921:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011e927:	01 d0                	add    %edx,%eax
f011e929:	48                   	dec    %eax
f011e92a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011e930:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e936:	ba 00 00 00 00       	mov    $0x0,%edx
f011e93b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011e941:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e947:	29 d0                	sub    %edx,%eax
f011e949:	01 c8                	add    %ecx,%eax
f011e94b:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011e951:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e957:	39 c2                	cmp    %eax,%edx
f011e959:	74 17                	je     f011e972 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011e95b:	83 ec 04             	sub    $0x4,%esp
f011e95e:	68 54 a9 13 f0       	push   $0xf013a954
f011e963:	68 88 04 00 00       	push   $0x488
f011e968:	68 3a a2 13 f0       	push   $0xf013a23a
f011e96d:	e8 34 18 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e972:	e8 15 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e977:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e97a:	74 17                	je     f011e993 <test_kmalloc_worstfit+0x1130>
f011e97c:	83 ec 04             	sub    $0x4,%esp
f011e97f:	68 54 a2 13 f0       	push   $0xf013a254
f011e984:	68 89 04 00 00       	push   $0x489
f011e989:	68 3a a2 13 f0       	push   $0xf013a23a
f011e98e:	e8 13 18 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011e993:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e996:	e8 2f d4 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e99b:	29 c3                	sub    %eax,%ebx
f011e99d:	89 d8                	mov    %ebx,%eax
f011e99f:	3d 80 01 00 00       	cmp    $0x180,%eax
f011e9a4:	74 17                	je     f011e9bd <test_kmalloc_worstfit+0x115a>
f011e9a6:	83 ec 04             	sub    $0x4,%esp
f011e9a9:	68 72 a7 13 f0       	push   $0xf013a772
f011e9ae:	68 8a 04 00 00       	push   $0x48a
f011e9b3:	68 3a a2 13 f0       	push   $0xf013a23a
f011e9b8:	e8 e9 17 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e9bd:	ff 45 e8             	incl   -0x18(%ebp)
f011e9c0:	83 ec 08             	sub    $0x8,%esp
f011e9c3:	ff 75 e8             	pushl  -0x18(%ebp)
f011e9c6:	68 74 a9 13 f0       	push   $0xf013a974
f011e9cb:	e8 5d 22 fe ff       	call   f0100c2d <cprintf>
f011e9d0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e9d3:	e8 f2 d3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011e9d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e9db:	e8 ac 52 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e9e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011e9e3:	83 ec 0c             	sub    $0xc,%esp
f011e9e6:	68 00 00 08 00       	push   $0x80000
f011e9eb:	e8 ec 89 fe ff       	call   f01073dc <kmalloc>
f011e9f0:	83 c4 10             	add    $0x10,%esp
f011e9f3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011e9f9:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011ea00:	10 00 00 
f011ea03:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ea09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea0e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011ea14:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ea1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea1f:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011ea25:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ea2b:	29 d0                	sub    %edx,%eax
f011ea2d:	89 c1                	mov    %eax,%ecx
f011ea2f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011ea36:	10 00 00 
f011ea39:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ea3e:	0f b6 d0             	movzbl %al,%edx
f011ea41:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ea47:	01 d0                	add    %edx,%eax
f011ea49:	48                   	dec    %eax
f011ea4a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011ea50:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ea56:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea5b:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011ea61:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ea67:	29 d0                	sub    %edx,%eax
f011ea69:	01 c1                	add    %eax,%ecx
f011ea6b:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011ea72:	10 00 00 
f011ea75:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ea7a:	0f b6 c0             	movzbl %al,%eax
f011ea7d:	c1 e0 04             	shl    $0x4,%eax
f011ea80:	89 c2                	mov    %eax,%edx
f011ea82:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ea88:	01 d0                	add    %edx,%eax
f011ea8a:	48                   	dec    %eax
f011ea8b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011ea91:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ea97:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea9c:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011eaa2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011eaa8:	29 d0                	sub    %edx,%eax
f011eaaa:	01 c8                	add    %ecx,%eax
f011eaac:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011eab2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eab8:	39 c2                	cmp    %eax,%edx
f011eaba:	74 17                	je     f011ead3 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011eabc:	83 ec 04             	sub    $0x4,%esp
f011eabf:	68 54 a9 13 f0       	push   $0xf013a954
f011eac4:	68 91 04 00 00       	push   $0x491
f011eac9:	68 3a a2 13 f0       	push   $0xf013a23a
f011eace:	e8 d3 16 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ead3:	e8 b4 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ead8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eadb:	74 17                	je     f011eaf4 <test_kmalloc_worstfit+0x1291>
f011eadd:	83 ec 04             	sub    $0x4,%esp
f011eae0:	68 54 a2 13 f0       	push   $0xf013a254
f011eae5:	68 92 04 00 00       	push   $0x492
f011eaea:	68 3a a2 13 f0       	push   $0xf013a23a
f011eaef:	e8 b2 16 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011eaf4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eaf7:	e8 ce d2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011eafc:	29 c3                	sub    %eax,%ebx
f011eafe:	89 d8                	mov    %ebx,%eax
f011eb00:	3d 80 00 00 00       	cmp    $0x80,%eax
f011eb05:	74 17                	je     f011eb1e <test_kmalloc_worstfit+0x12bb>
f011eb07:	83 ec 04             	sub    $0x4,%esp
f011eb0a:	68 72 a7 13 f0       	push   $0xf013a772
f011eb0f:	68 93 04 00 00       	push   $0x493
f011eb14:	68 3a a2 13 f0       	push   $0xf013a23a
f011eb19:	e8 88 16 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eb1e:	ff 45 e8             	incl   -0x18(%ebp)
f011eb21:	83 ec 08             	sub    $0x8,%esp
f011eb24:	ff 75 e8             	pushl  -0x18(%ebp)
f011eb27:	68 74 a9 13 f0       	push   $0xf013a974
f011eb2c:	e8 fc 20 fe ff       	call   f0100c2d <cprintf>
f011eb31:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eb34:	e8 91 d2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011eb39:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eb3c:	e8 4b 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eb41:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011eb44:	83 ec 0c             	sub    $0xc,%esp
f011eb47:	68 00 04 00 00       	push   $0x400
f011eb4c:	e8 8b 88 fe ff       	call   f01073dc <kmalloc>
f011eb51:	83 c4 10             	add    $0x10,%esp
f011eb54:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011eb5a:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011eb61:	10 00 00 
f011eb64:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011eb6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb6f:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011eb75:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011eb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb80:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011eb86:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011eb8c:	29 d0                	sub    %edx,%eax
f011eb8e:	89 c1                	mov    %eax,%ecx
f011eb90:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011eb97:	10 00 00 
f011eb9a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011eb9f:	0f b6 d0             	movzbl %al,%edx
f011eba2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011eba8:	01 d0                	add    %edx,%eax
f011ebaa:	48                   	dec    %eax
f011ebab:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011ebb1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ebb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebbc:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011ebc2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ebc8:	29 d0                	sub    %edx,%eax
f011ebca:	01 c1                	add    %eax,%ecx
f011ebcc:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011ebd3:	10 00 00 
f011ebd6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ebdb:	0f b6 c0             	movzbl %al,%eax
f011ebde:	c1 e0 04             	shl    $0x4,%eax
f011ebe1:	89 c2                	mov    %eax,%edx
f011ebe3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ebe9:	01 d0                	add    %edx,%eax
f011ebeb:	48                   	dec    %eax
f011ebec:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011ebf2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ebf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebfd:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011ec03:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ec09:	29 d0                	sub    %edx,%eax
f011ec0b:	01 c8                	add    %ecx,%eax
f011ec0d:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011ec13:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ec19:	39 c2                	cmp    %eax,%edx
f011ec1b:	74 17                	je     f011ec34 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011ec1d:	83 ec 04             	sub    $0x4,%esp
f011ec20:	68 54 a9 13 f0       	push   $0xf013a954
f011ec25:	68 9a 04 00 00       	push   $0x49a
f011ec2a:	68 3a a2 13 f0       	push   $0xf013a23a
f011ec2f:	e8 72 15 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec34:	e8 53 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ec39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec3c:	74 17                	je     f011ec55 <test_kmalloc_worstfit+0x13f2>
f011ec3e:	83 ec 04             	sub    $0x4,%esp
f011ec41:	68 54 a2 13 f0       	push   $0xf013a254
f011ec46:	68 9b 04 00 00       	push   $0x49b
f011ec4b:	68 3a a2 13 f0       	push   $0xf013a23a
f011ec50:	e8 51 15 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ec55:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec58:	e8 6d d1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ec5d:	29 c3                	sub    %eax,%ebx
f011ec5f:	89 d8                	mov    %ebx,%eax
f011ec61:	83 f8 01             	cmp    $0x1,%eax
f011ec64:	74 17                	je     f011ec7d <test_kmalloc_worstfit+0x141a>
f011ec66:	83 ec 04             	sub    $0x4,%esp
f011ec69:	68 72 a7 13 f0       	push   $0xf013a772
f011ec6e:	68 9c 04 00 00       	push   $0x49c
f011ec73:	68 3a a2 13 f0       	push   $0xf013a23a
f011ec78:	e8 29 15 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec7d:	ff 45 e8             	incl   -0x18(%ebp)
f011ec80:	83 ec 08             	sub    $0x8,%esp
f011ec83:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec86:	68 74 a9 13 f0       	push   $0xf013a974
f011ec8b:	e8 9d 1f fe ff       	call   f0100c2d <cprintf>
f011ec90:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec93:	e8 32 d1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ec98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec9b:	e8 ec 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eca0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011eca3:	83 ec 0c             	sub    $0xc,%esp
f011eca6:	68 00 f0 1f 00       	push   $0x1ff000
f011ecab:	e8 2c 87 fe ff       	call   f01073dc <kmalloc>
f011ecb0:	83 c4 10             	add    $0x10,%esp
f011ecb3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011ecb9:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011ecc0:	10 00 00 
f011ecc3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011ecc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecce:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011ecd4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011ecda:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecdf:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011ece5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011eceb:	29 d0                	sub    %edx,%eax
f011eced:	89 c1                	mov    %eax,%ecx
f011ecef:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011ecf6:	10 00 00 
f011ecf9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ecfe:	0f b6 d0             	movzbl %al,%edx
f011ed01:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011ed07:	01 d0                	add    %edx,%eax
f011ed09:	48                   	dec    %eax
f011ed0a:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011ed10:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011ed16:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed1b:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011ed21:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011ed27:	29 d0                	sub    %edx,%eax
f011ed29:	01 c1                	add    %eax,%ecx
f011ed2b:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011ed32:	10 00 00 
f011ed35:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ed3a:	0f b6 c0             	movzbl %al,%eax
f011ed3d:	c1 e0 04             	shl    $0x4,%eax
f011ed40:	89 c2                	mov    %eax,%edx
f011ed42:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011ed48:	01 d0                	add    %edx,%eax
f011ed4a:	48                   	dec    %eax
f011ed4b:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011ed51:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011ed57:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed5c:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011ed62:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011ed68:	29 d0                	sub    %edx,%eax
f011ed6a:	01 c8                	add    %ecx,%eax
f011ed6c:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011ed72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed78:	39 c2                	cmp    %eax,%edx
f011ed7a:	74 17                	je     f011ed93 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011ed7c:	83 ec 04             	sub    $0x4,%esp
f011ed7f:	68 54 a9 13 f0       	push   $0xf013a954
f011ed84:	68 a3 04 00 00       	push   $0x4a3
f011ed89:	68 3a a2 13 f0       	push   $0xf013a23a
f011ed8e:	e8 13 14 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed93:	e8 f4 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ed98:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed9b:	74 17                	je     f011edb4 <test_kmalloc_worstfit+0x1551>
f011ed9d:	83 ec 04             	sub    $0x4,%esp
f011eda0:	68 54 a2 13 f0       	push   $0xf013a254
f011eda5:	68 a4 04 00 00       	push   $0x4a4
f011edaa:	68 3a a2 13 f0       	push   $0xf013a23a
f011edaf:	e8 f2 13 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011edb4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011edb7:	e8 0e d0 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011edbc:	29 c3                	sub    %eax,%ebx
f011edbe:	89 d8                	mov    %ebx,%eax
f011edc0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011edc5:	74 17                	je     f011edde <test_kmalloc_worstfit+0x157b>
f011edc7:	83 ec 04             	sub    $0x4,%esp
f011edca:	68 72 a7 13 f0       	push   $0xf013a772
f011edcf:	68 a5 04 00 00       	push   $0x4a5
f011edd4:	68 3a a2 13 f0       	push   $0xf013a23a
f011edd9:	e8 c8 13 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011edde:	ff 45 e8             	incl   -0x18(%ebp)
f011ede1:	83 ec 08             	sub    $0x8,%esp
f011ede4:	ff 75 e8             	pushl  -0x18(%ebp)
f011ede7:	68 74 a9 13 f0       	push   $0xf013a974
f011edec:	e8 3c 1e fe ff       	call   f0100c2d <cprintf>
f011edf1:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011edf4:	e8 d1 cf fe ff       	call   f010bdca <sys_calculate_free_frames>
f011edf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edfc:	e8 8b 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ee01:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011ee04:	83 ec 0c             	sub    $0xc,%esp
f011ee07:	68 00 00 40 00       	push   $0x400000
f011ee0c:	e8 cb 85 fe ff       	call   f01073dc <kmalloc>
f011ee11:	83 c4 10             	add    $0x10,%esp
f011ee14:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011ee1a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee20:	85 c0                	test   %eax,%eax
f011ee22:	74 17                	je     f011ee3b <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011ee24:	83 ec 04             	sub    $0x4,%esp
f011ee27:	68 54 a9 13 f0       	push   $0xf013a954
f011ee2c:	68 ad 04 00 00       	push   $0x4ad
f011ee31:	68 3a a2 13 f0       	push   $0xf013a23a
f011ee36:	e8 6b 13 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee3b:	e8 4c 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ee40:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee43:	74 17                	je     f011ee5c <test_kmalloc_worstfit+0x15f9>
f011ee45:	83 ec 04             	sub    $0x4,%esp
f011ee48:	68 54 a2 13 f0       	push   $0xf013a254
f011ee4d:	68 ae 04 00 00       	push   $0x4ae
f011ee52:	68 3a a2 13 f0       	push   $0xf013a23a
f011ee57:	e8 4a 13 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011ee5c:	e8 69 cf fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ee61:	89 c2                	mov    %eax,%edx
f011ee63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ee66:	39 c2                	cmp    %eax,%edx
f011ee68:	74 17                	je     f011ee81 <test_kmalloc_worstfit+0x161e>
f011ee6a:	83 ec 04             	sub    $0x4,%esp
f011ee6d:	68 72 a7 13 f0       	push   $0xf013a772
f011ee72:	68 af 04 00 00       	push   $0x4af
f011ee77:	68 3a a2 13 f0       	push   $0xf013a23a
f011ee7c:	e8 25 13 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee81:	ff 45 e8             	incl   -0x18(%ebp)
f011ee84:	83 ec 08             	sub    $0x8,%esp
f011ee87:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee8a:	68 74 a9 13 f0       	push   $0xf013a974
f011ee8f:	e8 99 1d fe ff       	call   f0100c2d <cprintf>
f011ee94:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011ee97:	83 ec 0c             	sub    $0xc,%esp
f011ee9a:	68 88 a9 13 f0       	push   $0xf013a988
f011ee9f:	e8 89 1d fe ff       	call   f0100c2d <cprintf>
f011eea4:	83 c4 10             	add    $0x10,%esp


	return 1;
f011eea7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011eeac:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011eeaf:	5b                   	pop    %ebx
f011eeb0:	5f                   	pop    %edi
f011eeb1:	5d                   	pop    %ebp
f011eeb2:	c3                   	ret    

f011eeb3 <test_kfree>:

int test_kfree()
{
f011eeb3:	55                   	push   %ebp
f011eeb4:	89 e5                	mov    %esp,%ebp
f011eeb6:	57                   	push   %edi
f011eeb7:	53                   	push   %ebx
f011eeb8:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011eebe:	83 ec 0c             	sub    $0xc,%esp
f011eec1:	68 7c a1 13 f0       	push   $0xf013a17c
f011eec6:	e8 62 1d fe ff       	call   f0100c2d <cprintf>
f011eecb:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011eece:	83 ec 0c             	sub    $0xc,%esp
f011eed1:	68 ac a1 13 f0       	push   $0xf013a1ac
f011eed6:	e8 52 1d fe ff       	call   f0100c2d <cprintf>
f011eedb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011eede:	83 ec 0c             	sub    $0xc,%esp
f011eee1:	68 7c a1 13 f0       	push   $0xf013a17c
f011eee6:	e8 42 1d fe ff       	call   f0100c2d <cprintf>
f011eeeb:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011eeee:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011eef2:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011eef6:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011eefc:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011ef02:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011ef09:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011ef10:	e8 b5 ce fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ef15:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011ef18:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011ef1e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef23:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef28:	89 d7                	mov    %edx,%edi
f011ef2a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011ef2c:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011ef32:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef37:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef3c:	89 d7                	mov    %edx,%edi
f011ef3e:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011ef40:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011ef46:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef4b:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef50:	89 d7                	mov    %edx,%edi
f011ef52:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ef54:	e8 71 ce fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ef59:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ef5c:	e8 2b 4d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ef61:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ef64:	83 ec 0c             	sub    $0xc,%esp
f011ef67:	68 00 fc 1f 00       	push   $0x1ffc00
f011ef6c:	e8 6b 84 fe ff       	call   f01073dc <kmalloc>
f011ef71:	83 c4 10             	add    $0x10,%esp
f011ef74:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ef7a:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011ef80:	89 c1                	mov    %eax,%ecx
f011ef82:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011ef89:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ef8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef91:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011ef94:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ef97:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef9c:	f7 75 c8             	divl   -0x38(%ebp)
f011ef9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011efa2:	29 d0                	sub    %edx,%eax
f011efa4:	89 c3                	mov    %eax,%ebx
f011efa6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011efad:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011efb2:	0f b6 d0             	movzbl %al,%edx
f011efb5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011efb8:	01 d0                	add    %edx,%eax
f011efba:	48                   	dec    %eax
f011efbb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011efbe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011efc1:	ba 00 00 00 00       	mov    $0x0,%edx
f011efc6:	f7 75 c0             	divl   -0x40(%ebp)
f011efc9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011efcc:	29 d0                	sub    %edx,%eax
f011efce:	01 c3                	add    %eax,%ebx
f011efd0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011efd7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011efdc:	0f b6 c0             	movzbl %al,%eax
f011efdf:	c1 e0 04             	shl    $0x4,%eax
f011efe2:	89 c2                	mov    %eax,%edx
f011efe4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011efe7:	01 d0                	add    %edx,%eax
f011efe9:	48                   	dec    %eax
f011efea:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011efed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011eff0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eff5:	f7 75 b8             	divl   -0x48(%ebp)
f011eff8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011effb:	29 d0                	sub    %edx,%eax
f011effd:	01 d8                	add    %ebx,%eax
f011efff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f004:	39 c1                	cmp    %eax,%ecx
f011f006:	74 17                	je     f011f01f <test_kfree+0x16c>
f011f008:	83 ec 04             	sub    $0x4,%esp
f011f00b:	68 20 a3 13 f0       	push   $0xf013a320
f011f010:	68 d7 04 00 00       	push   $0x4d7
f011f015:	68 3a a2 13 f0       	push   $0xf013a23a
f011f01a:	e8 87 11 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f01f:	e8 68 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f024:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f027:	74 17                	je     f011f040 <test_kfree+0x18d>
f011f029:	83 ec 04             	sub    $0x4,%esp
f011f02c:	68 54 a2 13 f0       	push   $0xf013a254
f011f031:	68 d8 04 00 00       	push   $0x4d8
f011f036:	68 3a a2 13 f0       	push   $0xf013a23a
f011f03b:	e8 66 11 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f040:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f043:	e8 82 cd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f048:	29 c3                	sub    %eax,%ebx
f011f04a:	89 d8                	mov    %ebx,%eax
f011f04c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f051:	74 17                	je     f011f06a <test_kfree+0x1b7>
f011f053:	83 ec 04             	sub    $0x4,%esp
f011f056:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f05b:	68 d9 04 00 00       	push   $0x4d9
f011f060:	68 3a a2 13 f0       	push   $0xf013a23a
f011f065:	e8 3c 11 fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f06a:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f071:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f074:	e8 51 cd fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f079:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f07c:	e8 0b 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f081:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f084:	83 ec 0c             	sub    $0xc,%esp
f011f087:	68 00 fc 1f 00       	push   $0x1ffc00
f011f08c:	e8 4b 83 fe ff       	call   f01073dc <kmalloc>
f011f091:	83 c4 10             	add    $0x10,%esp
f011f094:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f09a:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f0a0:	89 c1                	mov    %eax,%ecx
f011f0a2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f0a9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f0ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0b1:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f0b4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f0b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0bc:	f7 75 b0             	divl   -0x50(%ebp)
f011f0bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f0c2:	29 d0                	sub    %edx,%eax
f011f0c4:	89 c3                	mov    %eax,%ebx
f011f0c6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f0cd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f0d2:	0f b6 d0             	movzbl %al,%edx
f011f0d5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f0d8:	01 d0                	add    %edx,%eax
f011f0da:	48                   	dec    %eax
f011f0db:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f0de:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f0e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e6:	f7 75 a8             	divl   -0x58(%ebp)
f011f0e9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f0ec:	29 d0                	sub    %edx,%eax
f011f0ee:	01 c3                	add    %eax,%ebx
f011f0f0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f0f7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f0fc:	0f b6 c0             	movzbl %al,%eax
f011f0ff:	c1 e0 04             	shl    $0x4,%eax
f011f102:	89 c2                	mov    %eax,%edx
f011f104:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f107:	01 d0                	add    %edx,%eax
f011f109:	48                   	dec    %eax
f011f10a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f10d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f110:	ba 00 00 00 00       	mov    $0x0,%edx
f011f115:	f7 75 a0             	divl   -0x60(%ebp)
f011f118:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f11b:	29 d0                	sub    %edx,%eax
f011f11d:	01 d8                	add    %ebx,%eax
f011f11f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f124:	39 c1                	cmp    %eax,%ecx
f011f126:	74 17                	je     f011f13f <test_kfree+0x28c>
f011f128:	83 ec 04             	sub    $0x4,%esp
f011f12b:	68 20 a3 13 f0       	push   $0xf013a320
f011f130:	68 e0 04 00 00       	push   $0x4e0
f011f135:	68 3a a2 13 f0       	push   $0xf013a23a
f011f13a:	e8 67 10 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f13f:	e8 48 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f144:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f147:	74 17                	je     f011f160 <test_kfree+0x2ad>
f011f149:	83 ec 04             	sub    $0x4,%esp
f011f14c:	68 54 a2 13 f0       	push   $0xf013a254
f011f151:	68 e1 04 00 00       	push   $0x4e1
f011f156:	68 3a a2 13 f0       	push   $0xf013a23a
f011f15b:	e8 46 10 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f160:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f163:	e8 62 cc fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f168:	29 c3                	sub    %eax,%ebx
f011f16a:	89 d8                	mov    %ebx,%eax
f011f16c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f171:	74 17                	je     f011f18a <test_kfree+0x2d7>
f011f173:	83 ec 04             	sub    $0x4,%esp
f011f176:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f17b:	68 e2 04 00 00       	push   $0x4e2
f011f180:	68 3a a2 13 f0       	push   $0xf013a23a
f011f185:	e8 1c 10 fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f18a:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011f191:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f194:	e8 31 cc fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f199:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f19c:	e8 eb 4a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f1a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f1a4:	83 ec 0c             	sub    $0xc,%esp
f011f1a7:	68 00 08 00 00       	push   $0x800
f011f1ac:	e8 2b 82 fe ff       	call   f01073dc <kmalloc>
f011f1b1:	83 c4 10             	add    $0x10,%esp
f011f1b4:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f1ba:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f1c0:	89 c1                	mov    %eax,%ecx
f011f1c2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011f1c9:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f1cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1d1:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011f1d4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f1d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1dc:	f7 75 98             	divl   -0x68(%ebp)
f011f1df:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f1e2:	29 d0                	sub    %edx,%eax
f011f1e4:	89 c3                	mov    %eax,%ebx
f011f1e6:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011f1ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f1f2:	0f b6 d0             	movzbl %al,%edx
f011f1f5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f1f8:	01 d0                	add    %edx,%eax
f011f1fa:	48                   	dec    %eax
f011f1fb:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011f1fe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f201:	ba 00 00 00 00       	mov    $0x0,%edx
f011f206:	f7 75 90             	divl   -0x70(%ebp)
f011f209:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f20c:	29 d0                	sub    %edx,%eax
f011f20e:	01 c3                	add    %eax,%ebx
f011f210:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011f217:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f21c:	0f b6 c0             	movzbl %al,%eax
f011f21f:	c1 e0 04             	shl    $0x4,%eax
f011f222:	89 c2                	mov    %eax,%edx
f011f224:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f227:	01 d0                	add    %edx,%eax
f011f229:	48                   	dec    %eax
f011f22a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011f22d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f230:	ba 00 00 00 00       	mov    $0x0,%edx
f011f235:	f7 75 88             	divl   -0x78(%ebp)
f011f238:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f23b:	29 d0                	sub    %edx,%eax
f011f23d:	01 d8                	add    %ebx,%eax
f011f23f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f244:	39 c1                	cmp    %eax,%ecx
f011f246:	74 17                	je     f011f25f <test_kfree+0x3ac>
f011f248:	83 ec 04             	sub    $0x4,%esp
f011f24b:	68 20 a3 13 f0       	push   $0xf013a320
f011f250:	68 e9 04 00 00       	push   $0x4e9
f011f255:	68 3a a2 13 f0       	push   $0xf013a23a
f011f25a:	e8 47 0f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f25f:	e8 28 4a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f264:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f267:	74 17                	je     f011f280 <test_kfree+0x3cd>
f011f269:	83 ec 04             	sub    $0x4,%esp
f011f26c:	68 54 a2 13 f0       	push   $0xf013a254
f011f271:	68 ea 04 00 00       	push   $0x4ea
f011f276:	68 3a a2 13 f0       	push   $0xf013a23a
f011f27b:	e8 26 0f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f280:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f283:	e8 42 cb fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f288:	29 c3                	sub    %eax,%ebx
f011f28a:	89 d8                	mov    %ebx,%eax
f011f28c:	83 f8 01             	cmp    $0x1,%eax
f011f28f:	74 17                	je     f011f2a8 <test_kfree+0x3f5>
f011f291:	83 ec 04             	sub    $0x4,%esp
f011f294:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f299:	68 eb 04 00 00       	push   $0x4eb
f011f29e:	68 3a a2 13 f0       	push   $0xf013a23a
f011f2a3:	e8 fe 0e fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f2a8:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011f2af:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f2b2:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f2b8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f2bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f2c2:	eb 0e                	jmp    f011f2d2 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011f2c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f2c7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f2ca:	01 d0                	add    %edx,%eax
f011f2cc:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f2cf:	ff 45 f4             	incl   -0xc(%ebp)
f011f2d2:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011f2d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f2db:	7f e7                	jg     f011f2c4 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f2dd:	e8 e8 ca fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f2e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f2e5:	e8 a2 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f2ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f2ed:	83 ec 0c             	sub    $0xc,%esp
f011f2f0:	68 00 08 00 00       	push   $0x800
f011f2f5:	e8 e2 80 fe ff       	call   f01073dc <kmalloc>
f011f2fa:	83 c4 10             	add    $0x10,%esp
f011f2fd:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f303:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f309:	89 c1                	mov    %eax,%ecx
f011f30b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f312:	10 00 00 
f011f315:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f31b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f320:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f326:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f32c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f331:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f337:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f33d:	29 d0                	sub    %edx,%eax
f011f33f:	89 c3                	mov    %eax,%ebx
f011f341:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f348:	10 00 00 
f011f34b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f350:	0f b6 d0             	movzbl %al,%edx
f011f353:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f359:	01 d0                	add    %edx,%eax
f011f35b:	48                   	dec    %eax
f011f35c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f362:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f368:	ba 00 00 00 00       	mov    $0x0,%edx
f011f36d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f373:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f379:	29 d0                	sub    %edx,%eax
f011f37b:	01 c3                	add    %eax,%ebx
f011f37d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f384:	10 00 00 
f011f387:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f38c:	0f b6 c0             	movzbl %al,%eax
f011f38f:	c1 e0 04             	shl    $0x4,%eax
f011f392:	89 c2                	mov    %eax,%edx
f011f394:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f39a:	01 d0                	add    %edx,%eax
f011f39c:	48                   	dec    %eax
f011f39d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f3a3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f3a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3ae:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f3b4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f3ba:	29 d0                	sub    %edx,%eax
f011f3bc:	01 d8                	add    %ebx,%eax
f011f3be:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f3c3:	39 c1                	cmp    %eax,%ecx
f011f3c5:	74 17                	je     f011f3de <test_kfree+0x52b>
f011f3c7:	83 ec 04             	sub    $0x4,%esp
f011f3ca:	68 20 a3 13 f0       	push   $0xf013a320
f011f3cf:	68 f7 04 00 00       	push   $0x4f7
f011f3d4:	68 3a a2 13 f0       	push   $0xf013a23a
f011f3d9:	e8 c8 0d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3de:	e8 a9 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f3e3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f3e6:	74 17                	je     f011f3ff <test_kfree+0x54c>
f011f3e8:	83 ec 04             	sub    $0x4,%esp
f011f3eb:	68 54 a2 13 f0       	push   $0xf013a254
f011f3f0:	68 f8 04 00 00       	push   $0x4f8
f011f3f5:	68 3a a2 13 f0       	push   $0xf013a23a
f011f3fa:	e8 a7 0d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f3ff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f402:	e8 c3 c9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f407:	29 c3                	sub    %eax,%ebx
f011f409:	89 d8                	mov    %ebx,%eax
f011f40b:	83 f8 01             	cmp    $0x1,%eax
f011f40e:	74 17                	je     f011f427 <test_kfree+0x574>
f011f410:	83 ec 04             	sub    $0x4,%esp
f011f413:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f418:	68 f9 04 00 00       	push   $0x4f9
f011f41d:	68 3a a2 13 f0       	push   $0xf013a23a
f011f422:	e8 7f 0d fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f427:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011f42e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f431:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f437:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f43a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f441:	eb 0e                	jmp    f011f451 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011f443:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f446:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f449:	01 d0                	add    %edx,%eax
f011f44b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f44e:	ff 45 f4             	incl   -0xc(%ebp)
f011f451:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011f457:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f45a:	7f e7                	jg     f011f443 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f45c:	e8 69 c9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f461:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f464:	e8 23 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f469:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f46c:	83 ec 0c             	sub    $0xc,%esp
f011f46f:	68 00 1c 00 00       	push   $0x1c00
f011f474:	e8 63 7f fe ff       	call   f01073dc <kmalloc>
f011f479:	83 c4 10             	add    $0x10,%esp
f011f47c:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f482:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f488:	89 c1                	mov    %eax,%ecx
f011f48a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f491:	10 00 00 
f011f494:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f49a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f49f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f4a5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f4ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4b0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f4b6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f4bc:	29 d0                	sub    %edx,%eax
f011f4be:	89 c3                	mov    %eax,%ebx
f011f4c0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f4c7:	10 00 00 
f011f4ca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f4cf:	0f b6 d0             	movzbl %al,%edx
f011f4d2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f4d8:	01 d0                	add    %edx,%eax
f011f4da:	48                   	dec    %eax
f011f4db:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f4e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f4e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ec:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f4f2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f4f8:	29 d0                	sub    %edx,%eax
f011f4fa:	01 c3                	add    %eax,%ebx
f011f4fc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f503:	10 00 00 
f011f506:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f50b:	0f b6 c0             	movzbl %al,%eax
f011f50e:	c1 e0 04             	shl    $0x4,%eax
f011f511:	89 c2                	mov    %eax,%edx
f011f513:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f519:	01 d0                	add    %edx,%eax
f011f51b:	48                   	dec    %eax
f011f51c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f522:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f528:	ba 00 00 00 00       	mov    $0x0,%edx
f011f52d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f533:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f539:	29 d0                	sub    %edx,%eax
f011f53b:	01 d8                	add    %ebx,%eax
f011f53d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f542:	39 c1                	cmp    %eax,%ecx
f011f544:	74 17                	je     f011f55d <test_kfree+0x6aa>
f011f546:	83 ec 04             	sub    $0x4,%esp
f011f549:	68 20 a3 13 f0       	push   $0xf013a320
f011f54e:	68 05 05 00 00       	push   $0x505
f011f553:	68 3a a2 13 f0       	push   $0xf013a23a
f011f558:	e8 49 0c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f55d:	e8 2a 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f562:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f565:	74 17                	je     f011f57e <test_kfree+0x6cb>
f011f567:	83 ec 04             	sub    $0x4,%esp
f011f56a:	68 54 a2 13 f0       	push   $0xf013a254
f011f56f:	68 06 05 00 00       	push   $0x506
f011f574:	68 3a a2 13 f0       	push   $0xf013a23a
f011f579:	e8 28 0c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f57e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f581:	e8 44 c8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f586:	29 c3                	sub    %eax,%ebx
f011f588:	89 d8                	mov    %ebx,%eax
f011f58a:	83 f8 02             	cmp    $0x2,%eax
f011f58d:	74 17                	je     f011f5a6 <test_kfree+0x6f3>
f011f58f:	83 ec 04             	sub    $0x4,%esp
f011f592:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f597:	68 07 05 00 00       	push   $0x507
f011f59c:	68 3a a2 13 f0       	push   $0xf013a23a
f011f5a1:	e8 00 0c fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f5a6:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011f5ad:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f5b0:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f5b6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f5b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f5c0:	eb 0e                	jmp    f011f5d0 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011f5c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f5c5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f5c8:	01 d0                	add    %edx,%eax
f011f5ca:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f5cd:	ff 45 f4             	incl   -0xc(%ebp)
f011f5d0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011f5d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f5d9:	7f e7                	jg     f011f5c2 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f5db:	e8 ea c7 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f5e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f5e3:	e8 a4 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f5e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f5eb:	83 ec 0c             	sub    $0xc,%esp
f011f5ee:	68 00 fc 2f 00       	push   $0x2ffc00
f011f5f3:	e8 e4 7d fe ff       	call   f01073dc <kmalloc>
f011f5f8:	83 c4 10             	add    $0x10,%esp
f011f5fb:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f601:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011f607:	89 c1                	mov    %eax,%ecx
f011f609:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f610:	10 00 00 
f011f613:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f619:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f61e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f624:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f62a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f62f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f635:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f63b:	29 d0                	sub    %edx,%eax
f011f63d:	89 c3                	mov    %eax,%ebx
f011f63f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f646:	10 00 00 
f011f649:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f64e:	0f b6 d0             	movzbl %al,%edx
f011f651:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f657:	01 d0                	add    %edx,%eax
f011f659:	48                   	dec    %eax
f011f65a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f660:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f666:	ba 00 00 00 00       	mov    $0x0,%edx
f011f66b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f671:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f677:	29 d0                	sub    %edx,%eax
f011f679:	01 c3                	add    %eax,%ebx
f011f67b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f682:	10 00 00 
f011f685:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f68a:	0f b6 c0             	movzbl %al,%eax
f011f68d:	c1 e0 04             	shl    $0x4,%eax
f011f690:	89 c2                	mov    %eax,%edx
f011f692:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f698:	01 d0                	add    %edx,%eax
f011f69a:	48                   	dec    %eax
f011f69b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f6a1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f6a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6ac:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f6b2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f6b8:	29 d0                	sub    %edx,%eax
f011f6ba:	01 d8                	add    %ebx,%eax
f011f6bc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011f6c1:	39 c1                	cmp    %eax,%ecx
f011f6c3:	74 17                	je     f011f6dc <test_kfree+0x829>
f011f6c5:	83 ec 04             	sub    $0x4,%esp
f011f6c8:	68 20 a3 13 f0       	push   $0xf013a320
f011f6cd:	68 13 05 00 00       	push   $0x513
f011f6d2:	68 3a a2 13 f0       	push   $0xf013a23a
f011f6d7:	e8 ca 0a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6dc:	e8 ab 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f6e1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f6e4:	74 17                	je     f011f6fd <test_kfree+0x84a>
f011f6e6:	83 ec 04             	sub    $0x4,%esp
f011f6e9:	68 54 a2 13 f0       	push   $0xf013a254
f011f6ee:	68 14 05 00 00       	push   $0x514
f011f6f3:	68 3a a2 13 f0       	push   $0xf013a23a
f011f6f8:	e8 a9 0a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f6fd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f700:	e8 c5 c6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f705:	29 c3                	sub    %eax,%ebx
f011f707:	89 d8                	mov    %ebx,%eax
f011f709:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f70e:	74 17                	je     f011f727 <test_kfree+0x874>
f011f710:	83 ec 04             	sub    $0x4,%esp
f011f713:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f718:	68 15 05 00 00       	push   $0x515
f011f71d:	68 3a a2 13 f0       	push   $0xf013a23a
f011f722:	e8 7f 0a fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011f727:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f011f72e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011f731:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011f737:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011f73a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f741:	eb 0e                	jmp    f011f751 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f011f743:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f746:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f749:	01 d0                	add    %edx,%eax
f011f74b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011f74e:	ff 45 f4             	incl   -0xc(%ebp)
f011f751:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011f757:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f75a:	7f e7                	jg     f011f743 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011f75c:	e8 69 c6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f761:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f764:	e8 23 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f769:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011f76c:	83 ec 0c             	sub    $0xc,%esp
f011f76f:	68 00 fc 5f 00       	push   $0x5ffc00
f011f774:	e8 63 7c fe ff       	call   f01073dc <kmalloc>
f011f779:	83 c4 10             	add    $0x10,%esp
f011f77c:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f782:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011f788:	89 c1                	mov    %eax,%ecx
f011f78a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f791:	10 00 00 
f011f794:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f79a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f79f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f7a5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f7ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7b0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f7b6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f7bc:	29 d0                	sub    %edx,%eax
f011f7be:	89 c3                	mov    %eax,%ebx
f011f7c0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f7c7:	10 00 00 
f011f7ca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f7cf:	0f b6 d0             	movzbl %al,%edx
f011f7d2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f7d8:	01 d0                	add    %edx,%eax
f011f7da:	48                   	dec    %eax
f011f7db:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f7e1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f7e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7ec:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f7f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f7f8:	29 d0                	sub    %edx,%eax
f011f7fa:	01 c3                	add    %eax,%ebx
f011f7fc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011f803:	10 00 00 
f011f806:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f80b:	0f b6 c0             	movzbl %al,%eax
f011f80e:	c1 e0 04             	shl    $0x4,%eax
f011f811:	89 c2                	mov    %eax,%edx
f011f813:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f819:	01 d0                	add    %edx,%eax
f011f81b:	48                   	dec    %eax
f011f81c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011f822:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f828:	ba 00 00 00 00       	mov    $0x0,%edx
f011f82d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011f833:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f839:	29 d0                	sub    %edx,%eax
f011f83b:	01 d8                	add    %ebx,%eax
f011f83d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011f842:	39 c1                	cmp    %eax,%ecx
f011f844:	74 17                	je     f011f85d <test_kfree+0x9aa>
f011f846:	83 ec 04             	sub    $0x4,%esp
f011f849:	68 20 a3 13 f0       	push   $0xf013a320
f011f84e:	68 21 05 00 00       	push   $0x521
f011f853:	68 3a a2 13 f0       	push   $0xf013a23a
f011f858:	e8 49 09 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f85d:	e8 2a 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f862:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f865:	74 17                	je     f011f87e <test_kfree+0x9cb>
f011f867:	83 ec 04             	sub    $0x4,%esp
f011f86a:	68 54 a2 13 f0       	push   $0xf013a254
f011f86f:	68 22 05 00 00       	push   $0x522
f011f874:	68 3a a2 13 f0       	push   $0xf013a23a
f011f879:	e8 28 09 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f87e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f881:	e8 44 c5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f886:	29 c3                	sub    %eax,%ebx
f011f888:	89 d8                	mov    %ebx,%eax
f011f88a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f88f:	74 17                	je     f011f8a8 <test_kfree+0x9f5>
f011f891:	83 ec 04             	sub    $0x4,%esp
f011f894:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f899:	68 23 05 00 00       	push   $0x523
f011f89e:	68 3a a2 13 f0       	push   $0xf013a23a
f011f8a3:	e8 fe 08 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011f8a8:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f011f8af:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011f8b2:	e8 13 c5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f8b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f8ba:	e8 cd 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f8bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011f8c2:	83 ec 0c             	sub    $0xc,%esp
f011f8c5:	68 00 38 00 00       	push   $0x3800
f011f8ca:	e8 0d 7b fe ff       	call   f01073dc <kmalloc>
f011f8cf:	83 c4 10             	add    $0x10,%esp
f011f8d2:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8d8:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011f8de:	89 c1                	mov    %eax,%ecx
f011f8e0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011f8e7:	10 00 00 
f011f8ea:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f8f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8f5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011f8fb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f901:	ba 00 00 00 00       	mov    $0x0,%edx
f011f906:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011f90c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f912:	29 d0                	sub    %edx,%eax
f011f914:	89 c3                	mov    %eax,%ebx
f011f916:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011f91d:	10 00 00 
f011f920:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f925:	0f b6 d0             	movzbl %al,%edx
f011f928:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f92e:	01 d0                	add    %edx,%eax
f011f930:	48                   	dec    %eax
f011f931:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011f937:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f93d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f942:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011f948:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f94e:	29 d0                	sub    %edx,%eax
f011f950:	01 c3                	add    %eax,%ebx
f011f952:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011f959:	10 00 00 
f011f95c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f961:	0f b6 c0             	movzbl %al,%eax
f011f964:	c1 e0 04             	shl    $0x4,%eax
f011f967:	89 c2                	mov    %eax,%edx
f011f969:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f96f:	01 d0                	add    %edx,%eax
f011f971:	48                   	dec    %eax
f011f972:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011f978:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f97e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f983:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011f989:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f98f:	29 d0                	sub    %edx,%eax
f011f991:	01 d8                	add    %ebx,%eax
f011f993:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011f998:	39 c1                	cmp    %eax,%ecx
f011f99a:	74 17                	je     f011f9b3 <test_kfree+0xb00>
f011f99c:	83 ec 04             	sub    $0x4,%esp
f011f99f:	68 20 a3 13 f0       	push   $0xf013a320
f011f9a4:	68 2a 05 00 00       	push   $0x52a
f011f9a9:	68 3a a2 13 f0       	push   $0xf013a23a
f011f9ae:	e8 f3 07 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9b3:	e8 d4 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f9b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f9bb:	74 17                	je     f011f9d4 <test_kfree+0xb21>
f011f9bd:	83 ec 04             	sub    $0x4,%esp
f011f9c0:	68 54 a2 13 f0       	push   $0xf013a254
f011f9c5:	68 2b 05 00 00       	push   $0x52b
f011f9ca:	68 3a a2 13 f0       	push   $0xf013a23a
f011f9cf:	e8 d2 07 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f9d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f9d7:	e8 ee c3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011f9dc:	29 c3                	sub    %eax,%ebx
f011f9de:	89 d8                	mov    %ebx,%eax
f011f9e0:	83 f8 04             	cmp    $0x4,%eax
f011f9e3:	74 17                	je     f011f9fc <test_kfree+0xb49>
f011f9e5:	83 ec 04             	sub    $0x4,%esp
f011f9e8:	68 bc a2 13 f0       	push   $0xf013a2bc
f011f9ed:	68 2c 05 00 00       	push   $0x52c
f011f9f2:	68 3a a2 13 f0       	push   $0xf013a23a
f011f9f7:	e8 aa 07 fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011f9fc:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f011fa03:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011fa06:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fa0c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fa0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fa16:	eb 0e                	jmp    f011fa26 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f011fa18:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fa1b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fa1e:	01 d0                	add    %edx,%eax
f011fa20:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fa23:	ff 45 f4             	incl   -0xc(%ebp)
f011fa26:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011fa2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fa2f:	7f e7                	jg     f011fa18 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011fa31:	e8 94 c3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fa36:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011fa3c:	e8 4b 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa41:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f011fa47:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fa4d:	83 ec 0c             	sub    $0xc,%esp
f011fa50:	50                   	push   %eax
f011fa51:	e8 a0 79 fe ff       	call   f01073f6 <kfree>
f011fa56:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa59:	e8 2e 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa5e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fa64:	74 17                	je     f011fa7d <test_kfree+0xbca>
f011fa66:	83 ec 04             	sub    $0x4,%esp
f011fa69:	68 54 a2 13 f0       	push   $0xf013a254
f011fa6e:	68 3b 05 00 00       	push   $0x53b
f011fa73:	68 3a a2 13 f0       	push   $0xf013a23a
f011fa78:	e8 29 07 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fa7d:	e8 48 c3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fa82:	89 c2                	mov    %eax,%edx
f011fa84:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fa8a:	29 c2                	sub    %eax,%edx
f011fa8c:	89 d0                	mov    %edx,%eax
f011fa8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fa93:	74 17                	je     f011faac <test_kfree+0xbf9>
f011fa95:	83 ec 04             	sub    $0x4,%esp
f011fa98:	68 c4 a9 13 f0       	push   $0xf013a9c4
f011fa9d:	68 3c 05 00 00       	push   $0x53c
f011faa2:	68 3a a2 13 f0       	push   $0xf013a23a
f011faa7:	e8 fa 06 fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011faac:	e8 19 c3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fab1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fab7:	e8 d0 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fabc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f011fac2:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fac8:	83 ec 0c             	sub    $0xc,%esp
f011facb:	50                   	push   %eax
f011facc:	e8 25 79 fe ff       	call   f01073f6 <kfree>
f011fad1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fad4:	e8 b3 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fad9:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fadf:	74 17                	je     f011faf8 <test_kfree+0xc45>
f011fae1:	83 ec 04             	sub    $0x4,%esp
f011fae4:	68 54 a2 13 f0       	push   $0xf013a254
f011fae9:	68 42 05 00 00       	push   $0x542
f011faee:	68 3a a2 13 f0       	push   $0xf013a23a
f011faf3:	e8 ae 06 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011faf8:	e8 cd c2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fafd:	89 c2                	mov    %eax,%edx
f011faff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fb05:	29 c2                	sub    %eax,%edx
f011fb07:	89 d0                	mov    %edx,%eax
f011fb09:	83 f8 01             	cmp    $0x1,%eax
f011fb0c:	74 17                	je     f011fb25 <test_kfree+0xc72>
f011fb0e:	83 ec 04             	sub    $0x4,%esp
f011fb11:	68 c4 a9 13 f0       	push   $0xf013a9c4
f011fb16:	68 43 05 00 00       	push   $0x543
f011fb1b:	68 3a a2 13 f0       	push   $0xf013a23a
f011fb20:	e8 81 06 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fb25:	e8 a0 c2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fb2a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb30:	e8 57 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fb35:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f011fb3b:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fb41:	83 ec 0c             	sub    $0xc,%esp
f011fb44:	50                   	push   %eax
f011fb45:	e8 ac 78 fe ff       	call   f01073f6 <kfree>
f011fb4a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb4d:	e8 3a 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fb52:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fb58:	74 17                	je     f011fb71 <test_kfree+0xcbe>
f011fb5a:	83 ec 04             	sub    $0x4,%esp
f011fb5d:	68 54 a2 13 f0       	push   $0xf013a254
f011fb62:	68 49 05 00 00       	push   $0x549
f011fb67:	68 3a a2 13 f0       	push   $0xf013a23a
f011fb6c:	e8 35 06 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011fb71:	e8 54 c2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fb76:	89 c2                	mov    %eax,%edx
f011fb78:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fb7e:	29 c2                	sub    %eax,%edx
f011fb80:	89 d0                	mov    %edx,%eax
f011fb82:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb87:	74 17                	je     f011fba0 <test_kfree+0xced>
f011fb89:	83 ec 04             	sub    $0x4,%esp
f011fb8c:	68 c4 a9 13 f0       	push   $0xf013a9c4
f011fb91:	68 4a 05 00 00       	push   $0x54a
f011fb96:	68 3a a2 13 f0       	push   $0xf013a23a
f011fb9b:	e8 06 06 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fba0:	e8 25 c2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fba5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fbab:	e8 dc 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fbb0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f011fbb6:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011fbbc:	83 ec 0c             	sub    $0xc,%esp
f011fbbf:	50                   	push   %eax
f011fbc0:	e8 31 78 fe ff       	call   f01073f6 <kfree>
f011fbc5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbc8:	e8 bf 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fbcd:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fbd3:	74 17                	je     f011fbec <test_kfree+0xd39>
f011fbd5:	83 ec 04             	sub    $0x4,%esp
f011fbd8:	68 54 a2 13 f0       	push   $0xf013a254
f011fbdd:	68 50 05 00 00       	push   $0x550
f011fbe2:	68 3a a2 13 f0       	push   $0xf013a23a
f011fbe7:	e8 ba 05 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011fbec:	e8 d9 c1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fbf1:	89 c2                	mov    %eax,%edx
f011fbf3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fbf9:	29 c2                	sub    %eax,%edx
f011fbfb:	89 d0                	mov    %edx,%eax
f011fbfd:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fc02:	74 17                	je     f011fc1b <test_kfree+0xd68>
f011fc04:	83 ec 04             	sub    $0x4,%esp
f011fc07:	68 c4 a9 13 f0       	push   $0xf013a9c4
f011fc0c:	68 51 05 00 00       	push   $0x551
f011fc11:	68 3a a2 13 f0       	push   $0xf013a23a
f011fc16:	e8 8b 05 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011fc1b:	83 ec 0c             	sub    $0xc,%esp
f011fc1e:	68 fc a9 13 f0       	push   $0xf013a9fc
f011fc23:	e8 05 10 fe ff       	call   f0100c2d <cprintf>
f011fc28:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011fc2b:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fc31:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fc34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc3b:	eb 1e                	jmp    f011fc5b <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f011fc3d:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011fc43:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fc46:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc49:	01 c8                	add    %ecx,%eax
f011fc4b:	8a 00                	mov    (%eax),%al
f011fc4d:	0f be c0             	movsbl %al,%eax
f011fc50:	01 d0                	add    %edx,%eax
f011fc52:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fc58:	ff 45 f4             	incl   -0xc(%ebp)
f011fc5b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fc61:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc64:	7f d7                	jg     f011fc3d <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011fc66:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011fc6c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fc72:	89 c1                	mov    %eax,%ecx
f011fc74:	01 c9                	add    %ecx,%ecx
f011fc76:	01 c8                	add    %ecx,%eax
f011fc78:	39 c2                	cmp    %eax,%edx
f011fc7a:	74 17                	je     f011fc93 <test_kfree+0xde0>
f011fc7c:	83 ec 04             	sub    $0x4,%esp
f011fc7f:	68 20 aa 13 f0       	push   $0xf013aa20
f011fc84:	68 5e 05 00 00       	push   $0x55e
f011fc89:	68 3a a2 13 f0       	push   $0xf013a23a
f011fc8e:	e8 13 05 fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011fc93:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fc99:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fc9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fca3:	eb 1e                	jmp    f011fcc3 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f011fca5:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f011fcab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fcae:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fcb1:	01 c8                	add    %ecx,%eax
f011fcb3:	8a 00                	mov    (%eax),%al
f011fcb5:	0f be c0             	movsbl %al,%eax
f011fcb8:	01 d0                	add    %edx,%eax
f011fcba:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fcc0:	ff 45 f4             	incl   -0xc(%ebp)
f011fcc3:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011fcc9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fccc:	7f d7                	jg     f011fca5 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011fcce:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f011fcd4:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f011fcda:	c1 e2 02             	shl    $0x2,%edx
f011fcdd:	39 d0                	cmp    %edx,%eax
f011fcdf:	74 17                	je     f011fcf8 <test_kfree+0xe45>
f011fce1:	83 ec 04             	sub    $0x4,%esp
f011fce4:	68 20 aa 13 f0       	push   $0xf013aa20
f011fce9:	68 66 05 00 00       	push   $0x566
f011fcee:	68 3a a2 13 f0       	push   $0xf013a23a
f011fcf3:	e8 ae 04 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011fcf8:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fcfe:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fd01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd08:	eb 1e                	jmp    f011fd28 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f011fd0a:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f011fd10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fd13:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd16:	01 c8                	add    %ecx,%eax
f011fd18:	8a 00                	mov    (%eax),%al
f011fd1a:	0f be c0             	movsbl %al,%eax
f011fd1d:	01 d0                	add    %edx,%eax
f011fd1f:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fd25:	ff 45 f4             	incl   -0xc(%ebp)
f011fd28:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011fd2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd31:	7f d7                	jg     f011fd0a <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011fd33:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f011fd39:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f011fd3f:	89 d0                	mov    %edx,%eax
f011fd41:	c1 e0 02             	shl    $0x2,%eax
f011fd44:	01 d0                	add    %edx,%eax
f011fd46:	39 c1                	cmp    %eax,%ecx
f011fd48:	74 17                	je     f011fd61 <test_kfree+0xeae>
f011fd4a:	83 ec 04             	sub    $0x4,%esp
f011fd4d:	68 20 aa 13 f0       	push   $0xf013aa20
f011fd52:	68 6e 05 00 00       	push   $0x56e
f011fd57:	68 3a a2 13 f0       	push   $0xf013a23a
f011fd5c:	e8 45 04 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011fd61:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fd67:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fd6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd71:	eb 1e                	jmp    f011fd91 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f011fd73:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f011fd79:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fd7c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd7f:	01 c8                	add    %ecx,%eax
f011fd81:	8a 00                	mov    (%eax),%al
f011fd83:	0f be c0             	movsbl %al,%eax
f011fd86:	01 d0                	add    %edx,%eax
f011fd88:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fd8e:	ff 45 f4             	incl   -0xc(%ebp)
f011fd91:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011fd97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd9a:	7f d7                	jg     f011fd73 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011fd9c:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f011fda2:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f011fda8:	89 d0                	mov    %edx,%eax
f011fdaa:	01 c0                	add    %eax,%eax
f011fdac:	01 d0                	add    %edx,%eax
f011fdae:	01 c0                	add    %eax,%eax
f011fdb0:	01 d0                	add    %edx,%eax
f011fdb2:	39 c1                	cmp    %eax,%ecx
f011fdb4:	74 17                	je     f011fdcd <test_kfree+0xf1a>
f011fdb6:	83 ec 04             	sub    $0x4,%esp
f011fdb9:	68 20 aa 13 f0       	push   $0xf013aa20
f011fdbe:	68 76 05 00 00       	push   $0x576
f011fdc3:	68 3a a2 13 f0       	push   $0xf013a23a
f011fdc8:	e8 d9 03 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f011fdcd:	83 ec 0c             	sub    $0xc,%esp
f011fdd0:	68 53 aa 13 f0       	push   $0xf013aa53
f011fdd5:	e8 53 0e fe ff       	call   f0100c2d <cprintf>
f011fdda:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011fddd:	e8 e8 bf fe ff       	call   f010bdca <sys_calculate_free_frames>
f011fde2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fde5:	e8 a2 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fdea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011fded:	83 ec 0c             	sub    $0xc,%esp
f011fdf0:	68 00 50 00 00       	push   $0x5000
f011fdf5:	e8 e2 75 fe ff       	call   f01073dc <kmalloc>
f011fdfa:	83 c4 10             	add    $0x10,%esp
f011fdfd:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe03:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011fe09:	89 c1                	mov    %eax,%ecx
f011fe0b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011fe12:	10 00 00 
f011fe15:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011fe1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe20:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011fe26:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fe2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe31:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011fe37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fe3d:	29 d0                	sub    %edx,%eax
f011fe3f:	89 c3                	mov    %eax,%ebx
f011fe41:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011fe48:	10 00 00 
f011fe4b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011fe50:	0f b6 d0             	movzbl %al,%edx
f011fe53:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011fe59:	01 d0                	add    %edx,%eax
f011fe5b:	48                   	dec    %eax
f011fe5c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011fe62:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fe68:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe6d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011fe73:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fe79:	29 d0                	sub    %edx,%eax
f011fe7b:	01 c3                	add    %eax,%ebx
f011fe7d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011fe84:	10 00 00 
f011fe87:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011fe8c:	0f b6 c0             	movzbl %al,%eax
f011fe8f:	c1 e0 04             	shl    $0x4,%eax
f011fe92:	89 c2                	mov    %eax,%edx
f011fe94:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fe9a:	01 d0                	add    %edx,%eax
f011fe9c:	48                   	dec    %eax
f011fe9d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011fea3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fea9:	ba 00 00 00 00       	mov    $0x0,%edx
f011feae:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011feb4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011feba:	29 d0                	sub    %edx,%eax
f011febc:	01 d8                	add    %ebx,%eax
f011febe:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011fec3:	39 c1                	cmp    %eax,%ecx
f011fec5:	74 17                	je     f011fede <test_kfree+0x102b>
f011fec7:	83 ec 04             	sub    $0x4,%esp
f011feca:	68 20 a3 13 f0       	push   $0xf013a320
f011fecf:	68 80 05 00 00       	push   $0x580
f011fed4:	68 3a a2 13 f0       	push   $0xf013a23a
f011fed9:	e8 c8 02 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fede:	e8 a9 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fee3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fee6:	74 17                	je     f011feff <test_kfree+0x104c>
f011fee8:	83 ec 04             	sub    $0x4,%esp
f011feeb:	68 54 a2 13 f0       	push   $0xf013a254
f011fef0:	68 81 05 00 00       	push   $0x581
f011fef5:	68 3a a2 13 f0       	push   $0xf013a23a
f011fefa:	e8 a7 02 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011feff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff02:	e8 c3 be fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ff07:	29 c3                	sub    %eax,%ebx
f011ff09:	89 d8                	mov    %ebx,%eax
f011ff0b:	83 f8 05             	cmp    $0x5,%eax
f011ff0e:	74 17                	je     f011ff27 <test_kfree+0x1074>
f011ff10:	83 ec 04             	sub    $0x4,%esp
f011ff13:	68 bc a2 13 f0       	push   $0xf013a2bc
f011ff18:	68 82 05 00 00       	push   $0x582
f011ff1d:	68 3a a2 13 f0       	push   $0xf013a23a
f011ff22:	e8 7f 02 fe ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011ff27:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f011ff2e:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011ff31:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011ff37:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011ff3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff41:	eb 0e                	jmp    f011ff51 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f011ff43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff46:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff49:	01 d0                	add    %edx,%eax
f011ff4b:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011ff4e:	ff 45 f4             	incl   -0xc(%ebp)
f011ff51:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011ff57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff5a:	7f e7                	jg     f011ff43 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff5c:	e8 69 be fe ff       	call   f010bdca <sys_calculate_free_frames>
f011ff61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff64:	e8 23 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ff69:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011ff6c:	83 ec 0c             	sub    $0xc,%esp
f011ff6f:	68 00 00 10 00       	push   $0x100000
f011ff74:	e8 63 74 fe ff       	call   f01073dc <kmalloc>
f011ff79:	83 c4 10             	add    $0x10,%esp
f011ff7c:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff82:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f011ff88:	89 c1                	mov    %eax,%ecx
f011ff8a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ff91:	10 00 00 
f011ff94:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ff9a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff9f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ffa5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ffab:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffb0:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ffb6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ffbc:	29 d0                	sub    %edx,%eax
f011ffbe:	89 c3                	mov    %eax,%ebx
f011ffc0:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ffc7:	10 00 00 
f011ffca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ffcf:	0f b6 d0             	movzbl %al,%edx
f011ffd2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ffd8:	01 d0                	add    %edx,%eax
f011ffda:	48                   	dec    %eax
f011ffdb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ffe1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ffe7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffec:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011fff2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fff8:	29 d0                	sub    %edx,%eax
f011fffa:	01 c3                	add    %eax,%ebx
f011fffc:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120003:	10 00 00 
f0120006:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012000b:	0f b6 c0             	movzbl %al,%eax
f012000e:	c1 e0 04             	shl    $0x4,%eax
f0120011:	89 c2                	mov    %eax,%edx
f0120013:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120019:	01 d0                	add    %edx,%eax
f012001b:	48                   	dec    %eax
f012001c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0120022:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120028:	ba 00 00 00 00       	mov    $0x0,%edx
f012002d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120033:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120039:	29 d0                	sub    %edx,%eax
f012003b:	01 d8                	add    %ebx,%eax
f012003d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120042:	39 c1                	cmp    %eax,%ecx
f0120044:	74 17                	je     f012005d <test_kfree+0x11aa>
f0120046:	83 ec 04             	sub    $0x4,%esp
f0120049:	68 20 a3 13 f0       	push   $0xf013a320
f012004e:	68 8e 05 00 00       	push   $0x58e
f0120053:	68 3a a2 13 f0       	push   $0xf013a23a
f0120058:	e8 49 01 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012005d:	e8 2a 3c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120062:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120065:	74 17                	je     f012007e <test_kfree+0x11cb>
f0120067:	83 ec 04             	sub    $0x4,%esp
f012006a:	68 54 a2 13 f0       	push   $0xf013a254
f012006f:	68 8f 05 00 00       	push   $0x58f
f0120074:	68 3a a2 13 f0       	push   $0xf013a23a
f0120079:	e8 28 01 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012007e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120081:	e8 44 bd fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120086:	29 c3                	sub    %eax,%ebx
f0120088:	89 d8                	mov    %ebx,%eax
f012008a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012008f:	74 17                	je     f01200a8 <test_kfree+0x11f5>
f0120091:	83 ec 04             	sub    $0x4,%esp
f0120094:	68 bc a2 13 f0       	push   $0xf013a2bc
f0120099:	68 90 05 00 00       	push   $0x590
f012009e:	68 3a a2 13 f0       	push   $0xf013a23a
f01200a3:	e8 fe 00 fe ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01200a8:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01200af:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01200b2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01200b8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01200bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01200c2:	eb 0e                	jmp    f01200d2 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01200c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01200c7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01200ca:	01 d0                	add    %edx,%eax
f01200cc:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01200cf:	ff 45 f4             	incl   -0xc(%ebp)
f01200d2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01200d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200db:	7f e7                	jg     f01200c4 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01200dd:	e8 ac 66 ff ff       	call   f011678e <isKHeapPlacementStrategyNEXTFIT>
f01200e2:	84 c0                	test   %al,%al
f01200e4:	0f 84 ac 06 00 00    	je     f0120796 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01200ea:	e8 db bc fe ff       	call   f010bdca <sys_calculate_free_frames>
f01200ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01200f2:	e8 95 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01200f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01200fa:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120101:	10 00 00 
f0120104:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012010a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012010f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120115:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012011b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120120:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120126:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012012c:	29 d0                	sub    %edx,%eax
f012012e:	89 c1                	mov    %eax,%ecx
f0120130:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120137:	10 00 00 
f012013a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012013f:	0f b6 d0             	movzbl %al,%edx
f0120142:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120148:	01 d0                	add    %edx,%eax
f012014a:	48                   	dec    %eax
f012014b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120151:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120157:	ba 00 00 00 00       	mov    $0x0,%edx
f012015c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120162:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120168:	29 d0                	sub    %edx,%eax
f012016a:	01 c1                	add    %eax,%ecx
f012016c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120173:	10 00 00 
f0120176:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012017b:	0f b6 c0             	movzbl %al,%eax
f012017e:	c1 e0 04             	shl    $0x4,%eax
f0120181:	89 c2                	mov    %eax,%edx
f0120183:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120189:	01 d0                	add    %edx,%eax
f012018b:	48                   	dec    %eax
f012018c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120192:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120198:	ba 00 00 00 00       	mov    $0x0,%edx
f012019d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01201a3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01201a9:	29 d0                	sub    %edx,%eax
f01201ab:	01 c8                	add    %ecx,%eax
f01201ad:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01201b2:	29 c2                	sub    %eax,%edx
f01201b4:	89 d0                	mov    %edx,%eax
f01201b6:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01201bc:	83 ec 0c             	sub    $0xc,%esp
f01201bf:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01201c5:	e8 12 72 fe ff       	call   f01073dc <kmalloc>
f01201ca:	83 c4 10             	add    $0x10,%esp
f01201cd:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01201d3:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01201d9:	89 c1                	mov    %eax,%ecx
f01201db:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01201e2:	10 00 00 
f01201e5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01201eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01201f0:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01201f6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01201fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120201:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0120207:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012020d:	29 d0                	sub    %edx,%eax
f012020f:	89 c3                	mov    %eax,%ebx
f0120211:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0120218:	10 00 00 
f012021b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120220:	0f b6 d0             	movzbl %al,%edx
f0120223:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0120229:	01 d0                	add    %edx,%eax
f012022b:	48                   	dec    %eax
f012022c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120232:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120238:	ba 00 00 00 00       	mov    $0x0,%edx
f012023d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120243:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120249:	29 d0                	sub    %edx,%eax
f012024b:	01 c3                	add    %eax,%ebx
f012024d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120254:	10 00 00 
f0120257:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012025c:	0f b6 c0             	movzbl %al,%eax
f012025f:	c1 e0 04             	shl    $0x4,%eax
f0120262:	89 c2                	mov    %eax,%edx
f0120264:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012026a:	01 d0                	add    %edx,%eax
f012026c:	48                   	dec    %eax
f012026d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120273:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120279:	ba 00 00 00 00       	mov    $0x0,%edx
f012027e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120284:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012028a:	29 d0                	sub    %edx,%eax
f012028c:	01 d8                	add    %ebx,%eax
f012028e:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120293:	39 c1                	cmp    %eax,%ecx
f0120295:	74 17                	je     f01202ae <test_kfree+0x13fb>
f0120297:	83 ec 04             	sub    $0x4,%esp
f012029a:	68 20 a3 13 f0       	push   $0xf013a320
f012029f:	68 9f 05 00 00       	push   $0x59f
f01202a4:	68 3a a2 13 f0       	push   $0xf013a23a
f01202a9:	e8 f8 fe fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01202ae:	e8 d9 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01202b3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01202b6:	74 17                	je     f01202cf <test_kfree+0x141c>
f01202b8:	83 ec 04             	sub    $0x4,%esp
f01202bb:	68 54 a2 13 f0       	push   $0xf013a254
f01202c0:	68 a0 05 00 00       	push   $0x5a0
f01202c5:	68 3a a2 13 f0       	push   $0xf013a23a
f01202ca:	e8 d7 fe fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01202cf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01202d2:	e8 f3 ba fe ff       	call   f010bdca <sys_calculate_free_frames>
f01202d7:	29 c3                	sub    %eax,%ebx
f01202d9:	89 da                	mov    %ebx,%edx
f01202db:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01202e1:	c1 e8 0c             	shr    $0xc,%eax
f01202e4:	39 c2                	cmp    %eax,%edx
f01202e6:	74 17                	je     f01202ff <test_kfree+0x144c>
f01202e8:	83 ec 04             	sub    $0x4,%esp
f01202eb:	68 bc a2 13 f0       	push   $0xf013a2bc
f01202f0:	68 a1 05 00 00       	push   $0x5a1
f01202f5:	68 3a a2 13 f0       	push   $0xf013a23a
f01202fa:	e8 a7 fe fd ff       	call   f01001a6 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01202ff:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120305:	48                   	dec    %eax
f0120306:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f012030c:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120312:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120315:	e8 b0 ba fe ff       	call   f010bdca <sys_calculate_free_frames>
f012031a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012031d:	e8 6a 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120322:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120325:	83 ec 0c             	sub    $0xc,%esp
f0120328:	68 00 00 30 00       	push   $0x300000
f012032d:	e8 aa 70 fe ff       	call   f01073dc <kmalloc>
f0120332:	83 c4 10             	add    $0x10,%esp
f0120335:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012033b:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120341:	89 c1                	mov    %eax,%ecx
f0120343:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012034a:	10 00 00 
f012034d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120353:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120358:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012035e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120364:	ba 00 00 00 00       	mov    $0x0,%edx
f0120369:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012036f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120375:	29 d0                	sub    %edx,%eax
f0120377:	89 c3                	mov    %eax,%ebx
f0120379:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120380:	10 00 00 
f0120383:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120388:	0f b6 d0             	movzbl %al,%edx
f012038b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120391:	01 d0                	add    %edx,%eax
f0120393:	48                   	dec    %eax
f0120394:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012039a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01203a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01203a5:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f01203ab:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01203b1:	29 d0                	sub    %edx,%eax
f01203b3:	01 c3                	add    %eax,%ebx
f01203b5:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01203bc:	10 00 00 
f01203bf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01203c4:	0f b6 c0             	movzbl %al,%eax
f01203c7:	c1 e0 04             	shl    $0x4,%eax
f01203ca:	89 c2                	mov    %eax,%edx
f01203cc:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01203d2:	01 d0                	add    %edx,%eax
f01203d4:	48                   	dec    %eax
f01203d5:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01203db:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01203e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01203e6:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01203ec:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01203f2:	29 d0                	sub    %edx,%eax
f01203f4:	01 d8                	add    %ebx,%eax
f01203f6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01203fb:	39 c1                	cmp    %eax,%ecx
f01203fd:	74 17                	je     f0120416 <test_kfree+0x1563>
f01203ff:	83 ec 04             	sub    $0x4,%esp
f0120402:	68 20 a3 13 f0       	push   $0xf013a320
f0120407:	68 ae 05 00 00       	push   $0x5ae
f012040c:	68 3a a2 13 f0       	push   $0xf013a23a
f0120411:	e8 90 fd fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120416:	e8 71 38 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012041b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012041e:	74 17                	je     f0120437 <test_kfree+0x1584>
f0120420:	83 ec 04             	sub    $0x4,%esp
f0120423:	68 54 a2 13 f0       	push   $0xf013a254
f0120428:	68 af 05 00 00       	push   $0x5af
f012042d:	68 3a a2 13 f0       	push   $0xf013a23a
f0120432:	e8 6f fd fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120437:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012043a:	e8 8b b9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012043f:	29 c3                	sub    %eax,%ebx
f0120441:	89 d8                	mov    %ebx,%eax
f0120443:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120448:	74 17                	je     f0120461 <test_kfree+0x15ae>
f012044a:	83 ec 04             	sub    $0x4,%esp
f012044d:	68 bc a2 13 f0       	push   $0xf013a2bc
f0120452:	68 b0 05 00 00       	push   $0x5b0
f0120457:	68 3a a2 13 f0       	push   $0xf013a23a
f012045c:	e8 45 fd fd ff       	call   f01001a6 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120461:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120468:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f012046b:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120471:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120474:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012047b:	eb 0e                	jmp    f012048b <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f012047d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120480:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120483:	01 d0                	add    %edx,%eax
f0120485:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120488:	ff 45 f4             	incl   -0xc(%ebp)
f012048b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120491:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120494:	7f e7                	jg     f012047d <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120496:	e8 2f b9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012049b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012049e:	e8 e9 37 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01204a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f01204a6:	83 ec 0c             	sub    $0xc,%esp
f01204a9:	68 00 08 00 00       	push   $0x800
f01204ae:	e8 29 6f fe ff       	call   f01073dc <kmalloc>
f01204b3:	83 c4 10             	add    $0x10,%esp
f01204b6:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204bc:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01204c2:	89 c1                	mov    %eax,%ecx
f01204c4:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01204cb:	10 00 00 
f01204ce:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01204d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204d9:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01204df:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01204e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01204ea:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01204f0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01204f6:	29 d0                	sub    %edx,%eax
f01204f8:	89 c3                	mov    %eax,%ebx
f01204fa:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120501:	10 00 00 
f0120504:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120509:	0f b6 d0             	movzbl %al,%edx
f012050c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120512:	01 d0                	add    %edx,%eax
f0120514:	48                   	dec    %eax
f0120515:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012051b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120521:	ba 00 00 00 00       	mov    $0x0,%edx
f0120526:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012052c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120532:	29 d0                	sub    %edx,%eax
f0120534:	01 c3                	add    %eax,%ebx
f0120536:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012053d:	10 00 00 
f0120540:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120545:	0f b6 c0             	movzbl %al,%eax
f0120548:	c1 e0 04             	shl    $0x4,%eax
f012054b:	89 c2                	mov    %eax,%edx
f012054d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120553:	01 d0                	add    %edx,%eax
f0120555:	48                   	dec    %eax
f0120556:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012055c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120562:	ba 00 00 00 00       	mov    $0x0,%edx
f0120567:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012056d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120573:	29 d0                	sub    %edx,%eax
f0120575:	01 d8                	add    %ebx,%eax
f0120577:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012057c:	39 c1                	cmp    %eax,%ecx
f012057e:	74 17                	je     f0120597 <test_kfree+0x16e4>
f0120580:	83 ec 04             	sub    $0x4,%esp
f0120583:	68 20 a3 13 f0       	push   $0xf013a320
f0120588:	68 bc 05 00 00       	push   $0x5bc
f012058d:	68 3a a2 13 f0       	push   $0xf013a23a
f0120592:	e8 0f fc fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120597:	e8 f0 36 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012059c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012059f:	74 17                	je     f01205b8 <test_kfree+0x1705>
f01205a1:	83 ec 04             	sub    $0x4,%esp
f01205a4:	68 54 a2 13 f0       	push   $0xf013a254
f01205a9:	68 bd 05 00 00       	push   $0x5bd
f01205ae:	68 3a a2 13 f0       	push   $0xf013a23a
f01205b3:	e8 ee fb fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205b8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205bb:	e8 0a b8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01205c0:	29 c3                	sub    %eax,%ebx
f01205c2:	89 d8                	mov    %ebx,%eax
f01205c4:	83 f8 01             	cmp    $0x1,%eax
f01205c7:	74 17                	je     f01205e0 <test_kfree+0x172d>
f01205c9:	83 ec 04             	sub    $0x4,%esp
f01205cc:	68 bc a2 13 f0       	push   $0xf013a2bc
f01205d1:	68 be 05 00 00       	push   $0x5be
f01205d6:	68 3a a2 13 f0       	push   $0xf013a23a
f01205db:	e8 c6 fb fd ff       	call   f01001a6 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01205e0:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01205e7:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01205ea:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01205f0:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01205f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205fa:	eb 0e                	jmp    f012060a <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01205fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205ff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120602:	01 d0                	add    %edx,%eax
f0120604:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120607:	ff 45 f4             	incl   -0xc(%ebp)
f012060a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120610:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120613:	7f e7                	jg     f01205fc <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120615:	e8 b0 b7 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012061a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012061d:	e8 6a 36 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120622:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120625:	83 ec 0c             	sub    $0xc,%esp
f0120628:	68 00 00 10 00       	push   $0x100000
f012062d:	e8 aa 6d fe ff       	call   f01073dc <kmalloc>
f0120632:	83 c4 10             	add    $0x10,%esp
f0120635:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012063b:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120641:	89 c1                	mov    %eax,%ecx
f0120643:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012064a:	10 00 00 
f012064d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0120653:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120658:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012065e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120664:	ba 00 00 00 00       	mov    $0x0,%edx
f0120669:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012066f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120675:	29 d0                	sub    %edx,%eax
f0120677:	89 c3                	mov    %eax,%ebx
f0120679:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120680:	10 00 00 
f0120683:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120688:	0f b6 d0             	movzbl %al,%edx
f012068b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120691:	01 d0                	add    %edx,%eax
f0120693:	48                   	dec    %eax
f0120694:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012069a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01206a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01206a5:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01206ab:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01206b1:	29 d0                	sub    %edx,%eax
f01206b3:	01 c3                	add    %eax,%ebx
f01206b5:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01206bc:	10 00 00 
f01206bf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01206c4:	0f b6 c0             	movzbl %al,%eax
f01206c7:	c1 e0 04             	shl    $0x4,%eax
f01206ca:	89 c2                	mov    %eax,%edx
f01206cc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01206d2:	01 d0                	add    %edx,%eax
f01206d4:	48                   	dec    %eax
f01206d5:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01206db:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01206e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01206e6:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01206ec:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01206f2:	29 d0                	sub    %edx,%eax
f01206f4:	01 d8                	add    %ebx,%eax
f01206f6:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01206fb:	39 c1                	cmp    %eax,%ecx
f01206fd:	74 17                	je     f0120716 <test_kfree+0x1863>
f01206ff:	83 ec 04             	sub    $0x4,%esp
f0120702:	68 20 a3 13 f0       	push   $0xf013a320
f0120707:	68 ca 05 00 00       	push   $0x5ca
f012070c:	68 3a a2 13 f0       	push   $0xf013a23a
f0120711:	e8 90 fa fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120716:	e8 71 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012071b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012071e:	74 17                	je     f0120737 <test_kfree+0x1884>
f0120720:	83 ec 04             	sub    $0x4,%esp
f0120723:	68 54 a2 13 f0       	push   $0xf013a254
f0120728:	68 cb 05 00 00       	push   $0x5cb
f012072d:	68 3a a2 13 f0       	push   $0xf013a23a
f0120732:	e8 6f fa fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120737:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012073a:	e8 8b b6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012073f:	29 c3                	sub    %eax,%ebx
f0120741:	89 d8                	mov    %ebx,%eax
f0120743:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120748:	74 17                	je     f0120761 <test_kfree+0x18ae>
f012074a:	83 ec 04             	sub    $0x4,%esp
f012074d:	68 bc a2 13 f0       	push   $0xf013a2bc
f0120752:	68 cc 05 00 00       	push   $0x5cc
f0120757:	68 3a a2 13 f0       	push   $0xf013a23a
f012075c:	e8 45 fa fd ff       	call   f01001a6 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120761:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0120768:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f012076b:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120771:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120774:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012077b:	eb 0e                	jmp    f012078b <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f012077d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120780:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120783:	01 d0                	add    %edx,%eax
f0120785:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120788:	ff 45 f4             	incl   -0xc(%ebp)
f012078b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0120791:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120794:	7f e7                	jg     f012077d <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120796:	83 ec 0c             	sub    $0xc,%esp
f0120799:	68 5a aa 13 f0       	push   $0xf013aa5a
f012079e:	e8 8a 04 fe ff       	call   f0100c2d <cprintf>
f01207a3:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01207a6:	e8 1f b6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01207ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207ae:	e8 d9 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01207b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01207b6:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01207bc:	83 ec 0c             	sub    $0xc,%esp
f01207bf:	50                   	push   %eax
f01207c0:	e8 31 6c fe ff       	call   f01073f6 <kfree>
f01207c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207c8:	e8 bf 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01207cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207d0:	74 17                	je     f01207e9 <test_kfree+0x1936>
f01207d2:	83 ec 04             	sub    $0x4,%esp
f01207d5:	68 54 a2 13 f0       	push   $0xf013a254
f01207da:	68 dd 05 00 00       	push   $0x5dd
f01207df:	68 3a a2 13 f0       	push   $0xf013a23a
f01207e4:	e8 bd f9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01207e9:	e8 dc b5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01207ee:	89 c2                	mov    %eax,%edx
f01207f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01207f3:	29 c2                	sub    %eax,%edx
f01207f5:	89 d0                	mov    %edx,%eax
f01207f7:	83 f8 02             	cmp    $0x2,%eax
f01207fa:	74 17                	je     f0120813 <test_kfree+0x1960>
f01207fc:	83 ec 04             	sub    $0x4,%esp
f01207ff:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120804:	68 de 05 00 00       	push   $0x5de
f0120809:	68 3a a2 13 f0       	push   $0xf013a23a
f012080e:	e8 93 f9 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120813:	e8 b2 b5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120818:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012081b:	e8 6c 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120820:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120823:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120829:	83 ec 0c             	sub    $0xc,%esp
f012082c:	50                   	push   %eax
f012082d:	e8 c4 6b fe ff       	call   f01073f6 <kfree>
f0120832:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120835:	e8 52 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012083a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012083d:	74 17                	je     f0120856 <test_kfree+0x19a3>
f012083f:	83 ec 04             	sub    $0x4,%esp
f0120842:	68 54 a2 13 f0       	push   $0xf013a254
f0120847:	68 e4 05 00 00       	push   $0x5e4
f012084c:	68 3a a2 13 f0       	push   $0xf013a23a
f0120851:	e8 50 f9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120856:	e8 6f b5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012085b:	89 c2                	mov    %eax,%edx
f012085d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120860:	29 c2                	sub    %eax,%edx
f0120862:	89 d0                	mov    %edx,%eax
f0120864:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120869:	74 17                	je     f0120882 <test_kfree+0x19cf>
f012086b:	83 ec 04             	sub    $0x4,%esp
f012086e:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120873:	68 e5 05 00 00       	push   $0x5e5
f0120878:	68 3a a2 13 f0       	push   $0xf013a23a
f012087d:	e8 24 f9 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120882:	e8 43 b5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120887:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012088a:	e8 fd 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012088f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120892:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120898:	83 ec 0c             	sub    $0xc,%esp
f012089b:	50                   	push   %eax
f012089c:	e8 55 6b fe ff       	call   f01073f6 <kfree>
f01208a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208a4:	e8 e3 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01208a9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208ac:	74 17                	je     f01208c5 <test_kfree+0x1a12>
f01208ae:	83 ec 04             	sub    $0x4,%esp
f01208b1:	68 54 a2 13 f0       	push   $0xf013a254
f01208b6:	68 eb 05 00 00       	push   $0x5eb
f01208bb:	68 3a a2 13 f0       	push   $0xf013a23a
f01208c0:	e8 e1 f8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01208c5:	e8 00 b5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01208ca:	89 c2                	mov    %eax,%edx
f01208cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01208cf:	29 c2                	sub    %eax,%edx
f01208d1:	89 d0                	mov    %edx,%eax
f01208d3:	83 f8 01             	cmp    $0x1,%eax
f01208d6:	74 17                	je     f01208ef <test_kfree+0x1a3c>
f01208d8:	83 ec 04             	sub    $0x4,%esp
f01208db:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01208e0:	68 ec 05 00 00       	push   $0x5ec
f01208e5:	68 3a a2 13 f0       	push   $0xf013a23a
f01208ea:	e8 b7 f8 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01208ef:	e8 d6 b4 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01208f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208f7:	e8 90 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01208fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01208ff:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120905:	83 ec 0c             	sub    $0xc,%esp
f0120908:	50                   	push   %eax
f0120909:	e8 e8 6a fe ff       	call   f01073f6 <kfree>
f012090e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120911:	e8 76 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120916:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120919:	74 17                	je     f0120932 <test_kfree+0x1a7f>
f012091b:	83 ec 04             	sub    $0x4,%esp
f012091e:	68 54 a2 13 f0       	push   $0xf013a254
f0120923:	68 f2 05 00 00       	push   $0x5f2
f0120928:	68 3a a2 13 f0       	push   $0xf013a23a
f012092d:	e8 74 f8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120932:	e8 93 b4 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120937:	89 c2                	mov    %eax,%edx
f0120939:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012093c:	29 c2                	sub    %eax,%edx
f012093e:	89 d0                	mov    %edx,%eax
f0120940:	83 f8 04             	cmp    $0x4,%eax
f0120943:	74 17                	je     f012095c <test_kfree+0x1aa9>
f0120945:	83 ec 04             	sub    $0x4,%esp
f0120948:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012094d:	68 f3 05 00 00       	push   $0x5f3
f0120952:	68 3a a2 13 f0       	push   $0xf013a23a
f0120957:	e8 4a f8 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012095c:	e8 69 b4 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120961:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120964:	e8 23 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120969:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012096c:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120972:	83 ec 0c             	sub    $0xc,%esp
f0120975:	50                   	push   %eax
f0120976:	e8 7b 6a fe ff       	call   f01073f6 <kfree>
f012097b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012097e:	e8 09 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120983:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120986:	74 17                	je     f012099f <test_kfree+0x1aec>
f0120988:	83 ec 04             	sub    $0x4,%esp
f012098b:	68 54 a2 13 f0       	push   $0xf013a254
f0120990:	68 f9 05 00 00       	push   $0x5f9
f0120995:	68 3a a2 13 f0       	push   $0xf013a23a
f012099a:	e8 07 f8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f012099f:	e8 26 b4 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01209a4:	89 c2                	mov    %eax,%edx
f01209a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01209a9:	29 c2                	sub    %eax,%edx
f01209ab:	89 d0                	mov    %edx,%eax
f01209ad:	83 f8 05             	cmp    $0x5,%eax
f01209b0:	74 17                	je     f01209c9 <test_kfree+0x1b16>
f01209b2:	83 ec 04             	sub    $0x4,%esp
f01209b5:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01209ba:	68 fa 05 00 00       	push   $0x5fa
f01209bf:	68 3a a2 13 f0       	push   $0xf013a23a
f01209c4:	e8 dd f7 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01209c9:	e8 fc b3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01209ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01209d1:	e8 b6 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01209d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01209d9:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01209df:	83 ec 0c             	sub    $0xc,%esp
f01209e2:	50                   	push   %eax
f01209e3:	e8 0e 6a fe ff       	call   f01073f6 <kfree>
f01209e8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209eb:	e8 9c 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01209f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209f3:	74 17                	je     f0120a0c <test_kfree+0x1b59>
f01209f5:	83 ec 04             	sub    $0x4,%esp
f01209f8:	68 54 a2 13 f0       	push   $0xf013a254
f01209fd:	68 00 06 00 00       	push   $0x600
f0120a02:	68 3a a2 13 f0       	push   $0xf013a23a
f0120a07:	e8 9a f7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120a0c:	e8 b9 b3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120a11:	89 c2                	mov    %eax,%edx
f0120a13:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120a16:	29 c2                	sub    %eax,%edx
f0120a18:	89 d0                	mov    %edx,%eax
f0120a1a:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120a1f:	74 17                	je     f0120a38 <test_kfree+0x1b85>
f0120a21:	83 ec 04             	sub    $0x4,%esp
f0120a24:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120a29:	68 01 06 00 00       	push   $0x601
f0120a2e:	68 3a a2 13 f0       	push   $0xf013a23a
f0120a33:	e8 6e f7 fd ff       	call   f01001a6 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120a38:	e8 51 5d ff ff       	call   f011678e <isKHeapPlacementStrategyNEXTFIT>
f0120a3d:	84 c0                	test   %al,%al
f0120a3f:	0f 84 80 02 00 00    	je     f0120cc5 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120a45:	e8 80 b3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120a4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a4d:	e8 3a 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120a52:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120a55:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120a5b:	83 ec 0c             	sub    $0xc,%esp
f0120a5e:	50                   	push   %eax
f0120a5f:	e8 92 69 fe ff       	call   f01073f6 <kfree>
f0120a64:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120a67:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120a6e:	10 00 00 
f0120a71:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0120a77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a7c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120a82:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120a88:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a8d:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120a93:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120a99:	29 d0                	sub    %edx,%eax
f0120a9b:	89 c1                	mov    %eax,%ecx
f0120a9d:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120aa4:	10 00 00 
f0120aa7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120aac:	0f b6 d0             	movzbl %al,%edx
f0120aaf:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0120ab5:	01 d0                	add    %edx,%eax
f0120ab7:	48                   	dec    %eax
f0120ab8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120abe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120ac4:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ac9:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120acf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120ad5:	29 d0                	sub    %edx,%eax
f0120ad7:	01 c1                	add    %eax,%ecx
f0120ad9:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120ae0:	10 00 00 
f0120ae3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120ae8:	0f b6 c0             	movzbl %al,%eax
f0120aeb:	c1 e0 04             	shl    $0x4,%eax
f0120aee:	89 c2                	mov    %eax,%edx
f0120af0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120af6:	01 d0                	add    %edx,%eax
f0120af8:	48                   	dec    %eax
f0120af9:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120aff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120b05:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b0a:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120b10:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120b16:	29 d0                	sub    %edx,%eax
f0120b18:	01 c8                	add    %ecx,%eax
f0120b1a:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120b1f:	29 c2                	sub    %eax,%edx
f0120b21:	89 d0                	mov    %edx,%eax
f0120b23:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b29:	e8 5e 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b2e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b31:	74 17                	je     f0120b4a <test_kfree+0x1c97>
f0120b33:	83 ec 04             	sub    $0x4,%esp
f0120b36:	68 54 a2 13 f0       	push   $0xf013a254
f0120b3b:	68 0b 06 00 00       	push   $0x60b
f0120b40:	68 3a a2 13 f0       	push   $0xf013a23a
f0120b45:	e8 5c f6 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b4a:	e8 7b b2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120b4f:	89 c2                	mov    %eax,%edx
f0120b51:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b54:	29 c2                	sub    %eax,%edx
f0120b56:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120b5c:	c1 e8 0c             	shr    $0xc,%eax
f0120b5f:	39 c2                	cmp    %eax,%edx
f0120b61:	74 17                	je     f0120b7a <test_kfree+0x1cc7>
f0120b63:	83 ec 04             	sub    $0x4,%esp
f0120b66:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120b6b:	68 0c 06 00 00       	push   $0x60c
f0120b70:	68 3a a2 13 f0       	push   $0xf013a23a
f0120b75:	e8 2c f6 fd ff       	call   f01001a6 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120b7a:	e8 4b b2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120b7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120b82:	e8 05 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b87:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120b8a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120b90:	83 ec 0c             	sub    $0xc,%esp
f0120b93:	50                   	push   %eax
f0120b94:	e8 5d 68 fe ff       	call   f01073f6 <kfree>
f0120b99:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b9c:	e8 eb 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ba1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ba4:	74 17                	je     f0120bbd <test_kfree+0x1d0a>
f0120ba6:	83 ec 04             	sub    $0x4,%esp
f0120ba9:	68 54 a2 13 f0       	push   $0xf013a254
f0120bae:	68 12 06 00 00       	push   $0x612
f0120bb3:	68 3a a2 13 f0       	push   $0xf013a23a
f0120bb8:	e8 e9 f5 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bbd:	e8 08 b2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120bc2:	89 c2                	mov    %eax,%edx
f0120bc4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120bc7:	29 c2                	sub    %eax,%edx
f0120bc9:	89 d0                	mov    %edx,%eax
f0120bcb:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120bd0:	74 17                	je     f0120be9 <test_kfree+0x1d36>
f0120bd2:	83 ec 04             	sub    $0x4,%esp
f0120bd5:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120bda:	68 13 06 00 00       	push   $0x613
f0120bdf:	68 3a a2 13 f0       	push   $0xf013a23a
f0120be4:	e8 bd f5 fd ff       	call   f01001a6 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120be9:	e8 dc b1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120bee:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120bf1:	e8 96 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120bf6:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120bf9:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120bff:	83 ec 0c             	sub    $0xc,%esp
f0120c02:	50                   	push   %eax
f0120c03:	e8 ee 67 fe ff       	call   f01073f6 <kfree>
f0120c08:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c0b:	e8 7c 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c13:	74 17                	je     f0120c2c <test_kfree+0x1d79>
f0120c15:	83 ec 04             	sub    $0x4,%esp
f0120c18:	68 54 a2 13 f0       	push   $0xf013a254
f0120c1d:	68 19 06 00 00       	push   $0x619
f0120c22:	68 3a a2 13 f0       	push   $0xf013a23a
f0120c27:	e8 7a f5 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c2c:	e8 99 b1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120c31:	89 c2                	mov    %eax,%edx
f0120c33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c36:	29 c2                	sub    %eax,%edx
f0120c38:	89 d0                	mov    %edx,%eax
f0120c3a:	83 f8 01             	cmp    $0x1,%eax
f0120c3d:	74 17                	je     f0120c56 <test_kfree+0x1da3>
f0120c3f:	83 ec 04             	sub    $0x4,%esp
f0120c42:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120c47:	68 1a 06 00 00       	push   $0x61a
f0120c4c:	68 3a a2 13 f0       	push   $0xf013a23a
f0120c51:	e8 50 f5 fd ff       	call   f01001a6 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120c56:	e8 6f b1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120c5b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c5e:	e8 29 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c63:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0120c66:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120c6c:	83 ec 0c             	sub    $0xc,%esp
f0120c6f:	50                   	push   %eax
f0120c70:	e8 81 67 fe ff       	call   f01073f6 <kfree>
f0120c75:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c78:	e8 0f 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c7d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c80:	74 17                	je     f0120c99 <test_kfree+0x1de6>
f0120c82:	83 ec 04             	sub    $0x4,%esp
f0120c85:	68 54 a2 13 f0       	push   $0xf013a254
f0120c8a:	68 20 06 00 00       	push   $0x620
f0120c8f:	68 3a a2 13 f0       	push   $0xf013a23a
f0120c94:	e8 0d f5 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c99:	e8 2c b1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120c9e:	89 c2                	mov    %eax,%edx
f0120ca0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ca3:	29 c2                	sub    %eax,%edx
f0120ca5:	89 d0                	mov    %edx,%eax
f0120ca7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120cac:	74 17                	je     f0120cc5 <test_kfree+0x1e12>
f0120cae:	83 ec 04             	sub    $0x4,%esp
f0120cb1:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0120cb6:	68 21 06 00 00       	push   $0x621
f0120cbb:	68 3a a2 13 f0       	push   $0xf013a23a
f0120cc0:	e8 e1 f4 fd ff       	call   f01001a6 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0120cc5:	e8 00 b1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120cca:	89 c2                	mov    %eax,%edx
f0120ccc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120ccf:	39 c2                	cmp    %eax,%edx
f0120cd1:	74 17                	je     f0120cea <test_kfree+0x1e37>
f0120cd3:	83 ec 04             	sub    $0x4,%esp
f0120cd6:	68 64 aa 13 f0       	push   $0xf013aa64
f0120cdb:	68 24 06 00 00       	push   $0x624
f0120ce0:	68 3a a2 13 f0       	push   $0xf013a23a
f0120ce5:	e8 bc f4 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0120cea:	83 ec 0c             	sub    $0xc,%esp
f0120ced:	68 98 aa 13 f0       	push   $0xf013aa98
f0120cf2:	e8 36 ff fd ff       	call   f0100c2d <cprintf>
f0120cf7:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0120cfa:	83 ec 0c             	sub    $0xc,%esp
f0120cfd:	6a 03                	push   $0x3
f0120cff:	e8 6f b5 fe ff       	call   f010c273 <sys_bypassPageFault>
f0120d04:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0120d07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d0e:	e9 82 00 00 00       	jmp    f0120d95 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0120d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d16:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0120d1d:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0120d20:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d23:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120d26:	e8 36 b5 fe ff       	call   f010c261 <sys_rcr2>
f0120d2b:	89 c2                	mov    %eax,%edx
f0120d2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d30:	39 c2                	cmp    %eax,%edx
f0120d32:	74 17                	je     f0120d4b <test_kfree+0x1e98>
f0120d34:	83 ec 04             	sub    $0x4,%esp
f0120d37:	68 a0 aa 13 f0       	push   $0xf013aaa0
f0120d3c:	68 33 06 00 00       	push   $0x633
f0120d41:	68 3a a2 13 f0       	push   $0xf013a23a
f0120d46:	e8 5b f4 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0120d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d4e:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0120d55:	89 c2                	mov    %eax,%edx
f0120d57:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d5a:	01 d0                	add    %edx,%eax
f0120d5c:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120d5f:	e8 fd b4 fe ff       	call   f010c261 <sys_rcr2>
f0120d64:	89 c2                	mov    %eax,%edx
f0120d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d69:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0120d70:	89 c1                	mov    %eax,%ecx
f0120d72:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d75:	01 c8                	add    %ecx,%eax
f0120d77:	39 c2                	cmp    %eax,%edx
f0120d79:	74 17                	je     f0120d92 <test_kfree+0x1edf>
f0120d7b:	83 ec 04             	sub    $0x4,%esp
f0120d7e:	68 a0 aa 13 f0       	push   $0xf013aaa0
f0120d83:	68 35 06 00 00       	push   $0x635
f0120d88:	68 3a a2 13 f0       	push   $0xf013a23a
f0120d8d:	e8 14 f4 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0120d92:	ff 45 f4             	incl   -0xc(%ebp)
f0120d95:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0120d99:	0f 8e 74 ff ff ff    	jle    f0120d13 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0120d9f:	83 ec 0c             	sub    $0xc,%esp
f0120da2:	6a 00                	push   $0x0
f0120da4:	e8 ca b4 fe ff       	call   f010c273 <sys_bypassPageFault>
f0120da9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0120dac:	83 ec 0c             	sub    $0xc,%esp
f0120daf:	68 e5 aa 13 f0       	push   $0xf013aae5
f0120db4:	e8 74 fe fd ff       	call   f0100c2d <cprintf>
f0120db9:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120dbc:	e8 09 b0 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120dc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dc4:	e8 c3 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120dc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0120dcc:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120dd2:	83 ec 0c             	sub    $0xc,%esp
f0120dd5:	50                   	push   %eax
f0120dd6:	e8 1b 66 fe ff       	call   f01073f6 <kfree>
f0120ddb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dde:	e8 a9 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120de3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120de6:	74 17                	je     f0120dff <test_kfree+0x1f4c>
f0120de8:	83 ec 04             	sub    $0x4,%esp
f0120deb:	68 54 a2 13 f0       	push   $0xf013a254
f0120df0:	68 43 06 00 00       	push   $0x643
f0120df5:	68 3a a2 13 f0       	push   $0xf013a23a
f0120dfa:	e8 a7 f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120dff:	e8 c6 af fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120e04:	89 c2                	mov    %eax,%edx
f0120e06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e09:	39 c2                	cmp    %eax,%edx
f0120e0b:	74 17                	je     f0120e24 <test_kfree+0x1f71>
f0120e0d:	83 ec 04             	sub    $0x4,%esp
f0120e10:	68 ec aa 13 f0       	push   $0xf013aaec
f0120e15:	68 44 06 00 00       	push   $0x644
f0120e1a:	68 3a a2 13 f0       	push   $0xf013a23a
f0120e1f:	e8 82 f3 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e24:	e8 a1 af fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120e29:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e2c:	e8 5b 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e31:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0120e34:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120e3a:	83 ec 0c             	sub    $0xc,%esp
f0120e3d:	50                   	push   %eax
f0120e3e:	e8 b3 65 fe ff       	call   f01073f6 <kfree>
f0120e43:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e46:	e8 41 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e4b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e4e:	74 17                	je     f0120e67 <test_kfree+0x1fb4>
f0120e50:	83 ec 04             	sub    $0x4,%esp
f0120e53:	68 54 a2 13 f0       	push   $0xf013a254
f0120e58:	68 4a 06 00 00       	push   $0x64a
f0120e5d:	68 3a a2 13 f0       	push   $0xf013a23a
f0120e62:	e8 3f f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120e67:	e8 5e af fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120e6c:	89 c2                	mov    %eax,%edx
f0120e6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e71:	39 c2                	cmp    %eax,%edx
f0120e73:	74 17                	je     f0120e8c <test_kfree+0x1fd9>
f0120e75:	83 ec 04             	sub    $0x4,%esp
f0120e78:	68 ec aa 13 f0       	push   $0xf013aaec
f0120e7d:	68 4b 06 00 00       	push   $0x64b
f0120e82:	68 3a a2 13 f0       	push   $0xf013a23a
f0120e87:	e8 1a f3 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e8c:	e8 39 af fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120e91:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e94:	e8 f3 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e99:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120e9c:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120ea2:	83 ec 0c             	sub    $0xc,%esp
f0120ea5:	50                   	push   %eax
f0120ea6:	e8 4b 65 fe ff       	call   f01073f6 <kfree>
f0120eab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120eae:	e8 d9 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120eb3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eb6:	74 17                	je     f0120ecf <test_kfree+0x201c>
f0120eb8:	83 ec 04             	sub    $0x4,%esp
f0120ebb:	68 54 a2 13 f0       	push   $0xf013a254
f0120ec0:	68 51 06 00 00       	push   $0x651
f0120ec5:	68 3a a2 13 f0       	push   $0xf013a23a
f0120eca:	e8 d7 f2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120ecf:	e8 f6 ae fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120ed4:	89 c2                	mov    %eax,%edx
f0120ed6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ed9:	39 c2                	cmp    %eax,%edx
f0120edb:	74 17                	je     f0120ef4 <test_kfree+0x2041>
f0120edd:	83 ec 04             	sub    $0x4,%esp
f0120ee0:	68 ec aa 13 f0       	push   $0xf013aaec
f0120ee5:	68 52 06 00 00       	push   $0x652
f0120eea:	68 3a a2 13 f0       	push   $0xf013a23a
f0120eef:	e8 b2 f2 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ef4:	e8 d1 ae fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120ef9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120efc:	e8 8b 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f01:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120f04:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120f0a:	83 ec 0c             	sub    $0xc,%esp
f0120f0d:	50                   	push   %eax
f0120f0e:	e8 e3 64 fe ff       	call   f01073f6 <kfree>
f0120f13:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f16:	e8 71 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f1b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f1e:	74 17                	je     f0120f37 <test_kfree+0x2084>
f0120f20:	83 ec 04             	sub    $0x4,%esp
f0120f23:	68 54 a2 13 f0       	push   $0xf013a254
f0120f28:	68 58 06 00 00       	push   $0x658
f0120f2d:	68 3a a2 13 f0       	push   $0xf013a23a
f0120f32:	e8 6f f2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120f37:	e8 8e ae fe ff       	call   f010bdca <sys_calculate_free_frames>
f0120f3c:	89 c2                	mov    %eax,%edx
f0120f3e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f41:	39 c2                	cmp    %eax,%edx
f0120f43:	74 17                	je     f0120f5c <test_kfree+0x20a9>
f0120f45:	83 ec 04             	sub    $0x4,%esp
f0120f48:	68 ec aa 13 f0       	push   $0xf013aaec
f0120f4d:	68 59 06 00 00       	push   $0x659
f0120f52:	68 3a a2 13 f0       	push   $0xf013a23a
f0120f57:	e8 4a f2 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0120f5c:	83 ec 0c             	sub    $0xc,%esp
f0120f5f:	68 33 ab 13 f0       	push   $0xf013ab33
f0120f64:	e8 c4 fc fd ff       	call   f0100c2d <cprintf>
f0120f69:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120f6c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0120f73:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0120f7a:	eb 48                	jmp    f0120fc4 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0120f7c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0120f7f:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0120f84:	83 ec 04             	sub    $0x4,%esp
f0120f87:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0120f8d:	51                   	push   %ecx
f0120f8e:	52                   	push   %edx
f0120f8f:	50                   	push   %eax
f0120f90:	e8 d4 59 fe ff       	call   f0106969 <get_page_table>
f0120f95:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0120f98:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0120f9e:	85 c0                	test   %eax,%eax
f0120fa0:	75 17                	jne    f0120fb9 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0120fa2:	83 ec 04             	sub    $0x4,%esp
f0120fa5:	68 3c ab 13 f0       	push   $0xf013ab3c
f0120faa:	68 67 06 00 00       	push   $0x667
f0120faf:	68 3a a2 13 f0       	push   $0xf013a23a
f0120fb4:	e8 ed f1 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120fb9:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0120fc0:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0120fc4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120fc8:	78 b2                	js     f0120f7c <test_kfree+0x20c9>
f0120fca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120fce:	7f 09                	jg     f0120fd9 <test_kfree+0x2126>
f0120fd0:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0120fd7:	76 a3                	jbe    f0120f7c <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0120fd9:	83 ec 0c             	sub    $0xc,%esp
f0120fdc:	68 1e a4 13 f0       	push   $0xf013a41e
f0120fe1:	e8 47 fc fd ff       	call   f0100c2d <cprintf>
f0120fe6:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0120fe9:	83 ec 0c             	sub    $0xc,%esp
f0120fec:	68 a4 ab 13 f0       	push   $0xf013aba4
f0120ff1:	e8 37 fc fd ff       	call   f0100c2d <cprintf>
f0120ff6:	83 c4 10             	add    $0x10,%esp

	return 1;
f0120ff9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0120ffe:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121001:	5b                   	pop    %ebx
f0121002:	5f                   	pop    %edi
f0121003:	5d                   	pop    %ebp
f0121004:	c3                   	ret    

f0121005 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121005:	55                   	push   %ebp
f0121006:	89 e5                	mov    %esp,%ebp
f0121008:	57                   	push   %edi
f0121009:	53                   	push   %ebx
f012100a:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121010:	83 ec 0c             	sub    $0xc,%esp
f0121013:	68 7c a1 13 f0       	push   $0xf013a17c
f0121018:	e8 10 fc fd ff       	call   f0100c2d <cprintf>
f012101d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121020:	83 ec 0c             	sub    $0xc,%esp
f0121023:	68 ac a1 13 f0       	push   $0xf013a1ac
f0121028:	e8 00 fc fd ff       	call   f0100c2d <cprintf>
f012102d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121030:	83 ec 0c             	sub    $0xc,%esp
f0121033:	68 7c a1 13 f0       	push   $0xf013a17c
f0121038:	e8 f0 fb fd ff       	call   f0100c2d <cprintf>
f012103d:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121040:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121044:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121048:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012104e:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121054:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012105b:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121062:	e8 63 ad fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121067:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012106a:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121070:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121075:	b8 00 00 00 00       	mov    $0x0,%eax
f012107a:	89 d7                	mov    %edx,%edi
f012107c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012107e:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121084:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121089:	b8 00 00 00 00       	mov    $0x0,%eax
f012108e:	89 d7                	mov    %edx,%edi
f0121090:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121092:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121098:	b9 14 00 00 00       	mov    $0x14,%ecx
f012109d:	b8 00 00 00 00       	mov    $0x0,%eax
f01210a2:	89 d7                	mov    %edx,%edi
f01210a4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01210a6:	e8 1f ad fe ff       	call   f010bdca <sys_calculate_free_frames>
f01210ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210ae:	e8 d9 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01210b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01210b6:	83 ec 0c             	sub    $0xc,%esp
f01210b9:	68 00 fc 1f 00       	push   $0x1ffc00
f01210be:	e8 19 63 fe ff       	call   f01073dc <kmalloc>
f01210c3:	83 c4 10             	add    $0x10,%esp
f01210c6:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01210cc:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01210d2:	89 c1                	mov    %eax,%ecx
f01210d4:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01210db:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01210de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01210e3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01210e6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01210e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01210ee:	f7 75 c8             	divl   -0x38(%ebp)
f01210f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01210f4:	29 d0                	sub    %edx,%eax
f01210f6:	89 c3                	mov    %eax,%ebx
f01210f8:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01210ff:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121104:	0f b6 d0             	movzbl %al,%edx
f0121107:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012110a:	01 d0                	add    %edx,%eax
f012110c:	48                   	dec    %eax
f012110d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121110:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121113:	ba 00 00 00 00       	mov    $0x0,%edx
f0121118:	f7 75 c0             	divl   -0x40(%ebp)
f012111b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012111e:	29 d0                	sub    %edx,%eax
f0121120:	01 c3                	add    %eax,%ebx
f0121122:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121129:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012112e:	0f b6 c0             	movzbl %al,%eax
f0121131:	c1 e0 04             	shl    $0x4,%eax
f0121134:	89 c2                	mov    %eax,%edx
f0121136:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121139:	01 d0                	add    %edx,%eax
f012113b:	48                   	dec    %eax
f012113c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012113f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121142:	ba 00 00 00 00       	mov    $0x0,%edx
f0121147:	f7 75 b8             	divl   -0x48(%ebp)
f012114a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012114d:	29 d0                	sub    %edx,%eax
f012114f:	01 d8                	add    %ebx,%eax
f0121151:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121156:	39 c1                	cmp    %eax,%ecx
f0121158:	74 17                	je     f0121171 <test_kfree_bestfirstfit+0x16c>
f012115a:	83 ec 04             	sub    $0x4,%esp
f012115d:	68 20 a3 13 f0       	push   $0xf013a320
f0121162:	68 95 06 00 00       	push   $0x695
f0121167:	68 3a a2 13 f0       	push   $0xf013a23a
f012116c:	e8 35 f0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121171:	e8 16 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121176:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121179:	74 17                	je     f0121192 <test_kfree_bestfirstfit+0x18d>
f012117b:	83 ec 04             	sub    $0x4,%esp
f012117e:	68 54 a2 13 f0       	push   $0xf013a254
f0121183:	68 96 06 00 00       	push   $0x696
f0121188:	68 3a a2 13 f0       	push   $0xf013a23a
f012118d:	e8 14 f0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121192:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121195:	e8 30 ac fe ff       	call   f010bdca <sys_calculate_free_frames>
f012119a:	29 c3                	sub    %eax,%ebx
f012119c:	89 d8                	mov    %ebx,%eax
f012119e:	3d 00 02 00 00       	cmp    $0x200,%eax
f01211a3:	74 17                	je     f01211bc <test_kfree_bestfirstfit+0x1b7>
f01211a5:	83 ec 04             	sub    $0x4,%esp
f01211a8:	68 bc a2 13 f0       	push   $0xf013a2bc
f01211ad:	68 97 06 00 00       	push   $0x697
f01211b2:	68 3a a2 13 f0       	push   $0xf013a23a
f01211b7:	e8 ea ef fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01211bc:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01211c3:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01211c6:	e8 ff ab fe ff       	call   f010bdca <sys_calculate_free_frames>
f01211cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211ce:	e8 b9 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01211d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01211d6:	83 ec 0c             	sub    $0xc,%esp
f01211d9:	68 00 fc 1f 00       	push   $0x1ffc00
f01211de:	e8 f9 61 fe ff       	call   f01073dc <kmalloc>
f01211e3:	83 c4 10             	add    $0x10,%esp
f01211e6:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211ec:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01211f2:	89 c1                	mov    %eax,%ecx
f01211f4:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01211fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01211fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121203:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121206:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121209:	ba 00 00 00 00       	mov    $0x0,%edx
f012120e:	f7 75 b0             	divl   -0x50(%ebp)
f0121211:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121214:	29 d0                	sub    %edx,%eax
f0121216:	89 c3                	mov    %eax,%ebx
f0121218:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012121f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121224:	0f b6 d0             	movzbl %al,%edx
f0121227:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012122a:	01 d0                	add    %edx,%eax
f012122c:	48                   	dec    %eax
f012122d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121230:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121233:	ba 00 00 00 00       	mov    $0x0,%edx
f0121238:	f7 75 a8             	divl   -0x58(%ebp)
f012123b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012123e:	29 d0                	sub    %edx,%eax
f0121240:	01 c3                	add    %eax,%ebx
f0121242:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121249:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012124e:	0f b6 c0             	movzbl %al,%eax
f0121251:	c1 e0 04             	shl    $0x4,%eax
f0121254:	89 c2                	mov    %eax,%edx
f0121256:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121259:	01 d0                	add    %edx,%eax
f012125b:	48                   	dec    %eax
f012125c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012125f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121262:	ba 00 00 00 00       	mov    $0x0,%edx
f0121267:	f7 75 a0             	divl   -0x60(%ebp)
f012126a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012126d:	29 d0                	sub    %edx,%eax
f012126f:	01 d8                	add    %ebx,%eax
f0121271:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121276:	39 c1                	cmp    %eax,%ecx
f0121278:	74 17                	je     f0121291 <test_kfree_bestfirstfit+0x28c>
f012127a:	83 ec 04             	sub    $0x4,%esp
f012127d:	68 20 a3 13 f0       	push   $0xf013a320
f0121282:	68 9e 06 00 00       	push   $0x69e
f0121287:	68 3a a2 13 f0       	push   $0xf013a23a
f012128c:	e8 15 ef fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121291:	e8 f6 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121296:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121299:	74 17                	je     f01212b2 <test_kfree_bestfirstfit+0x2ad>
f012129b:	83 ec 04             	sub    $0x4,%esp
f012129e:	68 54 a2 13 f0       	push   $0xf013a254
f01212a3:	68 9f 06 00 00       	push   $0x69f
f01212a8:	68 3a a2 13 f0       	push   $0xf013a23a
f01212ad:	e8 f4 ee fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01212b2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01212b5:	e8 10 ab fe ff       	call   f010bdca <sys_calculate_free_frames>
f01212ba:	29 c3                	sub    %eax,%ebx
f01212bc:	89 d8                	mov    %ebx,%eax
f01212be:	3d 00 02 00 00       	cmp    $0x200,%eax
f01212c3:	74 17                	je     f01212dc <test_kfree_bestfirstfit+0x2d7>
f01212c5:	83 ec 04             	sub    $0x4,%esp
f01212c8:	68 bc a2 13 f0       	push   $0xf013a2bc
f01212cd:	68 a0 06 00 00       	push   $0x6a0
f01212d2:	68 3a a2 13 f0       	push   $0xf013a23a
f01212d7:	e8 ca ee fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01212dc:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01212e3:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01212e6:	e8 df aa fe ff       	call   f010bdca <sys_calculate_free_frames>
f01212eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212ee:	e8 99 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01212f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01212f6:	83 ec 0c             	sub    $0xc,%esp
f01212f9:	68 00 08 00 00       	push   $0x800
f01212fe:	e8 d9 60 fe ff       	call   f01073dc <kmalloc>
f0121303:	83 c4 10             	add    $0x10,%esp
f0121306:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012130c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121312:	89 c1                	mov    %eax,%ecx
f0121314:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012131b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012131e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121323:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121326:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121329:	ba 00 00 00 00       	mov    $0x0,%edx
f012132e:	f7 75 98             	divl   -0x68(%ebp)
f0121331:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121334:	29 d0                	sub    %edx,%eax
f0121336:	89 c3                	mov    %eax,%ebx
f0121338:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012133f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121344:	0f b6 d0             	movzbl %al,%edx
f0121347:	8b 45 90             	mov    -0x70(%ebp),%eax
f012134a:	01 d0                	add    %edx,%eax
f012134c:	48                   	dec    %eax
f012134d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121350:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121353:	ba 00 00 00 00       	mov    $0x0,%edx
f0121358:	f7 75 90             	divl   -0x70(%ebp)
f012135b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012135e:	29 d0                	sub    %edx,%eax
f0121360:	01 c3                	add    %eax,%ebx
f0121362:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121369:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012136e:	0f b6 c0             	movzbl %al,%eax
f0121371:	c1 e0 04             	shl    $0x4,%eax
f0121374:	89 c2                	mov    %eax,%edx
f0121376:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121379:	01 d0                	add    %edx,%eax
f012137b:	48                   	dec    %eax
f012137c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012137f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121382:	ba 00 00 00 00       	mov    $0x0,%edx
f0121387:	f7 75 88             	divl   -0x78(%ebp)
f012138a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012138d:	29 d0                	sub    %edx,%eax
f012138f:	01 d8                	add    %ebx,%eax
f0121391:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121396:	39 c1                	cmp    %eax,%ecx
f0121398:	74 17                	je     f01213b1 <test_kfree_bestfirstfit+0x3ac>
f012139a:	83 ec 04             	sub    $0x4,%esp
f012139d:	68 20 a3 13 f0       	push   $0xf013a320
f01213a2:	68 a7 06 00 00       	push   $0x6a7
f01213a7:	68 3a a2 13 f0       	push   $0xf013a23a
f01213ac:	e8 f5 ed fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01213b1:	e8 d6 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01213b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01213b9:	74 17                	je     f01213d2 <test_kfree_bestfirstfit+0x3cd>
f01213bb:	83 ec 04             	sub    $0x4,%esp
f01213be:	68 54 a2 13 f0       	push   $0xf013a254
f01213c3:	68 a8 06 00 00       	push   $0x6a8
f01213c8:	68 3a a2 13 f0       	push   $0xf013a23a
f01213cd:	e8 d4 ed fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01213d2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01213d5:	e8 f0 a9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01213da:	29 c3                	sub    %eax,%ebx
f01213dc:	89 d8                	mov    %ebx,%eax
f01213de:	83 f8 01             	cmp    $0x1,%eax
f01213e1:	74 17                	je     f01213fa <test_kfree_bestfirstfit+0x3f5>
f01213e3:	83 ec 04             	sub    $0x4,%esp
f01213e6:	68 bc a2 13 f0       	push   $0xf013a2bc
f01213eb:	68 a9 06 00 00       	push   $0x6a9
f01213f0:	68 3a a2 13 f0       	push   $0xf013a23a
f01213f5:	e8 ac ed fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01213fa:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121401:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121404:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012140a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012140d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121414:	eb 0e                	jmp    f0121424 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121419:	8b 45 80             	mov    -0x80(%ebp),%eax
f012141c:	01 d0                	add    %edx,%eax
f012141e:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121421:	ff 45 f4             	incl   -0xc(%ebp)
f0121424:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012142a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012142d:	7f e7                	jg     f0121416 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012142f:	e8 96 a9 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121434:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121437:	e8 50 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012143c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012143f:	83 ec 0c             	sub    $0xc,%esp
f0121442:	68 00 08 00 00       	push   $0x800
f0121447:	e8 90 5f fe ff       	call   f01073dc <kmalloc>
f012144c:	83 c4 10             	add    $0x10,%esp
f012144f:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121455:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012145b:	89 c1                	mov    %eax,%ecx
f012145d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121464:	10 00 00 
f0121467:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012146d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121472:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121478:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012147e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121483:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121489:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012148f:	29 d0                	sub    %edx,%eax
f0121491:	89 c3                	mov    %eax,%ebx
f0121493:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012149a:	10 00 00 
f012149d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01214a2:	0f b6 d0             	movzbl %al,%edx
f01214a5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01214ab:	01 d0                	add    %edx,%eax
f01214ad:	48                   	dec    %eax
f01214ae:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01214b4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01214ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01214bf:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01214c5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01214cb:	29 d0                	sub    %edx,%eax
f01214cd:	01 c3                	add    %eax,%ebx
f01214cf:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01214d6:	10 00 00 
f01214d9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01214de:	0f b6 c0             	movzbl %al,%eax
f01214e1:	c1 e0 04             	shl    $0x4,%eax
f01214e4:	89 c2                	mov    %eax,%edx
f01214e6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01214ec:	01 d0                	add    %edx,%eax
f01214ee:	48                   	dec    %eax
f01214ef:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01214f5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01214fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0121500:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121506:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012150c:	29 d0                	sub    %edx,%eax
f012150e:	01 d8                	add    %ebx,%eax
f0121510:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121515:	39 c1                	cmp    %eax,%ecx
f0121517:	74 17                	je     f0121530 <test_kfree_bestfirstfit+0x52b>
f0121519:	83 ec 04             	sub    $0x4,%esp
f012151c:	68 20 a3 13 f0       	push   $0xf013a320
f0121521:	68 b5 06 00 00       	push   $0x6b5
f0121526:	68 3a a2 13 f0       	push   $0xf013a23a
f012152b:	e8 76 ec fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121530:	e8 57 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121535:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121538:	74 17                	je     f0121551 <test_kfree_bestfirstfit+0x54c>
f012153a:	83 ec 04             	sub    $0x4,%esp
f012153d:	68 54 a2 13 f0       	push   $0xf013a254
f0121542:	68 b6 06 00 00       	push   $0x6b6
f0121547:	68 3a a2 13 f0       	push   $0xf013a23a
f012154c:	e8 55 ec fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121551:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121554:	e8 71 a8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121559:	29 c3                	sub    %eax,%ebx
f012155b:	89 d8                	mov    %ebx,%eax
f012155d:	83 f8 01             	cmp    $0x1,%eax
f0121560:	74 17                	je     f0121579 <test_kfree_bestfirstfit+0x574>
f0121562:	83 ec 04             	sub    $0x4,%esp
f0121565:	68 bc a2 13 f0       	push   $0xf013a2bc
f012156a:	68 b7 06 00 00       	push   $0x6b7
f012156f:	68 3a a2 13 f0       	push   $0xf013a23a
f0121574:	e8 2d ec fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121579:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121580:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121583:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121589:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012158c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121593:	eb 0e                	jmp    f01215a3 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121595:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121598:	8b 45 80             	mov    -0x80(%ebp),%eax
f012159b:	01 d0                	add    %edx,%eax
f012159d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01215a0:	ff 45 f4             	incl   -0xc(%ebp)
f01215a3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01215a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01215ac:	7f e7                	jg     f0121595 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01215ae:	e8 17 a8 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01215b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01215b6:	e8 d1 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01215bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01215be:	83 ec 0c             	sub    $0xc,%esp
f01215c1:	68 00 1c 00 00       	push   $0x1c00
f01215c6:	e8 11 5e fe ff       	call   f01073dc <kmalloc>
f01215cb:	83 c4 10             	add    $0x10,%esp
f01215ce:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215d4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01215da:	89 c1                	mov    %eax,%ecx
f01215dc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01215e3:	10 00 00 
f01215e6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01215ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01215f1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01215f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01215fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121602:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121608:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012160e:	29 d0                	sub    %edx,%eax
f0121610:	89 c3                	mov    %eax,%ebx
f0121612:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121619:	10 00 00 
f012161c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121621:	0f b6 d0             	movzbl %al,%edx
f0121624:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012162a:	01 d0                	add    %edx,%eax
f012162c:	48                   	dec    %eax
f012162d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121633:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121639:	ba 00 00 00 00       	mov    $0x0,%edx
f012163e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121644:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012164a:	29 d0                	sub    %edx,%eax
f012164c:	01 c3                	add    %eax,%ebx
f012164e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121655:	10 00 00 
f0121658:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012165d:	0f b6 c0             	movzbl %al,%eax
f0121660:	c1 e0 04             	shl    $0x4,%eax
f0121663:	89 c2                	mov    %eax,%edx
f0121665:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012166b:	01 d0                	add    %edx,%eax
f012166d:	48                   	dec    %eax
f012166e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121674:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012167a:	ba 00 00 00 00       	mov    $0x0,%edx
f012167f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121685:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012168b:	29 d0                	sub    %edx,%eax
f012168d:	01 d8                	add    %ebx,%eax
f012168f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121694:	39 c1                	cmp    %eax,%ecx
f0121696:	74 17                	je     f01216af <test_kfree_bestfirstfit+0x6aa>
f0121698:	83 ec 04             	sub    $0x4,%esp
f012169b:	68 20 a3 13 f0       	push   $0xf013a320
f01216a0:	68 c3 06 00 00       	push   $0x6c3
f01216a5:	68 3a a2 13 f0       	push   $0xf013a23a
f01216aa:	e8 f7 ea fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216af:	e8 d8 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01216b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216b7:	74 17                	je     f01216d0 <test_kfree_bestfirstfit+0x6cb>
f01216b9:	83 ec 04             	sub    $0x4,%esp
f01216bc:	68 54 a2 13 f0       	push   $0xf013a254
f01216c1:	68 c4 06 00 00       	push   $0x6c4
f01216c6:	68 3a a2 13 f0       	push   $0xf013a23a
f01216cb:	e8 d6 ea fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01216d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01216d3:	e8 f2 a6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01216d8:	29 c3                	sub    %eax,%ebx
f01216da:	89 d8                	mov    %ebx,%eax
f01216dc:	83 f8 02             	cmp    $0x2,%eax
f01216df:	74 17                	je     f01216f8 <test_kfree_bestfirstfit+0x6f3>
f01216e1:	83 ec 04             	sub    $0x4,%esp
f01216e4:	68 bc a2 13 f0       	push   $0xf013a2bc
f01216e9:	68 c5 06 00 00       	push   $0x6c5
f01216ee:	68 3a a2 13 f0       	push   $0xf013a23a
f01216f3:	e8 ae ea fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01216f8:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01216ff:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121702:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121708:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012170b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121712:	eb 0e                	jmp    f0121722 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0121714:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121717:	8b 45 80             	mov    -0x80(%ebp),%eax
f012171a:	01 d0                	add    %edx,%eax
f012171c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012171f:	ff 45 f4             	incl   -0xc(%ebp)
f0121722:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121728:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012172b:	7f e7                	jg     f0121714 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012172d:	e8 98 a6 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121732:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121735:	e8 52 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012173a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012173d:	83 ec 0c             	sub    $0xc,%esp
f0121740:	68 00 fc 2f 00       	push   $0x2ffc00
f0121745:	e8 92 5c fe ff       	call   f01073dc <kmalloc>
f012174a:	83 c4 10             	add    $0x10,%esp
f012174d:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121753:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121759:	89 c1                	mov    %eax,%ecx
f012175b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121762:	10 00 00 
f0121765:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012176b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121770:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121776:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012177c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121781:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121787:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012178d:	29 d0                	sub    %edx,%eax
f012178f:	89 c3                	mov    %eax,%ebx
f0121791:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0121798:	10 00 00 
f012179b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01217a0:	0f b6 d0             	movzbl %al,%edx
f01217a3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01217a9:	01 d0                	add    %edx,%eax
f01217ab:	48                   	dec    %eax
f01217ac:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01217b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01217b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01217bd:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01217c3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01217c9:	29 d0                	sub    %edx,%eax
f01217cb:	01 c3                	add    %eax,%ebx
f01217cd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01217d4:	10 00 00 
f01217d7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01217dc:	0f b6 c0             	movzbl %al,%eax
f01217df:	c1 e0 04             	shl    $0x4,%eax
f01217e2:	89 c2                	mov    %eax,%edx
f01217e4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01217ea:	01 d0                	add    %edx,%eax
f01217ec:	48                   	dec    %eax
f01217ed:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01217f3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01217f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01217fe:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121804:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012180a:	29 d0                	sub    %edx,%eax
f012180c:	01 d8                	add    %ebx,%eax
f012180e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121813:	39 c1                	cmp    %eax,%ecx
f0121815:	74 17                	je     f012182e <test_kfree_bestfirstfit+0x829>
f0121817:	83 ec 04             	sub    $0x4,%esp
f012181a:	68 20 a3 13 f0       	push   $0xf013a320
f012181f:	68 d1 06 00 00       	push   $0x6d1
f0121824:	68 3a a2 13 f0       	push   $0xf013a23a
f0121829:	e8 78 e9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012182e:	e8 59 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121833:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121836:	74 17                	je     f012184f <test_kfree_bestfirstfit+0x84a>
f0121838:	83 ec 04             	sub    $0x4,%esp
f012183b:	68 54 a2 13 f0       	push   $0xf013a254
f0121840:	68 d2 06 00 00       	push   $0x6d2
f0121845:	68 3a a2 13 f0       	push   $0xf013a23a
f012184a:	e8 57 e9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012184f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121852:	e8 73 a5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121857:	29 c3                	sub    %eax,%ebx
f0121859:	89 d8                	mov    %ebx,%eax
f012185b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121860:	74 17                	je     f0121879 <test_kfree_bestfirstfit+0x874>
f0121862:	83 ec 04             	sub    $0x4,%esp
f0121865:	68 bc a2 13 f0       	push   $0xf013a2bc
f012186a:	68 d3 06 00 00       	push   $0x6d3
f012186f:	68 3a a2 13 f0       	push   $0xf013a23a
f0121874:	e8 2d e9 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121879:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0121880:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121883:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121889:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012188c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121893:	eb 0e                	jmp    f01218a3 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0121895:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121898:	8b 45 80             	mov    -0x80(%ebp),%eax
f012189b:	01 d0                	add    %edx,%eax
f012189d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01218a0:	ff 45 f4             	incl   -0xc(%ebp)
f01218a3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01218a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01218ac:	7f e7                	jg     f0121895 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01218ae:	e8 17 a5 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01218b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218b6:	e8 d1 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01218bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01218be:	83 ec 0c             	sub    $0xc,%esp
f01218c1:	68 00 fc 5f 00       	push   $0x5ffc00
f01218c6:	e8 11 5b fe ff       	call   f01073dc <kmalloc>
f01218cb:	83 c4 10             	add    $0x10,%esp
f01218ce:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218d4:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01218da:	89 c1                	mov    %eax,%ecx
f01218dc:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01218e3:	10 00 00 
f01218e6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01218ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01218f1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01218f7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01218fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121902:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0121908:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012190e:	29 d0                	sub    %edx,%eax
f0121910:	89 c3                	mov    %eax,%ebx
f0121912:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0121919:	10 00 00 
f012191c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121921:	0f b6 d0             	movzbl %al,%edx
f0121924:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012192a:	01 d0                	add    %edx,%eax
f012192c:	48                   	dec    %eax
f012192d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121933:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121939:	ba 00 00 00 00       	mov    $0x0,%edx
f012193e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121944:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012194a:	29 d0                	sub    %edx,%eax
f012194c:	01 c3                	add    %eax,%ebx
f012194e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121955:	10 00 00 
f0121958:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012195d:	0f b6 c0             	movzbl %al,%eax
f0121960:	c1 e0 04             	shl    $0x4,%eax
f0121963:	89 c2                	mov    %eax,%edx
f0121965:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012196b:	01 d0                	add    %edx,%eax
f012196d:	48                   	dec    %eax
f012196e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0121974:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012197a:	ba 00 00 00 00       	mov    $0x0,%edx
f012197f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0121985:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012198b:	29 d0                	sub    %edx,%eax
f012198d:	01 d8                	add    %ebx,%eax
f012198f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121994:	39 c1                	cmp    %eax,%ecx
f0121996:	74 17                	je     f01219af <test_kfree_bestfirstfit+0x9aa>
f0121998:	83 ec 04             	sub    $0x4,%esp
f012199b:	68 20 a3 13 f0       	push   $0xf013a320
f01219a0:	68 df 06 00 00       	push   $0x6df
f01219a5:	68 3a a2 13 f0       	push   $0xf013a23a
f01219aa:	e8 f7 e7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219af:	e8 d8 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01219b4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219b7:	74 17                	je     f01219d0 <test_kfree_bestfirstfit+0x9cb>
f01219b9:	83 ec 04             	sub    $0x4,%esp
f01219bc:	68 54 a2 13 f0       	push   $0xf013a254
f01219c1:	68 e0 06 00 00       	push   $0x6e0
f01219c6:	68 3a a2 13 f0       	push   $0xf013a23a
f01219cb:	e8 d6 e7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219d3:	e8 f2 a3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01219d8:	29 c3                	sub    %eax,%ebx
f01219da:	89 d8                	mov    %ebx,%eax
f01219dc:	3d 00 06 00 00       	cmp    $0x600,%eax
f01219e1:	74 17                	je     f01219fa <test_kfree_bestfirstfit+0x9f5>
f01219e3:	83 ec 04             	sub    $0x4,%esp
f01219e6:	68 bc a2 13 f0       	push   $0xf013a2bc
f01219eb:	68 e1 06 00 00       	push   $0x6e1
f01219f0:	68 3a a2 13 f0       	push   $0xf013a23a
f01219f5:	e8 ac e7 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01219fa:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0121a01:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121a04:	e8 c1 a3 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121a09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a0c:	e8 7b 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121a11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121a14:	83 ec 0c             	sub    $0xc,%esp
f0121a17:	68 00 38 00 00       	push   $0x3800
f0121a1c:	e8 bb 59 fe ff       	call   f01073dc <kmalloc>
f0121a21:	83 c4 10             	add    $0x10,%esp
f0121a24:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a2a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121a30:	89 c1                	mov    %eax,%ecx
f0121a32:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121a39:	10 00 00 
f0121a3c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121a42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a47:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0121a4d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121a53:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a58:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0121a5e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121a64:	29 d0                	sub    %edx,%eax
f0121a66:	89 c3                	mov    %eax,%ebx
f0121a68:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0121a6f:	10 00 00 
f0121a72:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121a77:	0f b6 d0             	movzbl %al,%edx
f0121a7a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0121a80:	01 d0                	add    %edx,%eax
f0121a82:	48                   	dec    %eax
f0121a83:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121a89:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121a8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a94:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121a9a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121aa0:	29 d0                	sub    %edx,%eax
f0121aa2:	01 c3                	add    %eax,%ebx
f0121aa4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0121aab:	10 00 00 
f0121aae:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121ab3:	0f b6 c0             	movzbl %al,%eax
f0121ab6:	c1 e0 04             	shl    $0x4,%eax
f0121ab9:	89 c2                	mov    %eax,%edx
f0121abb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121ac1:	01 d0                	add    %edx,%eax
f0121ac3:	48                   	dec    %eax
f0121ac4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0121aca:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121ad0:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ad5:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0121adb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121ae1:	29 d0                	sub    %edx,%eax
f0121ae3:	01 d8                	add    %ebx,%eax
f0121ae5:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121aea:	39 c1                	cmp    %eax,%ecx
f0121aec:	74 17                	je     f0121b05 <test_kfree_bestfirstfit+0xb00>
f0121aee:	83 ec 04             	sub    $0x4,%esp
f0121af1:	68 20 a3 13 f0       	push   $0xf013a320
f0121af6:	68 e8 06 00 00       	push   $0x6e8
f0121afb:	68 3a a2 13 f0       	push   $0xf013a23a
f0121b00:	e8 a1 e6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b05:	e8 82 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121b0a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b0d:	74 17                	je     f0121b26 <test_kfree_bestfirstfit+0xb21>
f0121b0f:	83 ec 04             	sub    $0x4,%esp
f0121b12:	68 54 a2 13 f0       	push   $0xf013a254
f0121b17:	68 e9 06 00 00       	push   $0x6e9
f0121b1c:	68 3a a2 13 f0       	push   $0xf013a23a
f0121b21:	e8 80 e6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b26:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b29:	e8 9c a2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121b2e:	29 c3                	sub    %eax,%ebx
f0121b30:	89 d8                	mov    %ebx,%eax
f0121b32:	83 f8 04             	cmp    $0x4,%eax
f0121b35:	74 17                	je     f0121b4e <test_kfree_bestfirstfit+0xb49>
f0121b37:	83 ec 04             	sub    $0x4,%esp
f0121b3a:	68 bc a2 13 f0       	push   $0xf013a2bc
f0121b3f:	68 ea 06 00 00       	push   $0x6ea
f0121b44:	68 3a a2 13 f0       	push   $0xf013a23a
f0121b49:	e8 58 e6 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121b4e:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0121b55:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121b58:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121b5e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121b61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b68:	eb 0e                	jmp    f0121b78 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0121b6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b6d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b70:	01 d0                	add    %edx,%eax
f0121b72:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121b75:	ff 45 f4             	incl   -0xc(%ebp)
f0121b78:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b81:	7f e7                	jg     f0121b6a <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121b83:	e8 42 a2 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121b88:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121b8e:	e8 f9 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121b93:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121b99:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121b9f:	83 ec 0c             	sub    $0xc,%esp
f0121ba2:	50                   	push   %eax
f0121ba3:	e8 4e 58 fe ff       	call   f01073f6 <kfree>
f0121ba8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bab:	e8 dc 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121bb0:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121bb6:	74 17                	je     f0121bcf <test_kfree_bestfirstfit+0xbca>
f0121bb8:	83 ec 04             	sub    $0x4,%esp
f0121bbb:	68 54 a2 13 f0       	push   $0xf013a254
f0121bc0:	68 f9 06 00 00       	push   $0x6f9
f0121bc5:	68 3a a2 13 f0       	push   $0xf013a23a
f0121bca:	e8 d7 e5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121bcf:	e8 f6 a1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121bd4:	89 c2                	mov    %eax,%edx
f0121bd6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121bdc:	29 c2                	sub    %eax,%edx
f0121bde:	89 d0                	mov    %edx,%eax
f0121be0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121be5:	74 17                	je     f0121bfe <test_kfree_bestfirstfit+0xbf9>
f0121be7:	83 ec 04             	sub    $0x4,%esp
f0121bea:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0121bef:	68 fa 06 00 00       	push   $0x6fa
f0121bf4:	68 3a a2 13 f0       	push   $0xf013a23a
f0121bf9:	e8 a8 e5 fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121bfe:	e8 c7 a1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121c03:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c09:	e8 7e 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c0e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0121c14:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121c1a:	83 ec 0c             	sub    $0xc,%esp
f0121c1d:	50                   	push   %eax
f0121c1e:	e8 d3 57 fe ff       	call   f01073f6 <kfree>
f0121c23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c26:	e8 61 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c2b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121c31:	74 17                	je     f0121c4a <test_kfree_bestfirstfit+0xc45>
f0121c33:	83 ec 04             	sub    $0x4,%esp
f0121c36:	68 54 a2 13 f0       	push   $0xf013a254
f0121c3b:	68 00 07 00 00       	push   $0x700
f0121c40:	68 3a a2 13 f0       	push   $0xf013a23a
f0121c45:	e8 5c e5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c4a:	e8 7b a1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121c4f:	89 c2                	mov    %eax,%edx
f0121c51:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121c57:	29 c2                	sub    %eax,%edx
f0121c59:	89 d0                	mov    %edx,%eax
f0121c5b:	83 f8 01             	cmp    $0x1,%eax
f0121c5e:	74 17                	je     f0121c77 <test_kfree_bestfirstfit+0xc72>
f0121c60:	83 ec 04             	sub    $0x4,%esp
f0121c63:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0121c68:	68 01 07 00 00       	push   $0x701
f0121c6d:	68 3a a2 13 f0       	push   $0xf013a23a
f0121c72:	e8 2f e5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c77:	e8 4e a1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121c7c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c82:	e8 05 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c87:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0121c8d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121c93:	83 ec 0c             	sub    $0xc,%esp
f0121c96:	50                   	push   %eax
f0121c97:	e8 5a 57 fe ff       	call   f01073f6 <kfree>
f0121c9c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c9f:	e8 e8 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ca4:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121caa:	74 17                	je     f0121cc3 <test_kfree_bestfirstfit+0xcbe>
f0121cac:	83 ec 04             	sub    $0x4,%esp
f0121caf:	68 54 a2 13 f0       	push   $0xf013a254
f0121cb4:	68 07 07 00 00       	push   $0x707
f0121cb9:	68 3a a2 13 f0       	push   $0xf013a23a
f0121cbe:	e8 e3 e4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121cc3:	e8 02 a1 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121cc8:	89 c2                	mov    %eax,%edx
f0121cca:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121cd0:	29 c2                	sub    %eax,%edx
f0121cd2:	89 d0                	mov    %edx,%eax
f0121cd4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121cd9:	74 17                	je     f0121cf2 <test_kfree_bestfirstfit+0xced>
f0121cdb:	83 ec 04             	sub    $0x4,%esp
f0121cde:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0121ce3:	68 08 07 00 00       	push   $0x708
f0121ce8:	68 3a a2 13 f0       	push   $0xf013a23a
f0121ced:	e8 b4 e4 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121cf2:	e8 d3 a0 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121cf7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cfd:	e8 8a 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121d02:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0121d08:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0121d0e:	83 ec 0c             	sub    $0xc,%esp
f0121d11:	50                   	push   %eax
f0121d12:	e8 df 56 fe ff       	call   f01073f6 <kfree>
f0121d17:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d1a:	e8 6d 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121d1f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121d25:	74 17                	je     f0121d3e <test_kfree_bestfirstfit+0xd39>
f0121d27:	83 ec 04             	sub    $0x4,%esp
f0121d2a:	68 54 a2 13 f0       	push   $0xf013a254
f0121d2f:	68 0e 07 00 00       	push   $0x70e
f0121d34:	68 3a a2 13 f0       	push   $0xf013a23a
f0121d39:	e8 68 e4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d3e:	e8 87 a0 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121d43:	89 c2                	mov    %eax,%edx
f0121d45:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121d4b:	29 c2                	sub    %eax,%edx
f0121d4d:	89 d0                	mov    %edx,%eax
f0121d4f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121d54:	74 17                	je     f0121d6d <test_kfree_bestfirstfit+0xd68>
f0121d56:	83 ec 04             	sub    $0x4,%esp
f0121d59:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0121d5e:	68 0f 07 00 00       	push   $0x70f
f0121d63:	68 3a a2 13 f0       	push   $0xf013a23a
f0121d68:	e8 39 e4 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121d6d:	83 ec 0c             	sub    $0xc,%esp
f0121d70:	68 fc a9 13 f0       	push   $0xf013a9fc
f0121d75:	e8 b3 ee fd ff       	call   f0100c2d <cprintf>
f0121d7a:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121d7d:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121d83:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121d86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d8d:	eb 1e                	jmp    f0121dad <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0121d8f:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0121d95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121d98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d9b:	01 c8                	add    %ecx,%eax
f0121d9d:	8a 00                	mov    (%eax),%al
f0121d9f:	0f be c0             	movsbl %al,%eax
f0121da2:	01 d0                	add    %edx,%eax
f0121da4:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121daa:	ff 45 f4             	incl   -0xc(%ebp)
f0121dad:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121db3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121db6:	7f d7                	jg     f0121d8f <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121db8:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0121dbe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121dc4:	89 c1                	mov    %eax,%ecx
f0121dc6:	01 c9                	add    %ecx,%ecx
f0121dc8:	01 c8                	add    %ecx,%eax
f0121dca:	39 c2                	cmp    %eax,%edx
f0121dcc:	74 17                	je     f0121de5 <test_kfree_bestfirstfit+0xde0>
f0121dce:	83 ec 04             	sub    $0x4,%esp
f0121dd1:	68 20 aa 13 f0       	push   $0xf013aa20
f0121dd6:	68 1c 07 00 00       	push   $0x71c
f0121ddb:	68 3a a2 13 f0       	push   $0xf013a23a
f0121de0:	e8 c1 e3 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121de5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121deb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121df5:	eb 1e                	jmp    f0121e15 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0121df7:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0121dfd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121e00:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121e03:	01 c8                	add    %ecx,%eax
f0121e05:	8a 00                	mov    (%eax),%al
f0121e07:	0f be c0             	movsbl %al,%eax
f0121e0a:	01 d0                	add    %edx,%eax
f0121e0c:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121e12:	ff 45 f4             	incl   -0xc(%ebp)
f0121e15:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121e1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121e1e:	7f d7                	jg     f0121df7 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121e20:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121e26:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0121e2c:	c1 e2 02             	shl    $0x2,%edx
f0121e2f:	39 d0                	cmp    %edx,%eax
f0121e31:	74 17                	je     f0121e4a <test_kfree_bestfirstfit+0xe45>
f0121e33:	83 ec 04             	sub    $0x4,%esp
f0121e36:	68 20 aa 13 f0       	push   $0xf013aa20
f0121e3b:	68 24 07 00 00       	push   $0x724
f0121e40:	68 3a a2 13 f0       	push   $0xf013a23a
f0121e45:	e8 5c e3 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121e4a:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121e50:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121e53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121e5a:	eb 1e                	jmp    f0121e7a <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0121e5c:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0121e62:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121e65:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121e68:	01 c8                	add    %ecx,%eax
f0121e6a:	8a 00                	mov    (%eax),%al
f0121e6c:	0f be c0             	movsbl %al,%eax
f0121e6f:	01 d0                	add    %edx,%eax
f0121e71:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121e77:	ff 45 f4             	incl   -0xc(%ebp)
f0121e7a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121e80:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121e83:	7f d7                	jg     f0121e5c <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121e85:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0121e8b:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121e91:	89 d0                	mov    %edx,%eax
f0121e93:	c1 e0 02             	shl    $0x2,%eax
f0121e96:	01 d0                	add    %edx,%eax
f0121e98:	39 c1                	cmp    %eax,%ecx
f0121e9a:	74 17                	je     f0121eb3 <test_kfree_bestfirstfit+0xeae>
f0121e9c:	83 ec 04             	sub    $0x4,%esp
f0121e9f:	68 20 aa 13 f0       	push   $0xf013aa20
f0121ea4:	68 2c 07 00 00       	push   $0x72c
f0121ea9:	68 3a a2 13 f0       	push   $0xf013a23a
f0121eae:	e8 f3 e2 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121eb3:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121eb9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121ebc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ec3:	eb 1e                	jmp    f0121ee3 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0121ec5:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0121ecb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121ece:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ed1:	01 c8                	add    %ecx,%eax
f0121ed3:	8a 00                	mov    (%eax),%al
f0121ed5:	0f be c0             	movsbl %al,%eax
f0121ed8:	01 d0                	add    %edx,%eax
f0121eda:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121ee0:	ff 45 f4             	incl   -0xc(%ebp)
f0121ee3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121ee9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121eec:	7f d7                	jg     f0121ec5 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0121eee:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0121ef4:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0121efa:	89 d0                	mov    %edx,%eax
f0121efc:	01 c0                	add    %eax,%eax
f0121efe:	01 d0                	add    %edx,%eax
f0121f00:	01 c0                	add    %eax,%eax
f0121f02:	01 d0                	add    %edx,%eax
f0121f04:	39 c1                	cmp    %eax,%ecx
f0121f06:	74 17                	je     f0121f1f <test_kfree_bestfirstfit+0xf1a>
f0121f08:	83 ec 04             	sub    $0x4,%esp
f0121f0b:	68 20 aa 13 f0       	push   $0xf013aa20
f0121f10:	68 34 07 00 00       	push   $0x734
f0121f15:	68 3a a2 13 f0       	push   $0xf013a23a
f0121f1a:	e8 87 e2 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f0121f1f:	83 ec 0c             	sub    $0xc,%esp
f0121f22:	68 53 aa 13 f0       	push   $0xf013aa53
f0121f27:	e8 01 ed fd ff       	call   f0100c2d <cprintf>
f0121f2c:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f2f:	e8 96 9e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0121f34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f37:	e8 50 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121f3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0121f3f:	83 ec 0c             	sub    $0xc,%esp
f0121f42:	68 00 00 30 00       	push   $0x300000
f0121f47:	e8 90 54 fe ff       	call   f01073dc <kmalloc>
f0121f4c:	83 c4 10             	add    $0x10,%esp
f0121f4f:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f55:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0121f5b:	89 c1                	mov    %eax,%ecx
f0121f5d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121f64:	10 00 00 
f0121f67:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121f6d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f72:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121f78:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121f7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f83:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121f89:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121f8f:	29 d0                	sub    %edx,%eax
f0121f91:	89 c3                	mov    %eax,%ebx
f0121f93:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121f9a:	10 00 00 
f0121f9d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121fa2:	0f b6 d0             	movzbl %al,%edx
f0121fa5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121fab:	01 d0                	add    %edx,%eax
f0121fad:	48                   	dec    %eax
f0121fae:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0121fb4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121fba:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fbf:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0121fc5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121fcb:	29 d0                	sub    %edx,%eax
f0121fcd:	01 c3                	add    %eax,%ebx
f0121fcf:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0121fd6:	10 00 00 
f0121fd9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121fde:	0f b6 c0             	movzbl %al,%eax
f0121fe1:	c1 e0 04             	shl    $0x4,%eax
f0121fe4:	89 c2                	mov    %eax,%edx
f0121fe6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0121fec:	01 d0                	add    %edx,%eax
f0121fee:	48                   	dec    %eax
f0121fef:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0121ff5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0121ffb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122000:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122006:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012200c:	29 d0                	sub    %edx,%eax
f012200e:	01 d8                	add    %ebx,%eax
f0122010:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122015:	39 c1                	cmp    %eax,%ecx
f0122017:	74 17                	je     f0122030 <test_kfree_bestfirstfit+0x102b>
f0122019:	83 ec 04             	sub    $0x4,%esp
f012201c:	68 20 a3 13 f0       	push   $0xf013a320
f0122021:	68 3f 07 00 00       	push   $0x73f
f0122026:	68 3a a2 13 f0       	push   $0xf013a23a
f012202b:	e8 76 e1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122030:	e8 57 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122035:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122038:	74 17                	je     f0122051 <test_kfree_bestfirstfit+0x104c>
f012203a:	83 ec 04             	sub    $0x4,%esp
f012203d:	68 54 a2 13 f0       	push   $0xf013a254
f0122042:	68 40 07 00 00       	push   $0x740
f0122047:	68 3a a2 13 f0       	push   $0xf013a23a
f012204c:	e8 55 e1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122051:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122054:	e8 71 9d fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122059:	29 c3                	sub    %eax,%ebx
f012205b:	89 d8                	mov    %ebx,%eax
f012205d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122062:	74 17                	je     f012207b <test_kfree_bestfirstfit+0x1076>
f0122064:	83 ec 04             	sub    $0x4,%esp
f0122067:	68 bc a2 13 f0       	push   $0xf013a2bc
f012206c:	68 41 07 00 00       	push   $0x741
f0122071:	68 3a a2 13 f0       	push   $0xf013a23a
f0122076:	e8 2b e1 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012207b:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122082:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122085:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012208b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012208e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122095:	eb 0e                	jmp    f01220a5 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122097:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012209a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012209d:	01 d0                	add    %edx,%eax
f012209f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01220a2:	ff 45 f4             	incl   -0xc(%ebp)
f01220a5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01220ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01220ae:	7f e7                	jg     f0122097 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01220b0:	e8 15 9d fe ff       	call   f010bdca <sys_calculate_free_frames>
f01220b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220b8:	e8 cf 1b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01220bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01220c0:	83 ec 0c             	sub    $0xc,%esp
f01220c3:	68 00 08 00 00       	push   $0x800
f01220c8:	e8 0f 53 fe ff       	call   f01073dc <kmalloc>
f01220cd:	83 c4 10             	add    $0x10,%esp
f01220d0:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01220d6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01220dc:	89 c1                	mov    %eax,%ecx
f01220de:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01220e5:	10 00 00 
f01220e8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01220ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220f3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01220f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01220ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0122104:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012210a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122110:	29 d0                	sub    %edx,%eax
f0122112:	89 c3                	mov    %eax,%ebx
f0122114:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012211b:	10 00 00 
f012211e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122123:	0f b6 d0             	movzbl %al,%edx
f0122126:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012212c:	01 d0                	add    %edx,%eax
f012212e:	48                   	dec    %eax
f012212f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122135:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012213b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122140:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122146:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012214c:	29 d0                	sub    %edx,%eax
f012214e:	01 c3                	add    %eax,%ebx
f0122150:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122157:	10 00 00 
f012215a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012215f:	0f b6 c0             	movzbl %al,%eax
f0122162:	c1 e0 04             	shl    $0x4,%eax
f0122165:	89 c2                	mov    %eax,%edx
f0122167:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012216d:	01 d0                	add    %edx,%eax
f012216f:	48                   	dec    %eax
f0122170:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122176:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012217c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122181:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122187:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012218d:	29 d0                	sub    %edx,%eax
f012218f:	01 d8                	add    %ebx,%eax
f0122191:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122196:	39 c1                	cmp    %eax,%ecx
f0122198:	74 17                	je     f01221b1 <test_kfree_bestfirstfit+0x11ac>
f012219a:	83 ec 04             	sub    $0x4,%esp
f012219d:	68 20 a3 13 f0       	push   $0xf013a320
f01221a2:	68 4d 07 00 00       	push   $0x74d
f01221a7:	68 3a a2 13 f0       	push   $0xf013a23a
f01221ac:	e8 f5 df fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221b1:	e8 d6 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01221b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221b9:	74 17                	je     f01221d2 <test_kfree_bestfirstfit+0x11cd>
f01221bb:	83 ec 04             	sub    $0x4,%esp
f01221be:	68 54 a2 13 f0       	push   $0xf013a254
f01221c3:	68 4e 07 00 00       	push   $0x74e
f01221c8:	68 3a a2 13 f0       	push   $0xf013a23a
f01221cd:	e8 d4 df fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01221d2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01221d5:	e8 f0 9b fe ff       	call   f010bdca <sys_calculate_free_frames>
f01221da:	29 c3                	sub    %eax,%ebx
f01221dc:	89 d8                	mov    %ebx,%eax
f01221de:	83 f8 01             	cmp    $0x1,%eax
f01221e1:	74 17                	je     f01221fa <test_kfree_bestfirstfit+0x11f5>
f01221e3:	83 ec 04             	sub    $0x4,%esp
f01221e6:	68 bc a2 13 f0       	push   $0xf013a2bc
f01221eb:	68 4f 07 00 00       	push   $0x74f
f01221f0:	68 3a a2 13 f0       	push   $0xf013a23a
f01221f5:	e8 ac df fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01221fa:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122201:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122204:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012220a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012220d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122214:	eb 0e                	jmp    f0122224 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0122216:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122219:	8b 45 80             	mov    -0x80(%ebp),%eax
f012221c:	01 d0                	add    %edx,%eax
f012221e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122221:	ff 45 f4             	incl   -0xc(%ebp)
f0122224:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012222a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012222d:	7f e7                	jg     f0122216 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012222f:	e8 96 9b fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122234:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122237:	e8 50 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012223c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012223f:	83 ec 0c             	sub    $0xc,%esp
f0122242:	68 00 00 10 00       	push   $0x100000
f0122247:	e8 90 51 fe ff       	call   f01073dc <kmalloc>
f012224c:	83 c4 10             	add    $0x10,%esp
f012224f:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122255:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012225b:	89 c1                	mov    %eax,%ecx
f012225d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122264:	10 00 00 
f0122267:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012226d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122272:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122278:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012227e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122283:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122289:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012228f:	29 d0                	sub    %edx,%eax
f0122291:	89 c3                	mov    %eax,%ebx
f0122293:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012229a:	10 00 00 
f012229d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01222a2:	0f b6 d0             	movzbl %al,%edx
f01222a5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01222ab:	01 d0                	add    %edx,%eax
f01222ad:	48                   	dec    %eax
f01222ae:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01222b4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01222ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01222bf:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01222c5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01222cb:	29 d0                	sub    %edx,%eax
f01222cd:	01 c3                	add    %eax,%ebx
f01222cf:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01222d6:	10 00 00 
f01222d9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01222de:	0f b6 c0             	movzbl %al,%eax
f01222e1:	c1 e0 04             	shl    $0x4,%eax
f01222e4:	89 c2                	mov    %eax,%edx
f01222e6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01222ec:	01 d0                	add    %edx,%eax
f01222ee:	48                   	dec    %eax
f01222ef:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01222f5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01222fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122300:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122306:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012230c:	29 d0                	sub    %edx,%eax
f012230e:	01 d8                	add    %ebx,%eax
f0122310:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122315:	39 c1                	cmp    %eax,%ecx
f0122317:	74 17                	je     f0122330 <test_kfree_bestfirstfit+0x132b>
f0122319:	83 ec 04             	sub    $0x4,%esp
f012231c:	68 20 a3 13 f0       	push   $0xf013a320
f0122321:	68 5b 07 00 00       	push   $0x75b
f0122326:	68 3a a2 13 f0       	push   $0xf013a23a
f012232b:	e8 76 de fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122330:	e8 57 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122335:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122338:	74 17                	je     f0122351 <test_kfree_bestfirstfit+0x134c>
f012233a:	83 ec 04             	sub    $0x4,%esp
f012233d:	68 54 a2 13 f0       	push   $0xf013a254
f0122342:	68 5c 07 00 00       	push   $0x75c
f0122347:	68 3a a2 13 f0       	push   $0xf013a23a
f012234c:	e8 55 de fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122351:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122354:	e8 71 9a fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122359:	29 c3                	sub    %eax,%ebx
f012235b:	89 d8                	mov    %ebx,%eax
f012235d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122362:	74 17                	je     f012237b <test_kfree_bestfirstfit+0x1376>
f0122364:	83 ec 04             	sub    $0x4,%esp
f0122367:	68 bc a2 13 f0       	push   $0xf013a2bc
f012236c:	68 5d 07 00 00       	push   $0x75d
f0122371:	68 3a a2 13 f0       	push   $0xf013a23a
f0122376:	e8 2b de fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f012237b:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122382:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122385:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012238b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012238e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122395:	eb 0e                	jmp    f01223a5 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122397:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012239a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012239d:	01 d0                	add    %edx,%eax
f012239f:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01223a2:	ff 45 f4             	incl   -0xc(%ebp)
f01223a5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01223ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01223ae:	7f e7                	jg     f0122397 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01223b0:	83 ec 0c             	sub    $0xc,%esp
f01223b3:	68 5a aa 13 f0       	push   $0xf013aa5a
f01223b8:	e8 70 e8 fd ff       	call   f0100c2d <cprintf>
f01223bd:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01223c0:	e8 05 9a fe ff       	call   f010bdca <sys_calculate_free_frames>
f01223c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223c8:	e8 bf 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01223d0:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01223d6:	83 ec 0c             	sub    $0xc,%esp
f01223d9:	50                   	push   %eax
f01223da:	e8 17 50 fe ff       	call   f01073f6 <kfree>
f01223df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223e2:	e8 a5 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223ea:	74 17                	je     f0122403 <test_kfree_bestfirstfit+0x13fe>
f01223ec:	83 ec 04             	sub    $0x4,%esp
f01223ef:	68 54 a2 13 f0       	push   $0xf013a254
f01223f4:	68 6d 07 00 00       	push   $0x76d
f01223f9:	68 3a a2 13 f0       	push   $0xf013a23a
f01223fe:	e8 a3 dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122403:	e8 c2 99 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122408:	89 c2                	mov    %eax,%edx
f012240a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012240d:	29 c2                	sub    %eax,%edx
f012240f:	89 d0                	mov    %edx,%eax
f0122411:	83 f8 02             	cmp    $0x2,%eax
f0122414:	74 17                	je     f012242d <test_kfree_bestfirstfit+0x1428>
f0122416:	83 ec 04             	sub    $0x4,%esp
f0122419:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012241e:	68 6e 07 00 00       	push   $0x76e
f0122423:	68 3a a2 13 f0       	push   $0xf013a23a
f0122428:	e8 79 dd fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012242d:	e8 98 99 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122432:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122435:	e8 52 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012243a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012243d:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122443:	83 ec 0c             	sub    $0xc,%esp
f0122446:	50                   	push   %eax
f0122447:	e8 aa 4f fe ff       	call   f01073f6 <kfree>
f012244c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012244f:	e8 38 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122454:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122457:	74 17                	je     f0122470 <test_kfree_bestfirstfit+0x146b>
f0122459:	83 ec 04             	sub    $0x4,%esp
f012245c:	68 54 a2 13 f0       	push   $0xf013a254
f0122461:	68 74 07 00 00       	push   $0x774
f0122466:	68 3a a2 13 f0       	push   $0xf013a23a
f012246b:	e8 36 dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122470:	e8 55 99 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122475:	89 c2                	mov    %eax,%edx
f0122477:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012247a:	29 c2                	sub    %eax,%edx
f012247c:	89 d0                	mov    %edx,%eax
f012247e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122483:	74 17                	je     f012249c <test_kfree_bestfirstfit+0x1497>
f0122485:	83 ec 04             	sub    $0x4,%esp
f0122488:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012248d:	68 75 07 00 00       	push   $0x775
f0122492:	68 3a a2 13 f0       	push   $0xf013a23a
f0122497:	e8 0a dd fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012249c:	e8 29 99 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01224a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224a4:	e8 e3 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01224a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01224ac:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01224b2:	83 ec 0c             	sub    $0xc,%esp
f01224b5:	50                   	push   %eax
f01224b6:	e8 3b 4f fe ff       	call   f01073f6 <kfree>
f01224bb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224be:	e8 c9 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01224c3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224c6:	74 17                	je     f01224df <test_kfree_bestfirstfit+0x14da>
f01224c8:	83 ec 04             	sub    $0x4,%esp
f01224cb:	68 54 a2 13 f0       	push   $0xf013a254
f01224d0:	68 7b 07 00 00       	push   $0x77b
f01224d5:	68 3a a2 13 f0       	push   $0xf013a23a
f01224da:	e8 c7 dc fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01224df:	e8 e6 98 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01224e4:	89 c2                	mov    %eax,%edx
f01224e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01224e9:	29 c2                	sub    %eax,%edx
f01224eb:	89 d0                	mov    %edx,%eax
f01224ed:	83 f8 01             	cmp    $0x1,%eax
f01224f0:	74 17                	je     f0122509 <test_kfree_bestfirstfit+0x1504>
f01224f2:	83 ec 04             	sub    $0x4,%esp
f01224f5:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01224fa:	68 7c 07 00 00       	push   $0x77c
f01224ff:	68 3a a2 13 f0       	push   $0xf013a23a
f0122504:	e8 9d dc fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122509:	e8 bc 98 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012250e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122511:	e8 76 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122516:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122519:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012251f:	83 ec 0c             	sub    $0xc,%esp
f0122522:	50                   	push   %eax
f0122523:	e8 ce 4e fe ff       	call   f01073f6 <kfree>
f0122528:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012252b:	e8 5c 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122530:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122533:	74 17                	je     f012254c <test_kfree_bestfirstfit+0x1547>
f0122535:	83 ec 04             	sub    $0x4,%esp
f0122538:	68 54 a2 13 f0       	push   $0xf013a254
f012253d:	68 82 07 00 00       	push   $0x782
f0122542:	68 3a a2 13 f0       	push   $0xf013a23a
f0122547:	e8 5a dc fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012254c:	e8 79 98 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122551:	89 c2                	mov    %eax,%edx
f0122553:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122556:	29 c2                	sub    %eax,%edx
f0122558:	89 d0                	mov    %edx,%eax
f012255a:	83 f8 04             	cmp    $0x4,%eax
f012255d:	74 17                	je     f0122576 <test_kfree_bestfirstfit+0x1571>
f012255f:	83 ec 04             	sub    $0x4,%esp
f0122562:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0122567:	68 83 07 00 00       	push   $0x783
f012256c:	68 3a a2 13 f0       	push   $0xf013a23a
f0122571:	e8 30 dc fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122576:	e8 4f 98 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012257b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012257e:	e8 09 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122583:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122586:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012258c:	83 ec 0c             	sub    $0xc,%esp
f012258f:	50                   	push   %eax
f0122590:	e8 61 4e fe ff       	call   f01073f6 <kfree>
f0122595:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122598:	e8 ef 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012259d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225a0:	74 17                	je     f01225b9 <test_kfree_bestfirstfit+0x15b4>
f01225a2:	83 ec 04             	sub    $0x4,%esp
f01225a5:	68 54 a2 13 f0       	push   $0xf013a254
f01225aa:	68 89 07 00 00       	push   $0x789
f01225af:	68 3a a2 13 f0       	push   $0xf013a23a
f01225b4:	e8 ed db fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01225b9:	e8 0c 98 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01225be:	89 c2                	mov    %eax,%edx
f01225c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225c3:	29 c2                	sub    %eax,%edx
f01225c5:	89 d0                	mov    %edx,%eax
f01225c7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01225cc:	74 17                	je     f01225e5 <test_kfree_bestfirstfit+0x15e0>
f01225ce:	83 ec 04             	sub    $0x4,%esp
f01225d1:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01225d6:	68 8a 07 00 00       	push   $0x78a
f01225db:	68 3a a2 13 f0       	push   $0xf013a23a
f01225e0:	e8 c1 db fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225e5:	e8 e0 97 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01225ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225ed:	e8 9a 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01225f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01225f5:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01225fb:	83 ec 0c             	sub    $0xc,%esp
f01225fe:	50                   	push   %eax
f01225ff:	e8 f2 4d fe ff       	call   f01073f6 <kfree>
f0122604:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122607:	e8 80 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012260c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012260f:	74 17                	je     f0122628 <test_kfree_bestfirstfit+0x1623>
f0122611:	83 ec 04             	sub    $0x4,%esp
f0122614:	68 54 a2 13 f0       	push   $0xf013a254
f0122619:	68 90 07 00 00       	push   $0x790
f012261e:	68 3a a2 13 f0       	push   $0xf013a23a
f0122623:	e8 7e db fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122628:	e8 9d 97 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012262d:	89 c2                	mov    %eax,%edx
f012262f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122632:	29 c2                	sub    %eax,%edx
f0122634:	89 d0                	mov    %edx,%eax
f0122636:	83 f8 01             	cmp    $0x1,%eax
f0122639:	74 17                	je     f0122652 <test_kfree_bestfirstfit+0x164d>
f012263b:	83 ec 04             	sub    $0x4,%esp
f012263e:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0122643:	68 91 07 00 00       	push   $0x791
f0122648:	68 3a a2 13 f0       	push   $0xf013a23a
f012264d:	e8 54 db fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122652:	e8 73 97 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122657:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012265a:	e8 2d 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012265f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122662:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122668:	83 ec 0c             	sub    $0xc,%esp
f012266b:	50                   	push   %eax
f012266c:	e8 85 4d fe ff       	call   f01073f6 <kfree>
f0122671:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122674:	e8 13 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122679:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012267c:	74 17                	je     f0122695 <test_kfree_bestfirstfit+0x1690>
f012267e:	83 ec 04             	sub    $0x4,%esp
f0122681:	68 54 a2 13 f0       	push   $0xf013a254
f0122686:	68 97 07 00 00       	push   $0x797
f012268b:	68 3a a2 13 f0       	push   $0xf013a23a
f0122690:	e8 11 db fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122695:	e8 30 97 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012269a:	89 c2                	mov    %eax,%edx
f012269c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012269f:	29 c2                	sub    %eax,%edx
f01226a1:	89 d0                	mov    %edx,%eax
f01226a3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01226a8:	74 17                	je     f01226c1 <test_kfree_bestfirstfit+0x16bc>
f01226aa:	83 ec 04             	sub    $0x4,%esp
f01226ad:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01226b2:	68 98 07 00 00       	push   $0x798
f01226b7:	68 3a a2 13 f0       	push   $0xf013a23a
f01226bc:	e8 e5 da fd ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01226c1:	e8 04 97 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01226c6:	89 c2                	mov    %eax,%edx
f01226c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01226cb:	39 c2                	cmp    %eax,%edx
f01226cd:	74 17                	je     f01226e6 <test_kfree_bestfirstfit+0x16e1>
f01226cf:	83 ec 04             	sub    $0x4,%esp
f01226d2:	68 64 aa 13 f0       	push   $0xf013aa64
f01226d7:	68 9a 07 00 00       	push   $0x79a
f01226dc:	68 3a a2 13 f0       	push   $0xf013a23a
f01226e1:	e8 c0 da fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f01226e6:	83 ec 0c             	sub    $0xc,%esp
f01226e9:	68 98 aa 13 f0       	push   $0xf013aa98
f01226ee:	e8 3a e5 fd ff       	call   f0100c2d <cprintf>
f01226f3:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01226f6:	83 ec 0c             	sub    $0xc,%esp
f01226f9:	6a 03                	push   $0x3
f01226fb:	e8 73 9b fe ff       	call   f010c273 <sys_bypassPageFault>
f0122700:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122703:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012270a:	e9 82 00 00 00       	jmp    f0122791 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f012270f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122712:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0122719:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012271c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012271f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122722:	e8 3a 9b fe ff       	call   f010c261 <sys_rcr2>
f0122727:	89 c2                	mov    %eax,%edx
f0122729:	8b 45 80             	mov    -0x80(%ebp),%eax
f012272c:	39 c2                	cmp    %eax,%edx
f012272e:	74 17                	je     f0122747 <test_kfree_bestfirstfit+0x1742>
f0122730:	83 ec 04             	sub    $0x4,%esp
f0122733:	68 a0 aa 13 f0       	push   $0xf013aaa0
f0122738:	68 a9 07 00 00       	push   $0x7a9
f012273d:	68 3a a2 13 f0       	push   $0xf013a23a
f0122742:	e8 5f da fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0122747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012274a:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122751:	89 c2                	mov    %eax,%edx
f0122753:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122756:	01 d0                	add    %edx,%eax
f0122758:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012275b:	e8 01 9b fe ff       	call   f010c261 <sys_rcr2>
f0122760:	89 c2                	mov    %eax,%edx
f0122762:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122765:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012276c:	89 c1                	mov    %eax,%ecx
f012276e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122771:	01 c8                	add    %ecx,%eax
f0122773:	39 c2                	cmp    %eax,%edx
f0122775:	74 17                	je     f012278e <test_kfree_bestfirstfit+0x1789>
f0122777:	83 ec 04             	sub    $0x4,%esp
f012277a:	68 a0 aa 13 f0       	push   $0xf013aaa0
f012277f:	68 ab 07 00 00       	push   $0x7ab
f0122784:	68 3a a2 13 f0       	push   $0xf013a23a
f0122789:	e8 18 da fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012278e:	ff 45 f4             	incl   -0xc(%ebp)
f0122791:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122795:	0f 8e 74 ff ff ff    	jle    f012270f <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012279b:	83 ec 0c             	sub    $0xc,%esp
f012279e:	6a 00                	push   $0x0
f01227a0:	e8 ce 9a fe ff       	call   f010c273 <sys_bypassPageFault>
f01227a5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01227a8:	83 ec 0c             	sub    $0xc,%esp
f01227ab:	68 e5 aa 13 f0       	push   $0xf013aae5
f01227b0:	e8 78 e4 fd ff       	call   f0100c2d <cprintf>
f01227b5:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01227b8:	e8 0d 96 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01227bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227c0:	e8 c7 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01227c8:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01227ce:	83 ec 0c             	sub    $0xc,%esp
f01227d1:	50                   	push   %eax
f01227d2:	e8 1f 4c fe ff       	call   f01073f6 <kfree>
f01227d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227da:	e8 ad 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227e2:	74 17                	je     f01227fb <test_kfree_bestfirstfit+0x17f6>
f01227e4:	83 ec 04             	sub    $0x4,%esp
f01227e7:	68 54 a2 13 f0       	push   $0xf013a254
f01227ec:	68 b9 07 00 00       	push   $0x7b9
f01227f1:	68 3a a2 13 f0       	push   $0xf013a23a
f01227f6:	e8 ab d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01227fb:	e8 ca 95 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122800:	89 c2                	mov    %eax,%edx
f0122802:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122805:	39 c2                	cmp    %eax,%edx
f0122807:	74 17                	je     f0122820 <test_kfree_bestfirstfit+0x181b>
f0122809:	83 ec 04             	sub    $0x4,%esp
f012280c:	68 ec aa 13 f0       	push   $0xf013aaec
f0122811:	68 ba 07 00 00       	push   $0x7ba
f0122816:	68 3a a2 13 f0       	push   $0xf013a23a
f012281b:	e8 86 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122820:	e8 a5 95 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122825:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122828:	e8 5f 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012282d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122830:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122836:	83 ec 0c             	sub    $0xc,%esp
f0122839:	50                   	push   %eax
f012283a:	e8 b7 4b fe ff       	call   f01073f6 <kfree>
f012283f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122842:	e8 45 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122847:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012284a:	74 17                	je     f0122863 <test_kfree_bestfirstfit+0x185e>
f012284c:	83 ec 04             	sub    $0x4,%esp
f012284f:	68 54 a2 13 f0       	push   $0xf013a254
f0122854:	68 c0 07 00 00       	push   $0x7c0
f0122859:	68 3a a2 13 f0       	push   $0xf013a23a
f012285e:	e8 43 d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122863:	e8 62 95 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122868:	89 c2                	mov    %eax,%edx
f012286a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012286d:	39 c2                	cmp    %eax,%edx
f012286f:	74 17                	je     f0122888 <test_kfree_bestfirstfit+0x1883>
f0122871:	83 ec 04             	sub    $0x4,%esp
f0122874:	68 ec aa 13 f0       	push   $0xf013aaec
f0122879:	68 c1 07 00 00       	push   $0x7c1
f012287e:	68 3a a2 13 f0       	push   $0xf013a23a
f0122883:	e8 1e d9 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122888:	e8 3d 95 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012288d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122890:	e8 f7 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122895:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122898:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012289e:	83 ec 0c             	sub    $0xc,%esp
f01228a1:	50                   	push   %eax
f01228a2:	e8 4f 4b fe ff       	call   f01073f6 <kfree>
f01228a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228aa:	e8 dd 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01228af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228b2:	74 17                	je     f01228cb <test_kfree_bestfirstfit+0x18c6>
f01228b4:	83 ec 04             	sub    $0x4,%esp
f01228b7:	68 54 a2 13 f0       	push   $0xf013a254
f01228bc:	68 c7 07 00 00       	push   $0x7c7
f01228c1:	68 3a a2 13 f0       	push   $0xf013a23a
f01228c6:	e8 db d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01228cb:	e8 fa 94 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01228d0:	89 c2                	mov    %eax,%edx
f01228d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01228d5:	39 c2                	cmp    %eax,%edx
f01228d7:	74 17                	je     f01228f0 <test_kfree_bestfirstfit+0x18eb>
f01228d9:	83 ec 04             	sub    $0x4,%esp
f01228dc:	68 ec aa 13 f0       	push   $0xf013aaec
f01228e1:	68 c8 07 00 00       	push   $0x7c8
f01228e6:	68 3a a2 13 f0       	push   $0xf013a23a
f01228eb:	e8 b6 d8 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01228f0:	e8 d5 94 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01228f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228f8:	e8 8f 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01228fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122900:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122906:	83 ec 0c             	sub    $0xc,%esp
f0122909:	50                   	push   %eax
f012290a:	e8 e7 4a fe ff       	call   f01073f6 <kfree>
f012290f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122912:	e8 75 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122917:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012291a:	74 17                	je     f0122933 <test_kfree_bestfirstfit+0x192e>
f012291c:	83 ec 04             	sub    $0x4,%esp
f012291f:	68 54 a2 13 f0       	push   $0xf013a254
f0122924:	68 ce 07 00 00       	push   $0x7ce
f0122929:	68 3a a2 13 f0       	push   $0xf013a23a
f012292e:	e8 73 d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122933:	e8 92 94 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122938:	89 c2                	mov    %eax,%edx
f012293a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012293d:	39 c2                	cmp    %eax,%edx
f012293f:	74 17                	je     f0122958 <test_kfree_bestfirstfit+0x1953>
f0122941:	83 ec 04             	sub    $0x4,%esp
f0122944:	68 ec aa 13 f0       	push   $0xf013aaec
f0122949:	68 cf 07 00 00       	push   $0x7cf
f012294e:	68 3a a2 13 f0       	push   $0xf013a23a
f0122953:	e8 4e d8 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0122958:	83 ec 0c             	sub    $0xc,%esp
f012295b:	68 33 ab 13 f0       	push   $0xf013ab33
f0122960:	e8 c8 e2 fd ff       	call   f0100c2d <cprintf>
f0122965:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122968:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012296f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122976:	eb 48                	jmp    f01229c0 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122978:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012297b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0122980:	83 ec 04             	sub    $0x4,%esp
f0122983:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0122989:	51                   	push   %ecx
f012298a:	52                   	push   %edx
f012298b:	50                   	push   %eax
f012298c:	e8 d8 3f fe ff       	call   f0106969 <get_page_table>
f0122991:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122994:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012299a:	85 c0                	test   %eax,%eax
f012299c:	75 17                	jne    f01229b5 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012299e:	83 ec 04             	sub    $0x4,%esp
f01229a1:	68 3c ab 13 f0       	push   $0xf013ab3c
f01229a6:	68 dd 07 00 00       	push   $0x7dd
f01229ab:	68 3a a2 13 f0       	push   $0xf013a23a
f01229b0:	e8 f1 d7 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01229b5:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01229bc:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01229c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01229c4:	78 b2                	js     f0122978 <test_kfree_bestfirstfit+0x1973>
f01229c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01229ca:	7f 09                	jg     f01229d5 <test_kfree_bestfirstfit+0x19d0>
f01229cc:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01229d3:	76 a3                	jbe    f0122978 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01229d5:	83 ec 0c             	sub    $0xc,%esp
f01229d8:	68 1e a4 13 f0       	push   $0xf013a41e
f01229dd:	e8 4b e2 fd ff       	call   f0100c2d <cprintf>
f01229e2:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01229e5:	83 ec 0c             	sub    $0xc,%esp
f01229e8:	68 a4 ab 13 f0       	push   $0xf013aba4
f01229ed:	e8 3b e2 fd ff       	call   f0100c2d <cprintf>
f01229f2:	83 c4 10             	add    $0x10,%esp

	return 1;
f01229f5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01229fa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01229fd:	5b                   	pop    %ebx
f01229fe:	5f                   	pop    %edi
f01229ff:	5d                   	pop    %ebp
f0122a00:	c3                   	ret    

f0122a01 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122a01:	55                   	push   %ebp
f0122a02:	89 e5                	mov    %esp,%ebp
f0122a04:	57                   	push   %edi
f0122a05:	56                   	push   %esi
f0122a06:	53                   	push   %ebx
f0122a07:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0122a0d:	83 ec 0c             	sub    $0xc,%esp
f0122a10:	68 7c a1 13 f0       	push   $0xf013a17c
f0122a15:	e8 13 e2 fd ff       	call   f0100c2d <cprintf>
f0122a1a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122a1d:	83 ec 0c             	sub    $0xc,%esp
f0122a20:	68 ac a1 13 f0       	push   $0xf013a1ac
f0122a25:	e8 03 e2 fd ff       	call   f0100c2d <cprintf>
f0122a2a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122a2d:	83 ec 0c             	sub    $0xc,%esp
f0122a30:	68 7c a1 13 f0       	push   $0xf013a17c
f0122a35:	e8 f3 e1 fd ff       	call   f0100c2d <cprintf>
f0122a3a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122a3d:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122a41:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122a45:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122a4b:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122a51:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122a58:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122a5f:	e8 66 93 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122a64:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122a67:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0122a6d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122a72:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a77:	89 d7                	mov    %edx,%edi
f0122a79:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122a7b:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0122a81:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122a86:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a8b:	89 d7                	mov    %edx,%edi
f0122a8d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122a8f:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0122a95:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122a9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a9f:	89 d7                	mov    %edx,%edi
f0122aa1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122aa3:	e8 22 93 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122aa8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122aab:	e8 dc 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ab0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122ab3:	83 ec 0c             	sub    $0xc,%esp
f0122ab6:	68 00 fc 1f 00       	push   $0x1ffc00
f0122abb:	e8 1c 49 fe ff       	call   f01073dc <kmalloc>
f0122ac0:	83 c4 10             	add    $0x10,%esp
f0122ac3:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ac9:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0122acf:	89 c1                	mov    %eax,%ecx
f0122ad1:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122ad8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122adb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122ae0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122ae3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122ae6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aeb:	f7 75 a0             	divl   -0x60(%ebp)
f0122aee:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122af1:	29 d0                	sub    %edx,%eax
f0122af3:	89 c3                	mov    %eax,%ebx
f0122af5:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122afc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122b01:	0f b6 d0             	movzbl %al,%edx
f0122b04:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122b07:	01 d0                	add    %edx,%eax
f0122b09:	48                   	dec    %eax
f0122b0a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122b0d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122b10:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b15:	f7 75 98             	divl   -0x68(%ebp)
f0122b18:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122b1b:	29 d0                	sub    %edx,%eax
f0122b1d:	01 c3                	add    %eax,%ebx
f0122b1f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122b26:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122b2b:	0f b6 c0             	movzbl %al,%eax
f0122b2e:	c1 e0 04             	shl    $0x4,%eax
f0122b31:	89 c2                	mov    %eax,%edx
f0122b33:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122b36:	01 d0                	add    %edx,%eax
f0122b38:	48                   	dec    %eax
f0122b39:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122b3c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122b3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b44:	f7 75 90             	divl   -0x70(%ebp)
f0122b47:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122b4a:	29 d0                	sub    %edx,%eax
f0122b4c:	01 d8                	add    %ebx,%eax
f0122b4e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122b53:	39 c1                	cmp    %eax,%ecx
f0122b55:	74 17                	je     f0122b6e <test_kheap_phys_addr+0x16d>
f0122b57:	83 ec 04             	sub    $0x4,%esp
f0122b5a:	68 20 a3 13 f0       	push   $0xf013a320
f0122b5f:	68 0a 08 00 00       	push   $0x80a
f0122b64:	68 3a a2 13 f0       	push   $0xf013a23a
f0122b69:	e8 38 d6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b6e:	e8 19 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b73:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122b76:	74 17                	je     f0122b8f <test_kheap_phys_addr+0x18e>
f0122b78:	83 ec 04             	sub    $0x4,%esp
f0122b7b:	68 54 a2 13 f0       	push   $0xf013a254
f0122b80:	68 0b 08 00 00       	push   $0x80b
f0122b85:	68 3a a2 13 f0       	push   $0xf013a23a
f0122b8a:	e8 17 d6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b8f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122b92:	e8 33 92 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122b97:	29 c3                	sub    %eax,%ebx
f0122b99:	89 d8                	mov    %ebx,%eax
f0122b9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122ba0:	74 17                	je     f0122bb9 <test_kheap_phys_addr+0x1b8>
f0122ba2:	83 ec 04             	sub    $0x4,%esp
f0122ba5:	68 bc a2 13 f0       	push   $0xf013a2bc
f0122baa:	68 0c 08 00 00       	push   $0x80c
f0122baf:	68 3a a2 13 f0       	push   $0xf013a23a
f0122bb4:	e8 ed d5 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122bb9:	e8 0c 92 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122bbe:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bc1:	e8 c6 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122bc6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122bc9:	83 ec 0c             	sub    $0xc,%esp
f0122bcc:	68 00 fc 1f 00       	push   $0x1ffc00
f0122bd1:	e8 06 48 fe ff       	call   f01073dc <kmalloc>
f0122bd6:	83 c4 10             	add    $0x10,%esp
f0122bd9:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122bdf:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0122be5:	89 c1                	mov    %eax,%ecx
f0122be7:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122bee:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122bf1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bf6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122bf9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122bfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c01:	f7 75 88             	divl   -0x78(%ebp)
f0122c04:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122c07:	29 d0                	sub    %edx,%eax
f0122c09:	89 c3                	mov    %eax,%ebx
f0122c0b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122c12:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122c17:	0f b6 d0             	movzbl %al,%edx
f0122c1a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122c1d:	01 d0                	add    %edx,%eax
f0122c1f:	48                   	dec    %eax
f0122c20:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122c26:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c31:	f7 75 80             	divl   -0x80(%ebp)
f0122c34:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122c3a:	29 d0                	sub    %edx,%eax
f0122c3c:	01 c3                	add    %eax,%ebx
f0122c3e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122c45:	10 00 00 
f0122c48:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122c4d:	0f b6 c0             	movzbl %al,%eax
f0122c50:	c1 e0 04             	shl    $0x4,%eax
f0122c53:	89 c2                	mov    %eax,%edx
f0122c55:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122c5b:	01 d0                	add    %edx,%eax
f0122c5d:	48                   	dec    %eax
f0122c5e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122c64:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122c6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c6f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122c75:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122c7b:	29 d0                	sub    %edx,%eax
f0122c7d:	01 d8                	add    %ebx,%eax
f0122c7f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122c84:	39 c1                	cmp    %eax,%ecx
f0122c86:	74 17                	je     f0122c9f <test_kheap_phys_addr+0x29e>
f0122c88:	83 ec 04             	sub    $0x4,%esp
f0122c8b:	68 20 a3 13 f0       	push   $0xf013a320
f0122c90:	68 12 08 00 00       	push   $0x812
f0122c95:	68 3a a2 13 f0       	push   $0xf013a23a
f0122c9a:	e8 07 d5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c9f:	e8 e8 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122ca4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122ca7:	74 17                	je     f0122cc0 <test_kheap_phys_addr+0x2bf>
f0122ca9:	83 ec 04             	sub    $0x4,%esp
f0122cac:	68 54 a2 13 f0       	push   $0xf013a254
f0122cb1:	68 13 08 00 00       	push   $0x813
f0122cb6:	68 3a a2 13 f0       	push   $0xf013a23a
f0122cbb:	e8 e6 d4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122cc0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122cc3:	e8 02 91 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122cc8:	29 c3                	sub    %eax,%ebx
f0122cca:	89 d8                	mov    %ebx,%eax
f0122ccc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122cd1:	74 17                	je     f0122cea <test_kheap_phys_addr+0x2e9>
f0122cd3:	83 ec 04             	sub    $0x4,%esp
f0122cd6:	68 bc a2 13 f0       	push   $0xf013a2bc
f0122cdb:	68 14 08 00 00       	push   $0x814
f0122ce0:	68 3a a2 13 f0       	push   $0xf013a23a
f0122ce5:	e8 bc d4 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cea:	e8 db 90 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122cef:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cf2:	e8 95 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122cf7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122cfa:	83 ec 0c             	sub    $0xc,%esp
f0122cfd:	68 00 08 00 00       	push   $0x800
f0122d02:	e8 d5 46 fe ff       	call   f01073dc <kmalloc>
f0122d07:	83 c4 10             	add    $0x10,%esp
f0122d0a:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d10:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0122d16:	89 c1                	mov    %eax,%ecx
f0122d18:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122d1f:	10 00 00 
f0122d22:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122d28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d2d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122d33:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d3e:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122d44:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122d4a:	29 d0                	sub    %edx,%eax
f0122d4c:	89 c3                	mov    %eax,%ebx
f0122d4e:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122d55:	10 00 00 
f0122d58:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122d5d:	0f b6 d0             	movzbl %al,%edx
f0122d60:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122d66:	01 d0                	add    %edx,%eax
f0122d68:	48                   	dec    %eax
f0122d69:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122d6f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d7a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122d80:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d86:	29 d0                	sub    %edx,%eax
f0122d88:	01 c3                	add    %eax,%ebx
f0122d8a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0122d91:	10 00 00 
f0122d94:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122d99:	0f b6 c0             	movzbl %al,%eax
f0122d9c:	c1 e0 04             	shl    $0x4,%eax
f0122d9f:	89 c2                	mov    %eax,%edx
f0122da1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122da7:	01 d0                	add    %edx,%eax
f0122da9:	48                   	dec    %eax
f0122daa:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0122db0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122db6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dbb:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0122dc1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122dc7:	29 d0                	sub    %edx,%eax
f0122dc9:	01 d8                	add    %ebx,%eax
f0122dcb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122dd0:	39 c1                	cmp    %eax,%ecx
f0122dd2:	74 17                	je     f0122deb <test_kheap_phys_addr+0x3ea>
f0122dd4:	83 ec 04             	sub    $0x4,%esp
f0122dd7:	68 20 a3 13 f0       	push   $0xf013a320
f0122ddc:	68 1a 08 00 00       	push   $0x81a
f0122de1:	68 3a a2 13 f0       	push   $0xf013a23a
f0122de6:	e8 bb d3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122deb:	e8 9c 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122df0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122df3:	74 17                	je     f0122e0c <test_kheap_phys_addr+0x40b>
f0122df5:	83 ec 04             	sub    $0x4,%esp
f0122df8:	68 54 a2 13 f0       	push   $0xf013a254
f0122dfd:	68 1b 08 00 00       	push   $0x81b
f0122e02:	68 3a a2 13 f0       	push   $0xf013a23a
f0122e07:	e8 9a d3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e0c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122e0f:	e8 b6 8f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122e14:	29 c3                	sub    %eax,%ebx
f0122e16:	89 d8                	mov    %ebx,%eax
f0122e18:	83 f8 01             	cmp    $0x1,%eax
f0122e1b:	74 17                	je     f0122e34 <test_kheap_phys_addr+0x433>
f0122e1d:	83 ec 04             	sub    $0x4,%esp
f0122e20:	68 bc a2 13 f0       	push   $0xf013a2bc
f0122e25:	68 1c 08 00 00       	push   $0x81c
f0122e2a:	68 3a a2 13 f0       	push   $0xf013a23a
f0122e2f:	e8 72 d3 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e34:	e8 91 8f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122e39:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e3c:	e8 4b 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e41:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122e44:	83 ec 0c             	sub    $0xc,%esp
f0122e47:	68 00 08 00 00       	push   $0x800
f0122e4c:	e8 8b 45 fe ff       	call   f01073dc <kmalloc>
f0122e51:	83 c4 10             	add    $0x10,%esp
f0122e54:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e5a:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0122e60:	89 c1                	mov    %eax,%ecx
f0122e62:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0122e69:	10 00 00 
f0122e6c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122e72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e77:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0122e7d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122e83:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e88:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0122e8e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122e94:	29 d0                	sub    %edx,%eax
f0122e96:	89 c3                	mov    %eax,%ebx
f0122e98:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0122e9f:	10 00 00 
f0122ea2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122ea7:	0f b6 d0             	movzbl %al,%edx
f0122eaa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122eb0:	01 d0                	add    %edx,%eax
f0122eb2:	48                   	dec    %eax
f0122eb3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0122eb9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122ebf:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ec4:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0122eca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122ed0:	29 d0                	sub    %edx,%eax
f0122ed2:	01 c3                	add    %eax,%ebx
f0122ed4:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0122edb:	10 00 00 
f0122ede:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122ee3:	0f b6 c0             	movzbl %al,%eax
f0122ee6:	c1 e0 04             	shl    $0x4,%eax
f0122ee9:	89 c2                	mov    %eax,%edx
f0122eeb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ef1:	01 d0                	add    %edx,%eax
f0122ef3:	48                   	dec    %eax
f0122ef4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0122efa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122f00:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f05:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0122f0b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122f11:	29 d0                	sub    %edx,%eax
f0122f13:	01 d8                	add    %ebx,%eax
f0122f15:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122f1a:	39 c1                	cmp    %eax,%ecx
f0122f1c:	74 17                	je     f0122f35 <test_kheap_phys_addr+0x534>
f0122f1e:	83 ec 04             	sub    $0x4,%esp
f0122f21:	68 20 a3 13 f0       	push   $0xf013a320
f0122f26:	68 22 08 00 00       	push   $0x822
f0122f2b:	68 3a a2 13 f0       	push   $0xf013a23a
f0122f30:	e8 71 d2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f35:	e8 52 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f3a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f3d:	74 17                	je     f0122f56 <test_kheap_phys_addr+0x555>
f0122f3f:	83 ec 04             	sub    $0x4,%esp
f0122f42:	68 54 a2 13 f0       	push   $0xf013a254
f0122f47:	68 23 08 00 00       	push   $0x823
f0122f4c:	68 3a a2 13 f0       	push   $0xf013a23a
f0122f51:	e8 50 d2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f56:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f59:	e8 6c 8e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122f5e:	29 c3                	sub    %eax,%ebx
f0122f60:	89 d8                	mov    %ebx,%eax
f0122f62:	83 f8 01             	cmp    $0x1,%eax
f0122f65:	74 17                	je     f0122f7e <test_kheap_phys_addr+0x57d>
f0122f67:	83 ec 04             	sub    $0x4,%esp
f0122f6a:	68 bc a2 13 f0       	push   $0xf013a2bc
f0122f6f:	68 24 08 00 00       	push   $0x824
f0122f74:	68 3a a2 13 f0       	push   $0xf013a23a
f0122f79:	e8 28 d2 fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f7e:	e8 47 8e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0122f83:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f86:	e8 01 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f8b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122f8e:	83 ec 0c             	sub    $0xc,%esp
f0122f91:	68 00 1c 00 00       	push   $0x1c00
f0122f96:	e8 41 44 fe ff       	call   f01073dc <kmalloc>
f0122f9b:	83 c4 10             	add    $0x10,%esp
f0122f9e:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122fa4:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0122faa:	89 c1                	mov    %eax,%ecx
f0122fac:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0122fb3:	10 00 00 
f0122fb6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122fbc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122fc1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0122fc7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122fcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fd2:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0122fd8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122fde:	29 d0                	sub    %edx,%eax
f0122fe0:	89 c3                	mov    %eax,%ebx
f0122fe2:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0122fe9:	10 00 00 
f0122fec:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122ff1:	0f b6 d0             	movzbl %al,%edx
f0122ff4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122ffa:	01 d0                	add    %edx,%eax
f0122ffc:	48                   	dec    %eax
f0122ffd:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123003:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123009:	ba 00 00 00 00       	mov    $0x0,%edx
f012300e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123014:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012301a:	29 d0                	sub    %edx,%eax
f012301c:	01 c3                	add    %eax,%ebx
f012301e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123025:	10 00 00 
f0123028:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012302d:	0f b6 c0             	movzbl %al,%eax
f0123030:	c1 e0 04             	shl    $0x4,%eax
f0123033:	89 c2                	mov    %eax,%edx
f0123035:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012303b:	01 d0                	add    %edx,%eax
f012303d:	48                   	dec    %eax
f012303e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123044:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012304a:	ba 00 00 00 00       	mov    $0x0,%edx
f012304f:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123055:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012305b:	29 d0                	sub    %edx,%eax
f012305d:	01 d8                	add    %ebx,%eax
f012305f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123064:	39 c1                	cmp    %eax,%ecx
f0123066:	74 17                	je     f012307f <test_kheap_phys_addr+0x67e>
f0123068:	83 ec 04             	sub    $0x4,%esp
f012306b:	68 20 a3 13 f0       	push   $0xf013a320
f0123070:	68 2a 08 00 00       	push   $0x82a
f0123075:	68 3a a2 13 f0       	push   $0xf013a23a
f012307a:	e8 27 d1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012307f:	e8 08 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123084:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123087:	74 17                	je     f01230a0 <test_kheap_phys_addr+0x69f>
f0123089:	83 ec 04             	sub    $0x4,%esp
f012308c:	68 54 a2 13 f0       	push   $0xf013a254
f0123091:	68 2b 08 00 00       	push   $0x82b
f0123096:	68 3a a2 13 f0       	push   $0xf013a23a
f012309b:	e8 06 d1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01230a0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01230a3:	e8 22 8d fe ff       	call   f010bdca <sys_calculate_free_frames>
f01230a8:	29 c3                	sub    %eax,%ebx
f01230aa:	89 d8                	mov    %ebx,%eax
f01230ac:	83 f8 02             	cmp    $0x2,%eax
f01230af:	74 17                	je     f01230c8 <test_kheap_phys_addr+0x6c7>
f01230b1:	83 ec 04             	sub    $0x4,%esp
f01230b4:	68 bc a2 13 f0       	push   $0xf013a2bc
f01230b9:	68 2c 08 00 00       	push   $0x82c
f01230be:	68 3a a2 13 f0       	push   $0xf013a23a
f01230c3:	e8 de d0 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01230c8:	e8 fd 8c fe ff       	call   f010bdca <sys_calculate_free_frames>
f01230cd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230d0:	e8 b7 0b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01230d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01230d8:	83 ec 0c             	sub    $0xc,%esp
f01230db:	68 00 fc 2f 00       	push   $0x2ffc00
f01230e0:	e8 f7 42 fe ff       	call   f01073dc <kmalloc>
f01230e5:	83 c4 10             	add    $0x10,%esp
f01230e8:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01230ee:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01230f4:	89 c1                	mov    %eax,%ecx
f01230f6:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01230fd:	10 00 00 
f0123100:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123106:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012310b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123111:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123117:	ba 00 00 00 00       	mov    $0x0,%edx
f012311c:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123122:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123128:	29 d0                	sub    %edx,%eax
f012312a:	89 c3                	mov    %eax,%ebx
f012312c:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123133:	10 00 00 
f0123136:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012313b:	0f b6 d0             	movzbl %al,%edx
f012313e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123144:	01 d0                	add    %edx,%eax
f0123146:	48                   	dec    %eax
f0123147:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012314d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123153:	ba 00 00 00 00       	mov    $0x0,%edx
f0123158:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012315e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123164:	29 d0                	sub    %edx,%eax
f0123166:	01 c3                	add    %eax,%ebx
f0123168:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012316f:	10 00 00 
f0123172:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123177:	0f b6 c0             	movzbl %al,%eax
f012317a:	c1 e0 04             	shl    $0x4,%eax
f012317d:	89 c2                	mov    %eax,%edx
f012317f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123185:	01 d0                	add    %edx,%eax
f0123187:	48                   	dec    %eax
f0123188:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012318e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123194:	ba 00 00 00 00       	mov    $0x0,%edx
f0123199:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012319f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01231a5:	29 d0                	sub    %edx,%eax
f01231a7:	01 d8                	add    %ebx,%eax
f01231a9:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01231ae:	39 c1                	cmp    %eax,%ecx
f01231b0:	74 17                	je     f01231c9 <test_kheap_phys_addr+0x7c8>
f01231b2:	83 ec 04             	sub    $0x4,%esp
f01231b5:	68 20 a3 13 f0       	push   $0xf013a320
f01231ba:	68 32 08 00 00       	push   $0x832
f01231bf:	68 3a a2 13 f0       	push   $0xf013a23a
f01231c4:	e8 dd cf fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231c9:	e8 be 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01231ce:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01231d1:	74 17                	je     f01231ea <test_kheap_phys_addr+0x7e9>
f01231d3:	83 ec 04             	sub    $0x4,%esp
f01231d6:	68 54 a2 13 f0       	push   $0xf013a254
f01231db:	68 33 08 00 00       	push   $0x833
f01231e0:	68 3a a2 13 f0       	push   $0xf013a23a
f01231e5:	e8 bc cf fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01231ea:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01231ed:	e8 d8 8b fe ff       	call   f010bdca <sys_calculate_free_frames>
f01231f2:	29 c3                	sub    %eax,%ebx
f01231f4:	89 d8                	mov    %ebx,%eax
f01231f6:	3d 00 03 00 00       	cmp    $0x300,%eax
f01231fb:	74 17                	je     f0123214 <test_kheap_phys_addr+0x813>
f01231fd:	83 ec 04             	sub    $0x4,%esp
f0123200:	68 bc a2 13 f0       	push   $0xf013a2bc
f0123205:	68 34 08 00 00       	push   $0x834
f012320a:	68 3a a2 13 f0       	push   $0xf013a23a
f012320f:	e8 92 cf fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123214:	e8 b1 8b fe ff       	call   f010bdca <sys_calculate_free_frames>
f0123219:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012321c:	e8 6b 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123221:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123224:	83 ec 0c             	sub    $0xc,%esp
f0123227:	68 00 fc 5f 00       	push   $0x5ffc00
f012322c:	e8 ab 41 fe ff       	call   f01073dc <kmalloc>
f0123231:	83 c4 10             	add    $0x10,%esp
f0123234:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012323a:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123240:	89 c1                	mov    %eax,%ecx
f0123242:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123249:	10 00 00 
f012324c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123252:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123257:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012325d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123263:	ba 00 00 00 00       	mov    $0x0,%edx
f0123268:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012326e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123274:	29 d0                	sub    %edx,%eax
f0123276:	89 c3                	mov    %eax,%ebx
f0123278:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012327f:	10 00 00 
f0123282:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123287:	0f b6 d0             	movzbl %al,%edx
f012328a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123290:	01 d0                	add    %edx,%eax
f0123292:	48                   	dec    %eax
f0123293:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123299:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012329f:	ba 00 00 00 00       	mov    $0x0,%edx
f01232a4:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01232aa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01232b0:	29 d0                	sub    %edx,%eax
f01232b2:	01 c3                	add    %eax,%ebx
f01232b4:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01232bb:	10 00 00 
f01232be:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01232c3:	0f b6 c0             	movzbl %al,%eax
f01232c6:	c1 e0 04             	shl    $0x4,%eax
f01232c9:	89 c2                	mov    %eax,%edx
f01232cb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01232d1:	01 d0                	add    %edx,%eax
f01232d3:	48                   	dec    %eax
f01232d4:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01232da:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01232e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01232e5:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01232eb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01232f1:	29 d0                	sub    %edx,%eax
f01232f3:	01 d8                	add    %ebx,%eax
f01232f5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01232fa:	39 c1                	cmp    %eax,%ecx
f01232fc:	74 17                	je     f0123315 <test_kheap_phys_addr+0x914>
f01232fe:	83 ec 04             	sub    $0x4,%esp
f0123301:	68 20 a3 13 f0       	push   $0xf013a320
f0123306:	68 3a 08 00 00       	push   $0x83a
f012330b:	68 3a a2 13 f0       	push   $0xf013a23a
f0123310:	e8 91 ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123315:	e8 72 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012331a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012331d:	74 17                	je     f0123336 <test_kheap_phys_addr+0x935>
f012331f:	83 ec 04             	sub    $0x4,%esp
f0123322:	68 54 a2 13 f0       	push   $0xf013a254
f0123327:	68 3b 08 00 00       	push   $0x83b
f012332c:	68 3a a2 13 f0       	push   $0xf013a23a
f0123331:	e8 70 ce fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123336:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123339:	e8 8c 8a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012333e:	29 c3                	sub    %eax,%ebx
f0123340:	89 d8                	mov    %ebx,%eax
f0123342:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123347:	74 17                	je     f0123360 <test_kheap_phys_addr+0x95f>
f0123349:	83 ec 04             	sub    $0x4,%esp
f012334c:	68 bc a2 13 f0       	push   $0xf013a2bc
f0123351:	68 3c 08 00 00       	push   $0x83c
f0123356:	68 3a a2 13 f0       	push   $0xf013a23a
f012335b:	e8 46 ce fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123360:	e8 65 8a fe ff       	call   f010bdca <sys_calculate_free_frames>
f0123365:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123368:	e8 1f 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012336d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123370:	83 ec 0c             	sub    $0xc,%esp
f0123373:	68 00 38 00 00       	push   $0x3800
f0123378:	e8 5f 40 fe ff       	call   f01073dc <kmalloc>
f012337d:	83 c4 10             	add    $0x10,%esp
f0123380:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123386:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012338c:	89 c1                	mov    %eax,%ecx
f012338e:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123395:	10 00 00 
f0123398:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012339e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01233a3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01233a9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01233af:	ba 00 00 00 00       	mov    $0x0,%edx
f01233b4:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01233ba:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01233c0:	29 d0                	sub    %edx,%eax
f01233c2:	89 c3                	mov    %eax,%ebx
f01233c4:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01233cb:	10 00 00 
f01233ce:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01233d3:	0f b6 d0             	movzbl %al,%edx
f01233d6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01233dc:	01 d0                	add    %edx,%eax
f01233de:	48                   	dec    %eax
f01233df:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01233e5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01233eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01233f0:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01233f6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01233fc:	29 d0                	sub    %edx,%eax
f01233fe:	01 c3                	add    %eax,%ebx
f0123400:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123407:	10 00 00 
f012340a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012340f:	0f b6 c0             	movzbl %al,%eax
f0123412:	c1 e0 04             	shl    $0x4,%eax
f0123415:	89 c2                	mov    %eax,%edx
f0123417:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012341d:	01 d0                	add    %edx,%eax
f012341f:	48                   	dec    %eax
f0123420:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123426:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012342c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123431:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123437:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012343d:	29 d0                	sub    %edx,%eax
f012343f:	01 d8                	add    %ebx,%eax
f0123441:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123446:	39 c1                	cmp    %eax,%ecx
f0123448:	74 17                	je     f0123461 <test_kheap_phys_addr+0xa60>
f012344a:	83 ec 04             	sub    $0x4,%esp
f012344d:	68 20 a3 13 f0       	push   $0xf013a320
f0123452:	68 42 08 00 00       	push   $0x842
f0123457:	68 3a a2 13 f0       	push   $0xf013a23a
f012345c:	e8 45 cd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123461:	e8 26 08 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123466:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123469:	74 17                	je     f0123482 <test_kheap_phys_addr+0xa81>
f012346b:	83 ec 04             	sub    $0x4,%esp
f012346e:	68 54 a2 13 f0       	push   $0xf013a254
f0123473:	68 43 08 00 00       	push   $0x843
f0123478:	68 3a a2 13 f0       	push   $0xf013a23a
f012347d:	e8 24 cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123482:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123485:	e8 40 89 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012348a:	29 c3                	sub    %eax,%ebx
f012348c:	89 d8                	mov    %ebx,%eax
f012348e:	83 f8 04             	cmp    $0x4,%eax
f0123491:	74 17                	je     f01234aa <test_kheap_phys_addr+0xaa9>
f0123493:	83 ec 04             	sub    $0x4,%esp
f0123496:	68 bc a2 13 f0       	push   $0xf013a2bc
f012349b:	68 44 08 00 00       	push   $0x844
f01234a0:	68 3a a2 13 f0       	push   $0xf013a23a
f01234a5:	e8 fc cc fd ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01234aa:	89 e0                	mov    %esp,%eax
f01234ac:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01234ae:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01234b5:	10 00 00 
f01234b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01234be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01234c3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01234c9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01234cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01234d4:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01234da:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01234e0:	29 d0                	sub    %edx,%eax
f01234e2:	89 c1                	mov    %eax,%ecx
f01234e4:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01234eb:	10 00 00 
f01234ee:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01234f3:	0f b6 d0             	movzbl %al,%edx
f01234f6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01234fc:	01 d0                	add    %edx,%eax
f01234fe:	48                   	dec    %eax
f01234ff:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123505:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012350b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123510:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123516:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012351c:	29 d0                	sub    %edx,%eax
f012351e:	01 c1                	add    %eax,%ecx
f0123520:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123527:	10 00 00 
f012352a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012352f:	0f b6 c0             	movzbl %al,%eax
f0123532:	c1 e0 04             	shl    $0x4,%eax
f0123535:	89 c2                	mov    %eax,%edx
f0123537:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012353d:	01 d0                	add    %edx,%eax
f012353f:	48                   	dec    %eax
f0123540:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123546:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012354c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123551:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123557:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012355d:	29 d0                	sub    %edx,%eax
f012355f:	01 c8                	add    %ecx,%eax
f0123561:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123566:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012356c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123573:	10 00 00 
f0123576:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012357c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123581:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123587:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012358d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123592:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123598:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012359e:	29 d0                	sub    %edx,%eax
f01235a0:	89 c1                	mov    %eax,%ecx
f01235a2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01235a9:	10 00 00 
f01235ac:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01235b1:	0f b6 d0             	movzbl %al,%edx
f01235b4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01235ba:	01 d0                	add    %edx,%eax
f01235bc:	48                   	dec    %eax
f01235bd:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01235c3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01235c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ce:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01235d4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01235da:	29 d0                	sub    %edx,%eax
f01235dc:	01 c1                	add    %eax,%ecx
f01235de:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01235e5:	10 00 00 
f01235e8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01235ed:	0f b6 c0             	movzbl %al,%eax
f01235f0:	c1 e0 04             	shl    $0x4,%eax
f01235f3:	89 c2                	mov    %eax,%edx
f01235f5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01235fb:	01 d0                	add    %edx,%eax
f01235fd:	48                   	dec    %eax
f01235fe:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0123604:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012360a:	ba 00 00 00 00       	mov    $0x0,%edx
f012360f:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0123615:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012361b:	29 d0                	sub    %edx,%eax
f012361d:	01 c8                	add    %ecx,%eax
f012361f:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123624:	c1 e8 0c             	shr    $0xc,%eax
f0123627:	89 c2                	mov    %eax,%edx
f0123629:	4a                   	dec    %edx
f012362a:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0123630:	c1 e0 02             	shl    $0x2,%eax
f0123633:	8d 50 03             	lea    0x3(%eax),%edx
f0123636:	b8 10 00 00 00       	mov    $0x10,%eax
f012363b:	48                   	dec    %eax
f012363c:	01 d0                	add    %edx,%eax
f012363e:	bf 10 00 00 00       	mov    $0x10,%edi
f0123643:	ba 00 00 00 00       	mov    $0x0,%edx
f0123648:	f7 f7                	div    %edi
f012364a:	6b c0 10             	imul   $0x10,%eax,%eax
f012364d:	29 c4                	sub    %eax,%esp
f012364f:	89 e0                	mov    %esp,%eax
f0123651:	83 c0 03             	add    $0x3,%eax
f0123654:	c1 e8 02             	shr    $0x2,%eax
f0123657:	c1 e0 02             	shl    $0x2,%eax
f012365a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123660:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123667:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012366e:	10 00 00 
f0123671:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123677:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012367c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123682:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123688:	ba 00 00 00 00       	mov    $0x0,%edx
f012368d:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123693:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123699:	29 d0                	sub    %edx,%eax
f012369b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01236a0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01236a3:	eb 29                	jmp    f01236ce <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f01236a5:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01236a8:	8d 43 01             	lea    0x1(%ebx),%eax
f01236ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01236ae:	83 ec 0c             	sub    $0xc,%esp
f01236b1:	ff 75 e0             	pushl  -0x20(%ebp)
f01236b4:	e8 71 3d fe ff       	call   f010742a <kheap_physical_address>
f01236b9:	83 c4 10             	add    $0x10,%esp
f01236bc:	89 c2                	mov    %eax,%edx
f01236be:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01236c4:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01236c7:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01236ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01236d1:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01236d7:	72 cc                	jb     f01236a5 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01236d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01236dc:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01236e2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01236e9:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01236f0:	10 00 00 
f01236f3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01236f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01236fe:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0123704:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012370a:	ba 00 00 00 00       	mov    $0x0,%edx
f012370f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0123715:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012371b:	29 d0                	sub    %edx,%eax
f012371d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123722:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123725:	e9 ab 00 00 00       	jmp    f01237d5 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012372a:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012372f:	83 ec 04             	sub    $0x4,%esp
f0123732:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0123738:	52                   	push   %edx
f0123739:	ff 75 e0             	pushl  -0x20(%ebp)
f012373c:	50                   	push   %eax
f012373d:	e8 27 32 fe ff       	call   f0106969 <get_page_table>
f0123742:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123745:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f012374b:	85 c0                	test   %eax,%eax
f012374d:	75 17                	jne    f0123766 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012374f:	83 ec 04             	sub    $0x4,%esp
f0123752:	68 dc ab 13 f0       	push   $0xf013abdc
f0123757:	68 59 08 00 00       	push   $0x859
f012375c:	68 3a a2 13 f0       	push   $0xf013a23a
f0123761:	e8 40 ca fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123766:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123769:	c1 e8 0c             	shr    $0xc,%eax
f012376c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123771:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123774:	eb 4b                	jmp    f01237c1 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123776:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f012377c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012377f:	c1 e2 02             	shl    $0x2,%edx
f0123782:	01 d0                	add    %edx,%eax
f0123784:	8b 00                	mov    (%eax),%eax
f0123786:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012378b:	89 c1                	mov    %eax,%ecx
f012378d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123793:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123796:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123799:	39 c1                	cmp    %eax,%ecx
f012379b:	74 17                	je     f01237b4 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012379d:	83 ec 04             	sub    $0x4,%esp
f01237a0:	68 35 ac 13 f0       	push   $0xf013ac35
f01237a5:	68 60 08 00 00       	push   $0x860
f01237aa:	68 3a a2 13 f0       	push   $0xf013a23a
f01237af:	e8 f2 c9 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f01237b4:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01237bb:	ff 45 dc             	incl   -0x24(%ebp)
f01237be:	ff 45 e4             	incl   -0x1c(%ebp)
f01237c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01237c4:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01237ca:	7d 09                	jge    f01237d5 <test_kheap_phys_addr+0xdd4>
f01237cc:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01237d3:	7e a1                	jle    f0123776 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01237d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01237d8:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01237de:	0f 82 46 ff ff ff    	jb     f012372a <test_kheap_phys_addr+0xd29>
f01237e4:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01237e6:	83 ec 0c             	sub    $0xc,%esp
f01237e9:	68 54 ac 13 f0       	push   $0xf013ac54
f01237ee:	e8 3a d4 fd ff       	call   f0100c2d <cprintf>
f01237f3:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01237f6:	e8 cf 85 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01237fb:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123801:	e8 86 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123806:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f012380c:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123812:	83 ec 0c             	sub    $0xc,%esp
f0123815:	50                   	push   %eax
f0123816:	e8 db 3b fe ff       	call   f01073f6 <kfree>
f012381b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012381e:	e8 69 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123823:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123829:	74 17                	je     f0123842 <test_kheap_phys_addr+0xe41>
f012382b:	83 ec 04             	sub    $0x4,%esp
f012382e:	68 54 a2 13 f0       	push   $0xf013a254
f0123833:	68 6e 08 00 00       	push   $0x86e
f0123838:	68 3a a2 13 f0       	push   $0xf013a23a
f012383d:	e8 64 c9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123842:	e8 83 85 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0123847:	89 c2                	mov    %eax,%edx
f0123849:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012384f:	29 c2                	sub    %eax,%edx
f0123851:	89 d0                	mov    %edx,%eax
f0123853:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123858:	74 17                	je     f0123871 <test_kheap_phys_addr+0xe70>
f012385a:	83 ec 04             	sub    $0x4,%esp
f012385d:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0123862:	68 6f 08 00 00       	push   $0x86f
f0123867:	68 3a a2 13 f0       	push   $0xf013a23a
f012386c:	e8 35 c9 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123871:	e8 54 85 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0123876:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012387c:	e8 0b 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123881:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0123887:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012388d:	83 ec 0c             	sub    $0xc,%esp
f0123890:	50                   	push   %eax
f0123891:	e8 60 3b fe ff       	call   f01073f6 <kfree>
f0123896:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123899:	e8 ee 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012389e:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01238a4:	74 17                	je     f01238bd <test_kheap_phys_addr+0xebc>
f01238a6:	83 ec 04             	sub    $0x4,%esp
f01238a9:	68 54 a2 13 f0       	push   $0xf013a254
f01238ae:	68 75 08 00 00       	push   $0x875
f01238b3:	68 3a a2 13 f0       	push   $0xf013a23a
f01238b8:	e8 e9 c8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01238bd:	e8 08 85 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01238c2:	89 c2                	mov    %eax,%edx
f01238c4:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01238ca:	29 c2                	sub    %eax,%edx
f01238cc:	89 d0                	mov    %edx,%eax
f01238ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f01238d3:	74 17                	je     f01238ec <test_kheap_phys_addr+0xeeb>
f01238d5:	83 ec 04             	sub    $0x4,%esp
f01238d8:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01238dd:	68 76 08 00 00       	push   $0x876
f01238e2:	68 3a a2 13 f0       	push   $0xf013a23a
f01238e7:	e8 ba c8 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01238ec:	e8 d9 84 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01238f1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238f7:	e8 90 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01238fc:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0123902:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123908:	83 ec 0c             	sub    $0xc,%esp
f012390b:	50                   	push   %eax
f012390c:	e8 e5 3a fe ff       	call   f01073f6 <kfree>
f0123911:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123914:	e8 73 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123919:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012391f:	74 17                	je     f0123938 <test_kheap_phys_addr+0xf37>
f0123921:	83 ec 04             	sub    $0x4,%esp
f0123924:	68 54 a2 13 f0       	push   $0xf013a254
f0123929:	68 7c 08 00 00       	push   $0x87c
f012392e:	68 3a a2 13 f0       	push   $0xf013a23a
f0123933:	e8 6e c8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123938:	e8 8d 84 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012393d:	89 c2                	mov    %eax,%edx
f012393f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123945:	29 c2                	sub    %eax,%edx
f0123947:	89 d0                	mov    %edx,%eax
f0123949:	3d 00 06 00 00       	cmp    $0x600,%eax
f012394e:	74 17                	je     f0123967 <test_kheap_phys_addr+0xf66>
f0123950:	83 ec 04             	sub    $0x4,%esp
f0123953:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0123958:	68 7d 08 00 00       	push   $0x87d
f012395d:	68 3a a2 13 f0       	push   $0xf013a23a
f0123962:	e8 3f c8 fd ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123967:	89 e0                	mov    %esp,%eax
f0123969:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012396b:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0123972:	10 00 00 
f0123975:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012397b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123980:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0123986:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012398c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123991:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0123997:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012399d:	29 d0                	sub    %edx,%eax
f012399f:	89 c1                	mov    %eax,%ecx
f01239a1:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01239a8:	10 00 00 
f01239ab:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01239b0:	0f b6 d0             	movzbl %al,%edx
f01239b3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01239b9:	01 d0                	add    %edx,%eax
f01239bb:	48                   	dec    %eax
f01239bc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01239c2:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01239c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01239cd:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01239d3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01239d9:	29 d0                	sub    %edx,%eax
f01239db:	01 c1                	add    %eax,%ecx
f01239dd:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01239e4:	10 00 00 
f01239e7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01239ec:	0f b6 c0             	movzbl %al,%eax
f01239ef:	c1 e0 04             	shl    $0x4,%eax
f01239f2:	89 c2                	mov    %eax,%edx
f01239f4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01239fa:	01 d0                	add    %edx,%eax
f01239fc:	48                   	dec    %eax
f01239fd:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0123a03:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123a09:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a0e:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0123a14:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123a1a:	29 d0                	sub    %edx,%eax
f0123a1c:	01 c8                	add    %ecx,%eax
f0123a1e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123a23:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123a29:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0123a30:	10 00 00 
f0123a33:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0123a39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a3e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0123a44:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a4f:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0123a55:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123a5b:	29 d0                	sub    %edx,%eax
f0123a5d:	89 c1                	mov    %eax,%ecx
f0123a5f:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0123a66:	10 00 00 
f0123a69:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123a6e:	0f b6 d0             	movzbl %al,%edx
f0123a71:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0123a77:	01 d0                	add    %edx,%eax
f0123a79:	48                   	dec    %eax
f0123a7a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0123a80:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a8b:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0123a91:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123a97:	29 d0                	sub    %edx,%eax
f0123a99:	01 c1                	add    %eax,%ecx
f0123a9b:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0123aa2:	10 00 00 
f0123aa5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123aaa:	0f b6 c0             	movzbl %al,%eax
f0123aad:	c1 e0 04             	shl    $0x4,%eax
f0123ab0:	89 c2                	mov    %eax,%edx
f0123ab2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0123ab8:	01 d0                	add    %edx,%eax
f0123aba:	48                   	dec    %eax
f0123abb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0123ac1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123ac7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123acc:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0123ad2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123ad8:	29 d0                	sub    %edx,%eax
f0123ada:	01 c8                	add    %ecx,%eax
f0123adc:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123ae1:	c1 e8 0c             	shr    $0xc,%eax
f0123ae4:	89 c2                	mov    %eax,%edx
f0123ae6:	4a                   	dec    %edx
f0123ae7:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0123aed:	c1 e0 02             	shl    $0x2,%eax
f0123af0:	8d 50 03             	lea    0x3(%eax),%edx
f0123af3:	b8 10 00 00 00       	mov    $0x10,%eax
f0123af8:	48                   	dec    %eax
f0123af9:	01 d0                	add    %edx,%eax
f0123afb:	bf 10 00 00 00       	mov    $0x10,%edi
f0123b00:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b05:	f7 f7                	div    %edi
f0123b07:	6b c0 10             	imul   $0x10,%eax,%eax
f0123b0a:	29 c4                	sub    %eax,%esp
f0123b0c:	89 e0                	mov    %esp,%eax
f0123b0e:	83 c0 03             	add    $0x3,%eax
f0123b11:	c1 e8 02             	shr    $0x2,%eax
f0123b14:	c1 e0 02             	shl    $0x2,%eax
f0123b17:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0123b1d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123b24:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0123b2b:	10 00 00 
f0123b2e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0123b34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b39:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0123b3f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b4a:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0123b50:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123b56:	29 d0                	sub    %edx,%eax
f0123b58:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123b5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123b60:	eb 29                	jmp    f0123b8b <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123b62:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123b65:	8d 43 01             	lea    0x1(%ebx),%eax
f0123b68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123b6b:	83 ec 0c             	sub    $0xc,%esp
f0123b6e:	ff 75 d8             	pushl  -0x28(%ebp)
f0123b71:	e8 b4 38 fe ff       	call   f010742a <kheap_physical_address>
f0123b76:	83 c4 10             	add    $0x10,%esp
f0123b79:	89 c2                	mov    %eax,%edx
f0123b7b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123b81:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123b84:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123b8b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123b8e:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0123b94:	72 cc                	jb     f0123b62 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123b96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b99:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0123b9f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123ba6:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0123bad:	10 00 00 
f0123bb0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0123bb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123bbb:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0123bc1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123bc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bcc:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0123bd2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123bd8:	29 d0                	sub    %edx,%eax
f0123bda:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123bdf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123be2:	e9 ab 00 00 00       	jmp    f0123c92 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123be7:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0123bec:	83 ec 04             	sub    $0x4,%esp
f0123bef:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0123bf5:	52                   	push   %edx
f0123bf6:	ff 75 d8             	pushl  -0x28(%ebp)
f0123bf9:	50                   	push   %eax
f0123bfa:	e8 6a 2d fe ff       	call   f0106969 <get_page_table>
f0123bff:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123c02:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123c08:	85 c0                	test   %eax,%eax
f0123c0a:	75 17                	jne    f0123c23 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123c0c:	83 ec 04             	sub    $0x4,%esp
f0123c0f:	68 dc ab 13 f0       	push   $0xf013abdc
f0123c14:	68 93 08 00 00       	push   $0x893
f0123c19:	68 3a a2 13 f0       	push   $0xf013a23a
f0123c1e:	e8 83 c5 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123c23:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123c26:	c1 e8 0c             	shr    $0xc,%eax
f0123c29:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123c2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123c31:	eb 4b                	jmp    f0123c7e <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123c33:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123c39:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123c3c:	c1 e2 02             	shl    $0x2,%edx
f0123c3f:	01 d0                	add    %edx,%eax
f0123c41:	8b 00                	mov    (%eax),%eax
f0123c43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123c48:	89 c1                	mov    %eax,%ecx
f0123c4a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123c50:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123c53:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123c56:	39 c1                	cmp    %eax,%ecx
f0123c58:	74 17                	je     f0123c71 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123c5a:	83 ec 04             	sub    $0x4,%esp
f0123c5d:	68 35 ac 13 f0       	push   $0xf013ac35
f0123c62:	68 9a 08 00 00       	push   $0x89a
f0123c67:	68 3a a2 13 f0       	push   $0xf013a23a
f0123c6c:	e8 35 c5 fd ff       	call   f01001a6 <_panic>
				}
				va += PAGE_SIZE;
f0123c71:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123c78:	ff 45 d4             	incl   -0x2c(%ebp)
f0123c7b:	ff 45 e4             	incl   -0x1c(%ebp)
f0123c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c81:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0123c87:	7d 09                	jge    f0123c92 <test_kheap_phys_addr+0x1291>
f0123c89:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123c90:	7e a1                	jle    f0123c33 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123c92:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123c95:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0123c9b:	0f 82 46 ff ff ff    	jb     f0123be7 <test_kheap_phys_addr+0x11e6>
f0123ca1:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123ca3:	83 ec 0c             	sub    $0xc,%esp
f0123ca6:	68 c5 a3 13 f0       	push   $0xf013a3c5
f0123cab:	e8 7d cf fd ff       	call   f0100c2d <cprintf>
f0123cb0:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123cb3:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0123cba:	10 00 00 
f0123cbd:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0123cc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123cc8:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0123cce:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0123cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cd9:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0123cdf:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0123ce5:	29 d0                	sub    %edx,%eax
f0123ce7:	89 c1                	mov    %eax,%ecx
f0123ce9:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0123cf0:	10 00 00 
f0123cf3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123cf8:	0f b6 d0             	movzbl %al,%edx
f0123cfb:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0123d01:	01 d0                	add    %edx,%eax
f0123d03:	48                   	dec    %eax
f0123d04:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0123d0a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0123d10:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d15:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0123d1b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0123d21:	29 d0                	sub    %edx,%eax
f0123d23:	01 c1                	add    %eax,%ecx
f0123d25:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0123d2c:	10 00 00 
f0123d2f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123d34:	0f b6 c0             	movzbl %al,%eax
f0123d37:	c1 e0 04             	shl    $0x4,%eax
f0123d3a:	89 c2                	mov    %eax,%edx
f0123d3c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123d42:	01 d0                	add    %edx,%eax
f0123d44:	48                   	dec    %eax
f0123d45:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0123d4b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0123d51:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d56:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0123d5c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0123d62:	29 d0                	sub    %edx,%eax
f0123d64:	01 c8                	add    %ecx,%eax
f0123d66:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123d6b:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0123d71:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123d78:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0123d7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123d81:	eb 0a                	jmp    f0123d8d <test_kheap_phys_addr+0x138c>
		{
			i++;
f0123d83:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123d86:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123d8d:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123d94:	76 ed                	jbe    f0123d83 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0123d96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123d99:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0123d9f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123da6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0123dac:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123daf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123db6:	e9 cc 00 00 00       	jmp    f0123e87 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123dbb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123dbe:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0123dc3:	83 ec 04             	sub    $0x4,%esp
f0123dc6:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0123dcc:	51                   	push   %ecx
f0123dcd:	52                   	push   %edx
f0123dce:	50                   	push   %eax
f0123dcf:	e8 95 2b fe ff       	call   f0106969 <get_page_table>
f0123dd4:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123dd7:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0123ddd:	85 c0                	test   %eax,%eax
f0123ddf:	75 17                	jne    f0123df8 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123de1:	83 ec 04             	sub    $0x4,%esp
f0123de4:	68 dc ab 13 f0       	push   $0xf013abdc
f0123de9:	68 b6 08 00 00       	push   $0x8b6
f0123dee:	68 3a a2 13 f0       	push   $0xf013a23a
f0123df3:	e8 ae c3 fd ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123df8:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123dff:	eb 67                	jmp    f0123e68 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123e01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e04:	c1 e0 0c             	shl    $0xc,%eax
f0123e07:	89 c2                	mov    %eax,%edx
f0123e09:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0123e0f:	01 d0                	add    %edx,%eax
f0123e11:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123e17:	83 ec 0c             	sub    $0xc,%esp
f0123e1a:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0123e20:	e8 05 36 fe ff       	call   f010742a <kheap_physical_address>
f0123e25:	83 c4 10             	add    $0x10,%esp
f0123e28:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123e2e:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0123e34:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123e37:	c1 e2 02             	shl    $0x2,%edx
f0123e3a:	01 d0                	add    %edx,%eax
f0123e3c:	8b 00                	mov    (%eax),%eax
f0123e3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123e43:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0123e49:	74 17                	je     f0123e62 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123e4b:	83 ec 04             	sub    $0x4,%esp
f0123e4e:	68 35 ac 13 f0       	push   $0xf013ac35
f0123e53:	68 c0 08 00 00       	push   $0x8c0
f0123e58:	68 3a a2 13 f0       	push   $0xf013a23a
f0123e5d:	e8 44 c3 fd ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123e62:	ff 45 cc             	incl   -0x34(%ebp)
f0123e65:	ff 45 e4             	incl   -0x1c(%ebp)
f0123e68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e6b:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0123e71:	7d 09                	jge    f0123e7c <test_kheap_phys_addr+0x147b>
f0123e73:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123e7a:	7e 85                	jle    f0123e01 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123e7c:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123e83:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123e87:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123e8b:	0f 88 2a ff ff ff    	js     f0123dbb <test_kheap_phys_addr+0x13ba>
f0123e91:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123e95:	7f 0d                	jg     f0123ea4 <test_kheap_phys_addr+0x14a3>
f0123e97:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123e9e:	0f 86 17 ff ff ff    	jbe    f0123dbb <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123ea4:	83 ec 0c             	sub    $0xc,%esp
f0123ea7:	68 1e a4 13 f0       	push   $0xf013a41e
f0123eac:	e8 7c cd fd ff       	call   f0100c2d <cprintf>
f0123eb1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123eb4:	83 ec 0c             	sub    $0xc,%esp
f0123eb7:	68 88 ac 13 f0       	push   $0xf013ac88
f0123ebc:	e8 6c cd fd ff       	call   f0100c2d <cprintf>
f0123ec1:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123ec4:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123ec9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123ecc:	5b                   	pop    %ebx
f0123ecd:	5e                   	pop    %esi
f0123ece:	5f                   	pop    %edi
f0123ecf:	5d                   	pop    %ebp
f0123ed0:	c3                   	ret    

f0123ed1 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123ed1:	55                   	push   %ebp
f0123ed2:	89 e5                	mov    %esp,%ebp
f0123ed4:	57                   	push   %edi
f0123ed5:	56                   	push   %esi
f0123ed6:	53                   	push   %ebx
f0123ed7:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0123edd:	89 e0                	mov    %esp,%eax
f0123edf:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123ee1:	83 ec 0c             	sub    $0xc,%esp
f0123ee4:	68 7c a1 13 f0       	push   $0xf013a17c
f0123ee9:	e8 3f cd fd ff       	call   f0100c2d <cprintf>
f0123eee:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123ef1:	83 ec 0c             	sub    $0xc,%esp
f0123ef4:	68 ac a1 13 f0       	push   $0xf013a1ac
f0123ef9:	e8 2f cd fd ff       	call   f0100c2d <cprintf>
f0123efe:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123f01:	83 ec 0c             	sub    $0xc,%esp
f0123f04:	68 7c a1 13 f0       	push   $0xf013a17c
f0123f09:	e8 1f cd fd ff       	call   f0100c2d <cprintf>
f0123f0e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123f11:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123f15:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123f19:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123f1f:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123f25:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123f2c:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123f33:	e8 92 7e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0123f38:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123f3b:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0123f41:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f46:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f4b:	89 d7                	mov    %edx,%edi
f0123f4d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123f4f:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0123f55:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f5f:	89 d7                	mov    %edx,%edi
f0123f61:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123f63:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0123f69:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f73:	89 d7                	mov    %edx,%edi
f0123f75:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f77:	e8 4e 7e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0123f7c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f7f:	e8 08 fd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123f84:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123f87:	83 ec 0c             	sub    $0xc,%esp
f0123f8a:	68 00 fc 1f 00       	push   $0x1ffc00
f0123f8f:	e8 48 34 fe ff       	call   f01073dc <kmalloc>
f0123f94:	83 c4 10             	add    $0x10,%esp
f0123f97:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f9d:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123fa3:	89 c1                	mov    %eax,%ecx
f0123fa5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123fac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123faf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123fb4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123fb7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123fba:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fbf:	f7 75 b4             	divl   -0x4c(%ebp)
f0123fc2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123fc5:	29 d0                	sub    %edx,%eax
f0123fc7:	89 c3                	mov    %eax,%ebx
f0123fc9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123fd0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123fd5:	0f b6 d0             	movzbl %al,%edx
f0123fd8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123fdb:	01 d0                	add    %edx,%eax
f0123fdd:	48                   	dec    %eax
f0123fde:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123fe1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123fe4:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fe9:	f7 75 ac             	divl   -0x54(%ebp)
f0123fec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123fef:	29 d0                	sub    %edx,%eax
f0123ff1:	01 c3                	add    %eax,%ebx
f0123ff3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123ffa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123fff:	0f b6 c0             	movzbl %al,%eax
f0124002:	c1 e0 04             	shl    $0x4,%eax
f0124005:	89 c2                	mov    %eax,%edx
f0124007:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012400a:	01 d0                	add    %edx,%eax
f012400c:	48                   	dec    %eax
f012400d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124010:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124013:	ba 00 00 00 00       	mov    $0x0,%edx
f0124018:	f7 75 a4             	divl   -0x5c(%ebp)
f012401b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012401e:	29 d0                	sub    %edx,%eax
f0124020:	01 d8                	add    %ebx,%eax
f0124022:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124027:	39 c1                	cmp    %eax,%ecx
f0124029:	74 17                	je     f0124042 <test_kheap_virt_addr+0x171>
f012402b:	83 ec 04             	sub    $0x4,%esp
f012402e:	68 20 a3 13 f0       	push   $0xf013a320
f0124033:	68 ed 08 00 00       	push   $0x8ed
f0124038:	68 3a a2 13 f0       	push   $0xf013a23a
f012403d:	e8 64 c1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124042:	e8 45 fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124047:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012404a:	74 17                	je     f0124063 <test_kheap_virt_addr+0x192>
f012404c:	83 ec 04             	sub    $0x4,%esp
f012404f:	68 54 a2 13 f0       	push   $0xf013a254
f0124054:	68 ee 08 00 00       	push   $0x8ee
f0124059:	68 3a a2 13 f0       	push   $0xf013a23a
f012405e:	e8 43 c1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124063:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124066:	e8 5f 7d fe ff       	call   f010bdca <sys_calculate_free_frames>
f012406b:	29 c3                	sub    %eax,%ebx
f012406d:	89 d8                	mov    %ebx,%eax
f012406f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124074:	74 17                	je     f012408d <test_kheap_virt_addr+0x1bc>
f0124076:	83 ec 04             	sub    $0x4,%esp
f0124079:	68 bc a2 13 f0       	push   $0xf013a2bc
f012407e:	68 ef 08 00 00       	push   $0x8ef
f0124083:	68 3a a2 13 f0       	push   $0xf013a23a
f0124088:	e8 19 c1 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012408d:	e8 38 7d fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124092:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124095:	e8 f2 fb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012409a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012409d:	83 ec 0c             	sub    $0xc,%esp
f01240a0:	68 00 fc 1f 00       	push   $0x1ffc00
f01240a5:	e8 32 33 fe ff       	call   f01073dc <kmalloc>
f01240aa:	83 c4 10             	add    $0x10,%esp
f01240ad:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01240b3:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01240b9:	89 c1                	mov    %eax,%ecx
f01240bb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01240c2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01240c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01240ca:	89 45 98             	mov    %eax,-0x68(%ebp)
f01240cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01240d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01240d5:	f7 75 9c             	divl   -0x64(%ebp)
f01240d8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01240db:	29 d0                	sub    %edx,%eax
f01240dd:	89 c3                	mov    %eax,%ebx
f01240df:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01240e6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01240eb:	0f b6 d0             	movzbl %al,%edx
f01240ee:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01240f1:	01 d0                	add    %edx,%eax
f01240f3:	48                   	dec    %eax
f01240f4:	89 45 90             	mov    %eax,-0x70(%ebp)
f01240f7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01240fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01240ff:	f7 75 94             	divl   -0x6c(%ebp)
f0124102:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124105:	29 d0                	sub    %edx,%eax
f0124107:	01 c3                	add    %eax,%ebx
f0124109:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124110:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124115:	0f b6 c0             	movzbl %al,%eax
f0124118:	c1 e0 04             	shl    $0x4,%eax
f012411b:	89 c2                	mov    %eax,%edx
f012411d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124120:	01 d0                	add    %edx,%eax
f0124122:	48                   	dec    %eax
f0124123:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124126:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124129:	ba 00 00 00 00       	mov    $0x0,%edx
f012412e:	f7 75 8c             	divl   -0x74(%ebp)
f0124131:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124134:	29 d0                	sub    %edx,%eax
f0124136:	01 d8                	add    %ebx,%eax
f0124138:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012413d:	39 c1                	cmp    %eax,%ecx
f012413f:	74 17                	je     f0124158 <test_kheap_virt_addr+0x287>
f0124141:	83 ec 04             	sub    $0x4,%esp
f0124144:	68 20 a3 13 f0       	push   $0xf013a320
f0124149:	68 f5 08 00 00       	push   $0x8f5
f012414e:	68 3a a2 13 f0       	push   $0xf013a23a
f0124153:	e8 4e c0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124158:	e8 2f fb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012415d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124160:	74 17                	je     f0124179 <test_kheap_virt_addr+0x2a8>
f0124162:	83 ec 04             	sub    $0x4,%esp
f0124165:	68 54 a2 13 f0       	push   $0xf013a254
f012416a:	68 f6 08 00 00       	push   $0x8f6
f012416f:	68 3a a2 13 f0       	push   $0xf013a23a
f0124174:	e8 2d c0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124179:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012417c:	e8 49 7c fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124181:	29 c3                	sub    %eax,%ebx
f0124183:	89 d8                	mov    %ebx,%eax
f0124185:	3d 00 02 00 00       	cmp    $0x200,%eax
f012418a:	74 17                	je     f01241a3 <test_kheap_virt_addr+0x2d2>
f012418c:	83 ec 04             	sub    $0x4,%esp
f012418f:	68 bc a2 13 f0       	push   $0xf013a2bc
f0124194:	68 f7 08 00 00       	push   $0x8f7
f0124199:	68 3a a2 13 f0       	push   $0xf013a23a
f012419e:	e8 03 c0 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01241a3:	e8 22 7c fe ff       	call   f010bdca <sys_calculate_free_frames>
f01241a8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241ab:	e8 dc fa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01241b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01241b3:	83 ec 0c             	sub    $0xc,%esp
f01241b6:	68 00 08 00 00       	push   $0x800
f01241bb:	e8 1c 32 fe ff       	call   f01073dc <kmalloc>
f01241c0:	83 c4 10             	add    $0x10,%esp
f01241c3:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01241c9:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01241cf:	89 c1                	mov    %eax,%ecx
f01241d1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01241d8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01241db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01241e0:	89 45 80             	mov    %eax,-0x80(%ebp)
f01241e3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01241e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01241eb:	f7 75 84             	divl   -0x7c(%ebp)
f01241ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01241f1:	29 d0                	sub    %edx,%eax
f01241f3:	89 c3                	mov    %eax,%ebx
f01241f5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01241fc:	10 00 00 
f01241ff:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124204:	0f b6 d0             	movzbl %al,%edx
f0124207:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012420d:	01 d0                	add    %edx,%eax
f012420f:	48                   	dec    %eax
f0124210:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124216:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012421c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124221:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124227:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012422d:	29 d0                	sub    %edx,%eax
f012422f:	01 c3                	add    %eax,%ebx
f0124231:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124238:	10 00 00 
f012423b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124240:	0f b6 c0             	movzbl %al,%eax
f0124243:	c1 e0 04             	shl    $0x4,%eax
f0124246:	89 c2                	mov    %eax,%edx
f0124248:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012424e:	01 d0                	add    %edx,%eax
f0124250:	48                   	dec    %eax
f0124251:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124257:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012425d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124262:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124268:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012426e:	29 d0                	sub    %edx,%eax
f0124270:	01 d8                	add    %ebx,%eax
f0124272:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124277:	39 c1                	cmp    %eax,%ecx
f0124279:	74 17                	je     f0124292 <test_kheap_virt_addr+0x3c1>
f012427b:	83 ec 04             	sub    $0x4,%esp
f012427e:	68 20 a3 13 f0       	push   $0xf013a320
f0124283:	68 fd 08 00 00       	push   $0x8fd
f0124288:	68 3a a2 13 f0       	push   $0xf013a23a
f012428d:	e8 14 bf fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124292:	e8 f5 f9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124297:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012429a:	74 17                	je     f01242b3 <test_kheap_virt_addr+0x3e2>
f012429c:	83 ec 04             	sub    $0x4,%esp
f012429f:	68 54 a2 13 f0       	push   $0xf013a254
f01242a4:	68 fe 08 00 00       	push   $0x8fe
f01242a9:	68 3a a2 13 f0       	push   $0xf013a23a
f01242ae:	e8 f3 be fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242b3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01242b6:	e8 0f 7b fe ff       	call   f010bdca <sys_calculate_free_frames>
f01242bb:	29 c3                	sub    %eax,%ebx
f01242bd:	89 d8                	mov    %ebx,%eax
f01242bf:	83 f8 01             	cmp    $0x1,%eax
f01242c2:	74 17                	je     f01242db <test_kheap_virt_addr+0x40a>
f01242c4:	83 ec 04             	sub    $0x4,%esp
f01242c7:	68 bc a2 13 f0       	push   $0xf013a2bc
f01242cc:	68 ff 08 00 00       	push   $0x8ff
f01242d1:	68 3a a2 13 f0       	push   $0xf013a23a
f01242d6:	e8 cb be fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01242db:	e8 ea 7a fe ff       	call   f010bdca <sys_calculate_free_frames>
f01242e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242e3:	e8 a4 f9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01242e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01242eb:	83 ec 0c             	sub    $0xc,%esp
f01242ee:	68 00 08 00 00       	push   $0x800
f01242f3:	e8 e4 30 fe ff       	call   f01073dc <kmalloc>
f01242f8:	83 c4 10             	add    $0x10,%esp
f01242fb:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124301:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124307:	89 c1                	mov    %eax,%ecx
f0124309:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124310:	10 00 00 
f0124313:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124319:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012431e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124324:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012432a:	ba 00 00 00 00       	mov    $0x0,%edx
f012432f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124335:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012433b:	29 d0                	sub    %edx,%eax
f012433d:	89 c3                	mov    %eax,%ebx
f012433f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124346:	10 00 00 
f0124349:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012434e:	0f b6 d0             	movzbl %al,%edx
f0124351:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124357:	01 d0                	add    %edx,%eax
f0124359:	48                   	dec    %eax
f012435a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124360:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124366:	ba 00 00 00 00       	mov    $0x0,%edx
f012436b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124371:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124377:	29 d0                	sub    %edx,%eax
f0124379:	01 c3                	add    %eax,%ebx
f012437b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124382:	10 00 00 
f0124385:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012438a:	0f b6 c0             	movzbl %al,%eax
f012438d:	c1 e0 04             	shl    $0x4,%eax
f0124390:	89 c2                	mov    %eax,%edx
f0124392:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124398:	01 d0                	add    %edx,%eax
f012439a:	48                   	dec    %eax
f012439b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01243a1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01243a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01243ac:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01243b2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01243b8:	29 d0                	sub    %edx,%eax
f01243ba:	01 d8                	add    %ebx,%eax
f01243bc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01243c1:	39 c1                	cmp    %eax,%ecx
f01243c3:	74 17                	je     f01243dc <test_kheap_virt_addr+0x50b>
f01243c5:	83 ec 04             	sub    $0x4,%esp
f01243c8:	68 20 a3 13 f0       	push   $0xf013a320
f01243cd:	68 05 09 00 00       	push   $0x905
f01243d2:	68 3a a2 13 f0       	push   $0xf013a23a
f01243d7:	e8 ca bd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243dc:	e8 ab f8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01243e1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01243e4:	74 17                	je     f01243fd <test_kheap_virt_addr+0x52c>
f01243e6:	83 ec 04             	sub    $0x4,%esp
f01243e9:	68 54 a2 13 f0       	push   $0xf013a254
f01243ee:	68 06 09 00 00       	push   $0x906
f01243f3:	68 3a a2 13 f0       	push   $0xf013a23a
f01243f8:	e8 a9 bd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243fd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124400:	e8 c5 79 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124405:	29 c3                	sub    %eax,%ebx
f0124407:	89 d8                	mov    %ebx,%eax
f0124409:	83 f8 01             	cmp    $0x1,%eax
f012440c:	74 17                	je     f0124425 <test_kheap_virt_addr+0x554>
f012440e:	83 ec 04             	sub    $0x4,%esp
f0124411:	68 bc a2 13 f0       	push   $0xf013a2bc
f0124416:	68 07 09 00 00       	push   $0x907
f012441b:	68 3a a2 13 f0       	push   $0xf013a23a
f0124420:	e8 81 bd fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124425:	e8 a0 79 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012442a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012442d:	e8 5a f8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124432:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124435:	83 ec 0c             	sub    $0xc,%esp
f0124438:	68 00 1c 00 00       	push   $0x1c00
f012443d:	e8 9a 2f fe ff       	call   f01073dc <kmalloc>
f0124442:	83 c4 10             	add    $0x10,%esp
f0124445:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012444b:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124451:	89 c1                	mov    %eax,%ecx
f0124453:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012445a:	10 00 00 
f012445d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124463:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124468:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012446e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124474:	ba 00 00 00 00       	mov    $0x0,%edx
f0124479:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012447f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124485:	29 d0                	sub    %edx,%eax
f0124487:	89 c3                	mov    %eax,%ebx
f0124489:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124490:	10 00 00 
f0124493:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124498:	0f b6 d0             	movzbl %al,%edx
f012449b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01244a1:	01 d0                	add    %edx,%eax
f01244a3:	48                   	dec    %eax
f01244a4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01244aa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01244b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01244b5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01244bb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01244c1:	29 d0                	sub    %edx,%eax
f01244c3:	01 c3                	add    %eax,%ebx
f01244c5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01244cc:	10 00 00 
f01244cf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01244d4:	0f b6 c0             	movzbl %al,%eax
f01244d7:	c1 e0 04             	shl    $0x4,%eax
f01244da:	89 c2                	mov    %eax,%edx
f01244dc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01244e2:	01 d0                	add    %edx,%eax
f01244e4:	48                   	dec    %eax
f01244e5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01244eb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f6:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01244fc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124502:	29 d0                	sub    %edx,%eax
f0124504:	01 d8                	add    %ebx,%eax
f0124506:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012450b:	39 c1                	cmp    %eax,%ecx
f012450d:	74 17                	je     f0124526 <test_kheap_virt_addr+0x655>
f012450f:	83 ec 04             	sub    $0x4,%esp
f0124512:	68 20 a3 13 f0       	push   $0xf013a320
f0124517:	68 0d 09 00 00       	push   $0x90d
f012451c:	68 3a a2 13 f0       	push   $0xf013a23a
f0124521:	e8 80 bc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124526:	e8 61 f7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012452b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012452e:	74 17                	je     f0124547 <test_kheap_virt_addr+0x676>
f0124530:	83 ec 04             	sub    $0x4,%esp
f0124533:	68 54 a2 13 f0       	push   $0xf013a254
f0124538:	68 0e 09 00 00       	push   $0x90e
f012453d:	68 3a a2 13 f0       	push   $0xf013a23a
f0124542:	e8 5f bc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124547:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012454a:	e8 7b 78 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012454f:	29 c3                	sub    %eax,%ebx
f0124551:	89 d8                	mov    %ebx,%eax
f0124553:	83 f8 02             	cmp    $0x2,%eax
f0124556:	74 17                	je     f012456f <test_kheap_virt_addr+0x69e>
f0124558:	83 ec 04             	sub    $0x4,%esp
f012455b:	68 bc a2 13 f0       	push   $0xf013a2bc
f0124560:	68 0f 09 00 00       	push   $0x90f
f0124565:	68 3a a2 13 f0       	push   $0xf013a23a
f012456a:	e8 37 bc fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012456f:	e8 56 78 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124574:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124577:	e8 10 f7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012457c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012457f:	83 ec 0c             	sub    $0xc,%esp
f0124582:	68 00 fc 2f 00       	push   $0x2ffc00
f0124587:	e8 50 2e fe ff       	call   f01073dc <kmalloc>
f012458c:	83 c4 10             	add    $0x10,%esp
f012458f:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124595:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012459b:	89 c1                	mov    %eax,%ecx
f012459d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01245a4:	10 00 00 
f01245a7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01245ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245b2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01245b8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01245be:	ba 00 00 00 00       	mov    $0x0,%edx
f01245c3:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01245c9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01245cf:	29 d0                	sub    %edx,%eax
f01245d1:	89 c3                	mov    %eax,%ebx
f01245d3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01245da:	10 00 00 
f01245dd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01245e2:	0f b6 d0             	movzbl %al,%edx
f01245e5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01245eb:	01 d0                	add    %edx,%eax
f01245ed:	48                   	dec    %eax
f01245ee:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01245f4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01245ff:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124605:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012460b:	29 d0                	sub    %edx,%eax
f012460d:	01 c3                	add    %eax,%ebx
f012460f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124616:	10 00 00 
f0124619:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012461e:	0f b6 c0             	movzbl %al,%eax
f0124621:	c1 e0 04             	shl    $0x4,%eax
f0124624:	89 c2                	mov    %eax,%edx
f0124626:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012462c:	01 d0                	add    %edx,%eax
f012462e:	48                   	dec    %eax
f012462f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124635:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012463b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124640:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124646:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012464c:	29 d0                	sub    %edx,%eax
f012464e:	01 d8                	add    %ebx,%eax
f0124650:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124655:	39 c1                	cmp    %eax,%ecx
f0124657:	74 17                	je     f0124670 <test_kheap_virt_addr+0x79f>
f0124659:	83 ec 04             	sub    $0x4,%esp
f012465c:	68 20 a3 13 f0       	push   $0xf013a320
f0124661:	68 15 09 00 00       	push   $0x915
f0124666:	68 3a a2 13 f0       	push   $0xf013a23a
f012466b:	e8 36 bb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124670:	e8 17 f6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124675:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124678:	74 17                	je     f0124691 <test_kheap_virt_addr+0x7c0>
f012467a:	83 ec 04             	sub    $0x4,%esp
f012467d:	68 54 a2 13 f0       	push   $0xf013a254
f0124682:	68 16 09 00 00       	push   $0x916
f0124687:	68 3a a2 13 f0       	push   $0xf013a23a
f012468c:	e8 15 bb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124691:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124694:	e8 31 77 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124699:	29 c3                	sub    %eax,%ebx
f012469b:	89 d8                	mov    %ebx,%eax
f012469d:	3d 00 03 00 00       	cmp    $0x300,%eax
f01246a2:	74 17                	je     f01246bb <test_kheap_virt_addr+0x7ea>
f01246a4:	83 ec 04             	sub    $0x4,%esp
f01246a7:	68 bc a2 13 f0       	push   $0xf013a2bc
f01246ac:	68 17 09 00 00       	push   $0x917
f01246b1:	68 3a a2 13 f0       	push   $0xf013a23a
f01246b6:	e8 eb ba fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01246bb:	e8 0a 77 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01246c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246c3:	e8 c4 f5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01246c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01246cb:	83 ec 0c             	sub    $0xc,%esp
f01246ce:	68 00 fc 5f 00       	push   $0x5ffc00
f01246d3:	e8 04 2d fe ff       	call   f01073dc <kmalloc>
f01246d8:	83 c4 10             	add    $0x10,%esp
f01246db:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246e1:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01246e7:	89 c1                	mov    %eax,%ecx
f01246e9:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01246f0:	10 00 00 
f01246f3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01246f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246fe:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0124704:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012470a:	ba 00 00 00 00       	mov    $0x0,%edx
f012470f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0124715:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012471b:	29 d0                	sub    %edx,%eax
f012471d:	89 c3                	mov    %eax,%ebx
f012471f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124726:	10 00 00 
f0124729:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012472e:	0f b6 d0             	movzbl %al,%edx
f0124731:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124737:	01 d0                	add    %edx,%eax
f0124739:	48                   	dec    %eax
f012473a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124740:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124746:	ba 00 00 00 00       	mov    $0x0,%edx
f012474b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124751:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124757:	29 d0                	sub    %edx,%eax
f0124759:	01 c3                	add    %eax,%ebx
f012475b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124762:	10 00 00 
f0124765:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012476a:	0f b6 c0             	movzbl %al,%eax
f012476d:	c1 e0 04             	shl    $0x4,%eax
f0124770:	89 c2                	mov    %eax,%edx
f0124772:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124778:	01 d0                	add    %edx,%eax
f012477a:	48                   	dec    %eax
f012477b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124781:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124787:	ba 00 00 00 00       	mov    $0x0,%edx
f012478c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124792:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124798:	29 d0                	sub    %edx,%eax
f012479a:	01 d8                	add    %ebx,%eax
f012479c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01247a1:	39 c1                	cmp    %eax,%ecx
f01247a3:	74 17                	je     f01247bc <test_kheap_virt_addr+0x8eb>
f01247a5:	83 ec 04             	sub    $0x4,%esp
f01247a8:	68 20 a3 13 f0       	push   $0xf013a320
f01247ad:	68 1d 09 00 00       	push   $0x91d
f01247b2:	68 3a a2 13 f0       	push   $0xf013a23a
f01247b7:	e8 ea b9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247bc:	e8 cb f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01247c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01247c4:	74 17                	je     f01247dd <test_kheap_virt_addr+0x90c>
f01247c6:	83 ec 04             	sub    $0x4,%esp
f01247c9:	68 54 a2 13 f0       	push   $0xf013a254
f01247ce:	68 1e 09 00 00       	push   $0x91e
f01247d3:	68 3a a2 13 f0       	push   $0xf013a23a
f01247d8:	e8 c9 b9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247dd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01247e0:	e8 e5 75 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01247e5:	29 c3                	sub    %eax,%ebx
f01247e7:	89 d8                	mov    %ebx,%eax
f01247e9:	3d 00 06 00 00       	cmp    $0x600,%eax
f01247ee:	74 17                	je     f0124807 <test_kheap_virt_addr+0x936>
f01247f0:	83 ec 04             	sub    $0x4,%esp
f01247f3:	68 bc a2 13 f0       	push   $0xf013a2bc
f01247f8:	68 1f 09 00 00       	push   $0x91f
f01247fd:	68 3a a2 13 f0       	push   $0xf013a23a
f0124802:	e8 9f b9 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124807:	e8 be 75 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012480c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012480f:	e8 78 f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124814:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124817:	83 ec 0c             	sub    $0xc,%esp
f012481a:	68 00 38 00 00       	push   $0x3800
f012481f:	e8 b8 2b fe ff       	call   f01073dc <kmalloc>
f0124824:	83 c4 10             	add    $0x10,%esp
f0124827:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012482d:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0124833:	89 c1                	mov    %eax,%ecx
f0124835:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012483c:	10 00 00 
f012483f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124845:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012484a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0124850:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124856:	ba 00 00 00 00       	mov    $0x0,%edx
f012485b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0124861:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124867:	29 d0                	sub    %edx,%eax
f0124869:	89 c3                	mov    %eax,%ebx
f012486b:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0124872:	10 00 00 
f0124875:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012487a:	0f b6 d0             	movzbl %al,%edx
f012487d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124883:	01 d0                	add    %edx,%eax
f0124885:	48                   	dec    %eax
f0124886:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012488c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124892:	ba 00 00 00 00       	mov    $0x0,%edx
f0124897:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012489d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01248a3:	29 d0                	sub    %edx,%eax
f01248a5:	01 c3                	add    %eax,%ebx
f01248a7:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01248ae:	10 00 00 
f01248b1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01248b6:	0f b6 c0             	movzbl %al,%eax
f01248b9:	c1 e0 04             	shl    $0x4,%eax
f01248bc:	89 c2                	mov    %eax,%edx
f01248be:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01248c4:	01 d0                	add    %edx,%eax
f01248c6:	48                   	dec    %eax
f01248c7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01248cd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01248d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01248d8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01248de:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01248e4:	29 d0                	sub    %edx,%eax
f01248e6:	01 d8                	add    %ebx,%eax
f01248e8:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01248ed:	39 c1                	cmp    %eax,%ecx
f01248ef:	74 17                	je     f0124908 <test_kheap_virt_addr+0xa37>
f01248f1:	83 ec 04             	sub    $0x4,%esp
f01248f4:	68 20 a3 13 f0       	push   $0xf013a320
f01248f9:	68 25 09 00 00       	push   $0x925
f01248fe:	68 3a a2 13 f0       	push   $0xf013a23a
f0124903:	e8 9e b8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124908:	e8 7f f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012490d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124910:	74 17                	je     f0124929 <test_kheap_virt_addr+0xa58>
f0124912:	83 ec 04             	sub    $0x4,%esp
f0124915:	68 54 a2 13 f0       	push   $0xf013a254
f012491a:	68 26 09 00 00       	push   $0x926
f012491f:	68 3a a2 13 f0       	push   $0xf013a23a
f0124924:	e8 7d b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124929:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012492c:	e8 99 74 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124931:	29 c3                	sub    %eax,%ebx
f0124933:	89 d8                	mov    %ebx,%eax
f0124935:	83 f8 04             	cmp    $0x4,%eax
f0124938:	74 17                	je     f0124951 <test_kheap_virt_addr+0xa80>
f012493a:	83 ec 04             	sub    $0x4,%esp
f012493d:	68 bc a2 13 f0       	push   $0xf013a2bc
f0124942:	68 27 09 00 00       	push   $0x927
f0124947:	68 3a a2 13 f0       	push   $0xf013a23a
f012494c:	e8 55 b8 fd ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124951:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0124958:	10 00 00 
f012495b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124961:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124966:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012496c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124972:	ba 00 00 00 00       	mov    $0x0,%edx
f0124977:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012497d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124983:	29 d0                	sub    %edx,%eax
f0124985:	89 c1                	mov    %eax,%ecx
f0124987:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012498e:	10 00 00 
f0124991:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124996:	0f b6 d0             	movzbl %al,%edx
f0124999:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012499f:	01 d0                	add    %edx,%eax
f01249a1:	48                   	dec    %eax
f01249a2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01249a8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01249ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01249b3:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01249b9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01249bf:	29 d0                	sub    %edx,%eax
f01249c1:	01 c1                	add    %eax,%ecx
f01249c3:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01249ca:	10 00 00 
f01249cd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01249d2:	0f b6 c0             	movzbl %al,%eax
f01249d5:	c1 e0 04             	shl    $0x4,%eax
f01249d8:	89 c2                	mov    %eax,%edx
f01249da:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01249e0:	01 d0                	add    %edx,%eax
f01249e2:	48                   	dec    %eax
f01249e3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01249e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01249ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01249f4:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01249fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124a00:	29 d0                	sub    %edx,%eax
f0124a02:	01 c1                	add    %eax,%ecx
f0124a04:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0124a0b:	10 00 00 
f0124a0e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124a14:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a19:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0124a1f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124a25:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a2a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0124a30:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124a36:	29 d0                	sub    %edx,%eax
f0124a38:	29 c1                	sub    %eax,%ecx
f0124a3a:	89 c8                	mov    %ecx,%eax
f0124a3c:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124a41:	c1 e8 0c             	shr    $0xc,%eax
f0124a44:	89 c2                	mov    %eax,%edx
f0124a46:	4a                   	dec    %edx
f0124a47:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0124a4d:	c1 e0 02             	shl    $0x2,%eax
f0124a50:	8d 50 03             	lea    0x3(%eax),%edx
f0124a53:	b8 10 00 00 00       	mov    $0x10,%eax
f0124a58:	48                   	dec    %eax
f0124a59:	01 d0                	add    %edx,%eax
f0124a5b:	bf 10 00 00 00       	mov    $0x10,%edi
f0124a60:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a65:	f7 f7                	div    %edi
f0124a67:	6b c0 10             	imul   $0x10,%eax,%eax
f0124a6a:	29 c4                	sub    %eax,%esp
f0124a6c:	89 e0                	mov    %esp,%eax
f0124a6e:	83 c0 03             	add    $0x3,%eax
f0124a71:	c1 e8 02             	shr    $0x2,%eax
f0124a74:	c1 e0 02             	shl    $0x2,%eax
f0124a77:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124a7d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124a84:	10 00 00 
f0124a87:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124a8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a92:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124a98:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aa3:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124aa9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124aaf:	29 d0                	sub    %edx,%eax
f0124ab1:	89 c1                	mov    %eax,%ecx
f0124ab3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124aba:	10 00 00 
f0124abd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124ac2:	0f b6 d0             	movzbl %al,%edx
f0124ac5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124acb:	01 d0                	add    %edx,%eax
f0124acd:	48                   	dec    %eax
f0124ace:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124ad4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0124adf:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124ae5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124aeb:	29 d0                	sub    %edx,%eax
f0124aed:	01 c1                	add    %eax,%ecx
f0124aef:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124af6:	10 00 00 
f0124af9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124afe:	0f b6 c0             	movzbl %al,%eax
f0124b01:	c1 e0 04             	shl    $0x4,%eax
f0124b04:	89 c2                	mov    %eax,%edx
f0124b06:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124b0c:	01 d0                	add    %edx,%eax
f0124b0e:	48                   	dec    %eax
f0124b0f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124b15:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124b1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b20:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124b26:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124b2c:	29 d0                	sub    %edx,%eax
f0124b2e:	01 c1                	add    %eax,%ecx
f0124b30:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124b37:	10 00 00 
f0124b3a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124b40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b45:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124b4b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124b51:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b56:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124b5c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124b62:	29 d0                	sub    %edx,%eax
f0124b64:	29 c1                	sub    %eax,%ecx
f0124b66:	89 c8                	mov    %ecx,%eax
f0124b68:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124b6d:	c1 e8 0c             	shr    $0xc,%eax
f0124b70:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124b76:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0124b7d:	10 00 00 
f0124b80:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124b86:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b8b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0124b91:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124b97:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b9c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0124ba2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124ba8:	29 d0                	sub    %edx,%eax
f0124baa:	89 c1                	mov    %eax,%ecx
f0124bac:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0124bb3:	10 00 00 
f0124bb6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124bbb:	0f b6 d0             	movzbl %al,%edx
f0124bbe:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124bc4:	01 d0                	add    %edx,%eax
f0124bc6:	48                   	dec    %eax
f0124bc7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0124bcd:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124bd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bd8:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0124bde:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124be4:	29 d0                	sub    %edx,%eax
f0124be6:	01 c1                	add    %eax,%ecx
f0124be8:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124bef:	10 00 00 
f0124bf2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124bf7:	0f b6 c0             	movzbl %al,%eax
f0124bfa:	c1 e0 04             	shl    $0x4,%eax
f0124bfd:	89 c2                	mov    %eax,%edx
f0124bff:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124c05:	01 d0                	add    %edx,%eax
f0124c07:	48                   	dec    %eax
f0124c08:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124c0e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124c14:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c19:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124c1f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124c25:	29 d0                	sub    %edx,%eax
f0124c27:	01 c8                	add    %ecx,%eax
f0124c29:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124c2e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0124c34:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124c3b:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0124c42:	10 00 00 
f0124c45:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0124c4b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c50:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0124c56:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124c5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c61:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0124c67:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124c6d:	29 d0                	sub    %edx,%eax
f0124c6f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124c74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124c77:	e9 21 01 00 00       	jmp    f0124d9d <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124c7c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0124c81:	83 ec 04             	sub    $0x4,%esp
f0124c84:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0124c8a:	52                   	push   %edx
f0124c8b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124c8e:	50                   	push   %eax
f0124c8f:	e8 d5 1c fe ff       	call   f0106969 <get_page_table>
f0124c94:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124c97:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124c9d:	85 c0                	test   %eax,%eax
f0124c9f:	75 17                	jne    f0124cb8 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124ca1:	83 ec 04             	sub    $0x4,%esp
f0124ca4:	68 dc ab 13 f0       	push   $0xf013abdc
f0124ca9:	68 38 09 00 00       	push   $0x938
f0124cae:	68 3a a2 13 f0       	push   $0xf013a23a
f0124cb3:	e8 ee b4 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124cb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124cbb:	c1 e8 0c             	shr    $0xc,%eax
f0124cbe:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124cc3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124cc6:	e9 ba 00 00 00       	jmp    f0124d85 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124ccb:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124cd1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124cd4:	c1 e2 02             	shl    $0x2,%edx
f0124cd7:	01 d0                	add    %edx,%eax
f0124cd9:	8b 00                	mov    (%eax),%eax
f0124cdb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124ce0:	89 c1                	mov    %eax,%ecx
f0124ce2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124ce8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124ceb:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124cee:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124cf4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124cf7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124cfa:	83 ec 0c             	sub    $0xc,%esp
f0124cfd:	50                   	push   %eax
f0124cfe:	e8 0d 27 fe ff       	call   f0107410 <kheap_virtual_address>
f0124d03:	83 c4 10             	add    $0x10,%esp
f0124d06:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124d0c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124d12:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124d15:	74 61                	je     f0124d78 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124d17:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124d1d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124d20:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124d23:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0124d29:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124d2c:	c1 e1 02             	shl    $0x2,%ecx
f0124d2f:	01 ca                	add    %ecx,%edx
f0124d31:	8b 12                	mov    (%edx),%edx
f0124d33:	89 d1                	mov    %edx,%ecx
f0124d35:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124d3b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124d3e:	c1 e2 0c             	shl    $0xc,%edx
f0124d41:	89 d3                	mov    %edx,%ebx
f0124d43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124d46:	01 da                	add    %ebx,%edx
f0124d48:	83 ec 0c             	sub    $0xc,%esp
f0124d4b:	50                   	push   %eax
f0124d4c:	51                   	push   %ecx
f0124d4d:	52                   	push   %edx
f0124d4e:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0124d54:	68 d0 ac 13 f0       	push   $0xf013acd0
f0124d59:	e8 cf be fd ff       	call   f0100c2d <cprintf>
f0124d5e:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0124d61:	83 ec 04             	sub    $0x4,%esp
f0124d64:	68 13 ad 13 f0       	push   $0xf013ad13
f0124d69:	68 42 09 00 00       	push   $0x942
f0124d6e:	68 3a a2 13 f0       	push   $0xf013a23a
f0124d73:	e8 2e b4 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0124d78:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124d7f:	ff 45 dc             	incl   -0x24(%ebp)
f0124d82:	ff 45 e0             	incl   -0x20(%ebp)
f0124d85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124d88:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0124d8e:	7d 0d                	jge    f0124d9d <test_kheap_virt_addr+0xecc>
f0124d90:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124d97:	0f 8e 2e ff ff ff    	jle    f0124ccb <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124d9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124da0:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0124da6:	0f 82 d0 fe ff ff    	jb     f0124c7c <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124dac:	83 ec 0c             	sub    $0xc,%esp
f0124daf:	68 30 ad 13 f0       	push   $0xf013ad30
f0124db4:	e8 74 be fd ff       	call   f0100c2d <cprintf>
f0124db9:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124dbc:	e8 09 70 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124dc1:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124dc7:	e8 c0 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124dcc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0124dd2:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124dd8:	83 ec 0c             	sub    $0xc,%esp
f0124ddb:	50                   	push   %eax
f0124ddc:	e8 15 26 fe ff       	call   f01073f6 <kfree>
f0124de1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124de4:	e8 a3 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124de9:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0124def:	74 17                	je     f0124e08 <test_kheap_virt_addr+0xf37>
f0124df1:	83 ec 04             	sub    $0x4,%esp
f0124df4:	68 54 a2 13 f0       	push   $0xf013a254
f0124df9:	68 50 09 00 00       	push   $0x950
f0124dfe:	68 3a a2 13 f0       	push   $0xf013a23a
f0124e03:	e8 9e b3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124e08:	e8 bd 6f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124e0d:	89 c2                	mov    %eax,%edx
f0124e0f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124e15:	29 c2                	sub    %eax,%edx
f0124e17:	89 d0                	mov    %edx,%eax
f0124e19:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124e1e:	74 17                	je     f0124e37 <test_kheap_virt_addr+0xf66>
f0124e20:	83 ec 04             	sub    $0x4,%esp
f0124e23:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0124e28:	68 51 09 00 00       	push   $0x951
f0124e2d:	68 3a a2 13 f0       	push   $0xf013a23a
f0124e32:	e8 6f b3 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124e37:	e8 8e 6f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124e3c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e42:	e8 45 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e47:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0124e4d:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124e53:	83 ec 0c             	sub    $0xc,%esp
f0124e56:	50                   	push   %eax
f0124e57:	e8 9a 25 fe ff       	call   f01073f6 <kfree>
f0124e5c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e5f:	e8 28 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e64:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0124e6a:	74 17                	je     f0124e83 <test_kheap_virt_addr+0xfb2>
f0124e6c:	83 ec 04             	sub    $0x4,%esp
f0124e6f:	68 54 a2 13 f0       	push   $0xf013a254
f0124e74:	68 57 09 00 00       	push   $0x957
f0124e79:	68 3a a2 13 f0       	push   $0xf013a23a
f0124e7e:	e8 23 b3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124e83:	e8 42 6f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124e88:	89 c2                	mov    %eax,%edx
f0124e8a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124e90:	29 c2                	sub    %eax,%edx
f0124e92:	89 d0                	mov    %edx,%eax
f0124e94:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124e99:	74 17                	je     f0124eb2 <test_kheap_virt_addr+0xfe1>
f0124e9b:	83 ec 04             	sub    $0x4,%esp
f0124e9e:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0124ea3:	68 58 09 00 00       	push   $0x958
f0124ea8:	68 3a a2 13 f0       	push   $0xf013a23a
f0124ead:	e8 f4 b2 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124eb2:	e8 13 6f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124eb7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ebd:	e8 ca ed fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124ec2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0124ec8:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124ece:	83 ec 0c             	sub    $0xc,%esp
f0124ed1:	50                   	push   %eax
f0124ed2:	e8 1f 25 fe ff       	call   f01073f6 <kfree>
f0124ed7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124eda:	e8 ad ed fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124edf:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0124ee5:	74 17                	je     f0124efe <test_kheap_virt_addr+0x102d>
f0124ee7:	83 ec 04             	sub    $0x4,%esp
f0124eea:	68 54 a2 13 f0       	push   $0xf013a254
f0124eef:	68 5e 09 00 00       	push   $0x95e
f0124ef4:	68 3a a2 13 f0       	push   $0xf013a23a
f0124ef9:	e8 a8 b2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124efe:	e8 c7 6e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0124f03:	89 c2                	mov    %eax,%edx
f0124f05:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124f0b:	29 c2                	sub    %eax,%edx
f0124f0d:	89 d0                	mov    %edx,%eax
f0124f0f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124f14:	74 17                	je     f0124f2d <test_kheap_virt_addr+0x105c>
f0124f16:	83 ec 04             	sub    $0x4,%esp
f0124f19:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0124f1e:	68 5f 09 00 00       	push   $0x95f
f0124f23:	68 3a a2 13 f0       	push   $0xf013a23a
f0124f28:	e8 79 b2 fd ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124f2d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124f34:	10 00 00 
f0124f37:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124f3d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f42:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124f48:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f53:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124f59:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124f5f:	29 d0                	sub    %edx,%eax
f0124f61:	89 c1                	mov    %eax,%ecx
f0124f63:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0124f6a:	10 00 00 
f0124f6d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124f72:	0f b6 d0             	movzbl %al,%edx
f0124f75:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0124f7b:	01 d0                	add    %edx,%eax
f0124f7d:	48                   	dec    %eax
f0124f7e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0124f84:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f8f:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0124f95:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124f9b:	29 d0                	sub    %edx,%eax
f0124f9d:	01 c1                	add    %eax,%ecx
f0124f9f:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0124fa6:	10 00 00 
f0124fa9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124fae:	0f b6 c0             	movzbl %al,%eax
f0124fb1:	c1 e0 04             	shl    $0x4,%eax
f0124fb4:	89 c2                	mov    %eax,%edx
f0124fb6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124fbc:	01 d0                	add    %edx,%eax
f0124fbe:	48                   	dec    %eax
f0124fbf:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0124fc5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124fcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fd0:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0124fd6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124fdc:	29 d0                	sub    %edx,%eax
f0124fde:	01 c8                	add    %ecx,%eax
f0124fe0:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124fe5:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0124feb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124ff2:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124ff9:	10 00 00 
f0124ffc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125002:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125007:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f012500d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125013:	ba 00 00 00 00       	mov    $0x0,%edx
f0125018:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012501e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125024:	29 d0                	sub    %edx,%eax
f0125026:	89 c1                	mov    %eax,%ecx
f0125028:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f012502f:	10 00 00 
f0125032:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125037:	0f b6 d0             	movzbl %al,%edx
f012503a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125040:	01 d0                	add    %edx,%eax
f0125042:	48                   	dec    %eax
f0125043:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125049:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012504f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125054:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f012505a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125060:	29 d0                	sub    %edx,%eax
f0125062:	01 c1                	add    %eax,%ecx
f0125064:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012506b:	10 00 00 
f012506e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125073:	0f b6 c0             	movzbl %al,%eax
f0125076:	c1 e0 04             	shl    $0x4,%eax
f0125079:	89 c2                	mov    %eax,%edx
f012507b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125081:	01 d0                	add    %edx,%eax
f0125083:	48                   	dec    %eax
f0125084:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012508a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125090:	ba 00 00 00 00       	mov    $0x0,%edx
f0125095:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012509b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01250a1:	29 d0                	sub    %edx,%eax
f01250a3:	01 c1                	add    %eax,%ecx
f01250a5:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01250ac:	10 00 00 
f01250af:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01250b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250ba:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01250c0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01250c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01250cb:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01250d1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01250d7:	29 d0                	sub    %edx,%eax
f01250d9:	29 c1                	sub    %eax,%ecx
f01250db:	89 c8                	mov    %ecx,%eax
f01250dd:	05 00 40 00 00       	add    $0x4000,%eax
f01250e2:	c1 e8 0c             	shr    $0xc,%eax
f01250e5:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01250eb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01250f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01250f4:	eb 41                	jmp    f0125137 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01250f6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01250fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01250ff:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125102:	83 ec 0c             	sub    $0xc,%esp
f0125105:	50                   	push   %eax
f0125106:	e8 05 23 fe ff       	call   f0107410 <kheap_virtual_address>
f012510b:	83 c4 10             	add    $0x10,%esp
f012510e:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125114:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f012511b:	74 17                	je     f0125134 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f012511d:	83 ec 04             	sub    $0x4,%esp
f0125120:	68 13 ad 13 f0       	push   $0xf013ad13
f0125125:	68 70 09 00 00       	push   $0x970
f012512a:	68 3a a2 13 f0       	push   $0xf013a23a
f012512f:	e8 72 b0 fd ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125134:	ff 45 d8             	incl   -0x28(%ebp)
f0125137:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012513d:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125143:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125146:	39 c2                	cmp    %eax,%edx
f0125148:	77 ac                	ja     f01250f6 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012514a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125150:	05 00 04 00 00       	add    $0x400,%eax
f0125155:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125158:	e9 83 00 00 00       	jmp    f01251e0 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012515d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125163:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125166:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125169:	83 ec 0c             	sub    $0xc,%esp
f012516c:	50                   	push   %eax
f012516d:	e8 9e 22 fe ff       	call   f0107410 <kheap_virtual_address>
f0125172:	83 c4 10             	add    $0x10,%esp
f0125175:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012517b:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125182:	10 00 00 
f0125185:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012518b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125190:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125196:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012519c:	ba 00 00 00 00       	mov    $0x0,%edx
f01251a1:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01251a7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01251ad:	29 d0                	sub    %edx,%eax
f01251af:	89 c2                	mov    %eax,%edx
f01251b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01251b4:	c1 e0 0c             	shl    $0xc,%eax
f01251b7:	01 d0                	add    %edx,%eax
f01251b9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01251be:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01251c4:	74 17                	je     f01251dd <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01251c6:	83 ec 04             	sub    $0x4,%esp
f01251c9:	68 13 ad 13 f0       	push   $0xf013ad13
f01251ce:	68 7a 09 00 00       	push   $0x97a
f01251d3:	68 3a a2 13 f0       	push   $0xf013a23a
f01251d8:	e8 c9 af fd ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01251dd:	ff 45 d8             	incl   -0x28(%ebp)
f01251e0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01251e6:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01251ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01251ef:	39 c2                	cmp    %eax,%edx
f01251f1:	0f 87 66 ff ff ff    	ja     f012515d <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01251f7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01251fd:	05 04 07 00 00       	add    $0x704,%eax
f0125202:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125205:	eb 41                	jmp    f0125248 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125207:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012520d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125210:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125213:	83 ec 0c             	sub    $0xc,%esp
f0125216:	50                   	push   %eax
f0125217:	e8 f4 21 fe ff       	call   f0107410 <kheap_virtual_address>
f012521c:	83 c4 10             	add    $0x10,%esp
f012521f:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0125225:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f012522c:	74 17                	je     f0125245 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012522e:	83 ec 04             	sub    $0x4,%esp
f0125231:	68 13 ad 13 f0       	push   $0xf013ad13
f0125236:	68 83 09 00 00       	push   $0x983
f012523b:	68 3a a2 13 f0       	push   $0xf013a23a
f0125240:	e8 61 af fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125245:	ff 45 d8             	incl   -0x28(%ebp)
f0125248:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012524e:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125254:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125257:	39 c2                	cmp    %eax,%edx
f0125259:	77 ac                	ja     f0125207 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012525b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125261:	05 04 0d 00 00       	add    $0xd04,%eax
f0125266:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125269:	e9 83 00 00 00       	jmp    f01252f1 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012526e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125274:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125277:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012527a:	83 ec 0c             	sub    $0xc,%esp
f012527d:	50                   	push   %eax
f012527e:	e8 8d 21 fe ff       	call   f0107410 <kheap_virtual_address>
f0125283:	83 c4 10             	add    $0x10,%esp
f0125286:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012528c:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125293:	10 00 00 
f0125296:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012529c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252a1:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01252a7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01252ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01252b2:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01252b8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01252be:	29 d0                	sub    %edx,%eax
f01252c0:	89 c2                	mov    %eax,%edx
f01252c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252c5:	c1 e0 0c             	shl    $0xc,%eax
f01252c8:	01 d0                	add    %edx,%eax
f01252ca:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01252cf:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01252d5:	74 17                	je     f01252ee <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01252d7:	83 ec 04             	sub    $0x4,%esp
f01252da:	68 13 ad 13 f0       	push   $0xf013ad13
f01252df:	68 8c 09 00 00       	push   $0x98c
f01252e4:	68 3a a2 13 f0       	push   $0xf013a23a
f01252e9:	e8 b8 ae fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01252ee:	ff 45 d8             	incl   -0x28(%ebp)
f01252f1:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01252f7:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01252fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125300:	39 c2                	cmp    %eax,%edx
f0125302:	0f 87 66 ff ff ff    	ja     f012526e <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125308:	83 ec 0c             	sub    $0xc,%esp
f012530b:	68 c5 a3 13 f0       	push   $0xf013a3c5
f0125310:	e8 18 b9 fd ff       	call   f0100c2d <cprintf>
f0125315:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125318:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f012531f:	eb 54                	jmp    f0125375 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125321:	83 ec 0c             	sub    $0xc,%esp
f0125324:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125327:	e8 e4 20 fe ff       	call   f0107410 <kheap_virtual_address>
f012532c:	83 c4 10             	add    $0x10,%esp
f012532f:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125335:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f012533c:	74 30                	je     f012536e <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f012533e:	83 ec 04             	sub    $0x4,%esp
f0125341:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125347:	ff 75 d4             	pushl  -0x2c(%ebp)
f012534a:	68 61 ad 13 f0       	push   $0xf013ad61
f012534f:	e8 d9 b8 fd ff       	call   f0100c2d <cprintf>
f0125354:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125357:	83 ec 04             	sub    $0x4,%esp
f012535a:	68 13 ad 13 f0       	push   $0xf013ad13
f012535f:	68 9c 09 00 00       	push   $0x99c
f0125364:	68 3a a2 13 f0       	push   $0xf013a23a
f0125369:	e8 38 ae fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012536e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125375:	b8 1c 76 6e 00       	mov    $0x6e761c,%eax
f012537a:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f012537d:	72 a2                	jb     f0125321 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012537f:	83 ec 0c             	sub    $0xc,%esp
f0125382:	68 1e a4 13 f0       	push   $0xf013a41e
f0125387:	e8 a1 b8 fd ff       	call   f0100c2d <cprintf>
f012538c:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f012538f:	83 ec 0c             	sub    $0xc,%esp
f0125392:	68 80 ad 13 f0       	push   $0xf013ad80
f0125397:	e8 91 b8 fd ff       	call   f0100c2d <cprintf>
f012539c:	83 c4 10             	add    $0x10,%esp

	return 1;
f012539f:	b8 01 00 00 00       	mov    $0x1,%eax
f01253a4:	89 f4                	mov    %esi,%esp

}
f01253a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01253a9:	5b                   	pop    %ebx
f01253aa:	5e                   	pop    %esi
f01253ab:	5f                   	pop    %edi
f01253ac:	5d                   	pop    %ebp
f01253ad:	c3                   	ret    

f01253ae <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01253ae:	55                   	push   %ebp
f01253af:	89 e5                	mov    %esp,%ebp
f01253b1:	57                   	push   %edi
f01253b2:	56                   	push   %esi
f01253b3:	53                   	push   %ebx
f01253b4:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f01253ba:	a0 cf fc 18 f0       	mov    0xf018fccf,%al
f01253bf:	84 c0                	test   %al,%al
f01253c1:	74 56                	je     f0125419 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01253c3:	c6 05 cf fc 18 f0 00 	movb   $0x0,0xf018fccf
		initFreeFrames = sys_calculate_free_frames() ;
f01253ca:	e8 fb 69 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01253cf:	a3 18 76 6e f0       	mov    %eax,0xf06e7618
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01253d4:	e8 b3 e8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01253d9:	a3 14 76 6e f0       	mov    %eax,0xf06e7614
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01253de:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01253e4:	bb dd ae 13 f0       	mov    $0xf013aedd,%ebx
f01253e9:	ba 11 00 00 00       	mov    $0x11,%edx
f01253ee:	89 c7                	mov    %eax,%edi
f01253f0:	89 de                	mov    %ebx,%esi
f01253f2:	89 d1                	mov    %edx,%ecx
f01253f4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01253f6:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01253fc:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125401:	b0 00                	mov    $0x0,%al
f0125403:	89 d7                	mov    %edx,%edi
f0125405:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125407:	83 ec 0c             	sub    $0xc,%esp
f012540a:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125410:	50                   	push   %eax
f0125411:	e8 79 b8 fd ff       	call   f0100c8f <execute_command>
f0125416:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125419:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125420:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125427:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f012542c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012542f:	eb 2d                	jmp    f012545e <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125431:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125434:	05 18 da 01 00       	add    $0x1da18,%eax
f0125439:	83 ec 08             	sub    $0x8,%esp
f012543c:	68 c7 ad 13 f0       	push   $0xf013adc7
f0125441:	50                   	push   %eax
f0125442:	e8 5c ad 00 00       	call   f01301a3 <strcmp>
f0125447:	83 c4 10             	add    $0x10,%esp
f012544a:	85 c0                	test   %eax,%eax
f012544c:	75 08                	jne    f0125456 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f012544e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125451:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125454:	eb 2f                	jmp    f0125485 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125456:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f012545b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012545e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125462:	74 08                	je     f012546c <test_three_creation_functions+0xbe>
f0125464:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125467:	8b 40 44             	mov    0x44(%eax),%eax
f012546a:	eb 05                	jmp    f0125471 <test_three_creation_functions+0xc3>
f012546c:	b8 00 00 00 00       	mov    $0x0,%eax
f0125471:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f0125476:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f012547b:	85 c0                	test   %eax,%eax
f012547d:	75 b2                	jne    f0125431 <test_three_creation_functions+0x83>
f012547f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125483:	75 ac                	jne    f0125431 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125488:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f012548e:	85 c0                	test   %eax,%eax
f0125490:	74 17                	je     f01254a9 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125492:	83 ec 04             	sub    $0x4,%esp
f0125495:	68 d0 ad 13 f0       	push   $0xf013add0
f012549a:	68 c6 09 00 00       	push   $0x9c6
f012549f:	68 3a a2 13 f0       	push   $0xf013a23a
f01254a4:	e8 fd ac fd ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01254a9:	83 ec 0c             	sub    $0xc,%esp
f01254ac:	ff 75 e4             	pushl  -0x1c(%ebp)
f01254af:	e8 27 21 fe ff       	call   f01075db <env_page_ws_get_size>
f01254b4:	83 c4 10             	add    $0x10,%esp
f01254b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01254ba:	e8 0b 69 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01254bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01254c2:	e8 c5 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01254c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01254ca:	a1 14 76 6e f0       	mov    0xf06e7614,%eax
f01254cf:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01254d2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01254d5:	74 17                	je     f01254ee <test_three_creation_functions+0x140>
f01254d7:	83 ec 04             	sub    $0x4,%esp
f01254da:	68 54 a2 13 f0       	push   $0xf013a254
f01254df:	68 cc 09 00 00       	push   $0x9cc
f01254e4:	68 3a a2 13 f0       	push   $0xf013a23a
f01254e9:	e8 b8 ac fd ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01254ee:	a1 18 76 6e f0       	mov    0xf06e7618,%eax
f01254f3:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01254f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01254f9:	83 c2 15             	add    $0x15,%edx
f01254fc:	39 d0                	cmp    %edx,%eax
f01254fe:	74 17                	je     f0125517 <test_three_creation_functions+0x169>
f0125500:	83 ec 04             	sub    $0x4,%esp
f0125503:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125508:	68 ce 09 00 00       	push   $0x9ce
f012550d:	68 3a a2 13 f0       	push   $0xf013a23a
f0125512:	e8 8f ac fd ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125517:	83 ec 0c             	sub    $0xc,%esp
f012551a:	68 00 10 00 00       	push   $0x1000
f012551f:	e8 b8 1e fe ff       	call   f01073dc <kmalloc>
f0125524:	83 c4 10             	add    $0x10,%esp
f0125527:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f012552a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125531:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125534:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125539:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012553c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012553f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125544:	f7 75 cc             	divl   -0x34(%ebp)
f0125547:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012554a:	29 d0                	sub    %edx,%eax
f012554c:	89 c1                	mov    %eax,%ecx
f012554e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125555:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012555a:	0f b6 d0             	movzbl %al,%edx
f012555d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125560:	01 d0                	add    %edx,%eax
f0125562:	48                   	dec    %eax
f0125563:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125569:	ba 00 00 00 00       	mov    $0x0,%edx
f012556e:	f7 75 c4             	divl   -0x3c(%ebp)
f0125571:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125574:	29 d0                	sub    %edx,%eax
f0125576:	01 c1                	add    %eax,%ecx
f0125578:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012557f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125584:	0f b6 c0             	movzbl %al,%eax
f0125587:	c1 e0 04             	shl    $0x4,%eax
f012558a:	89 c2                	mov    %eax,%edx
f012558c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012558f:	01 d0                	add    %edx,%eax
f0125591:	48                   	dec    %eax
f0125592:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125595:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125598:	ba 00 00 00 00       	mov    $0x0,%edx
f012559d:	f7 75 bc             	divl   -0x44(%ebp)
f01255a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01255a3:	29 d0                	sub    %edx,%eax
f01255a5:	01 c8                	add    %ecx,%eax
f01255a7:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01255ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01255b0:	39 c2                	cmp    %eax,%edx
f01255b2:	74 17                	je     f01255cb <test_three_creation_functions+0x21d>
f01255b4:	83 ec 04             	sub    $0x4,%esp
f01255b7:	68 20 ae 13 f0       	push   $0xf013ae20
f01255bc:	68 d2 09 00 00       	push   $0x9d2
f01255c1:	68 3a a2 13 f0       	push   $0xf013a23a
f01255c6:	e8 db ab fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01255cb:	83 ec 0c             	sub    $0xc,%esp
f01255ce:	68 90 ae 13 f0       	push   $0xf013ae90
f01255d3:	e8 55 b6 fd ff       	call   f0100c2d <cprintf>
f01255d8:	83 c4 10             	add    $0x10,%esp

	return 1;
f01255db:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01255e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01255e3:	5b                   	pop    %ebx
f01255e4:	5e                   	pop    %esi
f01255e5:	5f                   	pop    %edi
f01255e6:	5d                   	pop    %ebp
f01255e7:	c3                   	ret    

f01255e8 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01255e8:	55                   	push   %ebp
f01255e9:	89 e5                	mov    %esp,%ebp
f01255eb:	57                   	push   %edi
f01255ec:	53                   	push   %ebx
f01255ed:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01255f3:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01255f7:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01255fb:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125601:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125607:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012560e:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125615:	e8 b0 67 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012561a:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012561d:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0125623:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125628:	b8 00 00 00 00       	mov    $0x0,%eax
f012562d:	89 d7                	mov    %edx,%edi
f012562f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125631:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0125637:	b9 14 00 00 00       	mov    $0x14,%ecx
f012563c:	b8 00 00 00 00       	mov    $0x0,%eax
f0125641:	89 d7                	mov    %edx,%edi
f0125643:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125645:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012564b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125650:	b8 00 00 00 00       	mov    $0x0,%eax
f0125655:	89 d7                	mov    %edx,%edi
f0125657:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125659:	e8 6c 67 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012565e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125661:	e8 26 e6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125666:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125669:	83 ec 0c             	sub    $0xc,%esp
f012566c:	68 00 fc 1f 00       	push   $0x1ffc00
f0125671:	e8 66 1d fe ff       	call   f01073dc <kmalloc>
f0125676:	83 c4 10             	add    $0x10,%esp
f0125679:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012567f:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125685:	89 c1                	mov    %eax,%ecx
f0125687:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012568e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125691:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125696:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125699:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012569c:	ba 00 00 00 00       	mov    $0x0,%edx
f01256a1:	f7 75 c8             	divl   -0x38(%ebp)
f01256a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01256a7:	29 d0                	sub    %edx,%eax
f01256a9:	89 c3                	mov    %eax,%ebx
f01256ab:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01256b2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01256b7:	0f b6 d0             	movzbl %al,%edx
f01256ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01256bd:	01 d0                	add    %edx,%eax
f01256bf:	48                   	dec    %eax
f01256c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01256c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01256c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01256cb:	f7 75 c0             	divl   -0x40(%ebp)
f01256ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01256d1:	29 d0                	sub    %edx,%eax
f01256d3:	01 c3                	add    %eax,%ebx
f01256d5:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01256dc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01256e1:	0f b6 c0             	movzbl %al,%eax
f01256e4:	c1 e0 04             	shl    $0x4,%eax
f01256e7:	89 c2                	mov    %eax,%edx
f01256e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01256ec:	01 d0                	add    %edx,%eax
f01256ee:	48                   	dec    %eax
f01256ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01256f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01256f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01256fa:	f7 75 b8             	divl   -0x48(%ebp)
f01256fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125700:	29 d0                	sub    %edx,%eax
f0125702:	01 d8                	add    %ebx,%eax
f0125704:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125709:	39 c1                	cmp    %eax,%ecx
f012570b:	74 17                	je     f0125724 <test_kfreeall+0x13c>
f012570d:	83 ec 04             	sub    $0x4,%esp
f0125710:	68 20 a3 13 f0       	push   $0xf013a320
f0125715:	68 f9 09 00 00       	push   $0x9f9
f012571a:	68 3a a2 13 f0       	push   $0xf013a23a
f012571f:	e8 82 aa fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125724:	e8 63 e5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125729:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012572c:	74 17                	je     f0125745 <test_kfreeall+0x15d>
f012572e:	83 ec 04             	sub    $0x4,%esp
f0125731:	68 54 a2 13 f0       	push   $0xf013a254
f0125736:	68 fa 09 00 00       	push   $0x9fa
f012573b:	68 3a a2 13 f0       	push   $0xf013a23a
f0125740:	e8 61 aa fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125745:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125748:	e8 7d 66 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012574d:	29 c3                	sub    %eax,%ebx
f012574f:	89 d8                	mov    %ebx,%eax
f0125751:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125756:	74 17                	je     f012576f <test_kfreeall+0x187>
f0125758:	83 ec 04             	sub    $0x4,%esp
f012575b:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125760:	68 fb 09 00 00       	push   $0x9fb
f0125765:	68 3a a2 13 f0       	push   $0xf013a23a
f012576a:	e8 37 aa fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012576f:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0125776:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125779:	e8 4c 66 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012577e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125781:	e8 06 e5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125786:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125789:	83 ec 0c             	sub    $0xc,%esp
f012578c:	68 00 fc 1f 00       	push   $0x1ffc00
f0125791:	e8 46 1c fe ff       	call   f01073dc <kmalloc>
f0125796:	83 c4 10             	add    $0x10,%esp
f0125799:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012579f:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01257a5:	89 c1                	mov    %eax,%ecx
f01257a7:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01257ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01257b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01257b6:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01257b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01257bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01257c1:	f7 75 b0             	divl   -0x50(%ebp)
f01257c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01257c7:	29 d0                	sub    %edx,%eax
f01257c9:	89 c3                	mov    %eax,%ebx
f01257cb:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01257d2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01257d7:	0f b6 d0             	movzbl %al,%edx
f01257da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01257dd:	01 d0                	add    %edx,%eax
f01257df:	48                   	dec    %eax
f01257e0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01257e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01257e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01257eb:	f7 75 a8             	divl   -0x58(%ebp)
f01257ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01257f1:	29 d0                	sub    %edx,%eax
f01257f3:	01 c3                	add    %eax,%ebx
f01257f5:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01257fc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125801:	0f b6 c0             	movzbl %al,%eax
f0125804:	c1 e0 04             	shl    $0x4,%eax
f0125807:	89 c2                	mov    %eax,%edx
f0125809:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012580c:	01 d0                	add    %edx,%eax
f012580e:	48                   	dec    %eax
f012580f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125812:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125815:	ba 00 00 00 00       	mov    $0x0,%edx
f012581a:	f7 75 a0             	divl   -0x60(%ebp)
f012581d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125820:	29 d0                	sub    %edx,%eax
f0125822:	01 d8                	add    %ebx,%eax
f0125824:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125829:	39 c1                	cmp    %eax,%ecx
f012582b:	74 17                	je     f0125844 <test_kfreeall+0x25c>
f012582d:	83 ec 04             	sub    $0x4,%esp
f0125830:	68 20 a3 13 f0       	push   $0xf013a320
f0125835:	68 02 0a 00 00       	push   $0xa02
f012583a:	68 3a a2 13 f0       	push   $0xf013a23a
f012583f:	e8 62 a9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125844:	e8 43 e4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125849:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012584c:	74 17                	je     f0125865 <test_kfreeall+0x27d>
f012584e:	83 ec 04             	sub    $0x4,%esp
f0125851:	68 54 a2 13 f0       	push   $0xf013a254
f0125856:	68 03 0a 00 00       	push   $0xa03
f012585b:	68 3a a2 13 f0       	push   $0xf013a23a
f0125860:	e8 41 a9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125865:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125868:	e8 5d 65 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012586d:	29 c3                	sub    %eax,%ebx
f012586f:	89 d8                	mov    %ebx,%eax
f0125871:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125876:	74 17                	je     f012588f <test_kfreeall+0x2a7>
f0125878:	83 ec 04             	sub    $0x4,%esp
f012587b:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125880:	68 04 0a 00 00       	push   $0xa04
f0125885:	68 3a a2 13 f0       	push   $0xf013a23a
f012588a:	e8 17 a9 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012588f:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0125896:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125899:	e8 2c 65 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012589e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258a1:	e8 e6 e3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01258a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01258a9:	83 ec 0c             	sub    $0xc,%esp
f01258ac:	68 00 08 00 00       	push   $0x800
f01258b1:	e8 26 1b fe ff       	call   f01073dc <kmalloc>
f01258b6:	83 c4 10             	add    $0x10,%esp
f01258b9:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01258bf:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01258c5:	89 c1                	mov    %eax,%ecx
f01258c7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01258ce:	8b 45 98             	mov    -0x68(%ebp),%eax
f01258d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258d6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01258d9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01258dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01258e1:	f7 75 98             	divl   -0x68(%ebp)
f01258e4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01258e7:	29 d0                	sub    %edx,%eax
f01258e9:	89 c3                	mov    %eax,%ebx
f01258eb:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01258f2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01258f7:	0f b6 d0             	movzbl %al,%edx
f01258fa:	8b 45 90             	mov    -0x70(%ebp),%eax
f01258fd:	01 d0                	add    %edx,%eax
f01258ff:	48                   	dec    %eax
f0125900:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0125903:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125906:	ba 00 00 00 00       	mov    $0x0,%edx
f012590b:	f7 75 90             	divl   -0x70(%ebp)
f012590e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125911:	29 d0                	sub    %edx,%eax
f0125913:	01 c3                	add    %eax,%ebx
f0125915:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012591c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125921:	0f b6 c0             	movzbl %al,%eax
f0125924:	c1 e0 04             	shl    $0x4,%eax
f0125927:	89 c2                	mov    %eax,%edx
f0125929:	8b 45 88             	mov    -0x78(%ebp),%eax
f012592c:	01 d0                	add    %edx,%eax
f012592e:	48                   	dec    %eax
f012592f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0125932:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125935:	ba 00 00 00 00       	mov    $0x0,%edx
f012593a:	f7 75 88             	divl   -0x78(%ebp)
f012593d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125940:	29 d0                	sub    %edx,%eax
f0125942:	01 d8                	add    %ebx,%eax
f0125944:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125949:	39 c1                	cmp    %eax,%ecx
f012594b:	74 17                	je     f0125964 <test_kfreeall+0x37c>
f012594d:	83 ec 04             	sub    $0x4,%esp
f0125950:	68 20 a3 13 f0       	push   $0xf013a320
f0125955:	68 0b 0a 00 00       	push   $0xa0b
f012595a:	68 3a a2 13 f0       	push   $0xf013a23a
f012595f:	e8 42 a8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125964:	e8 23 e3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125969:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012596c:	74 17                	je     f0125985 <test_kfreeall+0x39d>
f012596e:	83 ec 04             	sub    $0x4,%esp
f0125971:	68 54 a2 13 f0       	push   $0xf013a254
f0125976:	68 0c 0a 00 00       	push   $0xa0c
f012597b:	68 3a a2 13 f0       	push   $0xf013a23a
f0125980:	e8 21 a8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125985:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125988:	e8 3d 64 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012598d:	29 c3                	sub    %eax,%ebx
f012598f:	89 d8                	mov    %ebx,%eax
f0125991:	83 f8 01             	cmp    $0x1,%eax
f0125994:	74 17                	je     f01259ad <test_kfreeall+0x3c5>
f0125996:	83 ec 04             	sub    $0x4,%esp
f0125999:	68 bc a2 13 f0       	push   $0xf013a2bc
f012599e:	68 0d 0a 00 00       	push   $0xa0d
f01259a3:	68 3a a2 13 f0       	push   $0xf013a23a
f01259a8:	e8 f9 a7 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01259ad:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01259b4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01259b7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01259bd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01259c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01259c7:	eb 0e                	jmp    f01259d7 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f01259c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01259cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01259cf:	01 d0                	add    %edx,%eax
f01259d1:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01259d4:	ff 45 f4             	incl   -0xc(%ebp)
f01259d7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01259dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01259e0:	7f e7                	jg     f01259c9 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01259e2:	e8 e3 63 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01259e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259ea:	e8 9d e2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01259ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01259f2:	83 ec 0c             	sub    $0xc,%esp
f01259f5:	68 00 08 00 00       	push   $0x800
f01259fa:	e8 dd 19 fe ff       	call   f01073dc <kmalloc>
f01259ff:	83 c4 10             	add    $0x10,%esp
f0125a02:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a08:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125a0e:	89 c1                	mov    %eax,%ecx
f0125a10:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125a17:	10 00 00 
f0125a1a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125a20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a25:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125a2b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125a31:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a36:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125a3c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125a42:	29 d0                	sub    %edx,%eax
f0125a44:	89 c3                	mov    %eax,%ebx
f0125a46:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125a4d:	10 00 00 
f0125a50:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125a55:	0f b6 d0             	movzbl %al,%edx
f0125a58:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125a5e:	01 d0                	add    %edx,%eax
f0125a60:	48                   	dec    %eax
f0125a61:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125a67:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125a6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a72:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125a78:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125a7e:	29 d0                	sub    %edx,%eax
f0125a80:	01 c3                	add    %eax,%ebx
f0125a82:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125a89:	10 00 00 
f0125a8c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125a91:	0f b6 c0             	movzbl %al,%eax
f0125a94:	c1 e0 04             	shl    $0x4,%eax
f0125a97:	89 c2                	mov    %eax,%edx
f0125a99:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125a9f:	01 d0                	add    %edx,%eax
f0125aa1:	48                   	dec    %eax
f0125aa2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125aa8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125aae:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ab3:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125ab9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125abf:	29 d0                	sub    %edx,%eax
f0125ac1:	01 d8                	add    %ebx,%eax
f0125ac3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125ac8:	39 c1                	cmp    %eax,%ecx
f0125aca:	74 17                	je     f0125ae3 <test_kfreeall+0x4fb>
f0125acc:	83 ec 04             	sub    $0x4,%esp
f0125acf:	68 20 a3 13 f0       	push   $0xf013a320
f0125ad4:	68 19 0a 00 00       	push   $0xa19
f0125ad9:	68 3a a2 13 f0       	push   $0xf013a23a
f0125ade:	e8 c3 a6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ae3:	e8 a4 e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ae8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125aeb:	74 17                	je     f0125b04 <test_kfreeall+0x51c>
f0125aed:	83 ec 04             	sub    $0x4,%esp
f0125af0:	68 54 a2 13 f0       	push   $0xf013a254
f0125af5:	68 1a 0a 00 00       	push   $0xa1a
f0125afa:	68 3a a2 13 f0       	push   $0xf013a23a
f0125aff:	e8 a2 a6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b04:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125b07:	e8 be 62 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125b0c:	29 c3                	sub    %eax,%ebx
f0125b0e:	89 d8                	mov    %ebx,%eax
f0125b10:	83 f8 01             	cmp    $0x1,%eax
f0125b13:	74 17                	je     f0125b2c <test_kfreeall+0x544>
f0125b15:	83 ec 04             	sub    $0x4,%esp
f0125b18:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125b1d:	68 1b 0a 00 00       	push   $0xa1b
f0125b22:	68 3a a2 13 f0       	push   $0xf013a23a
f0125b27:	e8 7a a6 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125b2c:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0125b33:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125b36:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125b3c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125b3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b46:	eb 0e                	jmp    f0125b56 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0125b48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125b4b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125b4e:	01 d0                	add    %edx,%eax
f0125b50:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125b53:	ff 45 f4             	incl   -0xc(%ebp)
f0125b56:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125b5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b5f:	7f e7                	jg     f0125b48 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b61:	e8 64 62 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125b66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b69:	e8 1e e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125b6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125b71:	83 ec 0c             	sub    $0xc,%esp
f0125b74:	68 00 1c 00 00       	push   $0x1c00
f0125b79:	e8 5e 18 fe ff       	call   f01073dc <kmalloc>
f0125b7e:	83 c4 10             	add    $0x10,%esp
f0125b81:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b87:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125b8d:	89 c1                	mov    %eax,%ecx
f0125b8f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125b96:	10 00 00 
f0125b99:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125b9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ba4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125baa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125bb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bb5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125bbb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125bc1:	29 d0                	sub    %edx,%eax
f0125bc3:	89 c3                	mov    %eax,%ebx
f0125bc5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125bcc:	10 00 00 
f0125bcf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125bd4:	0f b6 d0             	movzbl %al,%edx
f0125bd7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125bdd:	01 d0                	add    %edx,%eax
f0125bdf:	48                   	dec    %eax
f0125be0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125be6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125bec:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bf1:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125bf7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125bfd:	29 d0                	sub    %edx,%eax
f0125bff:	01 c3                	add    %eax,%ebx
f0125c01:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125c08:	10 00 00 
f0125c0b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125c10:	0f b6 c0             	movzbl %al,%eax
f0125c13:	c1 e0 04             	shl    $0x4,%eax
f0125c16:	89 c2                	mov    %eax,%edx
f0125c18:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125c1e:	01 d0                	add    %edx,%eax
f0125c20:	48                   	dec    %eax
f0125c21:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125c27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125c2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c32:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125c38:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125c3e:	29 d0                	sub    %edx,%eax
f0125c40:	01 d8                	add    %ebx,%eax
f0125c42:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125c47:	39 c1                	cmp    %eax,%ecx
f0125c49:	74 17                	je     f0125c62 <test_kfreeall+0x67a>
f0125c4b:	83 ec 04             	sub    $0x4,%esp
f0125c4e:	68 20 a3 13 f0       	push   $0xf013a320
f0125c53:	68 27 0a 00 00       	push   $0xa27
f0125c58:	68 3a a2 13 f0       	push   $0xf013a23a
f0125c5d:	e8 44 a5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c62:	e8 25 e0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125c67:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125c6a:	74 17                	je     f0125c83 <test_kfreeall+0x69b>
f0125c6c:	83 ec 04             	sub    $0x4,%esp
f0125c6f:	68 54 a2 13 f0       	push   $0xf013a254
f0125c74:	68 28 0a 00 00       	push   $0xa28
f0125c79:	68 3a a2 13 f0       	push   $0xf013a23a
f0125c7e:	e8 23 a5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c83:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125c86:	e8 3f 61 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125c8b:	29 c3                	sub    %eax,%ebx
f0125c8d:	89 d8                	mov    %ebx,%eax
f0125c8f:	83 f8 02             	cmp    $0x2,%eax
f0125c92:	74 17                	je     f0125cab <test_kfreeall+0x6c3>
f0125c94:	83 ec 04             	sub    $0x4,%esp
f0125c97:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125c9c:	68 29 0a 00 00       	push   $0xa29
f0125ca1:	68 3a a2 13 f0       	push   $0xf013a23a
f0125ca6:	e8 fb a4 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125cab:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0125cb2:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0125cb5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125cbb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125cc5:	eb 0e                	jmp    f0125cd5 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0125cc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125cca:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125ccd:	01 d0                	add    %edx,%eax
f0125ccf:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125cd2:	ff 45 f4             	incl   -0xc(%ebp)
f0125cd5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125cdb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125cde:	7f e7                	jg     f0125cc7 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125ce0:	e8 e5 60 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125ce5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ce8:	e8 9f df fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ced:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125cf0:	83 ec 0c             	sub    $0xc,%esp
f0125cf3:	68 00 fc 2f 00       	push   $0x2ffc00
f0125cf8:	e8 df 16 fe ff       	call   f01073dc <kmalloc>
f0125cfd:	83 c4 10             	add    $0x10,%esp
f0125d00:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d06:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0125d0c:	89 c1                	mov    %eax,%ecx
f0125d0e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125d15:	10 00 00 
f0125d18:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125d1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d23:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125d29:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125d2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d34:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125d3a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125d40:	29 d0                	sub    %edx,%eax
f0125d42:	89 c3                	mov    %eax,%ebx
f0125d44:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125d4b:	10 00 00 
f0125d4e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125d53:	0f b6 d0             	movzbl %al,%edx
f0125d56:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125d5c:	01 d0                	add    %edx,%eax
f0125d5e:	48                   	dec    %eax
f0125d5f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125d65:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125d6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d70:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125d76:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125d7c:	29 d0                	sub    %edx,%eax
f0125d7e:	01 c3                	add    %eax,%ebx
f0125d80:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125d87:	10 00 00 
f0125d8a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125d8f:	0f b6 c0             	movzbl %al,%eax
f0125d92:	c1 e0 04             	shl    $0x4,%eax
f0125d95:	89 c2                	mov    %eax,%edx
f0125d97:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125d9d:	01 d0                	add    %edx,%eax
f0125d9f:	48                   	dec    %eax
f0125da0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125da6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125dac:	ba 00 00 00 00       	mov    $0x0,%edx
f0125db1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125db7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125dbd:	29 d0                	sub    %edx,%eax
f0125dbf:	01 d8                	add    %ebx,%eax
f0125dc1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125dc6:	39 c1                	cmp    %eax,%ecx
f0125dc8:	74 17                	je     f0125de1 <test_kfreeall+0x7f9>
f0125dca:	83 ec 04             	sub    $0x4,%esp
f0125dcd:	68 20 a3 13 f0       	push   $0xf013a320
f0125dd2:	68 35 0a 00 00       	push   $0xa35
f0125dd7:	68 3a a2 13 f0       	push   $0xf013a23a
f0125ddc:	e8 c5 a3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125de1:	e8 a6 de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125de6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125de9:	74 17                	je     f0125e02 <test_kfreeall+0x81a>
f0125deb:	83 ec 04             	sub    $0x4,%esp
f0125dee:	68 54 a2 13 f0       	push   $0xf013a254
f0125df3:	68 36 0a 00 00       	push   $0xa36
f0125df8:	68 3a a2 13 f0       	push   $0xf013a23a
f0125dfd:	e8 a4 a3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e02:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125e05:	e8 c0 5f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125e0a:	29 c3                	sub    %eax,%ebx
f0125e0c:	89 d8                	mov    %ebx,%eax
f0125e0e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125e13:	74 17                	je     f0125e2c <test_kfreeall+0x844>
f0125e15:	83 ec 04             	sub    $0x4,%esp
f0125e18:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125e1d:	68 37 0a 00 00       	push   $0xa37
f0125e22:	68 3a a2 13 f0       	push   $0xf013a23a
f0125e27:	e8 7a a3 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0125e2c:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0125e33:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125e36:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0125e3c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125e3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125e46:	eb 0e                	jmp    f0125e56 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0125e48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125e4b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125e4e:	01 d0                	add    %edx,%eax
f0125e50:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125e53:	ff 45 f4             	incl   -0xc(%ebp)
f0125e56:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0125e5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e5f:	7f e7                	jg     f0125e48 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e61:	e8 64 5f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125e66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e69:	e8 1e de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125e6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125e71:	83 ec 0c             	sub    $0xc,%esp
f0125e74:	68 00 fc 5f 00       	push   $0x5ffc00
f0125e79:	e8 5e 15 fe ff       	call   f01073dc <kmalloc>
f0125e7e:	83 c4 10             	add    $0x10,%esp
f0125e81:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e87:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0125e8d:	89 c1                	mov    %eax,%ecx
f0125e8f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125e96:	10 00 00 
f0125e99:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125e9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ea4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125eaa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125eb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eb5:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125ebb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125ec1:	29 d0                	sub    %edx,%eax
f0125ec3:	89 c3                	mov    %eax,%ebx
f0125ec5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125ecc:	10 00 00 
f0125ecf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125ed4:	0f b6 d0             	movzbl %al,%edx
f0125ed7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125edd:	01 d0                	add    %edx,%eax
f0125edf:	48                   	dec    %eax
f0125ee0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125ee6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125eec:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ef1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125ef7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125efd:	29 d0                	sub    %edx,%eax
f0125eff:	01 c3                	add    %eax,%ebx
f0125f01:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125f08:	10 00 00 
f0125f0b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125f10:	0f b6 c0             	movzbl %al,%eax
f0125f13:	c1 e0 04             	shl    $0x4,%eax
f0125f16:	89 c2                	mov    %eax,%edx
f0125f18:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125f1e:	01 d0                	add    %edx,%eax
f0125f20:	48                   	dec    %eax
f0125f21:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125f27:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125f2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f32:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125f38:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125f3e:	29 d0                	sub    %edx,%eax
f0125f40:	01 d8                	add    %ebx,%eax
f0125f42:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125f47:	39 c1                	cmp    %eax,%ecx
f0125f49:	74 17                	je     f0125f62 <test_kfreeall+0x97a>
f0125f4b:	83 ec 04             	sub    $0x4,%esp
f0125f4e:	68 20 a3 13 f0       	push   $0xf013a320
f0125f53:	68 43 0a 00 00       	push   $0xa43
f0125f58:	68 3a a2 13 f0       	push   $0xf013a23a
f0125f5d:	e8 44 a2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f62:	e8 25 dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125f67:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f6a:	74 17                	je     f0125f83 <test_kfreeall+0x99b>
f0125f6c:	83 ec 04             	sub    $0x4,%esp
f0125f6f:	68 54 a2 13 f0       	push   $0xf013a254
f0125f74:	68 44 0a 00 00       	push   $0xa44
f0125f79:	68 3a a2 13 f0       	push   $0xf013a23a
f0125f7e:	e8 23 a2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f83:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125f86:	e8 3f 5e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125f8b:	29 c3                	sub    %eax,%ebx
f0125f8d:	89 d8                	mov    %ebx,%eax
f0125f8f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125f94:	74 17                	je     f0125fad <test_kfreeall+0x9c5>
f0125f96:	83 ec 04             	sub    $0x4,%esp
f0125f99:	68 bc a2 13 f0       	push   $0xf013a2bc
f0125f9e:	68 45 0a 00 00       	push   $0xa45
f0125fa3:	68 3a a2 13 f0       	push   $0xf013a23a
f0125fa8:	e8 f9 a1 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125fad:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0125fb4:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125fb7:	e8 0e 5e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0125fbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125fbf:	e8 c8 dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125fc4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125fc7:	83 ec 0c             	sub    $0xc,%esp
f0125fca:	68 00 38 00 00       	push   $0x3800
f0125fcf:	e8 08 14 fe ff       	call   f01073dc <kmalloc>
f0125fd4:	83 c4 10             	add    $0x10,%esp
f0125fd7:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125fdd:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0125fe3:	89 c1                	mov    %eax,%ecx
f0125fe5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125fec:	10 00 00 
f0125fef:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125ff5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ffa:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126000:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126006:	ba 00 00 00 00       	mov    $0x0,%edx
f012600b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126011:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126017:	29 d0                	sub    %edx,%eax
f0126019:	89 c3                	mov    %eax,%ebx
f012601b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126022:	10 00 00 
f0126025:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012602a:	0f b6 d0             	movzbl %al,%edx
f012602d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126033:	01 d0                	add    %edx,%eax
f0126035:	48                   	dec    %eax
f0126036:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012603c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126042:	ba 00 00 00 00       	mov    $0x0,%edx
f0126047:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012604d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126053:	29 d0                	sub    %edx,%eax
f0126055:	01 c3                	add    %eax,%ebx
f0126057:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012605e:	10 00 00 
f0126061:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126066:	0f b6 c0             	movzbl %al,%eax
f0126069:	c1 e0 04             	shl    $0x4,%eax
f012606c:	89 c2                	mov    %eax,%edx
f012606e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126074:	01 d0                	add    %edx,%eax
f0126076:	48                   	dec    %eax
f0126077:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012607d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126083:	ba 00 00 00 00       	mov    $0x0,%edx
f0126088:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012608e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126094:	29 d0                	sub    %edx,%eax
f0126096:	01 d8                	add    %ebx,%eax
f0126098:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012609d:	39 c1                	cmp    %eax,%ecx
f012609f:	74 17                	je     f01260b8 <test_kfreeall+0xad0>
f01260a1:	83 ec 04             	sub    $0x4,%esp
f01260a4:	68 20 a3 13 f0       	push   $0xf013a320
f01260a9:	68 4c 0a 00 00       	push   $0xa4c
f01260ae:	68 3a a2 13 f0       	push   $0xf013a23a
f01260b3:	e8 ee a0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260b8:	e8 cf db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01260bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01260c0:	74 17                	je     f01260d9 <test_kfreeall+0xaf1>
f01260c2:	83 ec 04             	sub    $0x4,%esp
f01260c5:	68 54 a2 13 f0       	push   $0xf013a254
f01260ca:	68 4d 0a 00 00       	push   $0xa4d
f01260cf:	68 3a a2 13 f0       	push   $0xf013a23a
f01260d4:	e8 cd a0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01260d9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01260dc:	e8 e9 5c fe ff       	call   f010bdca <sys_calculate_free_frames>
f01260e1:	29 c3                	sub    %eax,%ebx
f01260e3:	89 d8                	mov    %ebx,%eax
f01260e5:	83 f8 04             	cmp    $0x4,%eax
f01260e8:	74 17                	je     f0126101 <test_kfreeall+0xb19>
f01260ea:	83 ec 04             	sub    $0x4,%esp
f01260ed:	68 bc a2 13 f0       	push   $0xf013a2bc
f01260f2:	68 4e 0a 00 00       	push   $0xa4e
f01260f7:	68 3a a2 13 f0       	push   $0xf013a23a
f01260fc:	e8 a5 a0 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126101:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126108:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012610b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126111:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126114:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012611b:	eb 0e                	jmp    f012612b <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f012611d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126120:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126123:	01 d0                	add    %edx,%eax
f0126125:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126128:	ff 45 f4             	incl   -0xc(%ebp)
f012612b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126131:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126134:	7f e7                	jg     f012611d <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126136:	e8 8f 5c fe ff       	call   f010bdca <sys_calculate_free_frames>
f012613b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126141:	e8 46 db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126146:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012614c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126152:	83 ec 0c             	sub    $0xc,%esp
f0126155:	50                   	push   %eax
f0126156:	e8 9b 12 fe ff       	call   f01073f6 <kfree>
f012615b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012615e:	e8 29 db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126163:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126169:	74 17                	je     f0126182 <test_kfreeall+0xb9a>
f012616b:	83 ec 04             	sub    $0x4,%esp
f012616e:	68 54 a2 13 f0       	push   $0xf013a254
f0126173:	68 5d 0a 00 00       	push   $0xa5d
f0126178:	68 3a a2 13 f0       	push   $0xf013a23a
f012617d:	e8 24 a0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126182:	e8 43 5c fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126187:	89 c2                	mov    %eax,%edx
f0126189:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012618f:	29 c2                	sub    %eax,%edx
f0126191:	89 d0                	mov    %edx,%eax
f0126193:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126198:	74 17                	je     f01261b1 <test_kfreeall+0xbc9>
f012619a:	83 ec 04             	sub    $0x4,%esp
f012619d:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01261a2:	68 5e 0a 00 00       	push   $0xa5e
f01261a7:	68 3a a2 13 f0       	push   $0xf013a23a
f01261ac:	e8 f5 9f fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01261b1:	e8 14 5c fe ff       	call   f010bdca <sys_calculate_free_frames>
f01261b6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261bc:	e8 cb da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01261c1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01261c7:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01261cd:	83 ec 0c             	sub    $0xc,%esp
f01261d0:	50                   	push   %eax
f01261d1:	e8 20 12 fe ff       	call   f01073f6 <kfree>
f01261d6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261d9:	e8 ae da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01261de:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01261e4:	74 17                	je     f01261fd <test_kfreeall+0xc15>
f01261e6:	83 ec 04             	sub    $0x4,%esp
f01261e9:	68 54 a2 13 f0       	push   $0xf013a254
f01261ee:	68 64 0a 00 00       	push   $0xa64
f01261f3:	68 3a a2 13 f0       	push   $0xf013a23a
f01261f8:	e8 a9 9f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01261fd:	e8 c8 5b fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126202:	89 c2                	mov    %eax,%edx
f0126204:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012620a:	29 c2                	sub    %eax,%edx
f012620c:	89 d0                	mov    %edx,%eax
f012620e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126213:	74 17                	je     f012622c <test_kfreeall+0xc44>
f0126215:	83 ec 04             	sub    $0x4,%esp
f0126218:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012621d:	68 65 0a 00 00       	push   $0xa65
f0126222:	68 3a a2 13 f0       	push   $0xf013a23a
f0126227:	e8 7a 9f fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012622c:	e8 99 5b fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126231:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126237:	e8 50 da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012623c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126242:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126248:	83 ec 0c             	sub    $0xc,%esp
f012624b:	50                   	push   %eax
f012624c:	e8 a5 11 fe ff       	call   f01073f6 <kfree>
f0126251:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126254:	e8 33 da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126259:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012625f:	74 17                	je     f0126278 <test_kfreeall+0xc90>
f0126261:	83 ec 04             	sub    $0x4,%esp
f0126264:	68 54 a2 13 f0       	push   $0xf013a254
f0126269:	68 6b 0a 00 00       	push   $0xa6b
f012626e:	68 3a a2 13 f0       	push   $0xf013a23a
f0126273:	e8 2e 9f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126278:	e8 4d 5b fe ff       	call   f010bdca <sys_calculate_free_frames>
f012627d:	89 c2                	mov    %eax,%edx
f012627f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126285:	29 c2                	sub    %eax,%edx
f0126287:	89 d0                	mov    %edx,%eax
f0126289:	3d 00 06 00 00       	cmp    $0x600,%eax
f012628e:	74 17                	je     f01262a7 <test_kfreeall+0xcbf>
f0126290:	83 ec 04             	sub    $0x4,%esp
f0126293:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0126298:	68 6c 0a 00 00       	push   $0xa6c
f012629d:	68 3a a2 13 f0       	push   $0xf013a23a
f01262a2:	e8 ff 9e fd ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01262a7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01262ad:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01262b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01262b7:	eb 1e                	jmp    f01262d7 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01262b9:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01262bf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01262c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01262c5:	01 c8                	add    %ecx,%eax
f01262c7:	8a 00                	mov    (%eax),%al
f01262c9:	0f be c0             	movsbl %al,%eax
f01262cc:	01 d0                	add    %edx,%eax
f01262ce:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01262d4:	ff 45 f4             	incl   -0xc(%ebp)
f01262d7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01262dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01262e0:	7f d7                	jg     f01262b9 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01262e2:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01262e8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01262ee:	01 c0                	add    %eax,%eax
f01262f0:	39 c2                	cmp    %eax,%edx
f01262f2:	74 17                	je     f012630b <test_kfreeall+0xd23>
f01262f4:	83 ec 04             	sub    $0x4,%esp
f01262f7:	68 20 aa 13 f0       	push   $0xf013aa20
f01262fc:	68 78 0a 00 00       	push   $0xa78
f0126301:	68 3a a2 13 f0       	push   $0xf013a23a
f0126306:	e8 9b 9e fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012630b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126311:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126314:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012631b:	eb 1e                	jmp    f012633b <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f012631d:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126323:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126326:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126329:	01 c8                	add    %ecx,%eax
f012632b:	8a 00                	mov    (%eax),%al
f012632d:	0f be c0             	movsbl %al,%eax
f0126330:	01 d0                	add    %edx,%eax
f0126332:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126338:	ff 45 f4             	incl   -0xc(%ebp)
f012633b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126341:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126344:	7f d7                	jg     f012631d <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126346:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012634c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126352:	89 c1                	mov    %eax,%ecx
f0126354:	01 c9                	add    %ecx,%ecx
f0126356:	01 c8                	add    %ecx,%eax
f0126358:	39 c2                	cmp    %eax,%edx
f012635a:	74 17                	je     f0126373 <test_kfreeall+0xd8b>
f012635c:	83 ec 04             	sub    $0x4,%esp
f012635f:	68 20 aa 13 f0       	push   $0xf013aa20
f0126364:	68 80 0a 00 00       	push   $0xa80
f0126369:	68 3a a2 13 f0       	push   $0xf013a23a
f012636e:	e8 33 9e fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126373:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126379:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012637c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126383:	eb 1e                	jmp    f01263a3 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126385:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012638b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012638e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126391:	01 c8                	add    %ecx,%eax
f0126393:	8a 00                	mov    (%eax),%al
f0126395:	0f be c0             	movsbl %al,%eax
f0126398:	01 d0                	add    %edx,%eax
f012639a:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01263a0:	ff 45 f4             	incl   -0xc(%ebp)
f01263a3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01263a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01263ac:	7f d7                	jg     f0126385 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01263ae:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01263b4:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01263ba:	c1 e2 02             	shl    $0x2,%edx
f01263bd:	39 d0                	cmp    %edx,%eax
f01263bf:	74 17                	je     f01263d8 <test_kfreeall+0xdf0>
f01263c1:	83 ec 04             	sub    $0x4,%esp
f01263c4:	68 20 aa 13 f0       	push   $0xf013aa20
f01263c9:	68 88 0a 00 00       	push   $0xa88
f01263ce:	68 3a a2 13 f0       	push   $0xf013a23a
f01263d3:	e8 ce 9d fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01263d8:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01263de:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01263e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01263e8:	eb 1e                	jmp    f0126408 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01263ea:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01263f0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01263f3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01263f6:	01 c8                	add    %ecx,%eax
f01263f8:	8a 00                	mov    (%eax),%al
f01263fa:	0f be c0             	movsbl %al,%eax
f01263fd:	01 d0                	add    %edx,%eax
f01263ff:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126405:	ff 45 f4             	incl   -0xc(%ebp)
f0126408:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012640e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126411:	7f d7                	jg     f01263ea <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126413:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126419:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012641f:	89 d0                	mov    %edx,%eax
f0126421:	c1 e0 02             	shl    $0x2,%eax
f0126424:	01 d0                	add    %edx,%eax
f0126426:	39 c1                	cmp    %eax,%ecx
f0126428:	74 17                	je     f0126441 <test_kfreeall+0xe59>
f012642a:	83 ec 04             	sub    $0x4,%esp
f012642d:	68 20 aa 13 f0       	push   $0xf013aa20
f0126432:	68 90 0a 00 00       	push   $0xa90
f0126437:	68 3a a2 13 f0       	push   $0xf013a23a
f012643c:	e8 65 9d fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126441:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126447:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012644a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126451:	eb 1e                	jmp    f0126471 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126453:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126459:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012645c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012645f:	01 c8                	add    %ecx,%eax
f0126461:	8a 00                	mov    (%eax),%al
f0126463:	0f be c0             	movsbl %al,%eax
f0126466:	01 d0                	add    %edx,%eax
f0126468:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012646e:	ff 45 f4             	incl   -0xc(%ebp)
f0126471:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126477:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012647a:	7f d7                	jg     f0126453 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012647c:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126482:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126488:	89 d0                	mov    %edx,%eax
f012648a:	01 c0                	add    %eax,%eax
f012648c:	01 d0                	add    %edx,%eax
f012648e:	01 c0                	add    %eax,%eax
f0126490:	01 d0                	add    %edx,%eax
f0126492:	39 c1                	cmp    %eax,%ecx
f0126494:	74 17                	je     f01264ad <test_kfreeall+0xec5>
f0126496:	83 ec 04             	sub    $0x4,%esp
f0126499:	68 20 aa 13 f0       	push   $0xf013aa20
f012649e:	68 98 0a 00 00       	push   $0xa98
f01264a3:	68 3a a2 13 f0       	push   $0xf013a23a
f01264a8:	e8 f9 9c fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01264ad:	e8 18 59 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01264b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264b5:	e8 d2 d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01264ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01264bd:	83 ec 0c             	sub    $0xc,%esp
f01264c0:	68 00 50 00 00       	push   $0x5000
f01264c5:	e8 12 0f fe ff       	call   f01073dc <kmalloc>
f01264ca:	83 c4 10             	add    $0x10,%esp
f01264cd:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264d3:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01264d9:	89 c1                	mov    %eax,%ecx
f01264db:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01264e2:	10 00 00 
f01264e5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01264eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264f0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01264f6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01264fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0126501:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126507:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012650d:	29 d0                	sub    %edx,%eax
f012650f:	89 c3                	mov    %eax,%ebx
f0126511:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126518:	10 00 00 
f012651b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126520:	0f b6 d0             	movzbl %al,%edx
f0126523:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126529:	01 d0                	add    %edx,%eax
f012652b:	48                   	dec    %eax
f012652c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126532:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126538:	ba 00 00 00 00       	mov    $0x0,%edx
f012653d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126543:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126549:	29 d0                	sub    %edx,%eax
f012654b:	01 c3                	add    %eax,%ebx
f012654d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126554:	10 00 00 
f0126557:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012655c:	0f b6 c0             	movzbl %al,%eax
f012655f:	c1 e0 04             	shl    $0x4,%eax
f0126562:	89 c2                	mov    %eax,%edx
f0126564:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012656a:	01 d0                	add    %edx,%eax
f012656c:	48                   	dec    %eax
f012656d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126573:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126579:	ba 00 00 00 00       	mov    $0x0,%edx
f012657e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126584:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012658a:	29 d0                	sub    %edx,%eax
f012658c:	01 d8                	add    %ebx,%eax
f012658e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126593:	39 c1                	cmp    %eax,%ecx
f0126595:	74 17                	je     f01265ae <test_kfreeall+0xfc6>
f0126597:	83 ec 04             	sub    $0x4,%esp
f012659a:	68 20 a3 13 f0       	push   $0xf013a320
f012659f:	68 a1 0a 00 00       	push   $0xaa1
f01265a4:	68 3a a2 13 f0       	push   $0xf013a23a
f01265a9:	e8 f8 9b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265ae:	e8 d9 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01265b3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265b6:	74 17                	je     f01265cf <test_kfreeall+0xfe7>
f01265b8:	83 ec 04             	sub    $0x4,%esp
f01265bb:	68 54 a2 13 f0       	push   $0xf013a254
f01265c0:	68 a2 0a 00 00       	push   $0xaa2
f01265c5:	68 3a a2 13 f0       	push   $0xf013a23a
f01265ca:	e8 d7 9b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265cf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265d2:	e8 f3 57 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01265d7:	29 c3                	sub    %eax,%ebx
f01265d9:	89 d8                	mov    %ebx,%eax
f01265db:	83 f8 05             	cmp    $0x5,%eax
f01265de:	74 17                	je     f01265f7 <test_kfreeall+0x100f>
f01265e0:	83 ec 04             	sub    $0x4,%esp
f01265e3:	68 bc a2 13 f0       	push   $0xf013a2bc
f01265e8:	68 a3 0a 00 00       	push   $0xaa3
f01265ed:	68 3a a2 13 f0       	push   $0xf013a23a
f01265f2:	e8 af 9b fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01265f7:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01265fe:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126601:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126607:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012660a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126611:	eb 0e                	jmp    f0126621 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0126613:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126616:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126619:	01 d0                	add    %edx,%eax
f012661b:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012661e:	ff 45 f4             	incl   -0xc(%ebp)
f0126621:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126627:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012662a:	7f e7                	jg     f0126613 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012662c:	e8 99 57 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126631:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126634:	e8 53 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126639:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012663c:	83 ec 0c             	sub    $0xc,%esp
f012663f:	68 00 00 10 00       	push   $0x100000
f0126644:	e8 93 0d fe ff       	call   f01073dc <kmalloc>
f0126649:	83 c4 10             	add    $0x10,%esp
f012664c:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126652:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126658:	89 c1                	mov    %eax,%ecx
f012665a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126661:	10 00 00 
f0126664:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012666a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012666f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126675:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012667b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126680:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126686:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012668c:	29 d0                	sub    %edx,%eax
f012668e:	89 c3                	mov    %eax,%ebx
f0126690:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126697:	10 00 00 
f012669a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012669f:	0f b6 d0             	movzbl %al,%edx
f01266a2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01266a8:	01 d0                	add    %edx,%eax
f01266aa:	48                   	dec    %eax
f01266ab:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01266b1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01266b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01266bc:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01266c2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01266c8:	29 d0                	sub    %edx,%eax
f01266ca:	01 c3                	add    %eax,%ebx
f01266cc:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01266d3:	10 00 00 
f01266d6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01266db:	0f b6 c0             	movzbl %al,%eax
f01266de:	c1 e0 04             	shl    $0x4,%eax
f01266e1:	89 c2                	mov    %eax,%edx
f01266e3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01266e9:	01 d0                	add    %edx,%eax
f01266eb:	48                   	dec    %eax
f01266ec:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01266f2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01266f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01266fd:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0126703:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126709:	29 d0                	sub    %edx,%eax
f012670b:	01 d8                	add    %ebx,%eax
f012670d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126712:	39 c1                	cmp    %eax,%ecx
f0126714:	74 17                	je     f012672d <test_kfreeall+0x1145>
f0126716:	83 ec 04             	sub    $0x4,%esp
f0126719:	68 20 a3 13 f0       	push   $0xf013a320
f012671e:	68 af 0a 00 00       	push   $0xaaf
f0126723:	68 3a a2 13 f0       	push   $0xf013a23a
f0126728:	e8 79 9a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012672d:	e8 5a d5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126732:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126735:	74 17                	je     f012674e <test_kfreeall+0x1166>
f0126737:	83 ec 04             	sub    $0x4,%esp
f012673a:	68 54 a2 13 f0       	push   $0xf013a254
f012673f:	68 b0 0a 00 00       	push   $0xab0
f0126744:	68 3a a2 13 f0       	push   $0xf013a23a
f0126749:	e8 58 9a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012674e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126751:	e8 74 56 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126756:	29 c3                	sub    %eax,%ebx
f0126758:	89 d8                	mov    %ebx,%eax
f012675a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012675f:	74 17                	je     f0126778 <test_kfreeall+0x1190>
f0126761:	83 ec 04             	sub    $0x4,%esp
f0126764:	68 bc a2 13 f0       	push   $0xf013a2bc
f0126769:	68 b1 0a 00 00       	push   $0xab1
f012676e:	68 3a a2 13 f0       	push   $0xf013a23a
f0126773:	e8 2e 9a fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126778:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f012677f:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126782:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126788:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012678b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126792:	eb 0e                	jmp    f01267a2 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0126794:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126797:	8b 45 80             	mov    -0x80(%ebp),%eax
f012679a:	01 d0                	add    %edx,%eax
f012679c:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012679f:	ff 45 f4             	incl   -0xc(%ebp)
f01267a2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01267a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267ab:	7f e7                	jg     f0126794 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01267ad:	e8 18 56 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01267b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267b5:	e8 d2 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01267ba:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01267bd:	e8 82 0c fe ff       	call   f0107444 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267c2:	e8 c5 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01267c7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01267ca:	74 17                	je     f01267e3 <test_kfreeall+0x11fb>
f01267cc:	83 ec 04             	sub    $0x4,%esp
f01267cf:	68 54 a2 13 f0       	push   $0xf013a254
f01267d4:	68 c1 0a 00 00       	push   $0xac1
f01267d9:	68 3a a2 13 f0       	push   $0xf013a23a
f01267de:	e8 c3 99 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01267e3:	e8 e2 55 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01267e8:	89 c2                	mov    %eax,%edx
f01267ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01267ed:	89 d1                	mov    %edx,%ecx
f01267ef:	29 c1                	sub    %eax,%ecx
f01267f1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01267f8:	10 00 00 
f01267fb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0126801:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126806:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012680c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126812:	ba 00 00 00 00       	mov    $0x0,%edx
f0126817:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012681d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126823:	29 d0                	sub    %edx,%eax
f0126825:	89 c3                	mov    %eax,%ebx
f0126827:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012682e:	10 00 00 
f0126831:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126836:	0f b6 d0             	movzbl %al,%edx
f0126839:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012683f:	01 d0                	add    %edx,%eax
f0126841:	48                   	dec    %eax
f0126842:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126848:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012684e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126853:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126859:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012685f:	29 d0                	sub    %edx,%eax
f0126861:	01 c3                	add    %eax,%ebx
f0126863:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012686a:	10 00 00 
f012686d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126872:	0f b6 c0             	movzbl %al,%eax
f0126875:	c1 e0 04             	shl    $0x4,%eax
f0126878:	89 c2                	mov    %eax,%edx
f012687a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126880:	01 d0                	add    %edx,%eax
f0126882:	48                   	dec    %eax
f0126883:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126889:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012688f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126894:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012689a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01268a0:	29 d0                	sub    %edx,%eax
f01268a2:	01 d8                	add    %ebx,%eax
f01268a4:	05 00 40 00 00       	add    $0x4000,%eax
f01268a9:	c1 e8 0c             	shr    $0xc,%eax
f01268ac:	05 0d 04 00 00       	add    $0x40d,%eax
f01268b1:	39 c1                	cmp    %eax,%ecx
f01268b3:	74 17                	je     f01268cc <test_kfreeall+0x12e4>
f01268b5:	83 ec 04             	sub    $0x4,%esp
f01268b8:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01268bd:	68 c2 0a 00 00       	push   $0xac2
f01268c2:	68 3a a2 13 f0       	push   $0xf013a23a
f01268c7:	e8 da 98 fd ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01268cc:	83 ec 0c             	sub    $0xc,%esp
f01268cf:	6a 03                	push   $0x3
f01268d1:	e8 9d 59 fe ff       	call   f010c273 <sys_bypassPageFault>
f01268d6:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01268d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268e0:	e9 82 00 00 00       	jmp    f0126967 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01268e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01268e8:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01268ef:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01268f2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01268f5:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01268f8:	e8 64 59 fe ff       	call   f010c261 <sys_rcr2>
f01268fd:	89 c2                	mov    %eax,%edx
f01268ff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126902:	39 c2                	cmp    %eax,%edx
f0126904:	74 17                	je     f012691d <test_kfreeall+0x1335>
f0126906:	83 ec 04             	sub    $0x4,%esp
f0126909:	68 a0 aa 13 f0       	push   $0xf013aaa0
f012690e:	68 d0 0a 00 00       	push   $0xad0
f0126913:	68 3a a2 13 f0       	push   $0xf013a23a
f0126918:	e8 89 98 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f012691d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126920:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126927:	89 c2                	mov    %eax,%edx
f0126929:	8b 45 80             	mov    -0x80(%ebp),%eax
f012692c:	01 d0                	add    %edx,%eax
f012692e:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126931:	e8 2b 59 fe ff       	call   f010c261 <sys_rcr2>
f0126936:	89 c2                	mov    %eax,%edx
f0126938:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012693b:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126942:	89 c1                	mov    %eax,%ecx
f0126944:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126947:	01 c8                	add    %ecx,%eax
f0126949:	39 c2                	cmp    %eax,%edx
f012694b:	74 17                	je     f0126964 <test_kfreeall+0x137c>
f012694d:	83 ec 04             	sub    $0x4,%esp
f0126950:	68 a0 aa 13 f0       	push   $0xf013aaa0
f0126955:	68 d2 0a 00 00       	push   $0xad2
f012695a:	68 3a a2 13 f0       	push   $0xf013a23a
f012695f:	e8 42 98 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126964:	ff 45 f4             	incl   -0xc(%ebp)
f0126967:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012696b:	0f 8e 74 ff ff ff    	jle    f01268e5 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0126971:	83 ec 0c             	sub    $0xc,%esp
f0126974:	6a 00                	push   $0x0
f0126976:	e8 f8 58 fe ff       	call   f010c273 <sys_bypassPageFault>
f012697b:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012697e:	e8 47 54 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126983:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126986:	e8 01 d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012698b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f012698e:	83 ec 0c             	sub    $0xc,%esp
f0126991:	68 00 00 40 00       	push   $0x400000
f0126996:	e8 41 0a fe ff       	call   f01073dc <kmalloc>
f012699b:	83 c4 10             	add    $0x10,%esp
f012699e:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01269a4:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01269aa:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01269af:	74 17                	je     f01269c8 <test_kfreeall+0x13e0>
f01269b1:	83 ec 04             	sub    $0x4,%esp
f01269b4:	68 44 af 13 f0       	push   $0xf013af44
f01269b9:	68 de 0a 00 00       	push   $0xade
f01269be:	68 3a a2 13 f0       	push   $0xf013a23a
f01269c3:	e8 de 97 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269c8:	e8 bf d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01269cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01269d0:	74 17                	je     f01269e9 <test_kfreeall+0x1401>
f01269d2:	83 ec 04             	sub    $0x4,%esp
f01269d5:	68 54 a2 13 f0       	push   $0xf013a254
f01269da:	68 df 0a 00 00       	push   $0xadf
f01269df:	68 3a a2 13 f0       	push   $0xf013a23a
f01269e4:	e8 bd 97 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01269e9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01269ec:	e8 d9 53 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01269f1:	29 c3                	sub    %eax,%ebx
f01269f3:	89 d8                	mov    %ebx,%eax
f01269f5:	3d 00 04 00 00       	cmp    $0x400,%eax
f01269fa:	74 17                	je     f0126a13 <test_kfreeall+0x142b>
f01269fc:	83 ec 04             	sub    $0x4,%esp
f01269ff:	68 bc a2 13 f0       	push   $0xf013a2bc
f0126a04:	68 e0 0a 00 00       	push   $0xae0
f0126a09:	68 3a a2 13 f0       	push   $0xf013a23a
f0126a0e:	e8 93 97 fd ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126a13:	e8 b2 53 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126a18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a1b:	e8 6c d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126a20:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126a23:	83 ec 0c             	sub    $0xc,%esp
f0126a26:	68 00 30 00 00       	push   $0x3000
f0126a2b:	e8 ac 09 fe ff       	call   f01073dc <kmalloc>
f0126a30:	83 c4 10             	add    $0x10,%esp
f0126a33:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126a39:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126a3f:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126a44:	74 17                	je     f0126a5d <test_kfreeall+0x1475>
f0126a46:	83 ec 04             	sub    $0x4,%esp
f0126a49:	68 44 af 13 f0       	push   $0xf013af44
f0126a4e:	68 e6 0a 00 00       	push   $0xae6
f0126a53:	68 3a a2 13 f0       	push   $0xf013a23a
f0126a58:	e8 49 97 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a5d:	e8 2a d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126a62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a65:	74 17                	je     f0126a7e <test_kfreeall+0x1496>
f0126a67:	83 ec 04             	sub    $0x4,%esp
f0126a6a:	68 54 a2 13 f0       	push   $0xf013a254
f0126a6f:	68 e7 0a 00 00       	push   $0xae7
f0126a74:	68 3a a2 13 f0       	push   $0xf013a23a
f0126a79:	e8 28 97 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a81:	e8 44 53 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126a86:	29 c3                	sub    %eax,%ebx
f0126a88:	89 d8                	mov    %ebx,%eax
f0126a8a:	83 f8 03             	cmp    $0x3,%eax
f0126a8d:	74 17                	je     f0126aa6 <test_kfreeall+0x14be>
f0126a8f:	83 ec 04             	sub    $0x4,%esp
f0126a92:	68 bc a2 13 f0       	push   $0xf013a2bc
f0126a97:	68 e8 0a 00 00       	push   $0xae8
f0126a9c:	68 3a a2 13 f0       	push   $0xf013a23a
f0126aa1:	e8 00 97 fd ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126aa6:	e8 1f 53 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126aab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126aae:	e8 d9 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126ab3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126ab6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126abc:	83 ec 0c             	sub    $0xc,%esp
f0126abf:	50                   	push   %eax
f0126ac0:	e8 31 09 fe ff       	call   f01073f6 <kfree>
f0126ac5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ac8:	e8 bf d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126acd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ad0:	74 17                	je     f0126ae9 <test_kfreeall+0x1501>
f0126ad2:	83 ec 04             	sub    $0x4,%esp
f0126ad5:	68 54 a2 13 f0       	push   $0xf013a254
f0126ada:	68 f2 0a 00 00       	push   $0xaf2
f0126adf:	68 3a a2 13 f0       	push   $0xf013a23a
f0126ae4:	e8 bd 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126ae9:	e8 dc 52 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126aee:	89 c2                	mov    %eax,%edx
f0126af0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126af3:	29 c2                	sub    %eax,%edx
f0126af5:	89 d0                	mov    %edx,%eax
f0126af7:	83 f8 03             	cmp    $0x3,%eax
f0126afa:	74 17                	je     f0126b13 <test_kfreeall+0x152b>
f0126afc:	83 ec 04             	sub    $0x4,%esp
f0126aff:	68 ec aa 13 f0       	push   $0xf013aaec
f0126b04:	68 f3 0a 00 00       	push   $0xaf3
f0126b09:	68 3a a2 13 f0       	push   $0xf013a23a
f0126b0e:	e8 93 96 fd ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b13:	e8 b2 52 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126b18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b1b:	e8 6c d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b20:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126b23:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126b29:	83 ec 0c             	sub    $0xc,%esp
f0126b2c:	50                   	push   %eax
f0126b2d:	e8 c4 08 fe ff       	call   f01073f6 <kfree>
f0126b32:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b35:	e8 52 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b3a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b3d:	74 17                	je     f0126b56 <test_kfreeall+0x156e>
f0126b3f:	83 ec 04             	sub    $0x4,%esp
f0126b42:	68 54 a2 13 f0       	push   $0xf013a254
f0126b47:	68 fc 0a 00 00       	push   $0xafc
f0126b4c:	68 3a a2 13 f0       	push   $0xf013a23a
f0126b51:	e8 50 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126b56:	e8 6f 52 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126b5b:	89 c2                	mov    %eax,%edx
f0126b5d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b60:	39 c2                	cmp    %eax,%edx
f0126b62:	74 17                	je     f0126b7b <test_kfreeall+0x1593>
f0126b64:	83 ec 04             	sub    $0x4,%esp
f0126b67:	68 ec aa 13 f0       	push   $0xf013aaec
f0126b6c:	68 fd 0a 00 00       	push   $0xafd
f0126b71:	68 3a a2 13 f0       	push   $0xf013a23a
f0126b76:	e8 2b 96 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b7b:	e8 4a 52 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126b80:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b83:	e8 04 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b88:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0126b8b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126b91:	83 ec 0c             	sub    $0xc,%esp
f0126b94:	50                   	push   %eax
f0126b95:	e8 5c 08 fe ff       	call   f01073f6 <kfree>
f0126b9a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b9d:	e8 ea d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126ba2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ba5:	74 17                	je     f0126bbe <test_kfreeall+0x15d6>
f0126ba7:	83 ec 04             	sub    $0x4,%esp
f0126baa:	68 54 a2 13 f0       	push   $0xf013a254
f0126baf:	68 03 0b 00 00       	push   $0xb03
f0126bb4:	68 3a a2 13 f0       	push   $0xf013a23a
f0126bb9:	e8 e8 95 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126bbe:	e8 07 52 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126bc3:	89 c2                	mov    %eax,%edx
f0126bc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126bc8:	39 c2                	cmp    %eax,%edx
f0126bca:	74 17                	je     f0126be3 <test_kfreeall+0x15fb>
f0126bcc:	83 ec 04             	sub    $0x4,%esp
f0126bcf:	68 ec aa 13 f0       	push   $0xf013aaec
f0126bd4:	68 04 0b 00 00       	push   $0xb04
f0126bd9:	68 3a a2 13 f0       	push   $0xf013a23a
f0126bde:	e8 c3 95 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126be3:	e8 e2 51 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126be8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126beb:	e8 9c d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126bf0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126bf3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126bf9:	83 ec 0c             	sub    $0xc,%esp
f0126bfc:	50                   	push   %eax
f0126bfd:	e8 f4 07 fe ff       	call   f01073f6 <kfree>
f0126c02:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c05:	e8 82 d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126c0a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c0d:	74 17                	je     f0126c26 <test_kfreeall+0x163e>
f0126c0f:	83 ec 04             	sub    $0x4,%esp
f0126c12:	68 54 a2 13 f0       	push   $0xf013a254
f0126c17:	68 0a 0b 00 00       	push   $0xb0a
f0126c1c:	68 3a a2 13 f0       	push   $0xf013a23a
f0126c21:	e8 80 95 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126c26:	e8 9f 51 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126c2b:	89 c2                	mov    %eax,%edx
f0126c2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126c30:	39 c2                	cmp    %eax,%edx
f0126c32:	74 17                	je     f0126c4b <test_kfreeall+0x1663>
f0126c34:	83 ec 04             	sub    $0x4,%esp
f0126c37:	68 ec aa 13 f0       	push   $0xf013aaec
f0126c3c:	68 0b 0b 00 00       	push   $0xb0b
f0126c41:	68 3a a2 13 f0       	push   $0xf013a23a
f0126c46:	e8 5b 95 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126c4b:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126c52:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126c59:	eb 48                	jmp    f0126ca3 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0126c5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0126c5e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0126c63:	83 ec 04             	sub    $0x4,%esp
f0126c66:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0126c6c:	51                   	push   %ecx
f0126c6d:	52                   	push   %edx
f0126c6e:	50                   	push   %eax
f0126c6f:	e8 f5 fc fd ff       	call   f0106969 <get_page_table>
f0126c74:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126c77:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0126c7d:	85 c0                	test   %eax,%eax
f0126c7f:	75 17                	jne    f0126c98 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126c81:	83 ec 04             	sub    $0x4,%esp
f0126c84:	68 3c ab 13 f0       	push   $0xf013ab3c
f0126c89:	68 18 0b 00 00       	push   $0xb18
f0126c8e:	68 3a a2 13 f0       	push   $0xf013a23a
f0126c93:	e8 0e 95 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126c98:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126c9f:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126ca3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126ca7:	78 b2                	js     f0126c5b <test_kfreeall+0x1673>
f0126ca9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126cad:	7f 09                	jg     f0126cb8 <test_kfreeall+0x16d0>
f0126caf:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126cb6:	76 a3                	jbe    f0126c5b <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126cb8:	83 ec 0c             	sub    $0xc,%esp
f0126cbb:	68 98 af 13 f0       	push   $0xf013af98
f0126cc0:	e8 68 9f fd ff       	call   f0100c2d <cprintf>
f0126cc5:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126cc8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0126ccd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126cd0:	5b                   	pop    %ebx
f0126cd1:	5f                   	pop    %edi
f0126cd2:	5d                   	pop    %ebp
f0126cd3:	c3                   	ret    

f0126cd4 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126cd4:	55                   	push   %ebp
f0126cd5:	89 e5                	mov    %esp,%ebp
f0126cd7:	57                   	push   %edi
f0126cd8:	53                   	push   %ebx
f0126cd9:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0126cdf:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126ce3:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126ce7:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126ced:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126cf3:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126cfa:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126d01:	e8 c4 50 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126d06:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126d09:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0126d0f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d14:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d19:	89 d7                	mov    %edx,%edi
f0126d1b:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126d1d:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0126d23:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d2d:	89 d7                	mov    %edx,%edi
f0126d2f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d31:	e8 94 50 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126d36:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d39:	e8 4e cf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126d3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126d41:	83 ec 0c             	sub    $0xc,%esp
f0126d44:	68 00 fc 1f 00       	push   $0x1ffc00
f0126d49:	e8 8e 06 fe ff       	call   f01073dc <kmalloc>
f0126d4e:	83 c4 10             	add    $0x10,%esp
f0126d51:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d57:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126d5d:	89 c1                	mov    %eax,%ecx
f0126d5f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126d66:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126d69:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126d71:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d74:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d79:	f7 75 d4             	divl   -0x2c(%ebp)
f0126d7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d7f:	29 d0                	sub    %edx,%eax
f0126d81:	89 c3                	mov    %eax,%ebx
f0126d83:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126d8a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126d8f:	0f b6 d0             	movzbl %al,%edx
f0126d92:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126d95:	01 d0                	add    %edx,%eax
f0126d97:	48                   	dec    %eax
f0126d98:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126d9b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126da3:	f7 75 cc             	divl   -0x34(%ebp)
f0126da6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126da9:	29 d0                	sub    %edx,%eax
f0126dab:	01 c3                	add    %eax,%ebx
f0126dad:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126db4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126db9:	0f b6 c0             	movzbl %al,%eax
f0126dbc:	c1 e0 04             	shl    $0x4,%eax
f0126dbf:	89 c2                	mov    %eax,%edx
f0126dc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126dc4:	01 d0                	add    %edx,%eax
f0126dc6:	48                   	dec    %eax
f0126dc7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126dca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126dcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dd2:	f7 75 c4             	divl   -0x3c(%ebp)
f0126dd5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126dd8:	29 d0                	sub    %edx,%eax
f0126dda:	01 d8                	add    %ebx,%eax
f0126ddc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126de1:	39 c1                	cmp    %eax,%ecx
f0126de3:	74 17                	je     f0126dfc <test_kexpand+0x128>
f0126de5:	83 ec 04             	sub    $0x4,%esp
f0126de8:	68 20 a3 13 f0       	push   $0xf013a320
f0126ded:	68 43 0b 00 00       	push   $0xb43
f0126df2:	68 3a a2 13 f0       	push   $0xf013a23a
f0126df7:	e8 aa 93 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dfc:	e8 8b ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e01:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126e04:	74 17                	je     f0126e1d <test_kexpand+0x149>
f0126e06:	83 ec 04             	sub    $0x4,%esp
f0126e09:	68 54 a2 13 f0       	push   $0xf013a254
f0126e0e:	68 44 0b 00 00       	push   $0xb44
f0126e13:	68 3a a2 13 f0       	push   $0xf013a23a
f0126e18:	e8 89 93 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e1d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126e20:	e8 a5 4f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126e25:	29 c3                	sub    %eax,%ebx
f0126e27:	89 d8                	mov    %ebx,%eax
f0126e29:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126e2e:	74 17                	je     f0126e47 <test_kexpand+0x173>
f0126e30:	83 ec 04             	sub    $0x4,%esp
f0126e33:	68 bc a2 13 f0       	push   $0xf013a2bc
f0126e38:	68 45 0b 00 00       	push   $0xb45
f0126e3d:	68 3a a2 13 f0       	push   $0xf013a23a
f0126e42:	e8 5f 93 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126e47:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0126e4e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e51:	e8 74 4f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126e56:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e59:	e8 2e ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126e61:	83 ec 0c             	sub    $0xc,%esp
f0126e64:	68 00 fc 1f 00       	push   $0x1ffc00
f0126e69:	e8 6e 05 fe ff       	call   f01073dc <kmalloc>
f0126e6e:	83 c4 10             	add    $0x10,%esp
f0126e71:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e77:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126e7d:	89 c1                	mov    %eax,%ecx
f0126e7f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126e86:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e8e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126e91:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e94:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e99:	f7 75 bc             	divl   -0x44(%ebp)
f0126e9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e9f:	29 d0                	sub    %edx,%eax
f0126ea1:	89 c3                	mov    %eax,%ebx
f0126ea3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126eaa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126eaf:	0f b6 d0             	movzbl %al,%edx
f0126eb2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126eb5:	01 d0                	add    %edx,%eax
f0126eb7:	48                   	dec    %eax
f0126eb8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126ebb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126ebe:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ec3:	f7 75 b4             	divl   -0x4c(%ebp)
f0126ec6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126ec9:	29 d0                	sub    %edx,%eax
f0126ecb:	01 c3                	add    %eax,%ebx
f0126ecd:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126ed4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126ed9:	0f b6 c0             	movzbl %al,%eax
f0126edc:	c1 e0 04             	shl    $0x4,%eax
f0126edf:	89 c2                	mov    %eax,%edx
f0126ee1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126ee4:	01 d0                	add    %edx,%eax
f0126ee6:	48                   	dec    %eax
f0126ee7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126eea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126eed:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ef2:	f7 75 ac             	divl   -0x54(%ebp)
f0126ef5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126ef8:	29 d0                	sub    %edx,%eax
f0126efa:	01 d8                	add    %ebx,%eax
f0126efc:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126f01:	39 c1                	cmp    %eax,%ecx
f0126f03:	74 17                	je     f0126f1c <test_kexpand+0x248>
f0126f05:	83 ec 04             	sub    $0x4,%esp
f0126f08:	68 20 a3 13 f0       	push   $0xf013a320
f0126f0d:	68 4c 0b 00 00       	push   $0xb4c
f0126f12:	68 3a a2 13 f0       	push   $0xf013a23a
f0126f17:	e8 8a 92 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f1c:	e8 6b cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f21:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f24:	74 17                	je     f0126f3d <test_kexpand+0x269>
f0126f26:	83 ec 04             	sub    $0x4,%esp
f0126f29:	68 54 a2 13 f0       	push   $0xf013a254
f0126f2e:	68 4d 0b 00 00       	push   $0xb4d
f0126f33:	68 3a a2 13 f0       	push   $0xf013a23a
f0126f38:	e8 69 92 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f3d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126f40:	e8 85 4e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126f45:	29 c3                	sub    %eax,%ebx
f0126f47:	89 d8                	mov    %ebx,%eax
f0126f49:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126f4e:	74 17                	je     f0126f67 <test_kexpand+0x293>
f0126f50:	83 ec 04             	sub    $0x4,%esp
f0126f53:	68 bc a2 13 f0       	push   $0xf013a2bc
f0126f58:	68 4e 0b 00 00       	push   $0xb4e
f0126f5d:	68 3a a2 13 f0       	push   $0xf013a23a
f0126f62:	e8 3f 92 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126f67:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0126f6e:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f71:	e8 54 4e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0126f76:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f79:	e8 0e cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126f81:	83 ec 0c             	sub    $0xc,%esp
f0126f84:	68 00 08 00 00       	push   $0x800
f0126f89:	e8 4e 04 fe ff       	call   f01073dc <kmalloc>
f0126f8e:	83 c4 10             	add    $0x10,%esp
f0126f91:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f97:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126f9d:	89 c1                	mov    %eax,%ecx
f0126f9f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0126fa6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126fa9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126fae:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0126fb1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126fb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fb9:	f7 75 a4             	divl   -0x5c(%ebp)
f0126fbc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126fbf:	29 d0                	sub    %edx,%eax
f0126fc1:	89 c3                	mov    %eax,%ebx
f0126fc3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0126fca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126fcf:	0f b6 d0             	movzbl %al,%edx
f0126fd2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126fd5:	01 d0                	add    %edx,%eax
f0126fd7:	48                   	dec    %eax
f0126fd8:	89 45 98             	mov    %eax,-0x68(%ebp)
f0126fdb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126fde:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fe3:	f7 75 9c             	divl   -0x64(%ebp)
f0126fe6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126fe9:	29 d0                	sub    %edx,%eax
f0126feb:	01 c3                	add    %eax,%ebx
f0126fed:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0126ff4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126ff9:	0f b6 c0             	movzbl %al,%eax
f0126ffc:	c1 e0 04             	shl    $0x4,%eax
f0126fff:	89 c2                	mov    %eax,%edx
f0127001:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127004:	01 d0                	add    %edx,%eax
f0127006:	48                   	dec    %eax
f0127007:	89 45 90             	mov    %eax,-0x70(%ebp)
f012700a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012700d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127012:	f7 75 94             	divl   -0x6c(%ebp)
f0127015:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127018:	29 d0                	sub    %edx,%eax
f012701a:	01 d8                	add    %ebx,%eax
f012701c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127021:	39 c1                	cmp    %eax,%ecx
f0127023:	74 17                	je     f012703c <test_kexpand+0x368>
f0127025:	83 ec 04             	sub    $0x4,%esp
f0127028:	68 20 a3 13 f0       	push   $0xf013a320
f012702d:	68 55 0b 00 00       	push   $0xb55
f0127032:	68 3a a2 13 f0       	push   $0xf013a23a
f0127037:	e8 6a 91 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012703c:	e8 4b cc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127041:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127044:	74 17                	je     f012705d <test_kexpand+0x389>
f0127046:	83 ec 04             	sub    $0x4,%esp
f0127049:	68 54 a2 13 f0       	push   $0xf013a254
f012704e:	68 56 0b 00 00       	push   $0xb56
f0127053:	68 3a a2 13 f0       	push   $0xf013a23a
f0127058:	e8 49 91 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012705d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127060:	e8 65 4d fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127065:	29 c3                	sub    %eax,%ebx
f0127067:	89 d8                	mov    %ebx,%eax
f0127069:	83 f8 01             	cmp    $0x1,%eax
f012706c:	74 17                	je     f0127085 <test_kexpand+0x3b1>
f012706e:	83 ec 04             	sub    $0x4,%esp
f0127071:	68 bc a2 13 f0       	push   $0xf013a2bc
f0127076:	68 57 0b 00 00       	push   $0xb57
f012707b:	68 3a a2 13 f0       	push   $0xf013a23a
f0127080:	e8 21 91 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127085:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f012708c:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012708f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127095:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127098:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012709f:	eb 0e                	jmp    f01270af <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01270a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01270a7:	01 d0                	add    %edx,%eax
f01270a9:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01270ac:	ff 45 f4             	incl   -0xc(%ebp)
f01270af:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01270b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01270b8:	7f e7                	jg     f01270a1 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01270ba:	e8 0b 4d fe ff       	call   f010bdca <sys_calculate_free_frames>
f01270bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270c2:	e8 c5 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01270c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01270ca:	83 ec 0c             	sub    $0xc,%esp
f01270cd:	68 00 08 00 00       	push   $0x800
f01270d2:	e8 05 03 fe ff       	call   f01073dc <kmalloc>
f01270d7:	83 c4 10             	add    $0x10,%esp
f01270da:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270e0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01270e6:	89 c1                	mov    %eax,%ecx
f01270e8:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01270ef:	8b 45 88             	mov    -0x78(%ebp),%eax
f01270f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01270f7:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01270fa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01270fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0127102:	f7 75 88             	divl   -0x78(%ebp)
f0127105:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127108:	29 d0                	sub    %edx,%eax
f012710a:	89 c3                	mov    %eax,%ebx
f012710c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127113:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127118:	0f b6 d0             	movzbl %al,%edx
f012711b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012711e:	01 d0                	add    %edx,%eax
f0127120:	48                   	dec    %eax
f0127121:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127127:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012712d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127132:	f7 75 80             	divl   -0x80(%ebp)
f0127135:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012713b:	29 d0                	sub    %edx,%eax
f012713d:	01 c3                	add    %eax,%ebx
f012713f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127146:	10 00 00 
f0127149:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012714e:	0f b6 c0             	movzbl %al,%eax
f0127151:	c1 e0 04             	shl    $0x4,%eax
f0127154:	89 c2                	mov    %eax,%edx
f0127156:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012715c:	01 d0                	add    %edx,%eax
f012715e:	48                   	dec    %eax
f012715f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127165:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012716b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127170:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127176:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012717c:	29 d0                	sub    %edx,%eax
f012717e:	01 d8                	add    %ebx,%eax
f0127180:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127185:	39 c1                	cmp    %eax,%ecx
f0127187:	74 17                	je     f01271a0 <test_kexpand+0x4cc>
f0127189:	83 ec 04             	sub    $0x4,%esp
f012718c:	68 20 a3 13 f0       	push   $0xf013a320
f0127191:	68 63 0b 00 00       	push   $0xb63
f0127196:	68 3a a2 13 f0       	push   $0xf013a23a
f012719b:	e8 06 90 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271a0:	e8 e7 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01271a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01271a8:	74 17                	je     f01271c1 <test_kexpand+0x4ed>
f01271aa:	83 ec 04             	sub    $0x4,%esp
f01271ad:	68 54 a2 13 f0       	push   $0xf013a254
f01271b2:	68 64 0b 00 00       	push   $0xb64
f01271b7:	68 3a a2 13 f0       	push   $0xf013a23a
f01271bc:	e8 e5 8f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271c1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01271c4:	e8 01 4c fe ff       	call   f010bdca <sys_calculate_free_frames>
f01271c9:	29 c3                	sub    %eax,%ebx
f01271cb:	89 d8                	mov    %ebx,%eax
f01271cd:	83 f8 01             	cmp    $0x1,%eax
f01271d0:	74 17                	je     f01271e9 <test_kexpand+0x515>
f01271d2:	83 ec 04             	sub    $0x4,%esp
f01271d5:	68 bc a2 13 f0       	push   $0xf013a2bc
f01271da:	68 65 0b 00 00       	push   $0xb65
f01271df:	68 3a a2 13 f0       	push   $0xf013a23a
f01271e4:	e8 bd 8f fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01271e9:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01271f0:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01271f3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01271f9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01271fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127203:	eb 0e                	jmp    f0127213 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127205:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127208:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012720b:	01 d0                	add    %edx,%eax
f012720d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127210:	ff 45 f4             	incl   -0xc(%ebp)
f0127213:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127219:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012721c:	7f e7                	jg     f0127205 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012721e:	e8 a7 4b fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127223:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127226:	e8 61 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012722b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012722e:	83 ec 0c             	sub    $0xc,%esp
f0127231:	68 00 1c 00 00       	push   $0x1c00
f0127236:	e8 a1 01 fe ff       	call   f01073dc <kmalloc>
f012723b:	83 c4 10             	add    $0x10,%esp
f012723e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127244:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012724a:	89 c1                	mov    %eax,%ecx
f012724c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127253:	10 00 00 
f0127256:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012725c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127261:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127267:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012726d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127272:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127278:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012727e:	29 d0                	sub    %edx,%eax
f0127280:	89 c3                	mov    %eax,%ebx
f0127282:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127289:	10 00 00 
f012728c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127291:	0f b6 d0             	movzbl %al,%edx
f0127294:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012729a:	01 d0                	add    %edx,%eax
f012729c:	48                   	dec    %eax
f012729d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01272a3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01272a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ae:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01272b4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01272ba:	29 d0                	sub    %edx,%eax
f01272bc:	01 c3                	add    %eax,%ebx
f01272be:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01272c5:	10 00 00 
f01272c8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01272cd:	0f b6 c0             	movzbl %al,%eax
f01272d0:	c1 e0 04             	shl    $0x4,%eax
f01272d3:	89 c2                	mov    %eax,%edx
f01272d5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272db:	01 d0                	add    %edx,%eax
f01272dd:	48                   	dec    %eax
f01272de:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01272e4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01272ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ef:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01272f5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01272fb:	29 d0                	sub    %edx,%eax
f01272fd:	01 d8                	add    %ebx,%eax
f01272ff:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127304:	39 c1                	cmp    %eax,%ecx
f0127306:	74 17                	je     f012731f <test_kexpand+0x64b>
f0127308:	83 ec 04             	sub    $0x4,%esp
f012730b:	68 20 a3 13 f0       	push   $0xf013a320
f0127310:	68 71 0b 00 00       	push   $0xb71
f0127315:	68 3a a2 13 f0       	push   $0xf013a23a
f012731a:	e8 87 8e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012731f:	e8 68 c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127324:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127327:	74 17                	je     f0127340 <test_kexpand+0x66c>
f0127329:	83 ec 04             	sub    $0x4,%esp
f012732c:	68 54 a2 13 f0       	push   $0xf013a254
f0127331:	68 72 0b 00 00       	push   $0xb72
f0127336:	68 3a a2 13 f0       	push   $0xf013a23a
f012733b:	e8 66 8e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127340:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127343:	e8 82 4a fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127348:	29 c3                	sub    %eax,%ebx
f012734a:	89 d8                	mov    %ebx,%eax
f012734c:	83 f8 02             	cmp    $0x2,%eax
f012734f:	74 17                	je     f0127368 <test_kexpand+0x694>
f0127351:	83 ec 04             	sub    $0x4,%esp
f0127354:	68 bc a2 13 f0       	push   $0xf013a2bc
f0127359:	68 73 0b 00 00       	push   $0xb73
f012735e:	68 3a a2 13 f0       	push   $0xf013a23a
f0127363:	e8 3e 8e fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127368:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f012736f:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127372:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127378:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012737b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127382:	eb 0e                	jmp    f0127392 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127384:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127387:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012738a:	01 d0                	add    %edx,%eax
f012738c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012738f:	ff 45 f4             	incl   -0xc(%ebp)
f0127392:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127398:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012739b:	7f e7                	jg     f0127384 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012739d:	e8 28 4a fe ff       	call   f010bdca <sys_calculate_free_frames>
f01273a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273a5:	e8 e2 c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01273aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01273ad:	83 ec 0c             	sub    $0xc,%esp
f01273b0:	68 00 fc 2f 00       	push   $0x2ffc00
f01273b5:	e8 22 00 fe ff       	call   f01073dc <kmalloc>
f01273ba:	83 c4 10             	add    $0x10,%esp
f01273bd:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01273c3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01273c9:	89 c1                	mov    %eax,%ecx
f01273cb:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01273d2:	10 00 00 
f01273d5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01273db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01273e0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01273e6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01273ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01273f1:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01273f7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01273fd:	29 d0                	sub    %edx,%eax
f01273ff:	89 c3                	mov    %eax,%ebx
f0127401:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127408:	10 00 00 
f012740b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127410:	0f b6 d0             	movzbl %al,%edx
f0127413:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127419:	01 d0                	add    %edx,%eax
f012741b:	48                   	dec    %eax
f012741c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127422:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127428:	ba 00 00 00 00       	mov    $0x0,%edx
f012742d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127433:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127439:	29 d0                	sub    %edx,%eax
f012743b:	01 c3                	add    %eax,%ebx
f012743d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127444:	10 00 00 
f0127447:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012744c:	0f b6 c0             	movzbl %al,%eax
f012744f:	c1 e0 04             	shl    $0x4,%eax
f0127452:	89 c2                	mov    %eax,%edx
f0127454:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012745a:	01 d0                	add    %edx,%eax
f012745c:	48                   	dec    %eax
f012745d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127463:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127469:	ba 00 00 00 00       	mov    $0x0,%edx
f012746e:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127474:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012747a:	29 d0                	sub    %edx,%eax
f012747c:	01 d8                	add    %ebx,%eax
f012747e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127483:	39 c1                	cmp    %eax,%ecx
f0127485:	74 17                	je     f012749e <test_kexpand+0x7ca>
f0127487:	83 ec 04             	sub    $0x4,%esp
f012748a:	68 20 a3 13 f0       	push   $0xf013a320
f012748f:	68 7f 0b 00 00       	push   $0xb7f
f0127494:	68 3a a2 13 f0       	push   $0xf013a23a
f0127499:	e8 08 8d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012749e:	e8 e9 c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01274a3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01274a6:	74 17                	je     f01274bf <test_kexpand+0x7eb>
f01274a8:	83 ec 04             	sub    $0x4,%esp
f01274ab:	68 54 a2 13 f0       	push   $0xf013a254
f01274b0:	68 80 0b 00 00       	push   $0xb80
f01274b5:	68 3a a2 13 f0       	push   $0xf013a23a
f01274ba:	e8 e7 8c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01274bf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01274c2:	e8 03 49 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01274c7:	29 c3                	sub    %eax,%ebx
f01274c9:	89 d8                	mov    %ebx,%eax
f01274cb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01274d0:	74 17                	je     f01274e9 <test_kexpand+0x815>
f01274d2:	83 ec 04             	sub    $0x4,%esp
f01274d5:	68 bc a2 13 f0       	push   $0xf013a2bc
f01274da:	68 81 0b 00 00       	push   $0xb81
f01274df:	68 3a a2 13 f0       	push   $0xf013a23a
f01274e4:	e8 bd 8c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01274e9:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01274f0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01274f3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01274f9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01274fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127503:	eb 0e                	jmp    f0127513 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127505:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127508:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012750b:	01 d0                	add    %edx,%eax
f012750d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127510:	ff 45 f4             	incl   -0xc(%ebp)
f0127513:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127519:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012751c:	7f e7                	jg     f0127505 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012751e:	e8 a7 48 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127523:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127526:	e8 61 c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012752b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012752e:	83 ec 0c             	sub    $0xc,%esp
f0127531:	68 00 00 60 00       	push   $0x600000
f0127536:	e8 a1 fe fd ff       	call   f01073dc <kmalloc>
f012753b:	83 c4 10             	add    $0x10,%esp
f012753e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127544:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012754a:	89 c1                	mov    %eax,%ecx
f012754c:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127553:	10 00 00 
f0127556:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012755c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127561:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127567:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012756d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127572:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127578:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012757e:	29 d0                	sub    %edx,%eax
f0127580:	89 c3                	mov    %eax,%ebx
f0127582:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127589:	10 00 00 
f012758c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127591:	0f b6 d0             	movzbl %al,%edx
f0127594:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012759a:	01 d0                	add    %edx,%eax
f012759c:	48                   	dec    %eax
f012759d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01275a3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01275a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01275ae:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01275b4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01275ba:	29 d0                	sub    %edx,%eax
f01275bc:	01 c3                	add    %eax,%ebx
f01275be:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01275c5:	10 00 00 
f01275c8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01275cd:	0f b6 c0             	movzbl %al,%eax
f01275d0:	c1 e0 04             	shl    $0x4,%eax
f01275d3:	89 c2                	mov    %eax,%edx
f01275d5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01275db:	01 d0                	add    %edx,%eax
f01275dd:	48                   	dec    %eax
f01275de:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01275e4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01275ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01275ef:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01275f5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01275fb:	29 d0                	sub    %edx,%eax
f01275fd:	01 d8                	add    %ebx,%eax
f01275ff:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127604:	39 c1                	cmp    %eax,%ecx
f0127606:	74 17                	je     f012761f <test_kexpand+0x94b>
f0127608:	83 ec 04             	sub    $0x4,%esp
f012760b:	68 20 a3 13 f0       	push   $0xf013a320
f0127610:	68 8d 0b 00 00       	push   $0xb8d
f0127615:	68 3a a2 13 f0       	push   $0xf013a23a
f012761a:	e8 87 8b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012761f:	e8 68 c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127624:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127627:	74 17                	je     f0127640 <test_kexpand+0x96c>
f0127629:	83 ec 04             	sub    $0x4,%esp
f012762c:	68 54 a2 13 f0       	push   $0xf013a254
f0127631:	68 8e 0b 00 00       	push   $0xb8e
f0127636:	68 3a a2 13 f0       	push   $0xf013a23a
f012763b:	e8 66 8b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127640:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127643:	e8 82 47 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127648:	29 c3                	sub    %eax,%ebx
f012764a:	89 d8                	mov    %ebx,%eax
f012764c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127651:	74 17                	je     f012766a <test_kexpand+0x996>
f0127653:	83 ec 04             	sub    $0x4,%esp
f0127656:	68 bc a2 13 f0       	push   $0xf013a2bc
f012765b:	68 8f 0b 00 00       	push   $0xb8f
f0127660:	68 3a a2 13 f0       	push   $0xf013a23a
f0127665:	e8 3c 8b fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f012766a:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0127671:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127674:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012767a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127680:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127687:	eb 1a                	jmp    f01276a3 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012768c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127693:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127699:	01 c2                	add    %eax,%edx
f012769b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012769e:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01276a0:	ff 45 f4             	incl   -0xc(%ebp)
f01276a3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01276a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276ac:	7d db                	jge    f0127689 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f01276ae:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f01276b5:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f01276b8:	e8 0d 47 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01276bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276c0:	e8 c7 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01276c5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01276c8:	83 ec 0c             	sub    $0xc,%esp
f01276cb:	68 00 00 70 00       	push   $0x700000
f01276d0:	e8 a3 fd fd ff       	call   f0107478 <kexpand>
f01276d5:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01276d8:	e8 af c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01276dd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276e0:	74 19                	je     f01276fb <test_kexpand+0xa27>
f01276e2:	68 d4 af 13 f0       	push   $0xf013afd4
f01276e7:	68 05 b0 13 f0       	push   $0xf013b005
f01276ec:	68 a0 0b 00 00       	push   $0xba0
f01276f1:	68 3a a2 13 f0       	push   $0xf013a23a
f01276f6:	e8 ab 8a fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01276fb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276fe:	e8 c7 46 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127703:	29 c3                	sub    %eax,%ebx
f0127705:	89 d8                	mov    %ebx,%eax
f0127707:	3d 00 01 00 00       	cmp    $0x100,%eax
f012770c:	74 19                	je     f0127727 <test_kexpand+0xa53>
f012770e:	68 1c b0 13 f0       	push   $0xf013b01c
f0127713:	68 05 b0 13 f0       	push   $0xf013b005
f0127718:	68 a1 0b 00 00       	push   $0xba1
f012771d:	68 3a a2 13 f0       	push   $0xf013a23a
f0127722:	e8 7f 8a fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127727:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012772d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0127730:	eb 1a                	jmp    f012774c <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0127732:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127735:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012773c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127742:	01 c2                	add    %eax,%edx
f0127744:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127747:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127749:	ff 45 f4             	incl   -0xc(%ebp)
f012774c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012774f:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127755:	7c db                	jl     f0127732 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127757:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012775e:	eb 37                	jmp    f0127797 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0127760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127763:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012776a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127770:	01 d0                	add    %edx,%eax
f0127772:	8b 10                	mov    (%eax),%edx
f0127774:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127777:	39 c2                	cmp    %eax,%edx
f0127779:	74 19                	je     f0127794 <test_kexpand+0xac0>
f012777b:	68 4c b0 13 f0       	push   $0xf013b04c
f0127780:	68 05 b0 13 f0       	push   $0xf013b005
f0127785:	68 ad 0b 00 00       	push   $0xbad
f012778a:	68 3a a2 13 f0       	push   $0xf013a23a
f012778f:	e8 12 8a fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127794:	ff 45 f4             	incl   -0xc(%ebp)
f0127797:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012779a:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01277a0:	7c be                	jl     f0127760 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01277a2:	e8 23 46 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01277a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277aa:	e8 dd c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01277af:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f01277b2:	83 ec 0c             	sub    $0xc,%esp
f01277b5:	68 00 00 a0 00       	push   $0xa00000
f01277ba:	e8 b9 fc fd ff       	call   f0107478 <kexpand>
f01277bf:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01277c2:	e8 c5 c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01277c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01277ca:	74 19                	je     f01277e5 <test_kexpand+0xb11>
f01277cc:	68 d4 af 13 f0       	push   $0xf013afd4
f01277d1:	68 05 b0 13 f0       	push   $0xf013b005
f01277d6:	68 b8 0b 00 00       	push   $0xbb8
f01277db:	68 3a a2 13 f0       	push   $0xf013a23a
f01277e0:	e8 c1 89 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01277e5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01277e8:	e8 dd 45 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01277ed:	29 c3                	sub    %eax,%ebx
f01277ef:	89 d8                	mov    %ebx,%eax
f01277f1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01277f6:	74 19                	je     f0127811 <test_kexpand+0xb3d>
f01277f8:	68 58 b0 13 f0       	push   $0xf013b058
f01277fd:	68 05 b0 13 f0       	push   $0xf013b005
f0127802:	68 b9 0b 00 00       	push   $0xbb9
f0127807:	68 3a a2 13 f0       	push   $0xf013a23a
f012780c:	e8 95 89 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127811:	e8 b4 45 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127816:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127819:	e8 6e c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012781e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127821:	83 ec 0c             	sub    $0xc,%esp
f0127824:	68 00 00 40 00       	push   $0x400000
f0127829:	e8 ae fb fd ff       	call   f01073dc <kmalloc>
f012782e:	83 c4 10             	add    $0x10,%esp
f0127831:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127837:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012783d:	89 c1                	mov    %eax,%ecx
f012783f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0127846:	10 00 00 
f0127849:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012784f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127854:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012785a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127860:	ba 00 00 00 00       	mov    $0x0,%edx
f0127865:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012786b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127871:	29 d0                	sub    %edx,%eax
f0127873:	89 c3                	mov    %eax,%ebx
f0127875:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012787c:	10 00 00 
f012787f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127884:	0f b6 d0             	movzbl %al,%edx
f0127887:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012788d:	01 d0                	add    %edx,%eax
f012788f:	48                   	dec    %eax
f0127890:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0127896:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012789c:	ba 00 00 00 00       	mov    $0x0,%edx
f01278a1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01278a7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01278ad:	29 d0                	sub    %edx,%eax
f01278af:	01 c3                	add    %eax,%ebx
f01278b1:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01278b8:	10 00 00 
f01278bb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01278c0:	0f b6 c0             	movzbl %al,%eax
f01278c3:	c1 e0 04             	shl    $0x4,%eax
f01278c6:	89 c2                	mov    %eax,%edx
f01278c8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01278ce:	01 d0                	add    %edx,%eax
f01278d0:	48                   	dec    %eax
f01278d1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01278d7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01278dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01278e2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01278e8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01278ee:	29 d0                	sub    %edx,%eax
f01278f0:	01 d8                	add    %ebx,%eax
f01278f2:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01278f7:	39 c1                	cmp    %eax,%ecx
f01278f9:	74 17                	je     f0127912 <test_kexpand+0xc3e>
f01278fb:	83 ec 04             	sub    $0x4,%esp
f01278fe:	68 88 b0 13 f0       	push   $0xf013b088
f0127903:	68 c4 0b 00 00       	push   $0xbc4
f0127908:	68 3a a2 13 f0       	push   $0xf013a23a
f012790d:	e8 94 88 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127912:	e8 75 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127917:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012791a:	74 17                	je     f0127933 <test_kexpand+0xc5f>
f012791c:	83 ec 04             	sub    $0x4,%esp
f012791f:	68 54 a2 13 f0       	push   $0xf013a254
f0127924:	68 c5 0b 00 00       	push   $0xbc5
f0127929:	68 3a a2 13 f0       	push   $0xf013a23a
f012792e:	e8 73 88 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127933:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127936:	e8 8f 44 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012793b:	29 c3                	sub    %eax,%ebx
f012793d:	89 d8                	mov    %ebx,%eax
f012793f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127944:	74 17                	je     f012795d <test_kexpand+0xc89>
f0127946:	83 ec 04             	sub    $0x4,%esp
f0127949:	68 bc a2 13 f0       	push   $0xf013a2bc
f012794e:	68 c6 0b 00 00       	push   $0xbc6
f0127953:	68 3a a2 13 f0       	push   $0xf013a23a
f0127958:	e8 49 88 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f012795d:	e8 68 44 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127962:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127965:	e8 22 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012796a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012796d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127973:	83 ec 0c             	sub    $0xc,%esp
f0127976:	50                   	push   %eax
f0127977:	e8 7a fa fd ff       	call   f01073f6 <kfree>
f012797c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012797f:	e8 08 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127984:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127987:	74 17                	je     f01279a0 <test_kexpand+0xccc>
f0127989:	83 ec 04             	sub    $0x4,%esp
f012798c:	68 54 a2 13 f0       	push   $0xf013a254
f0127991:	68 cf 0b 00 00       	push   $0xbcf
f0127996:	68 3a a2 13 f0       	push   $0xf013a23a
f012799b:	e8 06 88 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01279a0:	e8 25 44 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01279a5:	89 c2                	mov    %eax,%edx
f01279a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01279aa:	29 c2                	sub    %eax,%edx
f01279ac:	89 d0                	mov    %edx,%eax
f01279ae:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01279b3:	74 17                	je     f01279cc <test_kexpand+0xcf8>
f01279b5:	83 ec 04             	sub    $0x4,%esp
f01279b8:	68 ec aa 13 f0       	push   $0xf013aaec
f01279bd:	68 d0 0b 00 00       	push   $0xbd0
f01279c2:	68 3a a2 13 f0       	push   $0xf013a23a
f01279c7:	e8 da 87 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01279cc:	e8 f9 43 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01279d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279d4:	e8 b3 c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279d9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01279dc:	83 ec 0c             	sub    $0xc,%esp
f01279df:	68 00 50 40 00       	push   $0x405000
f01279e4:	e8 8f fa fd ff       	call   f0107478 <kexpand>
f01279e9:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01279ec:	e8 9b c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279f1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279f4:	74 19                	je     f0127a0f <test_kexpand+0xd3b>
f01279f6:	68 d4 af 13 f0       	push   $0xf013afd4
f01279fb:	68 05 b0 13 f0       	push   $0xf013b005
f0127a00:	68 da 0b 00 00       	push   $0xbda
f0127a05:	68 3a a2 13 f0       	push   $0xf013a23a
f0127a0a:	e8 97 87 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0127a0f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127a12:	e8 b3 43 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127a17:	29 c3                	sub    %eax,%ebx
f0127a19:	89 d8                	mov    %ebx,%eax
f0127a1b:	83 f8 05             	cmp    $0x5,%eax
f0127a1e:	74 19                	je     f0127a39 <test_kexpand+0xd65>
f0127a20:	68 b0 b0 13 f0       	push   $0xf013b0b0
f0127a25:	68 05 b0 13 f0       	push   $0xf013b005
f0127a2a:	68 db 0b 00 00       	push   $0xbdb
f0127a2f:	68 3a a2 13 f0       	push   $0xf013a23a
f0127a34:	e8 6d 87 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127a39:	83 ec 0c             	sub    $0xc,%esp
f0127a3c:	68 98 af 13 f0       	push   $0xf013af98
f0127a41:	e8 e7 91 fd ff       	call   f0100c2d <cprintf>
f0127a46:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127a49:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127a4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127a51:	5b                   	pop    %ebx
f0127a52:	5f                   	pop    %edi
f0127a53:	5d                   	pop    %ebp
f0127a54:	c3                   	ret    

f0127a55 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127a55:	55                   	push   %ebp
f0127a56:	89 e5                	mov    %esp,%ebp
f0127a58:	57                   	push   %edi
f0127a59:	53                   	push   %ebx
f0127a5a:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0127a60:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127a64:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127a68:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127a6e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127a74:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127a7b:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127a82:	e8 43 43 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127a87:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127a8a:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0127a90:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127a95:	b8 00 00 00 00       	mov    $0x0,%eax
f0127a9a:	89 d7                	mov    %edx,%edi
f0127a9c:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127a9e:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0127aa4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127aa9:	b8 00 00 00 00       	mov    $0x0,%eax
f0127aae:	89 d7                	mov    %edx,%edi
f0127ab0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ab2:	e8 13 43 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127ab7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127aba:	e8 cd c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127abf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127ac2:	83 ec 0c             	sub    $0xc,%esp
f0127ac5:	68 00 fc 1f 00       	push   $0x1ffc00
f0127aca:	e8 0d f9 fd ff       	call   f01073dc <kmalloc>
f0127acf:	83 c4 10             	add    $0x10,%esp
f0127ad2:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127ad8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0127ade:	89 c1                	mov    %eax,%ecx
f0127ae0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127ae7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127aea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127aef:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127af2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127af5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127afa:	f7 75 d4             	divl   -0x2c(%ebp)
f0127afd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127b00:	29 d0                	sub    %edx,%eax
f0127b02:	89 c3                	mov    %eax,%ebx
f0127b04:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127b0b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127b10:	0f b6 d0             	movzbl %al,%edx
f0127b13:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127b16:	01 d0                	add    %edx,%eax
f0127b18:	48                   	dec    %eax
f0127b19:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127b1c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127b1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b24:	f7 75 cc             	divl   -0x34(%ebp)
f0127b27:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127b2a:	29 d0                	sub    %edx,%eax
f0127b2c:	01 c3                	add    %eax,%ebx
f0127b2e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127b35:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127b3a:	0f b6 c0             	movzbl %al,%eax
f0127b3d:	c1 e0 04             	shl    $0x4,%eax
f0127b40:	89 c2                	mov    %eax,%edx
f0127b42:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127b45:	01 d0                	add    %edx,%eax
f0127b47:	48                   	dec    %eax
f0127b48:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127b4b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b53:	f7 75 c4             	divl   -0x3c(%ebp)
f0127b56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127b59:	29 d0                	sub    %edx,%eax
f0127b5b:	01 d8                	add    %ebx,%eax
f0127b5d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127b62:	39 c1                	cmp    %eax,%ecx
f0127b64:	74 17                	je     f0127b7d <test_kshrink+0x128>
f0127b66:	83 ec 04             	sub    $0x4,%esp
f0127b69:	68 20 a3 13 f0       	push   $0xf013a320
f0127b6e:	68 01 0c 00 00       	push   $0xc01
f0127b73:	68 3a a2 13 f0       	push   $0xf013a23a
f0127b78:	e8 29 86 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b7d:	e8 0a c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127b82:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b85:	74 17                	je     f0127b9e <test_kshrink+0x149>
f0127b87:	83 ec 04             	sub    $0x4,%esp
f0127b8a:	68 54 a2 13 f0       	push   $0xf013a254
f0127b8f:	68 02 0c 00 00       	push   $0xc02
f0127b94:	68 3a a2 13 f0       	push   $0xf013a23a
f0127b99:	e8 08 86 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b9e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127ba1:	e8 24 42 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127ba6:	29 c3                	sub    %eax,%ebx
f0127ba8:	89 d8                	mov    %ebx,%eax
f0127baa:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127baf:	74 17                	je     f0127bc8 <test_kshrink+0x173>
f0127bb1:	83 ec 04             	sub    $0x4,%esp
f0127bb4:	68 bc a2 13 f0       	push   $0xf013a2bc
f0127bb9:	68 03 0c 00 00       	push   $0xc03
f0127bbe:	68 3a a2 13 f0       	push   $0xf013a23a
f0127bc3:	e8 de 85 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127bc8:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0127bcf:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127bd2:	e8 f3 41 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127bd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bda:	e8 ad c0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127bdf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127be2:	83 ec 0c             	sub    $0xc,%esp
f0127be5:	68 00 fc 1f 00       	push   $0x1ffc00
f0127bea:	e8 ed f7 fd ff       	call   f01073dc <kmalloc>
f0127bef:	83 c4 10             	add    $0x10,%esp
f0127bf2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127bf8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127bfe:	89 c1                	mov    %eax,%ecx
f0127c00:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127c07:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127c0a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127c0f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127c12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127c15:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c1a:	f7 75 bc             	divl   -0x44(%ebp)
f0127c1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127c20:	29 d0                	sub    %edx,%eax
f0127c22:	89 c3                	mov    %eax,%ebx
f0127c24:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127c2b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127c30:	0f b6 d0             	movzbl %al,%edx
f0127c33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127c36:	01 d0                	add    %edx,%eax
f0127c38:	48                   	dec    %eax
f0127c39:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127c3c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127c3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c44:	f7 75 b4             	divl   -0x4c(%ebp)
f0127c47:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127c4a:	29 d0                	sub    %edx,%eax
f0127c4c:	01 c3                	add    %eax,%ebx
f0127c4e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127c55:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127c5a:	0f b6 c0             	movzbl %al,%eax
f0127c5d:	c1 e0 04             	shl    $0x4,%eax
f0127c60:	89 c2                	mov    %eax,%edx
f0127c62:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127c65:	01 d0                	add    %edx,%eax
f0127c67:	48                   	dec    %eax
f0127c68:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127c6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c73:	f7 75 ac             	divl   -0x54(%ebp)
f0127c76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c79:	29 d0                	sub    %edx,%eax
f0127c7b:	01 d8                	add    %ebx,%eax
f0127c7d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127c82:	39 c1                	cmp    %eax,%ecx
f0127c84:	74 17                	je     f0127c9d <test_kshrink+0x248>
f0127c86:	83 ec 04             	sub    $0x4,%esp
f0127c89:	68 20 a3 13 f0       	push   $0xf013a320
f0127c8e:	68 0a 0c 00 00       	push   $0xc0a
f0127c93:	68 3a a2 13 f0       	push   $0xf013a23a
f0127c98:	e8 09 85 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c9d:	e8 ea bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ca2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ca5:	74 17                	je     f0127cbe <test_kshrink+0x269>
f0127ca7:	83 ec 04             	sub    $0x4,%esp
f0127caa:	68 54 a2 13 f0       	push   $0xf013a254
f0127caf:	68 0b 0c 00 00       	push   $0xc0b
f0127cb4:	68 3a a2 13 f0       	push   $0xf013a23a
f0127cb9:	e8 e8 84 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cbe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127cc1:	e8 04 41 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127cc6:	29 c3                	sub    %eax,%ebx
f0127cc8:	89 d8                	mov    %ebx,%eax
f0127cca:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127ccf:	74 17                	je     f0127ce8 <test_kshrink+0x293>
f0127cd1:	83 ec 04             	sub    $0x4,%esp
f0127cd4:	68 bc a2 13 f0       	push   $0xf013a2bc
f0127cd9:	68 0c 0c 00 00       	push   $0xc0c
f0127cde:	68 3a a2 13 f0       	push   $0xf013a23a
f0127ce3:	e8 be 84 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127ce8:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0127cef:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127cf2:	e8 d3 40 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127cf7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cfa:	e8 8d bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127cff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127d02:	83 ec 0c             	sub    $0xc,%esp
f0127d05:	68 00 08 00 00       	push   $0x800
f0127d0a:	e8 cd f6 fd ff       	call   f01073dc <kmalloc>
f0127d0f:	83 c4 10             	add    $0x10,%esp
f0127d12:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d18:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0127d1e:	89 c1                	mov    %eax,%ecx
f0127d20:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127d27:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127d2a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d2f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127d32:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127d35:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d3a:	f7 75 a4             	divl   -0x5c(%ebp)
f0127d3d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127d40:	29 d0                	sub    %edx,%eax
f0127d42:	89 c3                	mov    %eax,%ebx
f0127d44:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127d4b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127d50:	0f b6 d0             	movzbl %al,%edx
f0127d53:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127d56:	01 d0                	add    %edx,%eax
f0127d58:	48                   	dec    %eax
f0127d59:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127d5c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127d5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d64:	f7 75 9c             	divl   -0x64(%ebp)
f0127d67:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127d6a:	29 d0                	sub    %edx,%eax
f0127d6c:	01 c3                	add    %eax,%ebx
f0127d6e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127d75:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127d7a:	0f b6 c0             	movzbl %al,%eax
f0127d7d:	c1 e0 04             	shl    $0x4,%eax
f0127d80:	89 c2                	mov    %eax,%edx
f0127d82:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127d85:	01 d0                	add    %edx,%eax
f0127d87:	48                   	dec    %eax
f0127d88:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127d8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127d8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d93:	f7 75 94             	divl   -0x6c(%ebp)
f0127d96:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127d99:	29 d0                	sub    %edx,%eax
f0127d9b:	01 d8                	add    %ebx,%eax
f0127d9d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127da2:	39 c1                	cmp    %eax,%ecx
f0127da4:	74 17                	je     f0127dbd <test_kshrink+0x368>
f0127da6:	83 ec 04             	sub    $0x4,%esp
f0127da9:	68 20 a3 13 f0       	push   $0xf013a320
f0127dae:	68 13 0c 00 00       	push   $0xc13
f0127db3:	68 3a a2 13 f0       	push   $0xf013a23a
f0127db8:	e8 e9 83 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dbd:	e8 ca be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127dc2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127dc5:	74 17                	je     f0127dde <test_kshrink+0x389>
f0127dc7:	83 ec 04             	sub    $0x4,%esp
f0127dca:	68 54 a2 13 f0       	push   $0xf013a254
f0127dcf:	68 14 0c 00 00       	push   $0xc14
f0127dd4:	68 3a a2 13 f0       	push   $0xf013a23a
f0127dd9:	e8 c8 83 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127dde:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127de1:	e8 e4 3f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127de6:	29 c3                	sub    %eax,%ebx
f0127de8:	89 d8                	mov    %ebx,%eax
f0127dea:	83 f8 01             	cmp    $0x1,%eax
f0127ded:	74 17                	je     f0127e06 <test_kshrink+0x3b1>
f0127def:	83 ec 04             	sub    $0x4,%esp
f0127df2:	68 bc a2 13 f0       	push   $0xf013a2bc
f0127df7:	68 15 0c 00 00       	push   $0xc15
f0127dfc:	68 3a a2 13 f0       	push   $0xf013a23a
f0127e01:	e8 a0 83 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127e06:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0127e0d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127e10:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0127e16:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127e19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e20:	eb 0e                	jmp    f0127e30 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0127e22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127e25:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127e28:	01 d0                	add    %edx,%eax
f0127e2a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127e2d:	ff 45 f4             	incl   -0xc(%ebp)
f0127e30:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127e36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e39:	7f e7                	jg     f0127e22 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e3b:	e8 8a 3f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127e40:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e43:	e8 44 be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e48:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127e4b:	83 ec 0c             	sub    $0xc,%esp
f0127e4e:	68 00 08 00 00       	push   $0x800
f0127e53:	e8 84 f5 fd ff       	call   f01073dc <kmalloc>
f0127e58:	83 c4 10             	add    $0x10,%esp
f0127e5b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e61:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0127e67:	89 c1                	mov    %eax,%ecx
f0127e69:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127e70:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127e73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e78:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127e7b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e83:	f7 75 88             	divl   -0x78(%ebp)
f0127e86:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e89:	29 d0                	sub    %edx,%eax
f0127e8b:	89 c3                	mov    %eax,%ebx
f0127e8d:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127e94:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127e99:	0f b6 d0             	movzbl %al,%edx
f0127e9c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127e9f:	01 d0                	add    %edx,%eax
f0127ea1:	48                   	dec    %eax
f0127ea2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127ea8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127eae:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eb3:	f7 75 80             	divl   -0x80(%ebp)
f0127eb6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127ebc:	29 d0                	sub    %edx,%eax
f0127ebe:	01 c3                	add    %eax,%ebx
f0127ec0:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127ec7:	10 00 00 
f0127eca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127ecf:	0f b6 c0             	movzbl %al,%eax
f0127ed2:	c1 e0 04             	shl    $0x4,%eax
f0127ed5:	89 c2                	mov    %eax,%edx
f0127ed7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127edd:	01 d0                	add    %edx,%eax
f0127edf:	48                   	dec    %eax
f0127ee0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127ee6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127eec:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ef1:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127ef7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127efd:	29 d0                	sub    %edx,%eax
f0127eff:	01 d8                	add    %ebx,%eax
f0127f01:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127f06:	39 c1                	cmp    %eax,%ecx
f0127f08:	74 17                	je     f0127f21 <test_kshrink+0x4cc>
f0127f0a:	83 ec 04             	sub    $0x4,%esp
f0127f0d:	68 20 a3 13 f0       	push   $0xf013a320
f0127f12:	68 21 0c 00 00       	push   $0xc21
f0127f17:	68 3a a2 13 f0       	push   $0xf013a23a
f0127f1c:	e8 85 82 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f21:	e8 66 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127f26:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f29:	74 17                	je     f0127f42 <test_kshrink+0x4ed>
f0127f2b:	83 ec 04             	sub    $0x4,%esp
f0127f2e:	68 54 a2 13 f0       	push   $0xf013a254
f0127f33:	68 22 0c 00 00       	push   $0xc22
f0127f38:	68 3a a2 13 f0       	push   $0xf013a23a
f0127f3d:	e8 64 82 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f42:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f45:	e8 80 3e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127f4a:	29 c3                	sub    %eax,%ebx
f0127f4c:	89 d8                	mov    %ebx,%eax
f0127f4e:	83 f8 01             	cmp    $0x1,%eax
f0127f51:	74 17                	je     f0127f6a <test_kshrink+0x515>
f0127f53:	83 ec 04             	sub    $0x4,%esp
f0127f56:	68 bc a2 13 f0       	push   $0xf013a2bc
f0127f5b:	68 23 0c 00 00       	push   $0xc23
f0127f60:	68 3a a2 13 f0       	push   $0xf013a23a
f0127f65:	e8 3c 82 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127f6a:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0127f71:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127f74:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0127f7a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127f7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f84:	eb 0e                	jmp    f0127f94 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0127f86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f89:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127f8c:	01 d0                	add    %edx,%eax
f0127f8e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127f91:	ff 45 f4             	incl   -0xc(%ebp)
f0127f94:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127f9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127f9d:	7f e7                	jg     f0127f86 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f9f:	e8 26 3e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0127fa4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127fa7:	e8 e0 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127fac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127faf:	83 ec 0c             	sub    $0xc,%esp
f0127fb2:	68 00 1c 00 00       	push   $0x1c00
f0127fb7:	e8 20 f4 fd ff       	call   f01073dc <kmalloc>
f0127fbc:	83 c4 10             	add    $0x10,%esp
f0127fbf:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127fc5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0127fcb:	89 c1                	mov    %eax,%ecx
f0127fcd:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127fd4:	10 00 00 
f0127fd7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127fdd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127fe2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127fe8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127fee:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ff3:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127ff9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127fff:	29 d0                	sub    %edx,%eax
f0128001:	89 c3                	mov    %eax,%ebx
f0128003:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012800a:	10 00 00 
f012800d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128012:	0f b6 d0             	movzbl %al,%edx
f0128015:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012801b:	01 d0                	add    %edx,%eax
f012801d:	48                   	dec    %eax
f012801e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128024:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012802a:	ba 00 00 00 00       	mov    $0x0,%edx
f012802f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128035:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012803b:	29 d0                	sub    %edx,%eax
f012803d:	01 c3                	add    %eax,%ebx
f012803f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128046:	10 00 00 
f0128049:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012804e:	0f b6 c0             	movzbl %al,%eax
f0128051:	c1 e0 04             	shl    $0x4,%eax
f0128054:	89 c2                	mov    %eax,%edx
f0128056:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012805c:	01 d0                	add    %edx,%eax
f012805e:	48                   	dec    %eax
f012805f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128065:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012806b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128070:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128076:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012807c:	29 d0                	sub    %edx,%eax
f012807e:	01 d8                	add    %ebx,%eax
f0128080:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128085:	39 c1                	cmp    %eax,%ecx
f0128087:	74 17                	je     f01280a0 <test_kshrink+0x64b>
f0128089:	83 ec 04             	sub    $0x4,%esp
f012808c:	68 20 a3 13 f0       	push   $0xf013a320
f0128091:	68 2f 0c 00 00       	push   $0xc2f
f0128096:	68 3a a2 13 f0       	push   $0xf013a23a
f012809b:	e8 06 81 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280a0:	e8 e7 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01280a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280a8:	74 17                	je     f01280c1 <test_kshrink+0x66c>
f01280aa:	83 ec 04             	sub    $0x4,%esp
f01280ad:	68 54 a2 13 f0       	push   $0xf013a254
f01280b2:	68 30 0c 00 00       	push   $0xc30
f01280b7:	68 3a a2 13 f0       	push   $0xf013a23a
f01280bc:	e8 e5 80 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01280c1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01280c4:	e8 01 3d fe ff       	call   f010bdca <sys_calculate_free_frames>
f01280c9:	29 c3                	sub    %eax,%ebx
f01280cb:	89 d8                	mov    %ebx,%eax
f01280cd:	83 f8 02             	cmp    $0x2,%eax
f01280d0:	74 17                	je     f01280e9 <test_kshrink+0x694>
f01280d2:	83 ec 04             	sub    $0x4,%esp
f01280d5:	68 bc a2 13 f0       	push   $0xf013a2bc
f01280da:	68 31 0c 00 00       	push   $0xc31
f01280df:	68 3a a2 13 f0       	push   $0xf013a23a
f01280e4:	e8 bd 80 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01280e9:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01280f0:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01280f3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01280f9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01280fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128103:	eb 0e                	jmp    f0128113 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128105:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128108:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012810b:	01 d0                	add    %edx,%eax
f012810d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128110:	ff 45 f4             	incl   -0xc(%ebp)
f0128113:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128119:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012811c:	7f e7                	jg     f0128105 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012811e:	e8 a7 3c fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128123:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128126:	e8 61 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012812b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012812e:	83 ec 0c             	sub    $0xc,%esp
f0128131:	68 00 fc 2f 00       	push   $0x2ffc00
f0128136:	e8 a1 f2 fd ff       	call   f01073dc <kmalloc>
f012813b:	83 c4 10             	add    $0x10,%esp
f012813e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128144:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012814a:	89 c1                	mov    %eax,%ecx
f012814c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128153:	10 00 00 
f0128156:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012815c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128161:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128167:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012816d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128172:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128178:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012817e:	29 d0                	sub    %edx,%eax
f0128180:	89 c3                	mov    %eax,%ebx
f0128182:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128189:	10 00 00 
f012818c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128191:	0f b6 d0             	movzbl %al,%edx
f0128194:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012819a:	01 d0                	add    %edx,%eax
f012819c:	48                   	dec    %eax
f012819d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01281a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01281a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01281ae:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01281b4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01281ba:	29 d0                	sub    %edx,%eax
f01281bc:	01 c3                	add    %eax,%ebx
f01281be:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01281c5:	10 00 00 
f01281c8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01281cd:	0f b6 c0             	movzbl %al,%eax
f01281d0:	c1 e0 04             	shl    $0x4,%eax
f01281d3:	89 c2                	mov    %eax,%edx
f01281d5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01281db:	01 d0                	add    %edx,%eax
f01281dd:	48                   	dec    %eax
f01281de:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01281e4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01281ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01281ef:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01281f5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01281fb:	29 d0                	sub    %edx,%eax
f01281fd:	01 d8                	add    %ebx,%eax
f01281ff:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128204:	39 c1                	cmp    %eax,%ecx
f0128206:	74 17                	je     f012821f <test_kshrink+0x7ca>
f0128208:	83 ec 04             	sub    $0x4,%esp
f012820b:	68 20 a3 13 f0       	push   $0xf013a320
f0128210:	68 3d 0c 00 00       	push   $0xc3d
f0128215:	68 3a a2 13 f0       	push   $0xf013a23a
f012821a:	e8 87 7f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012821f:	e8 68 ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128224:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128227:	74 17                	je     f0128240 <test_kshrink+0x7eb>
f0128229:	83 ec 04             	sub    $0x4,%esp
f012822c:	68 54 a2 13 f0       	push   $0xf013a254
f0128231:	68 3e 0c 00 00       	push   $0xc3e
f0128236:	68 3a a2 13 f0       	push   $0xf013a23a
f012823b:	e8 66 7f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128240:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128243:	e8 82 3b fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128248:	29 c3                	sub    %eax,%ebx
f012824a:	89 d8                	mov    %ebx,%eax
f012824c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128251:	74 17                	je     f012826a <test_kshrink+0x815>
f0128253:	83 ec 04             	sub    $0x4,%esp
f0128256:	68 bc a2 13 f0       	push   $0xf013a2bc
f012825b:	68 3f 0c 00 00       	push   $0xc3f
f0128260:	68 3a a2 13 f0       	push   $0xf013a23a
f0128265:	e8 3c 7f fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012826a:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128271:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128274:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012827a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012827d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128284:	eb 0e                	jmp    f0128294 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128286:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128289:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012828c:	01 d0                	add    %edx,%eax
f012828e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128291:	ff 45 f4             	incl   -0xc(%ebp)
f0128294:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012829a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012829d:	7f e7                	jg     f0128286 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012829f:	e8 26 3b fe ff       	call   f010bdca <sys_calculate_free_frames>
f01282a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282a7:	e8 e0 b9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01282ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01282af:	83 ec 0c             	sub    $0xc,%esp
f01282b2:	68 00 00 60 00       	push   $0x600000
f01282b7:	e8 20 f1 fd ff       	call   f01073dc <kmalloc>
f01282bc:	83 c4 10             	add    $0x10,%esp
f01282bf:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01282c5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01282cb:	89 c1                	mov    %eax,%ecx
f01282cd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01282d4:	10 00 00 
f01282d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01282dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01282e2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01282e8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01282ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01282f3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01282f9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01282ff:	29 d0                	sub    %edx,%eax
f0128301:	89 c3                	mov    %eax,%ebx
f0128303:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012830a:	10 00 00 
f012830d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128312:	0f b6 d0             	movzbl %al,%edx
f0128315:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012831b:	01 d0                	add    %edx,%eax
f012831d:	48                   	dec    %eax
f012831e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128324:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012832a:	ba 00 00 00 00       	mov    $0x0,%edx
f012832f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128335:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012833b:	29 d0                	sub    %edx,%eax
f012833d:	01 c3                	add    %eax,%ebx
f012833f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128346:	10 00 00 
f0128349:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012834e:	0f b6 c0             	movzbl %al,%eax
f0128351:	c1 e0 04             	shl    $0x4,%eax
f0128354:	89 c2                	mov    %eax,%edx
f0128356:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012835c:	01 d0                	add    %edx,%eax
f012835e:	48                   	dec    %eax
f012835f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128365:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012836b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128370:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128376:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012837c:	29 d0                	sub    %edx,%eax
f012837e:	01 d8                	add    %ebx,%eax
f0128380:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128385:	39 c1                	cmp    %eax,%ecx
f0128387:	74 17                	je     f01283a0 <test_kshrink+0x94b>
f0128389:	83 ec 04             	sub    $0x4,%esp
f012838c:	68 20 a3 13 f0       	push   $0xf013a320
f0128391:	68 4b 0c 00 00       	push   $0xc4b
f0128396:	68 3a a2 13 f0       	push   $0xf013a23a
f012839b:	e8 06 7e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283a0:	e8 e7 b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01283a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01283a8:	74 17                	je     f01283c1 <test_kshrink+0x96c>
f01283aa:	83 ec 04             	sub    $0x4,%esp
f01283ad:	68 54 a2 13 f0       	push   $0xf013a254
f01283b2:	68 4c 0c 00 00       	push   $0xc4c
f01283b7:	68 3a a2 13 f0       	push   $0xf013a23a
f01283bc:	e8 e5 7d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01283c1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01283c4:	e8 01 3a fe ff       	call   f010bdca <sys_calculate_free_frames>
f01283c9:	29 c3                	sub    %eax,%ebx
f01283cb:	89 d8                	mov    %ebx,%eax
f01283cd:	3d 00 06 00 00       	cmp    $0x600,%eax
f01283d2:	74 17                	je     f01283eb <test_kshrink+0x996>
f01283d4:	83 ec 04             	sub    $0x4,%esp
f01283d7:	68 bc a2 13 f0       	push   $0xf013a2bc
f01283dc:	68 4d 0c 00 00       	push   $0xc4d
f01283e1:	68 3a a2 13 f0       	push   $0xf013a23a
f01283e6:	e8 bb 7d fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01283eb:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01283f2:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01283f5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01283fb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128401:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128408:	eb 1a                	jmp    f0128424 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f012840a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012840d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128414:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012841a:	01 c2                	add    %eax,%edx
f012841c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012841f:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128421:	ff 45 f4             	incl   -0xc(%ebp)
f0128424:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012842a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012842d:	7d db                	jge    f012840a <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012842f:	e8 96 39 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128434:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128437:	e8 50 b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012843c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f012843f:	83 ec 0c             	sub    $0xc,%esp
f0128442:	68 00 00 50 00       	push   $0x500000
f0128447:	e8 12 f0 fd ff       	call   f010745e <kshrink>
f012844c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012844f:	e8 38 b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128454:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128457:	74 19                	je     f0128472 <test_kshrink+0xa1d>
f0128459:	68 d4 af 13 f0       	push   $0xf013afd4
f012845e:	68 05 b0 13 f0       	push   $0xf013b005
f0128463:	68 5d 0c 00 00       	push   $0xc5d
f0128468:	68 3a a2 13 f0       	push   $0xf013a23a
f012846d:	e8 34 7d fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128472:	e8 53 39 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128477:	89 c2                	mov    %eax,%edx
f0128479:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012847c:	29 c2                	sub    %eax,%edx
f012847e:	89 d0                	mov    %edx,%eax
f0128480:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128485:	74 19                	je     f01284a0 <test_kshrink+0xa4b>
f0128487:	68 e0 b0 13 f0       	push   $0xf013b0e0
f012848c:	68 05 b0 13 f0       	push   $0xf013b005
f0128491:	68 5e 0c 00 00       	push   $0xc5e
f0128496:	68 3a a2 13 f0       	push   $0xf013a23a
f012849b:	e8 06 7d fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f01284a0:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f01284a7:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01284aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284b1:	eb 37                	jmp    f01284ea <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f01284b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01284b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01284bd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01284c3:	01 d0                	add    %edx,%eax
f01284c5:	8b 10                	mov    (%eax),%edx
f01284c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01284ca:	39 c2                	cmp    %eax,%edx
f01284cc:	74 19                	je     f01284e7 <test_kshrink+0xa92>
f01284ce:	68 10 b1 13 f0       	push   $0xf013b110
f01284d3:	68 05 b0 13 f0       	push   $0xf013b005
f01284d8:	68 66 0c 00 00       	push   $0xc66
f01284dd:	68 3a a2 13 f0       	push   $0xf013a23a
f01284e2:	e8 bf 7c fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01284e7:	ff 45 f4             	incl   -0xc(%ebp)
f01284ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01284ed:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01284f3:	7e be                	jle    f01284b3 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01284f5:	83 ec 0c             	sub    $0xc,%esp
f01284f8:	6a 03                	push   $0x3
f01284fa:	e8 74 3d fe ff       	call   f010c273 <sys_bypassPageFault>
f01284ff:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128502:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128508:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f012850b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012850e:	05 00 00 50 00       	add    $0x500000,%eax
f0128513:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128516:	e8 46 3d fe ff       	call   f010c261 <sys_rcr2>
f012851b:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012851e:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128524:	39 d0                	cmp    %edx,%eax
f0128526:	74 19                	je     f0128541 <test_kshrink+0xaec>
f0128528:	68 1c b1 13 f0       	push   $0xf013b11c
f012852d:	68 05 b0 13 f0       	push   $0xf013b005
f0128532:	68 6f 0c 00 00       	push   $0xc6f
f0128537:	68 3a a2 13 f0       	push   $0xf013a23a
f012853c:	e8 65 7c fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0128541:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128544:	05 00 10 50 00       	add    $0x501000,%eax
f0128549:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f012854c:	e8 10 3d fe ff       	call   f010c261 <sys_rcr2>
f0128551:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128554:	81 c2 00 10 50 00    	add    $0x501000,%edx
f012855a:	39 d0                	cmp    %edx,%eax
f012855c:	74 19                	je     f0128577 <test_kshrink+0xb22>
f012855e:	68 44 b1 13 f0       	push   $0xf013b144
f0128563:	68 05 b0 13 f0       	push   $0xf013b005
f0128568:	68 72 0c 00 00       	push   $0xc72
f012856d:	68 3a a2 13 f0       	push   $0xf013a23a
f0128572:	e8 2f 7c fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f0128577:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012857a:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f012857f:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128582:	e8 da 3c fe ff       	call   f010c261 <sys_rcr2>
f0128587:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012858a:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128590:	39 d0                	cmp    %edx,%eax
f0128592:	74 19                	je     f01285ad <test_kshrink+0xb58>
f0128594:	68 70 b1 13 f0       	push   $0xf013b170
f0128599:	68 05 b0 13 f0       	push   $0xf013b005
f012859e:	68 75 0c 00 00       	push   $0xc75
f01285a3:	68 3a a2 13 f0       	push   $0xf013a23a
f01285a8:	e8 f9 7b fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01285ad:	83 ec 0c             	sub    $0xc,%esp
f01285b0:	6a 00                	push   $0x0
f01285b2:	e8 bc 3c fe ff       	call   f010c273 <sys_bypassPageFault>
f01285b7:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01285ba:	e8 0b 38 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01285bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285c2:	e8 c5 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01285c7:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01285ca:	83 ec 0c             	sub    $0xc,%esp
f01285cd:	68 00 00 20 00       	push   $0x200000
f01285d2:	e8 87 ee fd ff       	call   f010745e <kshrink>
f01285d7:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01285da:	e8 ad b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01285df:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285e2:	74 19                	je     f01285fd <test_kshrink+0xba8>
f01285e4:	68 d4 af 13 f0       	push   $0xf013afd4
f01285e9:	68 05 b0 13 f0       	push   $0xf013b005
f01285ee:	68 82 0c 00 00       	push   $0xc82
f01285f3:	68 3a a2 13 f0       	push   $0xf013a23a
f01285f8:	e8 a9 7b fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01285fd:	e8 c8 37 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128602:	89 c2                	mov    %eax,%edx
f0128604:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128607:	29 c2                	sub    %eax,%edx
f0128609:	89 d0                	mov    %edx,%eax
f012860b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128610:	74 19                	je     f012862b <test_kshrink+0xbd6>
f0128612:	68 9c b1 13 f0       	push   $0xf013b19c
f0128617:	68 05 b0 13 f0       	push   $0xf013b005
f012861c:	68 83 0c 00 00       	push   $0xc83
f0128621:	68 3a a2 13 f0       	push   $0xf013a23a
f0128626:	e8 7b 7b fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012862b:	e8 9a 37 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128630:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128633:	e8 54 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128638:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f012863b:	83 ec 0c             	sub    $0xc,%esp
f012863e:	68 00 00 40 00       	push   $0x400000
f0128643:	e8 94 ed fd ff       	call   f01073dc <kmalloc>
f0128648:	83 c4 10             	add    $0x10,%esp
f012864b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0128651:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128658:	10 00 00 
f012865b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128661:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128666:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012866c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128672:	ba 00 00 00 00       	mov    $0x0,%edx
f0128677:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012867d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128683:	29 d0                	sub    %edx,%eax
f0128685:	89 c1                	mov    %eax,%ecx
f0128687:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012868e:	10 00 00 
f0128691:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128696:	0f b6 d0             	movzbl %al,%edx
f0128699:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012869f:	01 d0                	add    %edx,%eax
f01286a1:	48                   	dec    %eax
f01286a2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01286a8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01286ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01286b3:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01286b9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01286bf:	29 d0                	sub    %edx,%eax
f01286c1:	01 c1                	add    %eax,%ecx
f01286c3:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01286ca:	10 00 00 
f01286cd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01286d2:	0f b6 c0             	movzbl %al,%eax
f01286d5:	c1 e0 04             	shl    $0x4,%eax
f01286d8:	89 c2                	mov    %eax,%edx
f01286da:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01286e0:	01 d0                	add    %edx,%eax
f01286e2:	48                   	dec    %eax
f01286e3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01286e9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01286ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01286f4:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01286fa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128700:	29 d0                	sub    %edx,%eax
f0128702:	01 c8                	add    %ecx,%eax
f0128704:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f012870a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128710:	83 ec 04             	sub    $0x4,%esp
f0128713:	52                   	push   %edx
f0128714:	50                   	push   %eax
f0128715:	68 cc b1 13 f0       	push   $0xf013b1cc
f012871a:	e8 0e 85 fd ff       	call   f0100c2d <cprintf>
f012871f:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0128722:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128728:	89 c1                	mov    %eax,%ecx
f012872a:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128731:	10 00 00 
f0128734:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012873a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012873f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128745:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012874b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128750:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128756:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012875c:	29 d0                	sub    %edx,%eax
f012875e:	89 c3                	mov    %eax,%ebx
f0128760:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128767:	10 00 00 
f012876a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012876f:	0f b6 d0             	movzbl %al,%edx
f0128772:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128778:	01 d0                	add    %edx,%eax
f012877a:	48                   	dec    %eax
f012877b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128781:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128787:	ba 00 00 00 00       	mov    $0x0,%edx
f012878c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128792:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128798:	29 d0                	sub    %edx,%eax
f012879a:	01 c3                	add    %eax,%ebx
f012879c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01287a3:	10 00 00 
f01287a6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01287ab:	0f b6 c0             	movzbl %al,%eax
f01287ae:	c1 e0 04             	shl    $0x4,%eax
f01287b1:	89 c2                	mov    %eax,%edx
f01287b3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01287b9:	01 d0                	add    %edx,%eax
f01287bb:	48                   	dec    %eax
f01287bc:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01287c2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01287c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01287cd:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01287d3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01287d9:	29 d0                	sub    %edx,%eax
f01287db:	01 d8                	add    %ebx,%eax
f01287dd:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01287e2:	39 c1                	cmp    %eax,%ecx
f01287e4:	74 17                	je     f01287fd <test_kshrink+0xda8>
f01287e6:	83 ec 04             	sub    $0x4,%esp
f01287e9:	68 e8 b1 13 f0       	push   $0xf013b1e8
f01287ee:	68 8e 0c 00 00       	push   $0xc8e
f01287f3:	68 3a a2 13 f0       	push   $0xf013a23a
f01287f8:	e8 a9 79 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287fd:	e8 8a b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128802:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128805:	74 17                	je     f012881e <test_kshrink+0xdc9>
f0128807:	83 ec 04             	sub    $0x4,%esp
f012880a:	68 54 a2 13 f0       	push   $0xf013a254
f012880f:	68 8f 0c 00 00       	push   $0xc8f
f0128814:	68 3a a2 13 f0       	push   $0xf013a23a
f0128819:	e8 88 79 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012881e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128821:	e8 a4 35 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128826:	29 c3                	sub    %eax,%ebx
f0128828:	89 d8                	mov    %ebx,%eax
f012882a:	3d 00 04 00 00       	cmp    $0x400,%eax
f012882f:	74 17                	je     f0128848 <test_kshrink+0xdf3>
f0128831:	83 ec 04             	sub    $0x4,%esp
f0128834:	68 bc a2 13 f0       	push   $0xf013a2bc
f0128839:	68 90 0c 00 00       	push   $0xc90
f012883e:	68 3a a2 13 f0       	push   $0xf013a23a
f0128843:	e8 5e 79 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0128848:	e8 7d 35 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012884d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128850:	e8 37 b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128855:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128858:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012885e:	83 ec 0c             	sub    $0xc,%esp
f0128861:	50                   	push   %eax
f0128862:	e8 8f eb fd ff       	call   f01073f6 <kfree>
f0128867:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012886a:	e8 1d b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012886f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128872:	74 17                	je     f012888b <test_kshrink+0xe36>
f0128874:	83 ec 04             	sub    $0x4,%esp
f0128877:	68 54 a2 13 f0       	push   $0xf013a254
f012887c:	68 9a 0c 00 00       	push   $0xc9a
f0128881:	68 3a a2 13 f0       	push   $0xf013a23a
f0128886:	e8 1b 79 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012888b:	e8 3a 35 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128890:	89 c2                	mov    %eax,%edx
f0128892:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128895:	29 c2                	sub    %eax,%edx
f0128897:	89 d0                	mov    %edx,%eax
f0128899:	3d 00 02 00 00       	cmp    $0x200,%eax
f012889e:	74 17                	je     f01288b7 <test_kshrink+0xe62>
f01288a0:	83 ec 04             	sub    $0x4,%esp
f01288a3:	68 ec aa 13 f0       	push   $0xf013aaec
f01288a8:	68 9b 0c 00 00       	push   $0xc9b
f01288ad:	68 3a a2 13 f0       	push   $0xf013a23a
f01288b2:	e8 ef 78 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01288b7:	e8 0e 35 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01288bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01288bf:	e8 c8 b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01288c4:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f01288c7:	83 ec 0c             	sub    $0xc,%esp
f01288ca:	68 00 b0 3f 00       	push   $0x3fb000
f01288cf:	e8 8a eb fd ff       	call   f010745e <kshrink>
f01288d4:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01288d7:	e8 b0 b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01288dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288df:	74 19                	je     f01288fa <test_kshrink+0xea5>
f01288e1:	68 d4 af 13 f0       	push   $0xf013afd4
f01288e6:	68 05 b0 13 f0       	push   $0xf013b005
f01288eb:	68 a5 0c 00 00       	push   $0xca5
f01288f0:	68 3a a2 13 f0       	push   $0xf013a23a
f01288f5:	e8 ac 78 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f01288fa:	e8 cb 34 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01288ff:	89 c2                	mov    %eax,%edx
f0128901:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128904:	29 c2                	sub    %eax,%edx
f0128906:	89 d0                	mov    %edx,%eax
f0128908:	83 f8 05             	cmp    $0x5,%eax
f012890b:	74 19                	je     f0128926 <test_kshrink+0xed1>
f012890d:	68 3c b2 13 f0       	push   $0xf013b23c
f0128912:	68 05 b0 13 f0       	push   $0xf013b005
f0128917:	68 a6 0c 00 00       	push   $0xca6
f012891c:	68 3a a2 13 f0       	push   $0xf013a23a
f0128921:	e8 80 78 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128926:	83 ec 0c             	sub    $0xc,%esp
f0128929:	68 98 af 13 f0       	push   $0xf013af98
f012892e:	e8 fa 82 fd ff       	call   f0100c2d <cprintf>
f0128933:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128936:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012893b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012893e:	5b                   	pop    %ebx
f012893f:	5f                   	pop    %edi
f0128940:	5d                   	pop    %ebp
f0128941:	c3                   	ret    

f0128942 <test_kfreelast>:


int test_kfreelast()
{
f0128942:	55                   	push   %ebp
f0128943:	89 e5                	mov    %esp,%ebp
f0128945:	57                   	push   %edi
f0128946:	53                   	push   %ebx
f0128947:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012894d:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0128951:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0128955:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012895b:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0128961:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128968:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012896f:	e8 56 34 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128974:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128977:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012897d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128982:	b8 00 00 00 00       	mov    $0x0,%eax
f0128987:	89 d7                	mov    %edx,%edi
f0128989:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012898b:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0128991:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128996:	b8 00 00 00 00       	mov    $0x0,%eax
f012899b:	89 d7                	mov    %edx,%edi
f012899d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012899f:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f01289a5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01289aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01289af:	89 d7                	mov    %edx,%edi
f01289b1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01289b3:	e8 12 34 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01289b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289bb:	e8 cc b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01289c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01289c3:	83 ec 0c             	sub    $0xc,%esp
f01289c6:	68 00 fc 1f 00       	push   $0x1ffc00
f01289cb:	e8 0c ea fd ff       	call   f01073dc <kmalloc>
f01289d0:	83 c4 10             	add    $0x10,%esp
f01289d3:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01289d9:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01289df:	89 c1                	mov    %eax,%ecx
f01289e1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01289e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01289eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01289f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01289f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01289f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01289fb:	f7 75 cc             	divl   -0x34(%ebp)
f01289fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128a01:	29 d0                	sub    %edx,%eax
f0128a03:	89 c3                	mov    %eax,%ebx
f0128a05:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128a0c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128a11:	0f b6 d0             	movzbl %al,%edx
f0128a14:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128a17:	01 d0                	add    %edx,%eax
f0128a19:	48                   	dec    %eax
f0128a1a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128a1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128a20:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a25:	f7 75 c4             	divl   -0x3c(%ebp)
f0128a28:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128a2b:	29 d0                	sub    %edx,%eax
f0128a2d:	01 c3                	add    %eax,%ebx
f0128a2f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128a36:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128a3b:	0f b6 c0             	movzbl %al,%eax
f0128a3e:	c1 e0 04             	shl    $0x4,%eax
f0128a41:	89 c2                	mov    %eax,%edx
f0128a43:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128a46:	01 d0                	add    %edx,%eax
f0128a48:	48                   	dec    %eax
f0128a49:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128a4c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128a4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a54:	f7 75 bc             	divl   -0x44(%ebp)
f0128a57:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128a5a:	29 d0                	sub    %edx,%eax
f0128a5c:	01 d8                	add    %ebx,%eax
f0128a5e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128a63:	39 c1                	cmp    %eax,%ecx
f0128a65:	74 17                	je     f0128a7e <test_kfreelast+0x13c>
f0128a67:	83 ec 04             	sub    $0x4,%esp
f0128a6a:	68 20 a3 13 f0       	push   $0xf013a320
f0128a6f:	68 ca 0c 00 00       	push   $0xcca
f0128a74:	68 3a a2 13 f0       	push   $0xf013a23a
f0128a79:	e8 28 77 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a7e:	e8 09 b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128a83:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128a86:	74 17                	je     f0128a9f <test_kfreelast+0x15d>
f0128a88:	83 ec 04             	sub    $0x4,%esp
f0128a8b:	68 54 a2 13 f0       	push   $0xf013a254
f0128a90:	68 cb 0c 00 00       	push   $0xccb
f0128a95:	68 3a a2 13 f0       	push   $0xf013a23a
f0128a9a:	e8 07 77 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a9f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128aa2:	e8 23 33 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128aa7:	29 c3                	sub    %eax,%ebx
f0128aa9:	89 d8                	mov    %ebx,%eax
f0128aab:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128ab0:	74 17                	je     f0128ac9 <test_kfreelast+0x187>
f0128ab2:	83 ec 04             	sub    $0x4,%esp
f0128ab5:	68 bc a2 13 f0       	push   $0xf013a2bc
f0128aba:	68 cc 0c 00 00       	push   $0xccc
f0128abf:	68 3a a2 13 f0       	push   $0xf013a23a
f0128ac4:	e8 dd 76 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128ac9:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0128ad0:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ad3:	e8 f2 32 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128ad8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128adb:	e8 ac b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ae0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128ae3:	83 ec 0c             	sub    $0xc,%esp
f0128ae6:	68 00 fc 1f 00       	push   $0x1ffc00
f0128aeb:	e8 ec e8 fd ff       	call   f01073dc <kmalloc>
f0128af0:	83 c4 10             	add    $0x10,%esp
f0128af3:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128af9:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0128aff:	89 c1                	mov    %eax,%ecx
f0128b01:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128b08:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128b0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b10:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128b13:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128b16:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b1b:	f7 75 b4             	divl   -0x4c(%ebp)
f0128b1e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128b21:	29 d0                	sub    %edx,%eax
f0128b23:	89 c3                	mov    %eax,%ebx
f0128b25:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128b2c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128b31:	0f b6 d0             	movzbl %al,%edx
f0128b34:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128b37:	01 d0                	add    %edx,%eax
f0128b39:	48                   	dec    %eax
f0128b3a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128b3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128b40:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b45:	f7 75 ac             	divl   -0x54(%ebp)
f0128b48:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128b4b:	29 d0                	sub    %edx,%eax
f0128b4d:	01 c3                	add    %eax,%ebx
f0128b4f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128b56:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128b5b:	0f b6 c0             	movzbl %al,%eax
f0128b5e:	c1 e0 04             	shl    $0x4,%eax
f0128b61:	89 c2                	mov    %eax,%edx
f0128b63:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128b66:	01 d0                	add    %edx,%eax
f0128b68:	48                   	dec    %eax
f0128b69:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128b6c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128b6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b74:	f7 75 a4             	divl   -0x5c(%ebp)
f0128b77:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128b7a:	29 d0                	sub    %edx,%eax
f0128b7c:	01 d8                	add    %ebx,%eax
f0128b7e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128b83:	39 c1                	cmp    %eax,%ecx
f0128b85:	74 17                	je     f0128b9e <test_kfreelast+0x25c>
f0128b87:	83 ec 04             	sub    $0x4,%esp
f0128b8a:	68 20 a3 13 f0       	push   $0xf013a320
f0128b8f:	68 d3 0c 00 00       	push   $0xcd3
f0128b94:	68 3a a2 13 f0       	push   $0xf013a23a
f0128b99:	e8 08 76 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b9e:	e8 e9 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ba3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ba6:	74 17                	je     f0128bbf <test_kfreelast+0x27d>
f0128ba8:	83 ec 04             	sub    $0x4,%esp
f0128bab:	68 54 a2 13 f0       	push   $0xf013a254
f0128bb0:	68 d4 0c 00 00       	push   $0xcd4
f0128bb5:	68 3a a2 13 f0       	push   $0xf013a23a
f0128bba:	e8 e7 75 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128bbf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128bc2:	e8 03 32 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128bc7:	29 c3                	sub    %eax,%ebx
f0128bc9:	89 d8                	mov    %ebx,%eax
f0128bcb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128bd0:	74 17                	je     f0128be9 <test_kfreelast+0x2a7>
f0128bd2:	83 ec 04             	sub    $0x4,%esp
f0128bd5:	68 bc a2 13 f0       	push   $0xf013a2bc
f0128bda:	68 d5 0c 00 00       	push   $0xcd5
f0128bdf:	68 3a a2 13 f0       	push   $0xf013a23a
f0128be4:	e8 bd 75 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128be9:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0128bf0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128bf3:	e8 d2 31 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128bf8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bfb:	e8 8c b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128c03:	83 ec 0c             	sub    $0xc,%esp
f0128c06:	68 00 08 00 00       	push   $0x800
f0128c0b:	e8 cc e7 fd ff       	call   f01073dc <kmalloc>
f0128c10:	83 c4 10             	add    $0x10,%esp
f0128c13:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c19:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0128c1f:	89 c1                	mov    %eax,%ecx
f0128c21:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128c28:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128c2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c30:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128c33:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128c36:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c3b:	f7 75 9c             	divl   -0x64(%ebp)
f0128c3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128c41:	29 d0                	sub    %edx,%eax
f0128c43:	89 c3                	mov    %eax,%ebx
f0128c45:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128c4c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128c51:	0f b6 d0             	movzbl %al,%edx
f0128c54:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128c57:	01 d0                	add    %edx,%eax
f0128c59:	48                   	dec    %eax
f0128c5a:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128c5d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128c60:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c65:	f7 75 94             	divl   -0x6c(%ebp)
f0128c68:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128c6b:	29 d0                	sub    %edx,%eax
f0128c6d:	01 c3                	add    %eax,%ebx
f0128c6f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0128c76:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128c7b:	0f b6 c0             	movzbl %al,%eax
f0128c7e:	c1 e0 04             	shl    $0x4,%eax
f0128c81:	89 c2                	mov    %eax,%edx
f0128c83:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c86:	01 d0                	add    %edx,%eax
f0128c88:	48                   	dec    %eax
f0128c89:	89 45 88             	mov    %eax,-0x78(%ebp)
f0128c8c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128c8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c94:	f7 75 8c             	divl   -0x74(%ebp)
f0128c97:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128c9a:	29 d0                	sub    %edx,%eax
f0128c9c:	01 d8                	add    %ebx,%eax
f0128c9e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128ca3:	39 c1                	cmp    %eax,%ecx
f0128ca5:	74 17                	je     f0128cbe <test_kfreelast+0x37c>
f0128ca7:	83 ec 04             	sub    $0x4,%esp
f0128caa:	68 20 a3 13 f0       	push   $0xf013a320
f0128caf:	68 dc 0c 00 00       	push   $0xcdc
f0128cb4:	68 3a a2 13 f0       	push   $0xf013a23a
f0128cb9:	e8 e8 74 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128cbe:	e8 c9 af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128cc3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128cc6:	74 17                	je     f0128cdf <test_kfreelast+0x39d>
f0128cc8:	83 ec 04             	sub    $0x4,%esp
f0128ccb:	68 54 a2 13 f0       	push   $0xf013a254
f0128cd0:	68 dd 0c 00 00       	push   $0xcdd
f0128cd5:	68 3a a2 13 f0       	push   $0xf013a23a
f0128cda:	e8 c7 74 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128cdf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128ce2:	e8 e3 30 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128ce7:	29 c3                	sub    %eax,%ebx
f0128ce9:	89 d8                	mov    %ebx,%eax
f0128ceb:	83 f8 01             	cmp    $0x1,%eax
f0128cee:	74 17                	je     f0128d07 <test_kfreelast+0x3c5>
f0128cf0:	83 ec 04             	sub    $0x4,%esp
f0128cf3:	68 bc a2 13 f0       	push   $0xf013a2bc
f0128cf8:	68 de 0c 00 00       	push   $0xcde
f0128cfd:	68 3a a2 13 f0       	push   $0xf013a23a
f0128d02:	e8 9f 74 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128d07:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0128d0e:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128d11:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0128d17:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128d1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d21:	eb 0e                	jmp    f0128d31 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0128d23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128d26:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128d29:	01 d0                	add    %edx,%eax
f0128d2b:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128d2e:	ff 45 f4             	incl   -0xc(%ebp)
f0128d31:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128d37:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d3a:	7f e7                	jg     f0128d23 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d3c:	e8 89 30 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128d41:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d44:	e8 43 af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128d49:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128d4c:	83 ec 0c             	sub    $0xc,%esp
f0128d4f:	68 00 08 00 00       	push   $0x800
f0128d54:	e8 83 e6 fd ff       	call   f01073dc <kmalloc>
f0128d59:	83 c4 10             	add    $0x10,%esp
f0128d5c:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d62:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0128d68:	89 c1                	mov    %eax,%ecx
f0128d6a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128d71:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128d74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d79:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128d7f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d8a:	f7 75 80             	divl   -0x80(%ebp)
f0128d8d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128d93:	29 d0                	sub    %edx,%eax
f0128d95:	89 c3                	mov    %eax,%ebx
f0128d97:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128d9e:	10 00 00 
f0128da1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128da6:	0f b6 d0             	movzbl %al,%edx
f0128da9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128daf:	01 d0                	add    %edx,%eax
f0128db1:	48                   	dec    %eax
f0128db2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128db8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128dbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dc3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128dc9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128dcf:	29 d0                	sub    %edx,%eax
f0128dd1:	01 c3                	add    %eax,%ebx
f0128dd3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128dda:	10 00 00 
f0128ddd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128de2:	0f b6 c0             	movzbl %al,%eax
f0128de5:	c1 e0 04             	shl    $0x4,%eax
f0128de8:	89 c2                	mov    %eax,%edx
f0128dea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128df0:	01 d0                	add    %edx,%eax
f0128df2:	48                   	dec    %eax
f0128df3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128df9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128dff:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e04:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128e0a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128e10:	29 d0                	sub    %edx,%eax
f0128e12:	01 d8                	add    %ebx,%eax
f0128e14:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128e19:	39 c1                	cmp    %eax,%ecx
f0128e1b:	74 17                	je     f0128e34 <test_kfreelast+0x4f2>
f0128e1d:	83 ec 04             	sub    $0x4,%esp
f0128e20:	68 20 a3 13 f0       	push   $0xf013a320
f0128e25:	68 ea 0c 00 00       	push   $0xcea
f0128e2a:	68 3a a2 13 f0       	push   $0xf013a23a
f0128e2f:	e8 72 73 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e34:	e8 53 ae fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128e39:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e3c:	74 17                	je     f0128e55 <test_kfreelast+0x513>
f0128e3e:	83 ec 04             	sub    $0x4,%esp
f0128e41:	68 54 a2 13 f0       	push   $0xf013a254
f0128e46:	68 eb 0c 00 00       	push   $0xceb
f0128e4b:	68 3a a2 13 f0       	push   $0xf013a23a
f0128e50:	e8 51 73 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e55:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e58:	e8 6d 2f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128e5d:	29 c3                	sub    %eax,%ebx
f0128e5f:	89 d8                	mov    %ebx,%eax
f0128e61:	83 f8 01             	cmp    $0x1,%eax
f0128e64:	74 17                	je     f0128e7d <test_kfreelast+0x53b>
f0128e66:	83 ec 04             	sub    $0x4,%esp
f0128e69:	68 bc a2 13 f0       	push   $0xf013a2bc
f0128e6e:	68 ec 0c 00 00       	push   $0xcec
f0128e73:	68 3a a2 13 f0       	push   $0xf013a23a
f0128e78:	e8 29 73 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128e7d:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0128e84:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128e87:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0128e8d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128e90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e97:	eb 0e                	jmp    f0128ea7 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0128e99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e9c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128e9f:	01 d0                	add    %edx,%eax
f0128ea1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128ea4:	ff 45 f4             	incl   -0xc(%ebp)
f0128ea7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0128ead:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128eb0:	7f e7                	jg     f0128e99 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128eb2:	e8 13 2f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128eb7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128eba:	e8 cd ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128ebf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128ec2:	83 ec 0c             	sub    $0xc,%esp
f0128ec5:	68 00 1c 00 00       	push   $0x1c00
f0128eca:	e8 0d e5 fd ff       	call   f01073dc <kmalloc>
f0128ecf:	83 c4 10             	add    $0x10,%esp
f0128ed2:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ed8:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0128ede:	89 c1                	mov    %eax,%ecx
f0128ee0:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128ee7:	10 00 00 
f0128eea:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128ef0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ef5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128efb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128f01:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f06:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128f0c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128f12:	29 d0                	sub    %edx,%eax
f0128f14:	89 c3                	mov    %eax,%ebx
f0128f16:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128f1d:	10 00 00 
f0128f20:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128f25:	0f b6 d0             	movzbl %al,%edx
f0128f28:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128f2e:	01 d0                	add    %edx,%eax
f0128f30:	48                   	dec    %eax
f0128f31:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128f37:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128f3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f42:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128f48:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128f4e:	29 d0                	sub    %edx,%eax
f0128f50:	01 c3                	add    %eax,%ebx
f0128f52:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128f59:	10 00 00 
f0128f5c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128f61:	0f b6 c0             	movzbl %al,%eax
f0128f64:	c1 e0 04             	shl    $0x4,%eax
f0128f67:	89 c2                	mov    %eax,%edx
f0128f69:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128f6f:	01 d0                	add    %edx,%eax
f0128f71:	48                   	dec    %eax
f0128f72:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128f78:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128f7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f83:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128f89:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128f8f:	29 d0                	sub    %edx,%eax
f0128f91:	01 d8                	add    %ebx,%eax
f0128f93:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128f98:	39 c1                	cmp    %eax,%ecx
f0128f9a:	74 17                	je     f0128fb3 <test_kfreelast+0x671>
f0128f9c:	83 ec 04             	sub    $0x4,%esp
f0128f9f:	68 20 a3 13 f0       	push   $0xf013a320
f0128fa4:	68 f8 0c 00 00       	push   $0xcf8
f0128fa9:	68 3a a2 13 f0       	push   $0xf013a23a
f0128fae:	e8 f3 71 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128fb3:	e8 d4 ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128fb8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128fbb:	74 17                	je     f0128fd4 <test_kfreelast+0x692>
f0128fbd:	83 ec 04             	sub    $0x4,%esp
f0128fc0:	68 54 a2 13 f0       	push   $0xf013a254
f0128fc5:	68 f9 0c 00 00       	push   $0xcf9
f0128fca:	68 3a a2 13 f0       	push   $0xf013a23a
f0128fcf:	e8 d2 71 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fd4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128fd7:	e8 ee 2d fe ff       	call   f010bdca <sys_calculate_free_frames>
f0128fdc:	29 c3                	sub    %eax,%ebx
f0128fde:	89 d8                	mov    %ebx,%eax
f0128fe0:	83 f8 02             	cmp    $0x2,%eax
f0128fe3:	74 17                	je     f0128ffc <test_kfreelast+0x6ba>
f0128fe5:	83 ec 04             	sub    $0x4,%esp
f0128fe8:	68 bc a2 13 f0       	push   $0xf013a2bc
f0128fed:	68 fa 0c 00 00       	push   $0xcfa
f0128ff2:	68 3a a2 13 f0       	push   $0xf013a23a
f0128ff7:	e8 aa 71 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128ffc:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129003:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129006:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012900c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012900f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129016:	eb 0e                	jmp    f0129026 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129018:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012901b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012901e:	01 d0                	add    %edx,%eax
f0129020:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129023:	ff 45 f4             	incl   -0xc(%ebp)
f0129026:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012902c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012902f:	7f e7                	jg     f0129018 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129031:	e8 94 2d fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129036:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129039:	e8 4e ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012903e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129041:	83 ec 0c             	sub    $0xc,%esp
f0129044:	68 00 fc 2f 00       	push   $0x2ffc00
f0129049:	e8 8e e3 fd ff       	call   f01073dc <kmalloc>
f012904e:	83 c4 10             	add    $0x10,%esp
f0129051:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129057:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012905d:	89 c1                	mov    %eax,%ecx
f012905f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129066:	10 00 00 
f0129069:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012906f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129074:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012907a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129080:	ba 00 00 00 00       	mov    $0x0,%edx
f0129085:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012908b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129091:	29 d0                	sub    %edx,%eax
f0129093:	89 c3                	mov    %eax,%ebx
f0129095:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012909c:	10 00 00 
f012909f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01290a4:	0f b6 d0             	movzbl %al,%edx
f01290a7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01290ad:	01 d0                	add    %edx,%eax
f01290af:	48                   	dec    %eax
f01290b0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01290b6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01290bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01290c1:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01290c7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01290cd:	29 d0                	sub    %edx,%eax
f01290cf:	01 c3                	add    %eax,%ebx
f01290d1:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01290d8:	10 00 00 
f01290db:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01290e0:	0f b6 c0             	movzbl %al,%eax
f01290e3:	c1 e0 04             	shl    $0x4,%eax
f01290e6:	89 c2                	mov    %eax,%edx
f01290e8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01290ee:	01 d0                	add    %edx,%eax
f01290f0:	48                   	dec    %eax
f01290f1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01290f7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01290fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129102:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129108:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012910e:	29 d0                	sub    %edx,%eax
f0129110:	01 d8                	add    %ebx,%eax
f0129112:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129117:	39 c1                	cmp    %eax,%ecx
f0129119:	74 17                	je     f0129132 <test_kfreelast+0x7f0>
f012911b:	83 ec 04             	sub    $0x4,%esp
f012911e:	68 20 a3 13 f0       	push   $0xf013a320
f0129123:	68 06 0d 00 00       	push   $0xd06
f0129128:	68 3a a2 13 f0       	push   $0xf013a23a
f012912d:	e8 74 70 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129132:	e8 55 ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129137:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012913a:	74 17                	je     f0129153 <test_kfreelast+0x811>
f012913c:	83 ec 04             	sub    $0x4,%esp
f012913f:	68 54 a2 13 f0       	push   $0xf013a254
f0129144:	68 07 0d 00 00       	push   $0xd07
f0129149:	68 3a a2 13 f0       	push   $0xf013a23a
f012914e:	e8 53 70 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129153:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129156:	e8 6f 2c fe ff       	call   f010bdca <sys_calculate_free_frames>
f012915b:	29 c3                	sub    %eax,%ebx
f012915d:	89 d8                	mov    %ebx,%eax
f012915f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129164:	74 17                	je     f012917d <test_kfreelast+0x83b>
f0129166:	83 ec 04             	sub    $0x4,%esp
f0129169:	68 bc a2 13 f0       	push   $0xf013a2bc
f012916e:	68 08 0d 00 00       	push   $0xd08
f0129173:	68 3a a2 13 f0       	push   $0xf013a23a
f0129178:	e8 29 70 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012917d:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129184:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129187:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012918d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129190:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129197:	eb 0e                	jmp    f01291a7 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129199:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012919c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012919f:	01 d0                	add    %edx,%eax
f01291a1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01291a4:	ff 45 f4             	incl   -0xc(%ebp)
f01291a7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01291ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01291b0:	7f e7                	jg     f0129199 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01291b2:	e8 13 2c fe ff       	call   f010bdca <sys_calculate_free_frames>
f01291b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291ba:	e8 cd aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01291bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01291c2:	83 ec 0c             	sub    $0xc,%esp
f01291c5:	68 00 fc 5f 00       	push   $0x5ffc00
f01291ca:	e8 0d e2 fd ff       	call   f01073dc <kmalloc>
f01291cf:	83 c4 10             	add    $0x10,%esp
f01291d2:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01291d8:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f01291de:	89 c1                	mov    %eax,%ecx
f01291e0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01291e7:	10 00 00 
f01291ea:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01291f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01291f5:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01291fb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129201:	ba 00 00 00 00       	mov    $0x0,%edx
f0129206:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012920c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129212:	29 d0                	sub    %edx,%eax
f0129214:	89 c3                	mov    %eax,%ebx
f0129216:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012921d:	10 00 00 
f0129220:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129225:	0f b6 d0             	movzbl %al,%edx
f0129228:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012922e:	01 d0                	add    %edx,%eax
f0129230:	48                   	dec    %eax
f0129231:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129237:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012923d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129242:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129248:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012924e:	29 d0                	sub    %edx,%eax
f0129250:	01 c3                	add    %eax,%ebx
f0129252:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129259:	10 00 00 
f012925c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129261:	0f b6 c0             	movzbl %al,%eax
f0129264:	c1 e0 04             	shl    $0x4,%eax
f0129267:	89 c2                	mov    %eax,%edx
f0129269:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012926f:	01 d0                	add    %edx,%eax
f0129271:	48                   	dec    %eax
f0129272:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129278:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012927e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129283:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129289:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012928f:	29 d0                	sub    %edx,%eax
f0129291:	01 d8                	add    %ebx,%eax
f0129293:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129298:	39 c1                	cmp    %eax,%ecx
f012929a:	74 17                	je     f01292b3 <test_kfreelast+0x971>
f012929c:	83 ec 04             	sub    $0x4,%esp
f012929f:	68 20 a3 13 f0       	push   $0xf013a320
f01292a4:	68 14 0d 00 00       	push   $0xd14
f01292a9:	68 3a a2 13 f0       	push   $0xf013a23a
f01292ae:	e8 f3 6e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292b3:	e8 d4 a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01292b8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01292bb:	74 17                	je     f01292d4 <test_kfreelast+0x992>
f01292bd:	83 ec 04             	sub    $0x4,%esp
f01292c0:	68 54 a2 13 f0       	push   $0xf013a254
f01292c5:	68 15 0d 00 00       	push   $0xd15
f01292ca:	68 3a a2 13 f0       	push   $0xf013a23a
f01292cf:	e8 d2 6e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292d4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01292d7:	e8 ee 2a fe ff       	call   f010bdca <sys_calculate_free_frames>
f01292dc:	29 c3                	sub    %eax,%ebx
f01292de:	89 d8                	mov    %ebx,%eax
f01292e0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01292e5:	74 17                	je     f01292fe <test_kfreelast+0x9bc>
f01292e7:	83 ec 04             	sub    $0x4,%esp
f01292ea:	68 bc a2 13 f0       	push   $0xf013a2bc
f01292ef:	68 16 0d 00 00       	push   $0xd16
f01292f4:	68 3a a2 13 f0       	push   $0xf013a23a
f01292f9:	e8 a8 6e fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01292fe:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129305:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129308:	e8 bd 2a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012930d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129310:	e8 77 a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129315:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129318:	83 ec 0c             	sub    $0xc,%esp
f012931b:	68 00 38 00 00       	push   $0x3800
f0129320:	e8 b7 e0 fd ff       	call   f01073dc <kmalloc>
f0129325:	83 c4 10             	add    $0x10,%esp
f0129328:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012932e:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129334:	89 c1                	mov    %eax,%ecx
f0129336:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012933d:	10 00 00 
f0129340:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129346:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012934b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129351:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129357:	ba 00 00 00 00       	mov    $0x0,%edx
f012935c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129362:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129368:	29 d0                	sub    %edx,%eax
f012936a:	89 c3                	mov    %eax,%ebx
f012936c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129373:	10 00 00 
f0129376:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012937b:	0f b6 d0             	movzbl %al,%edx
f012937e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129384:	01 d0                	add    %edx,%eax
f0129386:	48                   	dec    %eax
f0129387:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012938d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129393:	ba 00 00 00 00       	mov    $0x0,%edx
f0129398:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012939e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01293a4:	29 d0                	sub    %edx,%eax
f01293a6:	01 c3                	add    %eax,%ebx
f01293a8:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01293af:	10 00 00 
f01293b2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01293b7:	0f b6 c0             	movzbl %al,%eax
f01293ba:	c1 e0 04             	shl    $0x4,%eax
f01293bd:	89 c2                	mov    %eax,%edx
f01293bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01293c5:	01 d0                	add    %edx,%eax
f01293c7:	48                   	dec    %eax
f01293c8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01293ce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01293d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01293d9:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01293df:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01293e5:	29 d0                	sub    %edx,%eax
f01293e7:	01 d8                	add    %ebx,%eax
f01293e9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01293ee:	39 c1                	cmp    %eax,%ecx
f01293f0:	74 17                	je     f0129409 <test_kfreelast+0xac7>
f01293f2:	83 ec 04             	sub    $0x4,%esp
f01293f5:	68 20 a3 13 f0       	push   $0xf013a320
f01293fa:	68 1d 0d 00 00       	push   $0xd1d
f01293ff:	68 3a a2 13 f0       	push   $0xf013a23a
f0129404:	e8 9d 6d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129409:	e8 7e a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012940e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129411:	74 17                	je     f012942a <test_kfreelast+0xae8>
f0129413:	83 ec 04             	sub    $0x4,%esp
f0129416:	68 54 a2 13 f0       	push   $0xf013a254
f012941b:	68 1e 0d 00 00       	push   $0xd1e
f0129420:	68 3a a2 13 f0       	push   $0xf013a23a
f0129425:	e8 7c 6d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012942a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012942d:	e8 98 29 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129432:	29 c3                	sub    %eax,%ebx
f0129434:	89 d8                	mov    %ebx,%eax
f0129436:	83 f8 04             	cmp    $0x4,%eax
f0129439:	74 17                	je     f0129452 <test_kfreelast+0xb10>
f012943b:	83 ec 04             	sub    $0x4,%esp
f012943e:	68 bc a2 13 f0       	push   $0xf013a2bc
f0129443:	68 1f 0d 00 00       	push   $0xd1f
f0129448:	68 3a a2 13 f0       	push   $0xf013a23a
f012944d:	e8 54 6d fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129452:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129459:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012945c:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129462:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129465:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012946c:	eb 0e                	jmp    f012947c <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012946e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129471:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129474:	01 d0                	add    %edx,%eax
f0129476:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129479:	ff 45 f4             	incl   -0xc(%ebp)
f012947c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129482:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129485:	7f e7                	jg     f012946e <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129487:	e8 3e 29 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012948c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129492:	e8 f5 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129497:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012949d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01294a3:	83 ec 0c             	sub    $0xc,%esp
f01294a6:	50                   	push   %eax
f01294a7:	e8 4a df fd ff       	call   f01073f6 <kfree>
f01294ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294af:	e8 d8 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01294b4:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f01294ba:	74 17                	je     f01294d3 <test_kfreelast+0xb91>
f01294bc:	83 ec 04             	sub    $0x4,%esp
f01294bf:	68 54 a2 13 f0       	push   $0xf013a254
f01294c4:	68 2e 0d 00 00       	push   $0xd2e
f01294c9:	68 3a a2 13 f0       	push   $0xf013a23a
f01294ce:	e8 d3 6c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01294d3:	e8 f2 28 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01294d8:	89 c2                	mov    %eax,%edx
f01294da:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01294e0:	29 c2                	sub    %eax,%edx
f01294e2:	89 d0                	mov    %edx,%eax
f01294e4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01294e9:	74 17                	je     f0129502 <test_kfreelast+0xbc0>
f01294eb:	83 ec 04             	sub    $0x4,%esp
f01294ee:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01294f3:	68 2f 0d 00 00       	push   $0xd2f
f01294f8:	68 3a a2 13 f0       	push   $0xf013a23a
f01294fd:	e8 a4 6c fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129502:	e8 c3 28 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129507:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012950d:	e8 7a a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129512:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129518:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012951e:	83 ec 0c             	sub    $0xc,%esp
f0129521:	50                   	push   %eax
f0129522:	e8 cf de fd ff       	call   f01073f6 <kfree>
f0129527:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012952a:	e8 5d a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012952f:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129535:	74 17                	je     f012954e <test_kfreelast+0xc0c>
f0129537:	83 ec 04             	sub    $0x4,%esp
f012953a:	68 54 a2 13 f0       	push   $0xf013a254
f012953f:	68 35 0d 00 00       	push   $0xd35
f0129544:	68 3a a2 13 f0       	push   $0xf013a23a
f0129549:	e8 58 6c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012954e:	e8 77 28 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129553:	89 c2                	mov    %eax,%edx
f0129555:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012955b:	29 c2                	sub    %eax,%edx
f012955d:	89 d0                	mov    %edx,%eax
f012955f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129564:	74 17                	je     f012957d <test_kfreelast+0xc3b>
f0129566:	83 ec 04             	sub    $0x4,%esp
f0129569:	68 c4 a9 13 f0       	push   $0xf013a9c4
f012956e:	68 36 0d 00 00       	push   $0xd36
f0129573:	68 3a a2 13 f0       	push   $0xf013a23a
f0129578:	e8 29 6c fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012957d:	e8 48 28 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129582:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129588:	e8 ff a6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012958d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129593:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129599:	83 ec 0c             	sub    $0xc,%esp
f012959c:	50                   	push   %eax
f012959d:	e8 54 de fd ff       	call   f01073f6 <kfree>
f01295a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01295a5:	e8 e2 a6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01295aa:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f01295b0:	74 17                	je     f01295c9 <test_kfreelast+0xc87>
f01295b2:	83 ec 04             	sub    $0x4,%esp
f01295b5:	68 54 a2 13 f0       	push   $0xf013a254
f01295ba:	68 3c 0d 00 00       	push   $0xd3c
f01295bf:	68 3a a2 13 f0       	push   $0xf013a23a
f01295c4:	e8 dd 6b fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01295c9:	e8 fc 27 fe ff       	call   f010bdca <sys_calculate_free_frames>
f01295ce:	89 c2                	mov    %eax,%edx
f01295d0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01295d6:	29 c2                	sub    %eax,%edx
f01295d8:	89 d0                	mov    %edx,%eax
f01295da:	3d 00 06 00 00       	cmp    $0x600,%eax
f01295df:	74 17                	je     f01295f8 <test_kfreelast+0xcb6>
f01295e1:	83 ec 04             	sub    $0x4,%esp
f01295e4:	68 c4 a9 13 f0       	push   $0xf013a9c4
f01295e9:	68 3d 0d 00 00       	push   $0xd3d
f01295ee:	68 3a a2 13 f0       	push   $0xf013a23a
f01295f3:	e8 ae 6b fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01295f8:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01295fe:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129601:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129608:	eb 1e                	jmp    f0129628 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012960a:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129610:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129613:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129616:	01 c8                	add    %ecx,%eax
f0129618:	8a 00                	mov    (%eax),%al
f012961a:	0f be c0             	movsbl %al,%eax
f012961d:	01 d0                	add    %edx,%eax
f012961f:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129625:	ff 45 f4             	incl   -0xc(%ebp)
f0129628:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012962e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129631:	7f d7                	jg     f012960a <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0129633:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129639:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012963f:	01 c0                	add    %eax,%eax
f0129641:	39 c2                	cmp    %eax,%edx
f0129643:	74 17                	je     f012965c <test_kfreelast+0xd1a>
f0129645:	83 ec 04             	sub    $0x4,%esp
f0129648:	68 20 aa 13 f0       	push   $0xf013aa20
f012964d:	68 48 0d 00 00       	push   $0xd48
f0129652:	68 3a a2 13 f0       	push   $0xf013a23a
f0129657:	e8 4a 6b fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012965c:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129662:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129665:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012966c:	eb 1e                	jmp    f012968c <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012966e:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129674:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129677:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012967a:	01 c8                	add    %ecx,%eax
f012967c:	8a 00                	mov    (%eax),%al
f012967e:	0f be c0             	movsbl %al,%eax
f0129681:	01 d0                	add    %edx,%eax
f0129683:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129689:	ff 45 f4             	incl   -0xc(%ebp)
f012968c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129692:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129695:	7f d7                	jg     f012966e <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129697:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012969d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01296a3:	89 c1                	mov    %eax,%ecx
f01296a5:	01 c9                	add    %ecx,%ecx
f01296a7:	01 c8                	add    %ecx,%eax
f01296a9:	39 c2                	cmp    %eax,%edx
f01296ab:	74 17                	je     f01296c4 <test_kfreelast+0xd82>
f01296ad:	83 ec 04             	sub    $0x4,%esp
f01296b0:	68 20 aa 13 f0       	push   $0xf013aa20
f01296b5:	68 50 0d 00 00       	push   $0xd50
f01296ba:	68 3a a2 13 f0       	push   $0xf013a23a
f01296bf:	e8 e2 6a fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01296c4:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01296ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01296cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296d4:	eb 1e                	jmp    f01296f4 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f01296d6:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f01296dc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01296df:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01296e2:	01 c8                	add    %ecx,%eax
f01296e4:	8a 00                	mov    (%eax),%al
f01296e6:	0f be c0             	movsbl %al,%eax
f01296e9:	01 d0                	add    %edx,%eax
f01296eb:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01296f1:	ff 45 f4             	incl   -0xc(%ebp)
f01296f4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01296fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01296fd:	7f d7                	jg     f01296d6 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01296ff:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0129705:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012970b:	c1 e2 02             	shl    $0x2,%edx
f012970e:	39 d0                	cmp    %edx,%eax
f0129710:	74 17                	je     f0129729 <test_kfreelast+0xde7>
f0129712:	83 ec 04             	sub    $0x4,%esp
f0129715:	68 20 aa 13 f0       	push   $0xf013aa20
f012971a:	68 58 0d 00 00       	push   $0xd58
f012971f:	68 3a a2 13 f0       	push   $0xf013a23a
f0129724:	e8 7d 6a fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0129729:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012972f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129732:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129739:	eb 1e                	jmp    f0129759 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012973b:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f0129741:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129744:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129747:	01 c8                	add    %ecx,%eax
f0129749:	8a 00                	mov    (%eax),%al
f012974b:	0f be c0             	movsbl %al,%eax
f012974e:	01 d0                	add    %edx,%eax
f0129750:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129756:	ff 45 f4             	incl   -0xc(%ebp)
f0129759:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012975f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129762:	7f d7                	jg     f012973b <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0129764:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012976a:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0129770:	89 d0                	mov    %edx,%eax
f0129772:	c1 e0 02             	shl    $0x2,%eax
f0129775:	01 d0                	add    %edx,%eax
f0129777:	39 c1                	cmp    %eax,%ecx
f0129779:	74 17                	je     f0129792 <test_kfreelast+0xe50>
f012977b:	83 ec 04             	sub    $0x4,%esp
f012977e:	68 20 aa 13 f0       	push   $0xf013aa20
f0129783:	68 60 0d 00 00       	push   $0xd60
f0129788:	68 3a a2 13 f0       	push   $0xf013a23a
f012978d:	e8 14 6a fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129792:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129798:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012979b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297a2:	eb 1e                	jmp    f01297c2 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f01297a4:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f01297aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01297ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01297b0:	01 c8                	add    %ecx,%eax
f01297b2:	8a 00                	mov    (%eax),%al
f01297b4:	0f be c0             	movsbl %al,%eax
f01297b7:	01 d0                	add    %edx,%eax
f01297b9:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01297bf:	ff 45 f4             	incl   -0xc(%ebp)
f01297c2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01297c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01297cb:	7f d7                	jg     f01297a4 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01297cd:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f01297d3:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01297d9:	89 d0                	mov    %edx,%eax
f01297db:	01 c0                	add    %eax,%eax
f01297dd:	01 d0                	add    %edx,%eax
f01297df:	01 c0                	add    %eax,%eax
f01297e1:	01 d0                	add    %edx,%eax
f01297e3:	39 c1                	cmp    %eax,%ecx
f01297e5:	74 17                	je     f01297fe <test_kfreelast+0xebc>
f01297e7:	83 ec 04             	sub    $0x4,%esp
f01297ea:	68 20 aa 13 f0       	push   $0xf013aa20
f01297ef:	68 68 0d 00 00       	push   $0xd68
f01297f4:	68 3a a2 13 f0       	push   $0xf013a23a
f01297f9:	e8 a8 69 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01297fe:	e8 c7 25 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129803:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129806:	e8 81 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012980b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012980e:	83 ec 0c             	sub    $0xc,%esp
f0129811:	68 00 50 00 00       	push   $0x5000
f0129816:	e8 c1 db fd ff       	call   f01073dc <kmalloc>
f012981b:	83 c4 10             	add    $0x10,%esp
f012981e:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129824:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012982a:	89 c1                	mov    %eax,%ecx
f012982c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129833:	10 00 00 
f0129836:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012983c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129841:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129847:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012984d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129852:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129858:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012985e:	29 d0                	sub    %edx,%eax
f0129860:	89 c3                	mov    %eax,%ebx
f0129862:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129869:	10 00 00 
f012986c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129871:	0f b6 d0             	movzbl %al,%edx
f0129874:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012987a:	01 d0                	add    %edx,%eax
f012987c:	48                   	dec    %eax
f012987d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129883:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129889:	ba 00 00 00 00       	mov    $0x0,%edx
f012988e:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129894:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012989a:	29 d0                	sub    %edx,%eax
f012989c:	01 c3                	add    %eax,%ebx
f012989e:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01298a5:	10 00 00 
f01298a8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01298ad:	0f b6 c0             	movzbl %al,%eax
f01298b0:	c1 e0 04             	shl    $0x4,%eax
f01298b3:	89 c2                	mov    %eax,%edx
f01298b5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01298bb:	01 d0                	add    %edx,%eax
f01298bd:	48                   	dec    %eax
f01298be:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01298c4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01298ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01298cf:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01298d5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01298db:	29 d0                	sub    %edx,%eax
f01298dd:	01 d8                	add    %ebx,%eax
f01298df:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01298e4:	39 c1                	cmp    %eax,%ecx
f01298e6:	74 17                	je     f01298ff <test_kfreelast+0xfbd>
f01298e8:	83 ec 04             	sub    $0x4,%esp
f01298eb:	68 20 a3 13 f0       	push   $0xf013a320
f01298f0:	68 71 0d 00 00       	push   $0xd71
f01298f5:	68 3a a2 13 f0       	push   $0xf013a23a
f01298fa:	e8 a7 68 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298ff:	e8 88 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129904:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129907:	74 17                	je     f0129920 <test_kfreelast+0xfde>
f0129909:	83 ec 04             	sub    $0x4,%esp
f012990c:	68 54 a2 13 f0       	push   $0xf013a254
f0129911:	68 72 0d 00 00       	push   $0xd72
f0129916:	68 3a a2 13 f0       	push   $0xf013a23a
f012991b:	e8 86 68 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129920:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129923:	e8 a2 24 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129928:	29 c3                	sub    %eax,%ebx
f012992a:	89 d8                	mov    %ebx,%eax
f012992c:	83 f8 05             	cmp    $0x5,%eax
f012992f:	74 17                	je     f0129948 <test_kfreelast+0x1006>
f0129931:	83 ec 04             	sub    $0x4,%esp
f0129934:	68 bc a2 13 f0       	push   $0xf013a2bc
f0129939:	68 73 0d 00 00       	push   $0xd73
f012993e:	68 3a a2 13 f0       	push   $0xf013a23a
f0129943:	e8 5e 68 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0129948:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012994f:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0129952:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129958:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012995b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129962:	eb 0e                	jmp    f0129972 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f0129964:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129967:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012996a:	01 d0                	add    %edx,%eax
f012996c:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012996f:	ff 45 f4             	incl   -0xc(%ebp)
f0129972:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0129978:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012997b:	7f e7                	jg     f0129964 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012997d:	e8 48 24 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129982:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129985:	e8 02 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012998a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012998d:	83 ec 0c             	sub    $0xc,%esp
f0129990:	68 00 00 10 00       	push   $0x100000
f0129995:	e8 42 da fd ff       	call   f01073dc <kmalloc>
f012999a:	83 c4 10             	add    $0x10,%esp
f012999d:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01299a3:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f01299a9:	89 c1                	mov    %eax,%ecx
f01299ab:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01299b2:	10 00 00 
f01299b5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01299bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299c0:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01299c6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01299cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01299d1:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01299d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01299dd:	29 d0                	sub    %edx,%eax
f01299df:	89 c3                	mov    %eax,%ebx
f01299e1:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01299e8:	10 00 00 
f01299eb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01299f0:	0f b6 d0             	movzbl %al,%edx
f01299f3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01299f9:	01 d0                	add    %edx,%eax
f01299fb:	48                   	dec    %eax
f01299fc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0129a02:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129a08:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a0d:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129a13:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129a19:	29 d0                	sub    %edx,%eax
f0129a1b:	01 c3                	add    %eax,%ebx
f0129a1d:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0129a24:	10 00 00 
f0129a27:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129a2c:	0f b6 c0             	movzbl %al,%eax
f0129a2f:	c1 e0 04             	shl    $0x4,%eax
f0129a32:	89 c2                	mov    %eax,%edx
f0129a34:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129a3a:	01 d0                	add    %edx,%eax
f0129a3c:	48                   	dec    %eax
f0129a3d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129a43:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129a49:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a4e:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0129a54:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129a5a:	29 d0                	sub    %edx,%eax
f0129a5c:	01 d8                	add    %ebx,%eax
f0129a5e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129a63:	39 c1                	cmp    %eax,%ecx
f0129a65:	74 17                	je     f0129a7e <test_kfreelast+0x113c>
f0129a67:	83 ec 04             	sub    $0x4,%esp
f0129a6a:	68 20 a3 13 f0       	push   $0xf013a320
f0129a6f:	68 7f 0d 00 00       	push   $0xd7f
f0129a74:	68 3a a2 13 f0       	push   $0xf013a23a
f0129a79:	e8 28 67 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a7e:	e8 09 a2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129a83:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a86:	74 17                	je     f0129a9f <test_kfreelast+0x115d>
f0129a88:	83 ec 04             	sub    $0x4,%esp
f0129a8b:	68 54 a2 13 f0       	push   $0xf013a254
f0129a90:	68 80 0d 00 00       	push   $0xd80
f0129a95:	68 3a a2 13 f0       	push   $0xf013a23a
f0129a9a:	e8 07 67 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a9f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129aa2:	e8 23 23 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129aa7:	29 c3                	sub    %eax,%ebx
f0129aa9:	89 d8                	mov    %ebx,%eax
f0129aab:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129ab0:	74 17                	je     f0129ac9 <test_kfreelast+0x1187>
f0129ab2:	83 ec 04             	sub    $0x4,%esp
f0129ab5:	68 bc a2 13 f0       	push   $0xf013a2bc
f0129aba:	68 81 0d 00 00       	push   $0xd81
f0129abf:	68 3a a2 13 f0       	push   $0xf013a23a
f0129ac4:	e8 dd 66 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0129ac9:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f0129ad0:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0129ad3:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129ad9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0129adc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ae3:	eb 0e                	jmp    f0129af3 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f0129ae5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ae8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129aeb:	01 d0                	add    %edx,%eax
f0129aed:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0129af0:	ff 45 f4             	incl   -0xc(%ebp)
f0129af3:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0129af9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129afc:	7f e7                	jg     f0129ae5 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0129afe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129b05:	e8 c0 22 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129b0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b0d:	e8 7a a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b12:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129b15:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129b1b:	83 ec 0c             	sub    $0xc,%esp
f0129b1e:	50                   	push   %eax
f0129b1f:	e8 d2 d8 fd ff       	call   f01073f6 <kfree>
f0129b24:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b27:	e8 60 a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b2c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b2f:	74 17                	je     f0129b48 <test_kfreelast+0x1206>
f0129b31:	83 ec 04             	sub    $0x4,%esp
f0129b34:	68 54 a2 13 f0       	push   $0xf013a254
f0129b39:	68 91 0d 00 00       	push   $0xd91
f0129b3e:	68 3a a2 13 f0       	push   $0xf013a23a
f0129b43:	e8 5e 66 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0129b48:	e8 7d 22 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129b4d:	89 c2                	mov    %eax,%edx
f0129b4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b52:	29 c2                	sub    %eax,%edx
f0129b54:	89 d0                	mov    %edx,%eax
f0129b56:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129b5b:	74 17                	je     f0129b74 <test_kfreelast+0x1232>
f0129b5d:	83 ec 04             	sub    $0x4,%esp
f0129b60:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0129b65:	68 92 0d 00 00       	push   $0xd92
f0129b6a:	68 3a a2 13 f0       	push   $0xf013a23a
f0129b6f:	e8 32 66 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b74:	e8 51 22 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129b79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b7c:	e8 0b a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b81:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0129b84:	83 ec 0c             	sub    $0xc,%esp
f0129b87:	68 00 78 00 00       	push   $0x7800
f0129b8c:	e8 4b d8 fd ff       	call   f01073dc <kmalloc>
f0129b91:	83 c4 10             	add    $0x10,%esp
f0129b94:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129b9a:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129ba0:	89 c1                	mov    %eax,%ecx
f0129ba2:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0129ba9:	10 00 00 
f0129bac:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0129bb2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129bb7:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0129bbd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129bc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bc8:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0129bce:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129bd4:	29 d0                	sub    %edx,%eax
f0129bd6:	89 c3                	mov    %eax,%ebx
f0129bd8:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0129bdf:	10 00 00 
f0129be2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129be7:	0f b6 d0             	movzbl %al,%edx
f0129bea:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0129bf0:	01 d0                	add    %edx,%eax
f0129bf2:	48                   	dec    %eax
f0129bf3:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0129bf9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129bff:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c04:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0129c0a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129c10:	29 d0                	sub    %edx,%eax
f0129c12:	01 c3                	add    %eax,%ebx
f0129c14:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0129c1b:	10 00 00 
f0129c1e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129c23:	0f b6 c0             	movzbl %al,%eax
f0129c26:	c1 e0 04             	shl    $0x4,%eax
f0129c29:	89 c2                	mov    %eax,%edx
f0129c2b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0129c31:	01 d0                	add    %edx,%eax
f0129c33:	48                   	dec    %eax
f0129c34:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0129c3a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129c40:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c45:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0129c4b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129c51:	29 d0                	sub    %edx,%eax
f0129c53:	01 d8                	add    %ebx,%eax
f0129c55:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129c5a:	39 c1                	cmp    %eax,%ecx
f0129c5c:	74 17                	je     f0129c75 <test_kfreelast+0x1333>
f0129c5e:	83 ec 04             	sub    $0x4,%esp
f0129c61:	68 20 a3 13 f0       	push   $0xf013a320
f0129c66:	68 9b 0d 00 00       	push   $0xd9b
f0129c6b:	68 3a a2 13 f0       	push   $0xf013a23a
f0129c70:	e8 31 65 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c75:	e8 12 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c7a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c7d:	74 17                	je     f0129c96 <test_kfreelast+0x1354>
f0129c7f:	83 ec 04             	sub    $0x4,%esp
f0129c82:	68 54 a2 13 f0       	push   $0xf013a254
f0129c87:	68 9c 0d 00 00       	push   $0xd9c
f0129c8c:	68 3a a2 13 f0       	push   $0xf013a23a
f0129c91:	e8 10 65 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c96:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c99:	e8 2c 21 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129c9e:	29 c3                	sub    %eax,%ebx
f0129ca0:	89 d8                	mov    %ebx,%eax
f0129ca2:	83 f8 08             	cmp    $0x8,%eax
f0129ca5:	74 17                	je     f0129cbe <test_kfreelast+0x137c>
f0129ca7:	83 ec 04             	sub    $0x4,%esp
f0129caa:	68 bc a2 13 f0       	push   $0xf013a2bc
f0129caf:	68 9d 0d 00 00       	push   $0xd9d
f0129cb4:	68 3a a2 13 f0       	push   $0xf013a23a
f0129cb9:	e8 e8 64 fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0129cbe:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f0129cc5:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0129cc8:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129cce:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0129cd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129cd8:	eb 0e                	jmp    f0129ce8 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f0129cda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129cdd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ce0:	01 d0                	add    %edx,%eax
f0129ce2:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0129ce5:	ff 45 f4             	incl   -0xc(%ebp)
f0129ce8:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0129cee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129cf1:	7f e7                	jg     f0129cda <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129cf3:	e8 d2 20 fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129cf8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cfb:	e8 8c 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129d00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0129d03:	83 ec 0c             	sub    $0xc,%esp
f0129d06:	68 00 00 10 00       	push   $0x100000
f0129d0b:	e8 cc d6 fd ff       	call   f01073dc <kmalloc>
f0129d10:	83 c4 10             	add    $0x10,%esp
f0129d13:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d19:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0129d1f:	89 c1                	mov    %eax,%ecx
f0129d21:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0129d28:	10 00 00 
f0129d2b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129d31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d36:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0129d3c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129d42:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d47:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0129d4d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129d53:	29 d0                	sub    %edx,%eax
f0129d55:	89 c3                	mov    %eax,%ebx
f0129d57:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0129d5e:	10 00 00 
f0129d61:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129d66:	0f b6 d0             	movzbl %al,%edx
f0129d69:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129d6f:	01 d0                	add    %edx,%eax
f0129d71:	48                   	dec    %eax
f0129d72:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0129d78:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129d7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d83:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0129d89:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129d8f:	29 d0                	sub    %edx,%eax
f0129d91:	01 c3                	add    %eax,%ebx
f0129d93:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0129d9a:	10 00 00 
f0129d9d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129da2:	0f b6 c0             	movzbl %al,%eax
f0129da5:	c1 e0 04             	shl    $0x4,%eax
f0129da8:	89 c2                	mov    %eax,%edx
f0129daa:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129db0:	01 d0                	add    %edx,%eax
f0129db2:	48                   	dec    %eax
f0129db3:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0129db9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0129dbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dc4:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0129dca:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0129dd0:	29 d0                	sub    %edx,%eax
f0129dd2:	01 d8                	add    %ebx,%eax
f0129dd4:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0129dd9:	39 c1                	cmp    %eax,%ecx
f0129ddb:	74 17                	je     f0129df4 <test_kfreelast+0x14b2>
f0129ddd:	83 ec 04             	sub    $0x4,%esp
f0129de0:	68 20 a3 13 f0       	push   $0xf013a320
f0129de5:	68 a9 0d 00 00       	push   $0xda9
f0129dea:	68 3a a2 13 f0       	push   $0xf013a23a
f0129def:	e8 b2 63 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129df4:	e8 93 9e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129df9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129dfc:	74 17                	je     f0129e15 <test_kfreelast+0x14d3>
f0129dfe:	83 ec 04             	sub    $0x4,%esp
f0129e01:	68 54 a2 13 f0       	push   $0xf013a254
f0129e06:	68 aa 0d 00 00       	push   $0xdaa
f0129e0b:	68 3a a2 13 f0       	push   $0xf013a23a
f0129e10:	e8 91 63 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e15:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e18:	e8 ad 1f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129e1d:	29 c3                	sub    %eax,%ebx
f0129e1f:	89 d8                	mov    %ebx,%eax
f0129e21:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129e26:	74 17                	je     f0129e3f <test_kfreelast+0x14fd>
f0129e28:	83 ec 04             	sub    $0x4,%esp
f0129e2b:	68 bc a2 13 f0       	push   $0xf013a2bc
f0129e30:	68 ab 0d 00 00       	push   $0xdab
f0129e35:	68 3a a2 13 f0       	push   $0xf013a23a
f0129e3a:	e8 67 63 fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0129e3f:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f0129e46:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0129e49:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0129e4f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0129e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e59:	eb 0e                	jmp    f0129e69 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f0129e5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e5e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e61:	01 d0                	add    %edx,%eax
f0129e63:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0129e66:	ff 45 f4             	incl   -0xc(%ebp)
f0129e69:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0129e6f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e72:	7f e7                	jg     f0129e5b <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0129e74:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0129e78:	83 ec 08             	sub    $0x8,%esp
f0129e7b:	ff 75 f0             	pushl  -0x10(%ebp)
f0129e7e:	68 6c b2 13 f0       	push   $0xf013b26c
f0129e83:	e8 a5 6d fd ff       	call   f0100c2d <cprintf>
f0129e88:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0129e8b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e92:	e8 33 1f fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129e97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e9a:	e8 ed 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129e9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0129ea2:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0129ea8:	83 ec 0c             	sub    $0xc,%esp
f0129eab:	50                   	push   %eax
f0129eac:	e8 45 d5 fd ff       	call   f01073f6 <kfree>
f0129eb1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129eb4:	e8 d3 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129eb9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ebc:	74 1d                	je     f0129edb <test_kfreelast+0x1599>
f0129ebe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ec2:	75 17                	jne    f0129edb <test_kfreelast+0x1599>
f0129ec4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ecb:	83 ec 0c             	sub    $0xc,%esp
f0129ece:	68 94 b2 13 f0       	push   $0xf013b294
f0129ed3:	e8 55 6d fd ff       	call   f0100c2d <cprintf>
f0129ed8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129edb:	e8 ea 1e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129ee0:	89 c2                	mov    %eax,%edx
f0129ee2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129ee5:	29 c2                	sub    %eax,%edx
f0129ee7:	89 d0                	mov    %edx,%eax
f0129ee9:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129eee:	74 1d                	je     f0129f0d <test_kfreelast+0x15cb>
f0129ef0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ef4:	75 17                	jne    f0129f0d <test_kfreelast+0x15cb>
f0129ef6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129efd:	83 ec 0c             	sub    $0xc,%esp
f0129f00:	68 00 b3 13 f0       	push   $0xf013b300
f0129f05:	e8 23 6d fd ff       	call   f0100c2d <cprintf>
f0129f0a:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f0d:	e8 b8 1e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129f12:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f15:	e8 72 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f1a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0129f1d:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129f23:	83 ec 0c             	sub    $0xc,%esp
f0129f26:	50                   	push   %eax
f0129f27:	e8 ca d4 fd ff       	call   f01073f6 <kfree>
f0129f2c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129f2f:	e8 58 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f34:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f37:	74 1d                	je     f0129f56 <test_kfreelast+0x1614>
f0129f39:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f3d:	75 17                	jne    f0129f56 <test_kfreelast+0x1614>
f0129f3f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f46:	83 ec 0c             	sub    $0xc,%esp
f0129f49:	68 94 b2 13 f0       	push   $0xf013b294
f0129f4e:	e8 da 6c fd ff       	call   f0100c2d <cprintf>
f0129f53:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129f56:	e8 6f 1e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129f5b:	89 c2                	mov    %eax,%edx
f0129f5d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129f60:	29 c2                	sub    %eax,%edx
f0129f62:	89 d0                	mov    %edx,%eax
f0129f64:	83 f8 08             	cmp    $0x8,%eax
f0129f67:	74 1d                	je     f0129f86 <test_kfreelast+0x1644>
f0129f69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f6d:	75 17                	jne    f0129f86 <test_kfreelast+0x1644>
f0129f6f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f76:	83 ec 0c             	sub    $0xc,%esp
f0129f79:	68 00 b3 13 f0       	push   $0xf013b300
f0129f7e:	e8 aa 6c fd ff       	call   f0100c2d <cprintf>
f0129f83:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f86:	e8 3f 1e fe ff       	call   f010bdca <sys_calculate_free_frames>
f0129f8b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f8e:	e8 f9 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0129f96:	83 ec 0c             	sub    $0xc,%esp
f0129f99:	68 00 28 00 00       	push   $0x2800
f0129f9e:	e8 39 d4 fd ff       	call   f01073dc <kmalloc>
f0129fa3:	83 c4 10             	add    $0x10,%esp
f0129fa6:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129fac:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f0129fb2:	89 c1                	mov    %eax,%ecx
f0129fb4:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0129fbb:	10 00 00 
f0129fbe:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0129fc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129fc9:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0129fcf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0129fd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fda:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0129fe0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0129fe6:	29 d0                	sub    %edx,%eax
f0129fe8:	89 c3                	mov    %eax,%ebx
f0129fea:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0129ff1:	10 00 00 
f0129ff4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129ff9:	0f b6 d0             	movzbl %al,%edx
f0129ffc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a002:	01 d0                	add    %edx,%eax
f012a004:	48                   	dec    %eax
f012a005:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a00b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a011:	ba 00 00 00 00       	mov    $0x0,%edx
f012a016:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a01c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a022:	29 d0                	sub    %edx,%eax
f012a024:	01 c3                	add    %eax,%ebx
f012a026:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a02d:	10 00 00 
f012a030:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a035:	0f b6 c0             	movzbl %al,%eax
f012a038:	c1 e0 04             	shl    $0x4,%eax
f012a03b:	89 c2                	mov    %eax,%edx
f012a03d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a043:	01 d0                	add    %edx,%eax
f012a045:	48                   	dec    %eax
f012a046:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a04c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a052:	ba 00 00 00 00       	mov    $0x0,%edx
f012a057:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a05d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a063:	29 d0                	sub    %edx,%eax
f012a065:	01 d8                	add    %ebx,%eax
f012a067:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a06c:	39 c1                	cmp    %eax,%ecx
f012a06e:	74 1d                	je     f012a08d <test_kfreelast+0x174b>
f012a070:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a074:	75 17                	jne    f012a08d <test_kfreelast+0x174b>
f012a076:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a07d:	83 ec 0c             	sub    $0xc,%esp
f012a080:	68 38 b3 13 f0       	push   $0xf013b338
f012a085:	e8 a3 6b fd ff       	call   f0100c2d <cprintf>
f012a08a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a08d:	e8 fa 9b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a092:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a095:	74 1d                	je     f012a0b4 <test_kfreelast+0x1772>
f012a097:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a09b:	75 17                	jne    f012a0b4 <test_kfreelast+0x1772>
f012a09d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a0a4:	83 ec 0c             	sub    $0xc,%esp
f012a0a7:	68 94 b2 13 f0       	push   $0xf013b294
f012a0ac:	e8 7c 6b fd ff       	call   f0100c2d <cprintf>
f012a0b1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a0b4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a0b7:	e8 0e 1d fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a0bc:	29 c3                	sub    %eax,%ebx
f012a0be:	89 d8                	mov    %ebx,%eax
f012a0c0:	83 f8 03             	cmp    $0x3,%eax
f012a0c3:	74 1d                	je     f012a0e2 <test_kfreelast+0x17a0>
f012a0c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a0c9:	75 17                	jne    f012a0e2 <test_kfreelast+0x17a0>
f012a0cb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a0d2:	83 ec 0c             	sub    $0xc,%esp
f012a0d5:	68 a0 b3 13 f0       	push   $0xf013b3a0
f012a0da:	e8 4e 6b fd ff       	call   f0100c2d <cprintf>
f012a0df:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012a0e2:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012a0e9:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012a0ec:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a0f2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a0f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0fc:	eb 0e                	jmp    f012a10c <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012a0fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a101:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a104:	01 d0                	add    %edx,%eax
f012a106:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a109:	ff 45 f4             	incl   -0xc(%ebp)
f012a10c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a112:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a115:	7f e7                	jg     f012a0fe <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a117:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a11b:	75 17                	jne    f012a134 <test_kfreelast+0x17f2>
f012a11d:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a121:	83 ec 08             	sub    $0x8,%esp
f012a124:	ff 75 f0             	pushl  -0x10(%ebp)
f012a127:	68 6c b2 13 f0       	push   $0xf013b26c
f012a12c:	e8 fc 6a fd ff       	call   f0100c2d <cprintf>
f012a131:	83 c4 10             	add    $0x10,%esp
f012a134:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012a13b:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a141:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a144:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a14b:	eb 1e                	jmp    f012a16b <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012a14d:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012a153:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a156:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a159:	01 c8                	add    %ecx,%eax
f012a15b:	8a 00                	mov    (%eax),%al
f012a15d:	0f be c0             	movsbl %al,%eax
f012a160:	01 d0                	add    %edx,%eax
f012a162:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a168:	ff 45 f4             	incl   -0xc(%ebp)
f012a16b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a171:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a174:	7f d7                	jg     f012a14d <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a176:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012a17c:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012a182:	89 d0                	mov    %edx,%eax
f012a184:	01 c0                	add    %eax,%eax
f012a186:	01 d0                	add    %edx,%eax
f012a188:	c1 e0 02             	shl    $0x2,%eax
f012a18b:	39 c1                	cmp    %eax,%ecx
f012a18d:	74 1d                	je     f012a1ac <test_kfreelast+0x186a>
f012a18f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a193:	75 17                	jne    f012a1ac <test_kfreelast+0x186a>
f012a195:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a19c:	83 ec 0c             	sub    $0xc,%esp
f012a19f:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012a1a4:	e8 84 6a fd ff       	call   f0100c2d <cprintf>
f012a1a9:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a1ac:	83 ec 0c             	sub    $0xc,%esp
f012a1af:	6a 03                	push   $0x3
f012a1b1:	e8 bd 20 fe ff       	call   f010c273 <sys_bypassPageFault>
f012a1b6:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012a1b9:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a1bf:	05 00 30 00 00       	add    $0x3000,%eax
f012a1c4:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012a1c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a1ce:	eb 3c                	jmp    f012a20c <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012a1d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a1d3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a1d6:	01 d0                	add    %edx,%eax
f012a1d8:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a1db:	e8 81 20 fe ff       	call   f010c261 <sys_rcr2>
f012a1e0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a1e3:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a1e6:	01 ca                	add    %ecx,%edx
f012a1e8:	39 d0                	cmp    %edx,%eax
f012a1ea:	74 1d                	je     f012a209 <test_kfreelast+0x18c7>
f012a1ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a1f0:	75 17                	jne    f012a209 <test_kfreelast+0x18c7>
f012a1f2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a1f9:	83 ec 0c             	sub    $0xc,%esp
f012a1fc:	68 18 b4 13 f0       	push   $0xf013b418
f012a201:	e8 27 6a fd ff       	call   f0100c2d <cprintf>
f012a206:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012a209:	ff 45 f4             	incl   -0xc(%ebp)
f012a20c:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012a213:	7e bb                	jle    f012a1d0 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a215:	83 ec 0c             	sub    $0xc,%esp
f012a218:	6a 00                	push   $0x0
f012a21a:	e8 54 20 fe ff       	call   f010c273 <sys_bypassPageFault>
f012a21f:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a222:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a226:	75 17                	jne    f012a23f <test_kfreelast+0x18fd>
f012a228:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a22c:	83 ec 08             	sub    $0x8,%esp
f012a22f:	ff 75 f0             	pushl  -0x10(%ebp)
f012a232:	68 6c b2 13 f0       	push   $0xf013b26c
f012a237:	e8 f1 69 fd ff       	call   f0100c2d <cprintf>
f012a23c:	83 c4 10             	add    $0x10,%esp
f012a23f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a246:	e8 7f 1b fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a24b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a24e:	e8 39 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a253:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012a256:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a25c:	83 ec 0c             	sub    $0xc,%esp
f012a25f:	50                   	push   %eax
f012a260:	e8 91 d1 fd ff       	call   f01073f6 <kfree>
f012a265:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a268:	e8 1f 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a26d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a270:	74 1d                	je     f012a28f <test_kfreelast+0x194d>
f012a272:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a276:	75 17                	jne    f012a28f <test_kfreelast+0x194d>
f012a278:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a27f:	83 ec 0c             	sub    $0xc,%esp
f012a282:	68 94 b2 13 f0       	push   $0xf013b294
f012a287:	e8 a1 69 fd ff       	call   f0100c2d <cprintf>
f012a28c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a28f:	e8 36 1b fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a294:	89 c2                	mov    %eax,%edx
f012a296:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a299:	29 c2                	sub    %eax,%edx
f012a29b:	89 d0                	mov    %edx,%eax
f012a29d:	83 f8 03             	cmp    $0x3,%eax
f012a2a0:	74 1d                	je     f012a2bf <test_kfreelast+0x197d>
f012a2a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2a6:	75 17                	jne    f012a2bf <test_kfreelast+0x197d>
f012a2a8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2af:	83 ec 0c             	sub    $0xc,%esp
f012a2b2:	68 00 b3 13 f0       	push   $0xf013b300
f012a2b7:	e8 71 69 fd ff       	call   f0100c2d <cprintf>
f012a2bc:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a2bf:	e8 06 1b fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a2c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2c7:	e8 c0 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012a2cf:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a2d5:	83 ec 0c             	sub    $0xc,%esp
f012a2d8:	50                   	push   %eax
f012a2d9:	e8 18 d1 fd ff       	call   f01073f6 <kfree>
f012a2de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a2e1:	e8 a6 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2e6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2e9:	74 1d                	je     f012a308 <test_kfreelast+0x19c6>
f012a2eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2ef:	75 17                	jne    f012a308 <test_kfreelast+0x19c6>
f012a2f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2f8:	83 ec 0c             	sub    $0xc,%esp
f012a2fb:	68 94 b2 13 f0       	push   $0xf013b294
f012a300:	e8 28 69 fd ff       	call   f0100c2d <cprintf>
f012a305:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a308:	e8 bd 1a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a30d:	89 c2                	mov    %eax,%edx
f012a30f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a312:	29 c2                	sub    %eax,%edx
f012a314:	89 d0                	mov    %edx,%eax
f012a316:	83 f8 04             	cmp    $0x4,%eax
f012a319:	74 1d                	je     f012a338 <test_kfreelast+0x19f6>
f012a31b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a31f:	75 17                	jne    f012a338 <test_kfreelast+0x19f6>
f012a321:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a328:	83 ec 0c             	sub    $0xc,%esp
f012a32b:	68 00 b3 13 f0       	push   $0xf013b300
f012a330:	e8 f8 68 fd ff       	call   f0100c2d <cprintf>
f012a335:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a338:	e8 8d 1a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a33d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a340:	e8 47 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a345:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012a348:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a34e:	83 ec 0c             	sub    $0xc,%esp
f012a351:	50                   	push   %eax
f012a352:	e8 9f d0 fd ff       	call   f01073f6 <kfree>
f012a357:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a35a:	e8 2d 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a35f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a362:	74 1d                	je     f012a381 <test_kfreelast+0x1a3f>
f012a364:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a368:	75 17                	jne    f012a381 <test_kfreelast+0x1a3f>
f012a36a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a371:	83 ec 0c             	sub    $0xc,%esp
f012a374:	68 94 b2 13 f0       	push   $0xf013b294
f012a379:	e8 af 68 fd ff       	call   f0100c2d <cprintf>
f012a37e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a381:	e8 44 1a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a386:	89 c2                	mov    %eax,%edx
f012a388:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a38b:	29 c2                	sub    %eax,%edx
f012a38d:	89 d0                	mov    %edx,%eax
f012a38f:	83 f8 05             	cmp    $0x5,%eax
f012a392:	74 1d                	je     f012a3b1 <test_kfreelast+0x1a6f>
f012a394:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a398:	75 17                	jne    f012a3b1 <test_kfreelast+0x1a6f>
f012a39a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a3a1:	83 ec 0c             	sub    $0xc,%esp
f012a3a4:	68 00 b3 13 f0       	push   $0xf013b300
f012a3a9:	e8 7f 68 fd ff       	call   f0100c2d <cprintf>
f012a3ae:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012a3b1:	e8 14 1a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a3b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a3b9:	e8 ce 98 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a3be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012a3c1:	83 ec 0c             	sub    $0xc,%esp
f012a3c4:	68 00 c8 00 00       	push   $0xc800
f012a3c9:	e8 0e d0 fd ff       	call   f01073dc <kmalloc>
f012a3ce:	83 c4 10             	add    $0x10,%esp
f012a3d1:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a3d7:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a3dd:	89 c1                	mov    %eax,%ecx
f012a3df:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012a3e6:	10 00 00 
f012a3e9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012a3ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3f4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012a3fa:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a400:	ba 00 00 00 00       	mov    $0x0,%edx
f012a405:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012a40b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a411:	29 d0                	sub    %edx,%eax
f012a413:	89 c3                	mov    %eax,%ebx
f012a415:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012a41c:	10 00 00 
f012a41f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a424:	0f b6 d0             	movzbl %al,%edx
f012a427:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012a42d:	01 d0                	add    %edx,%eax
f012a42f:	48                   	dec    %eax
f012a430:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012a436:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a43c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a441:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012a447:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a44d:	29 d0                	sub    %edx,%eax
f012a44f:	01 c3                	add    %eax,%ebx
f012a451:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012a458:	10 00 00 
f012a45b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a460:	0f b6 c0             	movzbl %al,%eax
f012a463:	c1 e0 04             	shl    $0x4,%eax
f012a466:	89 c2                	mov    %eax,%edx
f012a468:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012a46e:	01 d0                	add    %edx,%eax
f012a470:	48                   	dec    %eax
f012a471:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012a477:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a47d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a482:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012a488:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a48e:	29 d0                	sub    %edx,%eax
f012a490:	01 d8                	add    %ebx,%eax
f012a492:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a497:	39 c1                	cmp    %eax,%ecx
f012a499:	74 1d                	je     f012a4b8 <test_kfreelast+0x1b76>
f012a49b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a49f:	75 17                	jne    f012a4b8 <test_kfreelast+0x1b76>
f012a4a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a4a8:	83 ec 0c             	sub    $0xc,%esp
f012a4ab:	68 38 b3 13 f0       	push   $0xf013b338
f012a4b0:	e8 78 67 fd ff       	call   f0100c2d <cprintf>
f012a4b5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a4b8:	e8 cf 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a4bd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a4c0:	74 1d                	je     f012a4df <test_kfreelast+0x1b9d>
f012a4c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a4c6:	75 17                	jne    f012a4df <test_kfreelast+0x1b9d>
f012a4c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a4cf:	83 ec 0c             	sub    $0xc,%esp
f012a4d2:	68 94 b2 13 f0       	push   $0xf013b294
f012a4d7:	e8 51 67 fd ff       	call   f0100c2d <cprintf>
f012a4dc:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a4df:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a4e2:	e8 e3 18 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a4e7:	29 c3                	sub    %eax,%ebx
f012a4e9:	89 d8                	mov    %ebx,%eax
f012a4eb:	83 f8 0d             	cmp    $0xd,%eax
f012a4ee:	74 1d                	je     f012a50d <test_kfreelast+0x1bcb>
f012a4f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a4f4:	75 17                	jne    f012a50d <test_kfreelast+0x1bcb>
f012a4f6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a4fd:	83 ec 0c             	sub    $0xc,%esp
f012a500:	68 a0 b3 13 f0       	push   $0xf013b3a0
f012a505:	e8 23 67 fd ff       	call   f0100c2d <cprintf>
f012a50a:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012a50d:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012a514:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012a517:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a51d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012a520:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a527:	eb 0e                	jmp    f012a537 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012a529:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a52c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a52f:	01 d0                	add    %edx,%eax
f012a531:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012a534:	ff 45 f4             	incl   -0xc(%ebp)
f012a537:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012a53d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a540:	7f e7                	jg     f012a529 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a542:	e8 83 18 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a547:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a54a:	e8 3d 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a54f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012a552:	83 ec 0c             	sub    $0xc,%esp
f012a555:	68 00 fc 2f 00       	push   $0x2ffc00
f012a55a:	e8 7d ce fd ff       	call   f01073dc <kmalloc>
f012a55f:	83 c4 10             	add    $0x10,%esp
f012a562:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a568:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a56e:	89 c1                	mov    %eax,%ecx
f012a570:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012a577:	10 00 00 
f012a57a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a580:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a585:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012a58b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a591:	ba 00 00 00 00       	mov    $0x0,%edx
f012a596:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012a59c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a5a2:	29 d0                	sub    %edx,%eax
f012a5a4:	89 c3                	mov    %eax,%ebx
f012a5a6:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012a5ad:	10 00 00 
f012a5b0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a5b5:	0f b6 d0             	movzbl %al,%edx
f012a5b8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a5be:	01 d0                	add    %edx,%eax
f012a5c0:	48                   	dec    %eax
f012a5c1:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012a5c7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a5cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5d2:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012a5d8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a5de:	29 d0                	sub    %edx,%eax
f012a5e0:	01 c3                	add    %eax,%ebx
f012a5e2:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012a5e9:	10 00 00 
f012a5ec:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a5f1:	0f b6 c0             	movzbl %al,%eax
f012a5f4:	c1 e0 04             	shl    $0x4,%eax
f012a5f7:	89 c2                	mov    %eax,%edx
f012a5f9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a5ff:	01 d0                	add    %edx,%eax
f012a601:	48                   	dec    %eax
f012a602:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012a608:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a60e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a613:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012a619:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a61f:	29 d0                	sub    %edx,%eax
f012a621:	01 d8                	add    %ebx,%eax
f012a623:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012a628:	39 c1                	cmp    %eax,%ecx
f012a62a:	74 1d                	je     f012a649 <test_kfreelast+0x1d07>
f012a62c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a630:	75 17                	jne    f012a649 <test_kfreelast+0x1d07>
f012a632:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a639:	83 ec 0c             	sub    $0xc,%esp
f012a63c:	68 38 b3 13 f0       	push   $0xf013b338
f012a641:	e8 e7 65 fd ff       	call   f0100c2d <cprintf>
f012a646:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a649:	e8 3e 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a64e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a651:	74 1d                	je     f012a670 <test_kfreelast+0x1d2e>
f012a653:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a657:	75 17                	jne    f012a670 <test_kfreelast+0x1d2e>
f012a659:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a660:	83 ec 0c             	sub    $0xc,%esp
f012a663:	68 94 b2 13 f0       	push   $0xf013b294
f012a668:	e8 c0 65 fd ff       	call   f0100c2d <cprintf>
f012a66d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a670:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a673:	e8 52 17 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a678:	29 c3                	sub    %eax,%ebx
f012a67a:	89 d8                	mov    %ebx,%eax
f012a67c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a681:	74 1d                	je     f012a6a0 <test_kfreelast+0x1d5e>
f012a683:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a687:	75 17                	jne    f012a6a0 <test_kfreelast+0x1d5e>
f012a689:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a690:	83 ec 0c             	sub    $0xc,%esp
f012a693:	68 a0 b3 13 f0       	push   $0xf013b3a0
f012a698:	e8 90 65 fd ff       	call   f0100c2d <cprintf>
f012a69d:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012a6a0:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012a6a7:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012a6aa:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a6b0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012a6b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a6ba:	eb 0e                	jmp    f012a6ca <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012a6bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a6bf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a6c2:	01 d0                	add    %edx,%eax
f012a6c4:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012a6c7:	ff 45 f4             	incl   -0xc(%ebp)
f012a6ca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012a6d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a6d3:	7f e7                	jg     f012a6bc <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a6d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6d9:	75 17                	jne    f012a6f2 <test_kfreelast+0x1db0>
f012a6db:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012a6df:	83 ec 08             	sub    $0x8,%esp
f012a6e2:	ff 75 f0             	pushl  -0x10(%ebp)
f012a6e5:	68 6c b2 13 f0       	push   $0xf013b26c
f012a6ea:	e8 3e 65 fd ff       	call   f0100c2d <cprintf>
f012a6ef:	83 c4 10             	add    $0x10,%esp
f012a6f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012a6f9:	e8 cc 16 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a6fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a701:	e8 86 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a706:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012a709:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a70f:	83 ec 0c             	sub    $0xc,%esp
f012a712:	50                   	push   %eax
f012a713:	e8 de cc fd ff       	call   f01073f6 <kfree>
f012a718:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a71b:	e8 6c 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a720:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a723:	74 1d                	je     f012a742 <test_kfreelast+0x1e00>
f012a725:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a729:	75 17                	jne    f012a742 <test_kfreelast+0x1e00>
f012a72b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a732:	83 ec 0c             	sub    $0xc,%esp
f012a735:	68 94 b2 13 f0       	push   $0xf013b294
f012a73a:	e8 ee 64 fd ff       	call   f0100c2d <cprintf>
f012a73f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a742:	e8 83 16 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a747:	89 c2                	mov    %eax,%edx
f012a749:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a74c:	29 c2                	sub    %eax,%edx
f012a74e:	89 d0                	mov    %edx,%eax
f012a750:	83 f8 0d             	cmp    $0xd,%eax
f012a753:	74 1d                	je     f012a772 <test_kfreelast+0x1e30>
f012a755:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a759:	75 17                	jne    f012a772 <test_kfreelast+0x1e30>
f012a75b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a762:	83 ec 0c             	sub    $0xc,%esp
f012a765:	68 00 b3 13 f0       	push   $0xf013b300
f012a76a:	e8 be 64 fd ff       	call   f0100c2d <cprintf>
f012a76f:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a772:	83 ec 0c             	sub    $0xc,%esp
f012a775:	6a 03                	push   $0x3
f012a777:	e8 f7 1a fe ff       	call   f010c273 <sys_bypassPageFault>
f012a77c:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012a77f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a785:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012a788:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a78f:	eb 3c                	jmp    f012a7cd <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012a791:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a794:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a797:	01 d0                	add    %edx,%eax
f012a799:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a79c:	e8 c0 1a fe ff       	call   f010c261 <sys_rcr2>
f012a7a1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a7a4:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a7a7:	01 ca                	add    %ecx,%edx
f012a7a9:	39 d0                	cmp    %edx,%eax
f012a7ab:	74 1d                	je     f012a7ca <test_kfreelast+0x1e88>
f012a7ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a7b1:	75 17                	jne    f012a7ca <test_kfreelast+0x1e88>
f012a7b3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a7ba:	83 ec 0c             	sub    $0xc,%esp
f012a7bd:	68 18 b4 13 f0       	push   $0xf013b418
f012a7c2:	e8 66 64 fd ff       	call   f0100c2d <cprintf>
f012a7c7:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012a7ca:	ff 45 f4             	incl   -0xc(%ebp)
f012a7cd:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012a7d4:	7e bb                	jle    f012a791 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a7d6:	83 ec 0c             	sub    $0xc,%esp
f012a7d9:	6a 00                	push   $0x0
f012a7db:	e8 93 1a fe ff       	call   f010c273 <sys_bypassPageFault>
f012a7e0:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012a7e3:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a7e9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012a7ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7f3:	eb 1e                	jmp    f012a813 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012a7f5:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012a7fb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a7fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a801:	01 c8                	add    %ecx,%eax
f012a803:	8a 00                	mov    (%eax),%al
f012a805:	0f be c0             	movsbl %al,%eax
f012a808:	01 d0                	add    %edx,%eax
f012a80a:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012a810:	ff 45 f4             	incl   -0xc(%ebp)
f012a813:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012a819:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a81c:	7f d7                	jg     f012a7f5 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a81e:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012a824:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012a82a:	89 d0                	mov    %edx,%eax
f012a82c:	01 c0                	add    %eax,%eax
f012a82e:	01 d0                	add    %edx,%eax
f012a830:	01 c0                	add    %eax,%eax
f012a832:	01 d0                	add    %edx,%eax
f012a834:	01 c0                	add    %eax,%eax
f012a836:	39 c1                	cmp    %eax,%ecx
f012a838:	74 1d                	je     f012a857 <test_kfreelast+0x1f15>
f012a83a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a83e:	75 17                	jne    f012a857 <test_kfreelast+0x1f15>
f012a840:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a847:	83 ec 0c             	sub    $0xc,%esp
f012a84a:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012a84f:	e8 d9 63 fd ff       	call   f0100c2d <cprintf>
f012a854:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a857:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a85b:	75 17                	jne    f012a874 <test_kfreelast+0x1f32>
f012a85d:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a861:	83 ec 08             	sub    $0x8,%esp
f012a864:	ff 75 f0             	pushl  -0x10(%ebp)
f012a867:	68 6c b2 13 f0       	push   $0xf013b26c
f012a86c:	e8 bc 63 fd ff       	call   f0100c2d <cprintf>
f012a871:	83 c4 10             	add    $0x10,%esp
f012a874:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a87b:	e8 4a 15 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a880:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a883:	e8 04 94 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a888:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012a88b:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a891:	83 ec 0c             	sub    $0xc,%esp
f012a894:	50                   	push   %eax
f012a895:	e8 5c cb fd ff       	call   f01073f6 <kfree>
f012a89a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a89d:	e8 ea 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a8a2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8a5:	74 1d                	je     f012a8c4 <test_kfreelast+0x1f82>
f012a8a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8ab:	75 17                	jne    f012a8c4 <test_kfreelast+0x1f82>
f012a8ad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8b4:	83 ec 0c             	sub    $0xc,%esp
f012a8b7:	68 94 b2 13 f0       	push   $0xf013b294
f012a8bc:	e8 6c 63 fd ff       	call   f0100c2d <cprintf>
f012a8c1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a8c4:	e8 01 15 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a8c9:	89 c2                	mov    %eax,%edx
f012a8cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a8ce:	29 c2                	sub    %eax,%edx
f012a8d0:	89 d0                	mov    %edx,%eax
f012a8d2:	83 f8 02             	cmp    $0x2,%eax
f012a8d5:	74 1d                	je     f012a8f4 <test_kfreelast+0x1fb2>
f012a8d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8db:	75 17                	jne    f012a8f4 <test_kfreelast+0x1fb2>
f012a8dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8e4:	83 ec 0c             	sub    $0xc,%esp
f012a8e7:	68 00 b3 13 f0       	push   $0xf013b300
f012a8ec:	e8 3c 63 fd ff       	call   f0100c2d <cprintf>
f012a8f1:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8f4:	e8 d1 14 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a8f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8fc:	e8 8b 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a901:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012a904:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a90a:	83 ec 0c             	sub    $0xc,%esp
f012a90d:	50                   	push   %eax
f012a90e:	e8 e3 ca fd ff       	call   f01073f6 <kfree>
f012a913:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a916:	e8 71 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a91b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a91e:	74 1d                	je     f012a93d <test_kfreelast+0x1ffb>
f012a920:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a924:	75 17                	jne    f012a93d <test_kfreelast+0x1ffb>
f012a926:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a92d:	83 ec 0c             	sub    $0xc,%esp
f012a930:	68 94 b2 13 f0       	push   $0xf013b294
f012a935:	e8 f3 62 fd ff       	call   f0100c2d <cprintf>
f012a93a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a93d:	e8 88 14 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a942:	89 c2                	mov    %eax,%edx
f012a944:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a947:	29 c2                	sub    %eax,%edx
f012a949:	89 d0                	mov    %edx,%eax
f012a94b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a950:	74 1d                	je     f012a96f <test_kfreelast+0x202d>
f012a952:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a956:	75 17                	jne    f012a96f <test_kfreelast+0x202d>
f012a958:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a95f:	83 ec 0c             	sub    $0xc,%esp
f012a962:	68 00 b3 13 f0       	push   $0xf013b300
f012a967:	e8 c1 62 fd ff       	call   f0100c2d <cprintf>
f012a96c:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a96f:	e8 56 14 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a974:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a977:	e8 10 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a97c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012a97f:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a985:	83 ec 0c             	sub    $0xc,%esp
f012a988:	50                   	push   %eax
f012a989:	e8 68 ca fd ff       	call   f01073f6 <kfree>
f012a98e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a991:	e8 f6 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a996:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a999:	74 1d                	je     f012a9b8 <test_kfreelast+0x2076>
f012a99b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a99f:	75 17                	jne    f012a9b8 <test_kfreelast+0x2076>
f012a9a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9a8:	83 ec 0c             	sub    $0xc,%esp
f012a9ab:	68 94 b2 13 f0       	push   $0xf013b294
f012a9b0:	e8 78 62 fd ff       	call   f0100c2d <cprintf>
f012a9b5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a9b8:	e8 0d 14 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a9bd:	89 c2                	mov    %eax,%edx
f012a9bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a9c2:	29 c2                	sub    %eax,%edx
f012a9c4:	89 d0                	mov    %edx,%eax
f012a9c6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a9cb:	74 1d                	je     f012a9ea <test_kfreelast+0x20a8>
f012a9cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9d1:	75 17                	jne    f012a9ea <test_kfreelast+0x20a8>
f012a9d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9da:	83 ec 0c             	sub    $0xc,%esp
f012a9dd:	68 00 b3 13 f0       	push   $0xf013b300
f012a9e2:	e8 46 62 fd ff       	call   f0100c2d <cprintf>
f012a9e7:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a9ea:	e8 db 13 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012a9ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a9f2:	e8 95 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a9f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012a9fa:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012aa00:	83 ec 0c             	sub    $0xc,%esp
f012aa03:	50                   	push   %eax
f012aa04:	e8 ed c9 fd ff       	call   f01073f6 <kfree>
f012aa09:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aa0c:	e8 7b 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa11:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa14:	74 1d                	je     f012aa33 <test_kfreelast+0x20f1>
f012aa16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa1a:	75 17                	jne    f012aa33 <test_kfreelast+0x20f1>
f012aa1c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa23:	83 ec 0c             	sub    $0xc,%esp
f012aa26:	68 94 b2 13 f0       	push   $0xf013b294
f012aa2b:	e8 fd 61 fd ff       	call   f0100c2d <cprintf>
f012aa30:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aa33:	e8 92 13 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012aa38:	89 c2                	mov    %eax,%edx
f012aa3a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa3d:	29 c2                	sub    %eax,%edx
f012aa3f:	89 d0                	mov    %edx,%eax
f012aa41:	83 f8 01             	cmp    $0x1,%eax
f012aa44:	74 1d                	je     f012aa63 <test_kfreelast+0x2121>
f012aa46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa4a:	75 17                	jne    f012aa63 <test_kfreelast+0x2121>
f012aa4c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa53:	83 ec 0c             	sub    $0xc,%esp
f012aa56:	68 00 b3 13 f0       	push   $0xf013b300
f012aa5b:	e8 cd 61 fd ff       	call   f0100c2d <cprintf>
f012aa60:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa63:	e8 62 13 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012aa68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa6b:	e8 1c 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012aa73:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012aa79:	83 ec 0c             	sub    $0xc,%esp
f012aa7c:	50                   	push   %eax
f012aa7d:	e8 74 c9 fd ff       	call   f01073f6 <kfree>
f012aa82:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aa85:	e8 02 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa8a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa8d:	74 1d                	je     f012aaac <test_kfreelast+0x216a>
f012aa8f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa93:	75 17                	jne    f012aaac <test_kfreelast+0x216a>
f012aa95:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa9c:	83 ec 0c             	sub    $0xc,%esp
f012aa9f:	68 94 b2 13 f0       	push   $0xf013b294
f012aaa4:	e8 84 61 fd ff       	call   f0100c2d <cprintf>
f012aaa9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aaac:	e8 19 13 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012aab1:	89 c2                	mov    %eax,%edx
f012aab3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aab6:	29 c2                	sub    %eax,%edx
f012aab8:	89 d0                	mov    %edx,%eax
f012aaba:	83 f8 01             	cmp    $0x1,%eax
f012aabd:	74 1d                	je     f012aadc <test_kfreelast+0x219a>
f012aabf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aac3:	75 17                	jne    f012aadc <test_kfreelast+0x219a>
f012aac5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aacc:	83 ec 0c             	sub    $0xc,%esp
f012aacf:	68 00 b3 13 f0       	push   $0xf013b300
f012aad4:	e8 54 61 fd ff       	call   f0100c2d <cprintf>
f012aad9:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012aadc:	e8 e9 12 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012aae1:	89 c2                	mov    %eax,%edx
f012aae3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012aae6:	39 c2                	cmp    %eax,%edx
f012aae8:	74 1d                	je     f012ab07 <test_kfreelast+0x21c5>
f012aaea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aaee:	75 17                	jne    f012ab07 <test_kfreelast+0x21c5>
f012aaf0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aaf7:	83 ec 0c             	sub    $0xc,%esp
f012aafa:	68 60 b4 13 f0       	push   $0xf013b460
f012aaff:	e8 29 61 fd ff       	call   f0100c2d <cprintf>
f012ab04:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ab07:	83 ec 0c             	sub    $0xc,%esp
f012ab0a:	6a 03                	push   $0x3
f012ab0c:	e8 62 17 fe ff       	call   f010c273 <sys_bypassPageFault>
f012ab11:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012ab14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab1b:	e9 8e 00 00 00       	jmp    f012abae <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012ab20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ab23:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012ab2a:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012ab2d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab30:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab33:	e8 29 17 fe ff       	call   f010c261 <sys_rcr2>
f012ab38:	89 c2                	mov    %eax,%edx
f012ab3a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab3d:	39 c2                	cmp    %eax,%edx
f012ab3f:	74 1d                	je     f012ab5e <test_kfreelast+0x221c>
f012ab41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab45:	75 17                	jne    f012ab5e <test_kfreelast+0x221c>
f012ab47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab4e:	83 ec 0c             	sub    $0xc,%esp
f012ab51:	68 18 b4 13 f0       	push   $0xf013b418
f012ab56:	e8 d2 60 fd ff       	call   f0100c2d <cprintf>
f012ab5b:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012ab5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ab61:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012ab68:	89 c2                	mov    %eax,%edx
f012ab6a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab6d:	01 d0                	add    %edx,%eax
f012ab6f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab72:	e8 ea 16 fe ff       	call   f010c261 <sys_rcr2>
f012ab77:	89 c2                	mov    %eax,%edx
f012ab79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ab7c:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012ab83:	89 c1                	mov    %eax,%ecx
f012ab85:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab88:	01 c8                	add    %ecx,%eax
f012ab8a:	39 c2                	cmp    %eax,%edx
f012ab8c:	74 1d                	je     f012abab <test_kfreelast+0x2269>
f012ab8e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab92:	75 17                	jne    f012abab <test_kfreelast+0x2269>
f012ab94:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab9b:	83 ec 0c             	sub    $0xc,%esp
f012ab9e:	68 18 b4 13 f0       	push   $0xf013b418
f012aba3:	e8 85 60 fd ff       	call   f0100c2d <cprintf>
f012aba8:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012abab:	ff 45 f4             	incl   -0xc(%ebp)
f012abae:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012abb2:	0f 8e 68 ff ff ff    	jle    f012ab20 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012abb8:	83 ec 0c             	sub    $0xc,%esp
f012abbb:	6a 00                	push   $0x0
f012abbd:	e8 b1 16 fe ff       	call   f010c273 <sys_bypassPageFault>
f012abc2:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012abc5:	e8 00 12 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012abca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012abcd:	e8 ba 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012abd2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012abd5:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012abdb:	83 ec 0c             	sub    $0xc,%esp
f012abde:	50                   	push   %eax
f012abdf:	e8 12 c8 fd ff       	call   f01073f6 <kfree>
f012abe4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012abe7:	e8 a0 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012abec:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abef:	74 1d                	je     f012ac0e <test_kfreelast+0x22cc>
f012abf1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abf5:	75 17                	jne    f012ac0e <test_kfreelast+0x22cc>
f012abf7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abfe:	83 ec 0c             	sub    $0xc,%esp
f012ac01:	68 94 b2 13 f0       	push   $0xf013b294
f012ac06:	e8 22 60 fd ff       	call   f0100c2d <cprintf>
f012ac0b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012ac0e:	e8 b7 11 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012ac13:	89 c2                	mov    %eax,%edx
f012ac15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac18:	39 c2                	cmp    %eax,%edx
f012ac1a:	74 1d                	je     f012ac39 <test_kfreelast+0x22f7>
f012ac1c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac20:	75 17                	jne    f012ac39 <test_kfreelast+0x22f7>
f012ac22:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac29:	83 ec 0c             	sub    $0xc,%esp
f012ac2c:	68 98 b4 13 f0       	push   $0xf013b498
f012ac31:	e8 f7 5f fd ff       	call   f0100c2d <cprintf>
f012ac36:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac39:	e8 8c 11 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012ac3e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac41:	e8 46 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac46:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012ac49:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ac4f:	83 ec 0c             	sub    $0xc,%esp
f012ac52:	50                   	push   %eax
f012ac53:	e8 9e c7 fd ff       	call   f01073f6 <kfree>
f012ac58:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac5b:	e8 2c 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac60:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac63:	74 1d                	je     f012ac82 <test_kfreelast+0x2340>
f012ac65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac69:	75 17                	jne    f012ac82 <test_kfreelast+0x2340>
f012ac6b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac72:	83 ec 0c             	sub    $0xc,%esp
f012ac75:	68 94 b2 13 f0       	push   $0xf013b294
f012ac7a:	e8 ae 5f fd ff       	call   f0100c2d <cprintf>
f012ac7f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012ac82:	e8 43 11 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012ac87:	89 c2                	mov    %eax,%edx
f012ac89:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac8c:	39 c2                	cmp    %eax,%edx
f012ac8e:	74 1d                	je     f012acad <test_kfreelast+0x236b>
f012ac90:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac94:	75 17                	jne    f012acad <test_kfreelast+0x236b>
f012ac96:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac9d:	83 ec 0c             	sub    $0xc,%esp
f012aca0:	68 98 b4 13 f0       	push   $0xf013b498
f012aca5:	e8 83 5f fd ff       	call   f0100c2d <cprintf>
f012acaa:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012acad:	e8 18 11 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012acb2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acb5:	e8 d2 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012acba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012acbd:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012acc3:	83 ec 0c             	sub    $0xc,%esp
f012acc6:	50                   	push   %eax
f012acc7:	e8 2a c7 fd ff       	call   f01073f6 <kfree>
f012accc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012accf:	e8 b8 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012acd4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012acd7:	74 1d                	je     f012acf6 <test_kfreelast+0x23b4>
f012acd9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acdd:	75 17                	jne    f012acf6 <test_kfreelast+0x23b4>
f012acdf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ace6:	83 ec 0c             	sub    $0xc,%esp
f012ace9:	68 94 b2 13 f0       	push   $0xf013b294
f012acee:	e8 3a 5f fd ff       	call   f0100c2d <cprintf>
f012acf3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012acf6:	e8 cf 10 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012acfb:	89 c2                	mov    %eax,%edx
f012acfd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad00:	39 c2                	cmp    %eax,%edx
f012ad02:	74 1d                	je     f012ad21 <test_kfreelast+0x23df>
f012ad04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad08:	75 17                	jne    f012ad21 <test_kfreelast+0x23df>
f012ad0a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad11:	83 ec 0c             	sub    $0xc,%esp
f012ad14:	68 98 b4 13 f0       	push   $0xf013b498
f012ad19:	e8 0f 5f fd ff       	call   f0100c2d <cprintf>
f012ad1e:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ad21:	e8 a4 10 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012ad26:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad29:	e8 5e 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012ad31:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ad37:	83 ec 0c             	sub    $0xc,%esp
f012ad3a:	50                   	push   %eax
f012ad3b:	e8 b6 c6 fd ff       	call   f01073f6 <kfree>
f012ad40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad43:	e8 44 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad48:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad4b:	74 1d                	je     f012ad6a <test_kfreelast+0x2428>
f012ad4d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad51:	75 17                	jne    f012ad6a <test_kfreelast+0x2428>
f012ad53:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad5a:	83 ec 0c             	sub    $0xc,%esp
f012ad5d:	68 94 b2 13 f0       	push   $0xf013b294
f012ad62:	e8 c6 5e fd ff       	call   f0100c2d <cprintf>
f012ad67:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012ad6a:	e8 5b 10 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012ad6f:	89 c2                	mov    %eax,%edx
f012ad71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad74:	39 c2                	cmp    %eax,%edx
f012ad76:	74 1d                	je     f012ad95 <test_kfreelast+0x2453>
f012ad78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad7c:	75 17                	jne    f012ad95 <test_kfreelast+0x2453>
f012ad7e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad85:	83 ec 0c             	sub    $0xc,%esp
f012ad88:	68 98 b4 13 f0       	push   $0xf013b498
f012ad8d:	e8 9b 5e fd ff       	call   f0100c2d <cprintf>
f012ad92:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ad95:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad99:	75 17                	jne    f012adb2 <test_kfreelast+0x2470>
f012ad9b:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012ad9f:	83 ec 08             	sub    $0x8,%esp
f012ada2:	ff 75 f0             	pushl  -0x10(%ebp)
f012ada5:	68 6c b2 13 f0       	push   $0xf013b26c
f012adaa:	e8 7e 5e fd ff       	call   f0100c2d <cprintf>
f012adaf:	83 c4 10             	add    $0x10,%esp
f012adb2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012adb9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012adbe:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012adc1:	5b                   	pop    %ebx
f012adc2:	5f                   	pop    %edi
f012adc3:	5d                   	pop    %ebp
f012adc4:	c3                   	ret    

f012adc5 <test_krealloc>:

int test_krealloc() {
f012adc5:	55                   	push   %ebp
f012adc6:	89 e5                	mov    %esp,%ebp
f012adc8:	57                   	push   %edi
f012adc9:	53                   	push   %ebx
f012adca:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012add0:	83 ec 0c             	sub    $0xc,%esp
f012add3:	68 7c a1 13 f0       	push   $0xf013a17c
f012add8:	e8 50 5e fd ff       	call   f0100c2d <cprintf>
f012addd:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012ade0:	83 ec 0c             	sub    $0xc,%esp
f012ade3:	68 ac a1 13 f0       	push   $0xf013a1ac
f012ade8:	e8 40 5e fd ff       	call   f0100c2d <cprintf>
f012aded:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012adf0:	83 ec 0c             	sub    $0xc,%esp
f012adf3:	68 7c a1 13 f0       	push   $0xf013a17c
f012adf8:	e8 30 5e fd ff       	call   f0100c2d <cprintf>
f012adfd:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012ae00:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012ae04:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012ae08:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012ae0e:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012ae14:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012ae1b:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012ae22:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012ae28:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ae2d:	b8 00 00 00 00       	mov    $0x0,%eax
f012ae32:	89 d7                	mov    %edx,%edi
f012ae34:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012ae36:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012ae3d:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012ae43:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ae48:	b8 00 00 00 00       	mov    $0x0,%eax
f012ae4d:	89 d7                	mov    %edx,%edi
f012ae4f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012ae51:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012ae57:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ae5c:	b8 00 00 00 00       	mov    $0x0,%eax
f012ae61:	89 d7                	mov    %edx,%edi
f012ae63:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ae65:	e8 60 0f fe ff       	call   f010bdca <sys_calculate_free_frames>
f012ae6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012ae6d:	83 ec 08             	sub    $0x8,%esp
f012ae70:	68 00 fc 0f 00       	push   $0xffc00
f012ae75:	6a 00                	push   $0x0
f012ae77:	e8 16 c6 fd ff       	call   f0107492 <krealloc>
f012ae7c:	83 c4 10             	add    $0x10,%esp
f012ae7f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012ae85:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ae8b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ae90:	77 17                	ja     f012aea9 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ae92:	83 ec 04             	sub    $0x4,%esp
f012ae95:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012ae9a:	68 e2 0e 00 00       	push   $0xee2
f012ae9f:	68 3a a2 13 f0       	push   $0xf013a23a
f012aea4:	e8 fd 52 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012aea9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012aeaf:	89 c1                	mov    %eax,%ecx
f012aeb1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012aeb8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012aebb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aec0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012aec3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012aec6:	ba 00 00 00 00       	mov    $0x0,%edx
f012aecb:	f7 75 b4             	divl   -0x4c(%ebp)
f012aece:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012aed1:	29 d0                	sub    %edx,%eax
f012aed3:	89 c3                	mov    %eax,%ebx
f012aed5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012aedc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012aee1:	0f b6 d0             	movzbl %al,%edx
f012aee4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012aee7:	01 d0                	add    %edx,%eax
f012aee9:	48                   	dec    %eax
f012aeea:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012aeed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012aef0:	ba 00 00 00 00       	mov    $0x0,%edx
f012aef5:	f7 75 ac             	divl   -0x54(%ebp)
f012aef8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012aefb:	29 d0                	sub    %edx,%eax
f012aefd:	01 c3                	add    %eax,%ebx
f012aeff:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012af06:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012af0b:	0f b6 c0             	movzbl %al,%eax
f012af0e:	c1 e0 04             	shl    $0x4,%eax
f012af11:	89 c2                	mov    %eax,%edx
f012af13:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012af16:	01 d0                	add    %edx,%eax
f012af18:	48                   	dec    %eax
f012af19:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012af1c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012af1f:	ba 00 00 00 00       	mov    $0x0,%edx
f012af24:	f7 75 a4             	divl   -0x5c(%ebp)
f012af27:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012af2a:	29 d0                	sub    %edx,%eax
f012af2c:	01 d8                	add    %ebx,%eax
f012af2e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012af33:	39 c1                	cmp    %eax,%ecx
f012af35:	74 17                	je     f012af4e <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012af37:	83 ec 04             	sub    $0x4,%esp
f012af3a:	68 1c b5 13 f0       	push   $0xf013b51c
f012af3f:	68 e4 0e 00 00       	push   $0xee4
f012af44:	68 3a a2 13 f0       	push   $0xf013a23a
f012af49:	e8 58 52 fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012af4e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012af51:	e8 74 0e fe ff       	call   f010bdca <sys_calculate_free_frames>
f012af56:	29 c3                	sub    %eax,%ebx
f012af58:	89 d8                	mov    %ebx,%eax
f012af5a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012af5f:	74 17                	je     f012af78 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012af61:	83 ec 04             	sub    $0x4,%esp
f012af64:	68 4e b5 13 f0       	push   $0xf013b54e
f012af69:	68 e7 0e 00 00       	push   $0xee7
f012af6e:	68 3a a2 13 f0       	push   $0xf013a23a
f012af73:	e8 2e 52 fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012af78:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012af7f:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012af82:	e8 43 0e fe ff       	call   f010bdca <sys_calculate_free_frames>
f012af87:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012af8a:	83 ec 08             	sub    $0x8,%esp
f012af8d:	68 00 fc 0f 00       	push   $0xffc00
f012af92:	6a 00                	push   $0x0
f012af94:	e8 f9 c4 fd ff       	call   f0107492 <krealloc>
f012af99:	83 c4 10             	add    $0x10,%esp
f012af9c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012afa2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012afa8:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012afad:	77 17                	ja     f012afc6 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012afaf:	83 ec 04             	sub    $0x4,%esp
f012afb2:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012afb7:	68 ef 0e 00 00       	push   $0xeef
f012afbc:	68 3a a2 13 f0       	push   $0xf013a23a
f012afc1:	e8 e0 51 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012afc6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012afcc:	89 c1                	mov    %eax,%ecx
f012afce:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012afd5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012afd8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012afdd:	89 45 98             	mov    %eax,-0x68(%ebp)
f012afe0:	8b 45 98             	mov    -0x68(%ebp),%eax
f012afe3:	ba 00 00 00 00       	mov    $0x0,%edx
f012afe8:	f7 75 9c             	divl   -0x64(%ebp)
f012afeb:	8b 45 98             	mov    -0x68(%ebp),%eax
f012afee:	29 d0                	sub    %edx,%eax
f012aff0:	89 c3                	mov    %eax,%ebx
f012aff2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012aff9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012affe:	0f b6 d0             	movzbl %al,%edx
f012b001:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b004:	01 d0                	add    %edx,%eax
f012b006:	48                   	dec    %eax
f012b007:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b00a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b00d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b012:	f7 75 94             	divl   -0x6c(%ebp)
f012b015:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b018:	29 d0                	sub    %edx,%eax
f012b01a:	01 c3                	add    %eax,%ebx
f012b01c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b023:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b028:	0f b6 c0             	movzbl %al,%eax
f012b02b:	c1 e0 04             	shl    $0x4,%eax
f012b02e:	89 c2                	mov    %eax,%edx
f012b030:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b033:	01 d0                	add    %edx,%eax
f012b035:	48                   	dec    %eax
f012b036:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b039:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b03c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b041:	f7 75 8c             	divl   -0x74(%ebp)
f012b044:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b047:	29 d0                	sub    %edx,%eax
f012b049:	01 d8                	add    %ebx,%eax
f012b04b:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b050:	39 c1                	cmp    %eax,%ecx
f012b052:	74 17                	je     f012b06b <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b054:	83 ec 04             	sub    $0x4,%esp
f012b057:	68 1c b5 13 f0       	push   $0xf013b51c
f012b05c:	68 f1 0e 00 00       	push   $0xef1
f012b061:	68 3a a2 13 f0       	push   $0xf013a23a
f012b066:	e8 3b 51 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b06b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b06e:	e8 57 0d fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b073:	29 c3                	sub    %eax,%ebx
f012b075:	89 d8                	mov    %ebx,%eax
f012b077:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b07c:	74 17                	je     f012b095 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b07e:	83 ec 04             	sub    $0x4,%esp
f012b081:	68 4e b5 13 f0       	push   $0xf013b54e
f012b086:	68 f3 0e 00 00       	push   $0xef3
f012b08b:	68 3a a2 13 f0       	push   $0xf013a23a
f012b090:	e8 11 51 fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b095:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b09c:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b09f:	e8 26 0d fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b0a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b0a7:	83 ec 08             	sub    $0x8,%esp
f012b0aa:	68 00 fc 0f 00       	push   $0xffc00
f012b0af:	6a 00                	push   $0x0
f012b0b1:	e8 dc c3 fd ff       	call   f0107492 <krealloc>
f012b0b6:	83 c4 10             	add    $0x10,%esp
f012b0b9:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b0bf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b0c5:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012b0ca:	77 17                	ja     f012b0e3 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b0cc:	83 ec 04             	sub    $0x4,%esp
f012b0cf:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012b0d4:	68 fb 0e 00 00       	push   $0xefb
f012b0d9:	68 3a a2 13 f0       	push   $0xf013a23a
f012b0de:	e8 c3 50 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012b0e3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b0e9:	89 c1                	mov    %eax,%ecx
f012b0eb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012b0f2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b0fa:	89 45 80             	mov    %eax,-0x80(%ebp)
f012b0fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b100:	ba 00 00 00 00       	mov    $0x0,%edx
f012b105:	f7 75 84             	divl   -0x7c(%ebp)
f012b108:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b10b:	29 d0                	sub    %edx,%eax
f012b10d:	89 c3                	mov    %eax,%ebx
f012b10f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012b116:	10 00 00 
f012b119:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b11e:	0f b6 d0             	movzbl %al,%edx
f012b121:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012b127:	01 d0                	add    %edx,%eax
f012b129:	48                   	dec    %eax
f012b12a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012b130:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b136:	ba 00 00 00 00       	mov    $0x0,%edx
f012b13b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012b141:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b147:	29 d0                	sub    %edx,%eax
f012b149:	01 c3                	add    %eax,%ebx
f012b14b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012b152:	10 00 00 
f012b155:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b15a:	0f b6 c0             	movzbl %al,%eax
f012b15d:	c1 e0 04             	shl    $0x4,%eax
f012b160:	89 c2                	mov    %eax,%edx
f012b162:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012b168:	01 d0                	add    %edx,%eax
f012b16a:	48                   	dec    %eax
f012b16b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012b171:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b177:	ba 00 00 00 00       	mov    $0x0,%edx
f012b17c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012b182:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b188:	29 d0                	sub    %edx,%eax
f012b18a:	01 d8                	add    %ebx,%eax
f012b18c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012b191:	39 c1                	cmp    %eax,%ecx
f012b193:	74 17                	je     f012b1ac <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012b195:	83 ec 04             	sub    $0x4,%esp
f012b198:	68 1c b5 13 f0       	push   $0xf013b51c
f012b19d:	68 fd 0e 00 00       	push   $0xefd
f012b1a2:	68 3a a2 13 f0       	push   $0xf013a23a
f012b1a7:	e8 fa 4f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b1ac:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b1af:	e8 16 0c fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b1b4:	29 c3                	sub    %eax,%ebx
f012b1b6:	89 d8                	mov    %ebx,%eax
f012b1b8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b1bd:	74 17                	je     f012b1d6 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012b1bf:	83 ec 04             	sub    $0x4,%esp
f012b1c2:	68 4e b5 13 f0       	push   $0xf013b54e
f012b1c7:	68 ff 0e 00 00       	push   $0xeff
f012b1cc:	68 3a a2 13 f0       	push   $0xf013a23a
f012b1d1:	e8 d0 4f fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b1d6:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012b1dd:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b1e0:	e8 e5 0b fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b1e5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012b1e8:	83 ec 08             	sub    $0x8,%esp
f012b1eb:	68 00 fc 0f 00       	push   $0xffc00
f012b1f0:	6a 00                	push   $0x0
f012b1f2:	e8 9b c2 fd ff       	call   f0107492 <krealloc>
f012b1f7:	83 c4 10             	add    $0x10,%esp
f012b1fa:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012b200:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b206:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012b20b:	77 17                	ja     f012b224 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b20d:	83 ec 04             	sub    $0x4,%esp
f012b210:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012b215:	68 06 0f 00 00       	push   $0xf06
f012b21a:	68 3a a2 13 f0       	push   $0xf013a23a
f012b21f:	e8 82 4f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012b224:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b22a:	89 c1                	mov    %eax,%ecx
f012b22c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012b233:	10 00 00 
f012b236:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012b23c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b241:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012b247:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b24d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b252:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012b258:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b25e:	29 d0                	sub    %edx,%eax
f012b260:	89 c3                	mov    %eax,%ebx
f012b262:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012b269:	10 00 00 
f012b26c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b271:	0f b6 d0             	movzbl %al,%edx
f012b274:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012b27a:	01 d0                	add    %edx,%eax
f012b27c:	48                   	dec    %eax
f012b27d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012b283:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b289:	ba 00 00 00 00       	mov    $0x0,%edx
f012b28e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012b294:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b29a:	29 d0                	sub    %edx,%eax
f012b29c:	01 c3                	add    %eax,%ebx
f012b29e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012b2a5:	10 00 00 
f012b2a8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b2ad:	0f b6 c0             	movzbl %al,%eax
f012b2b0:	c1 e0 04             	shl    $0x4,%eax
f012b2b3:	89 c2                	mov    %eax,%edx
f012b2b5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012b2bb:	01 d0                	add    %edx,%eax
f012b2bd:	48                   	dec    %eax
f012b2be:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012b2c4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b2ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2cf:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012b2d5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b2db:	29 d0                	sub    %edx,%eax
f012b2dd:	01 d8                	add    %ebx,%eax
f012b2df:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012b2e4:	39 c1                	cmp    %eax,%ecx
f012b2e6:	74 17                	je     f012b2ff <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012b2e8:	83 ec 04             	sub    $0x4,%esp
f012b2eb:	68 1c b5 13 f0       	push   $0xf013b51c
f012b2f0:	68 08 0f 00 00       	push   $0xf08
f012b2f5:	68 3a a2 13 f0       	push   $0xf013a23a
f012b2fa:	e8 a7 4e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b2ff:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b302:	e8 c3 0a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b307:	29 c3                	sub    %eax,%ebx
f012b309:	89 d8                	mov    %ebx,%eax
f012b30b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b310:	74 17                	je     f012b329 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012b312:	83 ec 04             	sub    $0x4,%esp
f012b315:	68 4e b5 13 f0       	push   $0xf013b54e
f012b31a:	68 0a 0f 00 00       	push   $0xf0a
f012b31f:	68 3a a2 13 f0       	push   $0xf013a23a
f012b324:	e8 7d 4e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b329:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012b330:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b333:	e8 92 0a fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b338:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012b33b:	83 ec 08             	sub    $0x8,%esp
f012b33e:	68 00 fc 1f 00       	push   $0x1ffc00
f012b343:	6a 00                	push   $0x0
f012b345:	e8 48 c1 fd ff       	call   f0107492 <krealloc>
f012b34a:	83 c4 10             	add    $0x10,%esp
f012b34d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012b353:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b359:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012b35e:	77 17                	ja     f012b377 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b360:	83 ec 04             	sub    $0x4,%esp
f012b363:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012b368:	68 11 0f 00 00       	push   $0xf11
f012b36d:	68 3a a2 13 f0       	push   $0xf013a23a
f012b372:	e8 2f 4e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012b377:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b37d:	89 c1                	mov    %eax,%ecx
f012b37f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012b386:	10 00 00 
f012b389:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012b38f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b394:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012b39a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b3a0:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3a5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012b3ab:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b3b1:	29 d0                	sub    %edx,%eax
f012b3b3:	89 c3                	mov    %eax,%ebx
f012b3b5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012b3bc:	10 00 00 
f012b3bf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b3c4:	0f b6 d0             	movzbl %al,%edx
f012b3c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012b3cd:	01 d0                	add    %edx,%eax
f012b3cf:	48                   	dec    %eax
f012b3d0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012b3d6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b3dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3e1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012b3e7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b3ed:	29 d0                	sub    %edx,%eax
f012b3ef:	01 c3                	add    %eax,%ebx
f012b3f1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012b3f8:	10 00 00 
f012b3fb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b400:	0f b6 c0             	movzbl %al,%eax
f012b403:	c1 e0 04             	shl    $0x4,%eax
f012b406:	89 c2                	mov    %eax,%edx
f012b408:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012b40e:	01 d0                	add    %edx,%eax
f012b410:	48                   	dec    %eax
f012b411:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012b417:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b41d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b422:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012b428:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b42e:	29 d0                	sub    %edx,%eax
f012b430:	01 d8                	add    %ebx,%eax
f012b432:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012b437:	39 c1                	cmp    %eax,%ecx
f012b439:	74 17                	je     f012b452 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012b43b:	83 ec 04             	sub    $0x4,%esp
f012b43e:	68 1c b5 13 f0       	push   $0xf013b51c
f012b443:	68 13 0f 00 00       	push   $0xf13
f012b448:	68 3a a2 13 f0       	push   $0xf013a23a
f012b44d:	e8 54 4d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b452:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b455:	e8 70 09 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b45a:	29 c3                	sub    %eax,%ebx
f012b45c:	89 d8                	mov    %ebx,%eax
f012b45e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b463:	74 17                	je     f012b47c <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012b465:	83 ec 04             	sub    $0x4,%esp
f012b468:	68 4e b5 13 f0       	push   $0xf013b54e
f012b46d:	68 15 0f 00 00       	push   $0xf15
f012b472:	68 3a a2 13 f0       	push   $0xf013a23a
f012b477:	e8 2a 4d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b47c:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012b483:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b486:	e8 3f 09 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b48b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012b48e:	83 ec 08             	sub    $0x8,%esp
f012b491:	68 00 fc 1f 00       	push   $0x1ffc00
f012b496:	6a 00                	push   $0x0
f012b498:	e8 f5 bf fd ff       	call   f0107492 <krealloc>
f012b49d:	83 c4 10             	add    $0x10,%esp
f012b4a0:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012b4a6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b4ac:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012b4b1:	77 17                	ja     f012b4ca <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b4b3:	83 ec 04             	sub    $0x4,%esp
f012b4b6:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012b4bb:	68 1c 0f 00 00       	push   $0xf1c
f012b4c0:	68 3a a2 13 f0       	push   $0xf013a23a
f012b4c5:	e8 dc 4c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012b4ca:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b4d0:	89 c1                	mov    %eax,%ecx
f012b4d2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012b4d9:	10 00 00 
f012b4dc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012b4e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b4e7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012b4ed:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b4f3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4f8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012b4fe:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b504:	29 d0                	sub    %edx,%eax
f012b506:	89 c3                	mov    %eax,%ebx
f012b508:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012b50f:	10 00 00 
f012b512:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b517:	0f b6 d0             	movzbl %al,%edx
f012b51a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012b520:	01 d0                	add    %edx,%eax
f012b522:	48                   	dec    %eax
f012b523:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012b529:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b52f:	ba 00 00 00 00       	mov    $0x0,%edx
f012b534:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012b53a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b540:	29 d0                	sub    %edx,%eax
f012b542:	01 c3                	add    %eax,%ebx
f012b544:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012b54b:	10 00 00 
f012b54e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b553:	0f b6 c0             	movzbl %al,%eax
f012b556:	c1 e0 04             	shl    $0x4,%eax
f012b559:	89 c2                	mov    %eax,%edx
f012b55b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b561:	01 d0                	add    %edx,%eax
f012b563:	48                   	dec    %eax
f012b564:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012b56a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b570:	ba 00 00 00 00       	mov    $0x0,%edx
f012b575:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012b57b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b581:	29 d0                	sub    %edx,%eax
f012b583:	01 d8                	add    %ebx,%eax
f012b585:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012b58a:	39 c1                	cmp    %eax,%ecx
f012b58c:	74 17                	je     f012b5a5 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012b58e:	83 ec 04             	sub    $0x4,%esp
f012b591:	68 1c b5 13 f0       	push   $0xf013b51c
f012b596:	68 1e 0f 00 00       	push   $0xf1e
f012b59b:	68 3a a2 13 f0       	push   $0xf013a23a
f012b5a0:	e8 01 4c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b5a5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b5a8:	e8 1d 08 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b5ad:	29 c3                	sub    %eax,%ebx
f012b5af:	89 d8                	mov    %ebx,%eax
f012b5b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b5b6:	74 17                	je     f012b5cf <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012b5b8:	83 ec 04             	sub    $0x4,%esp
f012b5bb:	68 4e b5 13 f0       	push   $0xf013b54e
f012b5c0:	68 20 0f 00 00       	push   $0xf20
f012b5c5:	68 3a a2 13 f0       	push   $0xf013a23a
f012b5ca:	e8 d7 4b fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b5cf:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012b5d6:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012b5d9:	e8 ec 07 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b5de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012b5e1:	83 ec 08             	sub    $0x8,%esp
f012b5e4:	68 00 fc 2f 00       	push   $0x2ffc00
f012b5e9:	6a 00                	push   $0x0
f012b5eb:	e8 a2 be fd ff       	call   f0107492 <krealloc>
f012b5f0:	83 c4 10             	add    $0x10,%esp
f012b5f3:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012b5f9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b5ff:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012b604:	77 17                	ja     f012b61d <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b606:	83 ec 04             	sub    $0x4,%esp
f012b609:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012b60e:	68 27 0f 00 00       	push   $0xf27
f012b613:	68 3a a2 13 f0       	push   $0xf013a23a
f012b618:	e8 89 4b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012b61d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b623:	89 c1                	mov    %eax,%ecx
f012b625:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012b62c:	10 00 00 
f012b62f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b635:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b63a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012b640:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b646:	ba 00 00 00 00       	mov    $0x0,%edx
f012b64b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012b651:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b657:	29 d0                	sub    %edx,%eax
f012b659:	89 c3                	mov    %eax,%ebx
f012b65b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012b662:	10 00 00 
f012b665:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b66a:	0f b6 d0             	movzbl %al,%edx
f012b66d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012b673:	01 d0                	add    %edx,%eax
f012b675:	48                   	dec    %eax
f012b676:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012b67c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b682:	ba 00 00 00 00       	mov    $0x0,%edx
f012b687:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012b68d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b693:	29 d0                	sub    %edx,%eax
f012b695:	01 c3                	add    %eax,%ebx
f012b697:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b69e:	10 00 00 
f012b6a1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b6a6:	0f b6 c0             	movzbl %al,%eax
f012b6a9:	c1 e0 04             	shl    $0x4,%eax
f012b6ac:	89 c2                	mov    %eax,%edx
f012b6ae:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b6b4:	01 d0                	add    %edx,%eax
f012b6b6:	48                   	dec    %eax
f012b6b7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b6bd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6c8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b6ce:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b6d4:	29 d0                	sub    %edx,%eax
f012b6d6:	01 d8                	add    %ebx,%eax
f012b6d8:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012b6dd:	39 c1                	cmp    %eax,%ecx
f012b6df:	74 17                	je     f012b6f8 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012b6e1:	83 ec 04             	sub    $0x4,%esp
f012b6e4:	68 1c b5 13 f0       	push   $0xf013b51c
f012b6e9:	68 29 0f 00 00       	push   $0xf29
f012b6ee:	68 3a a2 13 f0       	push   $0xf013a23a
f012b6f3:	e8 ae 4a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012b6f8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6fb:	e8 ca 06 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b700:	29 c3                	sub    %eax,%ebx
f012b702:	89 d8                	mov    %ebx,%eax
f012b704:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b709:	74 17                	je     f012b722 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012b70b:	83 ec 04             	sub    $0x4,%esp
f012b70e:	68 84 a6 13 f0       	push   $0xf013a684
f012b713:	68 2b 0f 00 00       	push   $0xf2b
f012b718:	68 3a a2 13 f0       	push   $0xf013a23a
f012b71d:	e8 84 4a fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012b722:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012b729:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012b72c:	e8 99 06 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b731:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012b734:	83 ec 08             	sub    $0x8,%esp
f012b737:	68 00 fc 2f 00       	push   $0x2ffc00
f012b73c:	6a 00                	push   $0x0
f012b73e:	e8 4f bd fd ff       	call   f0107492 <krealloc>
f012b743:	83 c4 10             	add    $0x10,%esp
f012b746:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012b74c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b752:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012b757:	77 17                	ja     f012b770 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b759:	83 ec 04             	sub    $0x4,%esp
f012b75c:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012b761:	68 32 0f 00 00       	push   $0xf32
f012b766:	68 3a a2 13 f0       	push   $0xf013a23a
f012b76b:	e8 36 4a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012b770:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b776:	89 c1                	mov    %eax,%ecx
f012b778:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b77f:	10 00 00 
f012b782:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b788:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b78d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b793:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b799:	ba 00 00 00 00       	mov    $0x0,%edx
f012b79e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b7a4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b7aa:	29 d0                	sub    %edx,%eax
f012b7ac:	89 c3                	mov    %eax,%ebx
f012b7ae:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b7b5:	10 00 00 
f012b7b8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b7bd:	0f b6 d0             	movzbl %al,%edx
f012b7c0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b7c6:	01 d0                	add    %edx,%eax
f012b7c8:	48                   	dec    %eax
f012b7c9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b7cf:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7da:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b7e0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7e6:	29 d0                	sub    %edx,%eax
f012b7e8:	01 c3                	add    %eax,%ebx
f012b7ea:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b7f1:	10 00 00 
f012b7f4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b7f9:	0f b6 c0             	movzbl %al,%eax
f012b7fc:	c1 e0 04             	shl    $0x4,%eax
f012b7ff:	89 c2                	mov    %eax,%edx
f012b801:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b807:	01 d0                	add    %edx,%eax
f012b809:	48                   	dec    %eax
f012b80a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b810:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b816:	ba 00 00 00 00       	mov    $0x0,%edx
f012b81b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b821:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b827:	29 d0                	sub    %edx,%eax
f012b829:	01 d8                	add    %ebx,%eax
f012b82b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012b830:	39 c1                	cmp    %eax,%ecx
f012b832:	74 17                	je     f012b84b <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012b834:	83 ec 04             	sub    $0x4,%esp
f012b837:	68 1c b5 13 f0       	push   $0xf013b51c
f012b83c:	68 34 0f 00 00       	push   $0xf34
f012b841:	68 3a a2 13 f0       	push   $0xf013a23a
f012b846:	e8 5b 49 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012b84b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b84e:	e8 77 05 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b853:	29 c3                	sub    %eax,%ebx
f012b855:	89 d8                	mov    %ebx,%eax
f012b857:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b85c:	74 17                	je     f012b875 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012b85e:	83 ec 04             	sub    $0x4,%esp
f012b861:	68 4e b5 13 f0       	push   $0xf013b54e
f012b866:	68 36 0f 00 00       	push   $0xf36
f012b86b:	68 3a a2 13 f0       	push   $0xf013a23a
f012b870:	e8 31 49 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012b875:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012b87c:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012b87f:	e8 46 05 fe ff       	call   f010bdca <sys_calculate_free_frames>
f012b884:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012b887:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012b88e:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012b891:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b897:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012b89d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012b8a3:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012b8a6:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012b8a8:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012b8ae:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012b8b4:	01 c2                	add    %eax,%edx
f012b8b6:	8a 45 ce             	mov    -0x32(%ebp),%al
f012b8b9:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b8bb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b8c1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012b8c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b8ce:	eb 11                	jmp    f012b8e1 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012b8d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b8d3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b8d9:	01 d0                	add    %edx,%eax
f012b8db:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012b8de:	ff 45 f4             	incl   -0xc(%ebp)
f012b8e1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b8e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b8ea:	7d e4                	jge    f012b8d0 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012b8ec:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b8f2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012b8f8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b8fe:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012b904:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012b90a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012b911:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b917:	01 d0                	add    %edx,%eax
f012b919:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012b91f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b925:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012b92b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012b932:	eb 1b                	jmp    f012b94f <test_krealloc+0xb8a>
			intArr[i] = 4;
f012b934:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012b937:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012b93e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b944:	01 d0                	add    %edx,%eax
f012b946:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012b94c:	ff 45 f0             	incl   -0x10(%ebp)
f012b94f:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012b955:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012b958:	7d da                	jge    f012b934 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012b95a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b960:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012b966:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012b96d:	eb 17                	jmp    f012b986 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012b96f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012b972:	01 c0                	add    %eax,%eax
f012b974:	89 c2                	mov    %eax,%edx
f012b976:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b97c:	01 d0                	add    %edx,%eax
f012b97e:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012b983:	ff 45 ec             	incl   -0x14(%ebp)
f012b986:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012b98c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012b98f:	7d de                	jge    f012b96f <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012b991:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b997:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012b99d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b9a3:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012b9a8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012b9ae:	01 c0                	add    %eax,%eax
f012b9b0:	89 c2                	mov    %eax,%edx
f012b9b2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b9b8:	01 d0                	add    %edx,%eax
f012b9ba:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012b9bf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9c5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012b9cb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012b9d2:	eb 49                	jmp    f012ba1d <test_krealloc+0xc58>
			structArr[i].a = 7;
f012b9d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012b9d7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b9de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b9e4:	01 d0                	add    %edx,%eax
f012b9e6:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012b9e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012b9ec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b9f3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b9f9:	01 d0                	add    %edx,%eax
f012b9fb:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012ba01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ba04:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba0b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba11:	01 d0                	add    %edx,%eax
f012ba13:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ba1a:	ff 45 e8             	incl   -0x18(%ebp)
f012ba1d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ba23:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ba26:	7d ac                	jge    f012b9d4 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ba28:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ba2e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ba34:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba3a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ba3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba43:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ba49:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba4f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ba56:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ba5c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba63:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba69:	01 d0                	add    %edx,%eax
f012ba6b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ba6e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ba74:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba7b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba81:	01 d0                	add    %edx,%eax
f012ba83:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ba89:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ba8f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba9c:	01 d0                	add    %edx,%eax
f012ba9e:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012baa5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012baab:	8a 00                	mov    (%eax),%al
f012baad:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012bab0:	75 17                	jne    f012bac9 <test_krealloc+0xd04>
f012bab2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012bab8:	89 c2                	mov    %eax,%edx
f012baba:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bac0:	01 d0                	add    %edx,%eax
f012bac2:	8a 00                	mov    (%eax),%al
f012bac4:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012bac7:	74 17                	je     f012bae0 <test_krealloc+0xd1b>
			panic(
f012bac9:	83 ec 04             	sub    $0x4,%esp
f012bacc:	68 6c b5 13 f0       	push   $0xf013b56c
f012bad1:	68 79 0f 00 00       	push   $0xf79
f012bad6:	68 3a a2 13 f0       	push   $0xf013a23a
f012badb:	e8 c6 46 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012bae0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bae6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012baec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012baf2:	8a 00                	mov    (%eax),%al
f012baf4:	3c 02                	cmp    $0x2,%al
f012baf6:	75 16                	jne    f012bb0e <test_krealloc+0xd49>
f012baf8:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012bafe:	89 c2                	mov    %eax,%edx
f012bb00:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bb06:	01 d0                	add    %edx,%eax
f012bb08:	8a 00                	mov    (%eax),%al
f012bb0a:	3c 02                	cmp    $0x2,%al
f012bb0c:	74 20                	je     f012bb2e <test_krealloc+0xd69>
			panic(
f012bb0e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bb14:	8a 00                	mov    (%eax),%al
f012bb16:	0f be c0             	movsbl %al,%eax
f012bb19:	50                   	push   %eax
f012bb1a:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bb1f:	68 7f 0f 00 00       	push   $0xf7f
f012bb24:	68 3a a2 13 f0       	push   $0xf013a23a
f012bb29:	e8 78 46 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012bb2e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bb34:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012bb3a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb40:	8b 00                	mov    (%eax),%eax
f012bb42:	83 f8 03             	cmp    $0x3,%eax
f012bb45:	75 1c                	jne    f012bb63 <test_krealloc+0xd9e>
f012bb47:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bb4d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bb54:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb5a:	01 d0                	add    %edx,%eax
f012bb5c:	8b 00                	mov    (%eax),%eax
f012bb5e:	83 f8 03             	cmp    $0x3,%eax
f012bb61:	74 17                	je     f012bb7a <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012bb63:	83 ec 04             	sub    $0x4,%esp
f012bb66:	68 f8 b5 13 f0       	push   $0xf013b5f8
f012bb6b:	68 83 0f 00 00       	push   $0xf83
f012bb70:	68 3a a2 13 f0       	push   $0xf013a23a
f012bb75:	e8 2c 46 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012bb7a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bb80:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012bb86:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb8c:	8b 00                	mov    (%eax),%eax
f012bb8e:	83 f8 04             	cmp    $0x4,%eax
f012bb91:	75 1c                	jne    f012bbaf <test_krealloc+0xdea>
f012bb93:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bb99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bba0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bba6:	01 d0                	add    %edx,%eax
f012bba8:	8b 00                	mov    (%eax),%eax
f012bbaa:	83 f8 04             	cmp    $0x4,%eax
f012bbad:	74 17                	je     f012bbc6 <test_krealloc+0xe01>
			panic(
f012bbaf:	83 ec 04             	sub    $0x4,%esp
f012bbb2:	68 6c b5 13 f0       	push   $0xf013b56c
f012bbb7:	68 88 0f 00 00       	push   $0xf88
f012bbbc:	68 3a a2 13 f0       	push   $0xf013a23a
f012bbc1:	e8 e0 45 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012bbc6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bbcc:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012bbd2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bbd8:	66 8b 00             	mov    (%eax),%ax
f012bbdb:	66 83 f8 05          	cmp    $0x5,%ax
f012bbdf:	75 1b                	jne    f012bbfc <test_krealloc+0xe37>
f012bbe1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012bbe7:	01 c0                	add    %eax,%eax
f012bbe9:	89 c2                	mov    %eax,%edx
f012bbeb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bbf1:	01 d0                	add    %edx,%eax
f012bbf3:	66 8b 00             	mov    (%eax),%ax
f012bbf6:	66 83 f8 05          	cmp    $0x5,%ax
f012bbfa:	74 17                	je     f012bc13 <test_krealloc+0xe4e>
			panic(
f012bbfc:	83 ec 04             	sub    $0x4,%esp
f012bbff:	68 6c b5 13 f0       	push   $0xf013b56c
f012bc04:	68 8d 0f 00 00       	push   $0xf8d
f012bc09:	68 3a a2 13 f0       	push   $0xf013a23a
f012bc0e:	e8 93 45 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012bc13:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bc19:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012bc1f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bc25:	66 8b 00             	mov    (%eax),%ax
f012bc28:	66 83 f8 06          	cmp    $0x6,%ax
f012bc2c:	75 1b                	jne    f012bc49 <test_krealloc+0xe84>
f012bc2e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012bc34:	01 c0                	add    %eax,%eax
f012bc36:	89 c2                	mov    %eax,%edx
f012bc38:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bc3e:	01 d0                	add    %edx,%eax
f012bc40:	66 8b 00             	mov    (%eax),%ax
f012bc43:	66 83 f8 06          	cmp    $0x6,%ax
f012bc47:	74 17                	je     f012bc60 <test_krealloc+0xe9b>
			panic(
f012bc49:	83 ec 04             	sub    $0x4,%esp
f012bc4c:	68 6c b5 13 f0       	push   $0xf013b56c
f012bc51:	68 92 0f 00 00       	push   $0xf92
f012bc56:	68 3a a2 13 f0       	push   $0xf013a23a
f012bc5b:	e8 46 45 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012bc60:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc66:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012bc6c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bc72:	8a 00                	mov    (%eax),%al
f012bc74:	3c 07                	cmp    $0x7,%al
f012bc76:	75 1b                	jne    f012bc93 <test_krealloc+0xece>
f012bc78:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bc7e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bc85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bc8b:	01 d0                	add    %edx,%eax
f012bc8d:	8a 00                	mov    (%eax),%al
f012bc8f:	3c 07                	cmp    $0x7,%al
f012bc91:	74 17                	je     f012bcaa <test_krealloc+0xee5>
			panic(
f012bc93:	83 ec 04             	sub    $0x4,%esp
f012bc96:	68 6c b5 13 f0       	push   $0xf013b56c
f012bc9b:	68 97 0f 00 00       	push   $0xf97
f012bca0:	68 3a a2 13 f0       	push   $0xf013a23a
f012bca5:	e8 fc 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012bcaa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bcb0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bcb4:	66 83 f8 07          	cmp    $0x7,%ax
f012bcb8:	75 1f                	jne    f012bcd9 <test_krealloc+0xf14>
f012bcba:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bcc0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bcc7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bccd:	01 d0                	add    %edx,%eax
f012bccf:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bcd3:	66 83 f8 07          	cmp    $0x7,%ax
f012bcd7:	74 17                	je     f012bcf0 <test_krealloc+0xf2b>
			panic(
f012bcd9:	83 ec 04             	sub    $0x4,%esp
f012bcdc:	68 6c b5 13 f0       	push   $0xf013b56c
f012bce1:	68 9a 0f 00 00       	push   $0xf9a
f012bce6:	68 3a a2 13 f0       	push   $0xf013a23a
f012bceb:	e8 b6 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012bcf0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bcf6:	8b 40 04             	mov    0x4(%eax),%eax
f012bcf9:	83 f8 07             	cmp    $0x7,%eax
f012bcfc:	75 1d                	jne    f012bd1b <test_krealloc+0xf56>
f012bcfe:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bd04:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd0b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd11:	01 d0                	add    %edx,%eax
f012bd13:	8b 40 04             	mov    0x4(%eax),%eax
f012bd16:	83 f8 07             	cmp    $0x7,%eax
f012bd19:	74 17                	je     f012bd32 <test_krealloc+0xf6d>
			panic(
f012bd1b:	83 ec 04             	sub    $0x4,%esp
f012bd1e:	68 6c b5 13 f0       	push   $0xf013b56c
f012bd23:	68 9d 0f 00 00       	push   $0xf9d
f012bd28:	68 3a a2 13 f0       	push   $0xf013a23a
f012bd2d:	e8 74 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012bd32:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bd38:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012bd3e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd44:	8a 00                	mov    (%eax),%al
f012bd46:	3c 08                	cmp    $0x8,%al
f012bd48:	75 1b                	jne    f012bd65 <test_krealloc+0xfa0>
f012bd4a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bd50:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd57:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd5d:	01 d0                	add    %edx,%eax
f012bd5f:	8a 00                	mov    (%eax),%al
f012bd61:	3c 08                	cmp    $0x8,%al
f012bd63:	74 17                	je     f012bd7c <test_krealloc+0xfb7>
			panic(
f012bd65:	83 ec 04             	sub    $0x4,%esp
f012bd68:	68 6c b5 13 f0       	push   $0xf013b56c
f012bd6d:	68 a2 0f 00 00       	push   $0xfa2
f012bd72:	68 3a a2 13 f0       	push   $0xf013a23a
f012bd77:	e8 2a 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012bd7c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd82:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bd86:	66 83 f8 08          	cmp    $0x8,%ax
f012bd8a:	75 1f                	jne    f012bdab <test_krealloc+0xfe6>
f012bd8c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bd92:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd99:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd9f:	01 d0                	add    %edx,%eax
f012bda1:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bda5:	66 83 f8 08          	cmp    $0x8,%ax
f012bda9:	74 17                	je     f012bdc2 <test_krealloc+0xffd>
			panic(
f012bdab:	83 ec 04             	sub    $0x4,%esp
f012bdae:	68 6c b5 13 f0       	push   $0xf013b56c
f012bdb3:	68 a5 0f 00 00       	push   $0xfa5
f012bdb8:	68 3a a2 13 f0       	push   $0xf013a23a
f012bdbd:	e8 e4 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012bdc2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdc8:	8b 40 04             	mov    0x4(%eax),%eax
f012bdcb:	83 f8 08             	cmp    $0x8,%eax
f012bdce:	75 1d                	jne    f012bded <test_krealloc+0x1028>
f012bdd0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bdd6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bddd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bde3:	01 d0                	add    %edx,%eax
f012bde5:	8b 40 04             	mov    0x4(%eax),%eax
f012bde8:	83 f8 08             	cmp    $0x8,%eax
f012bdeb:	74 17                	je     f012be04 <test_krealloc+0x103f>
			panic(
f012bded:	83 ec 04             	sub    $0x4,%esp
f012bdf0:	68 6c b5 13 f0       	push   $0xf013b56c
f012bdf5:	68 a8 0f 00 00       	push   $0xfa8
f012bdfa:	68 3a a2 13 f0       	push   $0xf013a23a
f012bdff:	e8 a2 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012be04:	e8 c1 ff fd ff       	call   f010bdca <sys_calculate_free_frames>
f012be09:	89 c2                	mov    %eax,%edx
f012be0b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012be0e:	39 c2                	cmp    %eax,%edx
f012be10:	74 17                	je     f012be29 <test_krealloc+0x1064>
			panic(
f012be12:	83 ec 04             	sub    $0x4,%esp
f012be15:	68 2c b6 13 f0       	push   $0xf013b62c
f012be1a:	68 ac 0f 00 00       	push   $0xfac
f012be1f:	68 3a a2 13 f0       	push   $0xf013a23a
f012be24:	e8 7d 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012be29:	83 ec 0c             	sub    $0xc,%esp
f012be2c:	68 78 b6 13 f0       	push   $0xf013b678
f012be31:	e8 f7 4d fd ff       	call   f0100c2d <cprintf>
f012be36:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012be39:	e8 8c ff fd ff       	call   f010bdca <sys_calculate_free_frames>
f012be3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012be41:	e8 46 7e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012be46:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012be4c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012be52:	83 ec 08             	sub    $0x8,%esp
f012be55:	6a 00                	push   $0x0
f012be57:	50                   	push   %eax
f012be58:	e8 35 b6 fd ff       	call   f0107492 <krealloc>
f012be5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012be60:	e8 27 7e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012be65:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012be6b:	74 17                	je     f012be84 <test_krealloc+0x10bf>
			panic(
f012be6d:	83 ec 04             	sub    $0x4,%esp
f012be70:	68 9c b6 13 f0       	push   $0xf013b69c
f012be75:	68 b9 0f 00 00       	push   $0xfb9
f012be7a:	68 3a a2 13 f0       	push   $0xf013a23a
f012be7f:	e8 22 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012be84:	e8 41 ff fd ff       	call   f010bdca <sys_calculate_free_frames>
f012be89:	89 c2                	mov    %eax,%edx
f012be8b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012be8e:	29 c2                	sub    %eax,%edx
f012be90:	89 d0                	mov    %edx,%eax
f012be92:	3d 00 01 00 00       	cmp    $0x100,%eax
f012be97:	74 17                	je     f012beb0 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012be99:	83 ec 04             	sub    $0x4,%esp
f012be9c:	68 10 b7 13 f0       	push   $0xf013b710
f012bea1:	68 bb 0f 00 00       	push   $0xfbb
f012bea6:	68 3a a2 13 f0       	push   $0xf013a23a
f012beab:	e8 f6 42 fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012beb0:	e8 15 ff fd ff       	call   f010bdca <sys_calculate_free_frames>
f012beb5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012beb8:	e8 cf 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bebd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012bec3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bec9:	83 ec 08             	sub    $0x8,%esp
f012becc:	6a 00                	push   $0x0
f012bece:	50                   	push   %eax
f012becf:	e8 be b5 fd ff       	call   f0107492 <krealloc>
f012bed4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bed7:	e8 b0 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bedc:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012bee2:	74 17                	je     f012befb <test_krealloc+0x1136>
			panic(
f012bee4:	83 ec 04             	sub    $0x4,%esp
f012bee7:	68 9c b6 13 f0       	push   $0xf013b69c
f012beec:	68 c4 0f 00 00       	push   $0xfc4
f012bef1:	68 3a a2 13 f0       	push   $0xf013a23a
f012bef6:	e8 ab 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012befb:	e8 ca fe fd ff       	call   f010bdca <sys_calculate_free_frames>
f012bf00:	89 c2                	mov    %eax,%edx
f012bf02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bf05:	29 c2                	sub    %eax,%edx
f012bf07:	89 d0                	mov    %edx,%eax
f012bf09:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bf0e:	74 17                	je     f012bf27 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012bf10:	83 ec 04             	sub    $0x4,%esp
f012bf13:	68 10 b7 13 f0       	push   $0xf013b710
f012bf18:	68 c6 0f 00 00       	push   $0xfc6
f012bf1d:	68 3a a2 13 f0       	push   $0xf013a23a
f012bf22:	e8 7f 42 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012bf27:	e8 9e fe fd ff       	call   f010bdca <sys_calculate_free_frames>
f012bf2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bf2f:	e8 58 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bf34:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012bf3a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bf40:	83 ec 08             	sub    $0x8,%esp
f012bf43:	6a 00                	push   $0x0
f012bf45:	50                   	push   %eax
f012bf46:	e8 47 b5 fd ff       	call   f0107492 <krealloc>
f012bf4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bf4e:	e8 39 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bf53:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012bf59:	74 17                	je     f012bf72 <test_krealloc+0x11ad>
			panic(
f012bf5b:	83 ec 04             	sub    $0x4,%esp
f012bf5e:	68 54 a2 13 f0       	push   $0xf013a254
f012bf63:	68 ce 0f 00 00       	push   $0xfce
f012bf68:	68 3a a2 13 f0       	push   $0xf013a23a
f012bf6d:	e8 34 42 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012bf72:	e8 53 fe fd ff       	call   f010bdca <sys_calculate_free_frames>
f012bf77:	89 c2                	mov    %eax,%edx
f012bf79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bf7c:	29 c2                	sub    %eax,%edx
f012bf7e:	89 d0                	mov    %edx,%eax
f012bf80:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bf85:	74 17                	je     f012bf9e <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012bf87:	83 ec 04             	sub    $0x4,%esp
f012bf8a:	68 10 b7 13 f0       	push   $0xf013b710
f012bf8f:	68 d0 0f 00 00       	push   $0xfd0
f012bf94:	68 3a a2 13 f0       	push   $0xf013a23a
f012bf99:	e8 08 42 fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012bf9e:	e8 27 fe fd ff       	call   f010bdca <sys_calculate_free_frames>
f012bfa3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bfa6:	e8 e1 7c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bfab:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012bfb1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bfb7:	83 ec 08             	sub    $0x8,%esp
f012bfba:	6a 00                	push   $0x0
f012bfbc:	50                   	push   %eax
f012bfbd:	e8 d0 b4 fd ff       	call   f0107492 <krealloc>
f012bfc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bfc5:	e8 c2 7c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bfca:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012bfd0:	74 17                	je     f012bfe9 <test_krealloc+0x1224>
			panic(
f012bfd2:	83 ec 04             	sub    $0x4,%esp
f012bfd5:	68 9c b6 13 f0       	push   $0xf013b69c
f012bfda:	68 d8 0f 00 00       	push   $0xfd8
f012bfdf:	68 3a a2 13 f0       	push   $0xf013a23a
f012bfe4:	e8 bd 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012bfe9:	e8 dc fd fd ff       	call   f010bdca <sys_calculate_free_frames>
f012bfee:	89 c2                	mov    %eax,%edx
f012bff0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bff3:	29 c2                	sub    %eax,%edx
f012bff5:	89 d0                	mov    %edx,%eax
f012bff7:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bffc:	74 17                	je     f012c015 <test_krealloc+0x1250>
			panic(
f012bffe:	83 ec 04             	sub    $0x4,%esp
f012c001:	68 44 b7 13 f0       	push   $0xf013b744
f012c006:	68 db 0f 00 00       	push   $0xfdb
f012c00b:	68 3a a2 13 f0       	push   $0xf013a23a
f012c010:	e8 91 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c015:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c01c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c023:	eb 48                	jmp    f012c06d <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c025:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c028:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012c02d:	83 ec 04             	sub    $0x4,%esp
f012c030:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c036:	51                   	push   %ecx
f012c037:	52                   	push   %edx
f012c038:	50                   	push   %eax
f012c039:	e8 2b a9 fd ff       	call   f0106969 <get_page_table>
f012c03e:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c041:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c047:	85 c0                	test   %eax,%eax
f012c049:	75 17                	jne    f012c062 <test_krealloc+0x129d>
					panic(
f012c04b:	83 ec 04             	sub    $0x4,%esp
f012c04e:	68 3c ab 13 f0       	push   $0xf013ab3c
f012c053:	68 e7 0f 00 00       	push   $0xfe7
f012c058:	68 3a a2 13 f0       	push   $0xf013a23a
f012c05d:	e8 44 41 fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c062:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c069:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c06d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c071:	78 b2                	js     f012c025 <test_krealloc+0x1260>
f012c073:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c077:	7f 09                	jg     f012c082 <test_krealloc+0x12bd>
f012c079:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c080:	76 a3                	jbe    f012c025 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c082:	83 ec 0c             	sub    $0xc,%esp
f012c085:	68 83 b7 13 f0       	push   $0xf013b783
f012c08a:	e8 9e 4b fd ff       	call   f0100c2d <cprintf>
f012c08f:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c092:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c098:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c09e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c0a5:	eb 21                	jmp    f012c0c8 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c0a7:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c0ad:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c0b0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c0b6:	01 c8                	add    %ecx,%eax
f012c0b8:	8a 00                	mov    (%eax),%al
f012c0ba:	0f be c0             	movsbl %al,%eax
f012c0bd:	01 d0                	add    %edx,%eax
f012c0bf:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c0c5:	ff 45 dc             	incl   -0x24(%ebp)
f012c0c8:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c0ce:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c0d1:	7d d4                	jge    f012c0a7 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c0d3:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c0d9:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012c0df:	42                   	inc    %edx
f012c0e0:	01 d2                	add    %edx,%edx
f012c0e2:	39 d0                	cmp    %edx,%eax
f012c0e4:	74 17                	je     f012c0fd <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012c0e6:	83 ec 04             	sub    $0x4,%esp
f012c0e9:	68 8c b7 13 f0       	push   $0xf013b78c
f012c0ee:	68 f9 0f 00 00       	push   $0xff9
f012c0f3:	68 3a a2 13 f0       	push   $0xf013a23a
f012c0f8:	e8 a9 40 fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c0fd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c103:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c109:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c110:	eb 25                	jmp    f012c137 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012c112:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012c118:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c11b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c122:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c128:	01 c8                	add    %ecx,%eax
f012c12a:	8b 00                	mov    (%eax),%eax
f012c12c:	01 d0                	add    %edx,%eax
f012c12e:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c134:	ff 45 dc             	incl   -0x24(%ebp)
f012c137:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c13d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c140:	7d d0                	jge    f012c112 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012c142:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012c148:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012c14e:	42                   	inc    %edx
f012c14f:	c1 e2 02             	shl    $0x2,%edx
f012c152:	39 d0                	cmp    %edx,%eax
f012c154:	74 17                	je     f012c16d <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012c156:	83 ec 04             	sub    $0x4,%esp
f012c159:	68 8c b7 13 f0       	push   $0xf013b78c
f012c15e:	68 03 10 00 00       	push   $0x1003
f012c163:	68 3a a2 13 f0       	push   $0xf013a23a
f012c168:	e8 39 40 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012c16d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c173:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c179:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c180:	eb 24                	jmp    f012c1a6 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012c182:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c188:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c18b:	01 c0                	add    %eax,%eax
f012c18d:	89 c1                	mov    %eax,%ecx
f012c18f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c195:	01 c8                	add    %ecx,%eax
f012c197:	66 8b 00             	mov    (%eax),%ax
f012c19a:	98                   	cwtl   
f012c19b:	01 d0                	add    %edx,%eax
f012c19d:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c1a3:	ff 45 dc             	incl   -0x24(%ebp)
f012c1a6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c1ac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c1af:	7d d1                	jge    f012c182 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012c1b1:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c1b7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c1bd:	8d 48 01             	lea    0x1(%eax),%ecx
f012c1c0:	89 c8                	mov    %ecx,%eax
f012c1c2:	c1 e0 02             	shl    $0x2,%eax
f012c1c5:	01 c8                	add    %ecx,%eax
f012c1c7:	39 c2                	cmp    %eax,%edx
f012c1c9:	74 17                	je     f012c1e2 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012c1cb:	83 ec 04             	sub    $0x4,%esp
f012c1ce:	68 8c b7 13 f0       	push   $0xf013b78c
f012c1d3:	68 0d 10 00 00       	push   $0x100d
f012c1d8:	68 3a a2 13 f0       	push   $0xf013a23a
f012c1dd:	e8 c4 3f fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012c1e2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c1e8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c1ee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c1f5:	eb 70                	jmp    f012c267 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012c1f7:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012c1fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c200:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c207:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c20d:	01 c8                	add    %ecx,%eax
f012c20f:	8a 00                	mov    (%eax),%al
f012c211:	0f be c0             	movsbl %al,%eax
f012c214:	01 d0                	add    %edx,%eax
f012c216:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012c21c:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012c222:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c225:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c22c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c232:	01 c8                	add    %ecx,%eax
f012c234:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c238:	98                   	cwtl   
f012c239:	01 d0                	add    %edx,%eax
f012c23b:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012c241:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012c247:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c24a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c251:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c257:	01 c8                	add    %ecx,%eax
f012c259:	8b 40 04             	mov    0x4(%eax),%eax
f012c25c:	01 d0                	add    %edx,%eax
f012c25e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c264:	ff 45 dc             	incl   -0x24(%ebp)
f012c267:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c26d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c270:	7d 85                	jge    f012c1f7 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012c272:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012c278:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c27e:	8d 50 01             	lea    0x1(%eax),%edx
f012c281:	89 d0                	mov    %edx,%eax
f012c283:	01 c0                	add    %eax,%eax
f012c285:	01 d0                	add    %edx,%eax
f012c287:	01 c0                	add    %eax,%eax
f012c289:	01 d0                	add    %edx,%eax
f012c28b:	39 c1                	cmp    %eax,%ecx
f012c28d:	75 3a                	jne    f012c2c9 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012c28f:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012c295:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c29b:	8d 50 01             	lea    0x1(%eax),%edx
f012c29e:	89 d0                	mov    %edx,%eax
f012c2a0:	01 c0                	add    %eax,%eax
f012c2a2:	01 d0                	add    %edx,%eax
f012c2a4:	01 c0                	add    %eax,%eax
f012c2a6:	01 d0                	add    %edx,%eax
f012c2a8:	39 c1                	cmp    %eax,%ecx
f012c2aa:	75 1d                	jne    f012c2c9 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012c2ac:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012c2b2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c2b8:	8d 50 01             	lea    0x1(%eax),%edx
f012c2bb:	89 d0                	mov    %edx,%eax
f012c2bd:	01 c0                	add    %eax,%eax
f012c2bf:	01 d0                	add    %edx,%eax
f012c2c1:	01 c0                	add    %eax,%eax
f012c2c3:	01 d0                	add    %edx,%eax
f012c2c5:	39 c1                	cmp    %eax,%ecx
f012c2c7:	74 17                	je     f012c2e0 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012c2c9:	83 ec 04             	sub    $0x4,%esp
f012c2cc:	68 8c b7 13 f0       	push   $0xf013b78c
f012c2d1:	68 1b 10 00 00       	push   $0x101b
f012c2d6:	68 3a a2 13 f0       	push   $0xf013a23a
f012c2db:	e8 c6 3e fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012c2e0:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012c2e7:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c2ea:	e8 db fa fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c2ef:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012c2f2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2f8:	83 ec 08             	sub    $0x8,%esp
f012c2fb:	68 00 3c 00 00       	push   $0x3c00
f012c300:	50                   	push   %eax
f012c301:	e8 8c b1 fd ff       	call   f0107492 <krealloc>
f012c306:	83 c4 10             	add    $0x10,%esp
f012c309:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c30f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c315:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c31a:	77 17                	ja     f012c333 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c31c:	83 ec 04             	sub    $0x4,%esp
f012c31f:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c324:	68 27 10 00 00       	push   $0x1027
f012c329:	68 3a a2 13 f0       	push   $0xf013a23a
f012c32e:	e8 73 3e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c333:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c339:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c33f:	74 17                	je     f012c358 <test_krealloc+0x1593>
			panic(
f012c341:	83 ec 04             	sub    $0x4,%esp
f012c344:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012c349:	68 2a 10 00 00       	push   $0x102a
f012c34e:	68 3a a2 13 f0       	push   $0xf013a23a
f012c353:	e8 4e 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c358:	e8 6d fa fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c35d:	89 c2                	mov    %eax,%edx
f012c35f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c362:	39 c2                	cmp    %eax,%edx
f012c364:	74 17                	je     f012c37d <test_krealloc+0x15b8>
			panic(
f012c366:	83 ec 04             	sub    $0x4,%esp
f012c369:	68 30 b8 13 f0       	push   $0xf013b830
f012c36e:	68 2d 10 00 00       	push   $0x102d
f012c373:	68 3a a2 13 f0       	push   $0xf013a23a
f012c378:	e8 29 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c37d:	e8 48 fa fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c382:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012c385:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c38b:	83 ec 08             	sub    $0x8,%esp
f012c38e:	68 00 fc 0f 00       	push   $0xffc00
f012c393:	50                   	push   %eax
f012c394:	e8 f9 b0 fd ff       	call   f0107492 <krealloc>
f012c399:	83 c4 10             	add    $0x10,%esp
f012c39c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c3a2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c3a8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c3ad:	77 17                	ja     f012c3c6 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3af:	83 ec 04             	sub    $0x4,%esp
f012c3b2:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c3b7:	68 33 10 00 00       	push   $0x1033
f012c3bc:	68 3a a2 13 f0       	push   $0xf013a23a
f012c3c1:	e8 e0 3d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c3c6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c3cc:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c3d2:	74 17                	je     f012c3eb <test_krealloc+0x1626>
			panic(
f012c3d4:	83 ec 04             	sub    $0x4,%esp
f012c3d7:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012c3dc:	68 36 10 00 00       	push   $0x1036
f012c3e1:	68 3a a2 13 f0       	push   $0xf013a23a
f012c3e6:	e8 bb 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c3eb:	e8 da f9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c3f0:	89 c2                	mov    %eax,%edx
f012c3f2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c3f5:	39 c2                	cmp    %eax,%edx
f012c3f7:	74 17                	je     f012c410 <test_krealloc+0x164b>
			panic(
f012c3f9:	83 ec 04             	sub    $0x4,%esp
f012c3fc:	68 30 b8 13 f0       	push   $0xf013b830
f012c401:	68 39 10 00 00       	push   $0x1039
f012c406:	68 3a a2 13 f0       	push   $0xf013a23a
f012c40b:	e8 96 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c410:	e8 b5 f9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c415:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012c418:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c41e:	83 ec 08             	sub    $0x8,%esp
f012c421:	68 00 fc 0f 00       	push   $0xffc00
f012c426:	50                   	push   %eax
f012c427:	e8 66 b0 fd ff       	call   f0107492 <krealloc>
f012c42c:	83 c4 10             	add    $0x10,%esp
f012c42f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c435:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c43b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c440:	77 17                	ja     f012c459 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c442:	83 ec 04             	sub    $0x4,%esp
f012c445:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c44a:	68 3f 10 00 00       	push   $0x103f
f012c44f:	68 3a a2 13 f0       	push   $0xf013a23a
f012c454:	e8 4d 3d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c459:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c45f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c465:	74 17                	je     f012c47e <test_krealloc+0x16b9>
			panic(
f012c467:	83 ec 04             	sub    $0x4,%esp
f012c46a:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012c46f:	68 42 10 00 00       	push   $0x1042
f012c474:	68 3a a2 13 f0       	push   $0xf013a23a
f012c479:	e8 28 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c47e:	e8 47 f9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c483:	89 c2                	mov    %eax,%edx
f012c485:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c488:	39 c2                	cmp    %eax,%edx
f012c48a:	74 17                	je     f012c4a3 <test_krealloc+0x16de>
			panic(
f012c48c:	83 ec 04             	sub    $0x4,%esp
f012c48f:	68 30 b8 13 f0       	push   $0xf013b830
f012c494:	68 45 10 00 00       	push   $0x1045
f012c499:	68 3a a2 13 f0       	push   $0xf013a23a
f012c49e:	e8 03 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c4a3:	e8 22 f9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c4a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012c4ab:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4b1:	83 ec 08             	sub    $0x8,%esp
f012c4b4:	68 00 fc 0f 00       	push   $0xffc00
f012c4b9:	50                   	push   %eax
f012c4ba:	e8 d3 af fd ff       	call   f0107492 <krealloc>
f012c4bf:	83 c4 10             	add    $0x10,%esp
f012c4c2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c4c8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c4ce:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c4d3:	77 17                	ja     f012c4ec <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c4d5:	83 ec 04             	sub    $0x4,%esp
f012c4d8:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c4dd:	68 4d 10 00 00       	push   $0x104d
f012c4e2:	68 3a a2 13 f0       	push   $0xf013a23a
f012c4e7:	e8 ba 3c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012c4ec:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4f2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c4f8:	74 17                	je     f012c511 <test_krealloc+0x174c>
			panic(
f012c4fa:	83 ec 04             	sub    $0x4,%esp
f012c4fd:	68 74 b8 13 f0       	push   $0xf013b874
f012c502:	68 50 10 00 00       	push   $0x1050
f012c507:	68 3a a2 13 f0       	push   $0xf013a23a
f012c50c:	e8 95 3c fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c511:	e8 b4 f8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c516:	89 c2                	mov    %eax,%edx
f012c518:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c51b:	39 c2                	cmp    %eax,%edx
f012c51d:	74 17                	je     f012c536 <test_krealloc+0x1771>
			panic(
f012c51f:	83 ec 04             	sub    $0x4,%esp
f012c522:	68 30 b8 13 f0       	push   $0xf013b830
f012c527:	68 53 10 00 00       	push   $0x1053
f012c52c:	68 3a a2 13 f0       	push   $0xf013a23a
f012c531:	e8 70 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012c536:	83 ec 0c             	sub    $0xc,%esp
f012c539:	68 53 aa 13 f0       	push   $0xf013aa53
f012c53e:	e8 ea 46 fd ff       	call   f0100c2d <cprintf>
f012c543:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012c546:	e8 7f f8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c54b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012c54e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c554:	83 ec 08             	sub    $0x8,%esp
f012c557:	68 00 18 10 00       	push   $0x101800
f012c55c:	50                   	push   %eax
f012c55d:	e8 30 af fd ff       	call   f0107492 <krealloc>
f012c562:	83 c4 10             	add    $0x10,%esp
f012c565:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c568:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c56b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c570:	77 17                	ja     f012c589 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c572:	83 ec 04             	sub    $0x4,%esp
f012c575:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c57a:	68 5c 10 00 00       	push   $0x105c
f012c57f:	68 3a a2 13 f0       	push   $0xf013a23a
f012c584:	e8 1d 3c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c589:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c58f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c592:	74 17                	je     f012c5ab <test_krealloc+0x17e6>
			panic(
f012c594:	83 ec 04             	sub    $0x4,%esp
f012c597:	68 d4 b8 13 f0       	push   $0xf013b8d4
f012c59c:	68 5f 10 00 00       	push   $0x105f
f012c5a1:	68 3a a2 13 f0       	push   $0xf013a23a
f012c5a6:	e8 fb 3b fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012c5ab:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c5ae:	e8 17 f8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c5b3:	29 c3                	sub    %eax,%ebx
f012c5b5:	89 d8                	mov    %ebx,%eax
f012c5b7:	83 f8 02             	cmp    $0x2,%eax
f012c5ba:	74 17                	je     f012c5d3 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012c5bc:	83 ec 04             	sub    $0x4,%esp
f012c5bf:	68 50 b9 13 f0       	push   $0xf013b950
f012c5c4:	68 61 10 00 00       	push   $0x1061
f012c5c9:	68 3a a2 13 f0       	push   $0xf013a23a
f012c5ce:	e8 d3 3b fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012c5d3:	e8 f2 f7 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c5d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012c5db:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c5e1:	83 ec 08             	sub    $0x8,%esp
f012c5e4:	68 00 fc 3f 00       	push   $0x3ffc00
f012c5e9:	50                   	push   %eax
f012c5ea:	e8 a3 ae fd ff       	call   f0107492 <krealloc>
f012c5ef:	83 c4 10             	add    $0x10,%esp
f012c5f2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c5f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c5f8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c5fd:	77 17                	ja     f012c616 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5ff:	83 ec 04             	sub    $0x4,%esp
f012c602:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c607:	68 67 10 00 00       	push   $0x1067
f012c60c:	68 3a a2 13 f0       	push   $0xf013a23a
f012c611:	e8 90 3b fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c616:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c61c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c61f:	74 17                	je     f012c638 <test_krealloc+0x1873>
			panic(
f012c621:	83 ec 04             	sub    $0x4,%esp
f012c624:	68 d4 b8 13 f0       	push   $0xf013b8d4
f012c629:	68 6a 10 00 00       	push   $0x106a
f012c62e:	68 3a a2 13 f0       	push   $0xf013a23a
f012c633:	e8 6e 3b fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012c638:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c63b:	e8 8a f7 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c640:	29 c3                	sub    %eax,%ebx
f012c642:	89 d8                	mov    %ebx,%eax
f012c644:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c649:	74 17                	je     f012c662 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012c64b:	83 ec 04             	sub    $0x4,%esp
f012c64e:	68 50 b9 13 f0       	push   $0xf013b950
f012c653:	68 6d 10 00 00       	push   $0x106d
f012c658:	68 3a a2 13 f0       	push   $0xf013a23a
f012c65d:	e8 44 3b fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012c662:	83 ec 0c             	sub    $0xc,%esp
f012c665:	68 98 aa 13 f0       	push   $0xf013aa98
f012c66a:	e8 be 45 fd ff       	call   f0100c2d <cprintf>
f012c66f:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012c672:	e8 53 f7 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c677:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012c67a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c680:	83 ec 08             	sub    $0x8,%esp
f012c683:	68 00 fc 9f 00       	push   $0x9ffc00
f012c688:	50                   	push   %eax
f012c689:	e8 04 ae fd ff       	call   f0107492 <krealloc>
f012c68e:	83 c4 10             	add    $0x10,%esp
f012c691:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c694:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c697:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c69c:	77 17                	ja     f012c6b5 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c69e:	83 ec 04             	sub    $0x4,%esp
f012c6a1:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c6a6:	68 78 10 00 00       	push   $0x1078
f012c6ab:	68 3a a2 13 f0       	push   $0xf013a23a
f012c6b0:	e8 f1 3a fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012c6b5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012c6bc:	10 00 00 
f012c6bf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012c6c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c6ca:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012c6d0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012c6d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6db:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012c6e1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012c6e7:	29 d0                	sub    %edx,%eax
f012c6e9:	89 c1                	mov    %eax,%ecx
f012c6eb:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012c6f2:	10 00 00 
f012c6f5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c6fa:	0f b6 d0             	movzbl %al,%edx
f012c6fd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012c703:	01 d0                	add    %edx,%eax
f012c705:	48                   	dec    %eax
f012c706:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012c70c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012c712:	ba 00 00 00 00       	mov    $0x0,%edx
f012c717:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012c71d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012c723:	29 d0                	sub    %edx,%eax
f012c725:	01 c1                	add    %eax,%ecx
f012c727:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012c72e:	10 00 00 
f012c731:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c736:	0f b6 c0             	movzbl %al,%eax
f012c739:	c1 e0 04             	shl    $0x4,%eax
f012c73c:	89 c2                	mov    %eax,%edx
f012c73e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012c744:	01 d0                	add    %edx,%eax
f012c746:	48                   	dec    %eax
f012c747:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012c74d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012c753:	ba 00 00 00 00       	mov    $0x0,%edx
f012c758:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012c75e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012c764:	29 d0                	sub    %edx,%eax
f012c766:	01 c8                	add    %ecx,%eax
f012c768:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012c76e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c771:	39 c2                	cmp    %eax,%edx
f012c773:	74 18                	je     f012c78d <test_krealloc+0x19c8>
			panic(
f012c775:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c778:	50                   	push   %eax
f012c779:	68 84 b9 13 f0       	push   $0xf013b984
f012c77e:	68 7c 10 00 00       	push   $0x107c
f012c783:	68 3a a2 13 f0       	push   $0xf013a23a
f012c788:	e8 19 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012c78d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c793:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c796:	75 17                	jne    f012c7af <test_krealloc+0x19ea>
			panic(
f012c798:	83 ec 04             	sub    $0x4,%esp
f012c79b:	68 c8 b9 13 f0       	push   $0xf013b9c8
f012c7a0:	68 7f 10 00 00       	push   $0x107f
f012c7a5:	68 3a a2 13 f0       	push   $0xf013a23a
f012c7aa:	e8 f7 39 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012c7af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c7b2:	e8 13 f6 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c7b7:	29 c3                	sub    %eax,%ebx
f012c7b9:	89 d8                	mov    %ebx,%eax
f012c7bb:	3d 00 06 00 00       	cmp    $0x600,%eax
f012c7c0:	74 17                	je     f012c7d9 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012c7c2:	83 ec 04             	sub    $0x4,%esp
f012c7c5:	68 50 b9 13 f0       	push   $0xf013b950
f012c7ca:	68 82 10 00 00       	push   $0x1082
f012c7cf:	68 3a a2 13 f0       	push   $0xf013a23a
f012c7d4:	e8 cd 39 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012c7d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c7dc:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012c7e2:	e8 e3 f5 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c7e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012c7ea:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c7f0:	83 ec 08             	sub    $0x8,%esp
f012c7f3:	68 00 fc 5f 00       	push   $0x5ffc00
f012c7f8:	50                   	push   %eax
f012c7f9:	e8 94 ac fd ff       	call   f0107492 <krealloc>
f012c7fe:	83 c4 10             	add    $0x10,%esp
f012c801:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c804:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c807:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c80c:	77 17                	ja     f012c825 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c80e:	83 ec 04             	sub    $0x4,%esp
f012c811:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c816:	68 8b 10 00 00       	push   $0x108b
f012c81b:	68 3a a2 13 f0       	push   $0xf013a23a
f012c820:	e8 81 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f012c825:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c82b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c82e:	74 17                	je     f012c847 <test_krealloc+0x1a82>
			panic(
f012c830:	83 ec 04             	sub    $0x4,%esp
f012c833:	68 d4 b8 13 f0       	push   $0xf013b8d4
f012c838:	68 8e 10 00 00       	push   $0x108e
f012c83d:	68 3a a2 13 f0       	push   $0xf013a23a
f012c842:	e8 5f 39 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012c847:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c84a:	e8 7b f5 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c84f:	29 c3                	sub    %eax,%ebx
f012c851:	89 d8                	mov    %ebx,%eax
f012c853:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c858:	74 17                	je     f012c871 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012c85a:	83 ec 04             	sub    $0x4,%esp
f012c85d:	68 50 b9 13 f0       	push   $0xf013b950
f012c862:	68 91 10 00 00       	push   $0x1091
f012c867:	68 3a a2 13 f0       	push   $0xf013a23a
f012c86c:	e8 35 39 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012c871:	e8 54 f5 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c876:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012c879:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c87f:	83 ec 08             	sub    $0x8,%esp
f012c882:	68 00 fc 3f 01       	push   $0x13ffc00
f012c887:	50                   	push   %eax
f012c888:	e8 05 ac fd ff       	call   f0107492 <krealloc>
f012c88d:	83 c4 10             	add    $0x10,%esp
f012c890:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c893:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c896:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c89b:	77 17                	ja     f012c8b4 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c89d:	83 ec 04             	sub    $0x4,%esp
f012c8a0:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012c8a5:	68 98 10 00 00       	push   $0x1098
f012c8aa:	68 3a a2 13 f0       	push   $0xf013a23a
f012c8af:	e8 f2 38 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012c8b4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c8ba:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c8bd:	75 17                	jne    f012c8d6 <test_krealloc+0x1b11>
			panic(
f012c8bf:	83 ec 04             	sub    $0x4,%esp
f012c8c2:	68 c8 b9 13 f0       	push   $0xf013b9c8
f012c8c7:	68 9b 10 00 00       	push   $0x109b
f012c8cc:	68 3a a2 13 f0       	push   $0xf013a23a
f012c8d1:	e8 d0 38 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012c8d6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012c8dd:	10 00 00 
f012c8e0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012c8e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c8eb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012c8f1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012c8f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8fc:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012c902:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012c908:	29 d0                	sub    %edx,%eax
f012c90a:	89 c1                	mov    %eax,%ecx
f012c90c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012c913:	10 00 00 
f012c916:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c91b:	0f b6 d0             	movzbl %al,%edx
f012c91e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c924:	01 d0                	add    %edx,%eax
f012c926:	48                   	dec    %eax
f012c927:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012c92d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c933:	ba 00 00 00 00       	mov    $0x0,%edx
f012c938:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012c93e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c944:	29 d0                	sub    %edx,%eax
f012c946:	01 c1                	add    %eax,%ecx
f012c948:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012c94f:	10 00 00 
f012c952:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c957:	0f b6 c0             	movzbl %al,%eax
f012c95a:	c1 e0 04             	shl    $0x4,%eax
f012c95d:	89 c2                	mov    %eax,%edx
f012c95f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c965:	01 d0                	add    %edx,%eax
f012c967:	48                   	dec    %eax
f012c968:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012c96e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c974:	ba 00 00 00 00       	mov    $0x0,%edx
f012c979:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012c97f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c985:	29 d0                	sub    %edx,%eax
f012c987:	01 c8                	add    %ecx,%eax
f012c989:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012c98f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c992:	39 c2                	cmp    %eax,%edx
f012c994:	74 17                	je     f012c9ad <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012c996:	83 ec 04             	sub    $0x4,%esp
f012c999:	68 4c ba 13 f0       	push   $0xf013ba4c
f012c99e:	68 9d 10 00 00       	push   $0x109d
f012c9a3:	68 3a a2 13 f0       	push   $0xf013a23a
f012c9a8:	e8 f9 37 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012c9ad:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c9b0:	e8 15 f4 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012c9b5:	29 c3                	sub    %eax,%ebx
f012c9b7:	89 d8                	mov    %ebx,%eax
f012c9b9:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012c9be:	74 17                	je     f012c9d7 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012c9c0:	83 ec 04             	sub    $0x4,%esp
f012c9c3:	68 50 b9 13 f0       	push   $0xf013b950
f012c9c8:	68 a0 10 00 00       	push   $0x10a0
f012c9cd:	68 3a a2 13 f0       	push   $0xf013a23a
f012c9d2:	e8 cf 37 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012c9d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c9da:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c9e0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c9e6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012c9ec:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012c9f3:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9f6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012c9fd:	eb 21                	jmp    f012ca20 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012c9ff:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ca05:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012ca08:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ca0e:	01 c8                	add    %ecx,%eax
f012ca10:	8a 00                	mov    (%eax),%al
f012ca12:	0f be c0             	movsbl %al,%eax
f012ca15:	01 d0                	add    %edx,%eax
f012ca17:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ca1d:	ff 45 d8             	incl   -0x28(%ebp)
f012ca20:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ca26:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ca29:	7d d4                	jge    f012c9ff <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ca2b:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012ca31:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ca37:	42                   	inc    %edx
f012ca38:	01 d2                	add    %edx,%edx
f012ca3a:	39 d0                	cmp    %edx,%eax
f012ca3c:	74 17                	je     f012ca55 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012ca3e:	83 ec 04             	sub    $0x4,%esp
f012ca41:	68 80 ba 13 f0       	push   $0xf013ba80
f012ca46:	68 ae 10 00 00       	push   $0x10ae
f012ca4b:	68 3a a2 13 f0       	push   $0xf013a23a
f012ca50:	e8 51 37 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ca55:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ca5b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012ca61:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012ca68:	00 00 00 
		sums[1] = 0;
f012ca6b:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012ca72:	00 00 00 
		sums[2] = 0;
f012ca75:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012ca7c:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ca7f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ca86:	eb 70                	jmp    f012caf8 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012ca88:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ca8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ca91:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ca98:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca9e:	01 c8                	add    %ecx,%eax
f012caa0:	8a 00                	mov    (%eax),%al
f012caa2:	0f be c0             	movsbl %al,%eax
f012caa5:	01 d0                	add    %edx,%eax
f012caa7:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012caad:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012cab3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012cab6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cabd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cac3:	01 c8                	add    %ecx,%eax
f012cac5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cac9:	98                   	cwtl   
f012caca:	01 d0                	add    %edx,%eax
f012cacc:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012cad2:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cad8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012cadb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cae2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cae8:	01 c8                	add    %ecx,%eax
f012caea:	8b 40 04             	mov    0x4(%eax),%eax
f012caed:	01 d0                	add    %edx,%eax
f012caef:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012caf5:	ff 45 d8             	incl   -0x28(%ebp)
f012caf8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cafe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cb01:	7d 85                	jge    f012ca88 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012cb03:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012cb09:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cb0f:	8d 50 01             	lea    0x1(%eax),%edx
f012cb12:	89 d0                	mov    %edx,%eax
f012cb14:	01 c0                	add    %eax,%eax
f012cb16:	01 d0                	add    %edx,%eax
f012cb18:	01 c0                	add    %eax,%eax
f012cb1a:	01 d0                	add    %edx,%eax
f012cb1c:	39 c1                	cmp    %eax,%ecx
f012cb1e:	75 3a                	jne    f012cb5a <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012cb20:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012cb26:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cb2c:	8d 50 01             	lea    0x1(%eax),%edx
f012cb2f:	89 d0                	mov    %edx,%eax
f012cb31:	01 c0                	add    %eax,%eax
f012cb33:	01 d0                	add    %edx,%eax
f012cb35:	01 c0                	add    %eax,%eax
f012cb37:	01 d0                	add    %edx,%eax
f012cb39:	39 c1                	cmp    %eax,%ecx
f012cb3b:	75 1d                	jne    f012cb5a <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012cb3d:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012cb43:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cb49:	8d 50 01             	lea    0x1(%eax),%edx
f012cb4c:	89 d0                	mov    %edx,%eax
f012cb4e:	01 c0                	add    %eax,%eax
f012cb50:	01 d0                	add    %edx,%eax
f012cb52:	01 c0                	add    %eax,%eax
f012cb54:	01 d0                	add    %edx,%eax
f012cb56:	39 c1                	cmp    %eax,%ecx
f012cb58:	74 17                	je     f012cb71 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012cb5a:	83 ec 04             	sub    $0x4,%esp
f012cb5d:	68 80 ba 13 f0       	push   $0xf013ba80
f012cb62:	68 c0 10 00 00       	push   $0x10c0
f012cb67:	68 3a a2 13 f0       	push   $0xf013a23a
f012cb6c:	e8 35 36 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cb71:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb77:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012cb7d:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cb84:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cb87:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012cb8e:	eb 24                	jmp    f012cbb4 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012cb90:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cb96:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012cb99:	01 c0                	add    %eax,%eax
f012cb9b:	89 c1                	mov    %eax,%ecx
f012cb9d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cba3:	01 c8                	add    %ecx,%eax
f012cba5:	66 8b 00             	mov    (%eax),%ax
f012cba8:	98                   	cwtl   
f012cba9:	01 d0                	add    %edx,%eax
f012cbab:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cbb1:	ff 45 d8             	incl   -0x28(%ebp)
f012cbb4:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cbba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cbbd:	7d d1                	jge    f012cb90 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012cbbf:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cbc5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cbcb:	8d 48 01             	lea    0x1(%eax),%ecx
f012cbce:	89 c8                	mov    %ecx,%eax
f012cbd0:	c1 e0 02             	shl    $0x2,%eax
f012cbd3:	01 c8                	add    %ecx,%eax
f012cbd5:	39 c2                	cmp    %eax,%edx
f012cbd7:	74 17                	je     f012cbf0 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012cbd9:	83 ec 04             	sub    $0x4,%esp
f012cbdc:	68 80 ba 13 f0       	push   $0xf013ba80
f012cbe1:	68 ca 10 00 00       	push   $0x10ca
f012cbe6:	68 3a a2 13 f0       	push   $0xf013a23a
f012cbeb:	e8 b6 35 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012cbf0:	e8 d5 f1 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012cbf5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cbf8:	e8 8f 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cbfd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012cc03:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc09:	83 ec 08             	sub    $0x8,%esp
f012cc0c:	6a 00                	push   $0x0
f012cc0e:	50                   	push   %eax
f012cc0f:	e8 7e a8 fd ff       	call   f0107492 <krealloc>
f012cc14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc17:	e8 70 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cc1c:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cc22:	74 17                	je     f012cc3b <test_krealloc+0x1e76>
			panic(
f012cc24:	83 ec 04             	sub    $0x4,%esp
f012cc27:	68 54 a2 13 f0       	push   $0xf013a254
f012cc2c:	68 d2 10 00 00       	push   $0x10d2
f012cc31:	68 3a a2 13 f0       	push   $0xf013a23a
f012cc36:	e8 6b 35 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012cc3b:	e8 8a f1 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012cc40:	89 c2                	mov    %eax,%edx
f012cc42:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc45:	29 c2                	sub    %eax,%edx
f012cc47:	89 d0                	mov    %edx,%eax
f012cc49:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012cc4e:	74 17                	je     f012cc67 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012cc50:	83 ec 04             	sub    $0x4,%esp
f012cc53:	68 10 b7 13 f0       	push   $0xf013b710
f012cc58:	68 d4 10 00 00       	push   $0x10d4
f012cc5d:	68 3a a2 13 f0       	push   $0xf013a23a
f012cc62:	e8 3f 35 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012cc67:	e8 5e f1 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012cc6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cc6f:	e8 18 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cc74:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012cc7a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cc80:	83 ec 0c             	sub    $0xc,%esp
f012cc83:	50                   	push   %eax
f012cc84:	e8 6d a7 fd ff       	call   f01073f6 <kfree>
f012cc89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc8c:	e8 fb 6f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cc91:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cc97:	74 17                	je     f012ccb0 <test_krealloc+0x1eeb>
			panic(
f012cc99:	83 ec 04             	sub    $0x4,%esp
f012cc9c:	68 54 a2 13 f0       	push   $0xf013a254
f012cca1:	68 dc 10 00 00       	push   $0x10dc
f012cca6:	68 3a a2 13 f0       	push   $0xf013a23a
f012ccab:	e8 f6 34 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012ccb0:	e8 15 f1 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ccb5:	89 c2                	mov    %eax,%edx
f012ccb7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ccba:	29 c2                	sub    %eax,%edx
f012ccbc:	89 d0                	mov    %edx,%eax
f012ccbe:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012ccc3:	74 17                	je     f012ccdc <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012ccc5:	83 ec 04             	sub    $0x4,%esp
f012ccc8:	68 10 b7 13 f0       	push   $0xf013b710
f012cccd:	68 de 10 00 00       	push   $0x10de
f012ccd2:	68 3a a2 13 f0       	push   $0xf013a23a
f012ccd7:	e8 ca 34 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccdc:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012cce3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012ccea:	eb 48                	jmp    f012cd34 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ccec:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012ccef:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012ccf4:	83 ec 04             	sub    $0x4,%esp
f012ccf7:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012ccfd:	51                   	push   %ecx
f012ccfe:	52                   	push   %edx
f012ccff:	50                   	push   %eax
f012cd00:	e8 64 9c fd ff       	call   f0106969 <get_page_table>
f012cd05:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cd08:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012cd0e:	85 c0                	test   %eax,%eax
f012cd10:	75 17                	jne    f012cd29 <test_krealloc+0x1f64>
					panic(
f012cd12:	83 ec 04             	sub    $0x4,%esp
f012cd15:	68 3c ab 13 f0       	push   $0xf013ab3c
f012cd1a:	68 eb 10 00 00       	push   $0x10eb
f012cd1f:	68 3a a2 13 f0       	push   $0xf013a23a
f012cd24:	e8 7d 34 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cd29:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012cd30:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012cd34:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012cd38:	78 b2                	js     f012ccec <test_krealloc+0x1f27>
f012cd3a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012cd3e:	7f 09                	jg     f012cd49 <test_krealloc+0x1f84>
f012cd40:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012cd47:	76 a3                	jbe    f012ccec <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012cd49:	83 ec 0c             	sub    $0xc,%esp
f012cd4c:	68 1e a4 13 f0       	push   $0xf013a41e
f012cd51:	e8 d7 3e fd ff       	call   f0100c2d <cprintf>
f012cd56:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012cd59:	83 ec 0c             	sub    $0xc,%esp
f012cd5c:	68 ac ba 13 f0       	push   $0xf013baac
f012cd61:	e8 c7 3e fd ff       	call   f0100c2d <cprintf>
f012cd66:	83 c4 10             	add    $0x10,%esp
	return 0;
f012cd69:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012cd6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012cd71:	5b                   	pop    %ebx
f012cd72:	5f                   	pop    %edi
f012cd73:	5d                   	pop    %ebp
f012cd74:	c3                   	ret    

f012cd75 <test_krealloc_BF>:


int test_krealloc_BF() {
f012cd75:	55                   	push   %ebp
f012cd76:	89 e5                	mov    %esp,%ebp
f012cd78:	57                   	push   %edi
f012cd79:	53                   	push   %ebx
f012cd7a:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012cd80:	83 ec 0c             	sub    $0xc,%esp
f012cd83:	68 7c a1 13 f0       	push   $0xf013a17c
f012cd88:	e8 a0 3e fd ff       	call   f0100c2d <cprintf>
f012cd8d:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012cd90:	83 ec 0c             	sub    $0xc,%esp
f012cd93:	68 ac a1 13 f0       	push   $0xf013a1ac
f012cd98:	e8 90 3e fd ff       	call   f0100c2d <cprintf>
f012cd9d:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012cda0:	83 ec 0c             	sub    $0xc,%esp
f012cda3:	68 7c a1 13 f0       	push   $0xf013a17c
f012cda8:	e8 80 3e fd ff       	call   f0100c2d <cprintf>
f012cdad:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012cdb0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012cdb4:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012cdb8:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012cdbe:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012cdc4:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012cdcb:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012cdd2:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012cdd8:	b9 14 00 00 00       	mov    $0x14,%ecx
f012cddd:	b8 00 00 00 00       	mov    $0x0,%eax
f012cde2:	89 d7                	mov    %edx,%edi
f012cde4:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012cde6:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012cded:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012cdf3:	b9 14 00 00 00       	mov    $0x14,%ecx
f012cdf8:	b8 00 00 00 00       	mov    $0x0,%eax
f012cdfd:	89 d7                	mov    %edx,%edi
f012cdff:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012ce01:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012ce07:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ce0c:	b8 00 00 00 00       	mov    $0x0,%eax
f012ce11:	89 d7                	mov    %edx,%edi
f012ce13:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ce15:	e8 b0 ef fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ce1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012ce1d:	83 ec 08             	sub    $0x8,%esp
f012ce20:	68 00 fc 0f 00       	push   $0xffc00
f012ce25:	6a 00                	push   $0x0
f012ce27:	e8 66 a6 fd ff       	call   f0107492 <krealloc>
f012ce2c:	83 c4 10             	add    $0x10,%esp
f012ce2f:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012ce35:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ce3b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce40:	77 17                	ja     f012ce59 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce42:	83 ec 04             	sub    $0x4,%esp
f012ce45:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012ce4a:	68 1a 11 00 00       	push   $0x111a
f012ce4f:	68 3a a2 13 f0       	push   $0xf013a23a
f012ce54:	e8 4d 33 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012ce59:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ce5f:	89 c1                	mov    %eax,%ecx
f012ce61:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012ce68:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012ce6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ce70:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012ce73:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ce76:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce7b:	f7 75 b4             	divl   -0x4c(%ebp)
f012ce7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ce81:	29 d0                	sub    %edx,%eax
f012ce83:	89 c3                	mov    %eax,%ebx
f012ce85:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012ce8c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012ce91:	0f b6 d0             	movzbl %al,%edx
f012ce94:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012ce97:	01 d0                	add    %edx,%eax
f012ce99:	48                   	dec    %eax
f012ce9a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012ce9d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012cea0:	ba 00 00 00 00       	mov    $0x0,%edx
f012cea5:	f7 75 ac             	divl   -0x54(%ebp)
f012cea8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012ceab:	29 d0                	sub    %edx,%eax
f012cead:	01 c3                	add    %eax,%ebx
f012ceaf:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012ceb6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012cebb:	0f b6 c0             	movzbl %al,%eax
f012cebe:	c1 e0 04             	shl    $0x4,%eax
f012cec1:	89 c2                	mov    %eax,%edx
f012cec3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012cec6:	01 d0                	add    %edx,%eax
f012cec8:	48                   	dec    %eax
f012cec9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012cecc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012cecf:	ba 00 00 00 00       	mov    $0x0,%edx
f012ced4:	f7 75 a4             	divl   -0x5c(%ebp)
f012ced7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012ceda:	29 d0                	sub    %edx,%eax
f012cedc:	01 d8                	add    %ebx,%eax
f012cede:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012cee3:	39 c1                	cmp    %eax,%ecx
f012cee5:	74 17                	je     f012cefe <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012cee7:	83 ec 04             	sub    $0x4,%esp
f012ceea:	68 1c b5 13 f0       	push   $0xf013b51c
f012ceef:	68 1c 11 00 00       	push   $0x111c
f012cef4:	68 3a a2 13 f0       	push   $0xf013a23a
f012cef9:	e8 a8 32 fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012cefe:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf01:	e8 c4 ee fd ff       	call   f010bdca <sys_calculate_free_frames>
f012cf06:	29 c3                	sub    %eax,%ebx
f012cf08:	89 d8                	mov    %ebx,%eax
f012cf0a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cf0f:	74 17                	je     f012cf28 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012cf11:	83 ec 04             	sub    $0x4,%esp
f012cf14:	68 4e b5 13 f0       	push   $0xf013b54e
f012cf19:	68 1f 11 00 00       	push   $0x111f
f012cf1e:	68 3a a2 13 f0       	push   $0xf013a23a
f012cf23:	e8 7e 32 fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012cf28:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012cf2f:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012cf32:	e8 93 ee fd ff       	call   f010bdca <sys_calculate_free_frames>
f012cf37:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012cf3a:	83 ec 08             	sub    $0x8,%esp
f012cf3d:	68 00 fc 0f 00       	push   $0xffc00
f012cf42:	6a 00                	push   $0x0
f012cf44:	e8 49 a5 fd ff       	call   f0107492 <krealloc>
f012cf49:	83 c4 10             	add    $0x10,%esp
f012cf4c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012cf52:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012cf58:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012cf5d:	77 17                	ja     f012cf76 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf5f:	83 ec 04             	sub    $0x4,%esp
f012cf62:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012cf67:	68 27 11 00 00       	push   $0x1127
f012cf6c:	68 3a a2 13 f0       	push   $0xf013a23a
f012cf71:	e8 30 32 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012cf76:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012cf7c:	89 c1                	mov    %eax,%ecx
f012cf7e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012cf85:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012cf88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cf8d:	89 45 98             	mov    %eax,-0x68(%ebp)
f012cf90:	8b 45 98             	mov    -0x68(%ebp),%eax
f012cf93:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf98:	f7 75 9c             	divl   -0x64(%ebp)
f012cf9b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012cf9e:	29 d0                	sub    %edx,%eax
f012cfa0:	89 c3                	mov    %eax,%ebx
f012cfa2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012cfa9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012cfae:	0f b6 d0             	movzbl %al,%edx
f012cfb1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012cfb4:	01 d0                	add    %edx,%eax
f012cfb6:	48                   	dec    %eax
f012cfb7:	89 45 90             	mov    %eax,-0x70(%ebp)
f012cfba:	8b 45 90             	mov    -0x70(%ebp),%eax
f012cfbd:	ba 00 00 00 00       	mov    $0x0,%edx
f012cfc2:	f7 75 94             	divl   -0x6c(%ebp)
f012cfc5:	8b 45 90             	mov    -0x70(%ebp),%eax
f012cfc8:	29 d0                	sub    %edx,%eax
f012cfca:	01 c3                	add    %eax,%ebx
f012cfcc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012cfd3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012cfd8:	0f b6 c0             	movzbl %al,%eax
f012cfdb:	c1 e0 04             	shl    $0x4,%eax
f012cfde:	89 c2                	mov    %eax,%edx
f012cfe0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012cfe3:	01 d0                	add    %edx,%eax
f012cfe5:	48                   	dec    %eax
f012cfe6:	89 45 88             	mov    %eax,-0x78(%ebp)
f012cfe9:	8b 45 88             	mov    -0x78(%ebp),%eax
f012cfec:	ba 00 00 00 00       	mov    $0x0,%edx
f012cff1:	f7 75 8c             	divl   -0x74(%ebp)
f012cff4:	8b 45 88             	mov    -0x78(%ebp),%eax
f012cff7:	29 d0                	sub    %edx,%eax
f012cff9:	01 d8                	add    %ebx,%eax
f012cffb:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d000:	39 c1                	cmp    %eax,%ecx
f012d002:	74 17                	je     f012d01b <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d004:	83 ec 04             	sub    $0x4,%esp
f012d007:	68 1c b5 13 f0       	push   $0xf013b51c
f012d00c:	68 29 11 00 00       	push   $0x1129
f012d011:	68 3a a2 13 f0       	push   $0xf013a23a
f012d016:	e8 8b 31 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d01b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d01e:	e8 a7 ed fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d023:	29 c3                	sub    %eax,%ebx
f012d025:	89 d8                	mov    %ebx,%eax
f012d027:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d02c:	74 17                	je     f012d045 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d02e:	83 ec 04             	sub    $0x4,%esp
f012d031:	68 4e b5 13 f0       	push   $0xf013b54e
f012d036:	68 2b 11 00 00       	push   $0x112b
f012d03b:	68 3a a2 13 f0       	push   $0xf013a23a
f012d040:	e8 61 31 fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d045:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d04c:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d04f:	e8 76 ed fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d054:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d057:	83 ec 08             	sub    $0x8,%esp
f012d05a:	68 00 fc 0f 00       	push   $0xffc00
f012d05f:	6a 00                	push   $0x0
f012d061:	e8 2c a4 fd ff       	call   f0107492 <krealloc>
f012d066:	83 c4 10             	add    $0x10,%esp
f012d069:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d06f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d075:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d07a:	77 17                	ja     f012d093 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d07c:	83 ec 04             	sub    $0x4,%esp
f012d07f:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012d084:	68 33 11 00 00       	push   $0x1133
f012d089:	68 3a a2 13 f0       	push   $0xf013a23a
f012d08e:	e8 13 31 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d093:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d099:	89 c1                	mov    %eax,%ecx
f012d09b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d0a2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d0a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d0aa:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d0ad:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d0b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0b5:	f7 75 84             	divl   -0x7c(%ebp)
f012d0b8:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d0bb:	29 d0                	sub    %edx,%eax
f012d0bd:	89 c3                	mov    %eax,%ebx
f012d0bf:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012d0c6:	10 00 00 
f012d0c9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d0ce:	0f b6 d0             	movzbl %al,%edx
f012d0d1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012d0d7:	01 d0                	add    %edx,%eax
f012d0d9:	48                   	dec    %eax
f012d0da:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012d0e0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d0e6:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0eb:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012d0f1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d0f7:	29 d0                	sub    %edx,%eax
f012d0f9:	01 c3                	add    %eax,%ebx
f012d0fb:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012d102:	10 00 00 
f012d105:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d10a:	0f b6 c0             	movzbl %al,%eax
f012d10d:	c1 e0 04             	shl    $0x4,%eax
f012d110:	89 c2                	mov    %eax,%edx
f012d112:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012d118:	01 d0                	add    %edx,%eax
f012d11a:	48                   	dec    %eax
f012d11b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012d121:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d127:	ba 00 00 00 00       	mov    $0x0,%edx
f012d12c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012d132:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d138:	29 d0                	sub    %edx,%eax
f012d13a:	01 d8                	add    %ebx,%eax
f012d13c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012d141:	39 c1                	cmp    %eax,%ecx
f012d143:	74 17                	je     f012d15c <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012d145:	83 ec 04             	sub    $0x4,%esp
f012d148:	68 1c b5 13 f0       	push   $0xf013b51c
f012d14d:	68 35 11 00 00       	push   $0x1135
f012d152:	68 3a a2 13 f0       	push   $0xf013a23a
f012d157:	e8 4a 30 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d15c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d15f:	e8 66 ec fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d164:	29 c3                	sub    %eax,%ebx
f012d166:	89 d8                	mov    %ebx,%eax
f012d168:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d16d:	74 17                	je     f012d186 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012d16f:	83 ec 04             	sub    $0x4,%esp
f012d172:	68 4e b5 13 f0       	push   $0xf013b54e
f012d177:	68 37 11 00 00       	push   $0x1137
f012d17c:	68 3a a2 13 f0       	push   $0xf013a23a
f012d181:	e8 20 30 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d186:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012d18d:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d190:	e8 35 ec fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d195:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012d198:	83 ec 08             	sub    $0x8,%esp
f012d19b:	68 00 fc 0f 00       	push   $0xffc00
f012d1a0:	6a 00                	push   $0x0
f012d1a2:	e8 eb a2 fd ff       	call   f0107492 <krealloc>
f012d1a7:	83 c4 10             	add    $0x10,%esp
f012d1aa:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012d1b0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d1b6:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012d1bb:	77 17                	ja     f012d1d4 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1bd:	83 ec 04             	sub    $0x4,%esp
f012d1c0:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012d1c5:	68 3e 11 00 00       	push   $0x113e
f012d1ca:	68 3a a2 13 f0       	push   $0xf013a23a
f012d1cf:	e8 d2 2f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012d1d4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d1da:	89 c1                	mov    %eax,%ecx
f012d1dc:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012d1e3:	10 00 00 
f012d1e6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012d1ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d1f1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012d1f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d1fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d202:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012d208:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d20e:	29 d0                	sub    %edx,%eax
f012d210:	89 c3                	mov    %eax,%ebx
f012d212:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012d219:	10 00 00 
f012d21c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d221:	0f b6 d0             	movzbl %al,%edx
f012d224:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012d22a:	01 d0                	add    %edx,%eax
f012d22c:	48                   	dec    %eax
f012d22d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012d233:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d239:	ba 00 00 00 00       	mov    $0x0,%edx
f012d23e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012d244:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d24a:	29 d0                	sub    %edx,%eax
f012d24c:	01 c3                	add    %eax,%ebx
f012d24e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012d255:	10 00 00 
f012d258:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d25d:	0f b6 c0             	movzbl %al,%eax
f012d260:	c1 e0 04             	shl    $0x4,%eax
f012d263:	89 c2                	mov    %eax,%edx
f012d265:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012d26b:	01 d0                	add    %edx,%eax
f012d26d:	48                   	dec    %eax
f012d26e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012d274:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d27a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d27f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012d285:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d28b:	29 d0                	sub    %edx,%eax
f012d28d:	01 d8                	add    %ebx,%eax
f012d28f:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012d294:	39 c1                	cmp    %eax,%ecx
f012d296:	74 17                	je     f012d2af <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012d298:	83 ec 04             	sub    $0x4,%esp
f012d29b:	68 1c b5 13 f0       	push   $0xf013b51c
f012d2a0:	68 40 11 00 00       	push   $0x1140
f012d2a5:	68 3a a2 13 f0       	push   $0xf013a23a
f012d2aa:	e8 f7 2e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d2af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2b2:	e8 13 eb fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d2b7:	29 c3                	sub    %eax,%ebx
f012d2b9:	89 d8                	mov    %ebx,%eax
f012d2bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d2c0:	74 17                	je     f012d2d9 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012d2c2:	83 ec 04             	sub    $0x4,%esp
f012d2c5:	68 4e b5 13 f0       	push   $0xf013b54e
f012d2ca:	68 42 11 00 00       	push   $0x1142
f012d2cf:	68 3a a2 13 f0       	push   $0xf013a23a
f012d2d4:	e8 cd 2e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d2d9:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012d2e0:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d2e3:	e8 e2 ea fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d2e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012d2eb:	83 ec 08             	sub    $0x8,%esp
f012d2ee:	68 00 fc 1f 00       	push   $0x1ffc00
f012d2f3:	6a 00                	push   $0x0
f012d2f5:	e8 98 a1 fd ff       	call   f0107492 <krealloc>
f012d2fa:	83 c4 10             	add    $0x10,%esp
f012d2fd:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012d303:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d309:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012d30e:	77 17                	ja     f012d327 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d310:	83 ec 04             	sub    $0x4,%esp
f012d313:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012d318:	68 49 11 00 00       	push   $0x1149
f012d31d:	68 3a a2 13 f0       	push   $0xf013a23a
f012d322:	e8 7f 2e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012d327:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d32d:	89 c1                	mov    %eax,%ecx
f012d32f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012d336:	10 00 00 
f012d339:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012d33f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d344:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012d34a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d350:	ba 00 00 00 00       	mov    $0x0,%edx
f012d355:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012d35b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d361:	29 d0                	sub    %edx,%eax
f012d363:	89 c3                	mov    %eax,%ebx
f012d365:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012d36c:	10 00 00 
f012d36f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d374:	0f b6 d0             	movzbl %al,%edx
f012d377:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012d37d:	01 d0                	add    %edx,%eax
f012d37f:	48                   	dec    %eax
f012d380:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012d386:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d38c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d391:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012d397:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d39d:	29 d0                	sub    %edx,%eax
f012d39f:	01 c3                	add    %eax,%ebx
f012d3a1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012d3a8:	10 00 00 
f012d3ab:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d3b0:	0f b6 c0             	movzbl %al,%eax
f012d3b3:	c1 e0 04             	shl    $0x4,%eax
f012d3b6:	89 c2                	mov    %eax,%edx
f012d3b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012d3be:	01 d0                	add    %edx,%eax
f012d3c0:	48                   	dec    %eax
f012d3c1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012d3c7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d3cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d3d2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012d3d8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d3de:	29 d0                	sub    %edx,%eax
f012d3e0:	01 d8                	add    %ebx,%eax
f012d3e2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012d3e7:	39 c1                	cmp    %eax,%ecx
f012d3e9:	74 17                	je     f012d402 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012d3eb:	83 ec 04             	sub    $0x4,%esp
f012d3ee:	68 1c b5 13 f0       	push   $0xf013b51c
f012d3f3:	68 4b 11 00 00       	push   $0x114b
f012d3f8:	68 3a a2 13 f0       	push   $0xf013a23a
f012d3fd:	e8 a4 2d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d402:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d405:	e8 c0 e9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d40a:	29 c3                	sub    %eax,%ebx
f012d40c:	89 d8                	mov    %ebx,%eax
f012d40e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d413:	74 17                	je     f012d42c <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012d415:	83 ec 04             	sub    $0x4,%esp
f012d418:	68 4e b5 13 f0       	push   $0xf013b54e
f012d41d:	68 4d 11 00 00       	push   $0x114d
f012d422:	68 3a a2 13 f0       	push   $0xf013a23a
f012d427:	e8 7a 2d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d42c:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012d433:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d436:	e8 8f e9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d43b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012d43e:	83 ec 08             	sub    $0x8,%esp
f012d441:	68 00 fc 1f 00       	push   $0x1ffc00
f012d446:	6a 00                	push   $0x0
f012d448:	e8 45 a0 fd ff       	call   f0107492 <krealloc>
f012d44d:	83 c4 10             	add    $0x10,%esp
f012d450:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012d456:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d45c:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012d461:	77 17                	ja     f012d47a <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d463:	83 ec 04             	sub    $0x4,%esp
f012d466:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012d46b:	68 54 11 00 00       	push   $0x1154
f012d470:	68 3a a2 13 f0       	push   $0xf013a23a
f012d475:	e8 2c 2d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012d47a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d480:	89 c1                	mov    %eax,%ecx
f012d482:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012d489:	10 00 00 
f012d48c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012d492:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d497:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012d49d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d4a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4a8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012d4ae:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d4b4:	29 d0                	sub    %edx,%eax
f012d4b6:	89 c3                	mov    %eax,%ebx
f012d4b8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012d4bf:	10 00 00 
f012d4c2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d4c7:	0f b6 d0             	movzbl %al,%edx
f012d4ca:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012d4d0:	01 d0                	add    %edx,%eax
f012d4d2:	48                   	dec    %eax
f012d4d3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012d4d9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d4df:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4e4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012d4ea:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d4f0:	29 d0                	sub    %edx,%eax
f012d4f2:	01 c3                	add    %eax,%ebx
f012d4f4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012d4fb:	10 00 00 
f012d4fe:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d503:	0f b6 c0             	movzbl %al,%eax
f012d506:	c1 e0 04             	shl    $0x4,%eax
f012d509:	89 c2                	mov    %eax,%edx
f012d50b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d511:	01 d0                	add    %edx,%eax
f012d513:	48                   	dec    %eax
f012d514:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012d51a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d520:	ba 00 00 00 00       	mov    $0x0,%edx
f012d525:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012d52b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d531:	29 d0                	sub    %edx,%eax
f012d533:	01 d8                	add    %ebx,%eax
f012d535:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012d53a:	39 c1                	cmp    %eax,%ecx
f012d53c:	74 17                	je     f012d555 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012d53e:	83 ec 04             	sub    $0x4,%esp
f012d541:	68 1c b5 13 f0       	push   $0xf013b51c
f012d546:	68 56 11 00 00       	push   $0x1156
f012d54b:	68 3a a2 13 f0       	push   $0xf013a23a
f012d550:	e8 51 2c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d555:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d558:	e8 6d e8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d55d:	29 c3                	sub    %eax,%ebx
f012d55f:	89 d8                	mov    %ebx,%eax
f012d561:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d566:	74 17                	je     f012d57f <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012d568:	83 ec 04             	sub    $0x4,%esp
f012d56b:	68 4e b5 13 f0       	push   $0xf013b54e
f012d570:	68 58 11 00 00       	push   $0x1158
f012d575:	68 3a a2 13 f0       	push   $0xf013a23a
f012d57a:	e8 27 2c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d57f:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012d586:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012d589:	e8 3c e8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d58e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012d591:	83 ec 08             	sub    $0x8,%esp
f012d594:	68 00 fc 2f 00       	push   $0x2ffc00
f012d599:	6a 00                	push   $0x0
f012d59b:	e8 f2 9e fd ff       	call   f0107492 <krealloc>
f012d5a0:	83 c4 10             	add    $0x10,%esp
f012d5a3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012d5a9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d5af:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012d5b4:	77 17                	ja     f012d5cd <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5b6:	83 ec 04             	sub    $0x4,%esp
f012d5b9:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012d5be:	68 5f 11 00 00       	push   $0x115f
f012d5c3:	68 3a a2 13 f0       	push   $0xf013a23a
f012d5c8:	e8 d9 2b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012d5cd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d5d3:	89 c1                	mov    %eax,%ecx
f012d5d5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012d5dc:	10 00 00 
f012d5df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d5e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d5ea:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012d5f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d5f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5fb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012d601:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d607:	29 d0                	sub    %edx,%eax
f012d609:	89 c3                	mov    %eax,%ebx
f012d60b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012d612:	10 00 00 
f012d615:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d61a:	0f b6 d0             	movzbl %al,%edx
f012d61d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012d623:	01 d0                	add    %edx,%eax
f012d625:	48                   	dec    %eax
f012d626:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012d62c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d632:	ba 00 00 00 00       	mov    $0x0,%edx
f012d637:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012d63d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d643:	29 d0                	sub    %edx,%eax
f012d645:	01 c3                	add    %eax,%ebx
f012d647:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d64e:	10 00 00 
f012d651:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d656:	0f b6 c0             	movzbl %al,%eax
f012d659:	c1 e0 04             	shl    $0x4,%eax
f012d65c:	89 c2                	mov    %eax,%edx
f012d65e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d664:	01 d0                	add    %edx,%eax
f012d666:	48                   	dec    %eax
f012d667:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d66d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d673:	ba 00 00 00 00       	mov    $0x0,%edx
f012d678:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d67e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d684:	29 d0                	sub    %edx,%eax
f012d686:	01 d8                	add    %ebx,%eax
f012d688:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012d68d:	39 c1                	cmp    %eax,%ecx
f012d68f:	74 17                	je     f012d6a8 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012d691:	83 ec 04             	sub    $0x4,%esp
f012d694:	68 1c b5 13 f0       	push   $0xf013b51c
f012d699:	68 61 11 00 00       	push   $0x1161
f012d69e:	68 3a a2 13 f0       	push   $0xf013a23a
f012d6a3:	e8 fe 2a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012d6a8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d6ab:	e8 1a e7 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d6b0:	29 c3                	sub    %eax,%ebx
f012d6b2:	89 d8                	mov    %ebx,%eax
f012d6b4:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d6b9:	74 17                	je     f012d6d2 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012d6bb:	83 ec 04             	sub    $0x4,%esp
f012d6be:	68 84 a6 13 f0       	push   $0xf013a684
f012d6c3:	68 63 11 00 00       	push   $0x1163
f012d6c8:	68 3a a2 13 f0       	push   $0xf013a23a
f012d6cd:	e8 d4 2a fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012d6d2:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012d6d9:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012d6dc:	e8 e9 e6 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d6e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012d6e4:	83 ec 08             	sub    $0x8,%esp
f012d6e7:	68 00 fc 2f 00       	push   $0x2ffc00
f012d6ec:	6a 00                	push   $0x0
f012d6ee:	e8 9f 9d fd ff       	call   f0107492 <krealloc>
f012d6f3:	83 c4 10             	add    $0x10,%esp
f012d6f6:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012d6fc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d702:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012d707:	77 17                	ja     f012d720 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d709:	83 ec 04             	sub    $0x4,%esp
f012d70c:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012d711:	68 6a 11 00 00       	push   $0x116a
f012d716:	68 3a a2 13 f0       	push   $0xf013a23a
f012d71b:	e8 86 2a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012d720:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d726:	89 c1                	mov    %eax,%ecx
f012d728:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d72f:	10 00 00 
f012d732:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d738:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d73d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d743:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d749:	ba 00 00 00 00       	mov    $0x0,%edx
f012d74e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d754:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d75a:	29 d0                	sub    %edx,%eax
f012d75c:	89 c3                	mov    %eax,%ebx
f012d75e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d765:	10 00 00 
f012d768:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d76d:	0f b6 d0             	movzbl %al,%edx
f012d770:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d776:	01 d0                	add    %edx,%eax
f012d778:	48                   	dec    %eax
f012d779:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d77f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d785:	ba 00 00 00 00       	mov    $0x0,%edx
f012d78a:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d790:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d796:	29 d0                	sub    %edx,%eax
f012d798:	01 c3                	add    %eax,%ebx
f012d79a:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d7a1:	10 00 00 
f012d7a4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d7a9:	0f b6 c0             	movzbl %al,%eax
f012d7ac:	c1 e0 04             	shl    $0x4,%eax
f012d7af:	89 c2                	mov    %eax,%edx
f012d7b1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d7b7:	01 d0                	add    %edx,%eax
f012d7b9:	48                   	dec    %eax
f012d7ba:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d7c0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d7c6:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7cb:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d7d1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d7d7:	29 d0                	sub    %edx,%eax
f012d7d9:	01 d8                	add    %ebx,%eax
f012d7db:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012d7e0:	39 c1                	cmp    %eax,%ecx
f012d7e2:	74 17                	je     f012d7fb <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012d7e4:	83 ec 04             	sub    $0x4,%esp
f012d7e7:	68 1c b5 13 f0       	push   $0xf013b51c
f012d7ec:	68 6c 11 00 00       	push   $0x116c
f012d7f1:	68 3a a2 13 f0       	push   $0xf013a23a
f012d7f6:	e8 ab 29 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012d7fb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d7fe:	e8 c7 e5 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d803:	29 c3                	sub    %eax,%ebx
f012d805:	89 d8                	mov    %ebx,%eax
f012d807:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d80c:	74 17                	je     f012d825 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012d80e:	83 ec 04             	sub    $0x4,%esp
f012d811:	68 4e b5 13 f0       	push   $0xf013b54e
f012d816:	68 6e 11 00 00       	push   $0x116e
f012d81b:	68 3a a2 13 f0       	push   $0xf013a23a
f012d820:	e8 81 29 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012d825:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012d82c:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012d82f:	e8 96 e5 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012d834:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012d837:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012d83e:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012d841:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d847:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012d84d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d853:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012d856:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012d858:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012d85e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d864:	01 c2                	add    %eax,%edx
f012d866:	8a 45 ce             	mov    -0x32(%ebp),%al
f012d869:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d86b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d871:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d877:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012d87e:	eb 11                	jmp    f012d891 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012d880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012d883:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d889:	01 d0                	add    %edx,%eax
f012d88b:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d88e:	ff 45 f4             	incl   -0xc(%ebp)
f012d891:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012d897:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d89a:	7d e4                	jge    f012d880 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012d89c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d8a2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012d8a8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8ae:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012d8b4:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d8ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d8c1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8c7:	01 d0                	add    %edx,%eax
f012d8c9:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012d8cf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d8d5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d8db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012d8e2:	eb 1b                	jmp    f012d8ff <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012d8e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d8e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d8ee:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8f4:	01 d0                	add    %edx,%eax
f012d8f6:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d8fc:	ff 45 f0             	incl   -0x10(%ebp)
f012d8ff:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012d905:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012d908:	7d da                	jge    f012d8e4 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d90a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d910:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d916:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012d91d:	eb 17                	jmp    f012d936 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012d91f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012d922:	01 c0                	add    %eax,%eax
f012d924:	89 c2                	mov    %eax,%edx
f012d926:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d92c:	01 d0                	add    %edx,%eax
f012d92e:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d933:	ff 45 ec             	incl   -0x14(%ebp)
f012d936:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012d93c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012d93f:	7d de                	jge    f012d91f <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012d941:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d947:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012d94d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d953:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012d958:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012d95e:	01 c0                	add    %eax,%eax
f012d960:	89 c2                	mov    %eax,%edx
f012d962:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d968:	01 d0                	add    %edx,%eax
f012d96a:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012d96f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d975:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d97b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d982:	eb 49                	jmp    f012d9cd <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012d984:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d987:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d98e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d994:	01 d0                	add    %edx,%eax
f012d996:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d999:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d99c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d9a3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9a9:	01 d0                	add    %edx,%eax
f012d9ab:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d9b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d9b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d9bb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9c1:	01 d0                	add    %edx,%eax
f012d9c3:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d9ca:	ff 45 e8             	incl   -0x18(%ebp)
f012d9cd:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d9d3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d9d6:	7d ac                	jge    f012d984 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d9d8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d9de:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d9e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9ea:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d9ed:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9f3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d9f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9ff:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012da06:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012da0c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012da13:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da19:	01 d0                	add    %edx,%eax
f012da1b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012da1e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012da24:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012da2b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da31:	01 d0                	add    %edx,%eax
f012da33:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012da39:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012da3f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012da46:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da4c:	01 d0                	add    %edx,%eax
f012da4e:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012da55:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012da5b:	8a 00                	mov    (%eax),%al
f012da5d:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012da60:	75 17                	jne    f012da79 <test_krealloc_BF+0xd04>
f012da62:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012da68:	89 c2                	mov    %eax,%edx
f012da6a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012da70:	01 d0                	add    %edx,%eax
f012da72:	8a 00                	mov    (%eax),%al
f012da74:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012da77:	74 17                	je     f012da90 <test_krealloc_BF+0xd1b>
			panic(
f012da79:	83 ec 04             	sub    $0x4,%esp
f012da7c:	68 6c b5 13 f0       	push   $0xf013b56c
f012da81:	68 b1 11 00 00       	push   $0x11b1
f012da86:	68 3a a2 13 f0       	push   $0xf013a23a
f012da8b:	e8 16 27 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012da90:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012da96:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012da9c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012daa2:	8a 00                	mov    (%eax),%al
f012daa4:	3c 02                	cmp    $0x2,%al
f012daa6:	75 16                	jne    f012dabe <test_krealloc_BF+0xd49>
f012daa8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012daae:	89 c2                	mov    %eax,%edx
f012dab0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dab6:	01 d0                	add    %edx,%eax
f012dab8:	8a 00                	mov    (%eax),%al
f012daba:	3c 02                	cmp    $0x2,%al
f012dabc:	74 20                	je     f012dade <test_krealloc_BF+0xd69>
			panic(
f012dabe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dac4:	8a 00                	mov    (%eax),%al
f012dac6:	0f be c0             	movsbl %al,%eax
f012dac9:	50                   	push   %eax
f012daca:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dacf:	68 b7 11 00 00       	push   $0x11b7
f012dad4:	68 3a a2 13 f0       	push   $0xf013a23a
f012dad9:	e8 c8 26 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012dade:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dae4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012daea:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012daf0:	8b 00                	mov    (%eax),%eax
f012daf2:	83 f8 03             	cmp    $0x3,%eax
f012daf5:	75 1c                	jne    f012db13 <test_krealloc_BF+0xd9e>
f012daf7:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012dafd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012db04:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012db0a:	01 d0                	add    %edx,%eax
f012db0c:	8b 00                	mov    (%eax),%eax
f012db0e:	83 f8 03             	cmp    $0x3,%eax
f012db11:	74 17                	je     f012db2a <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012db13:	83 ec 04             	sub    $0x4,%esp
f012db16:	68 f8 b5 13 f0       	push   $0xf013b5f8
f012db1b:	68 bb 11 00 00       	push   $0x11bb
f012db20:	68 3a a2 13 f0       	push   $0xf013a23a
f012db25:	e8 7c 26 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012db2a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012db30:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012db36:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012db3c:	8b 00                	mov    (%eax),%eax
f012db3e:	83 f8 04             	cmp    $0x4,%eax
f012db41:	75 1c                	jne    f012db5f <test_krealloc_BF+0xdea>
f012db43:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012db49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012db50:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012db56:	01 d0                	add    %edx,%eax
f012db58:	8b 00                	mov    (%eax),%eax
f012db5a:	83 f8 04             	cmp    $0x4,%eax
f012db5d:	74 17                	je     f012db76 <test_krealloc_BF+0xe01>
			panic(
f012db5f:	83 ec 04             	sub    $0x4,%esp
f012db62:	68 6c b5 13 f0       	push   $0xf013b56c
f012db67:	68 c0 11 00 00       	push   $0x11c0
f012db6c:	68 3a a2 13 f0       	push   $0xf013a23a
f012db71:	e8 30 26 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012db76:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012db7c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012db82:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012db88:	66 8b 00             	mov    (%eax),%ax
f012db8b:	66 83 f8 05          	cmp    $0x5,%ax
f012db8f:	75 1b                	jne    f012dbac <test_krealloc_BF+0xe37>
f012db91:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012db97:	01 c0                	add    %eax,%eax
f012db99:	89 c2                	mov    %eax,%edx
f012db9b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dba1:	01 d0                	add    %edx,%eax
f012dba3:	66 8b 00             	mov    (%eax),%ax
f012dba6:	66 83 f8 05          	cmp    $0x5,%ax
f012dbaa:	74 17                	je     f012dbc3 <test_krealloc_BF+0xe4e>
			panic(
f012dbac:	83 ec 04             	sub    $0x4,%esp
f012dbaf:	68 6c b5 13 f0       	push   $0xf013b56c
f012dbb4:	68 c5 11 00 00       	push   $0x11c5
f012dbb9:	68 3a a2 13 f0       	push   $0xf013a23a
f012dbbe:	e8 e3 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012dbc3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dbc9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012dbcf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dbd5:	66 8b 00             	mov    (%eax),%ax
f012dbd8:	66 83 f8 06          	cmp    $0x6,%ax
f012dbdc:	75 1b                	jne    f012dbf9 <test_krealloc_BF+0xe84>
f012dbde:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012dbe4:	01 c0                	add    %eax,%eax
f012dbe6:	89 c2                	mov    %eax,%edx
f012dbe8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dbee:	01 d0                	add    %edx,%eax
f012dbf0:	66 8b 00             	mov    (%eax),%ax
f012dbf3:	66 83 f8 06          	cmp    $0x6,%ax
f012dbf7:	74 17                	je     f012dc10 <test_krealloc_BF+0xe9b>
			panic(
f012dbf9:	83 ec 04             	sub    $0x4,%esp
f012dbfc:	68 6c b5 13 f0       	push   $0xf013b56c
f012dc01:	68 ca 11 00 00       	push   $0x11ca
f012dc06:	68 3a a2 13 f0       	push   $0xf013a23a
f012dc0b:	e8 96 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012dc10:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dc16:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012dc1c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc22:	8a 00                	mov    (%eax),%al
f012dc24:	3c 07                	cmp    $0x7,%al
f012dc26:	75 1b                	jne    f012dc43 <test_krealloc_BF+0xece>
f012dc28:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dc2e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dc35:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc3b:	01 d0                	add    %edx,%eax
f012dc3d:	8a 00                	mov    (%eax),%al
f012dc3f:	3c 07                	cmp    $0x7,%al
f012dc41:	74 17                	je     f012dc5a <test_krealloc_BF+0xee5>
			panic(
f012dc43:	83 ec 04             	sub    $0x4,%esp
f012dc46:	68 6c b5 13 f0       	push   $0xf013b56c
f012dc4b:	68 cf 11 00 00       	push   $0x11cf
f012dc50:	68 3a a2 13 f0       	push   $0xf013a23a
f012dc55:	e8 4c 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012dc5a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc60:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dc64:	66 83 f8 07          	cmp    $0x7,%ax
f012dc68:	75 1f                	jne    f012dc89 <test_krealloc_BF+0xf14>
f012dc6a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dc70:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dc77:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc7d:	01 d0                	add    %edx,%eax
f012dc7f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dc83:	66 83 f8 07          	cmp    $0x7,%ax
f012dc87:	74 17                	je     f012dca0 <test_krealloc_BF+0xf2b>
			panic(
f012dc89:	83 ec 04             	sub    $0x4,%esp
f012dc8c:	68 6c b5 13 f0       	push   $0xf013b56c
f012dc91:	68 d2 11 00 00       	push   $0x11d2
f012dc96:	68 3a a2 13 f0       	push   $0xf013a23a
f012dc9b:	e8 06 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012dca0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dca6:	8b 40 04             	mov    0x4(%eax),%eax
f012dca9:	83 f8 07             	cmp    $0x7,%eax
f012dcac:	75 1d                	jne    f012dccb <test_krealloc_BF+0xf56>
f012dcae:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dcb4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dcbb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dcc1:	01 d0                	add    %edx,%eax
f012dcc3:	8b 40 04             	mov    0x4(%eax),%eax
f012dcc6:	83 f8 07             	cmp    $0x7,%eax
f012dcc9:	74 17                	je     f012dce2 <test_krealloc_BF+0xf6d>
			panic(
f012dccb:	83 ec 04             	sub    $0x4,%esp
f012dcce:	68 6c b5 13 f0       	push   $0xf013b56c
f012dcd3:	68 d5 11 00 00       	push   $0x11d5
f012dcd8:	68 3a a2 13 f0       	push   $0xf013a23a
f012dcdd:	e8 c4 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012dce2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dce8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012dcee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dcf4:	8a 00                	mov    (%eax),%al
f012dcf6:	3c 08                	cmp    $0x8,%al
f012dcf8:	75 1b                	jne    f012dd15 <test_krealloc_BF+0xfa0>
f012dcfa:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd00:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd07:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd0d:	01 d0                	add    %edx,%eax
f012dd0f:	8a 00                	mov    (%eax),%al
f012dd11:	3c 08                	cmp    $0x8,%al
f012dd13:	74 17                	je     f012dd2c <test_krealloc_BF+0xfb7>
			panic(
f012dd15:	83 ec 04             	sub    $0x4,%esp
f012dd18:	68 6c b5 13 f0       	push   $0xf013b56c
f012dd1d:	68 da 11 00 00       	push   $0x11da
f012dd22:	68 3a a2 13 f0       	push   $0xf013a23a
f012dd27:	e8 7a 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012dd2c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd32:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dd36:	66 83 f8 08          	cmp    $0x8,%ax
f012dd3a:	75 1f                	jne    f012dd5b <test_krealloc_BF+0xfe6>
f012dd3c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd49:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd4f:	01 d0                	add    %edx,%eax
f012dd51:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dd55:	66 83 f8 08          	cmp    $0x8,%ax
f012dd59:	74 17                	je     f012dd72 <test_krealloc_BF+0xffd>
			panic(
f012dd5b:	83 ec 04             	sub    $0x4,%esp
f012dd5e:	68 6c b5 13 f0       	push   $0xf013b56c
f012dd63:	68 dd 11 00 00       	push   $0x11dd
f012dd68:	68 3a a2 13 f0       	push   $0xf013a23a
f012dd6d:	e8 34 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012dd72:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd78:	8b 40 04             	mov    0x4(%eax),%eax
f012dd7b:	83 f8 08             	cmp    $0x8,%eax
f012dd7e:	75 1d                	jne    f012dd9d <test_krealloc_BF+0x1028>
f012dd80:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd86:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd8d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd93:	01 d0                	add    %edx,%eax
f012dd95:	8b 40 04             	mov    0x4(%eax),%eax
f012dd98:	83 f8 08             	cmp    $0x8,%eax
f012dd9b:	74 17                	je     f012ddb4 <test_krealloc_BF+0x103f>
			panic(
f012dd9d:	83 ec 04             	sub    $0x4,%esp
f012dda0:	68 6c b5 13 f0       	push   $0xf013b56c
f012dda5:	68 e0 11 00 00       	push   $0x11e0
f012ddaa:	68 3a a2 13 f0       	push   $0xf013a23a
f012ddaf:	e8 f2 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ddb4:	e8 11 e0 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ddb9:	89 c2                	mov    %eax,%edx
f012ddbb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ddbe:	39 c2                	cmp    %eax,%edx
f012ddc0:	74 17                	je     f012ddd9 <test_krealloc_BF+0x1064>
			panic(
f012ddc2:	83 ec 04             	sub    $0x4,%esp
f012ddc5:	68 2c b6 13 f0       	push   $0xf013b62c
f012ddca:	68 e4 11 00 00       	push   $0x11e4
f012ddcf:	68 3a a2 13 f0       	push   $0xf013a23a
f012ddd4:	e8 cd 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ddd9:	83 ec 0c             	sub    $0xc,%esp
f012dddc:	68 78 b6 13 f0       	push   $0xf013b678
f012dde1:	e8 47 2e fd ff       	call   f0100c2d <cprintf>
f012dde6:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012dde9:	e8 dc df fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ddee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ddf1:	e8 96 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ddf6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ddfc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012de02:	83 ec 08             	sub    $0x8,%esp
f012de05:	6a 00                	push   $0x0
f012de07:	50                   	push   %eax
f012de08:	e8 85 96 fd ff       	call   f0107492 <krealloc>
f012de0d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012de10:	e8 77 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012de15:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012de1b:	74 17                	je     f012de34 <test_krealloc_BF+0x10bf>
			panic(
f012de1d:	83 ec 04             	sub    $0x4,%esp
f012de20:	68 9c b6 13 f0       	push   $0xf013b69c
f012de25:	68 f1 11 00 00       	push   $0x11f1
f012de2a:	68 3a a2 13 f0       	push   $0xf013a23a
f012de2f:	e8 72 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012de34:	e8 91 df fd ff       	call   f010bdca <sys_calculate_free_frames>
f012de39:	89 c2                	mov    %eax,%edx
f012de3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012de3e:	29 c2                	sub    %eax,%edx
f012de40:	89 d0                	mov    %edx,%eax
f012de42:	3d 00 01 00 00       	cmp    $0x100,%eax
f012de47:	74 17                	je     f012de60 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012de49:	83 ec 04             	sub    $0x4,%esp
f012de4c:	68 10 b7 13 f0       	push   $0xf013b710
f012de51:	68 f3 11 00 00       	push   $0x11f3
f012de56:	68 3a a2 13 f0       	push   $0xf013a23a
f012de5b:	e8 46 23 fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012de60:	e8 65 df fd ff       	call   f010bdca <sys_calculate_free_frames>
f012de65:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012de68:	e8 1f 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012de6d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012de73:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012de79:	83 ec 08             	sub    $0x8,%esp
f012de7c:	6a 00                	push   $0x0
f012de7e:	50                   	push   %eax
f012de7f:	e8 0e 96 fd ff       	call   f0107492 <krealloc>
f012de84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012de87:	e8 00 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012de8c:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012de92:	74 17                	je     f012deab <test_krealloc_BF+0x1136>
			panic(
f012de94:	83 ec 04             	sub    $0x4,%esp
f012de97:	68 9c b6 13 f0       	push   $0xf013b69c
f012de9c:	68 fc 11 00 00       	push   $0x11fc
f012dea1:	68 3a a2 13 f0       	push   $0xf013a23a
f012dea6:	e8 fb 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012deab:	e8 1a df fd ff       	call   f010bdca <sys_calculate_free_frames>
f012deb0:	89 c2                	mov    %eax,%edx
f012deb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012deb5:	29 c2                	sub    %eax,%edx
f012deb7:	89 d0                	mov    %edx,%eax
f012deb9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012debe:	74 17                	je     f012ded7 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012dec0:	83 ec 04             	sub    $0x4,%esp
f012dec3:	68 10 b7 13 f0       	push   $0xf013b710
f012dec8:	68 fe 11 00 00       	push   $0x11fe
f012decd:	68 3a a2 13 f0       	push   $0xf013a23a
f012ded2:	e8 cf 22 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ded7:	e8 ee de fd ff       	call   f010bdca <sys_calculate_free_frames>
f012dedc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dedf:	e8 a8 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012dee4:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012deea:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012def0:	83 ec 08             	sub    $0x8,%esp
f012def3:	6a 00                	push   $0x0
f012def5:	50                   	push   %eax
f012def6:	e8 97 95 fd ff       	call   f0107492 <krealloc>
f012defb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012defe:	e8 89 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012df03:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df09:	74 17                	je     f012df22 <test_krealloc_BF+0x11ad>
			panic(
f012df0b:	83 ec 04             	sub    $0x4,%esp
f012df0e:	68 54 a2 13 f0       	push   $0xf013a254
f012df13:	68 06 12 00 00       	push   $0x1206
f012df18:	68 3a a2 13 f0       	push   $0xf013a23a
f012df1d:	e8 84 22 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012df22:	e8 a3 de fd ff       	call   f010bdca <sys_calculate_free_frames>
f012df27:	89 c2                	mov    %eax,%edx
f012df29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012df2c:	29 c2                	sub    %eax,%edx
f012df2e:	89 d0                	mov    %edx,%eax
f012df30:	3d 00 02 00 00       	cmp    $0x200,%eax
f012df35:	74 17                	je     f012df4e <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012df37:	83 ec 04             	sub    $0x4,%esp
f012df3a:	68 10 b7 13 f0       	push   $0xf013b710
f012df3f:	68 08 12 00 00       	push   $0x1208
f012df44:	68 3a a2 13 f0       	push   $0xf013a23a
f012df49:	e8 58 22 fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012df4e:	e8 77 de fd ff       	call   f010bdca <sys_calculate_free_frames>
f012df53:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012df56:	e8 31 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012df5b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012df61:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012df67:	83 ec 08             	sub    $0x8,%esp
f012df6a:	6a 00                	push   $0x0
f012df6c:	50                   	push   %eax
f012df6d:	e8 20 95 fd ff       	call   f0107492 <krealloc>
f012df72:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df75:	e8 12 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012df7a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df80:	74 17                	je     f012df99 <test_krealloc_BF+0x1224>
			panic(
f012df82:	83 ec 04             	sub    $0x4,%esp
f012df85:	68 9c b6 13 f0       	push   $0xf013b69c
f012df8a:	68 10 12 00 00       	push   $0x1210
f012df8f:	68 3a a2 13 f0       	push   $0xf013a23a
f012df94:	e8 0d 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012df99:	e8 2c de fd ff       	call   f010bdca <sys_calculate_free_frames>
f012df9e:	89 c2                	mov    %eax,%edx
f012dfa0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dfa3:	29 c2                	sub    %eax,%edx
f012dfa5:	89 d0                	mov    %edx,%eax
f012dfa7:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dfac:	74 17                	je     f012dfc5 <test_krealloc_BF+0x1250>
			panic(
f012dfae:	83 ec 04             	sub    $0x4,%esp
f012dfb1:	68 44 b7 13 f0       	push   $0xf013b744
f012dfb6:	68 13 12 00 00       	push   $0x1213
f012dfbb:	68 3a a2 13 f0       	push   $0xf013a23a
f012dfc0:	e8 e1 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dfc5:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012dfcc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012dfd3:	eb 48                	jmp    f012e01d <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dfd5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012dfd8:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012dfdd:	83 ec 04             	sub    $0x4,%esp
f012dfe0:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012dfe6:	51                   	push   %ecx
f012dfe7:	52                   	push   %edx
f012dfe8:	50                   	push   %eax
f012dfe9:	e8 7b 89 fd ff       	call   f0106969 <get_page_table>
f012dfee:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dff1:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012dff7:	85 c0                	test   %eax,%eax
f012dff9:	75 17                	jne    f012e012 <test_krealloc_BF+0x129d>
					panic(
f012dffb:	83 ec 04             	sub    $0x4,%esp
f012dffe:	68 3c ab 13 f0       	push   $0xf013ab3c
f012e003:	68 1f 12 00 00       	push   $0x121f
f012e008:	68 3a a2 13 f0       	push   $0xf013a23a
f012e00d:	e8 94 21 fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e012:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e019:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e01d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e021:	78 b2                	js     f012dfd5 <test_krealloc_BF+0x1260>
f012e023:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e027:	7f 09                	jg     f012e032 <test_krealloc_BF+0x12bd>
f012e029:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e030:	76 a3                	jbe    f012dfd5 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e032:	83 ec 0c             	sub    $0xc,%esp
f012e035:	68 83 b7 13 f0       	push   $0xf013b783
f012e03a:	e8 ee 2b fd ff       	call   f0100c2d <cprintf>
f012e03f:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e042:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e048:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e04e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e055:	eb 21                	jmp    f012e078 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e057:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e05d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e060:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e066:	01 c8                	add    %ecx,%eax
f012e068:	8a 00                	mov    (%eax),%al
f012e06a:	0f be c0             	movsbl %al,%eax
f012e06d:	01 d0                	add    %edx,%eax
f012e06f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e075:	ff 45 dc             	incl   -0x24(%ebp)
f012e078:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e07e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e081:	7d d4                	jge    f012e057 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e083:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e089:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e08f:	42                   	inc    %edx
f012e090:	01 d2                	add    %edx,%edx
f012e092:	39 d0                	cmp    %edx,%eax
f012e094:	74 17                	je     f012e0ad <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e096:	83 ec 04             	sub    $0x4,%esp
f012e099:	68 8c b7 13 f0       	push   $0xf013b78c
f012e09e:	68 31 12 00 00       	push   $0x1231
f012e0a3:	68 3a a2 13 f0       	push   $0xf013a23a
f012e0a8:	e8 f9 20 fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e0ad:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e0b3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e0b9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e0c0:	eb 25                	jmp    f012e0e7 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e0c2:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012e0c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e0cb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012e0d2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e0d8:	01 c8                	add    %ecx,%eax
f012e0da:	8b 00                	mov    (%eax),%eax
f012e0dc:	01 d0                	add    %edx,%eax
f012e0de:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e0e4:	ff 45 dc             	incl   -0x24(%ebp)
f012e0e7:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e0ed:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e0f0:	7d d0                	jge    f012e0c2 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012e0f2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012e0f8:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012e0fe:	42                   	inc    %edx
f012e0ff:	c1 e2 02             	shl    $0x2,%edx
f012e102:	39 d0                	cmp    %edx,%eax
f012e104:	74 17                	je     f012e11d <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012e106:	83 ec 04             	sub    $0x4,%esp
f012e109:	68 8c b7 13 f0       	push   $0xf013b78c
f012e10e:	68 3b 12 00 00       	push   $0x123b
f012e113:	68 3a a2 13 f0       	push   $0xf013a23a
f012e118:	e8 89 20 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012e11d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e123:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e129:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e130:	eb 24                	jmp    f012e156 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012e132:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e138:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e13b:	01 c0                	add    %eax,%eax
f012e13d:	89 c1                	mov    %eax,%ecx
f012e13f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e145:	01 c8                	add    %ecx,%eax
f012e147:	66 8b 00             	mov    (%eax),%ax
f012e14a:	98                   	cwtl   
f012e14b:	01 d0                	add    %edx,%eax
f012e14d:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e153:	ff 45 dc             	incl   -0x24(%ebp)
f012e156:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e15c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e15f:	7d d1                	jge    f012e132 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012e161:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e167:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e16d:	8d 48 01             	lea    0x1(%eax),%ecx
f012e170:	89 c8                	mov    %ecx,%eax
f012e172:	c1 e0 02             	shl    $0x2,%eax
f012e175:	01 c8                	add    %ecx,%eax
f012e177:	39 c2                	cmp    %eax,%edx
f012e179:	74 17                	je     f012e192 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012e17b:	83 ec 04             	sub    $0x4,%esp
f012e17e:	68 8c b7 13 f0       	push   $0xf013b78c
f012e183:	68 45 12 00 00       	push   $0x1245
f012e188:	68 3a a2 13 f0       	push   $0xf013a23a
f012e18d:	e8 14 20 fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e192:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e198:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e19e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e1a5:	eb 70                	jmp    f012e217 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012e1a7:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012e1ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e1b0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1bd:	01 c8                	add    %ecx,%eax
f012e1bf:	8a 00                	mov    (%eax),%al
f012e1c1:	0f be c0             	movsbl %al,%eax
f012e1c4:	01 d0                	add    %edx,%eax
f012e1c6:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012e1cc:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012e1d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e1d5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1e2:	01 c8                	add    %ecx,%eax
f012e1e4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e1e8:	98                   	cwtl   
f012e1e9:	01 d0                	add    %edx,%eax
f012e1eb:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012e1f1:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012e1f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e1fa:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e201:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e207:	01 c8                	add    %ecx,%eax
f012e209:	8b 40 04             	mov    0x4(%eax),%eax
f012e20c:	01 d0                	add    %edx,%eax
f012e20e:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e214:	ff 45 dc             	incl   -0x24(%ebp)
f012e217:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e21d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e220:	7d 85                	jge    f012e1a7 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012e222:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012e228:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e22e:	8d 50 01             	lea    0x1(%eax),%edx
f012e231:	89 d0                	mov    %edx,%eax
f012e233:	01 c0                	add    %eax,%eax
f012e235:	01 d0                	add    %edx,%eax
f012e237:	01 c0                	add    %eax,%eax
f012e239:	01 d0                	add    %edx,%eax
f012e23b:	39 c1                	cmp    %eax,%ecx
f012e23d:	75 3a                	jne    f012e279 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012e23f:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012e245:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e24b:	8d 50 01             	lea    0x1(%eax),%edx
f012e24e:	89 d0                	mov    %edx,%eax
f012e250:	01 c0                	add    %eax,%eax
f012e252:	01 d0                	add    %edx,%eax
f012e254:	01 c0                	add    %eax,%eax
f012e256:	01 d0                	add    %edx,%eax
f012e258:	39 c1                	cmp    %eax,%ecx
f012e25a:	75 1d                	jne    f012e279 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012e25c:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012e262:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e268:	8d 50 01             	lea    0x1(%eax),%edx
f012e26b:	89 d0                	mov    %edx,%eax
f012e26d:	01 c0                	add    %eax,%eax
f012e26f:	01 d0                	add    %edx,%eax
f012e271:	01 c0                	add    %eax,%eax
f012e273:	01 d0                	add    %edx,%eax
f012e275:	39 c1                	cmp    %eax,%ecx
f012e277:	74 17                	je     f012e290 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012e279:	83 ec 04             	sub    $0x4,%esp
f012e27c:	68 8c b7 13 f0       	push   $0xf013b78c
f012e281:	68 53 12 00 00       	push   $0x1253
f012e286:	68 3a a2 13 f0       	push   $0xf013a23a
f012e28b:	e8 16 1f fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012e290:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012e297:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e29a:	e8 2b db fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e29f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012e2a2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e2a8:	83 ec 08             	sub    $0x8,%esp
f012e2ab:	68 00 3c 00 00       	push   $0x3c00
f012e2b0:	50                   	push   %eax
f012e2b1:	e8 dc 91 fd ff       	call   f0107492 <krealloc>
f012e2b6:	83 c4 10             	add    $0x10,%esp
f012e2b9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e2bf:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e2c5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e2ca:	77 17                	ja     f012e2e3 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e2cc:	83 ec 04             	sub    $0x4,%esp
f012e2cf:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e2d4:	68 5f 12 00 00       	push   $0x125f
f012e2d9:	68 3a a2 13 f0       	push   $0xf013a23a
f012e2de:	e8 c3 1e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e2e3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e2e9:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e2ef:	74 17                	je     f012e308 <test_krealloc_BF+0x1593>
			panic(
f012e2f1:	83 ec 04             	sub    $0x4,%esp
f012e2f4:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012e2f9:	68 62 12 00 00       	push   $0x1262
f012e2fe:	68 3a a2 13 f0       	push   $0xf013a23a
f012e303:	e8 9e 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e308:	e8 bd da fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e30d:	89 c2                	mov    %eax,%edx
f012e30f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e312:	39 c2                	cmp    %eax,%edx
f012e314:	74 17                	je     f012e32d <test_krealloc_BF+0x15b8>
			panic(
f012e316:	83 ec 04             	sub    $0x4,%esp
f012e319:	68 30 b8 13 f0       	push   $0xf013b830
f012e31e:	68 65 12 00 00       	push   $0x1265
f012e323:	68 3a a2 13 f0       	push   $0xf013a23a
f012e328:	e8 79 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e32d:	e8 98 da fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e332:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012e335:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e33b:	83 ec 08             	sub    $0x8,%esp
f012e33e:	68 00 fc 0f 00       	push   $0xffc00
f012e343:	50                   	push   %eax
f012e344:	e8 49 91 fd ff       	call   f0107492 <krealloc>
f012e349:	83 c4 10             	add    $0x10,%esp
f012e34c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e352:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e358:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e35d:	77 17                	ja     f012e376 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e35f:	83 ec 04             	sub    $0x4,%esp
f012e362:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e367:	68 6b 12 00 00       	push   $0x126b
f012e36c:	68 3a a2 13 f0       	push   $0xf013a23a
f012e371:	e8 30 1e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e376:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e37c:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e382:	74 17                	je     f012e39b <test_krealloc_BF+0x1626>
			panic(
f012e384:	83 ec 04             	sub    $0x4,%esp
f012e387:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012e38c:	68 6e 12 00 00       	push   $0x126e
f012e391:	68 3a a2 13 f0       	push   $0xf013a23a
f012e396:	e8 0b 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e39b:	e8 2a da fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e3a0:	89 c2                	mov    %eax,%edx
f012e3a2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e3a5:	39 c2                	cmp    %eax,%edx
f012e3a7:	74 17                	je     f012e3c0 <test_krealloc_BF+0x164b>
			panic(
f012e3a9:	83 ec 04             	sub    $0x4,%esp
f012e3ac:	68 30 b8 13 f0       	push   $0xf013b830
f012e3b1:	68 71 12 00 00       	push   $0x1271
f012e3b6:	68 3a a2 13 f0       	push   $0xf013a23a
f012e3bb:	e8 e6 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e3c0:	e8 05 da fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e3c5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012e3c8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e3ce:	83 ec 08             	sub    $0x8,%esp
f012e3d1:	68 00 fc 0f 00       	push   $0xffc00
f012e3d6:	50                   	push   %eax
f012e3d7:	e8 b6 90 fd ff       	call   f0107492 <krealloc>
f012e3dc:	83 c4 10             	add    $0x10,%esp
f012e3df:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e3e5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e3eb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e3f0:	77 17                	ja     f012e409 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e3f2:	83 ec 04             	sub    $0x4,%esp
f012e3f5:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e3fa:	68 77 12 00 00       	push   $0x1277
f012e3ff:	68 3a a2 13 f0       	push   $0xf013a23a
f012e404:	e8 9d 1d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e409:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e40f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e415:	74 17                	je     f012e42e <test_krealloc_BF+0x16b9>
			panic(
f012e417:	83 ec 04             	sub    $0x4,%esp
f012e41a:	68 c4 b7 13 f0       	push   $0xf013b7c4
f012e41f:	68 7a 12 00 00       	push   $0x127a
f012e424:	68 3a a2 13 f0       	push   $0xf013a23a
f012e429:	e8 78 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e42e:	e8 97 d9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e433:	89 c2                	mov    %eax,%edx
f012e435:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e438:	39 c2                	cmp    %eax,%edx
f012e43a:	74 17                	je     f012e453 <test_krealloc_BF+0x16de>
			panic(
f012e43c:	83 ec 04             	sub    $0x4,%esp
f012e43f:	68 30 b8 13 f0       	push   $0xf013b830
f012e444:	68 7d 12 00 00       	push   $0x127d
f012e449:	68 3a a2 13 f0       	push   $0xf013a23a
f012e44e:	e8 53 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e453:	e8 72 d9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e458:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012e45b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e461:	83 ec 08             	sub    $0x8,%esp
f012e464:	68 00 fc 0f 00       	push   $0xffc00
f012e469:	50                   	push   %eax
f012e46a:	e8 23 90 fd ff       	call   f0107492 <krealloc>
f012e46f:	83 c4 10             	add    $0x10,%esp
f012e472:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e478:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e47e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e483:	77 17                	ja     f012e49c <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e485:	83 ec 04             	sub    $0x4,%esp
f012e488:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e48d:	68 85 12 00 00       	push   $0x1285
f012e492:	68 3a a2 13 f0       	push   $0xf013a23a
f012e497:	e8 0a 1d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012e49c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e4a2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e4a8:	74 17                	je     f012e4c1 <test_krealloc_BF+0x174c>
			panic(
f012e4aa:	83 ec 04             	sub    $0x4,%esp
f012e4ad:	68 74 b8 13 f0       	push   $0xf013b874
f012e4b2:	68 88 12 00 00       	push   $0x1288
f012e4b7:	68 3a a2 13 f0       	push   $0xf013a23a
f012e4bc:	e8 e5 1c fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e4c1:	e8 04 d9 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e4c6:	89 c2                	mov    %eax,%edx
f012e4c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e4cb:	39 c2                	cmp    %eax,%edx
f012e4cd:	74 17                	je     f012e4e6 <test_krealloc_BF+0x1771>
			panic(
f012e4cf:	83 ec 04             	sub    $0x4,%esp
f012e4d2:	68 30 b8 13 f0       	push   $0xf013b830
f012e4d7:	68 8b 12 00 00       	push   $0x128b
f012e4dc:	68 3a a2 13 f0       	push   $0xf013a23a
f012e4e1:	e8 c0 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012e4e6:	83 ec 0c             	sub    $0xc,%esp
f012e4e9:	68 53 aa 13 f0       	push   $0xf013aa53
f012e4ee:	e8 3a 27 fd ff       	call   f0100c2d <cprintf>
f012e4f3:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012e4f6:	e8 cf d8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e4fb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012e4fe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e504:	83 ec 08             	sub    $0x8,%esp
f012e507:	68 00 18 10 00       	push   $0x101800
f012e50c:	50                   	push   %eax
f012e50d:	e8 80 8f fd ff       	call   f0107492 <krealloc>
f012e512:	83 c4 10             	add    $0x10,%esp
f012e515:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e518:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e51b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e520:	77 17                	ja     f012e539 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e522:	83 ec 04             	sub    $0x4,%esp
f012e525:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e52a:	68 93 12 00 00       	push   $0x1293
f012e52f:	68 3a a2 13 f0       	push   $0xf013a23a
f012e534:	e8 6d 1c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e539:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e53f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e542:	74 17                	je     f012e55b <test_krealloc_BF+0x17e6>
			panic(
f012e544:	83 ec 04             	sub    $0x4,%esp
f012e547:	68 d4 b8 13 f0       	push   $0xf013b8d4
f012e54c:	68 96 12 00 00       	push   $0x1296
f012e551:	68 3a a2 13 f0       	push   $0xf013a23a
f012e556:	e8 4b 1c fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012e55b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e55e:	e8 67 d8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e563:	29 c3                	sub    %eax,%ebx
f012e565:	89 d8                	mov    %ebx,%eax
f012e567:	83 f8 02             	cmp    $0x2,%eax
f012e56a:	74 17                	je     f012e583 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012e56c:	83 ec 04             	sub    $0x4,%esp
f012e56f:	68 50 b9 13 f0       	push   $0xf013b950
f012e574:	68 98 12 00 00       	push   $0x1298
f012e579:	68 3a a2 13 f0       	push   $0xf013a23a
f012e57e:	e8 23 1c fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012e583:	e8 42 d8 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e588:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012e58b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e591:	83 ec 08             	sub    $0x8,%esp
f012e594:	68 00 fc 3f 00       	push   $0x3ffc00
f012e599:	50                   	push   %eax
f012e59a:	e8 f3 8e fd ff       	call   f0107492 <krealloc>
f012e59f:	83 c4 10             	add    $0x10,%esp
f012e5a2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e5a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e5a8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e5ad:	77 17                	ja     f012e5c6 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e5af:	83 ec 04             	sub    $0x4,%esp
f012e5b2:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e5b7:	68 9e 12 00 00       	push   $0x129e
f012e5bc:	68 3a a2 13 f0       	push   $0xf013a23a
f012e5c1:	e8 e0 1b fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e5c6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e5cc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e5cf:	74 17                	je     f012e5e8 <test_krealloc_BF+0x1873>
			panic(
f012e5d1:	83 ec 04             	sub    $0x4,%esp
f012e5d4:	68 d4 b8 13 f0       	push   $0xf013b8d4
f012e5d9:	68 a1 12 00 00       	push   $0x12a1
f012e5de:	68 3a a2 13 f0       	push   $0xf013a23a
f012e5e3:	e8 be 1b fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012e5e8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e5eb:	e8 da d7 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e5f0:	29 c3                	sub    %eax,%ebx
f012e5f2:	89 d8                	mov    %ebx,%eax
f012e5f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e5f9:	74 17                	je     f012e612 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012e5fb:	83 ec 04             	sub    $0x4,%esp
f012e5fe:	68 50 b9 13 f0       	push   $0xf013b950
f012e603:	68 a4 12 00 00       	push   $0x12a4
f012e608:	68 3a a2 13 f0       	push   $0xf013a23a
f012e60d:	e8 94 1b fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012e612:	83 ec 0c             	sub    $0xc,%esp
f012e615:	68 98 aa 13 f0       	push   $0xf013aa98
f012e61a:	e8 0e 26 fd ff       	call   f0100c2d <cprintf>
f012e61f:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012e622:	e8 a3 d7 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e627:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012e62a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e630:	83 ec 08             	sub    $0x8,%esp
f012e633:	68 00 fc 9f 00       	push   $0x9ffc00
f012e638:	50                   	push   %eax
f012e639:	e8 54 8e fd ff       	call   f0107492 <krealloc>
f012e63e:	83 c4 10             	add    $0x10,%esp
f012e641:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e644:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e647:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e64c:	77 17                	ja     f012e665 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e64e:	83 ec 04             	sub    $0x4,%esp
f012e651:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e656:	68 af 12 00 00       	push   $0x12af
f012e65b:	68 3a a2 13 f0       	push   $0xf013a23a
f012e660:	e8 41 1b fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012e665:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012e66c:	10 00 00 
f012e66f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012e675:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e67a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012e680:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012e686:	ba 00 00 00 00       	mov    $0x0,%edx
f012e68b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012e691:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012e697:	29 d0                	sub    %edx,%eax
f012e699:	89 c1                	mov    %eax,%ecx
f012e69b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012e6a2:	10 00 00 
f012e6a5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e6aa:	0f b6 d0             	movzbl %al,%edx
f012e6ad:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012e6b3:	01 d0                	add    %edx,%eax
f012e6b5:	48                   	dec    %eax
f012e6b6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012e6bc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012e6c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6c7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012e6cd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012e6d3:	29 d0                	sub    %edx,%eax
f012e6d5:	01 c1                	add    %eax,%ecx
f012e6d7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012e6de:	10 00 00 
f012e6e1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e6e6:	0f b6 c0             	movzbl %al,%eax
f012e6e9:	c1 e0 04             	shl    $0x4,%eax
f012e6ec:	89 c2                	mov    %eax,%edx
f012e6ee:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012e6f4:	01 d0                	add    %edx,%eax
f012e6f6:	48                   	dec    %eax
f012e6f7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012e6fd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012e703:	ba 00 00 00 00       	mov    $0x0,%edx
f012e708:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012e70e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012e714:	29 d0                	sub    %edx,%eax
f012e716:	01 c8                	add    %ecx,%eax
f012e718:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012e71e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e721:	39 c2                	cmp    %eax,%edx
f012e723:	74 18                	je     f012e73d <test_krealloc_BF+0x19c8>
			panic(
f012e725:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e728:	50                   	push   %eax
f012e729:	68 84 b9 13 f0       	push   $0xf013b984
f012e72e:	68 b3 12 00 00       	push   $0x12b3
f012e733:	68 3a a2 13 f0       	push   $0xf013a23a
f012e738:	e8 69 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012e73d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e743:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e746:	75 17                	jne    f012e75f <test_krealloc_BF+0x19ea>
			panic(
f012e748:	83 ec 04             	sub    $0x4,%esp
f012e74b:	68 c8 b9 13 f0       	push   $0xf013b9c8
f012e750:	68 b6 12 00 00       	push   $0x12b6
f012e755:	68 3a a2 13 f0       	push   $0xf013a23a
f012e75a:	e8 47 1a fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012e75f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e762:	e8 63 d6 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e767:	29 c3                	sub    %eax,%ebx
f012e769:	89 d8                	mov    %ebx,%eax
f012e76b:	3d 00 06 00 00       	cmp    $0x600,%eax
f012e770:	74 17                	je     f012e789 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012e772:	83 ec 04             	sub    $0x4,%esp
f012e775:	68 50 b9 13 f0       	push   $0xf013b950
f012e77a:	68 b9 12 00 00       	push   $0x12b9
f012e77f:	68 3a a2 13 f0       	push   $0xf013a23a
f012e784:	e8 1d 1a fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012e789:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e78c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012e792:	e8 33 d6 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e797:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012e79a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e7a0:	83 ec 08             	sub    $0x8,%esp
f012e7a3:	68 00 fc 3f 00       	push   $0x3ffc00
f012e7a8:	50                   	push   %eax
f012e7a9:	e8 e4 8c fd ff       	call   f0107492 <krealloc>
f012e7ae:	83 c4 10             	add    $0x10,%esp
f012e7b1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e7b4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e7b7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e7bc:	77 17                	ja     f012e7d5 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e7be:	83 ec 04             	sub    $0x4,%esp
f012e7c1:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e7c6:	68 c2 12 00 00       	push   $0x12c2
f012e7cb:	68 3a a2 13 f0       	push   $0xf013a23a
f012e7d0:	e8 d1 19 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012e7d5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e7db:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e7de:	75 17                	jne    f012e7f7 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012e7e0:	83 ec 04             	sub    $0x4,%esp
f012e7e3:	68 c8 b9 13 f0       	push   $0xf013b9c8
f012e7e8:	68 c4 12 00 00       	push   $0x12c4
f012e7ed:	68 3a a2 13 f0       	push   $0xf013a23a
f012e7f2:	e8 af 19 fd ff       	call   f01001a6 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012e7f7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012e7fe:	10 00 00 
f012e801:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012e807:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e80c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012e812:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e818:	ba 00 00 00 00       	mov    $0x0,%edx
f012e81d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012e823:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e829:	29 d0                	sub    %edx,%eax
f012e82b:	89 c1                	mov    %eax,%ecx
f012e82d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012e834:	10 00 00 
f012e837:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e83c:	0f b6 d0             	movzbl %al,%edx
f012e83f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012e845:	01 d0                	add    %edx,%eax
f012e847:	48                   	dec    %eax
f012e848:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012e84e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e854:	ba 00 00 00 00       	mov    $0x0,%edx
f012e859:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012e85f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e865:	29 d0                	sub    %edx,%eax
f012e867:	01 c1                	add    %eax,%ecx
f012e869:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012e870:	10 00 00 
f012e873:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e878:	0f b6 c0             	movzbl %al,%eax
f012e87b:	c1 e0 04             	shl    $0x4,%eax
f012e87e:	89 c2                	mov    %eax,%edx
f012e880:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012e886:	01 d0                	add    %edx,%eax
f012e888:	48                   	dec    %eax
f012e889:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012e88f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e895:	ba 00 00 00 00       	mov    $0x0,%edx
f012e89a:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012e8a0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e8a6:	29 d0                	sub    %edx,%eax
f012e8a8:	01 c8                	add    %ecx,%eax
f012e8aa:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012e8b0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e8b3:	39 c2                	cmp    %eax,%edx
f012e8b5:	74 17                	je     f012e8ce <test_krealloc_BF+0x1b59>
f012e8b7:	83 ec 04             	sub    $0x4,%esp
f012e8ba:	68 1c b5 13 f0       	push   $0xf013b51c
f012e8bf:	68 c5 12 00 00       	push   $0x12c5
f012e8c4:	68 3a a2 13 f0       	push   $0xf013a23a
f012e8c9:	e8 d8 18 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012e8ce:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e8d1:	e8 f4 d4 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e8d6:	29 c3                	sub    %eax,%ebx
f012e8d8:	89 d8                	mov    %ebx,%eax
f012e8da:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e8df:	74 17                	je     f012e8f8 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012e8e1:	83 ec 04             	sub    $0x4,%esp
f012e8e4:	68 50 b9 13 f0       	push   $0xf013b950
f012e8e9:	68 c9 12 00 00       	push   $0x12c9
f012e8ee:	68 3a a2 13 f0       	push   $0xf013a23a
f012e8f3:	e8 ae 18 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f012e8f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e8fb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012e901:	e8 c4 d4 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012e906:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012e909:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e90f:	83 ec 08             	sub    $0x8,%esp
f012e912:	68 00 fc 3f 01       	push   $0x13ffc00
f012e917:	50                   	push   %eax
f012e918:	e8 75 8b fd ff       	call   f0107492 <krealloc>
f012e91d:	83 c4 10             	add    $0x10,%esp
f012e920:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e923:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e926:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e92b:	77 17                	ja     f012e944 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e92d:	83 ec 04             	sub    $0x4,%esp
f012e930:	68 e0 b4 13 f0       	push   $0xf013b4e0
f012e935:	68 cf 12 00 00       	push   $0x12cf
f012e93a:	68 3a a2 13 f0       	push   $0xf013a23a
f012e93f:	e8 62 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012e944:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e94a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e94d:	75 17                	jne    f012e966 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012e94f:	83 ec 04             	sub    $0x4,%esp
f012e952:	68 c8 b9 13 f0       	push   $0xf013b9c8
f012e957:	68 d1 12 00 00       	push   $0x12d1
f012e95c:	68 3a a2 13 f0       	push   $0xf013a23a
f012e961:	e8 40 18 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012e966:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012e96d:	10 00 00 
f012e970:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012e976:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e97b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012e981:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012e987:	ba 00 00 00 00       	mov    $0x0,%edx
f012e98c:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012e992:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012e998:	29 d0                	sub    %edx,%eax
f012e99a:	89 c1                	mov    %eax,%ecx
f012e99c:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012e9a3:	10 00 00 
f012e9a6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e9ab:	0f b6 d0             	movzbl %al,%edx
f012e9ae:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012e9b4:	01 d0                	add    %edx,%eax
f012e9b6:	48                   	dec    %eax
f012e9b7:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012e9bd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012e9c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9c8:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012e9ce:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012e9d4:	29 d0                	sub    %edx,%eax
f012e9d6:	01 c1                	add    %eax,%ecx
f012e9d8:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012e9df:	10 00 00 
f012e9e2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e9e7:	0f b6 c0             	movzbl %al,%eax
f012e9ea:	c1 e0 04             	shl    $0x4,%eax
f012e9ed:	89 c2                	mov    %eax,%edx
f012e9ef:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012e9f5:	01 d0                	add    %edx,%eax
f012e9f7:	48                   	dec    %eax
f012e9f8:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012e9fe:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012ea04:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea09:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012ea0f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012ea15:	29 d0                	sub    %edx,%eax
f012ea17:	01 c8                	add    %ecx,%eax
f012ea19:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012ea1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ea22:	39 c2                	cmp    %eax,%edx
f012ea24:	74 17                	je     f012ea3d <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012ea26:	83 ec 04             	sub    $0x4,%esp
f012ea29:	68 e8 ba 13 f0       	push   $0xf013bae8
f012ea2e:	68 d3 12 00 00       	push   $0x12d3
f012ea33:	68 3a a2 13 f0       	push   $0xf013a23a
f012ea38:	e8 69 17 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012ea3d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ea40:	e8 85 d3 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ea45:	29 c3                	sub    %eax,%ebx
f012ea47:	89 d8                	mov    %ebx,%eax
f012ea49:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012ea4e:	74 17                	je     f012ea67 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012ea50:	83 ec 04             	sub    $0x4,%esp
f012ea53:	68 50 b9 13 f0       	push   $0xf013b950
f012ea58:	68 d6 12 00 00       	push   $0x12d6
f012ea5d:	68 3a a2 13 f0       	push   $0xf013a23a
f012ea62:	e8 3f 17 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012ea67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ea6a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ea70:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea76:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012ea7c:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ea83:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ea86:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ea8d:	eb 21                	jmp    f012eab0 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012ea8f:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ea95:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012ea98:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea9e:	01 c8                	add    %ecx,%eax
f012eaa0:	8a 00                	mov    (%eax),%al
f012eaa2:	0f be c0             	movsbl %al,%eax
f012eaa5:	01 d0                	add    %edx,%eax
f012eaa7:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012eaad:	ff 45 d8             	incl   -0x28(%ebp)
f012eab0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eab6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012eab9:	7d d4                	jge    f012ea8f <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012eabb:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012eac1:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012eac7:	42                   	inc    %edx
f012eac8:	01 d2                	add    %edx,%edx
f012eaca:	39 d0                	cmp    %edx,%eax
f012eacc:	74 17                	je     f012eae5 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012eace:	83 ec 04             	sub    $0x4,%esp
f012ead1:	68 80 ba 13 f0       	push   $0xf013ba80
f012ead6:	68 e4 12 00 00       	push   $0x12e4
f012eadb:	68 3a a2 13 f0       	push   $0xf013a23a
f012eae0:	e8 c1 16 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012eae5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eaeb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012eaf1:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012eaf8:	00 00 00 
		sums[1] = 0;
f012eafb:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012eb02:	00 00 00 
		sums[2] = 0;
f012eb05:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012eb0c:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012eb0f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012eb16:	eb 70                	jmp    f012eb88 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012eb18:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012eb1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eb21:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb28:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb2e:	01 c8                	add    %ecx,%eax
f012eb30:	8a 00                	mov    (%eax),%al
f012eb32:	0f be c0             	movsbl %al,%eax
f012eb35:	01 d0                	add    %edx,%eax
f012eb37:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012eb3d:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012eb43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eb46:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb4d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb53:	01 c8                	add    %ecx,%eax
f012eb55:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eb59:	98                   	cwtl   
f012eb5a:	01 d0                	add    %edx,%eax
f012eb5c:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012eb62:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eb68:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eb6b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb72:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb78:	01 c8                	add    %ecx,%eax
f012eb7a:	8b 40 04             	mov    0x4(%eax),%eax
f012eb7d:	01 d0                	add    %edx,%eax
f012eb7f:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012eb85:	ff 45 d8             	incl   -0x28(%ebp)
f012eb88:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012eb91:	7d 85                	jge    f012eb18 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012eb93:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012eb99:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb9f:	8d 50 01             	lea    0x1(%eax),%edx
f012eba2:	89 d0                	mov    %edx,%eax
f012eba4:	01 c0                	add    %eax,%eax
f012eba6:	01 d0                	add    %edx,%eax
f012eba8:	01 c0                	add    %eax,%eax
f012ebaa:	01 d0                	add    %edx,%eax
f012ebac:	39 c1                	cmp    %eax,%ecx
f012ebae:	75 3a                	jne    f012ebea <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012ebb0:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012ebb6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebbc:	8d 50 01             	lea    0x1(%eax),%edx
f012ebbf:	89 d0                	mov    %edx,%eax
f012ebc1:	01 c0                	add    %eax,%eax
f012ebc3:	01 d0                	add    %edx,%eax
f012ebc5:	01 c0                	add    %eax,%eax
f012ebc7:	01 d0                	add    %edx,%eax
f012ebc9:	39 c1                	cmp    %eax,%ecx
f012ebcb:	75 1d                	jne    f012ebea <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012ebcd:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012ebd3:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebd9:	8d 50 01             	lea    0x1(%eax),%edx
f012ebdc:	89 d0                	mov    %edx,%eax
f012ebde:	01 c0                	add    %eax,%eax
f012ebe0:	01 d0                	add    %edx,%eax
f012ebe2:	01 c0                	add    %eax,%eax
f012ebe4:	01 d0                	add    %edx,%eax
f012ebe6:	39 c1                	cmp    %eax,%ecx
f012ebe8:	74 17                	je     f012ec01 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012ebea:	83 ec 04             	sub    $0x4,%esp
f012ebed:	68 80 ba 13 f0       	push   $0xf013ba80
f012ebf2:	68 f6 12 00 00       	push   $0x12f6
f012ebf7:	68 3a a2 13 f0       	push   $0xf013a23a
f012ebfc:	e8 a5 15 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ec01:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec07:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012ec0d:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ec14:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ec17:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ec1e:	eb 24                	jmp    f012ec44 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012ec20:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ec26:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ec29:	01 c0                	add    %eax,%eax
f012ec2b:	89 c1                	mov    %eax,%ecx
f012ec2d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec33:	01 c8                	add    %ecx,%eax
f012ec35:	66 8b 00             	mov    (%eax),%ax
f012ec38:	98                   	cwtl   
f012ec39:	01 d0                	add    %edx,%eax
f012ec3b:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ec41:	ff 45 d8             	incl   -0x28(%ebp)
f012ec44:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec4a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ec4d:	7d d1                	jge    f012ec20 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ec4f:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ec55:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec5b:	8d 48 01             	lea    0x1(%eax),%ecx
f012ec5e:	89 c8                	mov    %ecx,%eax
f012ec60:	c1 e0 02             	shl    $0x2,%eax
f012ec63:	01 c8                	add    %ecx,%eax
f012ec65:	39 c2                	cmp    %eax,%edx
f012ec67:	74 17                	je     f012ec80 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012ec69:	83 ec 04             	sub    $0x4,%esp
f012ec6c:	68 80 ba 13 f0       	push   $0xf013ba80
f012ec71:	68 00 13 00 00       	push   $0x1300
f012ec76:	68 3a a2 13 f0       	push   $0xf013a23a
f012ec7b:	e8 26 15 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ec80:	e8 45 d1 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ec85:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ec88:	e8 ff 4f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ec8d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ec93:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec99:	83 ec 08             	sub    $0x8,%esp
f012ec9c:	6a 00                	push   $0x0
f012ec9e:	50                   	push   %eax
f012ec9f:	e8 ee 87 fd ff       	call   f0107492 <krealloc>
f012eca4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012eca7:	e8 e0 4f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ecac:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ecb2:	74 17                	je     f012eccb <test_krealloc_BF+0x1f56>
			panic(
f012ecb4:	83 ec 04             	sub    $0x4,%esp
f012ecb7:	68 54 a2 13 f0       	push   $0xf013a254
f012ecbc:	68 08 13 00 00       	push   $0x1308
f012ecc1:	68 3a a2 13 f0       	push   $0xf013a23a
f012ecc6:	e8 db 14 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012eccb:	e8 fa d0 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ecd0:	89 c2                	mov    %eax,%edx
f012ecd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ecd5:	29 c2                	sub    %eax,%edx
f012ecd7:	89 d0                	mov    %edx,%eax
f012ecd9:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012ecde:	74 17                	je     f012ecf7 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012ece0:	83 ec 04             	sub    $0x4,%esp
f012ece3:	68 10 b7 13 f0       	push   $0xf013b710
f012ece8:	68 0a 13 00 00       	push   $0x130a
f012eced:	68 3a a2 13 f0       	push   $0xf013a23a
f012ecf2:	e8 af 14 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012ecf7:	e8 ce d0 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ecfc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ecff:	e8 88 4f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ed04:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012ed0a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed10:	83 ec 0c             	sub    $0xc,%esp
f012ed13:	50                   	push   %eax
f012ed14:	e8 dd 86 fd ff       	call   f01073f6 <kfree>
f012ed19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ed1c:	e8 6b 4f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ed21:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ed27:	74 17                	je     f012ed40 <test_krealloc_BF+0x1fcb>
			panic(
f012ed29:	83 ec 04             	sub    $0x4,%esp
f012ed2c:	68 54 a2 13 f0       	push   $0xf013a254
f012ed31:	68 12 13 00 00       	push   $0x1312
f012ed36:	68 3a a2 13 f0       	push   $0xf013a23a
f012ed3b:	e8 66 14 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012ed40:	e8 85 d0 fd ff       	call   f010bdca <sys_calculate_free_frames>
f012ed45:	89 c2                	mov    %eax,%edx
f012ed47:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed4a:	29 c2                	sub    %eax,%edx
f012ed4c:	89 d0                	mov    %edx,%eax
f012ed4e:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012ed53:	74 17                	je     f012ed6c <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012ed55:	83 ec 04             	sub    $0x4,%esp
f012ed58:	68 10 b7 13 f0       	push   $0xf013b710
f012ed5d:	68 14 13 00 00       	push   $0x1314
f012ed62:	68 3a a2 13 f0       	push   $0xf013a23a
f012ed67:	e8 3a 14 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ed6c:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012ed73:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012ed7a:	eb 48                	jmp    f012edc4 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ed7c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012ed7f:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012ed84:	83 ec 04             	sub    $0x4,%esp
f012ed87:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012ed8d:	51                   	push   %ecx
f012ed8e:	52                   	push   %edx
f012ed8f:	50                   	push   %eax
f012ed90:	e8 d4 7b fd ff       	call   f0106969 <get_page_table>
f012ed95:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ed98:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ed9e:	85 c0                	test   %eax,%eax
f012eda0:	75 17                	jne    f012edb9 <test_krealloc_BF+0x2044>
					panic(
f012eda2:	83 ec 04             	sub    $0x4,%esp
f012eda5:	68 3c ab 13 f0       	push   $0xf013ab3c
f012edaa:	68 21 13 00 00       	push   $0x1321
f012edaf:	68 3a a2 13 f0       	push   $0xf013a23a
f012edb4:	e8 ed 13 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012edb9:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012edc0:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012edc4:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012edc8:	78 b2                	js     f012ed7c <test_krealloc_BF+0x2007>
f012edca:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012edce:	7f 09                	jg     f012edd9 <test_krealloc_BF+0x2064>
f012edd0:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012edd7:	76 a3                	jbe    f012ed7c <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012edd9:	83 ec 0c             	sub    $0xc,%esp
f012eddc:	68 1e a4 13 f0       	push   $0xf013a41e
f012ede1:	e8 47 1e fd ff       	call   f0100c2d <cprintf>
f012ede6:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012ede9:	83 ec 0c             	sub    $0xc,%esp
f012edec:	68 20 bb 13 f0       	push   $0xf013bb20
f012edf1:	e8 37 1e fd ff       	call   f0100c2d <cprintf>
f012edf6:	83 c4 10             	add    $0x10,%esp
	return 0;
f012edf9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012edfe:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012ee01:	5b                   	pop    %ebx
f012ee02:	5f                   	pop    %edi
f012ee03:	5d                   	pop    %ebp
f012ee04:	c3                   	ret    

f012ee05 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012ee05:	55                   	push   %ebp
f012ee06:	89 e5                	mov    %esp,%ebp
f012ee08:	83 ec 08             	sub    $0x8,%esp
	if(USE_KHEAP != 1)
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
f012ee0b:	83 ec 04             	sub    $0x4,%esp
f012ee0e:	68 60 bb 13 f0       	push   $0xf013bb60
f012ee13:	68 32 13 00 00       	push   $0x1332
f012ee18:	68 3a a2 13 f0       	push   $0xf013a23a
f012ee1d:	e8 84 13 fd ff       	call   f01001a6 <_panic>

f012ee22 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012ee22:	55                   	push   %ebp
f012ee23:	89 e5                	mov    %esp,%ebp
f012ee25:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012ee28:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012ee2c:	77 07                	ja     f012ee35 <nearest_pow2_ceil+0x13>
f012ee2e:	b8 01 00 00 00       	mov    $0x1,%eax
f012ee33:	eb 20                	jmp    f012ee55 <nearest_pow2_ceil+0x33>
    int power = 2;
f012ee35:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ee3c:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012ee3f:	eb 08                	jmp    f012ee49 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012ee41:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ee44:	01 c0                	add    %eax,%eax
f012ee46:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012ee49:	d1 6d 08             	shrl   0x8(%ebp)
f012ee4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ee50:	75 ef                	jne    f012ee41 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012ee52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee55:	c9                   	leave  
f012ee56:	c3                   	ret    

f012ee57 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012ee57:	55                   	push   %ebp
f012ee58:	89 e5                	mov    %esp,%ebp
f012ee5a:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012ee5d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012ee61:	77 07                	ja     f012ee6a <log2_ceil+0x13>
f012ee63:	b8 01 00 00 00       	mov    $0x1,%eax
f012ee68:	eb 1b                	jmp    f012ee85 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012ee6a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ee71:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012ee74:	eb 03                	jmp    f012ee79 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012ee76:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012ee79:	d1 6d 08             	shrl   0x8(%ebp)
f012ee7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ee80:	75 f4                	jne    f012ee76 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012ee82:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee85:	c9                   	leave  
f012ee86:	c3                   	ret    

f012ee87 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012ee87:	55                   	push   %ebp
f012ee88:	89 e5                	mov    %esp,%ebp
f012ee8a:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012ee8d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee90:	8b 00                	mov    (%eax),%eax
f012ee92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012ee95:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee98:	8b 00                	mov    (%eax),%eax
f012ee9a:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012ee9d:	eb 52                	jmp    f012eef1 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012ee9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012eea2:	8b 00                	mov    (%eax),%eax
f012eea4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012eea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012eeaa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012eead:	75 12                	jne    f012eec1 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012eeaf:	83 ec 0c             	sub    $0xc,%esp
f012eeb2:	68 cc bb 13 f0       	push   $0xf013bbcc
f012eeb7:	e8 71 1d fd ff       	call   f0100c2d <cprintf>
f012eebc:	83 c4 10             	add    $0x10,%esp
			break;
f012eebf:	eb 3f                	jmp    f012ef00 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012eec1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012eec5:	74 38                	je     f012eeff <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012eec7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012eeca:	8b 00                	mov    (%eax),%eax
f012eecc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012eecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012eed2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012eed5:	75 12                	jne    f012eee9 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012eed7:	83 ec 0c             	sub    $0xc,%esp
f012eeda:	68 e8 bb 13 f0       	push   $0xf013bbe8
f012eedf:	e8 49 1d fd ff       	call   f0100c2d <cprintf>
f012eee4:	83 c4 10             	add    $0x10,%esp
			break;
f012eee7:	eb 17                	jmp    f012ef00 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012eee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012eeec:	8b 00                	mov    (%eax),%eax
f012eeee:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012eef1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012eef5:	74 09                	je     f012ef00 <detect_loop_in_FrameInfo_list+0x79>
f012eef7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012eefb:	75 a2                	jne    f012ee9f <detect_loop_in_FrameInfo_list+0x18>
f012eefd:	eb 01                	jmp    f012ef00 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012eeff:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012ef00:	83 ec 0c             	sub    $0xc,%esp
f012ef03:	68 ff bb 13 f0       	push   $0xf013bbff
f012ef08:	e8 20 1d fd ff       	call   f0100c2d <cprintf>
f012ef0d:	83 c4 10             	add    $0x10,%esp
}
f012ef10:	90                   	nop
f012ef11:	c9                   	leave  
f012ef12:	c3                   	ret    

f012ef13 <scarce_memory>:

void scarce_memory()
{
f012ef13:	55                   	push   %ebp
f012ef14:	89 e5                	mov    %esp,%ebp
f012ef16:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012ef19:	a1 60 50 6e f0       	mov    0xf06e5060,%eax
f012ef1e:	ba 64 00 00 00       	mov    $0x64,%edx
f012ef23:	29 c2                	sub    %eax,%edx
f012ef25:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f012ef2a:	0f af c2             	imul   %edx,%eax
f012ef2d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012ef32:	f7 e2                	mul    %edx
f012ef34:	89 d0                	mov    %edx,%eax
f012ef36:	c1 e8 05             	shr    $0x5,%eax
f012ef39:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012ef3c:	a1 60 50 6e f0       	mov    0xf06e5060,%eax
f012ef41:	ba 64 00 00 00       	mov    $0x64,%edx
f012ef46:	29 c2                	sub    %eax,%edx
f012ef48:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f012ef4d:	89 d1                	mov    %edx,%ecx
f012ef4f:	0f af c8             	imul   %eax,%ecx
f012ef52:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ef57:	f7 e1                	mul    %ecx
f012ef59:	c1 ea 05             	shr    $0x5,%edx
f012ef5c:	89 d0                	mov    %edx,%eax
f012ef5e:	c1 e0 02             	shl    $0x2,%eax
f012ef61:	01 d0                	add    %edx,%eax
f012ef63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ef6a:	01 d0                	add    %edx,%eax
f012ef6c:	c1 e0 02             	shl    $0x2,%eax
f012ef6f:	29 c1                	sub    %eax,%ecx
f012ef71:	89 ca                	mov    %ecx,%edx
f012ef73:	85 d2                	test   %edx,%edx
f012ef75:	74 03                	je     f012ef7a <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012ef77:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012ef7a:	8b 15 70 74 6e f0    	mov    0xf06e7470,%edx
f012ef80:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f012ef85:	29 c2                	sub    %eax,%edx
f012ef87:	89 d0                	mov    %edx,%eax
f012ef89:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012ef8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ef8f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012ef92:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012ef95:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012ef9c:	eb 12                	jmp    f012efb0 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012ef9e:	83 ec 0c             	sub    $0xc,%esp
f012efa1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012efa4:	50                   	push   %eax
f012efa5:	e8 00 78 fd ff       	call   f01067aa <allocate_frame>
f012efaa:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012efad:	ff 45 f0             	incl   -0x10(%ebp)
f012efb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012efb3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012efb6:	76 e6                	jbe    f012ef9e <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012efb8:	90                   	nop
f012efb9:	c9                   	leave  
f012efba:	c3                   	ret    

f012efbb <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012efbb:	55                   	push   %ebp
f012efbc:	89 e5                	mov    %esp,%ebp
f012efbe:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012efc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012efc8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012efcf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012efd6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012efda:	0f 85 d3 01 00 00    	jne    f012f1b3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012efe0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012efe7:	e9 e1 00 00 00       	jmp    f012f0cd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012efec:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012eff3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012eff6:	c1 e0 04             	shl    $0x4,%eax
f012eff9:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012effe:	8b 00                	mov    (%eax),%eax
f012f000:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f003:	e9 82 00 00 00       	jmp    f012f08a <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012f008:	83 ec 0c             	sub    $0xc,%esp
f012f00b:	ff 75 e4             	pushl  -0x1c(%ebp)
f012f00e:	e8 c8 85 fd ff       	call   f01075db <env_page_ws_get_size>
f012f013:	83 c4 10             	add    $0x10,%esp
f012f016:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f019:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f01e:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f024:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f027:	0f af c2             	imul   %edx,%eax
f012f02a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f02f:	f7 e2                	mul    %edx
f012f031:	89 d0                	mov    %edx,%eax
f012f033:	c1 e8 05             	shr    $0x5,%eax
f012f036:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f039:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f03e:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f044:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f047:	89 d1                	mov    %edx,%ecx
f012f049:	0f af c8             	imul   %eax,%ecx
f012f04c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f051:	f7 e1                	mul    %ecx
f012f053:	c1 ea 05             	shr    $0x5,%edx
f012f056:	89 d0                	mov    %edx,%eax
f012f058:	c1 e0 02             	shl    $0x2,%eax
f012f05b:	01 d0                	add    %edx,%eax
f012f05d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f064:	01 d0                	add    %edx,%eax
f012f066:	c1 e0 02             	shl    $0x2,%eax
f012f069:	29 c1                	sub    %eax,%ecx
f012f06b:	89 ca                	mov    %ecx,%edx
f012f06d:	85 d2                	test   %edx,%edx
f012f06f:	74 03                	je     f012f074 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012f071:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012f074:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f077:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f07a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f07d:	c1 e0 04             	shl    $0x4,%eax
f012f080:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f012f085:	8b 00                	mov    (%eax),%eax
f012f087:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f08a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f08e:	74 08                	je     f012f098 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012f090:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f093:	8b 40 44             	mov    0x44(%eax),%eax
f012f096:	eb 05                	jmp    f012f09d <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012f098:	b8 00 00 00 00       	mov    $0x0,%eax
f012f09d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f0a0:	c1 e2 04             	shl    $0x4,%edx
f012f0a3:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f012f0a9:	89 02                	mov    %eax,(%edx)
f012f0ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0ae:	c1 e0 04             	shl    $0x4,%eax
f012f0b1:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f012f0b6:	8b 00                	mov    (%eax),%eax
f012f0b8:	85 c0                	test   %eax,%eax
f012f0ba:	0f 85 48 ff ff ff    	jne    f012f008 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012f0c0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f0c4:	0f 85 3e ff ff ff    	jne    f012f008 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f0ca:	ff 45 e8             	incl   -0x18(%ebp)
f012f0cd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f0d2:	0f b6 c0             	movzbl %al,%eax
f012f0d5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f0d8:	0f 8f 0e ff ff ff    	jg     f012efec <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012f0de:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f0e5:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f012f0ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f0ed:	eb 19                	jmp    f012f108 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012f0ef:	83 ec 0c             	sub    $0xc,%esp
f012f0f2:	ff 75 dc             	pushl  -0x24(%ebp)
f012f0f5:	e8 e1 84 fd ff       	call   f01075db <env_page_ws_get_size>
f012f0fa:	83 c4 10             	add    $0x10,%esp
f012f0fd:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f100:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f012f105:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f108:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f10c:	74 08                	je     f012f116 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012f10e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f111:	8b 40 44             	mov    0x44(%eax),%eax
f012f114:	eb 05                	jmp    f012f11b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012f116:	b8 00 00 00 00       	mov    $0x0,%eax
f012f11b:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f012f120:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f012f125:	85 c0                	test   %eax,%eax
f012f127:	75 c6                	jne    f012f0ef <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012f129:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f12d:	75 c0                	jne    f012f0ef <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012f12f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f134:	85 c0                	test   %eax,%eax
f012f136:	0f 84 ec 00 00 00    	je     f012f228 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f13c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f141:	83 ec 0c             	sub    $0xc,%esp
f012f144:	50                   	push   %eax
f012f145:	e8 91 84 fd ff       	call   f01075db <env_page_ws_get_size>
f012f14a:	83 c4 10             	add    $0x10,%esp
f012f14d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f150:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f155:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f15b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f15e:	0f af c2             	imul   %edx,%eax
f012f161:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f166:	f7 e2                	mul    %edx
f012f168:	89 d0                	mov    %edx,%eax
f012f16a:	c1 e8 05             	shr    $0x5,%eax
f012f16d:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f170:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f175:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f17b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f17e:	89 d1                	mov    %edx,%ecx
f012f180:	0f af c8             	imul   %eax,%ecx
f012f183:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f188:	f7 e1                	mul    %ecx
f012f18a:	c1 ea 05             	shr    $0x5,%edx
f012f18d:	89 d0                	mov    %edx,%eax
f012f18f:	c1 e0 02             	shl    $0x2,%eax
f012f192:	01 d0                	add    %edx,%eax
f012f194:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f19b:	01 d0                	add    %edx,%eax
f012f19d:	c1 e0 02             	shl    $0x2,%eax
f012f1a0:	29 c1                	sub    %eax,%ecx
f012f1a2:	89 ca                	mov    %ecx,%edx
f012f1a4:	85 d2                	test   %edx,%edx
f012f1a6:	74 03                	je     f012f1ab <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012f1a8:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f1ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f1ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f1b1:	eb 75                	jmp    f012f228 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f1b3:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f1b8:	83 ec 0c             	sub    $0xc,%esp
f012f1bb:	50                   	push   %eax
f012f1bc:	e8 1a 84 fd ff       	call   f01075db <env_page_ws_get_size>
f012f1c1:	83 c4 10             	add    $0x10,%esp
f012f1c4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f1c7:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f1cc:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f1d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f1d5:	0f af c2             	imul   %edx,%eax
f012f1d8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f1dd:	f7 e2                	mul    %edx
f012f1df:	89 d0                	mov    %edx,%eax
f012f1e1:	c1 e8 05             	shr    $0x5,%eax
f012f1e4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f1e7:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f1ec:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f1f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f1f5:	89 d1                	mov    %edx,%ecx
f012f1f7:	0f af c8             	imul   %eax,%ecx
f012f1fa:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f1ff:	f7 e1                	mul    %ecx
f012f201:	c1 ea 05             	shr    $0x5,%edx
f012f204:	89 d0                	mov    %edx,%eax
f012f206:	c1 e0 02             	shl    $0x2,%eax
f012f209:	01 d0                	add    %edx,%eax
f012f20b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f212:	01 d0                	add    %edx,%eax
f012f214:	c1 e0 02             	shl    $0x2,%eax
f012f217:	29 c1                	sub    %eax,%ecx
f012f219:	89 ca                	mov    %ecx,%edx
f012f21b:	85 d2                	test   %edx,%edx
f012f21d:	74 03                	je     f012f222 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012f21f:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f222:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012f225:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012f228:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f22b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f22e:	01 c2                	add    %eax,%edx
f012f230:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f233:	01 d0                	add    %edx,%eax
}
f012f235:	c9                   	leave  
f012f236:	c3                   	ret    

f012f237 <schenv>:


void schenv()
{
f012f237:	55                   	push   %ebp
f012f238:	89 e5                	mov    %esp,%ebp
f012f23a:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012f23d:	c6 05 04 75 6e f0 00 	movb   $0x0,0xf06e7504
	__ne = NULL;
f012f244:	c7 05 94 74 6e f0 00 	movl   $0x0,0xf06e7494
f012f24b:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f24e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f255:	eb 3a                	jmp    f012f291 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012f257:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f25a:	c1 e0 04             	shl    $0x4,%eax
f012f25d:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f262:	83 ec 0c             	sub    $0xc,%esp
f012f265:	50                   	push   %eax
f012f266:	e8 34 51 fd ff       	call   f010439f <queue_size>
f012f26b:	83 c4 10             	add    $0x10,%esp
f012f26e:	85 c0                	test   %eax,%eax
f012f270:	74 1c                	je     f012f28e <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012f272:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f275:	c1 e0 04             	shl    $0x4,%eax
f012f278:	05 10 f1 67 f0       	add    $0xf067f110,%eax
f012f27d:	8b 00                	mov    (%eax),%eax
f012f27f:	a3 94 74 6e f0       	mov    %eax,0xf06e7494
			__nl = i;
f012f284:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f287:	a2 04 75 6e f0       	mov    %al,0xf06e7504
			break;
f012f28c:	eb 10                	jmp    f012f29e <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f28e:	ff 45 f4             	incl   -0xc(%ebp)
f012f291:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f296:	0f b6 c0             	movzbl %al,%eax
f012f299:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f29c:	7f b9                	jg     f012f257 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012f29e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f2a3:	85 c0                	test   %eax,%eax
f012f2a5:	0f 84 86 00 00 00    	je     f012f331 <schenv+0xfa>
	{
		if (__ne != NULL)
f012f2ab:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f2b0:	85 c0                	test   %eax,%eax
f012f2b2:	74 4b                	je     f012f2ff <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012f2b4:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2b9:	0f b6 c0             	movzbl %al,%eax
f012f2bc:	8d 50 01             	lea    0x1(%eax),%edx
f012f2bf:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f2c4:	0f b6 c0             	movzbl %al,%eax
f012f2c7:	39 c2                	cmp    %eax,%edx
f012f2c9:	7d 66                	jge    f012f331 <schenv+0xfa>
			{
				__ne = curenv;
f012f2cb:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f2d0:	a3 94 74 6e f0       	mov    %eax,0xf06e7494
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f2d5:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2da:	0f b6 c0             	movzbl %al,%eax
f012f2dd:	8a 15 dc 74 6e f0    	mov    0xf06e74dc,%dl
f012f2e3:	0f b6 d2             	movzbl %dl,%edx
f012f2e6:	4a                   	dec    %edx
f012f2e7:	39 d0                	cmp    %edx,%eax
f012f2e9:	7d 08                	jge    f012f2f3 <schenv+0xbc>
f012f2eb:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2f0:	40                   	inc    %eax
f012f2f1:	eb 05                	jmp    f012f2f8 <schenv+0xc1>
f012f2f3:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2f8:	a2 04 75 6e f0       	mov    %al,0xf06e7504
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012f2fd:	eb 32                	jmp    f012f331 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012f2ff:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f304:	a3 94 74 6e f0       	mov    %eax,0xf06e7494
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f309:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f30e:	0f b6 c0             	movzbl %al,%eax
f012f311:	8a 15 dc 74 6e f0    	mov    0xf06e74dc,%dl
f012f317:	0f b6 d2             	movzbl %dl,%edx
f012f31a:	4a                   	dec    %edx
f012f31b:	39 d0                	cmp    %edx,%eax
f012f31d:	7d 08                	jge    f012f327 <schenv+0xf0>
f012f31f:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f324:	40                   	inc    %eax
f012f325:	eb 05                	jmp    f012f32c <schenv+0xf5>
f012f327:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f32c:	a2 04 75 6e f0       	mov    %al,0xf06e7504
		}
	}
}
f012f331:	90                   	nop
f012f332:	c9                   	leave  
f012f333:	c3                   	ret    

f012f334 <chksch>:

void chksch(uint8 onoff)
{
f012f334:	55                   	push   %ebp
f012f335:	89 e5                	mov    %esp,%ebp
f012f337:	83 ec 04             	sub    $0x4,%esp
f012f33a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f33d:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012f340:	c7 05 f0 74 6e f0 00 	movl   $0x0,0xf06e74f0
f012f347:	00 00 00 
	__ne = NULL;
f012f34a:	c7 05 94 74 6e f0 00 	movl   $0x0,0xf06e7494
f012f351:	00 00 00 
	__pl = 0 ;
f012f354:	c6 05 04 f1 67 f0 00 	movb   $0x0,0xf067f104
	__nl = 0 ;
f012f35b:	c6 05 04 75 6e f0 00 	movb   $0x0,0xf06e7504
	__chkstatus = onoff;
f012f362:	8a 45 fc             	mov    -0x4(%ebp),%al
f012f365:	a2 90 74 6e f0       	mov    %al,0xf06e7490
}
f012f36a:	90                   	nop
f012f36b:	c9                   	leave  
f012f36c:	c3                   	ret    

f012f36d <chk1>:
void chk1()
{
f012f36d:	55                   	push   %ebp
f012f36e:	89 e5                	mov    %esp,%ebp
f012f370:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012f373:	a0 90 74 6e f0       	mov    0xf06e7490,%al
f012f378:	84 c0                	test   %al,%al
f012f37a:	74 2b                	je     f012f3a7 <chk1+0x3a>
		return ;
	__pe = curenv;
f012f37c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f381:	a3 f0 74 6e f0       	mov    %eax,0xf06e74f0
	__pl = __nl ;
f012f386:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f38b:	a2 04 f1 67 f0       	mov    %al,0xf067f104
	if (__pe == NULL)
f012f390:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f395:	85 c0                	test   %eax,%eax
f012f397:	75 07                	jne    f012f3a0 <chk1+0x33>
	{
		__pl = 0;
f012f399:	c6 05 04 f1 67 f0 00 	movb   $0x0,0xf067f104
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012f3a0:	e8 92 fe ff ff       	call   f012f237 <schenv>
f012f3a5:	eb 01                	jmp    f012f3a8 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012f3a7:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012f3a8:	c9                   	leave  
f012f3a9:	c3                   	ret    

f012f3aa <chk2>:
void chk2(struct Env* __se)
{
f012f3aa:	55                   	push   %ebp
f012f3ab:	89 e5                	mov    %esp,%ebp
f012f3ad:	53                   	push   %ebx
f012f3ae:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012f3b1:	a0 90 74 6e f0       	mov    0xf06e7490,%al
f012f3b6:	84 c0                	test   %al,%al
f012f3b8:	0f 84 35 02 00 00    	je     f012f5f3 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012f3be:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f3c3:	39 45 08             	cmp    %eax,0x8(%ebp)
f012f3c6:	74 19                	je     f012f3e1 <chk2+0x37>
f012f3c8:	68 19 bc 13 f0       	push   $0xf013bc19
f012f3cd:	68 26 bc 13 f0       	push   $0xf013bc26
f012f3d2:	68 c0 00 00 00       	push   $0xc0
f012f3d7:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f3dc:	e8 34 0e fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012f3e1:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f3e6:	85 c0                	test   %eax,%eax
f012f3e8:	0f 84 1b 01 00 00    	je     f012f509 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012f3ee:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f3f3:	0f b6 c0             	movzbl %al,%eax
f012f3f6:	8a 80 88 74 6e f0    	mov    -0xf918b78(%eax),%al
f012f3fc:	0f b6 d8             	movzbl %al,%ebx
f012f3ff:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012f404:	99                   	cltd   
f012f405:	f7 fb                	idiv   %ebx
f012f407:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012f40d:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f412:	0f b6 c0             	movzbl %al,%eax
f012f415:	8a 80 88 74 6e f0    	mov    -0xf918b78(%eax),%al
f012f41b:	0f b6 d8             	movzbl %al,%ebx
f012f41e:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012f423:	99                   	cltd   
f012f424:	f7 fb                	idiv   %ebx
f012f426:	89 c3                	mov    %eax,%ebx
f012f428:	89 c8                	mov    %ecx,%eax
f012f42a:	99                   	cltd   
f012f42b:	f7 fb                	idiv   %ebx
f012f42d:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012f431:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f435:	83 e0 01             	and    $0x1,%eax
f012f438:	66 85 c0             	test   %ax,%ax
f012f43b:	74 07                	je     f012f444 <chk2+0x9a>
f012f43d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f441:	40                   	inc    %eax
f012f442:	eb 04                	jmp    f012f448 <chk2+0x9e>
f012f444:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f448:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012f44c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012f450:	89 d0                	mov    %edx,%eax
f012f452:	c1 e0 02             	shl    $0x2,%eax
f012f455:	01 d0                	add    %edx,%eax
f012f457:	01 c0                	add    %eax,%eax
f012f459:	01 d0                	add    %edx,%eax
f012f45b:	c1 e0 02             	shl    $0x2,%eax
f012f45e:	01 d0                	add    %edx,%eax
f012f460:	01 c0                	add    %eax,%eax
f012f462:	89 c1                	mov    %eax,%ecx
f012f464:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f469:	f7 e9                	imul   %ecx
f012f46b:	c1 fa 05             	sar    $0x5,%edx
f012f46e:	89 c8                	mov    %ecx,%eax
f012f470:	c1 f8 1f             	sar    $0x1f,%eax
f012f473:	29 c2                	sub    %eax,%edx
f012f475:	89 d0                	mov    %edx,%eax
f012f477:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012f47b:	e8 f0 4d fd ff       	call   f0104270 <kclock_read_cnt0>
f012f480:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012f484:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f488:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012f48c:	76 0a                	jbe    f012f498 <chk2+0xee>
f012f48e:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f492:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012f496:	76 19                	jbe    f012f4b1 <chk2+0x107>
f012f498:	68 54 bc 13 f0       	push   $0xf013bc54
f012f49d:	68 26 bc 13 f0       	push   $0xf013bc26
f012f4a2:	68 ca 00 00 00       	push   $0xca
f012f4a7:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f4ac:	e8 64 0d fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f4b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f4b8:	eb 42                	jmp    f012f4fc <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012f4ba:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f4bf:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f4c2:	89 c2                	mov    %eax,%edx
f012f4c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f4c7:	c1 e0 04             	shl    $0x4,%eax
f012f4ca:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f4cf:	83 ec 08             	sub    $0x8,%esp
f012f4d2:	52                   	push   %edx
f012f4d3:	50                   	push   %eax
f012f4d4:	e8 98 50 fd ff       	call   f0104571 <find_env_in_queue>
f012f4d9:	83 c4 10             	add    $0x10,%esp
f012f4dc:	85 c0                	test   %eax,%eax
f012f4de:	74 19                	je     f012f4f9 <chk2+0x14f>
f012f4e0:	68 78 bc 13 f0       	push   $0xf013bc78
f012f4e5:	68 26 bc 13 f0       	push   $0xf013bc26
f012f4ea:	68 ce 00 00 00       	push   $0xce
f012f4ef:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f4f4:	e8 1c 0d fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f4f9:	ff 45 f4             	incl   -0xc(%ebp)
f012f4fc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f501:	0f b6 c0             	movzbl %al,%eax
f012f504:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f507:	7f b1                	jg     f012f4ba <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012f509:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f50e:	85 c0                	test   %eax,%eax
f012f510:	0f 84 de 00 00 00    	je     f012f5f4 <chk2+0x24a>
f012f516:	8b 15 f0 74 6e f0    	mov    0xf06e74f0,%edx
f012f51c:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f521:	39 c2                	cmp    %eax,%edx
f012f523:	0f 84 cb 00 00 00    	je     f012f5f4 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012f529:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f52e:	0f b6 c0             	movzbl %al,%eax
f012f531:	8a 15 dc 74 6e f0    	mov    0xf06e74dc,%dl
f012f537:	0f b6 d2             	movzbl %dl,%edx
f012f53a:	4a                   	dec    %edx
f012f53b:	39 d0                	cmp    %edx,%eax
f012f53d:	74 08                	je     f012f547 <chk2+0x19d>
f012f53f:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f544:	40                   	inc    %eax
f012f545:	eb 05                	jmp    f012f54c <chk2+0x1a2>
f012f547:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f54c:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012f54f:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f554:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f557:	89 c2                	mov    %eax,%edx
f012f559:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f55d:	c1 e0 04             	shl    $0x4,%eax
f012f560:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f565:	83 ec 08             	sub    $0x8,%esp
f012f568:	52                   	push   %edx
f012f569:	50                   	push   %eax
f012f56a:	e8 02 50 fd ff       	call   f0104571 <find_env_in_queue>
f012f56f:	83 c4 10             	add    $0x10,%esp
f012f572:	85 c0                	test   %eax,%eax
f012f574:	75 19                	jne    f012f58f <chk2+0x1e5>
f012f576:	68 b8 bc 13 f0       	push   $0xf013bcb8
f012f57b:	68 26 bc 13 f0       	push   $0xf013bc26
f012f580:	68 d4 00 00 00       	push   $0xd4
f012f585:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f58a:	e8 86 0c fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f58f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f596:	eb 4c                	jmp    f012f5e4 <chk2+0x23a>
		{
			if (i == __tl) continue;
f012f598:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f59c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f59f:	74 3f                	je     f012f5e0 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012f5a1:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f5a6:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f5a9:	89 c2                	mov    %eax,%edx
f012f5ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f5ae:	c1 e0 04             	shl    $0x4,%eax
f012f5b1:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f5b6:	83 ec 08             	sub    $0x8,%esp
f012f5b9:	52                   	push   %edx
f012f5ba:	50                   	push   %eax
f012f5bb:	e8 b1 4f fd ff       	call   f0104571 <find_env_in_queue>
f012f5c0:	83 c4 10             	add    $0x10,%esp
f012f5c3:	85 c0                	test   %eax,%eax
f012f5c5:	74 1a                	je     f012f5e1 <chk2+0x237>
f012f5c7:	68 fc bc 13 f0       	push   $0xf013bcfc
f012f5cc:	68 26 bc 13 f0       	push   $0xf013bc26
f012f5d1:	68 d8 00 00 00       	push   $0xd8
f012f5d6:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f5db:	e8 35 0c fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012f5e0:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f5e1:	ff 45 f0             	incl   -0x10(%ebp)
f012f5e4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f5e9:	0f b6 c0             	movzbl %al,%eax
f012f5ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f5ef:	7f a7                	jg     f012f598 <chk2+0x1ee>
f012f5f1:	eb 01                	jmp    f012f5f4 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012f5f3:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012f5f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012f5f7:	c9                   	leave  
f012f5f8:	c3                   	ret    

f012f5f9 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012f5f9:	55                   	push   %ebp
f012f5fa:	89 e5                	mov    %esp,%ebp
f012f5fc:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f5ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f606:	eb 40                	jmp    f012f648 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012f608:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f60b:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012f611:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f616:	83 ec 08             	sub    $0x8,%esp
f012f619:	52                   	push   %edx
f012f61a:	50                   	push   %eax
f012f61b:	e8 92 01 00 00       	call   f012f7b2 <check_va2pa>
f012f620:	83 c4 10             	add    $0x10,%esp
f012f623:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f626:	74 19                	je     f012f641 <check_boot_pgdir+0x48>
f012f628:	68 3c bd 13 f0       	push   $0xf013bd3c
f012f62d:	68 26 bc 13 f0       	push   $0xf013bc26
f012f632:	68 ff 00 00 00       	push   $0xff
f012f637:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f63c:	e8 65 0b fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f641:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012f648:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012f64f:	75 b7                	jne    f012f608 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012f651:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f658:	eb 74                	jmp    f012f6ce <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012f65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f65d:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012f663:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f668:	83 ec 08             	sub    $0x8,%esp
f012f66b:	52                   	push   %edx
f012f66c:	50                   	push   %eax
f012f66d:	e8 40 01 00 00       	call   f012f7b2 <check_va2pa>
f012f672:	83 c4 10             	add    $0x10,%esp
f012f675:	c7 45 f0 00 70 18 f0 	movl   $0xf0187000,-0x10(%ebp)
f012f67c:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012f683:	77 17                	ja     f012f69c <check_boot_pgdir+0xa3>
f012f685:	ff 75 f0             	pushl  -0x10(%ebp)
f012f688:	68 74 bd 13 f0       	push   $0xf013bd74
f012f68d:	68 04 01 00 00       	push   $0x104
f012f692:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f697:	e8 0a 0b fd ff       	call   f01001a6 <_panic>
f012f69c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f69f:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012f6a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f6a8:	01 ca                	add    %ecx,%edx
f012f6aa:	39 d0                	cmp    %edx,%eax
f012f6ac:	74 19                	je     f012f6c7 <check_boot_pgdir+0xce>
f012f6ae:	68 a8 bd 13 f0       	push   $0xf013bda8
f012f6b3:	68 26 bc 13 f0       	push   $0xf013bc26
f012f6b8:	68 04 01 00 00       	push   $0x104
f012f6bd:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f6c2:	e8 df 0a fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012f6c7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012f6ce:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012f6d5:	76 83                	jbe    f012f65a <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012f6d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f6de:	e9 af 00 00 00       	jmp    f012f792 <check_boot_pgdir+0x199>
		switch (i) {
f012f6e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f6e6:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012f6eb:	74 11                	je     f012f6fe <check_boot_pgdir+0x105>
f012f6ed:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012f6f2:	72 36                	jb     f012f72a <check_boot_pgdir+0x131>
f012f6f4:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012f6f9:	83 f8 02             	cmp    $0x2,%eax
f012f6fc:	77 2c                	ja     f012f72a <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012f6fe:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f706:	c1 e2 02             	shl    $0x2,%edx
f012f709:	01 d0                	add    %edx,%eax
f012f70b:	8b 00                	mov    (%eax),%eax
f012f70d:	85 c0                	test   %eax,%eax
f012f70f:	75 7a                	jne    f012f78b <check_boot_pgdir+0x192>
f012f711:	68 2a be 13 f0       	push   $0xf013be2a
f012f716:	68 26 bc 13 f0       	push   $0xf013bc26
f012f71b:	68 0f 01 00 00       	push   $0x10f
f012f720:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f725:	e8 7c 0a fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012f72a:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012f731:	76 2c                	jbe    f012f75f <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012f733:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f73b:	c1 e2 02             	shl    $0x2,%edx
f012f73e:	01 d0                	add    %edx,%eax
f012f740:	8b 00                	mov    (%eax),%eax
f012f742:	85 c0                	test   %eax,%eax
f012f744:	75 48                	jne    f012f78e <check_boot_pgdir+0x195>
f012f746:	68 2a be 13 f0       	push   $0xf013be2a
f012f74b:	68 26 bc 13 f0       	push   $0xf013bc26
f012f750:	68 13 01 00 00       	push   $0x113
f012f755:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f75a:	e8 47 0a fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012f75f:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f764:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f767:	c1 e2 02             	shl    $0x2,%edx
f012f76a:	01 d0                	add    %edx,%eax
f012f76c:	8b 00                	mov    (%eax),%eax
f012f76e:	85 c0                	test   %eax,%eax
f012f770:	74 1c                	je     f012f78e <check_boot_pgdir+0x195>
f012f772:	68 40 be 13 f0       	push   $0xf013be40
f012f777:	68 26 bc 13 f0       	push   $0xf013bc26
f012f77c:	68 15 01 00 00       	push   $0x115
f012f781:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f786:	e8 1b 0a fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012f78b:	90                   	nop
f012f78c:	eb 01                	jmp    f012f78f <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012f78e:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012f78f:	ff 45 f4             	incl   -0xc(%ebp)
f012f792:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012f799:	0f 86 44 ff ff ff    	jbe    f012f6e3 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012f79f:	83 ec 0c             	sub    $0xc,%esp
f012f7a2:	68 5c be 13 f0       	push   $0xf013be5c
f012f7a7:	e8 81 14 fd ff       	call   f0100c2d <cprintf>
f012f7ac:	83 c4 10             	add    $0x10,%esp
}
f012f7af:	90                   	nop
f012f7b0:	c9                   	leave  
f012f7b1:	c3                   	ret    

f012f7b2 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012f7b2:	55                   	push   %ebp
f012f7b3:	89 e5                	mov    %esp,%ebp
f012f7b5:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012f7b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7bb:	c1 e8 16             	shr    $0x16,%eax
f012f7be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f7c5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7c8:	01 d0                	add    %edx,%eax
f012f7ca:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012f7cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f7d0:	8b 00                	mov    (%eax),%eax
f012f7d2:	83 e0 01             	and    $0x1,%eax
f012f7d5:	85 c0                	test   %eax,%eax
f012f7d7:	75 0a                	jne    f012f7e3 <check_va2pa+0x31>
		return ~0;
f012f7d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f7de:	e9 87 00 00 00       	jmp    f012f86a <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012f7e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f7e6:	8b 00                	mov    (%eax),%eax
f012f7e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012f7ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f7f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f7f3:	c1 e8 0c             	shr    $0xc,%eax
f012f7f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f7f9:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f012f7fe:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012f801:	72 17                	jb     f012f81a <check_va2pa+0x68>
f012f803:	ff 75 f0             	pushl  -0x10(%ebp)
f012f806:	68 7c be 13 f0       	push   $0xf013be7c
f012f80b:	68 2b 01 00 00       	push   $0x12b
f012f810:	68 3b bc 13 f0       	push   $0xf013bc3b
f012f815:	e8 8c 09 fd ff       	call   f01001a6 <_panic>
f012f81a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f81d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012f822:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012f825:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f828:	c1 e8 0c             	shr    $0xc,%eax
f012f82b:	25 ff 03 00 00       	and    $0x3ff,%eax
f012f830:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f837:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f83a:	01 d0                	add    %edx,%eax
f012f83c:	8b 00                	mov    (%eax),%eax
f012f83e:	83 e0 01             	and    $0x1,%eax
f012f841:	85 c0                	test   %eax,%eax
f012f843:	75 07                	jne    f012f84c <check_va2pa+0x9a>
		return ~0;
f012f845:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f84a:	eb 1e                	jmp    f012f86a <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012f84c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f84f:	c1 e8 0c             	shr    $0xc,%eax
f012f852:	25 ff 03 00 00       	and    $0x3ff,%eax
f012f857:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f85e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f861:	01 d0                	add    %edx,%eax
f012f863:	8b 00                	mov    (%eax),%eax
f012f865:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012f86a:	c9                   	leave  
f012f86b:	c3                   	ret    

f012f86c <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012f86c:	55                   	push   %ebp
f012f86d:	89 e5                	mov    %esp,%ebp
f012f86f:	53                   	push   %ebx
f012f870:	83 ec 14             	sub    $0x14,%esp
f012f873:	8b 45 10             	mov    0x10(%ebp),%eax
f012f876:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f879:	8b 45 14             	mov    0x14(%ebp),%eax
f012f87c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012f87f:	8b 45 18             	mov    0x18(%ebp),%eax
f012f882:	ba 00 00 00 00       	mov    $0x0,%edx
f012f887:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012f88a:	77 55                	ja     f012f8e1 <printnum+0x75>
f012f88c:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012f88f:	72 05                	jb     f012f896 <printnum+0x2a>
f012f891:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f894:	77 4b                	ja     f012f8e1 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012f896:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012f899:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012f89c:	8b 45 18             	mov    0x18(%ebp),%eax
f012f89f:	ba 00 00 00 00       	mov    $0x0,%edx
f012f8a4:	52                   	push   %edx
f012f8a5:	50                   	push   %eax
f012f8a6:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8a9:	ff 75 f0             	pushl  -0x10(%ebp)
f012f8ac:	e8 e3 27 00 00       	call   f0132094 <__udivdi3>
f012f8b1:	83 c4 10             	add    $0x10,%esp
f012f8b4:	83 ec 04             	sub    $0x4,%esp
f012f8b7:	ff 75 20             	pushl  0x20(%ebp)
f012f8ba:	53                   	push   %ebx
f012f8bb:	ff 75 18             	pushl  0x18(%ebp)
f012f8be:	52                   	push   %edx
f012f8bf:	50                   	push   %eax
f012f8c0:	ff 75 0c             	pushl  0xc(%ebp)
f012f8c3:	ff 75 08             	pushl  0x8(%ebp)
f012f8c6:	e8 a1 ff ff ff       	call   f012f86c <printnum>
f012f8cb:	83 c4 20             	add    $0x20,%esp
f012f8ce:	eb 1a                	jmp    f012f8ea <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012f8d0:	83 ec 08             	sub    $0x8,%esp
f012f8d3:	ff 75 0c             	pushl  0xc(%ebp)
f012f8d6:	ff 75 20             	pushl  0x20(%ebp)
f012f8d9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8dc:	ff d0                	call   *%eax
f012f8de:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012f8e1:	ff 4d 1c             	decl   0x1c(%ebp)
f012f8e4:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012f8e8:	7f e6                	jg     f012f8d0 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012f8ea:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012f8ed:	bb 00 00 00 00       	mov    $0x0,%ebx
f012f8f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f8f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f8f8:	53                   	push   %ebx
f012f8f9:	51                   	push   %ecx
f012f8fa:	52                   	push   %edx
f012f8fb:	50                   	push   %eax
f012f8fc:	e8 a3 28 00 00       	call   f01321a4 <__umoddi3>
f012f901:	83 c4 10             	add    $0x10,%esp
f012f904:	05 d4 c0 13 f0       	add    $0xf013c0d4,%eax
f012f909:	8a 00                	mov    (%eax),%al
f012f90b:	0f be c0             	movsbl %al,%eax
f012f90e:	83 ec 08             	sub    $0x8,%esp
f012f911:	ff 75 0c             	pushl  0xc(%ebp)
f012f914:	50                   	push   %eax
f012f915:	8b 45 08             	mov    0x8(%ebp),%eax
f012f918:	ff d0                	call   *%eax
f012f91a:	83 c4 10             	add    $0x10,%esp
}
f012f91d:	90                   	nop
f012f91e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012f921:	c9                   	leave  
f012f922:	c3                   	ret    

f012f923 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012f923:	55                   	push   %ebp
f012f924:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012f926:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012f92a:	7e 1c                	jle    f012f948 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012f92c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f92f:	8b 00                	mov    (%eax),%eax
f012f931:	8d 50 08             	lea    0x8(%eax),%edx
f012f934:	8b 45 08             	mov    0x8(%ebp),%eax
f012f937:	89 10                	mov    %edx,(%eax)
f012f939:	8b 45 08             	mov    0x8(%ebp),%eax
f012f93c:	8b 00                	mov    (%eax),%eax
f012f93e:	83 e8 08             	sub    $0x8,%eax
f012f941:	8b 50 04             	mov    0x4(%eax),%edx
f012f944:	8b 00                	mov    (%eax),%eax
f012f946:	eb 40                	jmp    f012f988 <getuint+0x65>
	else if (lflag)
f012f948:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f94c:	74 1e                	je     f012f96c <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012f94e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f951:	8b 00                	mov    (%eax),%eax
f012f953:	8d 50 04             	lea    0x4(%eax),%edx
f012f956:	8b 45 08             	mov    0x8(%ebp),%eax
f012f959:	89 10                	mov    %edx,(%eax)
f012f95b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f95e:	8b 00                	mov    (%eax),%eax
f012f960:	83 e8 04             	sub    $0x4,%eax
f012f963:	8b 00                	mov    (%eax),%eax
f012f965:	ba 00 00 00 00       	mov    $0x0,%edx
f012f96a:	eb 1c                	jmp    f012f988 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012f96c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f96f:	8b 00                	mov    (%eax),%eax
f012f971:	8d 50 04             	lea    0x4(%eax),%edx
f012f974:	8b 45 08             	mov    0x8(%ebp),%eax
f012f977:	89 10                	mov    %edx,(%eax)
f012f979:	8b 45 08             	mov    0x8(%ebp),%eax
f012f97c:	8b 00                	mov    (%eax),%eax
f012f97e:	83 e8 04             	sub    $0x4,%eax
f012f981:	8b 00                	mov    (%eax),%eax
f012f983:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012f988:	5d                   	pop    %ebp
f012f989:	c3                   	ret    

f012f98a <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012f98a:	55                   	push   %ebp
f012f98b:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012f98d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012f991:	7e 1c                	jle    f012f9af <getint+0x25>
		return va_arg(*ap, long long);
f012f993:	8b 45 08             	mov    0x8(%ebp),%eax
f012f996:	8b 00                	mov    (%eax),%eax
f012f998:	8d 50 08             	lea    0x8(%eax),%edx
f012f99b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f99e:	89 10                	mov    %edx,(%eax)
f012f9a0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9a3:	8b 00                	mov    (%eax),%eax
f012f9a5:	83 e8 08             	sub    $0x8,%eax
f012f9a8:	8b 50 04             	mov    0x4(%eax),%edx
f012f9ab:	8b 00                	mov    (%eax),%eax
f012f9ad:	eb 38                	jmp    f012f9e7 <getint+0x5d>
	else if (lflag)
f012f9af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f9b3:	74 1a                	je     f012f9cf <getint+0x45>
		return va_arg(*ap, long);
f012f9b5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9b8:	8b 00                	mov    (%eax),%eax
f012f9ba:	8d 50 04             	lea    0x4(%eax),%edx
f012f9bd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9c0:	89 10                	mov    %edx,(%eax)
f012f9c2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9c5:	8b 00                	mov    (%eax),%eax
f012f9c7:	83 e8 04             	sub    $0x4,%eax
f012f9ca:	8b 00                	mov    (%eax),%eax
f012f9cc:	99                   	cltd   
f012f9cd:	eb 18                	jmp    f012f9e7 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012f9cf:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9d2:	8b 00                	mov    (%eax),%eax
f012f9d4:	8d 50 04             	lea    0x4(%eax),%edx
f012f9d7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9da:	89 10                	mov    %edx,(%eax)
f012f9dc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9df:	8b 00                	mov    (%eax),%eax
f012f9e1:	83 e8 04             	sub    $0x4,%eax
f012f9e4:	8b 00                	mov    (%eax),%eax
f012f9e6:	99                   	cltd   
}
f012f9e7:	5d                   	pop    %ebp
f012f9e8:	c3                   	ret    

f012f9e9 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012f9e9:	55                   	push   %ebp
f012f9ea:	89 e5                	mov    %esp,%ebp
f012f9ec:	56                   	push   %esi
f012f9ed:	53                   	push   %ebx
f012f9ee:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012f9f1:	eb 17                	jmp    f012fa0a <vprintfmt+0x21>
			if (ch == '\0')
f012f9f3:	85 db                	test   %ebx,%ebx
f012f9f5:	0f 84 af 03 00 00    	je     f012fdaa <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012f9fb:	83 ec 08             	sub    $0x8,%esp
f012f9fe:	ff 75 0c             	pushl  0xc(%ebp)
f012fa01:	53                   	push   %ebx
f012fa02:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa05:	ff d0                	call   *%eax
f012fa07:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012fa0a:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa0d:	8d 50 01             	lea    0x1(%eax),%edx
f012fa10:	89 55 10             	mov    %edx,0x10(%ebp)
f012fa13:	8a 00                	mov    (%eax),%al
f012fa15:	0f b6 d8             	movzbl %al,%ebx
f012fa18:	83 fb 25             	cmp    $0x25,%ebx
f012fa1b:	75 d6                	jne    f012f9f3 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012fa1d:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012fa21:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012fa28:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012fa2f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012fa36:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012fa3d:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa40:	8d 50 01             	lea    0x1(%eax),%edx
f012fa43:	89 55 10             	mov    %edx,0x10(%ebp)
f012fa46:	8a 00                	mov    (%eax),%al
f012fa48:	0f b6 d8             	movzbl %al,%ebx
f012fa4b:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012fa4e:	83 f8 55             	cmp    $0x55,%eax
f012fa51:	0f 87 2b 03 00 00    	ja     f012fd82 <vprintfmt+0x399>
f012fa57:	8b 04 85 f8 c0 13 f0 	mov    -0xfec3f08(,%eax,4),%eax
f012fa5e:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012fa60:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012fa64:	eb d7                	jmp    f012fa3d <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012fa66:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012fa6a:	eb d1                	jmp    f012fa3d <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fa6c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012fa73:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fa76:	89 d0                	mov    %edx,%eax
f012fa78:	c1 e0 02             	shl    $0x2,%eax
f012fa7b:	01 d0                	add    %edx,%eax
f012fa7d:	01 c0                	add    %eax,%eax
f012fa7f:	01 d8                	add    %ebx,%eax
f012fa81:	83 e8 30             	sub    $0x30,%eax
f012fa84:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012fa87:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa8a:	8a 00                	mov    (%eax),%al
f012fa8c:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012fa8f:	83 fb 2f             	cmp    $0x2f,%ebx
f012fa92:	7e 3e                	jle    f012fad2 <vprintfmt+0xe9>
f012fa94:	83 fb 39             	cmp    $0x39,%ebx
f012fa97:	7f 39                	jg     f012fad2 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fa99:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012fa9c:	eb d5                	jmp    f012fa73 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012fa9e:	8b 45 14             	mov    0x14(%ebp),%eax
f012faa1:	83 c0 04             	add    $0x4,%eax
f012faa4:	89 45 14             	mov    %eax,0x14(%ebp)
f012faa7:	8b 45 14             	mov    0x14(%ebp),%eax
f012faaa:	83 e8 04             	sub    $0x4,%eax
f012faad:	8b 00                	mov    (%eax),%eax
f012faaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012fab2:	eb 1f                	jmp    f012fad3 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012fab4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fab8:	79 83                	jns    f012fa3d <vprintfmt+0x54>
				width = 0;
f012faba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012fac1:	e9 77 ff ff ff       	jmp    f012fa3d <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012fac6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012facd:	e9 6b ff ff ff       	jmp    f012fa3d <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012fad2:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012fad3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fad7:	0f 89 60 ff ff ff    	jns    f012fa3d <vprintfmt+0x54>
				width = precision, precision = -1;
f012fadd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fae0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fae3:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012faea:	e9 4e ff ff ff       	jmp    f012fa3d <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012faef:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012faf2:	e9 46 ff ff ff       	jmp    f012fa3d <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012faf7:	8b 45 14             	mov    0x14(%ebp),%eax
f012fafa:	83 c0 04             	add    $0x4,%eax
f012fafd:	89 45 14             	mov    %eax,0x14(%ebp)
f012fb00:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb03:	83 e8 04             	sub    $0x4,%eax
f012fb06:	8b 00                	mov    (%eax),%eax
f012fb08:	83 ec 08             	sub    $0x8,%esp
f012fb0b:	ff 75 0c             	pushl  0xc(%ebp)
f012fb0e:	50                   	push   %eax
f012fb0f:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb12:	ff d0                	call   *%eax
f012fb14:	83 c4 10             	add    $0x10,%esp
			break;
f012fb17:	e9 89 02 00 00       	jmp    f012fda5 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012fb1c:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb1f:	83 c0 04             	add    $0x4,%eax
f012fb22:	89 45 14             	mov    %eax,0x14(%ebp)
f012fb25:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb28:	83 e8 04             	sub    $0x4,%eax
f012fb2b:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012fb2d:	85 db                	test   %ebx,%ebx
f012fb2f:	79 02                	jns    f012fb33 <vprintfmt+0x14a>
				err = -err;
f012fb31:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012fb33:	83 fb 64             	cmp    $0x64,%ebx
f012fb36:	7f 0b                	jg     f012fb43 <vprintfmt+0x15a>
f012fb38:	8b 34 9d 40 bf 13 f0 	mov    -0xfec40c0(,%ebx,4),%esi
f012fb3f:	85 f6                	test   %esi,%esi
f012fb41:	75 19                	jne    f012fb5c <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012fb43:	53                   	push   %ebx
f012fb44:	68 e5 c0 13 f0       	push   $0xf013c0e5
f012fb49:	ff 75 0c             	pushl  0xc(%ebp)
f012fb4c:	ff 75 08             	pushl  0x8(%ebp)
f012fb4f:	e8 5e 02 00 00       	call   f012fdb2 <printfmt>
f012fb54:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012fb57:	e9 49 02 00 00       	jmp    f012fda5 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012fb5c:	56                   	push   %esi
f012fb5d:	68 ee c0 13 f0       	push   $0xf013c0ee
f012fb62:	ff 75 0c             	pushl  0xc(%ebp)
f012fb65:	ff 75 08             	pushl  0x8(%ebp)
f012fb68:	e8 45 02 00 00       	call   f012fdb2 <printfmt>
f012fb6d:	83 c4 10             	add    $0x10,%esp
			break;
f012fb70:	e9 30 02 00 00       	jmp    f012fda5 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012fb75:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb78:	83 c0 04             	add    $0x4,%eax
f012fb7b:	89 45 14             	mov    %eax,0x14(%ebp)
f012fb7e:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb81:	83 e8 04             	sub    $0x4,%eax
f012fb84:	8b 30                	mov    (%eax),%esi
f012fb86:	85 f6                	test   %esi,%esi
f012fb88:	75 05                	jne    f012fb8f <vprintfmt+0x1a6>
				p = "(null)";
f012fb8a:	be f1 c0 13 f0       	mov    $0xf013c0f1,%esi
			if (width > 0 && padc != '-')
f012fb8f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fb93:	7e 6d                	jle    f012fc02 <vprintfmt+0x219>
f012fb95:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012fb99:	74 67                	je     f012fc02 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012fb9b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fb9e:	83 ec 08             	sub    $0x8,%esp
f012fba1:	50                   	push   %eax
f012fba2:	56                   	push   %esi
f012fba3:	e8 12 05 00 00       	call   f01300ba <strnlen>
f012fba8:	83 c4 10             	add    $0x10,%esp
f012fbab:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012fbae:	eb 16                	jmp    f012fbc6 <vprintfmt+0x1dd>
					putch(padc, putdat);
f012fbb0:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012fbb4:	83 ec 08             	sub    $0x8,%esp
f012fbb7:	ff 75 0c             	pushl  0xc(%ebp)
f012fbba:	50                   	push   %eax
f012fbbb:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbbe:	ff d0                	call   *%eax
f012fbc0:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012fbc3:	ff 4d e4             	decl   -0x1c(%ebp)
f012fbc6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fbca:	7f e4                	jg     f012fbb0 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012fbcc:	eb 34                	jmp    f012fc02 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012fbce:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fbd2:	74 1c                	je     f012fbf0 <vprintfmt+0x207>
f012fbd4:	83 fb 1f             	cmp    $0x1f,%ebx
f012fbd7:	7e 05                	jle    f012fbde <vprintfmt+0x1f5>
f012fbd9:	83 fb 7e             	cmp    $0x7e,%ebx
f012fbdc:	7e 12                	jle    f012fbf0 <vprintfmt+0x207>
					putch('?', putdat);
f012fbde:	83 ec 08             	sub    $0x8,%esp
f012fbe1:	ff 75 0c             	pushl  0xc(%ebp)
f012fbe4:	6a 3f                	push   $0x3f
f012fbe6:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbe9:	ff d0                	call   *%eax
f012fbeb:	83 c4 10             	add    $0x10,%esp
f012fbee:	eb 0f                	jmp    f012fbff <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012fbf0:	83 ec 08             	sub    $0x8,%esp
f012fbf3:	ff 75 0c             	pushl  0xc(%ebp)
f012fbf6:	53                   	push   %ebx
f012fbf7:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbfa:	ff d0                	call   *%eax
f012fbfc:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012fbff:	ff 4d e4             	decl   -0x1c(%ebp)
f012fc02:	89 f0                	mov    %esi,%eax
f012fc04:	8d 70 01             	lea    0x1(%eax),%esi
f012fc07:	8a 00                	mov    (%eax),%al
f012fc09:	0f be d8             	movsbl %al,%ebx
f012fc0c:	85 db                	test   %ebx,%ebx
f012fc0e:	74 24                	je     f012fc34 <vprintfmt+0x24b>
f012fc10:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012fc14:	78 b8                	js     f012fbce <vprintfmt+0x1e5>
f012fc16:	ff 4d e0             	decl   -0x20(%ebp)
f012fc19:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012fc1d:	79 af                	jns    f012fbce <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012fc1f:	eb 13                	jmp    f012fc34 <vprintfmt+0x24b>
				putch(' ', putdat);
f012fc21:	83 ec 08             	sub    $0x8,%esp
f012fc24:	ff 75 0c             	pushl  0xc(%ebp)
f012fc27:	6a 20                	push   $0x20
f012fc29:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc2c:	ff d0                	call   *%eax
f012fc2e:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012fc31:	ff 4d e4             	decl   -0x1c(%ebp)
f012fc34:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fc38:	7f e7                	jg     f012fc21 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012fc3a:	e9 66 01 00 00       	jmp    f012fda5 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012fc3f:	83 ec 08             	sub    $0x8,%esp
f012fc42:	ff 75 e8             	pushl  -0x18(%ebp)
f012fc45:	8d 45 14             	lea    0x14(%ebp),%eax
f012fc48:	50                   	push   %eax
f012fc49:	e8 3c fd ff ff       	call   f012f98a <getint>
f012fc4e:	83 c4 10             	add    $0x10,%esp
f012fc51:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc54:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012fc57:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc5d:	85 d2                	test   %edx,%edx
f012fc5f:	79 23                	jns    f012fc84 <vprintfmt+0x29b>
				putch('-', putdat);
f012fc61:	83 ec 08             	sub    $0x8,%esp
f012fc64:	ff 75 0c             	pushl  0xc(%ebp)
f012fc67:	6a 2d                	push   $0x2d
f012fc69:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc6c:	ff d0                	call   *%eax
f012fc6e:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012fc71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc77:	f7 d8                	neg    %eax
f012fc79:	83 d2 00             	adc    $0x0,%edx
f012fc7c:	f7 da                	neg    %edx
f012fc7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc81:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012fc84:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012fc8b:	e9 bc 00 00 00       	jmp    f012fd4c <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012fc90:	83 ec 08             	sub    $0x8,%esp
f012fc93:	ff 75 e8             	pushl  -0x18(%ebp)
f012fc96:	8d 45 14             	lea    0x14(%ebp),%eax
f012fc99:	50                   	push   %eax
f012fc9a:	e8 84 fc ff ff       	call   f012f923 <getuint>
f012fc9f:	83 c4 10             	add    $0x10,%esp
f012fca2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fca5:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012fca8:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012fcaf:	e9 98 00 00 00       	jmp    f012fd4c <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012fcb4:	83 ec 08             	sub    $0x8,%esp
f012fcb7:	ff 75 0c             	pushl  0xc(%ebp)
f012fcba:	6a 58                	push   $0x58
f012fcbc:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcbf:	ff d0                	call   *%eax
f012fcc1:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012fcc4:	83 ec 08             	sub    $0x8,%esp
f012fcc7:	ff 75 0c             	pushl  0xc(%ebp)
f012fcca:	6a 58                	push   $0x58
f012fccc:	8b 45 08             	mov    0x8(%ebp),%eax
f012fccf:	ff d0                	call   *%eax
f012fcd1:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012fcd4:	83 ec 08             	sub    $0x8,%esp
f012fcd7:	ff 75 0c             	pushl  0xc(%ebp)
f012fcda:	6a 58                	push   $0x58
f012fcdc:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcdf:	ff d0                	call   *%eax
f012fce1:	83 c4 10             	add    $0x10,%esp
			break;
f012fce4:	e9 bc 00 00 00       	jmp    f012fda5 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012fce9:	83 ec 08             	sub    $0x8,%esp
f012fcec:	ff 75 0c             	pushl  0xc(%ebp)
f012fcef:	6a 30                	push   $0x30
f012fcf1:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcf4:	ff d0                	call   *%eax
f012fcf6:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012fcf9:	83 ec 08             	sub    $0x8,%esp
f012fcfc:	ff 75 0c             	pushl  0xc(%ebp)
f012fcff:	6a 78                	push   $0x78
f012fd01:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd04:	ff d0                	call   *%eax
f012fd06:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012fd09:	8b 45 14             	mov    0x14(%ebp),%eax
f012fd0c:	83 c0 04             	add    $0x4,%eax
f012fd0f:	89 45 14             	mov    %eax,0x14(%ebp)
f012fd12:	8b 45 14             	mov    0x14(%ebp),%eax
f012fd15:	83 e8 04             	sub    $0x4,%eax
f012fd18:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012fd1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fd1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012fd24:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012fd2b:	eb 1f                	jmp    f012fd4c <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012fd2d:	83 ec 08             	sub    $0x8,%esp
f012fd30:	ff 75 e8             	pushl  -0x18(%ebp)
f012fd33:	8d 45 14             	lea    0x14(%ebp),%eax
f012fd36:	50                   	push   %eax
f012fd37:	e8 e7 fb ff ff       	call   f012f923 <getuint>
f012fd3c:	83 c4 10             	add    $0x10,%esp
f012fd3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fd42:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012fd45:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012fd4c:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012fd50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fd53:	83 ec 04             	sub    $0x4,%esp
f012fd56:	52                   	push   %edx
f012fd57:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fd5a:	50                   	push   %eax
f012fd5b:	ff 75 f4             	pushl  -0xc(%ebp)
f012fd5e:	ff 75 f0             	pushl  -0x10(%ebp)
f012fd61:	ff 75 0c             	pushl  0xc(%ebp)
f012fd64:	ff 75 08             	pushl  0x8(%ebp)
f012fd67:	e8 00 fb ff ff       	call   f012f86c <printnum>
f012fd6c:	83 c4 20             	add    $0x20,%esp
			break;
f012fd6f:	eb 34                	jmp    f012fda5 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012fd71:	83 ec 08             	sub    $0x8,%esp
f012fd74:	ff 75 0c             	pushl  0xc(%ebp)
f012fd77:	53                   	push   %ebx
f012fd78:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd7b:	ff d0                	call   *%eax
f012fd7d:	83 c4 10             	add    $0x10,%esp
			break;
f012fd80:	eb 23                	jmp    f012fda5 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012fd82:	83 ec 08             	sub    $0x8,%esp
f012fd85:	ff 75 0c             	pushl  0xc(%ebp)
f012fd88:	6a 25                	push   $0x25
f012fd8a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd8d:	ff d0                	call   *%eax
f012fd8f:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012fd92:	ff 4d 10             	decl   0x10(%ebp)
f012fd95:	eb 03                	jmp    f012fd9a <vprintfmt+0x3b1>
f012fd97:	ff 4d 10             	decl   0x10(%ebp)
f012fd9a:	8b 45 10             	mov    0x10(%ebp),%eax
f012fd9d:	48                   	dec    %eax
f012fd9e:	8a 00                	mov    (%eax),%al
f012fda0:	3c 25                	cmp    $0x25,%al
f012fda2:	75 f3                	jne    f012fd97 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012fda4:	90                   	nop
		}
	}
f012fda5:	e9 47 fc ff ff       	jmp    f012f9f1 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012fdaa:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012fdab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fdae:	5b                   	pop    %ebx
f012fdaf:	5e                   	pop    %esi
f012fdb0:	5d                   	pop    %ebp
f012fdb1:	c3                   	ret    

f012fdb2 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012fdb2:	55                   	push   %ebp
f012fdb3:	89 e5                	mov    %esp,%ebp
f012fdb5:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012fdb8:	8d 45 10             	lea    0x10(%ebp),%eax
f012fdbb:	83 c0 04             	add    $0x4,%eax
f012fdbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012fdc1:	8b 45 10             	mov    0x10(%ebp),%eax
f012fdc4:	ff 75 f4             	pushl  -0xc(%ebp)
f012fdc7:	50                   	push   %eax
f012fdc8:	ff 75 0c             	pushl  0xc(%ebp)
f012fdcb:	ff 75 08             	pushl  0x8(%ebp)
f012fdce:	e8 16 fc ff ff       	call   f012f9e9 <vprintfmt>
f012fdd3:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012fdd6:	90                   	nop
f012fdd7:	c9                   	leave  
f012fdd8:	c3                   	ret    

f012fdd9 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012fdd9:	55                   	push   %ebp
f012fdda:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012fddc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fddf:	8b 40 08             	mov    0x8(%eax),%eax
f012fde2:	8d 50 01             	lea    0x1(%eax),%edx
f012fde5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fde8:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012fdeb:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdee:	8b 10                	mov    (%eax),%edx
f012fdf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdf3:	8b 40 04             	mov    0x4(%eax),%eax
f012fdf6:	39 c2                	cmp    %eax,%edx
f012fdf8:	73 12                	jae    f012fe0c <sprintputch+0x33>
		*b->buf++ = ch;
f012fdfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdfd:	8b 00                	mov    (%eax),%eax
f012fdff:	8d 48 01             	lea    0x1(%eax),%ecx
f012fe02:	8b 55 0c             	mov    0xc(%ebp),%edx
f012fe05:	89 0a                	mov    %ecx,(%edx)
f012fe07:	8b 55 08             	mov    0x8(%ebp),%edx
f012fe0a:	88 10                	mov    %dl,(%eax)
}
f012fe0c:	90                   	nop
f012fe0d:	5d                   	pop    %ebp
f012fe0e:	c3                   	ret    

f012fe0f <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012fe0f:	55                   	push   %ebp
f012fe10:	89 e5                	mov    %esp,%ebp
f012fe12:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012fe15:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe18:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fe1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fe1e:	8d 50 ff             	lea    -0x1(%eax),%edx
f012fe21:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe24:	01 d0                	add    %edx,%eax
f012fe26:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fe29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012fe30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fe34:	74 06                	je     f012fe3c <vsnprintf+0x2d>
f012fe36:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fe3a:	7f 07                	jg     f012fe43 <vsnprintf+0x34>
		return -E_INVAL;
f012fe3c:	b8 03 00 00 00       	mov    $0x3,%eax
f012fe41:	eb 20                	jmp    f012fe63 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012fe43:	ff 75 14             	pushl  0x14(%ebp)
f012fe46:	ff 75 10             	pushl  0x10(%ebp)
f012fe49:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012fe4c:	50                   	push   %eax
f012fe4d:	68 d9 fd 12 f0       	push   $0xf012fdd9
f012fe52:	e8 92 fb ff ff       	call   f012f9e9 <vprintfmt>
f012fe57:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012fe5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fe5d:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012fe60:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012fe63:	c9                   	leave  
f012fe64:	c3                   	ret    

f012fe65 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012fe65:	55                   	push   %ebp
f012fe66:	89 e5                	mov    %esp,%ebp
f012fe68:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012fe6b:	8d 45 10             	lea    0x10(%ebp),%eax
f012fe6e:	83 c0 04             	add    $0x4,%eax
f012fe71:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012fe74:	8b 45 10             	mov    0x10(%ebp),%eax
f012fe77:	ff 75 f4             	pushl  -0xc(%ebp)
f012fe7a:	50                   	push   %eax
f012fe7b:	ff 75 0c             	pushl  0xc(%ebp)
f012fe7e:	ff 75 08             	pushl  0x8(%ebp)
f012fe81:	e8 89 ff ff ff       	call   f012fe0f <vsnprintf>
f012fe86:	83 c4 10             	add    $0x10,%esp
f012fe89:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012fe8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012fe8f:	c9                   	leave  
f012fe90:	c3                   	ret    

f012fe91 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012fe91:	55                   	push   %ebp
f012fe92:	89 e5                	mov    %esp,%ebp
f012fe94:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012fe97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fe9b:	74 13                	je     f012feb0 <readline+0x1f>
		cprintf("%s", prompt);
f012fe9d:	83 ec 08             	sub    $0x8,%esp
f012fea0:	ff 75 08             	pushl  0x8(%ebp)
f012fea3:	68 50 c2 13 f0       	push   $0xf013c250
f012fea8:	e8 80 0d fd ff       	call   f0100c2d <cprintf>
f012fead:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012feb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012feb7:	83 ec 0c             	sub    $0xc,%esp
f012feba:	6a 00                	push   $0x0
f012febc:	e8 19 0d fd ff       	call   f0100bda <iscons>
f012fec1:	83 c4 10             	add    $0x10,%esp
f012fec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012fec7:	e8 f5 0c fd ff       	call   f0100bc1 <getchar>
f012fecc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012fecf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012fed3:	79 22                	jns    f012fef7 <readline+0x66>
			if (c != -E_EOF)
f012fed5:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012fed9:	0f 84 ad 00 00 00    	je     f012ff8c <readline+0xfb>
				cprintf("read error: %e\n", c);
f012fedf:	83 ec 08             	sub    $0x8,%esp
f012fee2:	ff 75 ec             	pushl  -0x14(%ebp)
f012fee5:	68 53 c2 13 f0       	push   $0xf013c253
f012feea:	e8 3e 0d fd ff       	call   f0100c2d <cprintf>
f012feef:	83 c4 10             	add    $0x10,%esp
			return;
f012fef2:	e9 95 00 00 00       	jmp    f012ff8c <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012fef7:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012fefb:	7e 34                	jle    f012ff31 <readline+0xa0>
f012fefd:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ff04:	7f 2b                	jg     f012ff31 <readline+0xa0>
			if (echoing)
f012ff06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff0a:	74 0e                	je     f012ff1a <readline+0x89>
				cputchar(c);
f012ff0c:	83 ec 0c             	sub    $0xc,%esp
f012ff0f:	ff 75 ec             	pushl  -0x14(%ebp)
f012ff12:	e8 93 0c fd ff       	call   f0100baa <cputchar>
f012ff17:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ff1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff1d:	8d 50 01             	lea    0x1(%eax),%edx
f012ff20:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ff23:	89 c2                	mov    %eax,%edx
f012ff25:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ff28:	01 d0                	add    %edx,%eax
f012ff2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ff2d:	88 10                	mov    %dl,(%eax)
f012ff2f:	eb 56                	jmp    f012ff87 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012ff31:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ff35:	75 1f                	jne    f012ff56 <readline+0xc5>
f012ff37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ff3b:	7e 19                	jle    f012ff56 <readline+0xc5>
			if (echoing)
f012ff3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff41:	74 0e                	je     f012ff51 <readline+0xc0>
				cputchar(c);
f012ff43:	83 ec 0c             	sub    $0xc,%esp
f012ff46:	ff 75 ec             	pushl  -0x14(%ebp)
f012ff49:	e8 5c 0c fd ff       	call   f0100baa <cputchar>
f012ff4e:	83 c4 10             	add    $0x10,%esp

			i--;
f012ff51:	ff 4d f4             	decl   -0xc(%ebp)
f012ff54:	eb 31                	jmp    f012ff87 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012ff56:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ff5a:	74 0a                	je     f012ff66 <readline+0xd5>
f012ff5c:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ff60:	0f 85 61 ff ff ff    	jne    f012fec7 <readline+0x36>
			if (echoing)
f012ff66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff6a:	74 0e                	je     f012ff7a <readline+0xe9>
				cputchar(c);
f012ff6c:	83 ec 0c             	sub    $0xc,%esp
f012ff6f:	ff 75 ec             	pushl  -0x14(%ebp)
f012ff72:	e8 33 0c fd ff       	call   f0100baa <cputchar>
f012ff77:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ff7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ff80:	01 d0                	add    %edx,%eax
f012ff82:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ff85:	eb 06                	jmp    f012ff8d <readline+0xfc>
		}
	}
f012ff87:	e9 3b ff ff ff       	jmp    f012fec7 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012ff8c:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012ff8d:	c9                   	leave  
f012ff8e:	c3                   	ret    

f012ff8f <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012ff8f:	55                   	push   %ebp
f012ff90:	89 e5                	mov    %esp,%ebp
f012ff92:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ff95:	e8 b1 bf fd ff       	call   f010bf4b <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ff9a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ff9e:	74 13                	je     f012ffb3 <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ffa0:	83 ec 08             	sub    $0x8,%esp
f012ffa3:	ff 75 08             	pushl  0x8(%ebp)
f012ffa6:	68 50 c2 13 f0       	push   $0xf013c250
f012ffab:	e8 7d 0c fd ff       	call   f0100c2d <cprintf>
f012ffb0:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ffb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ffba:	83 ec 0c             	sub    $0xc,%esp
f012ffbd:	6a 00                	push   $0x0
f012ffbf:	e8 16 0c fd ff       	call   f0100bda <iscons>
f012ffc4:	83 c4 10             	add    $0x10,%esp
f012ffc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ffca:	e8 f2 0b fd ff       	call   f0100bc1 <getchar>
f012ffcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ffd2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ffd6:	79 23                	jns    f012fffb <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ffd8:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ffdc:	74 13                	je     f012fff1 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ffde:	83 ec 08             	sub    $0x8,%esp
f012ffe1:	ff 75 ec             	pushl  -0x14(%ebp)
f012ffe4:	68 53 c2 13 f0       	push   $0xf013c253
f012ffe9:	e8 3f 0c fd ff       	call   f0100c2d <cprintf>
f012ffee:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012fff1:	e8 6f bf fd ff       	call   f010bf65 <sys_enable_interrupt>
			return;
f012fff6:	e9 9a 00 00 00       	jmp    f0130095 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012fffb:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ffff:	7e 34                	jle    f0130035 <atomic_readline+0xa6>
f0130001:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130008:	7f 2b                	jg     f0130035 <atomic_readline+0xa6>
			if (echoing)
f013000a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013000e:	74 0e                	je     f013001e <atomic_readline+0x8f>
				cputchar(c);
f0130010:	83 ec 0c             	sub    $0xc,%esp
f0130013:	ff 75 ec             	pushl  -0x14(%ebp)
f0130016:	e8 8f 0b fd ff       	call   f0100baa <cputchar>
f013001b:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013001e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130021:	8d 50 01             	lea    0x1(%eax),%edx
f0130024:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130027:	89 c2                	mov    %eax,%edx
f0130029:	8b 45 0c             	mov    0xc(%ebp),%eax
f013002c:	01 d0                	add    %edx,%eax
f013002e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130031:	88 10                	mov    %dl,(%eax)
f0130033:	eb 5b                	jmp    f0130090 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130035:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130039:	75 1f                	jne    f013005a <atomic_readline+0xcb>
f013003b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013003f:	7e 19                	jle    f013005a <atomic_readline+0xcb>
			if (echoing)
f0130041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130045:	74 0e                	je     f0130055 <atomic_readline+0xc6>
				cputchar(c);
f0130047:	83 ec 0c             	sub    $0xc,%esp
f013004a:	ff 75 ec             	pushl  -0x14(%ebp)
f013004d:	e8 58 0b fd ff       	call   f0100baa <cputchar>
f0130052:	83 c4 10             	add    $0x10,%esp
			i--;
f0130055:	ff 4d f4             	decl   -0xc(%ebp)
f0130058:	eb 36                	jmp    f0130090 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f013005a:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013005e:	74 0a                	je     f013006a <atomic_readline+0xdb>
f0130060:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130064:	0f 85 60 ff ff ff    	jne    f012ffca <atomic_readline+0x3b>
			if (echoing)
f013006a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013006e:	74 0e                	je     f013007e <atomic_readline+0xef>
				cputchar(c);
f0130070:	83 ec 0c             	sub    $0xc,%esp
f0130073:	ff 75 ec             	pushl  -0x14(%ebp)
f0130076:	e8 2f 0b fd ff       	call   f0100baa <cputchar>
f013007b:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f013007e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130081:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130084:	01 d0                	add    %edx,%eax
f0130086:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130089:	e8 d7 be fd ff       	call   f010bf65 <sys_enable_interrupt>
			return;
f013008e:	eb 05                	jmp    f0130095 <atomic_readline+0x106>
		}
	}
f0130090:	e9 35 ff ff ff       	jmp    f012ffca <atomic_readline+0x3b>
}
f0130095:	c9                   	leave  
f0130096:	c3                   	ret    

f0130097 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130097:	55                   	push   %ebp
f0130098:	89 e5                	mov    %esp,%ebp
f013009a:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f013009d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01300a4:	eb 06                	jmp    f01300ac <strlen+0x15>
		n++;
f01300a6:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01300a9:	ff 45 08             	incl   0x8(%ebp)
f01300ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01300af:	8a 00                	mov    (%eax),%al
f01300b1:	84 c0                	test   %al,%al
f01300b3:	75 f1                	jne    f01300a6 <strlen+0xf>
		n++;
	return n;
f01300b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01300b8:	c9                   	leave  
f01300b9:	c3                   	ret    

f01300ba <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01300ba:	55                   	push   %ebp
f01300bb:	89 e5                	mov    %esp,%ebp
f01300bd:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01300c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01300c7:	eb 09                	jmp    f01300d2 <strnlen+0x18>
		n++;
f01300c9:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01300cc:	ff 45 08             	incl   0x8(%ebp)
f01300cf:	ff 4d 0c             	decl   0xc(%ebp)
f01300d2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01300d6:	74 09                	je     f01300e1 <strnlen+0x27>
f01300d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01300db:	8a 00                	mov    (%eax),%al
f01300dd:	84 c0                	test   %al,%al
f01300df:	75 e8                	jne    f01300c9 <strnlen+0xf>
		n++;
	return n;
f01300e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01300e4:	c9                   	leave  
f01300e5:	c3                   	ret    

f01300e6 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01300e6:	55                   	push   %ebp
f01300e7:	89 e5                	mov    %esp,%ebp
f01300e9:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01300ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01300ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01300f2:	90                   	nop
f01300f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01300f6:	8d 50 01             	lea    0x1(%eax),%edx
f01300f9:	89 55 08             	mov    %edx,0x8(%ebp)
f01300fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01300ff:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130102:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130105:	8a 12                	mov    (%edx),%dl
f0130107:	88 10                	mov    %dl,(%eax)
f0130109:	8a 00                	mov    (%eax),%al
f013010b:	84 c0                	test   %al,%al
f013010d:	75 e4                	jne    f01300f3 <strcpy+0xd>
		/* do nothing */;
	return ret;
f013010f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130112:	c9                   	leave  
f0130113:	c3                   	ret    

f0130114 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0130114:	55                   	push   %ebp
f0130115:	89 e5                	mov    %esp,%ebp
f0130117:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f013011a:	8b 45 08             	mov    0x8(%ebp),%eax
f013011d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0130120:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130127:	eb 1f                	jmp    f0130148 <strncpy+0x34>
		*dst++ = *src;
f0130129:	8b 45 08             	mov    0x8(%ebp),%eax
f013012c:	8d 50 01             	lea    0x1(%eax),%edx
f013012f:	89 55 08             	mov    %edx,0x8(%ebp)
f0130132:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130135:	8a 12                	mov    (%edx),%dl
f0130137:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130139:	8b 45 0c             	mov    0xc(%ebp),%eax
f013013c:	8a 00                	mov    (%eax),%al
f013013e:	84 c0                	test   %al,%al
f0130140:	74 03                	je     f0130145 <strncpy+0x31>
			src++;
f0130142:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130145:	ff 45 fc             	incl   -0x4(%ebp)
f0130148:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013014b:	3b 45 10             	cmp    0x10(%ebp),%eax
f013014e:	72 d9                	jb     f0130129 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0130150:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130153:	c9                   	leave  
f0130154:	c3                   	ret    

f0130155 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130155:	55                   	push   %ebp
f0130156:	89 e5                	mov    %esp,%ebp
f0130158:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f013015b:	8b 45 08             	mov    0x8(%ebp),%eax
f013015e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130161:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130165:	74 30                	je     f0130197 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130167:	eb 16                	jmp    f013017f <strlcpy+0x2a>
			*dst++ = *src++;
f0130169:	8b 45 08             	mov    0x8(%ebp),%eax
f013016c:	8d 50 01             	lea    0x1(%eax),%edx
f013016f:	89 55 08             	mov    %edx,0x8(%ebp)
f0130172:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130175:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130178:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f013017b:	8a 12                	mov    (%edx),%dl
f013017d:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f013017f:	ff 4d 10             	decl   0x10(%ebp)
f0130182:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130186:	74 09                	je     f0130191 <strlcpy+0x3c>
f0130188:	8b 45 0c             	mov    0xc(%ebp),%eax
f013018b:	8a 00                	mov    (%eax),%al
f013018d:	84 c0                	test   %al,%al
f013018f:	75 d8                	jne    f0130169 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130191:	8b 45 08             	mov    0x8(%ebp),%eax
f0130194:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130197:	8b 55 08             	mov    0x8(%ebp),%edx
f013019a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013019d:	29 c2                	sub    %eax,%edx
f013019f:	89 d0                	mov    %edx,%eax
}
f01301a1:	c9                   	leave  
f01301a2:	c3                   	ret    

f01301a3 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01301a3:	55                   	push   %ebp
f01301a4:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01301a6:	eb 06                	jmp    f01301ae <strcmp+0xb>
		p++, q++;
f01301a8:	ff 45 08             	incl   0x8(%ebp)
f01301ab:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01301ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01301b1:	8a 00                	mov    (%eax),%al
f01301b3:	84 c0                	test   %al,%al
f01301b5:	74 0e                	je     f01301c5 <strcmp+0x22>
f01301b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01301ba:	8a 10                	mov    (%eax),%dl
f01301bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301bf:	8a 00                	mov    (%eax),%al
f01301c1:	38 c2                	cmp    %al,%dl
f01301c3:	74 e3                	je     f01301a8 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01301c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01301c8:	8a 00                	mov    (%eax),%al
f01301ca:	0f b6 d0             	movzbl %al,%edx
f01301cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301d0:	8a 00                	mov    (%eax),%al
f01301d2:	0f b6 c0             	movzbl %al,%eax
f01301d5:	29 c2                	sub    %eax,%edx
f01301d7:	89 d0                	mov    %edx,%eax
}
f01301d9:	5d                   	pop    %ebp
f01301da:	c3                   	ret    

f01301db <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01301db:	55                   	push   %ebp
f01301dc:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01301de:	eb 09                	jmp    f01301e9 <strncmp+0xe>
		n--, p++, q++;
f01301e0:	ff 4d 10             	decl   0x10(%ebp)
f01301e3:	ff 45 08             	incl   0x8(%ebp)
f01301e6:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01301e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01301ed:	74 17                	je     f0130206 <strncmp+0x2b>
f01301ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01301f2:	8a 00                	mov    (%eax),%al
f01301f4:	84 c0                	test   %al,%al
f01301f6:	74 0e                	je     f0130206 <strncmp+0x2b>
f01301f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01301fb:	8a 10                	mov    (%eax),%dl
f01301fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130200:	8a 00                	mov    (%eax),%al
f0130202:	38 c2                	cmp    %al,%dl
f0130204:	74 da                	je     f01301e0 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0130206:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013020a:	75 07                	jne    f0130213 <strncmp+0x38>
		return 0;
f013020c:	b8 00 00 00 00       	mov    $0x0,%eax
f0130211:	eb 14                	jmp    f0130227 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0130213:	8b 45 08             	mov    0x8(%ebp),%eax
f0130216:	8a 00                	mov    (%eax),%al
f0130218:	0f b6 d0             	movzbl %al,%edx
f013021b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013021e:	8a 00                	mov    (%eax),%al
f0130220:	0f b6 c0             	movzbl %al,%eax
f0130223:	29 c2                	sub    %eax,%edx
f0130225:	89 d0                	mov    %edx,%eax
}
f0130227:	5d                   	pop    %ebp
f0130228:	c3                   	ret    

f0130229 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0130229:	55                   	push   %ebp
f013022a:	89 e5                	mov    %esp,%ebp
f013022c:	83 ec 04             	sub    $0x4,%esp
f013022f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130232:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130235:	eb 12                	jmp    f0130249 <strchr+0x20>
		if (*s == c)
f0130237:	8b 45 08             	mov    0x8(%ebp),%eax
f013023a:	8a 00                	mov    (%eax),%al
f013023c:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013023f:	75 05                	jne    f0130246 <strchr+0x1d>
			return (char *) s;
f0130241:	8b 45 08             	mov    0x8(%ebp),%eax
f0130244:	eb 11                	jmp    f0130257 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130246:	ff 45 08             	incl   0x8(%ebp)
f0130249:	8b 45 08             	mov    0x8(%ebp),%eax
f013024c:	8a 00                	mov    (%eax),%al
f013024e:	84 c0                	test   %al,%al
f0130250:	75 e5                	jne    f0130237 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130252:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130257:	c9                   	leave  
f0130258:	c3                   	ret    

f0130259 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130259:	55                   	push   %ebp
f013025a:	89 e5                	mov    %esp,%ebp
f013025c:	83 ec 04             	sub    $0x4,%esp
f013025f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130262:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130265:	eb 0d                	jmp    f0130274 <strfind+0x1b>
		if (*s == c)
f0130267:	8b 45 08             	mov    0x8(%ebp),%eax
f013026a:	8a 00                	mov    (%eax),%al
f013026c:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013026f:	74 0e                	je     f013027f <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130271:	ff 45 08             	incl   0x8(%ebp)
f0130274:	8b 45 08             	mov    0x8(%ebp),%eax
f0130277:	8a 00                	mov    (%eax),%al
f0130279:	84 c0                	test   %al,%al
f013027b:	75 ea                	jne    f0130267 <strfind+0xe>
f013027d:	eb 01                	jmp    f0130280 <strfind+0x27>
		if (*s == c)
			break;
f013027f:	90                   	nop
	return (char *) s;
f0130280:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130283:	c9                   	leave  
f0130284:	c3                   	ret    

f0130285 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130285:	55                   	push   %ebp
f0130286:	89 e5                	mov    %esp,%ebp
f0130288:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f013028b:	8b 45 08             	mov    0x8(%ebp),%eax
f013028e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130291:	8b 45 10             	mov    0x10(%ebp),%eax
f0130294:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130297:	eb 0e                	jmp    f01302a7 <memset+0x22>
		*p++ = c;
f0130299:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013029c:	8d 50 01             	lea    0x1(%eax),%edx
f013029f:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01302a2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01302a5:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01302a7:	ff 4d f8             	decl   -0x8(%ebp)
f01302aa:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01302ae:	79 e9                	jns    f0130299 <memset+0x14>
		*p++ = c;

	return v;
f01302b0:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01302b3:	c9                   	leave  
f01302b4:	c3                   	ret    

f01302b5 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01302b5:	55                   	push   %ebp
f01302b6:	89 e5                	mov    %esp,%ebp
f01302b8:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01302bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01302be:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01302c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01302c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01302c7:	eb 16                	jmp    f01302df <memcpy+0x2a>
		*d++ = *s++;
f01302c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01302cc:	8d 50 01             	lea    0x1(%eax),%edx
f01302cf:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01302d2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01302d5:	8d 4a 01             	lea    0x1(%edx),%ecx
f01302d8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01302db:	8a 12                	mov    (%edx),%dl
f01302dd:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01302df:	8b 45 10             	mov    0x10(%ebp),%eax
f01302e2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01302e5:	89 55 10             	mov    %edx,0x10(%ebp)
f01302e8:	85 c0                	test   %eax,%eax
f01302ea:	75 dd                	jne    f01302c9 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f01302ec:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01302ef:	c9                   	leave  
f01302f0:	c3                   	ret    

f01302f1 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f01302f1:	55                   	push   %ebp
f01302f2:	89 e5                	mov    %esp,%ebp
f01302f4:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01302f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01302fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01302fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130300:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130303:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130306:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130309:	73 50                	jae    f013035b <memmove+0x6a>
f013030b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013030e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130311:	01 d0                	add    %edx,%eax
f0130313:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130316:	76 43                	jbe    f013035b <memmove+0x6a>
		s += n;
f0130318:	8b 45 10             	mov    0x10(%ebp),%eax
f013031b:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f013031e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130321:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0130324:	eb 10                	jmp    f0130336 <memmove+0x45>
			*--d = *--s;
f0130326:	ff 4d f8             	decl   -0x8(%ebp)
f0130329:	ff 4d fc             	decl   -0x4(%ebp)
f013032c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013032f:	8a 10                	mov    (%eax),%dl
f0130331:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130334:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0130336:	8b 45 10             	mov    0x10(%ebp),%eax
f0130339:	8d 50 ff             	lea    -0x1(%eax),%edx
f013033c:	89 55 10             	mov    %edx,0x10(%ebp)
f013033f:	85 c0                	test   %eax,%eax
f0130341:	75 e3                	jne    f0130326 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0130343:	eb 23                	jmp    f0130368 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0130345:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130348:	8d 50 01             	lea    0x1(%eax),%edx
f013034b:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013034e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130351:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130354:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130357:	8a 12                	mov    (%edx),%dl
f0130359:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f013035b:	8b 45 10             	mov    0x10(%ebp),%eax
f013035e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130361:	89 55 10             	mov    %edx,0x10(%ebp)
f0130364:	85 c0                	test   %eax,%eax
f0130366:	75 dd                	jne    f0130345 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0130368:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013036b:	c9                   	leave  
f013036c:	c3                   	ret    

f013036d <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f013036d:	55                   	push   %ebp
f013036e:	89 e5                	mov    %esp,%ebp
f0130370:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130373:	8b 45 08             	mov    0x8(%ebp),%eax
f0130376:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130379:	8b 45 0c             	mov    0xc(%ebp),%eax
f013037c:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f013037f:	eb 2a                	jmp    f01303ab <memcmp+0x3e>
		if (*s1 != *s2)
f0130381:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130384:	8a 10                	mov    (%eax),%dl
f0130386:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130389:	8a 00                	mov    (%eax),%al
f013038b:	38 c2                	cmp    %al,%dl
f013038d:	74 16                	je     f01303a5 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f013038f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130392:	8a 00                	mov    (%eax),%al
f0130394:	0f b6 d0             	movzbl %al,%edx
f0130397:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013039a:	8a 00                	mov    (%eax),%al
f013039c:	0f b6 c0             	movzbl %al,%eax
f013039f:	29 c2                	sub    %eax,%edx
f01303a1:	89 d0                	mov    %edx,%eax
f01303a3:	eb 18                	jmp    f01303bd <memcmp+0x50>
		s1++, s2++;
f01303a5:	ff 45 fc             	incl   -0x4(%ebp)
f01303a8:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01303ab:	8b 45 10             	mov    0x10(%ebp),%eax
f01303ae:	8d 50 ff             	lea    -0x1(%eax),%edx
f01303b1:	89 55 10             	mov    %edx,0x10(%ebp)
f01303b4:	85 c0                	test   %eax,%eax
f01303b6:	75 c9                	jne    f0130381 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01303b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01303bd:	c9                   	leave  
f01303be:	c3                   	ret    

f01303bf <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01303bf:	55                   	push   %ebp
f01303c0:	89 e5                	mov    %esp,%ebp
f01303c2:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01303c5:	8b 55 08             	mov    0x8(%ebp),%edx
f01303c8:	8b 45 10             	mov    0x10(%ebp),%eax
f01303cb:	01 d0                	add    %edx,%eax
f01303cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01303d0:	eb 15                	jmp    f01303e7 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01303d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01303d5:	8a 00                	mov    (%eax),%al
f01303d7:	0f b6 d0             	movzbl %al,%edx
f01303da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303dd:	0f b6 c0             	movzbl %al,%eax
f01303e0:	39 c2                	cmp    %eax,%edx
f01303e2:	74 0d                	je     f01303f1 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01303e4:	ff 45 08             	incl   0x8(%ebp)
f01303e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01303ea:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01303ed:	72 e3                	jb     f01303d2 <memfind+0x13>
f01303ef:	eb 01                	jmp    f01303f2 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f01303f1:	90                   	nop
	return (void *) s;
f01303f2:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01303f5:	c9                   	leave  
f01303f6:	c3                   	ret    

f01303f7 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f01303f7:	55                   	push   %ebp
f01303f8:	89 e5                	mov    %esp,%ebp
f01303fa:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01303fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0130404:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f013040b:	eb 03                	jmp    f0130410 <strtol+0x19>
		s++;
f013040d:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130410:	8b 45 08             	mov    0x8(%ebp),%eax
f0130413:	8a 00                	mov    (%eax),%al
f0130415:	3c 20                	cmp    $0x20,%al
f0130417:	74 f4                	je     f013040d <strtol+0x16>
f0130419:	8b 45 08             	mov    0x8(%ebp),%eax
f013041c:	8a 00                	mov    (%eax),%al
f013041e:	3c 09                	cmp    $0x9,%al
f0130420:	74 eb                	je     f013040d <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0130422:	8b 45 08             	mov    0x8(%ebp),%eax
f0130425:	8a 00                	mov    (%eax),%al
f0130427:	3c 2b                	cmp    $0x2b,%al
f0130429:	75 05                	jne    f0130430 <strtol+0x39>
		s++;
f013042b:	ff 45 08             	incl   0x8(%ebp)
f013042e:	eb 13                	jmp    f0130443 <strtol+0x4c>
	else if (*s == '-')
f0130430:	8b 45 08             	mov    0x8(%ebp),%eax
f0130433:	8a 00                	mov    (%eax),%al
f0130435:	3c 2d                	cmp    $0x2d,%al
f0130437:	75 0a                	jne    f0130443 <strtol+0x4c>
		s++, neg = 1;
f0130439:	ff 45 08             	incl   0x8(%ebp)
f013043c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0130443:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130447:	74 06                	je     f013044f <strtol+0x58>
f0130449:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f013044d:	75 20                	jne    f013046f <strtol+0x78>
f013044f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130452:	8a 00                	mov    (%eax),%al
f0130454:	3c 30                	cmp    $0x30,%al
f0130456:	75 17                	jne    f013046f <strtol+0x78>
f0130458:	8b 45 08             	mov    0x8(%ebp),%eax
f013045b:	40                   	inc    %eax
f013045c:	8a 00                	mov    (%eax),%al
f013045e:	3c 78                	cmp    $0x78,%al
f0130460:	75 0d                	jne    f013046f <strtol+0x78>
		s += 2, base = 16;
f0130462:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0130466:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f013046d:	eb 28                	jmp    f0130497 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f013046f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130473:	75 15                	jne    f013048a <strtol+0x93>
f0130475:	8b 45 08             	mov    0x8(%ebp),%eax
f0130478:	8a 00                	mov    (%eax),%al
f013047a:	3c 30                	cmp    $0x30,%al
f013047c:	75 0c                	jne    f013048a <strtol+0x93>
		s++, base = 8;
f013047e:	ff 45 08             	incl   0x8(%ebp)
f0130481:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130488:	eb 0d                	jmp    f0130497 <strtol+0xa0>
	else if (base == 0)
f013048a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013048e:	75 07                	jne    f0130497 <strtol+0xa0>
		base = 10;
f0130490:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0130497:	8b 45 08             	mov    0x8(%ebp),%eax
f013049a:	8a 00                	mov    (%eax),%al
f013049c:	3c 2f                	cmp    $0x2f,%al
f013049e:	7e 19                	jle    f01304b9 <strtol+0xc2>
f01304a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01304a3:	8a 00                	mov    (%eax),%al
f01304a5:	3c 39                	cmp    $0x39,%al
f01304a7:	7f 10                	jg     f01304b9 <strtol+0xc2>
			dig = *s - '0';
f01304a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ac:	8a 00                	mov    (%eax),%al
f01304ae:	0f be c0             	movsbl %al,%eax
f01304b1:	83 e8 30             	sub    $0x30,%eax
f01304b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01304b7:	eb 42                	jmp    f01304fb <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01304b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01304bc:	8a 00                	mov    (%eax),%al
f01304be:	3c 60                	cmp    $0x60,%al
f01304c0:	7e 19                	jle    f01304db <strtol+0xe4>
f01304c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01304c5:	8a 00                	mov    (%eax),%al
f01304c7:	3c 7a                	cmp    $0x7a,%al
f01304c9:	7f 10                	jg     f01304db <strtol+0xe4>
			dig = *s - 'a' + 10;
f01304cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ce:	8a 00                	mov    (%eax),%al
f01304d0:	0f be c0             	movsbl %al,%eax
f01304d3:	83 e8 57             	sub    $0x57,%eax
f01304d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01304d9:	eb 20                	jmp    f01304fb <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01304db:	8b 45 08             	mov    0x8(%ebp),%eax
f01304de:	8a 00                	mov    (%eax),%al
f01304e0:	3c 40                	cmp    $0x40,%al
f01304e2:	7e 39                	jle    f013051d <strtol+0x126>
f01304e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01304e7:	8a 00                	mov    (%eax),%al
f01304e9:	3c 5a                	cmp    $0x5a,%al
f01304eb:	7f 30                	jg     f013051d <strtol+0x126>
			dig = *s - 'A' + 10;
f01304ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01304f0:	8a 00                	mov    (%eax),%al
f01304f2:	0f be c0             	movsbl %al,%eax
f01304f5:	83 e8 37             	sub    $0x37,%eax
f01304f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01304fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304fe:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130501:	7d 19                	jge    f013051c <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0130503:	ff 45 08             	incl   0x8(%ebp)
f0130506:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130509:	0f af 45 10          	imul   0x10(%ebp),%eax
f013050d:	89 c2                	mov    %eax,%edx
f013050f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130512:	01 d0                	add    %edx,%eax
f0130514:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0130517:	e9 7b ff ff ff       	jmp    f0130497 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f013051c:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f013051d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130521:	74 08                	je     f013052b <strtol+0x134>
		*endptr = (char *) s;
f0130523:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130526:	8b 55 08             	mov    0x8(%ebp),%edx
f0130529:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f013052b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013052f:	74 07                	je     f0130538 <strtol+0x141>
f0130531:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130534:	f7 d8                	neg    %eax
f0130536:	eb 03                	jmp    f013053b <strtol+0x144>
f0130538:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013053b:	c9                   	leave  
f013053c:	c3                   	ret    

f013053d <ltostr>:

void
ltostr(long value, char *str)
{
f013053d:	55                   	push   %ebp
f013053e:	89 e5                	mov    %esp,%ebp
f0130540:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0130543:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f013054a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0130551:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130555:	79 13                	jns    f013056a <ltostr+0x2d>
	{
		neg = 1;
f0130557:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f013055e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130561:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0130564:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0130567:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f013056a:	8b 45 08             	mov    0x8(%ebp),%eax
f013056d:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0130572:	99                   	cltd   
f0130573:	f7 f9                	idiv   %ecx
f0130575:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0130578:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013057b:	8d 50 01             	lea    0x1(%eax),%edx
f013057e:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130581:	89 c2                	mov    %eax,%edx
f0130583:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130586:	01 d0                	add    %edx,%eax
f0130588:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013058b:	83 c2 30             	add    $0x30,%edx
f013058e:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0130590:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130593:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130598:	f7 e9                	imul   %ecx
f013059a:	c1 fa 02             	sar    $0x2,%edx
f013059d:	89 c8                	mov    %ecx,%eax
f013059f:	c1 f8 1f             	sar    $0x1f,%eax
f01305a2:	29 c2                	sub    %eax,%edx
f01305a4:	89 d0                	mov    %edx,%eax
f01305a6:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f01305a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01305ac:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01305b1:	f7 e9                	imul   %ecx
f01305b3:	c1 fa 02             	sar    $0x2,%edx
f01305b6:	89 c8                	mov    %ecx,%eax
f01305b8:	c1 f8 1f             	sar    $0x1f,%eax
f01305bb:	29 c2                	sub    %eax,%edx
f01305bd:	89 d0                	mov    %edx,%eax
f01305bf:	c1 e0 02             	shl    $0x2,%eax
f01305c2:	01 d0                	add    %edx,%eax
f01305c4:	01 c0                	add    %eax,%eax
f01305c6:	29 c1                	sub    %eax,%ecx
f01305c8:	89 ca                	mov    %ecx,%edx
f01305ca:	85 d2                	test   %edx,%edx
f01305cc:	75 9c                	jne    f013056a <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f01305ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01305d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01305d8:	48                   	dec    %eax
f01305d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01305dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01305e0:	74 3d                	je     f013061f <ltostr+0xe2>
		start = 1 ;
f01305e2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01305e9:	eb 34                	jmp    f013061f <ltostr+0xe2>
	{
		char tmp = str[start] ;
f01305eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01305ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305f1:	01 d0                	add    %edx,%eax
f01305f3:	8a 00                	mov    (%eax),%al
f01305f5:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01305f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01305fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305fe:	01 c2                	add    %eax,%edx
f0130600:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130603:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130606:	01 c8                	add    %ecx,%eax
f0130608:	8a 00                	mov    (%eax),%al
f013060a:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f013060c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013060f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130612:	01 c2                	add    %eax,%edx
f0130614:	8a 45 eb             	mov    -0x15(%ebp),%al
f0130617:	88 02                	mov    %al,(%edx)
		start++ ;
f0130619:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f013061c:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f013061f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130622:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130625:	7c c4                	jl     f01305eb <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0130627:	8b 55 f8             	mov    -0x8(%ebp),%edx
f013062a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013062d:	01 d0                	add    %edx,%eax
f013062f:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0130632:	90                   	nop
f0130633:	c9                   	leave  
f0130634:	c3                   	ret    

f0130635 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0130635:	55                   	push   %ebp
f0130636:	89 e5                	mov    %esp,%ebp
f0130638:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f013063b:	ff 75 08             	pushl  0x8(%ebp)
f013063e:	e8 54 fa ff ff       	call   f0130097 <strlen>
f0130643:	83 c4 04             	add    $0x4,%esp
f0130646:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0130649:	ff 75 0c             	pushl  0xc(%ebp)
f013064c:	e8 46 fa ff ff       	call   f0130097 <strlen>
f0130651:	83 c4 04             	add    $0x4,%esp
f0130654:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0130657:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f013065e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130665:	eb 17                	jmp    f013067e <strcconcat+0x49>
		final[s] = str1[s] ;
f0130667:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013066a:	8b 45 10             	mov    0x10(%ebp),%eax
f013066d:	01 c2                	add    %eax,%edx
f013066f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0130672:	8b 45 08             	mov    0x8(%ebp),%eax
f0130675:	01 c8                	add    %ecx,%eax
f0130677:	8a 00                	mov    (%eax),%al
f0130679:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f013067b:	ff 45 fc             	incl   -0x4(%ebp)
f013067e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130681:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130684:	7c e1                	jl     f0130667 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0130686:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f013068d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0130694:	eb 1f                	jmp    f01306b5 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0130696:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130699:	8d 50 01             	lea    0x1(%eax),%edx
f013069c:	89 55 fc             	mov    %edx,-0x4(%ebp)
f013069f:	89 c2                	mov    %eax,%edx
f01306a1:	8b 45 10             	mov    0x10(%ebp),%eax
f01306a4:	01 c2                	add    %eax,%edx
f01306a6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f01306a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01306ac:	01 c8                	add    %ecx,%eax
f01306ae:	8a 00                	mov    (%eax),%al
f01306b0:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f01306b2:	ff 45 f8             	incl   -0x8(%ebp)
f01306b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01306b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01306bb:	7c d9                	jl     f0130696 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f01306bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01306c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01306c3:	01 d0                	add    %edx,%eax
f01306c5:	c6 00 00             	movb   $0x0,(%eax)
}
f01306c8:	90                   	nop
f01306c9:	c9                   	leave  
f01306ca:	c3                   	ret    

f01306cb <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f01306cb:	55                   	push   %ebp
f01306cc:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f01306ce:	8b 45 14             	mov    0x14(%ebp),%eax
f01306d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01306d7:	8b 45 14             	mov    0x14(%ebp),%eax
f01306da:	8b 00                	mov    (%eax),%eax
f01306dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01306e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01306e6:	01 d0                	add    %edx,%eax
f01306e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01306ee:	eb 0c                	jmp    f01306fc <strsplit+0x31>
			*string++ = 0;
f01306f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01306f3:	8d 50 01             	lea    0x1(%eax),%edx
f01306f6:	89 55 08             	mov    %edx,0x8(%ebp)
f01306f9:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01306fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01306ff:	8a 00                	mov    (%eax),%al
f0130701:	84 c0                	test   %al,%al
f0130703:	74 18                	je     f013071d <strsplit+0x52>
f0130705:	8b 45 08             	mov    0x8(%ebp),%eax
f0130708:	8a 00                	mov    (%eax),%al
f013070a:	0f be c0             	movsbl %al,%eax
f013070d:	50                   	push   %eax
f013070e:	ff 75 0c             	pushl  0xc(%ebp)
f0130711:	e8 13 fb ff ff       	call   f0130229 <strchr>
f0130716:	83 c4 08             	add    $0x8,%esp
f0130719:	85 c0                	test   %eax,%eax
f013071b:	75 d3                	jne    f01306f0 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f013071d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130720:	8a 00                	mov    (%eax),%al
f0130722:	84 c0                	test   %al,%al
f0130724:	74 5a                	je     f0130780 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0130726:	8b 45 14             	mov    0x14(%ebp),%eax
f0130729:	8b 00                	mov    (%eax),%eax
f013072b:	83 f8 0f             	cmp    $0xf,%eax
f013072e:	75 07                	jne    f0130737 <strsplit+0x6c>
		{
			return 0;
f0130730:	b8 00 00 00 00       	mov    $0x0,%eax
f0130735:	eb 66                	jmp    f013079d <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0130737:	8b 45 14             	mov    0x14(%ebp),%eax
f013073a:	8b 00                	mov    (%eax),%eax
f013073c:	8d 48 01             	lea    0x1(%eax),%ecx
f013073f:	8b 55 14             	mov    0x14(%ebp),%edx
f0130742:	89 0a                	mov    %ecx,(%edx)
f0130744:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013074b:	8b 45 10             	mov    0x10(%ebp),%eax
f013074e:	01 c2                	add    %eax,%edx
f0130750:	8b 45 08             	mov    0x8(%ebp),%eax
f0130753:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130755:	eb 03                	jmp    f013075a <strsplit+0x8f>
			string++;
f0130757:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f013075a:	8b 45 08             	mov    0x8(%ebp),%eax
f013075d:	8a 00                	mov    (%eax),%al
f013075f:	84 c0                	test   %al,%al
f0130761:	74 8b                	je     f01306ee <strsplit+0x23>
f0130763:	8b 45 08             	mov    0x8(%ebp),%eax
f0130766:	8a 00                	mov    (%eax),%al
f0130768:	0f be c0             	movsbl %al,%eax
f013076b:	50                   	push   %eax
f013076c:	ff 75 0c             	pushl  0xc(%ebp)
f013076f:	e8 b5 fa ff ff       	call   f0130229 <strchr>
f0130774:	83 c4 08             	add    $0x8,%esp
f0130777:	85 c0                	test   %eax,%eax
f0130779:	74 dc                	je     f0130757 <strsplit+0x8c>
			string++;
	}
f013077b:	e9 6e ff ff ff       	jmp    f01306ee <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0130780:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0130781:	8b 45 14             	mov    0x14(%ebp),%eax
f0130784:	8b 00                	mov    (%eax),%eax
f0130786:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013078d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130790:	01 d0                	add    %edx,%eax
f0130792:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0130798:	b8 01 00 00 00       	mov    $0x1,%eax
}
f013079d:	c9                   	leave  
f013079e:	c3                   	ret    

f013079f <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f013079f:	55                   	push   %ebp
f01307a0:	89 e5                	mov    %esp,%ebp
f01307a2:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01307a5:	90                   	nop
f01307a6:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01307ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01307b0:	89 c2                	mov    %eax,%edx
f01307b2:	ec                   	in     (%dx),%al
f01307b3:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01307b6:	8a 45 f7             	mov    -0x9(%ebp),%al
f01307b9:	0f b6 c0             	movzbl %al,%eax
f01307bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01307bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01307c2:	25 c0 00 00 00       	and    $0xc0,%eax
f01307c7:	83 f8 40             	cmp    $0x40,%eax
f01307ca:	75 da                	jne    f01307a6 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f01307cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01307d0:	74 11                	je     f01307e3 <ide_wait_ready+0x44>
f01307d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01307d5:	83 e0 21             	and    $0x21,%eax
f01307d8:	85 c0                	test   %eax,%eax
f01307da:	74 07                	je     f01307e3 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01307dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01307e1:	eb 05                	jmp    f01307e8 <ide_wait_ready+0x49>
	}
	return 0;
f01307e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01307e8:	c9                   	leave  
f01307e9:	c3                   	ret    

f01307ea <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01307ea:	55                   	push   %ebp
f01307eb:	89 e5                	mov    %esp,%ebp
f01307ed:	57                   	push   %edi
f01307ee:	53                   	push   %ebx
f01307ef:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01307f2:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01307f9:	76 16                	jbe    f0130811 <ide_read+0x27>
f01307fb:	68 63 c2 13 f0       	push   $0xf013c263
f0130800:	68 70 c2 13 f0       	push   $0xf013c270
f0130805:	6a 25                	push   $0x25
f0130807:	68 85 c2 13 f0       	push   $0xf013c285
f013080c:	e8 95 f9 fc ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f0130811:	83 ec 0c             	sub    $0xc,%esp
f0130814:	6a 00                	push   $0x0
f0130816:	e8 84 ff ff ff       	call   f013079f <ide_wait_ready>
f013081b:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f013081e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130821:	0f b6 c0             	movzbl %al,%eax
f0130824:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f013082b:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013082e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130831:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130834:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130835:	8b 45 08             	mov    0x8(%ebp),%eax
f0130838:	0f b6 c0             	movzbl %al,%eax
f013083b:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130842:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130845:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130848:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013084b:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013084c:	8b 45 08             	mov    0x8(%ebp),%eax
f013084f:	c1 e8 08             	shr    $0x8,%eax
f0130852:	0f b6 c0             	movzbl %al,%eax
f0130855:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013085c:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013085f:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130862:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130865:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130866:	8b 45 08             	mov    0x8(%ebp),%eax
f0130869:	c1 e8 10             	shr    $0x10,%eax
f013086c:	0f b6 c0             	movzbl %al,%eax
f013086f:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130876:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130879:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013087c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013087f:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0130880:	a1 cc 7f 65 f0       	mov    0xf0657fcc,%eax
f0130885:	83 e0 01             	and    $0x1,%eax
f0130888:	c1 e0 04             	shl    $0x4,%eax
f013088b:	88 c2                	mov    %al,%dl
f013088d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130890:	c1 e8 18             	shr    $0x18,%eax
f0130893:	83 e0 0f             	and    $0xf,%eax
f0130896:	09 d0                	or     %edx,%eax
f0130898:	83 c8 e0             	or     $0xffffffe0,%eax
f013089b:	0f b6 c0             	movzbl %al,%eax
f013089e:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01308a5:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01308a8:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01308ab:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01308ae:	ee                   	out    %al,(%dx)
f01308af:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01308b6:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f01308ba:	8a 45 d7             	mov    -0x29(%ebp),%al
f01308bd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01308c0:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01308c1:	eb 55                	jmp    f0130918 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01308c3:	83 ec 0c             	sub    $0xc,%esp
f01308c6:	6a 01                	push   $0x1
f01308c8:	e8 d2 fe ff ff       	call   f013079f <ide_wait_ready>
f01308cd:	83 c4 10             	add    $0x10,%esp
f01308d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01308d3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01308d7:	79 05                	jns    f01308de <ide_read+0xf4>
			return r;
f01308d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01308dc:	eb 45                	jmp    f0130923 <ide_read+0x139>
f01308de:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01308e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01308eb:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01308f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01308f5:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01308f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01308fb:	89 cb                	mov    %ecx,%ebx
f01308fd:	89 df                	mov    %ebx,%edi
f01308ff:	89 c1                	mov    %eax,%ecx
f0130901:	fc                   	cld    
f0130902:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0130904:	89 c8                	mov    %ecx,%eax
f0130906:	89 fb                	mov    %edi,%ebx
f0130908:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f013090b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013090e:	ff 4d 10             	decl   0x10(%ebp)
f0130911:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130918:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013091c:	75 a5                	jne    f01308c3 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f013091e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130923:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130926:	5b                   	pop    %ebx
f0130927:	5f                   	pop    %edi
f0130928:	5d                   	pop    %ebp
f0130929:	c3                   	ret    

f013092a <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f013092a:	55                   	push   %ebp
f013092b:	89 e5                	mov    %esp,%ebp
f013092d:	56                   	push   %esi
f013092e:	53                   	push   %ebx
f013092f:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0130932:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130939:	76 16                	jbe    f0130951 <ide_write+0x27>
f013093b:	68 63 c2 13 f0       	push   $0xf013c263
f0130940:	68 70 c2 13 f0       	push   $0xf013c270
f0130945:	6a 3e                	push   $0x3e
f0130947:	68 85 c2 13 f0       	push   $0xf013c285
f013094c:	e8 55 f8 fc ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0130951:	83 ec 0c             	sub    $0xc,%esp
f0130954:	6a 00                	push   $0x0
f0130956:	e8 44 fe ff ff       	call   f013079f <ide_wait_ready>
f013095b:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f013095e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130961:	0f b6 c0             	movzbl %al,%eax
f0130964:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f013096b:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013096e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130971:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130974:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130975:	8b 45 08             	mov    0x8(%ebp),%eax
f0130978:	0f b6 c0             	movzbl %al,%eax
f013097b:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130982:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130985:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130988:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013098b:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013098c:	8b 45 08             	mov    0x8(%ebp),%eax
f013098f:	c1 e8 08             	shr    $0x8,%eax
f0130992:	0f b6 c0             	movzbl %al,%eax
f0130995:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013099c:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013099f:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01309a2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309a5:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01309a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01309a9:	c1 e8 10             	shr    $0x10,%eax
f01309ac:	0f b6 c0             	movzbl %al,%eax
f01309af:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01309b6:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01309b9:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01309bc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01309bf:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01309c0:	a1 cc 7f 65 f0       	mov    0xf0657fcc,%eax
f01309c5:	83 e0 01             	and    $0x1,%eax
f01309c8:	c1 e0 04             	shl    $0x4,%eax
f01309cb:	88 c2                	mov    %al,%dl
f01309cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01309d0:	c1 e8 18             	shr    $0x18,%eax
f01309d3:	83 e0 0f             	and    $0xf,%eax
f01309d6:	09 d0                	or     %edx,%eax
f01309d8:	83 c8 e0             	or     $0xffffffe0,%eax
f01309db:	0f b6 c0             	movzbl %al,%eax
f01309de:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01309e5:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01309e8:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01309eb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01309ee:	ee                   	out    %al,(%dx)
f01309ef:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01309f6:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01309fa:	8a 45 d7             	mov    -0x29(%ebp),%al
f01309fd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0130a00:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130a01:	eb 55                	jmp    f0130a58 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130a03:	83 ec 0c             	sub    $0xc,%esp
f0130a06:	6a 01                	push   $0x1
f0130a08:	e8 92 fd ff ff       	call   f013079f <ide_wait_ready>
f0130a0d:	83 c4 10             	add    $0x10,%esp
f0130a10:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a13:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a17:	79 05                	jns    f0130a1e <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0130a19:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130a1c:	eb 45                	jmp    f0130a63 <ide_write+0x139>
f0130a1e:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0130a25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a28:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0130a2b:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0130a32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130a35:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130a38:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130a3b:	89 cb                	mov    %ecx,%ebx
f0130a3d:	89 de                	mov    %ebx,%esi
f0130a3f:	89 c1                	mov    %eax,%ecx
f0130a41:	fc                   	cld    
f0130a42:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0130a44:	89 c8                	mov    %ecx,%eax
f0130a46:	89 f3                	mov    %esi,%ebx
f0130a48:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130a4b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130a4e:	ff 4d 10             	decl   0x10(%ebp)
f0130a51:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130a58:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130a5c:	75 a5                	jne    f0130a03 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0130a5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130a63:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130a66:	5b                   	pop    %ebx
f0130a67:	5e                   	pop    %esi
f0130a68:	5d                   	pop    %ebp
f0130a69:	c3                   	ret    

f0130a6a <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0130a6a:	55                   	push   %ebp
f0130a6b:	89 e5                	mov    %esp,%ebp
f0130a6d:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0130a70:	83 ec 0c             	sub    $0xc,%esp
f0130a73:	68 90 c2 13 f0       	push   $0xf013c290
f0130a78:	e8 b0 01 fd ff       	call   f0100c2d <cprintf>
f0130a7d:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0130a80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0130a87:	83 ec 0c             	sub    $0xc,%esp
f0130a8a:	68 bc c2 13 f0       	push   $0xf013c2bc
f0130a8f:	e8 99 01 fd ff       	call   f0100c2d <cprintf>
f0130a94:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0130a97:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130a9b:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0130aa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130aa3:	eb 56                	jmp    f0130afb <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130aa9:	74 1c                	je     f0130ac7 <print_mem_block_lists+0x5d>
f0130aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130aae:	8b 50 08             	mov    0x8(%eax),%edx
f0130ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130ab4:	8b 48 08             	mov    0x8(%eax),%ecx
f0130ab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130aba:	8b 40 0c             	mov    0xc(%eax),%eax
f0130abd:	01 c8                	add    %ecx,%eax
f0130abf:	39 c2                	cmp    %eax,%edx
f0130ac1:	73 04                	jae    f0130ac7 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0130ac3:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130aca:	8b 50 08             	mov    0x8(%eax),%edx
f0130acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ad0:	8b 40 0c             	mov    0xc(%eax),%eax
f0130ad3:	01 c2                	add    %eax,%edx
f0130ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ad8:	8b 40 08             	mov    0x8(%eax),%eax
f0130adb:	83 ec 04             	sub    $0x4,%esp
f0130ade:	52                   	push   %edx
f0130adf:	50                   	push   %eax
f0130ae0:	68 d1 c2 13 f0       	push   $0xf013c2d1
f0130ae5:	e8 43 01 fd ff       	call   f0100c2d <cprintf>
f0130aea:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130af0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130af3:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0130af8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130afb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130aff:	74 07                	je     f0130b08 <print_mem_block_lists+0x9e>
f0130b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b04:	8b 00                	mov    (%eax),%eax
f0130b06:	eb 05                	jmp    f0130b0d <print_mem_block_lists+0xa3>
f0130b08:	b8 00 00 00 00       	mov    $0x0,%eax
f0130b0d:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0130b12:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0130b17:	85 c0                	test   %eax,%eax
f0130b19:	75 8a                	jne    f0130aa5 <print_mem_block_lists+0x3b>
f0130b1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130b1f:	75 84                	jne    f0130aa5 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0130b21:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130b25:	75 10                	jne    f0130b37 <print_mem_block_lists+0xcd>
f0130b27:	83 ec 0c             	sub    $0xc,%esp
f0130b2a:	68 e0 c2 13 f0       	push   $0xf013c2e0
f0130b2f:	e8 f9 00 fd ff       	call   f0100c2d <cprintf>
f0130b34:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0130b37:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0130b3e:	83 ec 0c             	sub    $0xc,%esp
f0130b41:	68 04 c3 13 f0       	push   $0xf013c304
f0130b46:	e8 e2 00 fd ff       	call   f0100c2d <cprintf>
f0130b4b:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0130b4e:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130b52:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130b57:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130b5a:	eb 56                	jmp    f0130bb2 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130b5c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b60:	74 1c                	je     f0130b7e <print_mem_block_lists+0x114>
f0130b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b65:	8b 50 08             	mov    0x8(%eax),%edx
f0130b68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b6b:	8b 48 08             	mov    0x8(%eax),%ecx
f0130b6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b71:	8b 40 0c             	mov    0xc(%eax),%eax
f0130b74:	01 c8                	add    %ecx,%eax
f0130b76:	39 c2                	cmp    %eax,%edx
f0130b78:	73 04                	jae    f0130b7e <print_mem_block_lists+0x114>
			sorted = 0 ;
f0130b7a:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b81:	8b 50 08             	mov    0x8(%eax),%edx
f0130b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b87:	8b 40 0c             	mov    0xc(%eax),%eax
f0130b8a:	01 c2                	add    %eax,%edx
f0130b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b8f:	8b 40 08             	mov    0x8(%eax),%eax
f0130b92:	83 ec 04             	sub    $0x4,%esp
f0130b95:	52                   	push   %edx
f0130b96:	50                   	push   %eax
f0130b97:	68 d1 c2 13 f0       	push   $0xf013c2d1
f0130b9c:	e8 8c 00 fd ff       	call   f0100c2d <cprintf>
f0130ba1:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ba7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130baa:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130baf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130bb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130bb6:	74 07                	je     f0130bbf <print_mem_block_lists+0x155>
f0130bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bbb:	8b 00                	mov    (%eax),%eax
f0130bbd:	eb 05                	jmp    f0130bc4 <print_mem_block_lists+0x15a>
f0130bbf:	b8 00 00 00 00       	mov    $0x0,%eax
f0130bc4:	a3 f8 7f 65 f0       	mov    %eax,0xf0657ff8
f0130bc9:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130bce:	85 c0                	test   %eax,%eax
f0130bd0:	75 8a                	jne    f0130b5c <print_mem_block_lists+0xf2>
f0130bd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130bd6:	75 84                	jne    f0130b5c <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0130bd8:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130bdc:	75 10                	jne    f0130bee <print_mem_block_lists+0x184>
f0130bde:	83 ec 0c             	sub    $0xc,%esp
f0130be1:	68 1c c3 13 f0       	push   $0xf013c31c
f0130be6:	e8 42 00 fd ff       	call   f0100c2d <cprintf>
f0130beb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0130bee:	83 ec 0c             	sub    $0xc,%esp
f0130bf1:	68 90 c2 13 f0       	push   $0xf013c290
f0130bf6:	e8 32 00 fd ff       	call   f0100c2d <cprintf>
f0130bfb:	83 c4 10             	add    $0x10,%esp

}
f0130bfe:	90                   	nop
f0130bff:	c9                   	leave  
f0130c00:	c3                   	ret    

f0130c01 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0130c01:	55                   	push   %ebp
f0130c02:	89 e5                	mov    %esp,%ebp
f0130c04:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0130c07:	c7 05 f4 74 6e f0 00 	movl   $0x0,0xf06e74f4
f0130c0e:	00 00 00 
f0130c11:	c7 05 f8 74 6e f0 00 	movl   $0x0,0xf06e74f8
f0130c18:	00 00 00 
f0130c1b:	c7 05 00 75 6e f0 00 	movl   $0x0,0xf06e7500
f0130c22:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0130c25:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c2c:	eb 79                	jmp    f0130ca7 <initialize_MemBlocksList+0xa6>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0130c2e:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0130c33:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130c36:	c1 e2 04             	shl    $0x4,%edx
f0130c39:	81 c2 00 80 65 f0    	add    $0xf0658000,%edx
f0130c3f:	89 02                	mov    %eax,(%edx)
f0130c41:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c44:	c1 e0 04             	shl    $0x4,%eax
f0130c47:	05 00 80 65 f0       	add    $0xf0658000,%eax
f0130c4c:	8b 00                	mov    (%eax),%eax
f0130c4e:	85 c0                	test   %eax,%eax
f0130c50:	74 16                	je     f0130c68 <initialize_MemBlocksList+0x67>
f0130c52:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0130c57:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130c5a:	c1 e2 04             	shl    $0x4,%edx
f0130c5d:	81 c2 00 80 65 f0    	add    $0xf0658000,%edx
f0130c63:	89 50 04             	mov    %edx,0x4(%eax)
f0130c66:	eb 10                	jmp    f0130c78 <initialize_MemBlocksList+0x77>
f0130c68:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c6b:	c1 e0 04             	shl    $0x4,%eax
f0130c6e:	05 00 80 65 f0       	add    $0xf0658000,%eax
f0130c73:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0130c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c7b:	c1 e0 04             	shl    $0x4,%eax
f0130c7e:	05 00 80 65 f0       	add    $0xf0658000,%eax
f0130c83:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0130c88:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c8b:	c1 e0 04             	shl    $0x4,%eax
f0130c8e:	05 04 80 65 f0       	add    $0xf0658004,%eax
f0130c93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0130c99:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0130c9e:	40                   	inc    %eax
f0130c9f:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0130ca4:	ff 45 fc             	incl   -0x4(%ebp)
f0130ca7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130caa:	3b 45 08             	cmp    0x8(%ebp),%eax
f0130cad:	0f 82 7b ff ff ff    	jb     f0130c2e <initialize_MemBlocksList+0x2d>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0130cb3:	90                   	nop
f0130cb4:	c9                   	leave  
f0130cb5:	c3                   	ret    

f0130cb6 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0130cb6:	55                   	push   %ebp
f0130cb7:	89 e5                	mov    %esp,%ebp
f0130cb9:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0130cbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cbf:	8b 00                	mov    (%eax),%eax
f0130cc1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130cc4:	eb 19                	jmp    f0130cdf <find_block+0x29>
	{
		if(va==point->sva)
f0130cc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130cc9:	8b 40 08             	mov    0x8(%eax),%eax
f0130ccc:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130ccf:	75 05                	jne    f0130cd6 <find_block+0x20>
		   return point;
f0130cd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130cd4:	eb 36                	jmp    f0130d0c <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0130cd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cd9:	8b 40 08             	mov    0x8(%eax),%eax
f0130cdc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130cdf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130ce3:	74 07                	je     f0130cec <find_block+0x36>
f0130ce5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ce8:	8b 00                	mov    (%eax),%eax
f0130cea:	eb 05                	jmp    f0130cf1 <find_block+0x3b>
f0130cec:	b8 00 00 00 00       	mov    $0x0,%eax
f0130cf1:	8b 55 08             	mov    0x8(%ebp),%edx
f0130cf4:	89 42 08             	mov    %eax,0x8(%edx)
f0130cf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cfa:	8b 40 08             	mov    0x8(%eax),%eax
f0130cfd:	85 c0                	test   %eax,%eax
f0130cff:	75 c5                	jne    f0130cc6 <find_block+0x10>
f0130d01:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130d05:	75 bf                	jne    f0130cc6 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0130d07:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130d0c:	c9                   	leave  
f0130d0d:	c3                   	ret    

f0130d0e <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0130d0e:	55                   	push   %ebp
f0130d0f:	89 e5                	mov    %esp,%ebp
f0130d11:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0130d14:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130d19:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0130d1c:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f0130d21:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0130d24:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d27:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0130d2a:	74 24                	je     f0130d50 <insert_sorted_allocList+0x42>
f0130d2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d2f:	8b 50 08             	mov    0x8(%eax),%edx
f0130d32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d35:	8b 40 08             	mov    0x8(%eax),%eax
f0130d38:	39 c2                	cmp    %eax,%edx
f0130d3a:	76 14                	jbe    f0130d50 <insert_sorted_allocList+0x42>
f0130d3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d3f:	8b 50 08             	mov    0x8(%eax),%edx
f0130d42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130d45:	8b 40 08             	mov    0x8(%eax),%eax
f0130d48:	39 c2                	cmp    %eax,%edx
f0130d4a:	0f 82 60 01 00 00    	jb     f0130eb0 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0130d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d54:	75 65                	jne    f0130dbb <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0130d56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130d5a:	75 14                	jne    f0130d70 <insert_sorted_allocList+0x62>
f0130d5c:	83 ec 04             	sub    $0x4,%esp
f0130d5f:	68 44 c3 13 f0       	push   $0xf013c344
f0130d64:	6a 6b                	push   $0x6b
f0130d66:	68 67 c3 13 f0       	push   $0xf013c367
f0130d6b:	e8 36 f4 fc ff       	call   f01001a6 <_panic>
f0130d70:	8b 15 f0 7f 65 f0    	mov    0xf0657ff0,%edx
f0130d76:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d79:	89 10                	mov    %edx,(%eax)
f0130d7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d7e:	8b 00                	mov    (%eax),%eax
f0130d80:	85 c0                	test   %eax,%eax
f0130d82:	74 0d                	je     f0130d91 <insert_sorted_allocList+0x83>
f0130d84:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130d89:	8b 55 08             	mov    0x8(%ebp),%edx
f0130d8c:	89 50 04             	mov    %edx,0x4(%eax)
f0130d8f:	eb 08                	jmp    f0130d99 <insert_sorted_allocList+0x8b>
f0130d91:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d94:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f0130d99:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d9c:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f0130da1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130da4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0130dab:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130db0:	40                   	inc    %eax
f0130db1:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130db6:	e9 dc 01 00 00       	jmp    f0130f97 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0130dbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dbe:	8b 50 08             	mov    0x8(%eax),%edx
f0130dc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130dc4:	8b 40 08             	mov    0x8(%eax),%eax
f0130dc7:	39 c2                	cmp    %eax,%edx
f0130dc9:	77 6c                	ja     f0130e37 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0130dcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130dcf:	74 06                	je     f0130dd7 <insert_sorted_allocList+0xc9>
f0130dd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130dd5:	75 14                	jne    f0130deb <insert_sorted_allocList+0xdd>
f0130dd7:	83 ec 04             	sub    $0x4,%esp
f0130dda:	68 80 c3 13 f0       	push   $0xf013c380
f0130ddf:	6a 6f                	push   $0x6f
f0130de1:	68 67 c3 13 f0       	push   $0xf013c367
f0130de6:	e8 bb f3 fc ff       	call   f01001a6 <_panic>
f0130deb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130dee:	8b 50 04             	mov    0x4(%eax),%edx
f0130df1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130df4:	89 50 04             	mov    %edx,0x4(%eax)
f0130df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dfa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130dfd:	89 10                	mov    %edx,(%eax)
f0130dff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e02:	8b 40 04             	mov    0x4(%eax),%eax
f0130e05:	85 c0                	test   %eax,%eax
f0130e07:	74 0d                	je     f0130e16 <insert_sorted_allocList+0x108>
f0130e09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e0c:	8b 40 04             	mov    0x4(%eax),%eax
f0130e0f:	8b 55 08             	mov    0x8(%ebp),%edx
f0130e12:	89 10                	mov    %edx,(%eax)
f0130e14:	eb 08                	jmp    f0130e1e <insert_sorted_allocList+0x110>
f0130e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e19:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f0130e1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e21:	8b 55 08             	mov    0x8(%ebp),%edx
f0130e24:	89 50 04             	mov    %edx,0x4(%eax)
f0130e27:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130e2c:	40                   	inc    %eax
f0130e2d:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130e32:	e9 60 01 00 00       	jmp    f0130f97 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0130e37:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e3a:	8b 50 08             	mov    0x8(%eax),%edx
f0130e3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130e40:	8b 40 08             	mov    0x8(%eax),%eax
f0130e43:	39 c2                	cmp    %eax,%edx
f0130e45:	0f 82 4c 01 00 00    	jb     f0130f97 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0130e4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130e4f:	75 14                	jne    f0130e65 <insert_sorted_allocList+0x157>
f0130e51:	83 ec 04             	sub    $0x4,%esp
f0130e54:	68 b8 c3 13 f0       	push   $0xf013c3b8
f0130e59:	6a 73                	push   $0x73
f0130e5b:	68 67 c3 13 f0       	push   $0xf013c367
f0130e60:	e8 41 f3 fc ff       	call   f01001a6 <_panic>
f0130e65:	8b 15 f4 7f 65 f0    	mov    0xf0657ff4,%edx
f0130e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e6e:	89 50 04             	mov    %edx,0x4(%eax)
f0130e71:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e74:	8b 40 04             	mov    0x4(%eax),%eax
f0130e77:	85 c0                	test   %eax,%eax
f0130e79:	74 0c                	je     f0130e87 <insert_sorted_allocList+0x179>
f0130e7b:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f0130e80:	8b 55 08             	mov    0x8(%ebp),%edx
f0130e83:	89 10                	mov    %edx,(%eax)
f0130e85:	eb 08                	jmp    f0130e8f <insert_sorted_allocList+0x181>
f0130e87:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e8a:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f0130e8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e92:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f0130e97:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0130ea0:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130ea5:	40                   	inc    %eax
f0130ea6:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130eab:	e9 e7 00 00 00       	jmp    f0130f97 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0130eb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0130eb6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0130ebd:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130ec2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130ec5:	e9 9d 00 00 00       	jmp    f0130f67 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0130eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ecd:	8b 00                	mov    (%eax),%eax
f0130ecf:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0130ed2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed5:	8b 50 08             	mov    0x8(%eax),%edx
f0130ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130edb:	8b 40 08             	mov    0x8(%eax),%eax
f0130ede:	39 c2                	cmp    %eax,%edx
f0130ee0:	76 7d                	jbe    f0130f5f <insert_sorted_allocList+0x251>
f0130ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee5:	8b 50 08             	mov    0x8(%eax),%edx
f0130ee8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130eeb:	8b 40 08             	mov    0x8(%eax),%eax
f0130eee:	39 c2                	cmp    %eax,%edx
f0130ef0:	73 6d                	jae    f0130f5f <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0130ef2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ef6:	74 06                	je     f0130efe <insert_sorted_allocList+0x1f0>
f0130ef8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130efc:	75 14                	jne    f0130f12 <insert_sorted_allocList+0x204>
f0130efe:	83 ec 04             	sub    $0x4,%esp
f0130f01:	68 dc c3 13 f0       	push   $0xf013c3dc
f0130f06:	6a 7f                	push   $0x7f
f0130f08:	68 67 c3 13 f0       	push   $0xf013c367
f0130f0d:	e8 94 f2 fc ff       	call   f01001a6 <_panic>
f0130f12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f15:	8b 10                	mov    (%eax),%edx
f0130f17:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f1a:	89 10                	mov    %edx,(%eax)
f0130f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f1f:	8b 00                	mov    (%eax),%eax
f0130f21:	85 c0                	test   %eax,%eax
f0130f23:	74 0b                	je     f0130f30 <insert_sorted_allocList+0x222>
f0130f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f28:	8b 00                	mov    (%eax),%eax
f0130f2a:	8b 55 08             	mov    0x8(%ebp),%edx
f0130f2d:	89 50 04             	mov    %edx,0x4(%eax)
f0130f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f33:	8b 55 08             	mov    0x8(%ebp),%edx
f0130f36:	89 10                	mov    %edx,(%eax)
f0130f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130f3e:	89 50 04             	mov    %edx,0x4(%eax)
f0130f41:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f44:	8b 00                	mov    (%eax),%eax
f0130f46:	85 c0                	test   %eax,%eax
f0130f48:	75 08                	jne    f0130f52 <insert_sorted_allocList+0x244>
f0130f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f4d:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f0130f52:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130f57:	40                   	inc    %eax
f0130f58:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
				break;
f0130f5d:	eb 39                	jmp    f0130f98 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0130f5f:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130f64:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130f67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f6b:	74 07                	je     f0130f74 <insert_sorted_allocList+0x266>
f0130f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f70:	8b 00                	mov    (%eax),%eax
f0130f72:	eb 05                	jmp    f0130f79 <insert_sorted_allocList+0x26b>
f0130f74:	b8 00 00 00 00       	mov    $0x0,%eax
f0130f79:	a3 f8 7f 65 f0       	mov    %eax,0xf0657ff8
f0130f7e:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130f83:	85 c0                	test   %eax,%eax
f0130f85:	0f 85 3f ff ff ff    	jne    f0130eca <insert_sorted_allocList+0x1bc>
f0130f8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f8f:	0f 85 35 ff ff ff    	jne    f0130eca <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0130f95:	eb 01                	jmp    f0130f98 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130f97:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0130f98:	90                   	nop
f0130f99:	c9                   	leave  
f0130f9a:	c3                   	ret    

f0130f9b <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0130f9b:	55                   	push   %ebp
f0130f9c:	89 e5                	mov    %esp,%ebp
f0130f9e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0130fa1:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0130fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130fa9:	e9 85 01 00 00       	jmp    f0131133 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0130fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fb1:	8b 40 0c             	mov    0xc(%eax),%eax
f0130fb4:	3b 45 08             	cmp    0x8(%ebp),%eax
f0130fb7:	0f 82 6e 01 00 00    	jb     f013112b <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0130fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fc0:	8b 40 0c             	mov    0xc(%eax),%eax
f0130fc3:	3b 45 08             	cmp    0x8(%ebp),%eax
f0130fc6:	0f 85 8a 00 00 00    	jne    f0131056 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0130fcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130fd0:	75 17                	jne    f0130fe9 <alloc_block_FF+0x4e>
f0130fd2:	83 ec 04             	sub    $0x4,%esp
f0130fd5:	68 10 c4 13 f0       	push   $0xf013c410
f0130fda:	68 93 00 00 00       	push   $0x93
f0130fdf:	68 67 c3 13 f0       	push   $0xf013c367
f0130fe4:	e8 bd f1 fc ff       	call   f01001a6 <_panic>
f0130fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fec:	8b 00                	mov    (%eax),%eax
f0130fee:	85 c0                	test   %eax,%eax
f0130ff0:	74 10                	je     f0131002 <alloc_block_FF+0x67>
f0130ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ff5:	8b 00                	mov    (%eax),%eax
f0130ff7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130ffa:	8b 52 04             	mov    0x4(%edx),%edx
f0130ffd:	89 50 04             	mov    %edx,0x4(%eax)
f0131000:	eb 0b                	jmp    f013100d <alloc_block_FF+0x72>
f0131002:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131005:	8b 40 04             	mov    0x4(%eax),%eax
f0131008:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f013100d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131010:	8b 40 04             	mov    0x4(%eax),%eax
f0131013:	85 c0                	test   %eax,%eax
f0131015:	74 0f                	je     f0131026 <alloc_block_FF+0x8b>
f0131017:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013101a:	8b 40 04             	mov    0x4(%eax),%eax
f013101d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131020:	8b 12                	mov    (%edx),%edx
f0131022:	89 10                	mov    %edx,(%eax)
f0131024:	eb 0a                	jmp    f0131030 <alloc_block_FF+0x95>
f0131026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131029:	8b 00                	mov    (%eax),%eax
f013102b:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131033:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131039:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013103c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131043:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131048:	48                   	dec    %eax
f0131049:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			   return  point;
f013104e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131051:	e9 10 01 00 00       	jmp    f0131166 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131059:	8b 40 0c             	mov    0xc(%eax),%eax
f013105c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013105f:	0f 86 c6 00 00 00    	jbe    f013112b <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131065:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013106a:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f013106d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131070:	8b 50 08             	mov    0x8(%eax),%edx
f0131073:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131076:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013107c:	8b 55 08             	mov    0x8(%ebp),%edx
f013107f:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131082:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131086:	75 17                	jne    f013109f <alloc_block_FF+0x104>
f0131088:	83 ec 04             	sub    $0x4,%esp
f013108b:	68 10 c4 13 f0       	push   $0xf013c410
f0131090:	68 9b 00 00 00       	push   $0x9b
f0131095:	68 67 c3 13 f0       	push   $0xf013c367
f013109a:	e8 07 f1 fc ff       	call   f01001a6 <_panic>
f013109f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310a2:	8b 00                	mov    (%eax),%eax
f01310a4:	85 c0                	test   %eax,%eax
f01310a6:	74 10                	je     f01310b8 <alloc_block_FF+0x11d>
f01310a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310ab:	8b 00                	mov    (%eax),%eax
f01310ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01310b0:	8b 52 04             	mov    0x4(%edx),%edx
f01310b3:	89 50 04             	mov    %edx,0x4(%eax)
f01310b6:	eb 0b                	jmp    f01310c3 <alloc_block_FF+0x128>
f01310b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310bb:	8b 40 04             	mov    0x4(%eax),%eax
f01310be:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f01310c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310c6:	8b 40 04             	mov    0x4(%eax),%eax
f01310c9:	85 c0                	test   %eax,%eax
f01310cb:	74 0f                	je     f01310dc <alloc_block_FF+0x141>
f01310cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310d0:	8b 40 04             	mov    0x4(%eax),%eax
f01310d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01310d6:	8b 12                	mov    (%edx),%edx
f01310d8:	89 10                	mov    %edx,(%eax)
f01310da:	eb 0a                	jmp    f01310e6 <alloc_block_FF+0x14b>
f01310dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310df:	8b 00                	mov    (%eax),%eax
f01310e1:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01310e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01310ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310f2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01310f9:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01310fe:	48                   	dec    %eax
f01310ff:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
			   point->sva += size;
f0131104:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131107:	8b 50 08             	mov    0x8(%eax),%edx
f013110a:	8b 45 08             	mov    0x8(%ebp),%eax
f013110d:	01 c2                	add    %eax,%edx
f013110f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131112:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0131115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131118:	8b 40 0c             	mov    0xc(%eax),%eax
f013111b:	2b 45 08             	sub    0x8(%ebp),%eax
f013111e:	89 c2                	mov    %eax,%edx
f0131120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131123:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0131126:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131129:	eb 3b                	jmp    f0131166 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f013112b:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131130:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131133:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131137:	74 07                	je     f0131140 <alloc_block_FF+0x1a5>
f0131139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013113c:	8b 00                	mov    (%eax),%eax
f013113e:	eb 05                	jmp    f0131145 <alloc_block_FF+0x1aa>
f0131140:	b8 00 00 00 00       	mov    $0x0,%eax
f0131145:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f013114a:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013114f:	85 c0                	test   %eax,%eax
f0131151:	0f 85 57 fe ff ff    	jne    f0130fae <alloc_block_FF+0x13>
f0131157:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013115b:	0f 85 4d fe ff ff    	jne    f0130fae <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131161:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131166:	c9                   	leave  
f0131167:	c3                   	ret    

f0131168 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131168:	55                   	push   %ebp
f0131169:	89 e5                	mov    %esp,%ebp
f013116b:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f013116e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131175:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013117a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013117d:	e9 df 00 00 00       	jmp    f0131261 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131182:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131185:	8b 40 0c             	mov    0xc(%eax),%eax
f0131188:	3b 45 08             	cmp    0x8(%ebp),%eax
f013118b:	0f 82 c8 00 00 00    	jb     f0131259 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131191:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131194:	8b 40 0c             	mov    0xc(%eax),%eax
f0131197:	3b 45 08             	cmp    0x8(%ebp),%eax
f013119a:	0f 85 8a 00 00 00    	jne    f013122a <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f01311a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01311a4:	75 17                	jne    f01311bd <alloc_block_BF+0x55>
f01311a6:	83 ec 04             	sub    $0x4,%esp
f01311a9:	68 10 c4 13 f0       	push   $0xf013c410
f01311ae:	68 b7 00 00 00       	push   $0xb7
f01311b3:	68 67 c3 13 f0       	push   $0xf013c367
f01311b8:	e8 e9 ef fc ff       	call   f01001a6 <_panic>
f01311bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311c0:	8b 00                	mov    (%eax),%eax
f01311c2:	85 c0                	test   %eax,%eax
f01311c4:	74 10                	je     f01311d6 <alloc_block_BF+0x6e>
f01311c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311c9:	8b 00                	mov    (%eax),%eax
f01311cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311ce:	8b 52 04             	mov    0x4(%edx),%edx
f01311d1:	89 50 04             	mov    %edx,0x4(%eax)
f01311d4:	eb 0b                	jmp    f01311e1 <alloc_block_BF+0x79>
f01311d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311d9:	8b 40 04             	mov    0x4(%eax),%eax
f01311dc:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01311e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311e4:	8b 40 04             	mov    0x4(%eax),%eax
f01311e7:	85 c0                	test   %eax,%eax
f01311e9:	74 0f                	je     f01311fa <alloc_block_BF+0x92>
f01311eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311ee:	8b 40 04             	mov    0x4(%eax),%eax
f01311f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311f4:	8b 12                	mov    (%edx),%edx
f01311f6:	89 10                	mov    %edx,(%eax)
f01311f8:	eb 0a                	jmp    f0131204 <alloc_block_BF+0x9c>
f01311fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311fd:	8b 00                	mov    (%eax),%eax
f01311ff:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131204:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131207:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013120d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131210:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131217:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f013121c:	48                   	dec    %eax
f013121d:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			   return currentMemBlock;
f0131222:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131225:	e9 4d 01 00 00       	jmp    f0131377 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f013122a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013122d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131230:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131233:	76 24                	jbe    f0131259 <alloc_block_BF+0xf1>
f0131235:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131238:	8b 40 0c             	mov    0xc(%eax),%eax
f013123b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013123e:	73 19                	jae    f0131259 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0131240:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131247:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013124a:	8b 40 0c             	mov    0xc(%eax),%eax
f013124d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0131250:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131253:	8b 40 08             	mov    0x8(%eax),%eax
f0131256:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131259:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013125e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131261:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131265:	74 07                	je     f013126e <alloc_block_BF+0x106>
f0131267:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013126a:	8b 00                	mov    (%eax),%eax
f013126c:	eb 05                	jmp    f0131273 <alloc_block_BF+0x10b>
f013126e:	b8 00 00 00 00       	mov    $0x0,%eax
f0131273:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0131278:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013127d:	85 c0                	test   %eax,%eax
f013127f:	0f 85 fd fe ff ff    	jne    f0131182 <alloc_block_BF+0x1a>
f0131285:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131289:	0f 85 f3 fe ff ff    	jne    f0131182 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f013128f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131293:	0f 84 d9 00 00 00    	je     f0131372 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131299:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013129e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01312a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01312a7:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f01312aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01312b0:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f01312b3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01312b7:	75 17                	jne    f01312d0 <alloc_block_BF+0x168>
f01312b9:	83 ec 04             	sub    $0x4,%esp
f01312bc:	68 10 c4 13 f0       	push   $0xf013c410
f01312c1:	68 c7 00 00 00       	push   $0xc7
f01312c6:	68 67 c3 13 f0       	push   $0xf013c367
f01312cb:	e8 d6 ee fc ff       	call   f01001a6 <_panic>
f01312d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312d3:	8b 00                	mov    (%eax),%eax
f01312d5:	85 c0                	test   %eax,%eax
f01312d7:	74 10                	je     f01312e9 <alloc_block_BF+0x181>
f01312d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312dc:	8b 00                	mov    (%eax),%eax
f01312de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01312e1:	8b 52 04             	mov    0x4(%edx),%edx
f01312e4:	89 50 04             	mov    %edx,0x4(%eax)
f01312e7:	eb 0b                	jmp    f01312f4 <alloc_block_BF+0x18c>
f01312e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312ec:	8b 40 04             	mov    0x4(%eax),%eax
f01312ef:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f01312f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312f7:	8b 40 04             	mov    0x4(%eax),%eax
f01312fa:	85 c0                	test   %eax,%eax
f01312fc:	74 0f                	je     f013130d <alloc_block_BF+0x1a5>
f01312fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131301:	8b 40 04             	mov    0x4(%eax),%eax
f0131304:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131307:	8b 12                	mov    (%edx),%edx
f0131309:	89 10                	mov    %edx,(%eax)
f013130b:	eb 0a                	jmp    f0131317 <alloc_block_BF+0x1af>
f013130d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131310:	8b 00                	mov    (%eax),%eax
f0131312:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131317:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013131a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131323:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013132a:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f013132f:	48                   	dec    %eax
f0131330:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0131335:	83 ec 08             	sub    $0x8,%esp
f0131338:	ff 75 ec             	pushl  -0x14(%ebp)
f013133b:	68 c0 74 6e f0       	push   $0xf06e74c0
f0131340:	e8 71 f9 ff ff       	call   f0130cb6 <find_block>
f0131345:	83 c4 10             	add    $0x10,%esp
f0131348:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f013134b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013134e:	8b 50 08             	mov    0x8(%eax),%edx
f0131351:	8b 45 08             	mov    0x8(%ebp),%eax
f0131354:	01 c2                	add    %eax,%edx
f0131356:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131359:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f013135c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013135f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131362:	2b 45 08             	sub    0x8(%ebp),%eax
f0131365:	89 c2                	mov    %eax,%edx
f0131367:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013136a:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f013136d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131370:	eb 05                	jmp    f0131377 <alloc_block_BF+0x20f>
	}
	return NULL;
f0131372:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131377:	c9                   	leave  
f0131378:	c3                   	ret    

f0131379 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131379:	55                   	push   %ebp
f013137a:	89 e5                	mov    %esp,%ebp
f013137c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f013137f:	a1 d0 7f 65 f0       	mov    0xf0657fd0,%eax
f0131384:	85 c0                	test   %eax,%eax
f0131386:	0f 85 de 01 00 00    	jne    f013156a <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013138c:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131391:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131394:	e9 9e 01 00 00       	jmp    f0131537 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131399:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013139c:	8b 40 0c             	mov    0xc(%eax),%eax
f013139f:	3b 45 08             	cmp    0x8(%ebp),%eax
f01313a2:	0f 82 87 01 00 00    	jb     f013152f <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01313a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01313ae:	3b 45 08             	cmp    0x8(%ebp),%eax
f01313b1:	0f 85 95 00 00 00    	jne    f013144c <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01313b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01313bb:	75 17                	jne    f01313d4 <alloc_block_NF+0x5b>
f01313bd:	83 ec 04             	sub    $0x4,%esp
f01313c0:	68 10 c4 13 f0       	push   $0xf013c410
f01313c5:	68 e0 00 00 00       	push   $0xe0
f01313ca:	68 67 c3 13 f0       	push   $0xf013c367
f01313cf:	e8 d2 ed fc ff       	call   f01001a6 <_panic>
f01313d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313d7:	8b 00                	mov    (%eax),%eax
f01313d9:	85 c0                	test   %eax,%eax
f01313db:	74 10                	je     f01313ed <alloc_block_NF+0x74>
f01313dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313e0:	8b 00                	mov    (%eax),%eax
f01313e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01313e5:	8b 52 04             	mov    0x4(%edx),%edx
f01313e8:	89 50 04             	mov    %edx,0x4(%eax)
f01313eb:	eb 0b                	jmp    f01313f8 <alloc_block_NF+0x7f>
f01313ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313f0:	8b 40 04             	mov    0x4(%eax),%eax
f01313f3:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01313f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313fb:	8b 40 04             	mov    0x4(%eax),%eax
f01313fe:	85 c0                	test   %eax,%eax
f0131400:	74 0f                	je     f0131411 <alloc_block_NF+0x98>
f0131402:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131405:	8b 40 04             	mov    0x4(%eax),%eax
f0131408:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013140b:	8b 12                	mov    (%edx),%edx
f013140d:	89 10                	mov    %edx,(%eax)
f013140f:	eb 0a                	jmp    f013141b <alloc_block_NF+0xa2>
f0131411:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131414:	8b 00                	mov    (%eax),%eax
f0131416:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f013141b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013141e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131427:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013142e:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131433:	48                   	dec    %eax
f0131434:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
				   svaOfNF = point->sva;
f0131439:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013143c:	8b 40 08             	mov    0x8(%eax),%eax
f013143f:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
				   return  point;
f0131444:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131447:	e9 f8 04 00 00       	jmp    f0131944 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f013144c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013144f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131452:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131455:	0f 86 d4 00 00 00    	jbe    f013152f <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013145b:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131460:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0131463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131466:	8b 50 08             	mov    0x8(%eax),%edx
f0131469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013146c:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f013146f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131472:	8b 55 08             	mov    0x8(%ebp),%edx
f0131475:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131478:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013147c:	75 17                	jne    f0131495 <alloc_block_NF+0x11c>
f013147e:	83 ec 04             	sub    $0x4,%esp
f0131481:	68 10 c4 13 f0       	push   $0xf013c410
f0131486:	68 e9 00 00 00       	push   $0xe9
f013148b:	68 67 c3 13 f0       	push   $0xf013c367
f0131490:	e8 11 ed fc ff       	call   f01001a6 <_panic>
f0131495:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131498:	8b 00                	mov    (%eax),%eax
f013149a:	85 c0                	test   %eax,%eax
f013149c:	74 10                	je     f01314ae <alloc_block_NF+0x135>
f013149e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314a1:	8b 00                	mov    (%eax),%eax
f01314a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01314a6:	8b 52 04             	mov    0x4(%edx),%edx
f01314a9:	89 50 04             	mov    %edx,0x4(%eax)
f01314ac:	eb 0b                	jmp    f01314b9 <alloc_block_NF+0x140>
f01314ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314b1:	8b 40 04             	mov    0x4(%eax),%eax
f01314b4:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f01314b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314bc:	8b 40 04             	mov    0x4(%eax),%eax
f01314bf:	85 c0                	test   %eax,%eax
f01314c1:	74 0f                	je     f01314d2 <alloc_block_NF+0x159>
f01314c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314c6:	8b 40 04             	mov    0x4(%eax),%eax
f01314c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01314cc:	8b 12                	mov    (%edx),%edx
f01314ce:	89 10                	mov    %edx,(%eax)
f01314d0:	eb 0a                	jmp    f01314dc <alloc_block_NF+0x163>
f01314d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314d5:	8b 00                	mov    (%eax),%eax
f01314d7:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01314dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01314e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314e8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01314ef:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01314f4:	48                   	dec    %eax
f01314f5:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
				   svaOfNF = ReturnedBlock->sva;
f01314fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314fd:	8b 40 08             	mov    0x8(%eax),%eax
f0131500:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
				   point->sva += size;
f0131505:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131508:	8b 50 08             	mov    0x8(%eax),%edx
f013150b:	8b 45 08             	mov    0x8(%ebp),%eax
f013150e:	01 c2                	add    %eax,%edx
f0131510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131513:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0131516:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131519:	8b 40 0c             	mov    0xc(%eax),%eax
f013151c:	2b 45 08             	sub    0x8(%ebp),%eax
f013151f:	89 c2                	mov    %eax,%edx
f0131521:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131524:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0131527:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013152a:	e9 15 04 00 00       	jmp    f0131944 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013152f:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131534:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131537:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013153b:	74 07                	je     f0131544 <alloc_block_NF+0x1cb>
f013153d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131540:	8b 00                	mov    (%eax),%eax
f0131542:	eb 05                	jmp    f0131549 <alloc_block_NF+0x1d0>
f0131544:	b8 00 00 00 00       	mov    $0x0,%eax
f0131549:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f013154e:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131553:	85 c0                	test   %eax,%eax
f0131555:	0f 85 3e fe ff ff    	jne    f0131399 <alloc_block_NF+0x20>
f013155b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013155f:	0f 85 34 fe ff ff    	jne    f0131399 <alloc_block_NF+0x20>
f0131565:	e9 d5 03 00 00       	jmp    f013193f <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f013156a:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013156f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131572:	e9 b1 01 00 00       	jmp    f0131728 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0131577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013157a:	8b 50 08             	mov    0x8(%eax),%edx
f013157d:	a1 d0 7f 65 f0       	mov    0xf0657fd0,%eax
f0131582:	39 c2                	cmp    %eax,%edx
f0131584:	0f 82 96 01 00 00    	jb     f0131720 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f013158a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013158d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131590:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131593:	0f 82 87 01 00 00    	jb     f0131720 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0131599:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013159c:	8b 40 0c             	mov    0xc(%eax),%eax
f013159f:	3b 45 08             	cmp    0x8(%ebp),%eax
f01315a2:	0f 85 95 00 00 00    	jne    f013163d <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01315a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01315ac:	75 17                	jne    f01315c5 <alloc_block_NF+0x24c>
f01315ae:	83 ec 04             	sub    $0x4,%esp
f01315b1:	68 10 c4 13 f0       	push   $0xf013c410
f01315b6:	68 fc 00 00 00       	push   $0xfc
f01315bb:	68 67 c3 13 f0       	push   $0xf013c367
f01315c0:	e8 e1 eb fc ff       	call   f01001a6 <_panic>
f01315c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315c8:	8b 00                	mov    (%eax),%eax
f01315ca:	85 c0                	test   %eax,%eax
f01315cc:	74 10                	je     f01315de <alloc_block_NF+0x265>
f01315ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315d1:	8b 00                	mov    (%eax),%eax
f01315d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315d6:	8b 52 04             	mov    0x4(%edx),%edx
f01315d9:	89 50 04             	mov    %edx,0x4(%eax)
f01315dc:	eb 0b                	jmp    f01315e9 <alloc_block_NF+0x270>
f01315de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315e1:	8b 40 04             	mov    0x4(%eax),%eax
f01315e4:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01315e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315ec:	8b 40 04             	mov    0x4(%eax),%eax
f01315ef:	85 c0                	test   %eax,%eax
f01315f1:	74 0f                	je     f0131602 <alloc_block_NF+0x289>
f01315f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315f6:	8b 40 04             	mov    0x4(%eax),%eax
f01315f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315fc:	8b 12                	mov    (%edx),%edx
f01315fe:	89 10                	mov    %edx,(%eax)
f0131600:	eb 0a                	jmp    f013160c <alloc_block_NF+0x293>
f0131602:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131605:	8b 00                	mov    (%eax),%eax
f0131607:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f013160c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013160f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131615:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131618:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013161f:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131624:	48                   	dec    %eax
f0131625:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					   svaOfNF = point->sva;
f013162a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013162d:	8b 40 08             	mov    0x8(%eax),%eax
f0131630:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   return  point;
f0131635:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131638:	e9 07 03 00 00       	jmp    f0131944 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013163d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131640:	8b 40 0c             	mov    0xc(%eax),%eax
f0131643:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131646:	0f 86 d4 00 00 00    	jbe    f0131720 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013164c:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131651:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131654:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131657:	8b 50 08             	mov    0x8(%eax),%edx
f013165a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013165d:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0131660:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131663:	8b 55 08             	mov    0x8(%ebp),%edx
f0131666:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131669:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013166d:	75 17                	jne    f0131686 <alloc_block_NF+0x30d>
f013166f:	83 ec 04             	sub    $0x4,%esp
f0131672:	68 10 c4 13 f0       	push   $0xf013c410
f0131677:	68 04 01 00 00       	push   $0x104
f013167c:	68 67 c3 13 f0       	push   $0xf013c367
f0131681:	e8 20 eb fc ff       	call   f01001a6 <_panic>
f0131686:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131689:	8b 00                	mov    (%eax),%eax
f013168b:	85 c0                	test   %eax,%eax
f013168d:	74 10                	je     f013169f <alloc_block_NF+0x326>
f013168f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131692:	8b 00                	mov    (%eax),%eax
f0131694:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131697:	8b 52 04             	mov    0x4(%edx),%edx
f013169a:	89 50 04             	mov    %edx,0x4(%eax)
f013169d:	eb 0b                	jmp    f01316aa <alloc_block_NF+0x331>
f013169f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316a2:	8b 40 04             	mov    0x4(%eax),%eax
f01316a5:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f01316aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316ad:	8b 40 04             	mov    0x4(%eax),%eax
f01316b0:	85 c0                	test   %eax,%eax
f01316b2:	74 0f                	je     f01316c3 <alloc_block_NF+0x34a>
f01316b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316b7:	8b 40 04             	mov    0x4(%eax),%eax
f01316ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01316bd:	8b 12                	mov    (%edx),%edx
f01316bf:	89 10                	mov    %edx,(%eax)
f01316c1:	eb 0a                	jmp    f01316cd <alloc_block_NF+0x354>
f01316c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316c6:	8b 00                	mov    (%eax),%eax
f01316c8:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01316cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01316d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316d9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01316e0:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01316e5:	48                   	dec    %eax
f01316e6:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					   svaOfNF = ReturnedBlock->sva;
f01316eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316ee:	8b 40 08             	mov    0x8(%eax),%eax
f01316f1:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   point->sva += size;
f01316f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316f9:	8b 50 08             	mov    0x8(%eax),%edx
f01316fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01316ff:	01 c2                	add    %eax,%edx
f0131701:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131704:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0131707:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013170a:	8b 40 0c             	mov    0xc(%eax),%eax
f013170d:	2b 45 08             	sub    0x8(%ebp),%eax
f0131710:	89 c2                	mov    %eax,%edx
f0131712:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131715:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131718:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013171b:	e9 24 02 00 00       	jmp    f0131944 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131720:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131725:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131728:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013172c:	74 07                	je     f0131735 <alloc_block_NF+0x3bc>
f013172e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131731:	8b 00                	mov    (%eax),%eax
f0131733:	eb 05                	jmp    f013173a <alloc_block_NF+0x3c1>
f0131735:	b8 00 00 00 00       	mov    $0x0,%eax
f013173a:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f013173f:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131744:	85 c0                	test   %eax,%eax
f0131746:	0f 85 2b fe ff ff    	jne    f0131577 <alloc_block_NF+0x1fe>
f013174c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131750:	0f 85 21 fe ff ff    	jne    f0131577 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131756:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013175b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013175e:	e9 ae 01 00 00       	jmp    f0131911 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0131763:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131766:	8b 50 08             	mov    0x8(%eax),%edx
f0131769:	a1 d0 7f 65 f0       	mov    0xf0657fd0,%eax
f013176e:	39 c2                	cmp    %eax,%edx
f0131770:	0f 83 93 01 00 00    	jae    f0131909 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0131776:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131779:	8b 40 0c             	mov    0xc(%eax),%eax
f013177c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013177f:	0f 82 84 01 00 00    	jb     f0131909 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0131785:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131788:	8b 40 0c             	mov    0xc(%eax),%eax
f013178b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013178e:	0f 85 95 00 00 00    	jne    f0131829 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131794:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131798:	75 17                	jne    f01317b1 <alloc_block_NF+0x438>
f013179a:	83 ec 04             	sub    $0x4,%esp
f013179d:	68 10 c4 13 f0       	push   $0xf013c410
f01317a2:	68 14 01 00 00       	push   $0x114
f01317a7:	68 67 c3 13 f0       	push   $0xf013c367
f01317ac:	e8 f5 e9 fc ff       	call   f01001a6 <_panic>
f01317b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317b4:	8b 00                	mov    (%eax),%eax
f01317b6:	85 c0                	test   %eax,%eax
f01317b8:	74 10                	je     f01317ca <alloc_block_NF+0x451>
f01317ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317bd:	8b 00                	mov    (%eax),%eax
f01317bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317c2:	8b 52 04             	mov    0x4(%edx),%edx
f01317c5:	89 50 04             	mov    %edx,0x4(%eax)
f01317c8:	eb 0b                	jmp    f01317d5 <alloc_block_NF+0x45c>
f01317ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317cd:	8b 40 04             	mov    0x4(%eax),%eax
f01317d0:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01317d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317d8:	8b 40 04             	mov    0x4(%eax),%eax
f01317db:	85 c0                	test   %eax,%eax
f01317dd:	74 0f                	je     f01317ee <alloc_block_NF+0x475>
f01317df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317e2:	8b 40 04             	mov    0x4(%eax),%eax
f01317e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317e8:	8b 12                	mov    (%edx),%edx
f01317ea:	89 10                	mov    %edx,(%eax)
f01317ec:	eb 0a                	jmp    f01317f8 <alloc_block_NF+0x47f>
f01317ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317f1:	8b 00                	mov    (%eax),%eax
f01317f3:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f01317f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131801:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131804:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013180b:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131810:	48                   	dec    %eax
f0131811:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					   svaOfNF = point->sva;
f0131816:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131819:	8b 40 08             	mov    0x8(%eax),%eax
f013181c:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   return  point;
f0131821:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131824:	e9 1b 01 00 00       	jmp    f0131944 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0131829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013182c:	8b 40 0c             	mov    0xc(%eax),%eax
f013182f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131832:	0f 86 d1 00 00 00    	jbe    f0131909 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131838:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013183d:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131840:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131843:	8b 50 08             	mov    0x8(%eax),%edx
f0131846:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131849:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013184c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013184f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131852:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131855:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131859:	75 17                	jne    f0131872 <alloc_block_NF+0x4f9>
f013185b:	83 ec 04             	sub    $0x4,%esp
f013185e:	68 10 c4 13 f0       	push   $0xf013c410
f0131863:	68 1c 01 00 00       	push   $0x11c
f0131868:	68 67 c3 13 f0       	push   $0xf013c367
f013186d:	e8 34 e9 fc ff       	call   f01001a6 <_panic>
f0131872:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131875:	8b 00                	mov    (%eax),%eax
f0131877:	85 c0                	test   %eax,%eax
f0131879:	74 10                	je     f013188b <alloc_block_NF+0x512>
f013187b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013187e:	8b 00                	mov    (%eax),%eax
f0131880:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131883:	8b 52 04             	mov    0x4(%edx),%edx
f0131886:	89 50 04             	mov    %edx,0x4(%eax)
f0131889:	eb 0b                	jmp    f0131896 <alloc_block_NF+0x51d>
f013188b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013188e:	8b 40 04             	mov    0x4(%eax),%eax
f0131891:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131896:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131899:	8b 40 04             	mov    0x4(%eax),%eax
f013189c:	85 c0                	test   %eax,%eax
f013189e:	74 0f                	je     f01318af <alloc_block_NF+0x536>
f01318a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318a3:	8b 40 04             	mov    0x4(%eax),%eax
f01318a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01318a9:	8b 12                	mov    (%edx),%edx
f01318ab:	89 10                	mov    %edx,(%eax)
f01318ad:	eb 0a                	jmp    f01318b9 <alloc_block_NF+0x540>
f01318af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318b2:	8b 00                	mov    (%eax),%eax
f01318b4:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01318b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01318c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318c5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01318cc:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01318d1:	48                   	dec    %eax
f01318d2:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					   svaOfNF = ReturnedBlock->sva;
f01318d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318da:	8b 40 08             	mov    0x8(%eax),%eax
f01318dd:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   point->sva += size;
f01318e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318e5:	8b 50 08             	mov    0x8(%eax),%edx
f01318e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01318eb:	01 c2                	add    %eax,%edx
f01318ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318f0:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f01318f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318f6:	8b 40 0c             	mov    0xc(%eax),%eax
f01318f9:	2b 45 08             	sub    0x8(%ebp),%eax
f01318fc:	89 c2                	mov    %eax,%edx
f01318fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131901:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131904:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131907:	eb 3b                	jmp    f0131944 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131909:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013190e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131911:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131915:	74 07                	je     f013191e <alloc_block_NF+0x5a5>
f0131917:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013191a:	8b 00                	mov    (%eax),%eax
f013191c:	eb 05                	jmp    f0131923 <alloc_block_NF+0x5aa>
f013191e:	b8 00 00 00 00       	mov    $0x0,%eax
f0131923:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0131928:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013192d:	85 c0                	test   %eax,%eax
f013192f:	0f 85 2e fe ff ff    	jne    f0131763 <alloc_block_NF+0x3ea>
f0131935:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131939:	0f 85 24 fe ff ff    	jne    f0131763 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f013193f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131944:	c9                   	leave  
f0131945:	c3                   	ret    

f0131946 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0131946:	55                   	push   %ebp
f0131947:	89 e5                	mov    %esp,%ebp
f0131949:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f013194c:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131951:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0131954:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f0131959:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f013195c:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131961:	85 c0                	test   %eax,%eax
f0131963:	74 14                	je     f0131979 <insert_sorted_with_merge_freeList+0x33>
f0131965:	8b 45 08             	mov    0x8(%ebp),%eax
f0131968:	8b 50 08             	mov    0x8(%eax),%edx
f013196b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013196e:	8b 40 08             	mov    0x8(%eax),%eax
f0131971:	39 c2                	cmp    %eax,%edx
f0131973:	0f 87 9b 01 00 00    	ja     f0131b14 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0131979:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013197d:	75 17                	jne    f0131996 <insert_sorted_with_merge_freeList+0x50>
f013197f:	83 ec 04             	sub    $0x4,%esp
f0131982:	68 44 c3 13 f0       	push   $0xf013c344
f0131987:	68 38 01 00 00       	push   $0x138
f013198c:	68 67 c3 13 f0       	push   $0xf013c367
f0131991:	e8 10 e8 fc ff       	call   f01001a6 <_panic>
f0131996:	8b 15 c0 74 6e f0    	mov    0xf06e74c0,%edx
f013199c:	8b 45 08             	mov    0x8(%ebp),%eax
f013199f:	89 10                	mov    %edx,(%eax)
f01319a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01319a4:	8b 00                	mov    (%eax),%eax
f01319a6:	85 c0                	test   %eax,%eax
f01319a8:	74 0d                	je     f01319b7 <insert_sorted_with_merge_freeList+0x71>
f01319aa:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f01319af:	8b 55 08             	mov    0x8(%ebp),%edx
f01319b2:	89 50 04             	mov    %edx,0x4(%eax)
f01319b5:	eb 08                	jmp    f01319bf <insert_sorted_with_merge_freeList+0x79>
f01319b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ba:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01319bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01319c2:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f01319c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319d1:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f01319d6:	40                   	inc    %eax
f01319d7:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01319dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319e0:	0f 84 a8 06 00 00    	je     f013208e <insert_sorted_with_merge_freeList+0x748>
f01319e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01319e9:	8b 50 08             	mov    0x8(%eax),%edx
f01319ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ef:	8b 40 0c             	mov    0xc(%eax),%eax
f01319f2:	01 c2                	add    %eax,%edx
f01319f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319f7:	8b 40 08             	mov    0x8(%eax),%eax
f01319fa:	39 c2                	cmp    %eax,%edx
f01319fc:	0f 85 8c 06 00 00    	jne    f013208e <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0131a02:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a05:	8b 50 0c             	mov    0xc(%eax),%edx
f0131a08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a0b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a0e:	01 c2                	add    %eax,%edx
f0131a10:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a13:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0131a16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131a1a:	75 17                	jne    f0131a33 <insert_sorted_with_merge_freeList+0xed>
f0131a1c:	83 ec 04             	sub    $0x4,%esp
f0131a1f:	68 10 c4 13 f0       	push   $0xf013c410
f0131a24:	68 3c 01 00 00       	push   $0x13c
f0131a29:	68 67 c3 13 f0       	push   $0xf013c367
f0131a2e:	e8 73 e7 fc ff       	call   f01001a6 <_panic>
f0131a33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a36:	8b 00                	mov    (%eax),%eax
f0131a38:	85 c0                	test   %eax,%eax
f0131a3a:	74 10                	je     f0131a4c <insert_sorted_with_merge_freeList+0x106>
f0131a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a3f:	8b 00                	mov    (%eax),%eax
f0131a41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a44:	8b 52 04             	mov    0x4(%edx),%edx
f0131a47:	89 50 04             	mov    %edx,0x4(%eax)
f0131a4a:	eb 0b                	jmp    f0131a57 <insert_sorted_with_merge_freeList+0x111>
f0131a4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a4f:	8b 40 04             	mov    0x4(%eax),%eax
f0131a52:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131a57:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a5a:	8b 40 04             	mov    0x4(%eax),%eax
f0131a5d:	85 c0                	test   %eax,%eax
f0131a5f:	74 0f                	je     f0131a70 <insert_sorted_with_merge_freeList+0x12a>
f0131a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a64:	8b 40 04             	mov    0x4(%eax),%eax
f0131a67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a6a:	8b 12                	mov    (%edx),%edx
f0131a6c:	89 10                	mov    %edx,(%eax)
f0131a6e:	eb 0a                	jmp    f0131a7a <insert_sorted_with_merge_freeList+0x134>
f0131a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a73:	8b 00                	mov    (%eax),%eax
f0131a75:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a86:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131a8d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131a92:	48                   	dec    %eax
f0131a93:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			head->size = 0;
f0131a98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a9b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0131aa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131aa5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0131aac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ab0:	75 17                	jne    f0131ac9 <insert_sorted_with_merge_freeList+0x183>
f0131ab2:	83 ec 04             	sub    $0x4,%esp
f0131ab5:	68 44 c3 13 f0       	push   $0xf013c344
f0131aba:	68 3f 01 00 00       	push   $0x13f
f0131abf:	68 67 c3 13 f0       	push   $0xf013c367
f0131ac4:	e8 dd e6 fc ff       	call   f01001a6 <_panic>
f0131ac9:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ad2:	89 10                	mov    %edx,(%eax)
f0131ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ad7:	8b 00                	mov    (%eax),%eax
f0131ad9:	85 c0                	test   %eax,%eax
f0131adb:	74 0d                	je     f0131aea <insert_sorted_with_merge_freeList+0x1a4>
f0131add:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131ae2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131ae5:	89 50 04             	mov    %edx,0x4(%eax)
f0131ae8:	eb 08                	jmp    f0131af2 <insert_sorted_with_merge_freeList+0x1ac>
f0131aea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131aed:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131af2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131af5:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131afd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131b04:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131b09:	40                   	inc    %eax
f0131b0a:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0131b0f:	e9 7a 05 00 00       	jmp    f013208e <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0131b14:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b17:	8b 50 08             	mov    0x8(%eax),%edx
f0131b1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b1d:	8b 40 08             	mov    0x8(%eax),%eax
f0131b20:	39 c2                	cmp    %eax,%edx
f0131b22:	0f 82 14 01 00 00    	jb     f0131c3c <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0131b28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b2b:	8b 50 08             	mov    0x8(%eax),%edx
f0131b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b31:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b34:	01 c2                	add    %eax,%edx
f0131b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b39:	8b 40 08             	mov    0x8(%eax),%eax
f0131b3c:	39 c2                	cmp    %eax,%edx
f0131b3e:	0f 85 90 00 00 00    	jne    f0131bd4 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0131b44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b47:	8b 50 0c             	mov    0xc(%eax),%edx
f0131b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b4d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b50:	01 c2                	add    %eax,%edx
f0131b52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b55:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0131b58:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b5b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0131b62:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b65:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0131b6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131b70:	75 17                	jne    f0131b89 <insert_sorted_with_merge_freeList+0x243>
f0131b72:	83 ec 04             	sub    $0x4,%esp
f0131b75:	68 44 c3 13 f0       	push   $0xf013c344
f0131b7a:	68 49 01 00 00       	push   $0x149
f0131b7f:	68 67 c3 13 f0       	push   $0xf013c367
f0131b84:	e8 1d e6 fc ff       	call   f01001a6 <_panic>
f0131b89:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131b8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b92:	89 10                	mov    %edx,(%eax)
f0131b94:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b97:	8b 00                	mov    (%eax),%eax
f0131b99:	85 c0                	test   %eax,%eax
f0131b9b:	74 0d                	je     f0131baa <insert_sorted_with_merge_freeList+0x264>
f0131b9d:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131ba2:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ba5:	89 50 04             	mov    %edx,0x4(%eax)
f0131ba8:	eb 08                	jmp    f0131bb2 <insert_sorted_with_merge_freeList+0x26c>
f0131baa:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bad:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131bb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bb5:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bbd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131bc4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131bc9:	40                   	inc    %eax
f0131bca:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0131bcf:	e9 bb 04 00 00       	jmp    f013208f <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0131bd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131bd8:	75 17                	jne    f0131bf1 <insert_sorted_with_merge_freeList+0x2ab>
f0131bda:	83 ec 04             	sub    $0x4,%esp
f0131bdd:	68 b8 c3 13 f0       	push   $0xf013c3b8
f0131be2:	68 4c 01 00 00       	push   $0x14c
f0131be7:	68 67 c3 13 f0       	push   $0xf013c367
f0131bec:	e8 b5 e5 fc ff       	call   f01001a6 <_panic>
f0131bf1:	8b 15 c4 74 6e f0    	mov    0xf06e74c4,%edx
f0131bf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bfa:	89 50 04             	mov    %edx,0x4(%eax)
f0131bfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c00:	8b 40 04             	mov    0x4(%eax),%eax
f0131c03:	85 c0                	test   %eax,%eax
f0131c05:	74 0c                	je     f0131c13 <insert_sorted_with_merge_freeList+0x2cd>
f0131c07:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f0131c0c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c0f:	89 10                	mov    %edx,(%eax)
f0131c11:	eb 08                	jmp    f0131c1b <insert_sorted_with_merge_freeList+0x2d5>
f0131c13:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c16:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131c1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c1e:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131c23:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131c2c:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131c31:	40                   	inc    %eax
f0131c32:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0131c37:	e9 53 04 00 00       	jmp    f013208f <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0131c3c:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131c41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c44:	e9 15 04 00 00       	jmp    f013205e <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0131c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c4c:	8b 00                	mov    (%eax),%eax
f0131c4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0131c51:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c54:	8b 50 08             	mov    0x8(%eax),%edx
f0131c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c5a:	8b 40 08             	mov    0x8(%eax),%eax
f0131c5d:	39 c2                	cmp    %eax,%edx
f0131c5f:	0f 86 f1 03 00 00    	jbe    f0132056 <insert_sorted_with_merge_freeList+0x710>
f0131c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c68:	8b 50 08             	mov    0x8(%eax),%edx
f0131c6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131c6e:	8b 40 08             	mov    0x8(%eax),%eax
f0131c71:	39 c2                	cmp    %eax,%edx
f0131c73:	0f 83 dd 03 00 00    	jae    f0132056 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0131c79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c7c:	8b 50 08             	mov    0x8(%eax),%edx
f0131c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c82:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c85:	01 c2                	add    %eax,%edx
f0131c87:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c8a:	8b 40 08             	mov    0x8(%eax),%eax
f0131c8d:	39 c2                	cmp    %eax,%edx
f0131c8f:	0f 85 b9 01 00 00    	jne    f0131e4e <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0131c95:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c98:	8b 50 08             	mov    0x8(%eax),%edx
f0131c9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c9e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ca1:	01 c2                	add    %eax,%edx
f0131ca3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ca6:	8b 40 08             	mov    0x8(%eax),%eax
f0131ca9:	39 c2                	cmp    %eax,%edx
f0131cab:	0f 85 0d 01 00 00    	jne    f0131dbe <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0131cb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cb4:	8b 50 0c             	mov    0xc(%eax),%edx
f0131cb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cba:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cbd:	01 c2                	add    %eax,%edx
f0131cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cc2:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0131cc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131cc9:	75 17                	jne    f0131ce2 <insert_sorted_with_merge_freeList+0x39c>
f0131ccb:	83 ec 04             	sub    $0x4,%esp
f0131cce:	68 10 c4 13 f0       	push   $0xf013c410
f0131cd3:	68 5c 01 00 00       	push   $0x15c
f0131cd8:	68 67 c3 13 f0       	push   $0xf013c367
f0131cdd:	e8 c4 e4 fc ff       	call   f01001a6 <_panic>
f0131ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ce5:	8b 00                	mov    (%eax),%eax
f0131ce7:	85 c0                	test   %eax,%eax
f0131ce9:	74 10                	je     f0131cfb <insert_sorted_with_merge_freeList+0x3b5>
f0131ceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cee:	8b 00                	mov    (%eax),%eax
f0131cf0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131cf3:	8b 52 04             	mov    0x4(%edx),%edx
f0131cf6:	89 50 04             	mov    %edx,0x4(%eax)
f0131cf9:	eb 0b                	jmp    f0131d06 <insert_sorted_with_merge_freeList+0x3c0>
f0131cfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cfe:	8b 40 04             	mov    0x4(%eax),%eax
f0131d01:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131d06:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d09:	8b 40 04             	mov    0x4(%eax),%eax
f0131d0c:	85 c0                	test   %eax,%eax
f0131d0e:	74 0f                	je     f0131d1f <insert_sorted_with_merge_freeList+0x3d9>
f0131d10:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d13:	8b 40 04             	mov    0x4(%eax),%eax
f0131d16:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d19:	8b 12                	mov    (%edx),%edx
f0131d1b:	89 10                	mov    %edx,(%eax)
f0131d1d:	eb 0a                	jmp    f0131d29 <insert_sorted_with_merge_freeList+0x3e3>
f0131d1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d22:	8b 00                	mov    (%eax),%eax
f0131d24:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131d29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d35:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d3c:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131d41:	48                   	dec    %eax
f0131d42:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
						nextBlock->sva = 0;
f0131d47:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d4a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0131d51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0131d5b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131d5f:	75 17                	jne    f0131d78 <insert_sorted_with_merge_freeList+0x432>
f0131d61:	83 ec 04             	sub    $0x4,%esp
f0131d64:	68 44 c3 13 f0       	push   $0xf013c344
f0131d69:	68 5f 01 00 00       	push   $0x15f
f0131d6e:	68 67 c3 13 f0       	push   $0xf013c367
f0131d73:	e8 2e e4 fc ff       	call   f01001a6 <_panic>
f0131d78:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131d7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d81:	89 10                	mov    %edx,(%eax)
f0131d83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d86:	8b 00                	mov    (%eax),%eax
f0131d88:	85 c0                	test   %eax,%eax
f0131d8a:	74 0d                	je     f0131d99 <insert_sorted_with_merge_freeList+0x453>
f0131d8c:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131d91:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d94:	89 50 04             	mov    %edx,0x4(%eax)
f0131d97:	eb 08                	jmp    f0131da1 <insert_sorted_with_merge_freeList+0x45b>
f0131d99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d9c:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131da4:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131dac:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131db3:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131db8:	40                   	inc    %eax
f0131db9:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					}
					currentBlock->size += blockToInsert->size;
f0131dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dc1:	8b 50 0c             	mov    0xc(%eax),%edx
f0131dc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dc7:	8b 40 0c             	mov    0xc(%eax),%eax
f0131dca:	01 c2                	add    %eax,%edx
f0131dcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dcf:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0131dd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dd5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0131ddc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ddf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0131de6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131dea:	75 17                	jne    f0131e03 <insert_sorted_with_merge_freeList+0x4bd>
f0131dec:	83 ec 04             	sub    $0x4,%esp
f0131def:	68 44 c3 13 f0       	push   $0xf013c344
f0131df4:	68 64 01 00 00       	push   $0x164
f0131df9:	68 67 c3 13 f0       	push   $0xf013c367
f0131dfe:	e8 a3 e3 fc ff       	call   f01001a6 <_panic>
f0131e03:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131e09:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e0c:	89 10                	mov    %edx,(%eax)
f0131e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e11:	8b 00                	mov    (%eax),%eax
f0131e13:	85 c0                	test   %eax,%eax
f0131e15:	74 0d                	je     f0131e24 <insert_sorted_with_merge_freeList+0x4de>
f0131e17:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131e1c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e1f:	89 50 04             	mov    %edx,0x4(%eax)
f0131e22:	eb 08                	jmp    f0131e2c <insert_sorted_with_merge_freeList+0x4e6>
f0131e24:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e27:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e2f:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131e34:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e37:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e3e:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131e43:	40                   	inc    %eax
f0131e44:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					break;
f0131e49:	e9 41 02 00 00       	jmp    f013208f <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0131e4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e51:	8b 50 08             	mov    0x8(%eax),%edx
f0131e54:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e57:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e5a:	01 c2                	add    %eax,%edx
f0131e5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e5f:	8b 40 08             	mov    0x8(%eax),%eax
f0131e62:	39 c2                	cmp    %eax,%edx
f0131e64:	0f 85 7c 01 00 00    	jne    f0131fe6 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0131e6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131e6e:	74 06                	je     f0131e76 <insert_sorted_with_merge_freeList+0x530>
f0131e70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131e74:	75 17                	jne    f0131e8d <insert_sorted_with_merge_freeList+0x547>
f0131e76:	83 ec 04             	sub    $0x4,%esp
f0131e79:	68 80 c3 13 f0       	push   $0xf013c380
f0131e7e:	68 69 01 00 00       	push   $0x169
f0131e83:	68 67 c3 13 f0       	push   $0xf013c367
f0131e88:	e8 19 e3 fc ff       	call   f01001a6 <_panic>
f0131e8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e90:	8b 50 04             	mov    0x4(%eax),%edx
f0131e93:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e96:	89 50 04             	mov    %edx,0x4(%eax)
f0131e99:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e9c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131e9f:	89 10                	mov    %edx,(%eax)
f0131ea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ea4:	8b 40 04             	mov    0x4(%eax),%eax
f0131ea7:	85 c0                	test   %eax,%eax
f0131ea9:	74 0d                	je     f0131eb8 <insert_sorted_with_merge_freeList+0x572>
f0131eab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131eae:	8b 40 04             	mov    0x4(%eax),%eax
f0131eb1:	8b 55 08             	mov    0x8(%ebp),%edx
f0131eb4:	89 10                	mov    %edx,(%eax)
f0131eb6:	eb 08                	jmp    f0131ec0 <insert_sorted_with_merge_freeList+0x57a>
f0131eb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ebb:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131ec0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ec3:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ec6:	89 50 04             	mov    %edx,0x4(%eax)
f0131ec9:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131ece:	40                   	inc    %eax
f0131ecf:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					blockToInsert->size += nextBlock->size;
f0131ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ed7:	8b 50 0c             	mov    0xc(%eax),%edx
f0131eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131edd:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ee0:	01 c2                	add    %eax,%edx
f0131ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee5:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0131ee8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131eec:	75 17                	jne    f0131f05 <insert_sorted_with_merge_freeList+0x5bf>
f0131eee:	83 ec 04             	sub    $0x4,%esp
f0131ef1:	68 10 c4 13 f0       	push   $0xf013c410
f0131ef6:	68 6b 01 00 00       	push   $0x16b
f0131efb:	68 67 c3 13 f0       	push   $0xf013c367
f0131f00:	e8 a1 e2 fc ff       	call   f01001a6 <_panic>
f0131f05:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f08:	8b 00                	mov    (%eax),%eax
f0131f0a:	85 c0                	test   %eax,%eax
f0131f0c:	74 10                	je     f0131f1e <insert_sorted_with_merge_freeList+0x5d8>
f0131f0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f11:	8b 00                	mov    (%eax),%eax
f0131f13:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131f16:	8b 52 04             	mov    0x4(%edx),%edx
f0131f19:	89 50 04             	mov    %edx,0x4(%eax)
f0131f1c:	eb 0b                	jmp    f0131f29 <insert_sorted_with_merge_freeList+0x5e3>
f0131f1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f21:	8b 40 04             	mov    0x4(%eax),%eax
f0131f24:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131f29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f2c:	8b 40 04             	mov    0x4(%eax),%eax
f0131f2f:	85 c0                	test   %eax,%eax
f0131f31:	74 0f                	je     f0131f42 <insert_sorted_with_merge_freeList+0x5fc>
f0131f33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f36:	8b 40 04             	mov    0x4(%eax),%eax
f0131f39:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131f3c:	8b 12                	mov    (%edx),%edx
f0131f3e:	89 10                	mov    %edx,(%eax)
f0131f40:	eb 0a                	jmp    f0131f4c <insert_sorted_with_merge_freeList+0x606>
f0131f42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f45:	8b 00                	mov    (%eax),%eax
f0131f47:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131f4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f58:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f5f:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131f64:	48                   	dec    %eax
f0131f65:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					nextBlock->sva = 0;
f0131f6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f6d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0131f74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f77:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0131f7e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131f82:	75 17                	jne    f0131f9b <insert_sorted_with_merge_freeList+0x655>
f0131f84:	83 ec 04             	sub    $0x4,%esp
f0131f87:	68 44 c3 13 f0       	push   $0xf013c344
f0131f8c:	68 6e 01 00 00       	push   $0x16e
f0131f91:	68 67 c3 13 f0       	push   $0xf013c367
f0131f96:	e8 0b e2 fc ff       	call   f01001a6 <_panic>
f0131f9b:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131fa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131fa4:	89 10                	mov    %edx,(%eax)
f0131fa6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131fa9:	8b 00                	mov    (%eax),%eax
f0131fab:	85 c0                	test   %eax,%eax
f0131fad:	74 0d                	je     f0131fbc <insert_sorted_with_merge_freeList+0x676>
f0131faf:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131fb4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131fb7:	89 50 04             	mov    %edx,0x4(%eax)
f0131fba:	eb 08                	jmp    f0131fc4 <insert_sorted_with_merge_freeList+0x67e>
f0131fbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131fbf:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131fc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131fc7:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131fcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131fcf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131fd6:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131fdb:	40                   	inc    %eax
f0131fdc:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					break;
f0131fe1:	e9 a9 00 00 00       	jmp    f013208f <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0131fe6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fea:	74 06                	je     f0131ff2 <insert_sorted_with_merge_freeList+0x6ac>
f0131fec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ff0:	75 17                	jne    f0132009 <insert_sorted_with_merge_freeList+0x6c3>
f0131ff2:	83 ec 04             	sub    $0x4,%esp
f0131ff5:	68 dc c3 13 f0       	push   $0xf013c3dc
f0131ffa:	68 73 01 00 00       	push   $0x173
f0131fff:	68 67 c3 13 f0       	push   $0xf013c367
f0132004:	e8 9d e1 fc ff       	call   f01001a6 <_panic>
f0132009:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013200c:	8b 10                	mov    (%eax),%edx
f013200e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132011:	89 10                	mov    %edx,(%eax)
f0132013:	8b 45 08             	mov    0x8(%ebp),%eax
f0132016:	8b 00                	mov    (%eax),%eax
f0132018:	85 c0                	test   %eax,%eax
f013201a:	74 0b                	je     f0132027 <insert_sorted_with_merge_freeList+0x6e1>
f013201c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013201f:	8b 00                	mov    (%eax),%eax
f0132021:	8b 55 08             	mov    0x8(%ebp),%edx
f0132024:	89 50 04             	mov    %edx,0x4(%eax)
f0132027:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013202a:	8b 55 08             	mov    0x8(%ebp),%edx
f013202d:	89 10                	mov    %edx,(%eax)
f013202f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132032:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132035:	89 50 04             	mov    %edx,0x4(%eax)
f0132038:	8b 45 08             	mov    0x8(%ebp),%eax
f013203b:	8b 00                	mov    (%eax),%eax
f013203d:	85 c0                	test   %eax,%eax
f013203f:	75 08                	jne    f0132049 <insert_sorted_with_merge_freeList+0x703>
f0132041:	8b 45 08             	mov    0x8(%ebp),%eax
f0132044:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0132049:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f013204e:	40                   	inc    %eax
f013204f:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					break;
f0132054:	eb 39                	jmp    f013208f <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132056:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013205b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013205e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132062:	74 07                	je     f013206b <insert_sorted_with_merge_freeList+0x725>
f0132064:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132067:	8b 00                	mov    (%eax),%eax
f0132069:	eb 05                	jmp    f0132070 <insert_sorted_with_merge_freeList+0x72a>
f013206b:	b8 00 00 00 00       	mov    $0x0,%eax
f0132070:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0132075:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013207a:	85 c0                	test   %eax,%eax
f013207c:	0f 85 c7 fb ff ff    	jne    f0131c49 <insert_sorted_with_merge_freeList+0x303>
f0132082:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132086:	0f 85 bd fb ff ff    	jne    f0131c49 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013208c:	eb 01                	jmp    f013208f <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013208e:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013208f:	90                   	nop
f0132090:	c9                   	leave  
f0132091:	c3                   	ret    
f0132092:	66 90                	xchg   %ax,%ax

f0132094 <__udivdi3>:
f0132094:	55                   	push   %ebp
f0132095:	57                   	push   %edi
f0132096:	56                   	push   %esi
f0132097:	53                   	push   %ebx
f0132098:	83 ec 1c             	sub    $0x1c,%esp
f013209b:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013209f:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01320a3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01320a7:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01320ab:	89 ca                	mov    %ecx,%edx
f01320ad:	89 f8                	mov    %edi,%eax
f01320af:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01320b3:	85 f6                	test   %esi,%esi
f01320b5:	75 2d                	jne    f01320e4 <__udivdi3+0x50>
f01320b7:	39 cf                	cmp    %ecx,%edi
f01320b9:	77 65                	ja     f0132120 <__udivdi3+0x8c>
f01320bb:	89 fd                	mov    %edi,%ebp
f01320bd:	85 ff                	test   %edi,%edi
f01320bf:	75 0b                	jne    f01320cc <__udivdi3+0x38>
f01320c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01320c6:	31 d2                	xor    %edx,%edx
f01320c8:	f7 f7                	div    %edi
f01320ca:	89 c5                	mov    %eax,%ebp
f01320cc:	31 d2                	xor    %edx,%edx
f01320ce:	89 c8                	mov    %ecx,%eax
f01320d0:	f7 f5                	div    %ebp
f01320d2:	89 c1                	mov    %eax,%ecx
f01320d4:	89 d8                	mov    %ebx,%eax
f01320d6:	f7 f5                	div    %ebp
f01320d8:	89 cf                	mov    %ecx,%edi
f01320da:	89 fa                	mov    %edi,%edx
f01320dc:	83 c4 1c             	add    $0x1c,%esp
f01320df:	5b                   	pop    %ebx
f01320e0:	5e                   	pop    %esi
f01320e1:	5f                   	pop    %edi
f01320e2:	5d                   	pop    %ebp
f01320e3:	c3                   	ret    
f01320e4:	39 ce                	cmp    %ecx,%esi
f01320e6:	77 28                	ja     f0132110 <__udivdi3+0x7c>
f01320e8:	0f bd fe             	bsr    %esi,%edi
f01320eb:	83 f7 1f             	xor    $0x1f,%edi
f01320ee:	75 40                	jne    f0132130 <__udivdi3+0x9c>
f01320f0:	39 ce                	cmp    %ecx,%esi
f01320f2:	72 0a                	jb     f01320fe <__udivdi3+0x6a>
f01320f4:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01320f8:	0f 87 9e 00 00 00    	ja     f013219c <__udivdi3+0x108>
f01320fe:	b8 01 00 00 00       	mov    $0x1,%eax
f0132103:	89 fa                	mov    %edi,%edx
f0132105:	83 c4 1c             	add    $0x1c,%esp
f0132108:	5b                   	pop    %ebx
f0132109:	5e                   	pop    %esi
f013210a:	5f                   	pop    %edi
f013210b:	5d                   	pop    %ebp
f013210c:	c3                   	ret    
f013210d:	8d 76 00             	lea    0x0(%esi),%esi
f0132110:	31 ff                	xor    %edi,%edi
f0132112:	31 c0                	xor    %eax,%eax
f0132114:	89 fa                	mov    %edi,%edx
f0132116:	83 c4 1c             	add    $0x1c,%esp
f0132119:	5b                   	pop    %ebx
f013211a:	5e                   	pop    %esi
f013211b:	5f                   	pop    %edi
f013211c:	5d                   	pop    %ebp
f013211d:	c3                   	ret    
f013211e:	66 90                	xchg   %ax,%ax
f0132120:	89 d8                	mov    %ebx,%eax
f0132122:	f7 f7                	div    %edi
f0132124:	31 ff                	xor    %edi,%edi
f0132126:	89 fa                	mov    %edi,%edx
f0132128:	83 c4 1c             	add    $0x1c,%esp
f013212b:	5b                   	pop    %ebx
f013212c:	5e                   	pop    %esi
f013212d:	5f                   	pop    %edi
f013212e:	5d                   	pop    %ebp
f013212f:	c3                   	ret    
f0132130:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132135:	89 eb                	mov    %ebp,%ebx
f0132137:	29 fb                	sub    %edi,%ebx
f0132139:	89 f9                	mov    %edi,%ecx
f013213b:	d3 e6                	shl    %cl,%esi
f013213d:	89 c5                	mov    %eax,%ebp
f013213f:	88 d9                	mov    %bl,%cl
f0132141:	d3 ed                	shr    %cl,%ebp
f0132143:	89 e9                	mov    %ebp,%ecx
f0132145:	09 f1                	or     %esi,%ecx
f0132147:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013214b:	89 f9                	mov    %edi,%ecx
f013214d:	d3 e0                	shl    %cl,%eax
f013214f:	89 c5                	mov    %eax,%ebp
f0132151:	89 d6                	mov    %edx,%esi
f0132153:	88 d9                	mov    %bl,%cl
f0132155:	d3 ee                	shr    %cl,%esi
f0132157:	89 f9                	mov    %edi,%ecx
f0132159:	d3 e2                	shl    %cl,%edx
f013215b:	8b 44 24 08          	mov    0x8(%esp),%eax
f013215f:	88 d9                	mov    %bl,%cl
f0132161:	d3 e8                	shr    %cl,%eax
f0132163:	09 c2                	or     %eax,%edx
f0132165:	89 d0                	mov    %edx,%eax
f0132167:	89 f2                	mov    %esi,%edx
f0132169:	f7 74 24 0c          	divl   0xc(%esp)
f013216d:	89 d6                	mov    %edx,%esi
f013216f:	89 c3                	mov    %eax,%ebx
f0132171:	f7 e5                	mul    %ebp
f0132173:	39 d6                	cmp    %edx,%esi
f0132175:	72 19                	jb     f0132190 <__udivdi3+0xfc>
f0132177:	74 0b                	je     f0132184 <__udivdi3+0xf0>
f0132179:	89 d8                	mov    %ebx,%eax
f013217b:	31 ff                	xor    %edi,%edi
f013217d:	e9 58 ff ff ff       	jmp    f01320da <__udivdi3+0x46>
f0132182:	66 90                	xchg   %ax,%ax
f0132184:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132188:	89 f9                	mov    %edi,%ecx
f013218a:	d3 e2                	shl    %cl,%edx
f013218c:	39 c2                	cmp    %eax,%edx
f013218e:	73 e9                	jae    f0132179 <__udivdi3+0xe5>
f0132190:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132193:	31 ff                	xor    %edi,%edi
f0132195:	e9 40 ff ff ff       	jmp    f01320da <__udivdi3+0x46>
f013219a:	66 90                	xchg   %ax,%ax
f013219c:	31 c0                	xor    %eax,%eax
f013219e:	e9 37 ff ff ff       	jmp    f01320da <__udivdi3+0x46>
f01321a3:	90                   	nop

f01321a4 <__umoddi3>:
f01321a4:	55                   	push   %ebp
f01321a5:	57                   	push   %edi
f01321a6:	56                   	push   %esi
f01321a7:	53                   	push   %ebx
f01321a8:	83 ec 1c             	sub    $0x1c,%esp
f01321ab:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01321af:	8b 74 24 34          	mov    0x34(%esp),%esi
f01321b3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01321b7:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01321bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01321bf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01321c3:	89 f3                	mov    %esi,%ebx
f01321c5:	89 fa                	mov    %edi,%edx
f01321c7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01321cb:	89 34 24             	mov    %esi,(%esp)
f01321ce:	85 c0                	test   %eax,%eax
f01321d0:	75 1a                	jne    f01321ec <__umoddi3+0x48>
f01321d2:	39 f7                	cmp    %esi,%edi
f01321d4:	0f 86 a2 00 00 00    	jbe    f013227c <__umoddi3+0xd8>
f01321da:	89 c8                	mov    %ecx,%eax
f01321dc:	89 f2                	mov    %esi,%edx
f01321de:	f7 f7                	div    %edi
f01321e0:	89 d0                	mov    %edx,%eax
f01321e2:	31 d2                	xor    %edx,%edx
f01321e4:	83 c4 1c             	add    $0x1c,%esp
f01321e7:	5b                   	pop    %ebx
f01321e8:	5e                   	pop    %esi
f01321e9:	5f                   	pop    %edi
f01321ea:	5d                   	pop    %ebp
f01321eb:	c3                   	ret    
f01321ec:	39 f0                	cmp    %esi,%eax
f01321ee:	0f 87 ac 00 00 00    	ja     f01322a0 <__umoddi3+0xfc>
f01321f4:	0f bd e8             	bsr    %eax,%ebp
f01321f7:	83 f5 1f             	xor    $0x1f,%ebp
f01321fa:	0f 84 ac 00 00 00    	je     f01322ac <__umoddi3+0x108>
f0132200:	bf 20 00 00 00       	mov    $0x20,%edi
f0132205:	29 ef                	sub    %ebp,%edi
f0132207:	89 fe                	mov    %edi,%esi
f0132209:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f013220d:	89 e9                	mov    %ebp,%ecx
f013220f:	d3 e0                	shl    %cl,%eax
f0132211:	89 d7                	mov    %edx,%edi
f0132213:	89 f1                	mov    %esi,%ecx
f0132215:	d3 ef                	shr    %cl,%edi
f0132217:	09 c7                	or     %eax,%edi
f0132219:	89 e9                	mov    %ebp,%ecx
f013221b:	d3 e2                	shl    %cl,%edx
f013221d:	89 14 24             	mov    %edx,(%esp)
f0132220:	89 d8                	mov    %ebx,%eax
f0132222:	d3 e0                	shl    %cl,%eax
f0132224:	89 c2                	mov    %eax,%edx
f0132226:	8b 44 24 08          	mov    0x8(%esp),%eax
f013222a:	d3 e0                	shl    %cl,%eax
f013222c:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132230:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132234:	89 f1                	mov    %esi,%ecx
f0132236:	d3 e8                	shr    %cl,%eax
f0132238:	09 d0                	or     %edx,%eax
f013223a:	d3 eb                	shr    %cl,%ebx
f013223c:	89 da                	mov    %ebx,%edx
f013223e:	f7 f7                	div    %edi
f0132240:	89 d3                	mov    %edx,%ebx
f0132242:	f7 24 24             	mull   (%esp)
f0132245:	89 c6                	mov    %eax,%esi
f0132247:	89 d1                	mov    %edx,%ecx
f0132249:	39 d3                	cmp    %edx,%ebx
f013224b:	0f 82 87 00 00 00    	jb     f01322d8 <__umoddi3+0x134>
f0132251:	0f 84 91 00 00 00    	je     f01322e8 <__umoddi3+0x144>
f0132257:	8b 54 24 04          	mov    0x4(%esp),%edx
f013225b:	29 f2                	sub    %esi,%edx
f013225d:	19 cb                	sbb    %ecx,%ebx
f013225f:	89 d8                	mov    %ebx,%eax
f0132261:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132265:	d3 e0                	shl    %cl,%eax
f0132267:	89 e9                	mov    %ebp,%ecx
f0132269:	d3 ea                	shr    %cl,%edx
f013226b:	09 d0                	or     %edx,%eax
f013226d:	89 e9                	mov    %ebp,%ecx
f013226f:	d3 eb                	shr    %cl,%ebx
f0132271:	89 da                	mov    %ebx,%edx
f0132273:	83 c4 1c             	add    $0x1c,%esp
f0132276:	5b                   	pop    %ebx
f0132277:	5e                   	pop    %esi
f0132278:	5f                   	pop    %edi
f0132279:	5d                   	pop    %ebp
f013227a:	c3                   	ret    
f013227b:	90                   	nop
f013227c:	89 fd                	mov    %edi,%ebp
f013227e:	85 ff                	test   %edi,%edi
f0132280:	75 0b                	jne    f013228d <__umoddi3+0xe9>
f0132282:	b8 01 00 00 00       	mov    $0x1,%eax
f0132287:	31 d2                	xor    %edx,%edx
f0132289:	f7 f7                	div    %edi
f013228b:	89 c5                	mov    %eax,%ebp
f013228d:	89 f0                	mov    %esi,%eax
f013228f:	31 d2                	xor    %edx,%edx
f0132291:	f7 f5                	div    %ebp
f0132293:	89 c8                	mov    %ecx,%eax
f0132295:	f7 f5                	div    %ebp
f0132297:	89 d0                	mov    %edx,%eax
f0132299:	e9 44 ff ff ff       	jmp    f01321e2 <__umoddi3+0x3e>
f013229e:	66 90                	xchg   %ax,%ax
f01322a0:	89 c8                	mov    %ecx,%eax
f01322a2:	89 f2                	mov    %esi,%edx
f01322a4:	83 c4 1c             	add    $0x1c,%esp
f01322a7:	5b                   	pop    %ebx
f01322a8:	5e                   	pop    %esi
f01322a9:	5f                   	pop    %edi
f01322aa:	5d                   	pop    %ebp
f01322ab:	c3                   	ret    
f01322ac:	3b 04 24             	cmp    (%esp),%eax
f01322af:	72 06                	jb     f01322b7 <__umoddi3+0x113>
f01322b1:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01322b5:	77 0f                	ja     f01322c6 <__umoddi3+0x122>
f01322b7:	89 f2                	mov    %esi,%edx
f01322b9:	29 f9                	sub    %edi,%ecx
f01322bb:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01322bf:	89 14 24             	mov    %edx,(%esp)
f01322c2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01322c6:	8b 44 24 04          	mov    0x4(%esp),%eax
f01322ca:	8b 14 24             	mov    (%esp),%edx
f01322cd:	83 c4 1c             	add    $0x1c,%esp
f01322d0:	5b                   	pop    %ebx
f01322d1:	5e                   	pop    %esi
f01322d2:	5f                   	pop    %edi
f01322d3:	5d                   	pop    %ebp
f01322d4:	c3                   	ret    
f01322d5:	8d 76 00             	lea    0x0(%esi),%esi
f01322d8:	2b 04 24             	sub    (%esp),%eax
f01322db:	19 fa                	sbb    %edi,%edx
f01322dd:	89 d1                	mov    %edx,%ecx
f01322df:	89 c6                	mov    %eax,%esi
f01322e1:	e9 71 ff ff ff       	jmp    f0132257 <__umoddi3+0xb3>
f01322e6:	66 90                	xchg   %ax,%ax
f01322e8:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01322ec:	72 ea                	jb     f01322d8 <__umoddi3+0x134>
f01322ee:	89 d9                	mov    %ebx,%ecx
f01322f0:	e9 62 ff ff ff       	jmp    f0132257 <__umoddi3+0xb3>
