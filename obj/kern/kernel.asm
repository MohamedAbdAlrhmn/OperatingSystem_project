
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c ad 89 f0 01 	movl   $0x1,0xf089ad5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 ad 89 f0 01 	movl   $0x1,0xf089ad30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc ae 89 f0       	mov    $0xf089aebc,%edx
f010006a:	b8 9c a1 89 f0       	mov    $0xf089a19c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c a1 89 f0       	push   $0xf089a19c
f010007e:	e8 18 18 03 00       	call   f013189b <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 ad 89 f0 ff 	movl   $0xffffffff,0xf089ad58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 5d 9f 00 00       	call   f010a00b <env_init>
	idt_init();
f01000ae:	e8 15 b5 00 00       	call   f010b5c8 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 47 e0 00 00       	call   f010e0ff <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 ea ce 00 00       	call   f010cfb1 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 f9 78 00 00       	call   f01079d0 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 d5 ce 00 00       	call   f010cfb1 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 06 01 03 00       	call   f01301fe <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 ad 89 f0 61 	movl   $0x61,0xf089ad28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 ac 89 f0 59 	movl   $0x59,0xf089acb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 b1 e3 00 00       	call   f010e4df <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 d1 e0 00 00       	call   f010e20c <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 ac e0 00 00       	call   f010e1f4 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 cc e0 00 00       	call   f010e224 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 40 39 13 f0       	push   $0xf0133940
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 6c 39 13 f0       	push   $0xf013396c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 91 39 13 f0       	push   $0xf0133991
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 98 39 13 f0       	push   $0xf0133998
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 e0 39 13 f0       	push   $0xf01339e0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 28 3a 13 f0       	push   $0xf0133a28
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 e0 39 13 f0       	push   $0xf01339e0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 98 39 13 f0       	push   $0xf0133998
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 6d 3a 13 f0       	push   $0xf0133a6d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 a1 89 f0       	mov    %eax,0xf089a1a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 72 3a 13 f0       	push   $0xf0133a72
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 8b 3a 13 f0       	push   $0xf0133a8b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 91 9c 00 00       	call   f0109f00 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 8d 3a 13 f0       	push   $0xf0133a8d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 a1 89 f0       	mov    %eax,0xf089a1a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 72 3a 13 f0       	push   $0xf0133a72
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 8b 3a 13 f0       	push   $0xf0133a8b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 a1 89 f0       	mov    %eax,0xf089a1a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 72 3a 13 f0       	push   $0xf0133a72
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 8b 3a 13 f0       	push   $0xf0133a8b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 a2 3a 13 f0       	push   $0xf0133aa2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 8b 3a 13 f0       	push   $0xf0133a8b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 a1 89 f0       	mov    0xf089a1c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 a1 89 f0       	mov    %eax,0xf089a1c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 a1 89 f0 b4 	movl   $0x3b4,0xf089a1c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 a1 89 f0 d4 	movl   $0x3d4,0xf089a1c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 a1 89 f0       	mov    %eax,0xf089a1c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 a1 89 f0    	mov    0xf089a1c8,%edx
f0100771:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc a1 89 f0 	mov    0xf089a1cc,%cx
f01007a4:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 a1 89 f0    	mov    0xf089a1c8,%ecx
f010080e:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc a1 89 f0 	mov    %dx,0xf089a1cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 a1 89 f0       	mov    0xf089a1c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 a1 89 f0       	mov    0xf089a1c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 71 10 03 00       	call   f01318cb <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 a1 89 f0    	mov    0xf089a1c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc a1 89 f0    	mov    %ax,0xf089a1cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 a1 89 f0    	mov    0xf089a1c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 a1 89 f0       	mov    0xf089a1c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc a1 89 f0    	mov    0xf089a1cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 a1 89 f0    	mov    0xf089a1c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 a3 89 f0       	mov    %eax,0xf089a3e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 a3 89 f0       	mov    0xf089a3e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 bd 3a 13 f0       	push   $0xf0133abd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 a3 89 f0    	mov    %edx,0xf089a3e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 a1 89 f0    	mov    %dl,-0xf765e20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 a3 89 f0 00 	movl   $0x0,0xf089a3e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 a3 89 f0    	mov    0xf089a3e0,%edx
f0100b03:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 a3 89 f0    	mov    %edx,0xf089a3e0
f0100b1a:	8a 80 e0 a1 89 f0    	mov    -0xf765e20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 a3 89 f0 00 	movl   $0x0,0xf089a3e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 a1 89 f0       	mov    0xf089a1c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 a3 89 f0    	mov    %edx,0xf089a3e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 a1 89 f0    	mov    %dl,-0xf765e20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 a3 89 f0 00 	movl   $0x0,0xf089a3e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 a3 89 f0    	mov    %edx,0xf089a3e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 a1 89 f0    	mov    %dl,-0xf765e20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 a3 89 f0 00 	movl   $0x0,0xf089a3e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 a3 89 f0    	mov    0xf089a3e0,%edx
f0100bf3:	a1 e4 a3 89 f0       	mov    0xf089a3e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 a3 89 f0    	mov    %edx,0xf089a3e0
f0100c0a:	8a 80 e0 a1 89 f0    	mov    -0xf765e20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 a3 89 f0       	mov    0xf089a3e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 a3 89 f0 00 	movl   $0x0,0xf089a3e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 a1 89 f0       	mov    0xf089a1c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 c9 3a 13 f0       	push   $0xf0133ac9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 f9 02 03 00       	call   f0130fff <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 e6 3a 13 f0       	push   $0xf0133ae6
f0100d4c:	e8 56 07 03 00       	call   f01314a7 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 ec 3a 13 f0       	push   $0xf0133aec
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 53 0f 03 00       	call   f0131ce1 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 dd 09 03 00       	call   f01317b9 <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 b5 08 03 00       	call   f01316ad <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 d3 09 03 00       	call   f01317f1 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 f1 3a 13 f0       	push   $0xf0133af1
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 07 3b 13 f0       	push   $0xf0133b07
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c ad 89 f0 00 	movl   $0x0,0xf089ad5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c ad 89 f0 01 	movl   $0x1,0xf089ad5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c ad 89 f0 02 	movl   $0x2,0xf089ad5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c ad 89 f0 03 	movl   $0x3,0xf089ad5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c ad 89 f0 04 	movl   $0x4,0xf089ad5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 ad 89 f0 01 	movl   $0x1,0xf089ad30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 ad 89 f0 02 	movl   $0x2,0xf089ad30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 ad 89 f0 03 	movl   $0x3,0xf089ad30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 ad 89 f0 04 	movl   $0x4,0xf089ad30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 0c 3b 13 f0       	push   $0xf0133b0c
f0101046:	6a 55                	push   $0x55
f0101048:	68 34 3b 13 f0       	push   $0xf0133b34
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 35 19 f0       	add    $0xf0193544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 ae 49 13 f0       	push   $0xf01349ae
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 b7 49 13 f0       	push   $0xf01349b7
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 cc 49 13 f0       	push   $0xf01349cc
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 e8 49 13 f0       	push   $0xf01349e8
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 04 4a 13 f0       	push   $0xf0134a04
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 31 39 13 00       	mov    $0x133931,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 31 39 13 f0       	push   $0xf0133931
f0101172:	68 40 4a 13 f0       	push   $0xf0134a40
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c a1 89 00       	mov    $0x89a19c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c a1 89 f0       	push   $0xf089a19c
f010118d:	68 7c 4a 13 f0       	push   $0xf0134a7c
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc ae 89 00       	mov    $0x89aebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc ae 89 f0       	push   $0xf089aebc
f01011a8:	68 c4 4a 13 f0       	push   $0xf0134ac4
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc ae 89 f0       	mov    $0xf089aebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 00 4b 13 f0       	push   $0xf0134b00
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 2c 4b 13 f0       	push   $0xf0134b2c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 4d 4b 13 f0       	push   $0xf0134b4d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 4d 4b 13 f0       	push   $0xf0134b4d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 4d 4b 13 f0       	push   $0xf0134b4d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 4d 4b 13 f0       	push   $0xf0134b4d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 2c 4b 13 f0       	push   $0xf0134b2c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 4d 4b 13 f0       	push   $0xf0134b4d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 2c 4b 13 f0       	push   $0xf0134b2c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 4d 4b 13 f0       	push   $0xf0134b4d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 2c 4b 13 f0       	push   $0xf0134b2c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 4d 4b 13 f0       	push   $0xf0134b4d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 3a 07 03 00       	call   f0131a0d <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 e9 06 03 00       	call   f0131a0d <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 4d 4b 13 f0       	push   $0xf0134b4d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 4d 4b 13 f0       	push   $0xf0134b4d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 63 06 03 00       	call   f0131a0d <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 22 06 03 00       	call   f0131a0d <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 16 8b 00 00       	call   f0109f1f <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 ec 05 03 00       	call   f0131a0d <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 64 4b 13 f0       	push   $0xf0134b64
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 66 05 03 00       	call   f0131a0d <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 46 05 03 00       	call   f0131a0d <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 c8 01 03 00       	call   f01316ad <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 b9 04 03 00       	call   f0131a0d <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 8e 4b 13 f0       	push   $0xf0134b8e
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 6d 04 03 00       	call   f0131a0d <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 61 89 00 00       	call   f0109f1f <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 37 04 03 00       	call   f0131a0d <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 8e 4b 13 f0       	push   $0xf0134b8e
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 a8 4b 13 f0       	push   $0xf0134ba8
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 a6 03 03 00       	call   f0131a0d <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 86 03 03 00       	call   f0131a0d <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 d2 4b 13 f0       	push   $0xf0134bd2
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 d5 4b 13 f0       	push   $0xf0134bd5
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 1b 03 03 00       	call   f0131a0d <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 0f 88 00 00       	call   f0109f1f <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 e5 02 03 00       	call   f0131a0d <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 ca 02 03 00       	call   f0131a0d <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 d7 4b 13 f0       	push   $0xf0134bd7
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 2e 02 03 00       	call   f0131a0d <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 22 87 00 00       	call   f0109f1f <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 e7 01 03 00       	call   f0131a0d <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 1c 65 00 00       	call   f0107d7e <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 e9 63 00 00       	call   f0107c57 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 e8 4b 13 f0       	push   $0xf0134be8
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 f2 00 03 00       	call   f0131a0d <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 e6 85 00 00       	call   f0109f1f <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 ab 00 03 00       	call   f0131a0d <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 12 4c 13 f0       	push   $0xf0134c12
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 2c 4c 13 f0       	push   $0xf0134c2c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 70 4c 13 f0       	push   $0xf0134c70
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 ad 89 f0       	mov    0xf089ad74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 c8 4c 13 f0       	push   $0xf0134cc8
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 62 c6 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 04 4d 13 f0       	push   $0xf0134d04
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 e2 fe 02 00       	call   f0131a0d <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 c7 fe 02 00       	call   f0131a0d <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 ac fe 02 00       	call   f0131a0d <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 e1 c5 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 7b fe 02 00       	call   f0131a0d <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 5e fe 02 00       	call   f0131a0d <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 43 fe 02 00       	call   f0131a0d <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 7b c5 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 c4 4d 13 f0       	push   $0xf0134dc4
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 fb fd 02 00       	call   f0131a0d <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 54 4e 13 f0       	push   $0xf0134e54
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 ec 4e 13 f0       	push   $0xf0134eec
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 f1 c4 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 2c 4f 13 f0       	push   $0xf0134f2c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 84 4f 13 f0       	push   $0xf0134f84
f0101c98:	68 c9 4f 13 f0       	push   $0xf0134fc9
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 4d 4b 13 f0       	push   $0xf0134b4d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 84 4f 13 f0       	push   $0xf0134f84
f0101cb7:	68 c9 4f 13 f0       	push   $0xf0134fc9
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 4d 4b 13 f0       	push   $0xf0134b4d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 96 75 00 00       	call   f0109278 <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 de 4f 13 f0       	push   $0xf0134fde
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 ad 89 f0 00 	movl   $0x0,0xf089ad74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 96 fc 02 00       	call   f0131a0d <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 de 4f 13 f0       	push   $0xf0134fde
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 ad 89 f0 00 	movl   $0x0,0xf089ad74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 f4 4f 13 f0       	push   $0xf0134ff4
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 ac fb 02 00       	call   f0131a0d <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 54 c2 00 00       	call   f010e0cc <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 54 50 13 f0       	push   $0xf0135054
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 2e c2 00 00       	call   f010e0cc <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 98 50 13 f0       	push   $0xf0135098
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 d8 50 13 f0       	push   $0xf01350d8
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 21 fb 02 00       	call   f0131a0d <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 42 c2 00 00       	call   f010e13f <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 2c 51 13 f0       	push   $0xf013512c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 dd c1 00 00       	call   f010e0ff <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 60 51 13 f0       	push   $0xf0135160
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 cb c1 00 00       	call   f010e10f <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 8c 51 13 f0       	push   $0xf013518c
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 b9 c1 00 00       	call   f010e11f <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 b4 51 13 f0       	push   $0xf01351b4
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 75 fa 02 00       	call   f0131a0d <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 e8 51 13 f0       	push   $0xf01351e8
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 21 fa 02 00       	call   f0131a0d <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 ee f9 02 00       	call   f0131a0d <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 20 52 13 f0       	push   $0xf0135220
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 4d 52 13 f0       	push   $0xf013524d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 d5 4b 13 f0       	push   $0xf0134bd5
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 54 52 13 f0       	push   $0xf0135254
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 4d 52 13 f0       	push   $0xf013524d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 d5 4b 13 f0       	push   $0xf0134bd5
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 88 52 13 f0       	push   $0xf0135288
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 c4 52 13 f0       	push   $0xf01352c4
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 a1 f8 02 00       	call   f0131a0d <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 b2 e7 02 00       	call   f0130933 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 ec 52 13 f0       	push   $0xf01352ec
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 14 53 13 f0       	push   $0xf0135314
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 a9 bf 00 00       	call   f010e16d <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 38 53 13 f0       	push   $0xf0135338
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 70 bf 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 60 53 13 f0       	push   $0xf0135360
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 4d bf 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 a0 53 13 f0       	push   $0xf01353a0
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 60 bf 00 00       	call   f010e188 <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 dc 53 13 f0       	push   $0xf01353dc
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 60 bf 00 00       	call   f010e1a3 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 00 54 13 f0       	push   $0xf0135400
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 30 54 13 f0       	push   $0xf0135430
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 5c 54 13 f0       	push   $0xf013545c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 8c 54 13 f0       	push   $0xf013548c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 bc 54 13 f0       	push   $0xf01354bc
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 ec 54 13 f0       	push   $0xf01354ec
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 1c 55 13 f0       	push   $0xf013551c
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 48 55 13 f0       	push   $0xf0135548
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 74 55 13 f0       	push   $0xf0135574
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 a0 55 13 f0       	push   $0xf01355a0
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 cc 55 13 f0       	push   $0xf01355cc
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 f8 55 13 f0       	push   $0xf01355f8
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 f8 55 13 f0       	push   $0xf01355f8
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 2c 56 13 f0       	push   $0xf013562c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 5c 56 13 f0       	push   $0xf013565c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 8c 56 13 f0       	push   $0xf013568c
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 c0 56 13 f0       	push   $0xf01356c0
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 fc 56 13 f0       	push   $0xf01356fc
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 2c 57 13 f0       	push   $0xf013572c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 58 57 13 f0       	push   $0xf0135758
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 84 57 13 f0       	push   $0xf0135784
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 b4 57 13 f0       	push   $0xf01357b4
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 40 bd 00 00       	call   f010e21a <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 e4 57 13 f0       	push   $0xf01357e4
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 fa bc 00 00       	call   f010e1f4 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 20 58 13 f0       	push   $0xf0135820
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 fb bc 00 00       	call   f010e21a <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 e4 57 13 f0       	push   $0xf01357e4
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 b5 bc 00 00       	call   f010e1f4 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 44 58 13 f0       	push   $0xf0135844
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 a3 bc 00 00       	call   f010e20c <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 7e bc 00 00       	call   f010e1f4 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 64 58 13 f0       	push   $0xf0135864
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 6c bc 00 00       	call   f010e20c <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 47 bc 00 00       	call   f010e1f4 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 7d bc 00 00       	call   f010e232 <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 80 58 13 f0       	push   $0xf0135880
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 b0 58 13 f0       	push   $0xf01358b0
f01025d5:	e8 cd ee 02 00       	call   f01314a7 <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 20 f4 02 00       	call   f0131a0d <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 2b bc 00 00       	call   f010e224 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 31 bc 00 00       	call   f010e232 <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 dc 58 13 f0       	push   $0xf01358dc
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 01 59 13 f0       	push   $0xf0135901
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 e6 bb 00 00       	call   f010e21a <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 1c 59 13 f0       	push   $0xf013591c
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 b3 bb 00 00       	call   f010e202 <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 6c 59 13 f0       	push   $0xf013596c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 95 f3 02 00       	call   f0131a0d <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 a0 bb 00 00       	call   f010e224 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 a6 bb 00 00       	call   f010e232 <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 dc 58 13 f0       	push   $0xf01358dc
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 6b bb 00 00       	call   f010e21a <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 1c 59 13 f0       	push   $0xf013591c
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 38 bb 00 00       	call   f010e202 <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 6c 59 13 f0       	push   $0xf013596c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 4f bb 00 00       	call   f010e232 <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 b2 59 13 f0       	push   $0xf01359b2
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 ea f2 02 00       	call   f0131a0d <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 65 54 01 00       	call   f0117b9c <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 d0 59 13 f0       	push   $0xf01359d0
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 b5 a2 01 00       	call   f011ca25 <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 43 b6 01 00       	call   f011ddc7 <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 20 5a 13 f0       	push   $0xf0135a20
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 e2 53 01 00       	call   f0117b9c <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 28 7d 01 00       	call   f011a4ef <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 71 8f 01 00       	call   f011b745 <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 70 5a 13 f0       	push   $0xf0135a70
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 95 53 01 00       	call   f0117b9c <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 e6 65 01 00       	call   f0118dfa <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 38 c4 01 00       	call   f011ec5c <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 b6 fb 01 00       	call   f01223fe <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 5d da 01 00       	call   f01202ac <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 99 15 02 00       	call   f0123dfa <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 57 2a 02 00       	call   f01252ca <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 22 3f 02 00       	call   f01267a7 <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 1e 99 02 00       	call   f012c1be <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 be b8 02 00       	call   f012e16e <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 ef 3e 01 00       	call   f01167b1 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 c3 48 01 00       	call   f0117197 <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 fb 40 02 00       	call   f01269e1 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 d5 57 02 00       	call   f01280cd <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 44 65 02 00       	call   f0128e4e <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 1f 74 02 00       	call   f0129d3b <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 cf f0 02 00       	call   f0131a0d <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 be 5a 13 f0       	push   $0xf0135abe
f010296c:	50                   	push   %eax
f010296d:	e8 47 ee 02 00       	call   f01317b9 <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f01029b1:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 c8 5a 13 f0       	push   $0xf0135ac8
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 01 5b 13 f0       	push   $0xf0135b01
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 4d 4b 13 f0       	push   $0xf0134b4d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 a7 ea 00 00       	call   f01114ad <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 18 5b 13 f0       	push   $0xf0135b18
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 50 5b 13 f0       	push   $0xf0135b50
f0102a46:	50                   	push   %eax
f0102a47:	e8 6d ed 02 00       	call   f01317b9 <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 ff bf 00 00       	call   f010ea57 <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 55 5b 13 f0       	push   $0xf0135b55
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 46 ed 02 00       	call   f01317b9 <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 ec c0 00 00       	call   f010eb6b <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 5b 5b 13 f0       	push   $0xf0135b5b
f0102a94:	50                   	push   %eax
f0102a95:	e8 1f ed 02 00       	call   f01317b9 <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 83 c5 00 00       	call   f010f029 <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 60 5b 13 f0       	push   $0xf0135b60
f0102abb:	50                   	push   %eax
f0102abc:	e8 f8 ec 02 00       	call   f01317b9 <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 63 5b 13 f0       	push   $0xf0135b63
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 db ec 02 00       	call   f01317b9 <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 9a c8 00 00       	call   f010f384 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 66 5b 13 f0       	push   $0xf0135b66
f0102aff:	50                   	push   %eax
f0102b00:	e8 b4 ec 02 00       	call   f01317b9 <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 69 5b 13 f0       	push   $0xf0135b69
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 97 ec 02 00       	call   f01317b9 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 d4 cc 00 00       	call   f010f802 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 6c 5b 13 f0       	push   $0xf0135b6c
f0102b43:	50                   	push   %eax
f0102b44:	e8 70 ec 02 00       	call   f01317b9 <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 6f 5b 13 f0       	push   $0xf0135b6f
f0102b60:	50                   	push   %eax
f0102b61:	e8 53 ec 02 00       	call   f01317b9 <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 17 d3 00 00       	call   f010fe89 <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 72 5b 13 f0       	push   $0xf0135b72
f0102b84:	50                   	push   %eax
f0102b85:	e8 2f ec 02 00       	call   f01317b9 <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 78 5b 13 f0       	push   $0xf0135b78
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 12 ec 02 00       	call   f01317b9 <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 64 db 00 00       	call   f0110717 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 80 5b 13 f0       	push   $0xf0135b80
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 b9 5b 13 f0       	push   $0xf0135bb9
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 c3 eb 02 00       	call   f01317b9 <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 3f f3 00 00       	call   f0111f41 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 c2 5b 13 f0       	push   $0xf0135bc2
f0102c17:	50                   	push   %eax
f0102c18:	e8 9c eb 02 00       	call   f01317b9 <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 63 fd 00 00       	call   f011298c <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 cc 5b 13 f0       	push   $0xf0135bcc
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 75 eb 02 00       	call   f01317b9 <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 3a 0e 01 00       	call   f0113a8a <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 d2 5b 13 f0       	push   $0xf0135bd2
f0102c62:	50                   	push   %eax
f0102c63:	e8 51 eb 02 00       	call   f01317b9 <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 3e 18 01 00       	call   f01144b2 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 db 5b 13 f0       	push   $0xf0135bdb
f0102c86:	50                   	push   %eax
f0102c87:	e8 2d eb 02 00       	call   f01317b9 <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 c9 20 01 00       	call   f0114d61 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 ea 5b 13 f0       	push   $0xf0135bea
f0102caa:	50                   	push   %eax
f0102cab:	e8 09 eb 02 00       	call   f01317b9 <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 19 29 01 00       	call   f01155d5 <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 fc 5b 13 f0       	push   $0xf0135bfc
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 32 5c 13 f0       	push   $0xf0135c32
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 ba ea 02 00       	call   f01317b9 <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 27 e9 00 00       	call   f0111632 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 3a 5c 13 f0       	push   $0xf0135c3a
f0102d20:	50                   	push   %eax
f0102d21:	e8 93 ea 02 00       	call   f01317b9 <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 63 eb 00 00       	call   f0111895 <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 42 5c 13 f0       	push   $0xf0135c42
f0102d47:	50                   	push   %eax
f0102d48:	e8 6c ea 02 00       	call   f01317b9 <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 85 eb 00 00       	call   f01118de <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 4a 5c 13 f0       	push   $0xf0135c4a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 48 ea 02 00       	call   f01317b9 <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 a5 ec 00 00       	call   f0111a22 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 51 5c 13 f0       	push   $0xf0135c51
f0102d8f:	50                   	push   %eax
f0102d90:	e8 24 ea 02 00       	call   f01317b9 <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 da ed 00 00       	call   f0111b7b <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 58 5c 13 f0       	push   $0xf0135c58
f0102db3:	50                   	push   %eax
f0102db4:	e8 00 ea 02 00       	call   f01317b9 <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 ee ed 00 00       	call   f0111bb3 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 5c 5c 13 f0       	push   $0xf0135c5c
f0102de2:	50                   	push   %eax
f0102de3:	e8 d1 e9 02 00       	call   f01317b9 <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 64 5c 13 f0       	push   $0xf0135c64
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 5c 5c 13 f0       	push   $0xf0135c5c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 94 e9 02 00       	call   f01317b9 <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 b4 5c 13 f0       	push   $0xf0135cb4
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 60 5b 13 f0       	push   $0xf0135b60
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 57 e9 02 00       	call   f01317b9 <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 63 5b 13 f0       	push   $0xf0135b63
f0102e79:	50                   	push   %eax
f0102e7a:	e8 3a e9 02 00       	call   f01317b9 <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 fc 56 13 f0       	push   $0xf01356fc
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 66 5b 13 f0       	push   $0xf0135b66
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 03 e9 02 00       	call   f01317b9 <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 69 5b 13 f0       	push   $0xf0135b69
f0102ecd:	50                   	push   %eax
f0102ece:	e8 e6 e8 02 00       	call   f01317b9 <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 2c 57 13 f0       	push   $0xf013572c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 6c 5b 13 f0       	push   $0xf0135b6c
f0102f01:	50                   	push   %eax
f0102f02:	e8 b2 e8 02 00       	call   f01317b9 <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 6f 5b 13 f0       	push   $0xf0135b6f
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 95 e8 02 00       	call   f01317b9 <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 58 57 13 f0       	push   $0xf0135758
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 5c 5c 13 f0       	push   $0xf0135c5c
f0102f50:	50                   	push   %eax
f0102f51:	e8 63 e8 02 00       	call   f01317b9 <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 97 ea 02 00       	call   f0131a0d <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 d0 59 13 f0       	push   $0xf01359d0
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 ec 4b 01 00       	call   f0117b9c <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 65 9a 01 00       	call   f011ca25 <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 f3 ad 01 00       	call   f011ddc7 <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 20 5a 13 f0       	push   $0xf0135a20
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 8f 4b 01 00       	call   f0117b9c <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 d5 74 01 00       	call   f011a4ef <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 1e 87 01 00       	call   f011b745 <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 70 5a 13 f0       	push   $0xf0135a70
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 3f 4b 01 00       	call   f0117b9c <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 90 5d 01 00       	call   f0118dfa <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 f8 5c 13 f0       	push   $0xf0135cf8
f0103084:	50                   	push   %eax
f0103085:	e8 2f e7 02 00       	call   f01317b9 <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 56 f3 01 00       	call   f01223fe <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 fd d1 01 00       	call   f01202ac <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 fe 5c 13 f0       	push   $0xf0135cfe
f01030c9:	50                   	push   %eax
f01030ca:	e8 ea e6 02 00       	call   f01317b9 <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 1f 0d 02 00       	call   f0123dfa <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 08 5d 13 f0       	push   $0xf0135d08
f01030f2:	50                   	push   %eax
f01030f3:	e8 c1 e6 02 00       	call   f01317b9 <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 c6 21 02 00       	call   f01252ca <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 12 5d 13 f0       	push   $0xf0135d12
f010311b:	50                   	push   %eax
f010311c:	e8 98 e6 02 00       	call   f01317b9 <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 38 b0 02 00       	call   f012e16e <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 98 ec 02 00       	call   f0131e00 <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 a9 ed 02 00       	call   f0131f40 <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 1c 5d 13 f0       	push   $0xf0135d1c
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 33 5d 13 f0       	push   $0xf0135d33
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 ad 89 f0 00 	movl   $0x0,0xf089adb8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc ad 89 f0 00 	movl   $0x0,0xf089adbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 ad 89 f0 00 	movl   $0x0,0xf089adc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 50 5d 13 f0       	push   $0xf0135d50
f010322d:	6a 59                	push   $0x59
f010322f:	68 33 5d 13 f0       	push   $0xf0135d33
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f0103261:	8b 1d dc ac 89 f0    	mov    0xf089acdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc ad 89 f0       	mov    %eax,0xf089adbc
f0103293:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 ad 89 f0       	mov    %eax,0xf089adb8
f01032ac:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 ad 89 f0       	mov    0xf089adc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 ad 89 f0       	mov    %eax,0xf089adc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc ac 89 f0    	mov    0xf089acdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 ad 89 f0       	mov    0xf089adb8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 73 5d 13 f0       	push   $0xf0135d73
f010334c:	6a 78                	push   $0x78
f010334e:	68 33 5d 13 f0       	push   $0xf0135d33
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc ad 89 f0       	mov    %eax,0xf089adbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 ad 89 f0       	mov    %eax,0xf089adb8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 ad 89 f0       	mov    0xf089adc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 ad 89 f0       	mov    %eax,0xf089adc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 50 5d 13 f0       	push   $0xf0135d50
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 33 5d 13 f0       	push   $0xf0135d33
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 ad 89 f0    	mov    0xf089adb8,%edx
f010344f:	8b 1d dc ac 89 f0    	mov    0xf089acdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc ad 89 f0       	mov    %eax,0xf089adbc
f0103481:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 ad 89 f0       	mov    %eax,0xf089adb8
f010349a:	8b 0d dc ac 89 f0    	mov    0xf089acdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 ad 89 f0       	mov    0xf089adc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 ad 89 f0       	mov    %eax,0xf089adc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 7e 48 00 00       	call   f0107d7e <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 94 5d 13 f0       	push   $0xf0135d94
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 33 5d 13 f0       	push   $0xf0135d33
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 1f 46 00 00       	call   f0107b8c <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 02 48 00 00       	call   f0107daa <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 d6 e2 02 00       	call   f013189b <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 ad 89 f0       	mov    0xf089ad60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 c4 5d 13 f0       	push   $0xf0135dc4
f0103679:	68 ea 5d 13 f0       	push   $0xf0135dea
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 33 5d 13 f0       	push   $0xf0135d33
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 c4 5d 13 f0       	push   $0xf0135dc4
f0103729:	68 ea 5d 13 f0       	push   $0xf0135dea
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 33 5d 13 f0       	push   $0xf0135d33
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 c4 5d 13 f0       	push   $0xf0135dc4
f01037ec:	68 ea 5d 13 f0       	push   $0xf0135dea
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 33 5d 13 f0       	push   $0xf0135d33
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 00 5e 13 f0       	push   $0xf0135e00
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 33 5d 13 f0       	push   $0xf0135d33
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 2c 5e 13 f0       	push   $0xf0135e2c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 33 5d 13 f0       	push   $0xf0135d33
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 78 5e 13 f0       	push   $0xf0135e78
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 33 5d 13 f0       	push   $0xf0135d33
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 da 43 00 00       	call   f0107eb4 <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 bf 41 00 00       	call   f0107d7e <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 27 40 00 00       	call   f0107c57 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 02 40 00 00       	call   f0107c57 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 c4 3f 00 00       	call   f0107c57 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 b6 3e 00 00       	call   f0107b8c <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 ac 40 00 00       	call   f0107daa <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 7d db 02 00       	call   f013189b <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 06 40 00 00       	call   f0107d7e <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 ad 89 f0       	mov    0xf089adb8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 ad 89 f0       	mov    0xf089adc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 ad 89 f0       	mov    %eax,0xf089adc0
f0103e01:	a1 c0 ad 89 f0       	mov    0xf089adc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 50 3d 00 00       	call   f0107b8c <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 46 3f 00 00       	call   f0107daa <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 17 da 02 00       	call   f013189b <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 c4 5d 13 f0       	push   $0xf0135dc4
f0103ea2:	68 ea 5d 13 f0       	push   $0xf0135dea
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 33 5d 13 f0       	push   $0xf0135d33
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 f4 5e 13 f0       	push   $0xf0135ef4
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 d5 de 02 00       	call   f0131f40 <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 18 5f 13 f0       	push   $0xf0135f18
f0104168:	6a 33                	push   $0x33
f010416a:	68 74 5f 13 f0       	push   $0xf0135f74
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 18 5f 13 f0       	push   $0xf0135f18
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 74 5f 13 f0       	push   $0xf0135f74
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 88 5f 13 f0       	push   $0xf0135f88
f01044ae:	68 96 5f 13 f0       	push   $0xf0135f96
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 ab 5f 13 f0       	push   $0xf0135fab
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 bc 5f 13 f0       	push   $0xf0135fbc
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 ab 5f 13 f0       	push   $0xf0135fab
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 df 5f 13 f0       	push   $0xf0135fdf
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 ab 5f 13 f0       	push   $0xf0135fab
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 88 5f 13 f0       	push   $0xf0135f88
f01045f7:	68 96 5f 13 f0       	push   $0xf0135f96
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 ab 5f 13 f0       	push   $0xf0135fab
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 df 5f 13 f0       	push   $0xf0135fdf
f0104620:	6a 45                	push   $0x45
f0104622:	68 ab 5f 13 f0       	push   $0xf0135fab
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 00 60 13 f0       	push   $0xf0136000
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 ab 5f 13 f0       	push   $0xf0135fab
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 3b c2 02 00       	call   f013096c <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 ad 89 f0 01 	movl   $0x1,0xf089ad58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010475a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c ad 89 f0       	mov    0xf089ad4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 a3 89 f0       	mov    %eax,0xf089a3f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 e4 c1 02 00       	call   f01309a9 <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 a3 89 f0       	mov    %eax,0xf089a3f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 a0 56 00 00       	call   f0109e81 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 ad 89 f0 01 	movb   $0x1,0xf089ad80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 58 33 00 00       	call   f0107b8c <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 ac 89 f0       	mov    %eax,0xf089ace8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 3f 33 00 00       	call   f0107b8c <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c ad 89 f0       	mov    %eax,0xf089ad2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c ad 89 f0 00 	movl   $0x0,0xf089ad4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 34 60 13 f0       	push   $0xf0136034
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 ab 5f 13 f0       	push   $0xf0135fab
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 ad 89 f0 00 	movl   $0x0,0xf089ad08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c ad 89 f0       	push   $0xf089ad3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 ac 89 f0       	push   $0xf089acf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 ad 89 f0 00 	movl   $0x0,0xf089ad58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 2b 33 00 00       	call   f0107c57 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c ad 89 f0       	mov    0xf089ad2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 11 33 00 00       	call   f0107c57 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 df 5f 13 f0       	push   $0xf0135fdf
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 ab 5f 13 f0       	push   $0xf0135fab
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c ad 89 f0       	push   $0xf089ad3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 df 5f 13 f0       	push   $0xf0135fdf
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 ab 5f 13 f0       	push   $0xf0135fab
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 ad 89 f0       	mov    %eax,0xf089ad40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c ad 89 f0       	mov    %eax,0xf089ad3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 ad 89 f0       	mov    0xf089ad48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 ad 89 f0       	mov    %eax,0xf089ad48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 af 96 00 00       	call   f010e21a <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 75 67 00 00       	call   f010b2ef <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 ac 89 f0       	push   $0xf089acf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 df 5f 13 f0       	push   $0xf0135fdf
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 ab 5f 13 f0       	push   $0xf0135fab
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 ac 89 f0       	mov    %eax,0xf089acf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 ac 89 f0       	mov    %eax,0xf089acf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 ad 89 f0       	mov    0xf089ad00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 ad 89 f0       	mov    %eax,0xf089ad00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 64 60 13 f0       	push   $0xf0136064
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 86 60 13 f0       	push   $0xf0136086
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0104cac:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 90 60 13 f0       	push   $0xf0136090
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 ac 60 13 f0       	push   $0xf01360ac
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 e0 60 13 f0       	push   $0xf01360e0
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 86 60 13 f0       	push   $0xf0136086
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 08 61 13 f0       	push   $0xf0136108
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 ac 60 13 f0       	push   $0xf01360ac
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 2c 61 13 f0       	push   $0xf013612c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 86 60 13 f0       	push   $0xf0136086
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f0104e28:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 4e 61 13 f0       	push   $0xf013614e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0104e9f:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 6c 61 13 f0       	push   $0xf013616c
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 98 61 13 f0       	push   $0xf0136198
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 af 4f 00 00       	call   f0109ed5 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 ab 61 13 f0       	push   $0xf01361ab
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0104f59:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 b1 61 13 f0       	push   $0xf01361b1
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 ac 60 13 f0       	push   $0xf01360ac
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 cc 61 13 f0       	push   $0xf01361cc
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 98 61 13 f0       	push   $0xf0136198
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 df 5f 13 f0       	push   $0xf0135fdf
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 ab 5f 13 f0       	push   $0xf0135fab
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 2c 4e 00 00       	call   f0109ed5 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 ab 61 13 f0       	push   $0xf01361ab
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 08 61 13 f0       	push   $0xf0136108
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 ac 60 13 f0       	push   $0xf01360ac
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 00 62 13 f0       	push   $0xf0136200
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 98 61 13 f0       	push   $0xf0136198
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 34 4d 00 00       	call   f0109ed5 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 ab 61 13 f0       	push   $0xf01361ab
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f01051d4:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 4e 61 13 f0       	push   $0xf013614e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 ad 89 f0       	mov    0xf089ad58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f010528d:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f0105306:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 df 5f 13 f0       	push   $0xf0135fdf
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 ab 5f 13 f0       	push   $0xf0135fab
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 df 5f 13 f0       	push   $0xf0135fdf
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 ab 5f 13 f0       	push   $0xf0135fab
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c ad 89 f0       	mov    0xf089ad3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 2c 62 13 f0       	push   $0xf013622c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 29 48 00 00       	call   f0109ed5 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 ab 61 13 f0       	push   $0xf01361ab
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 ad 89 f0       	mov    %eax,0xf089ad44
f01056e6:	a1 44 ad 89 f0       	mov    0xf089ad44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 54 62 13 f0       	push   $0xf0136254
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 df 5f 13 f0       	push   $0xf0135fdf
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 ab 5f 13 f0       	push   $0xf0135fab
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 ac 46 00 00       	call   f0109ed5 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 ab 61 13 f0       	push   $0xf01361ab
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 80 62 13 f0       	push   $0xf0136280
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 c8 45 00 00       	call   f0109ed5 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 ab 61 13 f0       	push   $0xf01361ab
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f0105947:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 a8 62 13 f0       	push   $0xf01362a8
f0105991:	68 96 5f 13 f0       	push   $0xf0135f96
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 ab 5f 13 f0       	push   $0xf0135fab
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 c8 62 13 f0       	push   $0xf01362c8
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 04 45 00 00       	call   f0109ed5 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 ab 61 13 f0       	push   $0xf01361ab
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 3c 87 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 cd 24 00 00       	call   f0107f68 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 b9 23 00 00       	call   f0107eb4 <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 e6 24 00 00       	call   f0108087 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 cc 24 00 00       	call   f01080ab <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec a3 89 f0 01 	movl   $0x1,0xf089a3ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d5d:	a1 ec a3 89 f0       	mov    0xf089a3ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c ad 89 f0       	mov    %eax,0xf089ad7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 c9 ba 02 00       	call   f013189b <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 f4 62 13 f0       	push   $0xf01362f4
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 28 63 13 f0       	push   $0xf0136328
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac ad 89 f0       	mov    %eax,0xf089adac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 f4 62 13 f0       	push   $0xf01362f4
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 28 63 13 f0       	push   $0xf0136328
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 ad 89 f0    	mov    0xf089ad10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 ad 89 f0       	mov    %eax,0xf089ad54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 be b9 02 00       	call   f013189b <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc ac 89 f0       	mov    %eax,0xf089acdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc ac 89 f0       	mov    0xf089acdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 89 b9 02 00       	call   f013189b <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 f8 a4 02 00       	call   f013041f <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 48 63 13 f0       	push   $0xf0136348
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 a3 89 f0       	mov    %eax,0xf089a3f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 a3 89 f0       	mov    0xf089a3f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 27 b9 02 00       	call   f013189b <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 a3 89 f0       	mov    0xf089a3f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 f4 62 13 f0       	push   $0xf01362f4
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 28 63 13 f0       	push   $0xf0136328
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c ad 89 f0    	mov    0xf089ad7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 f9 ab 02 00       	call   f0130c06 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 ac 89 f0 19 	movl   $0x19,0xf089acf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 ad 89 f0 bc 	movl   $0xf089aebc,0xf089ad78
f0106035:	ae 89 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 ad 89 f0       	mov    %eax,0xf089ad78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 ad 89 f0    	mov    0xf089ad78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 ad 89 f0       	mov    %eax,0xf089ad78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 70 63 13 f0       	push   $0xf0136370
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 28 63 13 f0       	push   $0xf0136328
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 f4 62 13 f0       	push   $0xf01362f4
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 28 63 13 f0       	push   $0xf0136328
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 ad 89 f0       	mov    %eax,0xf089ad10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 a0 63 13 f0       	push   $0xf01363a0
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 c1 63 13 f0       	push   $0xf01363c1
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 f4 62 13 f0       	push   $0xf01362f4
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 28 63 13 f0       	push   $0xf0136328
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 f4 62 13 f0       	push   $0xf01362f4
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 28 63 13 f0       	push   $0xf0136328
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 e0 63 13 f0       	push   $0xf01363e0
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 05 64 13 f0       	push   $0xf0136405
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 ad 89 f0 00 	movl   $0x0,0xf089ad18
f0106531:	00 00 00 
f0106534:	c7 05 1c ad 89 f0 00 	movl   $0x0,0xf089ad1c
f010653b:	00 00 00 
f010653e:	c7 05 24 ad 89 f0 00 	movl   $0x0,0xf089ad24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 ac 89 f0 00 	movl   $0x0,0xf089acb8
f010654f:	00 00 00 
f0106552:	c7 05 bc ac 89 f0 00 	movl   $0x0,0xf089acbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 ac 89 f0 00 	movl   $0x0,0xf089acc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 ad 89 f0       	mov    0xf089ad54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 ad 89 f0 00 	movl   $0xf0001000,0xf089ad60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 ad 89 f0 00 	movl   $0xf0002000,0xf089ad84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 ad 89 f0    	mov    0xf089ad60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 20 64 13 f0       	push   $0xf0136420
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 43 64 13 f0       	push   $0xf0136443
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106677:	8b 1d 54 ad 89 f0    	mov    0xf089ad54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f01066a9:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f01066c2:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 60 64 13 f0       	push   $0xf0136460
f0106752:	6a 64                	push   $0x64
f0106754:	68 43 64 13 f0       	push   $0xf0136443
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 20 64 13 f0       	push   $0xf0136420
f0106814:	6a 70                	push   $0x70
f0106816:	68 43 64 13 f0       	push   $0xf0136443
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106848:	8b 1d 54 ad 89 f0    	mov    0xf089ad54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f010687a:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f0106893:	8b 0d 54 ad 89 f0    	mov    0xf089ad54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 af af 02 00       	call   f013189b <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 94 64 13 f0       	push   $0xf0136494
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 43 64 13 f0       	push   $0xf0136443
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 e1 64 13 f0       	push   $0xf01364e1
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 43 64 13 f0       	push   $0xf0136443
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 d7 15 00 00       	call   f0107fc3 <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 20 64 13 f0       	push   $0xf0136420
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 43 64 13 f0       	push   $0xf0136443
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 ad 89 f0    	mov    0xf089ad18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 ad 89 f0       	mov    0xf089ad18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c ad 89 f0       	mov    %eax,0xf089ad1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 ad 89 f0       	mov    %eax,0xf089ad18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 ad 89 f0       	mov    %eax,0xf089ad24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 8c 12 00 00       	call   f0107d7e <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 00 65 13 f0       	push   $0xf0136500
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 43 64 13 f0       	push   $0xf0136443
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 58 5f 00 00       	call   f010cac4 <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 de 11 00 00       	call   f0107d7e <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 00 65 13 f0       	push   $0xf0136500
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 43 64 13 f0       	push   $0xf0136443
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 71 0f 00 00       	call   f0107b8c <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 2f 65 13 f0       	push   $0xf013652f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 43 64 13 f0       	push   $0xf0136443
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 4d 11 00 00       	call   f0107daa <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 24 ac 02 00       	call   f013189b <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 00 65 13 f0       	push   $0xf0136500
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 43 64 13 f0       	push   $0xf0136443
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 6c ab 02 00       	call   f013189b <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 4c 65 13 f0       	push   $0xf013654c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 3c 0e 00 00       	call   f0107d7e <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 00 65 13 f0       	push   $0xf0136500
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 43 64 13 f0       	push   $0xf0136443
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 ad 89 f0       	mov    0xf089ad18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 ad 89 f0       	mov    0xf089ad20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 ad 89 f0       	mov    %eax,0xf089ad20
f0107034:	a1 20 ad 89 f0       	mov    0xf089ad20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 ac 89 f0       	mov    0xf089acb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 ac 89 f0       	mov    %eax,0xf089acc0
f010706f:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 ad 89 f0       	mov    %eax,0xf089ad28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 66 0a 00 00       	call   f0107b8c <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec ac 89 f0       	mov    %eax,0xf089acec
	if (shares == NULL)
f010712e:	a1 ec ac 89 f0       	mov    0xf089acec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 70 65 13 f0       	push   $0xf0136570
f010713f:	6a 21                	push   $0x21
f0107141:	68 b4 65 13 f0       	push   $0xf01365b4
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 20 a7 02 00       	call   f013189b <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 00 a6 02 00       	call   f013189b <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 99 a4 02 00       	call   f01317b9 <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 a7 08 00 00       	call   f0107c57 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 c1 a4 02 00       	call   f013189b <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 77 07 00 00       	call   f0107b8c <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 d5 65 13 f0       	push   $0xf01365d5
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 b4 65 13 f0       	push   $0xf01365b4
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 5b 08 00 00       	call   f0107d7e <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 28 07 00 00       	call   f0107c57 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	56                   	push   %esi
f01075a0:	53                   	push   %ebx
f01075a1:	83 ec 40             	sub    $0x40,%esp
f01075a4:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a7:	88 45 c4             	mov    %al,-0x3c(%ebp)
	// and return the ShareObjectID
	// RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
	struct Env* myenv = curenv; //The calling environment
f01075aa:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01075af:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//Check if the shared object already exists
	int shared_Result = get_share_object_ID(ownerID , shareName);
f01075b2:	83 ec 08             	sub    $0x8,%esp
f01075b5:	ff 75 0c             	pushl  0xc(%ebp)
f01075b8:	ff 75 08             	pushl  0x8(%ebp)
f01075bb:	e8 e6 fc ff ff       	call   f01072a6 <get_share_object_ID>
f01075c0:	83 c4 10             	add    $0x10,%esp
f01075c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (shared_Result != E_SHARED_MEM_NOT_EXISTS)
f01075c6:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f01075ca:	74 0a                	je     f01075d6 <createSharedObject+0x3a>
		return E_SHARED_MEM_EXISTS;
f01075cc:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075d1:	e9 d4 01 00 00       	jmp    f01077aa <createSharedObject+0x20e>

	//Check if any shared object available
	struct Share * allocatedObject = NULL;
f01075d6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	int sharedObj_index = allocate_share_object(&allocatedObject);
f01075dd:	83 ec 0c             	sub    $0xc,%esp
f01075e0:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01075e3:	50                   	push   %eax
f01075e4:	e8 c5 fb ff ff       	call   f01071ae <allocate_share_object>
f01075e9:	83 c4 10             	add    $0x10,%esp
f01075ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(sharedObj_index == E_NO_SHARE)
f01075ef:	83 7d e0 f2          	cmpl   $0xfffffff2,-0x20(%ebp)
f01075f3:	75 0a                	jne    f01075ff <createSharedObject+0x63>
		return E_NO_SHARE;
f01075f5:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01075fa:	e9 ab 01 00 00       	jmp    f01077aa <createSharedObject+0x20e>

	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
f01075ff:	8b 45 18             	mov    0x18(%ebp),%eax
f0107602:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
f0107605:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010760c:	8b 55 10             	mov    0x10(%ebp),%edx
f010760f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107612:	01 d0                	add    %edx,%eax
f0107614:	48                   	dec    %eax
f0107615:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010761b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107620:	f7 75 dc             	divl   -0x24(%ebp)
f0107623:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107626:	29 d0                	sub    %edx,%eax
f0107628:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	struct FrameInfo *sb_chunck;
	int j = 0;
f010762b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f0107632:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107639:	e9 90 00 00 00       	jmp    f01076ce <createSharedObject+0x132>
	{
		sb_chunck= NULL;
f010763e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		int result= allocate_frame(&sb_chunck);
f0107645:	83 ec 0c             	sub    $0xc,%esp
f0107648:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010764b:	50                   	push   %eax
f010764c:	e8 a1 f2 ff ff       	call   f01068f2 <allocate_frame>
f0107651:	83 c4 10             	add    $0x10,%esp
f0107654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(result != E_NO_MEM)
f0107657:	83 7d d0 fc          	cmpl   $0xfffffffc,-0x30(%ebp)
f010765b:	74 60                	je     f01076bd <createSharedObject+0x121>
		{
			sb_chunck->va = va;
f010765d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0107660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107663:	89 50 0c             	mov    %edx,0xc(%eax)
			map_frame(curenv->env_page_directory ,sb_chunck ,va, PERM_WRITEABLE | PERM_USER);
f0107666:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107669:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010766e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107671:	6a 06                	push   $0x6
f0107673:	ff 75 f4             	pushl  -0xc(%ebp)
f0107676:	52                   	push   %edx
f0107677:	50                   	push   %eax
f0107678:	e8 c4 f6 ff ff       	call   f0106d41 <map_frame>
f010767d:	83 c4 10             	add    $0x10,%esp
			add_frame_to_storage(shares[sharedObj_index].framesStorage , sb_chunck , j);
f0107680:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0107683:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0107686:	8b 35 ec ac 89 f0    	mov    0xf089acec,%esi
f010768c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010768f:	89 d0                	mov    %edx,%eax
f0107691:	c1 e0 02             	shl    $0x2,%eax
f0107694:	01 d0                	add    %edx,%eax
f0107696:	c1 e0 02             	shl    $0x2,%eax
f0107699:	01 d0                	add    %edx,%eax
f010769b:	c1 e0 02             	shl    $0x2,%eax
f010769e:	01 f0                	add    %esi,%eax
f01076a0:	8b 40 50             	mov    0x50(%eax),%eax
f01076a3:	83 ec 04             	sub    $0x4,%esp
f01076a6:	53                   	push   %ebx
f01076a7:	51                   	push   %ecx
f01076a8:	50                   	push   %eax
f01076a9:	e8 8f fd ff ff       	call   f010743d <add_frame_to_storage>
f01076ae:	83 c4 10             	add    $0x10,%esp
			j++;
f01076b1:	ff 45 f0             	incl   -0x10(%ebp)
			va += PAGE_SIZE;
f01076b4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01076bb:	eb 0a                	jmp    f01076c7 <createSharedObject+0x12b>
		}
		else
			return -1;
f01076bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01076c2:	e9 e3 00 00 00       	jmp    f01077aa <createSharedObject+0x20e>
	//Allocate Frames for each page
	uint32 va = (uint32) virtual_address;
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
	struct FrameInfo *sb_chunck;
	int j = 0;
	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f01076c7:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01076ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076d1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01076d4:	0f 82 64 ff ff ff    	jb     f010763e <createSharedObject+0xa2>
		else
			return -1;
	}

	//Initialize the shared object infos
	shares[sharedObj_index].ownerID = ownerID;
f01076da:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01076e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01076e3:	89 d0                	mov    %edx,%eax
f01076e5:	c1 e0 02             	shl    $0x2,%eax
f01076e8:	01 d0                	add    %edx,%eax
f01076ea:	c1 e0 02             	shl    $0x2,%eax
f01076ed:	01 d0                	add    %edx,%eax
f01076ef:	c1 e0 02             	shl    $0x2,%eax
f01076f2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01076f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01076f8:	89 02                	mov    %eax,(%edx)
	strcpy(shares[sharedObj_index].name,shareName);
f01076fa:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f0107700:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107703:	89 d0                	mov    %edx,%eax
f0107705:	c1 e0 02             	shl    $0x2,%eax
f0107708:	01 d0                	add    %edx,%eax
f010770a:	c1 e0 02             	shl    $0x2,%eax
f010770d:	01 d0                	add    %edx,%eax
f010770f:	c1 e0 02             	shl    $0x2,%eax
f0107712:	01 c8                	add    %ecx,%eax
f0107714:	83 c0 04             	add    $0x4,%eax
f0107717:	83 ec 08             	sub    $0x8,%esp
f010771a:	ff 75 0c             	pushl  0xc(%ebp)
f010771d:	50                   	push   %eax
f010771e:	e8 d9 9f 02 00       	call   f01316fc <strcpy>
f0107723:	83 c4 10             	add    $0x10,%esp
	shares[sharedObj_index].references = 1;
f0107726:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010772c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010772f:	89 d0                	mov    %edx,%eax
f0107731:	c1 e0 02             	shl    $0x2,%eax
f0107734:	01 d0                	add    %edx,%eax
f0107736:	c1 e0 02             	shl    $0x2,%eax
f0107739:	01 d0                	add    %edx,%eax
f010773b:	c1 e0 02             	shl    $0x2,%eax
f010773e:	01 c8                	add    %ecx,%eax
f0107740:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
	shares[sharedObj_index].size = size;
f0107747:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010774d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107750:	89 d0                	mov    %edx,%eax
f0107752:	c1 e0 02             	shl    $0x2,%eax
f0107755:	01 d0                	add    %edx,%eax
f0107757:	c1 e0 02             	shl    $0x2,%eax
f010775a:	01 d0                	add    %edx,%eax
f010775c:	c1 e0 02             	shl    $0x2,%eax
f010775f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107762:	8b 45 10             	mov    0x10(%ebp),%eax
f0107765:	89 42 44             	mov    %eax,0x44(%edx)
	shares[sharedObj_index].isWritable = isWritable;
f0107768:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010776e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107771:	89 d0                	mov    %edx,%eax
f0107773:	c1 e0 02             	shl    $0x2,%eax
f0107776:	01 d0                	add    %edx,%eax
f0107778:	c1 e0 02             	shl    $0x2,%eax
f010777b:	01 d0                	add    %edx,%eax
f010777d:	c1 e0 02             	shl    $0x2,%eax
f0107780:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107783:	8a 45 c4             	mov    -0x3c(%ebp),%al
f0107786:	88 42 4c             	mov    %al,0x4c(%edx)
	shares[sharedObj_index].empty = 0;
f0107789:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010778f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107792:	89 d0                	mov    %edx,%eax
f0107794:	c1 e0 02             	shl    $0x2,%eax
f0107797:	01 d0                	add    %edx,%eax
f0107799:	c1 e0 02             	shl    $0x2,%eax
f010779c:	01 d0                	add    %edx,%eax
f010779e:	c1 e0 02             	shl    $0x2,%eax
f01077a1:	01 c8                	add    %ecx,%eax
f01077a3:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)
	return sharedObj_index;
f01077a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01077aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01077ad:	5b                   	pop    %ebx
f01077ae:	5e                   	pop    %esi
f01077af:	5d                   	pop    %ebp
f01077b0:	c3                   	ret    

f01077b1 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01077b1:	55                   	push   %ebp
f01077b2:	89 e5                	mov    %esp,%ebp
f01077b4:	53                   	push   %ebx
f01077b5:	83 ec 24             	sub    $0x24,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f01077b8:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01077bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// 	and return the ShareObjectID
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists

	uint32 va = (uint32) virtual_address;
f01077c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01077c3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 shared_index = get_share_object_ID(ownerID,shareName);
f01077c6:	83 ec 08             	sub    $0x8,%esp
f01077c9:	ff 75 0c             	pushl  0xc(%ebp)
f01077cc:	ff 75 08             	pushl  0x8(%ebp)
f01077cf:	e8 d2 fa ff ff       	call   f01072a6 <get_share_object_ID>
f01077d4:	83 c4 10             	add    $0x10,%esp
f01077d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
f01077da:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
f01077de:	75 0a                	jne    f01077ea <getSharedObject+0x39>
		return E_SHARED_MEM_NOT_EXISTS;
f01077e0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01077e5:	e9 f4 00 00 00       	jmp    f01078de <getSharedObject+0x12d>

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
f01077ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01077f1:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f01077f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077fa:	89 d0                	mov    %edx,%eax
f01077fc:	c1 e0 02             	shl    $0x2,%eax
f01077ff:	01 d0                	add    %edx,%eax
f0107801:	c1 e0 02             	shl    $0x2,%eax
f0107804:	01 d0                	add    %edx,%eax
f0107806:	c1 e0 02             	shl    $0x2,%eax
f0107809:	01 c8                	add    %ecx,%eax
f010780b:	8b 40 44             	mov    0x44(%eax),%eax
f010780e:	89 c2                	mov    %eax,%edx
f0107810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107813:	01 d0                	add    %edx,%eax
f0107815:	48                   	dec    %eax
f0107816:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107819:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010781c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107821:	f7 75 e4             	divl   -0x1c(%ebp)
f0107824:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107827:	29 d0                	sub    %edx,%eax
f0107829:	85 c0                	test   %eax,%eax
f010782b:	79 05                	jns    f0107832 <getSharedObject+0x81>
f010782d:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107832:	c1 f8 0c             	sar    $0xc,%eax
f0107835:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f0107838:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010783f:	e9 8b 00 00 00       	jmp    f01078cf <getSharedObject+0x11e>
	{
		struct FrameInfo* frame = get_frame_from_storage(shares[shared_index].framesStorage, index_of_page);
f0107844:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0107847:	8b 1d ec ac 89 f0    	mov    0xf089acec,%ebx
f010784d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107850:	89 d0                	mov    %edx,%eax
f0107852:	c1 e0 02             	shl    $0x2,%eax
f0107855:	01 d0                	add    %edx,%eax
f0107857:	c1 e0 02             	shl    $0x2,%eax
f010785a:	01 d0                	add    %edx,%eax
f010785c:	c1 e0 02             	shl    $0x2,%eax
f010785f:	01 d8                	add    %ebx,%eax
f0107861:	8b 40 50             	mov    0x50(%eax),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	51                   	push   %ecx
f0107868:	50                   	push   %eax
f0107869:	e8 3f fc ff ff       	call   f01074ad <get_frame_from_storage>
f010786e:	83 c4 10             	add    $0x10,%esp
f0107871:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(shares[shared_index].isWritable == 1)
f0107874:	8b 0d ec ac 89 f0    	mov    0xf089acec,%ecx
f010787a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010787d:	89 d0                	mov    %edx,%eax
f010787f:	c1 e0 02             	shl    $0x2,%eax
f0107882:	01 d0                	add    %edx,%eax
f0107884:	c1 e0 02             	shl    $0x2,%eax
f0107887:	01 d0                	add    %edx,%eax
f0107889:	c1 e0 02             	shl    $0x2,%eax
f010788c:	01 c8                	add    %ecx,%eax
f010788e:	8a 40 4c             	mov    0x4c(%eax),%al
f0107891:	3c 01                	cmp    $0x1,%al
f0107893:	75 19                	jne    f01078ae <getSharedObject+0xfd>
			map_frame(myenv->env_page_directory, frame, va, PERM_WRITEABLE | PERM_USER | PERM_PRESENT);
f0107895:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107898:	8b 40 5c             	mov    0x5c(%eax),%eax
f010789b:	6a 07                	push   $0x7
f010789d:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a0:	ff 75 d8             	pushl  -0x28(%ebp)
f01078a3:	50                   	push   %eax
f01078a4:	e8 98 f4 ff ff       	call   f0106d41 <map_frame>
f01078a9:	83 c4 10             	add    $0x10,%esp
f01078ac:	eb 17                	jmp    f01078c5 <getSharedObject+0x114>
		else
			map_frame(myenv->env_page_directory, frame, va, PERM_USER | PERM_PRESENT);
f01078ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078b1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01078b4:	6a 05                	push   $0x5
f01078b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01078b9:	ff 75 d8             	pushl  -0x28(%ebp)
f01078bc:	50                   	push   %eax
f01078bd:	e8 7f f4 ff ff       	call   f0106d41 <map_frame>
f01078c2:	83 c4 10             	add    $0x10,%esp
		va += PAGE_SIZE;
f01078c5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	uint32 shared_index = get_share_object_ID(ownerID,shareName);
	if(shared_index == E_SHARED_MEM_NOT_EXISTS)
		return E_SHARED_MEM_NOT_EXISTS;

	int size_count = ROUNDUP(shares[shared_index].size,PAGE_SIZE) / PAGE_SIZE;
	for(int index_of_page = 0; index_of_page < size_count; index_of_page++)
f01078cc:	ff 45 f0             	incl   -0x10(%ebp)
f01078cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078d2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01078d5:	0f 8c 69 ff ff ff    	jl     f0107844 <getSharedObject+0x93>
			map_frame(myenv->env_page_directory, frame, va, PERM_USER | PERM_PRESENT);
		va += PAGE_SIZE;
	}

	//shares[shared_index].references++;
	return shared_index;
f01078db:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01078de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01078e1:	c9                   	leave  
f01078e2:	c3                   	ret    

f01078e3 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01078e3:	55                   	push   %ebp
f01078e4:	89 e5                	mov    %esp,%ebp
f01078e6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01078e9:	83 ec 04             	sub    $0x4,%esp
f01078ec:	68 f4 65 13 f0       	push   $0xf01365f4
f01078f1:	68 75 01 00 00       	push   $0x175
f01078f6:	68 b4 65 13 f0       	push   $0xf01365b4
f01078fb:	e8 05 89 ff ff       	call   f0100205 <_panic>

f0107900 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107900:	55                   	push   %ebp
f0107901:	89 e5                	mov    %esp,%ebp
f0107903:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0107908:	83 f8 01             	cmp    $0x1,%eax
f010790b:	75 04                	jne    f0107911 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010790d:	b0 01                	mov    $0x1,%al
f010790f:	eb 02                	jmp    f0107913 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107911:	b0 00                	mov    $0x0,%al
f0107913:	5d                   	pop    %ebp
f0107914:	c3                   	ret    

f0107915 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107915:	55                   	push   %ebp
f0107916:	89 e5                	mov    %esp,%ebp
f0107918:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f010791d:	83 f8 02             	cmp    $0x2,%eax
f0107920:	75 04                	jne    f0107926 <isKHeapPlacementStrategyBESTFIT+0x11>
f0107922:	b0 01                	mov    $0x1,%al
f0107924:	eb 02                	jmp    f0107928 <isKHeapPlacementStrategyBESTFIT+0x13>
f0107926:	b0 00                	mov    $0x0,%al
f0107928:	5d                   	pop    %ebp
f0107929:	c3                   	ret    

f010792a <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010792a:	55                   	push   %ebp
f010792b:	89 e5                	mov    %esp,%ebp
f010792d:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0107932:	83 f8 03             	cmp    $0x3,%eax
f0107935:	75 04                	jne    f010793b <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107937:	b0 01                	mov    $0x1,%al
f0107939:	eb 02                	jmp    f010793d <isKHeapPlacementStrategyNEXTFIT+0x13>
f010793b:	b0 00                	mov    $0x0,%al
f010793d:	5d                   	pop    %ebp
f010793e:	c3                   	ret    

f010793f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010793f:	55                   	push   %ebp
f0107940:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107942:	8b 45 08             	mov    0x8(%ebp),%eax
f0107945:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f010794b:	29 d0                	sub    %edx,%eax
f010794d:	c1 f8 03             	sar    $0x3,%eax
f0107950:	89 c2                	mov    %eax,%edx
f0107952:	89 d0                	mov    %edx,%eax
f0107954:	c1 e0 02             	shl    $0x2,%eax
f0107957:	01 d0                	add    %edx,%eax
f0107959:	c1 e0 02             	shl    $0x2,%eax
f010795c:	01 d0                	add    %edx,%eax
f010795e:	c1 e0 02             	shl    $0x2,%eax
f0107961:	01 d0                	add    %edx,%eax
f0107963:	89 c1                	mov    %eax,%ecx
f0107965:	c1 e1 08             	shl    $0x8,%ecx
f0107968:	01 c8                	add    %ecx,%eax
f010796a:	89 c1                	mov    %eax,%ecx
f010796c:	c1 e1 10             	shl    $0x10,%ecx
f010796f:	01 c8                	add    %ecx,%eax
f0107971:	01 c0                	add    %eax,%eax
f0107973:	01 d0                	add    %edx,%eax
}
f0107975:	5d                   	pop    %ebp
f0107976:	c3                   	ret    

f0107977 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107977:	55                   	push   %ebp
f0107978:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010797a:	ff 75 08             	pushl  0x8(%ebp)
f010797d:	e8 bd ff ff ff       	call   f010793f <to_frame_number>
f0107982:	83 c4 04             	add    $0x4,%esp
f0107985:	c1 e0 0c             	shl    $0xc,%eax
}
f0107988:	c9                   	leave  
f0107989:	c3                   	ret    

f010798a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010798a:	55                   	push   %ebp
f010798b:	89 e5                	mov    %esp,%ebp
f010798d:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107990:	8b 45 08             	mov    0x8(%ebp),%eax
f0107993:	c1 e8 0c             	shr    $0xc,%eax
f0107996:	89 c2                	mov    %eax,%edx
f0107998:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f010799d:	39 c2                	cmp    %eax,%edx
f010799f:	72 14                	jb     f01079b5 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01079a1:	83 ec 04             	sub    $0x4,%esp
f01079a4:	68 24 66 13 f0       	push   $0xf0136624
f01079a9:	6a 55                	push   $0x55
f01079ab:	68 49 66 13 f0       	push   $0xf0136649
f01079b0:	e8 50 88 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01079b5:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f01079bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01079be:	c1 e8 0c             	shr    $0xc,%eax
f01079c1:	89 c1                	mov    %eax,%ecx
f01079c3:	89 c8                	mov    %ecx,%eax
f01079c5:	01 c0                	add    %eax,%eax
f01079c7:	01 c8                	add    %ecx,%eax
f01079c9:	c1 e0 03             	shl    $0x3,%eax
f01079cc:	01 d0                	add    %edx,%eax
}
f01079ce:	c9                   	leave  
f01079cf:	c3                   	ret    

f01079d0 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01079d0:	55                   	push   %ebp
f01079d1:	89 e5                	mov    %esp,%ebp
f01079d3:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01079d6:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f01079dd:	00 00 00 
f01079e0:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f01079e7:	00 00 00 
f01079ea:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f01079f1:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01079f4:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f01079fb:	00 00 00 
f01079fe:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f0107a05:	00 00 00 
f0107a08:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f0107a0f:	00 00 00 
	uint32 arr_size = 0;
f0107a12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107a19:	c7 05 04 ad 89 f0 ff 	movl   $0x9fff,0xf089ad04
f0107a20:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107a23:	c7 05 d8 ac 89 f0 00 	movl   $0xf6000000,0xf089acd8
f0107a2a:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f0107a2d:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107a34:	a1 04 ad 89 f0       	mov    0xf089ad04,%eax
f0107a39:	c1 e0 04             	shl    $0x4,%eax
f0107a3c:	89 c2                	mov    %eax,%edx
f0107a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a41:	01 d0                	add    %edx,%eax
f0107a43:	48                   	dec    %eax
f0107a44:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a4f:	f7 75 f0             	divl   -0x10(%ebp)
f0107a52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a55:	29 d0                	sub    %edx,%eax
f0107a57:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107a5a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107a5f:	6a 03                	push   $0x3
f0107a61:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a64:	68 00 00 00 f6       	push   $0xf6000000
f0107a69:	50                   	push   %eax
f0107a6a:	e8 bd 13 00 00       	call   f0108e2c <allocate_chunk>
f0107a6f:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107a72:	a1 04 ad 89 f0       	mov    0xf089ad04,%eax
f0107a77:	83 ec 0c             	sub    $0xc,%esp
f0107a7a:	50                   	push   %eax
f0107a7b:	e8 97 a7 02 00       	call   f0132217 <initialize_MemBlocksList>
f0107a80:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f0107a83:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0107a88:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a8e:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107a94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a97:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107a9a:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107a9f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107aa2:	89 c2                	mov    %eax,%edx
f0107aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aa7:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f0107aaa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107aae:	75 14                	jne    f0107ac4 <initialize_dyn_block_system+0xf4>
f0107ab0:	83 ec 04             	sub    $0x4,%esp
f0107ab3:	68 63 66 13 f0       	push   $0xf0136663
f0107ab8:	6a 30                	push   $0x30
f0107aba:	68 81 66 13 f0       	push   $0xf0136681
f0107abf:	e8 41 87 ff ff       	call   f0100205 <_panic>
f0107ac4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ac7:	8b 00                	mov    (%eax),%eax
f0107ac9:	85 c0                	test   %eax,%eax
f0107acb:	74 10                	je     f0107add <initialize_dyn_block_system+0x10d>
f0107acd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ad0:	8b 00                	mov    (%eax),%eax
f0107ad2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107ad5:	8b 52 04             	mov    0x4(%edx),%edx
f0107ad8:	89 50 04             	mov    %edx,0x4(%eax)
f0107adb:	eb 0b                	jmp    f0107ae8 <initialize_dyn_block_system+0x118>
f0107add:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ae0:	8b 40 04             	mov    0x4(%eax),%eax
f0107ae3:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0107ae8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107aeb:	8b 40 04             	mov    0x4(%eax),%eax
f0107aee:	85 c0                	test   %eax,%eax
f0107af0:	74 0f                	je     f0107b01 <initialize_dyn_block_system+0x131>
f0107af2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107af5:	8b 40 04             	mov    0x4(%eax),%eax
f0107af8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107afb:	8b 12                	mov    (%edx),%edx
f0107afd:	89 10                	mov    %edx,(%eax)
f0107aff:	eb 0a                	jmp    f0107b0b <initialize_dyn_block_system+0x13b>
f0107b01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b04:	8b 00                	mov    (%eax),%eax
f0107b06:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0107b0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107b14:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b17:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b1e:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0107b23:	48                   	dec    %eax
f0107b24:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107b29:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107b2d:	75 14                	jne    f0107b43 <initialize_dyn_block_system+0x173>
f0107b2f:	83 ec 04             	sub    $0x4,%esp
f0107b32:	68 94 66 13 f0       	push   $0xf0136694
f0107b37:	6a 32                	push   $0x32
f0107b39:	68 81 66 13 f0       	push   $0xf0136681
f0107b3e:	e8 c2 86 ff ff       	call   f0100205 <_panic>
f0107b43:	8b 15 64 ad 89 f0    	mov    0xf089ad64,%edx
f0107b49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b4c:	89 10                	mov    %edx,(%eax)
f0107b4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b51:	8b 00                	mov    (%eax),%eax
f0107b53:	85 c0                	test   %eax,%eax
f0107b55:	74 0d                	je     f0107b64 <initialize_dyn_block_system+0x194>
f0107b57:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0107b5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107b5f:	89 50 04             	mov    %edx,0x4(%eax)
f0107b62:	eb 08                	jmp    f0107b6c <initialize_dyn_block_system+0x19c>
f0107b64:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b67:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0107b6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6f:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0107b74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b77:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b7e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0107b83:	40                   	inc    %eax
f0107b84:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70

}
f0107b89:	90                   	nop
f0107b8a:	c9                   	leave  
f0107b8b:	c3                   	ret    

f0107b8c <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107b8c:	55                   	push   %ebp
f0107b8d:	89 e5                	mov    %esp,%ebp
f0107b8f:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107b92:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107b99:	8b 55 08             	mov    0x8(%ebp),%edx
f0107b9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b9f:	01 d0                	add    %edx,%eax
f0107ba1:	48                   	dec    %eax
f0107ba2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ba5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ba8:	ba 00 00 00 00       	mov    $0x0,%edx
f0107bad:	f7 75 f0             	divl   -0x10(%ebp)
f0107bb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bb3:	29 d0                	sub    %edx,%eax
f0107bb5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f0107bb8:	e8 43 fd ff ff       	call   f0107900 <isKHeapPlacementStrategyFIRSTFIT>
f0107bbd:	84 c0                	test   %al,%al
f0107bbf:	74 13                	je     f0107bd4 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107bc1:	83 ec 0c             	sub    $0xc,%esp
f0107bc4:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bc7:	e8 0d aa 02 00       	call   f01325d9 <alloc_block_FF>
f0107bcc:	83 c4 10             	add    $0x10,%esp
f0107bcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107bd2:	eb 36                	jmp    f0107c0a <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107bd4:	e8 3c fd ff ff       	call   f0107915 <isKHeapPlacementStrategyBESTFIT>
f0107bd9:	84 c0                	test   %al,%al
f0107bdb:	74 13                	je     f0107bf0 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f0107bdd:	83 ec 0c             	sub    $0xc,%esp
f0107be0:	ff 75 e8             	pushl  -0x18(%ebp)
f0107be3:	e8 be ab 02 00       	call   f01327a6 <alloc_block_BF>
f0107be8:	83 c4 10             	add    $0x10,%esp
f0107beb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107bee:	eb 1a                	jmp    f0107c0a <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0107bf0:	e8 35 fd ff ff       	call   f010792a <isKHeapPlacementStrategyNEXTFIT>
f0107bf5:	84 c0                	test   %al,%al
f0107bf7:	74 11                	je     f0107c0a <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f0107bf9:	83 ec 0c             	sub    $0xc,%esp
f0107bfc:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bff:	e8 b3 ad 02 00       	call   f01329b7 <alloc_block_NF>
f0107c04:	83 c4 10             	add    $0x10,%esp
f0107c07:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107c0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107c0e:	74 40                	je     f0107c50 <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c13:	8b 50 08             	mov    0x8(%eax),%edx
f0107c16:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107c1b:	6a 03                	push   $0x3
f0107c1d:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c20:	52                   	push   %edx
f0107c21:	50                   	push   %eax
f0107c22:	e8 05 12 00 00       	call   f0108e2c <allocate_chunk>
f0107c27:	83 c4 10             	add    $0x10,%esp
f0107c2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107c2d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107c31:	75 16                	jne    f0107c49 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f0107c33:	83 ec 0c             	sub    $0xc,%esp
f0107c36:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c39:	e8 0e a7 02 00       	call   f013234c <insert_sorted_allocList>
f0107c3e:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f0107c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c44:	8b 40 08             	mov    0x8(%eax),%eax
f0107c47:	eb 0c                	jmp    f0107c55 <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107c49:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c4e:	eb 05                	jmp    f0107c55 <kmalloc+0xc9>
	}
	return NULL;
f0107c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107c55:	c9                   	leave  
f0107c56:	c3                   	ret    

f0107c57 <kfree>:
void kfree(void* virtual_address)
{
f0107c57:	55                   	push   %ebp
f0107c58:	89 e5                	mov    %esp,%ebp
f0107c5a:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107c5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c60:	83 ec 08             	sub    $0x8,%esp
f0107c63:	50                   	push   %eax
f0107c64:	68 c8 ac 89 f0       	push   $0xf089acc8
f0107c69:	e8 86 a6 02 00       	call   f01322f4 <find_block>
f0107c6e:	83 c4 10             	add    $0x10,%esp
f0107c71:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f0107c74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c78:	0f 84 fd 00 00 00    	je     f0107d7b <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107c7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107c82:	75 14                	jne    f0107c98 <kfree+0x41>
f0107c84:	83 ec 04             	sub    $0x4,%esp
f0107c87:	68 63 66 13 f0       	push   $0xf0136663
f0107c8c:	6a 5a                	push   $0x5a
f0107c8e:	68 81 66 13 f0       	push   $0xf0136681
f0107c93:	e8 6d 85 ff ff       	call   f0100205 <_panic>
f0107c98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c9b:	8b 00                	mov    (%eax),%eax
f0107c9d:	85 c0                	test   %eax,%eax
f0107c9f:	74 10                	je     f0107cb1 <kfree+0x5a>
f0107ca1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ca4:	8b 00                	mov    (%eax),%eax
f0107ca6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ca9:	8b 52 04             	mov    0x4(%edx),%edx
f0107cac:	89 50 04             	mov    %edx,0x4(%eax)
f0107caf:	eb 0b                	jmp    f0107cbc <kfree+0x65>
f0107cb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cb4:	8b 40 04             	mov    0x4(%eax),%eax
f0107cb7:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f0107cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbf:	8b 40 04             	mov    0x4(%eax),%eax
f0107cc2:	85 c0                	test   %eax,%eax
f0107cc4:	74 0f                	je     f0107cd5 <kfree+0x7e>
f0107cc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cc9:	8b 40 04             	mov    0x4(%eax),%eax
f0107ccc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ccf:	8b 12                	mov    (%edx),%edx
f0107cd1:	89 10                	mov    %edx,(%eax)
f0107cd3:	eb 0a                	jmp    f0107cdf <kfree+0x88>
f0107cd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cd8:	8b 00                	mov    (%eax),%eax
f0107cda:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f0107cdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ce2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ceb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107cf2:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0107cf7:	48                   	dec    %eax
f0107cf8:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d00:	8b 40 08             	mov    0x8(%eax),%eax
f0107d03:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107d0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107d11:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d1b:	8b 50 08             	mov    0x8(%eax),%edx
f0107d1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d21:	8b 40 0c             	mov    0xc(%eax),%eax
f0107d24:	01 c2                	add    %eax,%edx
f0107d26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d29:	01 d0                	add    %edx,%eax
f0107d2b:	48                   	dec    %eax
f0107d2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107d2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107d32:	ba 00 00 00 00       	mov    $0x0,%edx
f0107d37:	f7 75 e4             	divl   -0x1c(%ebp)
f0107d3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107d3d:	29 d0                	sub    %edx,%eax
f0107d3f:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107d42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107d48:	eb 1b                	jmp    f0107d65 <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107d4a:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107d4f:	83 ec 08             	sub    $0x8,%esp
f0107d52:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d55:	50                   	push   %eax
f0107d56:	e8 1b f1 ff ff       	call   f0106e76 <unmap_frame>
f0107d5b:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107d5e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d68:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107d6b:	72 dd                	jb     f0107d4a <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107d6d:	83 ec 0c             	sub    $0xc,%esp
f0107d70:	ff 75 f0             	pushl  -0x10(%ebp)
f0107d73:	e8 0c b2 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0107d78:	83 c4 10             	add    $0x10,%esp
	}
}
f0107d7b:	90                   	nop
f0107d7c:	c9                   	leave  
f0107d7d:	c3                   	ret    

f0107d7e <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
f0107d81:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107d84:	83 ec 0c             	sub    $0xc,%esp
f0107d87:	ff 75 08             	pushl  0x8(%ebp)
f0107d8a:	e8 fb fb ff ff       	call   f010798a <to_frame_info>
f0107d8f:	83 c4 10             	add    $0x10,%esp
f0107d92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107d95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d99:	74 08                	je     f0107da3 <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d9e:	8b 40 0c             	mov    0xc(%eax),%eax
f0107da1:	eb 05                	jmp    f0107da8 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107da3:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107da8:	c9                   	leave  
f0107da9:	c3                   	ret    

f0107daa <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107daa:	55                   	push   %ebp
f0107dab:	89 e5                	mov    %esp,%ebp
f0107dad:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107db0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107db7:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0107dbc:	83 ec 04             	sub    $0x4,%esp
f0107dbf:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107dc2:	52                   	push   %edx
f0107dc3:	ff 75 08             	pushl  0x8(%ebp)
f0107dc6:	50                   	push   %eax
f0107dc7:	e8 3a f0 ff ff       	call   f0106e06 <get_frame_info>
f0107dcc:	83 c4 10             	add    $0x10,%esp
f0107dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107dd2:	83 ec 0c             	sub    $0xc,%esp
f0107dd5:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dd8:	e8 9a fb ff ff       	call   f0107977 <to_physical_address>
f0107ddd:	83 c4 10             	add    $0x10,%esp
f0107de0:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107de3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107de7:	74 05                	je     f0107dee <kheap_physical_address+0x44>
		return address_physical;
f0107de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dec:	eb 05                	jmp    f0107df3 <kheap_physical_address+0x49>
	return 0;
f0107dee:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107df3:	c9                   	leave  
f0107df4:	c3                   	ret    

f0107df5 <kfreeall>:


void kfreeall()
{
f0107df5:	55                   	push   %ebp
f0107df6:	89 e5                	mov    %esp,%ebp
f0107df8:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107dfb:	83 ec 04             	sub    $0x4,%esp
f0107dfe:	68 b7 66 13 f0       	push   $0xf01366b7
f0107e03:	68 89 00 00 00       	push   $0x89
f0107e08:	68 81 66 13 f0       	push   $0xf0136681
f0107e0d:	e8 f3 83 ff ff       	call   f0100205 <_panic>

f0107e12 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107e12:	55                   	push   %ebp
f0107e13:	89 e5                	mov    %esp,%ebp
f0107e15:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e18:	83 ec 04             	sub    $0x4,%esp
f0107e1b:	68 b7 66 13 f0       	push   $0xf01366b7
f0107e20:	68 8f 00 00 00       	push   $0x8f
f0107e25:	68 81 66 13 f0       	push   $0xf0136681
f0107e2a:	e8 d6 83 ff ff       	call   f0100205 <_panic>

f0107e2f <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107e2f:	55                   	push   %ebp
f0107e30:	89 e5                	mov    %esp,%ebp
f0107e32:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e35:	83 ec 04             	sub    $0x4,%esp
f0107e38:	68 b7 66 13 f0       	push   $0xf01366b7
f0107e3d:	68 94 00 00 00       	push   $0x94
f0107e42:	68 81 66 13 f0       	push   $0xf0136681
f0107e47:	e8 b9 83 ff ff       	call   f0100205 <_panic>

f0107e4c <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107e4c:	55                   	push   %ebp
f0107e4d:	89 e5                	mov    %esp,%ebp
f0107e4f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107e52:	83 ec 04             	sub    $0x4,%esp
f0107e55:	68 c8 66 13 f0       	push   $0xf01366c8
f0107e5a:	68 ab 00 00 00       	push   $0xab
f0107e5f:	68 81 66 13 f0       	push   $0xf0136681
f0107e64:	e8 9c 83 ff ff       	call   f0100205 <_panic>

f0107e69 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107e69:	55                   	push   %ebp
f0107e6a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e6f:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f0107e75:	29 d0                	sub    %edx,%eax
f0107e77:	c1 f8 03             	sar    $0x3,%eax
f0107e7a:	89 c2                	mov    %eax,%edx
f0107e7c:	89 d0                	mov    %edx,%eax
f0107e7e:	c1 e0 02             	shl    $0x2,%eax
f0107e81:	01 d0                	add    %edx,%eax
f0107e83:	c1 e0 02             	shl    $0x2,%eax
f0107e86:	01 d0                	add    %edx,%eax
f0107e88:	c1 e0 02             	shl    $0x2,%eax
f0107e8b:	01 d0                	add    %edx,%eax
f0107e8d:	89 c1                	mov    %eax,%ecx
f0107e8f:	c1 e1 08             	shl    $0x8,%ecx
f0107e92:	01 c8                	add    %ecx,%eax
f0107e94:	89 c1                	mov    %eax,%ecx
f0107e96:	c1 e1 10             	shl    $0x10,%ecx
f0107e99:	01 c8                	add    %ecx,%eax
f0107e9b:	01 c0                	add    %eax,%eax
f0107e9d:	01 d0                	add    %edx,%eax
}
f0107e9f:	5d                   	pop    %ebp
f0107ea0:	c3                   	ret    

f0107ea1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107ea1:	55                   	push   %ebp
f0107ea2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107ea4:	ff 75 08             	pushl  0x8(%ebp)
f0107ea7:	e8 bd ff ff ff       	call   f0107e69 <to_frame_number>
f0107eac:	83 c4 04             	add    $0x4,%esp
f0107eaf:	c1 e0 0c             	shl    $0xc,%eax
}
f0107eb2:	c9                   	leave  
f0107eb3:	c3                   	ret    

f0107eb4 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107eb4:	55                   	push   %ebp
f0107eb5:	89 e5                	mov    %esp,%ebp
f0107eb7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107eba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ec1:	83 ec 04             	sub    $0x4,%esp
f0107ec4:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ec7:	50                   	push   %eax
f0107ec8:	ff 75 0c             	pushl  0xc(%ebp)
f0107ecb:	ff 75 08             	pushl  0x8(%ebp)
f0107ece:	e8 de eb ff ff       	call   f0106ab1 <get_page_table>
f0107ed3:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ed9:	85 c0                	test   %eax,%eax
f0107edb:	74 75                	je     f0107f52 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ee0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ee3:	c1 ea 0c             	shr    $0xc,%edx
f0107ee6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107eec:	c1 e2 02             	shl    $0x2,%edx
f0107eef:	01 d0                	add    %edx,%eax
f0107ef1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ef4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107ef7:	c1 e9 0c             	shr    $0xc,%ecx
f0107efa:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f00:	c1 e1 02             	shl    $0x2,%ecx
f0107f03:	01 ca                	add    %ecx,%edx
f0107f05:	8b 12                	mov    (%edx),%edx
f0107f07:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107f0a:	f7 d1                	not    %ecx
f0107f0c:	21 ca                	and    %ecx,%edx
f0107f0e:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f13:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f16:	c1 ea 0c             	shr    $0xc,%edx
f0107f19:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107f1f:	c1 e2 02             	shl    $0x2,%edx
f0107f22:	01 c2                	add    %eax,%edx
f0107f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f27:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107f2a:	c1 e9 0c             	shr    $0xc,%ecx
f0107f2d:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f33:	c1 e1 02             	shl    $0x2,%ecx
f0107f36:	01 c8                	add    %ecx,%eax
f0107f38:	8b 00                	mov    (%eax),%eax
f0107f3a:	0b 45 10             	or     0x10(%ebp),%eax
f0107f3d:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f42:	83 ec 08             	sub    $0x8,%esp
f0107f45:	50                   	push   %eax
f0107f46:	6a 00                	push   $0x0
f0107f48:	e8 c1 e5 ff ff       	call   f010650e <tlb_invalidate>
f0107f4d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107f50:	eb 14                	jmp    f0107f66 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107f52:	83 ec 04             	sub    $0x4,%esp
f0107f55:	68 ef 66 13 f0       	push   $0xf01366ef
f0107f5a:	6a 19                	push   $0x19
f0107f5c:	68 0c 67 13 f0       	push   $0xf013670c
f0107f61:	e8 9f 82 ff ff       	call   f0100205 <_panic>
	}
}
f0107f66:	c9                   	leave  
f0107f67:	c3                   	ret    

f0107f68 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107f68:	55                   	push   %ebp
f0107f69:	89 e5                	mov    %esp,%ebp
f0107f6b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107f6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107f75:	83 ec 04             	sub    $0x4,%esp
f0107f78:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107f7b:	50                   	push   %eax
f0107f7c:	ff 75 0c             	pushl  0xc(%ebp)
f0107f7f:	ff 75 08             	pushl  0x8(%ebp)
f0107f82:	e8 2a eb ff ff       	call   f0106ab1 <get_page_table>
f0107f87:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107f8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f8d:	85 c0                	test   %eax,%eax
f0107f8f:	74 2b                	je     f0107fbc <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107f91:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f94:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f97:	c1 ea 0c             	shr    $0xc,%edx
f0107f9a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107fa0:	c1 e2 02             	shl    $0x2,%edx
f0107fa3:	01 d0                	add    %edx,%eax
f0107fa5:	8b 00                	mov    (%eax),%eax
f0107fa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107faa:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fb4:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107fba:	eb 05                	jmp    f0107fc1 <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107fbc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107fc1:	c9                   	leave  
f0107fc2:	c3                   	ret    

f0107fc3 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107fc3:	55                   	push   %ebp
f0107fc4:	89 e5                	mov    %esp,%ebp
f0107fc6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107fc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107fd0:	83 ec 04             	sub    $0x4,%esp
f0107fd3:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107fd6:	50                   	push   %eax
f0107fd7:	ff 75 0c             	pushl  0xc(%ebp)
f0107fda:	ff 75 08             	pushl  0x8(%ebp)
f0107fdd:	e8 cf ea ff ff       	call   f0106ab1 <get_page_table>
f0107fe2:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fe8:	85 c0                	test   %eax,%eax
f0107fea:	74 2d                	je     f0108019 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fef:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ff2:	c1 ea 0c             	shr    $0xc,%edx
f0107ff5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ffb:	c1 e2 02             	shl    $0x2,%edx
f0107ffe:	01 d0                	add    %edx,%eax
f0108000:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108006:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108009:	83 ec 08             	sub    $0x8,%esp
f010800c:	50                   	push   %eax
f010800d:	6a 00                	push   $0x0
f010800f:	e8 fa e4 ff ff       	call   f010650e <tlb_invalidate>
f0108014:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0108017:	eb 14                	jmp    f010802d <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0108019:	83 ec 04             	sub    $0x4,%esp
f010801c:	68 ef 66 13 f0       	push   $0xf01366ef
f0108021:	6a 42                	push   $0x42
f0108023:	68 0c 67 13 f0       	push   $0xf013670c
f0108028:	e8 d8 81 ff ff       	call   f0100205 <_panic>
	}
}
f010802d:	c9                   	leave  
f010802e:	c3                   	ret    

f010802f <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f010802f:	55                   	push   %ebp
f0108030:	89 e5                	mov    %esp,%ebp
f0108032:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0108035:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010803c:	83 ec 04             	sub    $0x4,%esp
f010803f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108042:	50                   	push   %eax
f0108043:	ff 75 0c             	pushl  0xc(%ebp)
f0108046:	ff 75 08             	pushl  0x8(%ebp)
f0108049:	e8 63 ea ff ff       	call   f0106ab1 <get_page_table>
f010804e:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0108051:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108054:	85 c0                	test   %eax,%eax
f0108056:	74 28                	je     f0108080 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0108058:	83 ec 04             	sub    $0x4,%esp
f010805b:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010805e:	50                   	push   %eax
f010805f:	ff 75 0c             	pushl  0xc(%ebp)
f0108062:	ff 75 08             	pushl  0x8(%ebp)
f0108065:	e8 9c ed ff ff       	call   f0106e06 <get_frame_info>
f010806a:	83 c4 10             	add    $0x10,%esp
f010806d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0108070:	83 ec 0c             	sub    $0xc,%esp
f0108073:	ff 75 f4             	pushl  -0xc(%ebp)
f0108076:	e8 26 fe ff ff       	call   f0107ea1 <to_physical_address>
f010807b:	83 c4 10             	add    $0x10,%esp
f010807e:	eb 05                	jmp    f0108085 <virtual_to_physical+0x56>
	}
	return -1;
f0108080:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0108085:	c9                   	leave  
f0108086:	c3                   	ret    

f0108087 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108087:	55                   	push   %ebp
f0108088:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f010808a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010808d:	c1 e8 16             	shr    $0x16,%eax
f0108090:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108097:	8b 45 08             	mov    0x8(%ebp),%eax
f010809a:	01 d0                	add    %edx,%eax
f010809c:	8b 00                	mov    (%eax),%eax
f010809e:	83 e0 20             	and    $0x20,%eax
f01080a1:	85 c0                	test   %eax,%eax
f01080a3:	0f 95 c0             	setne  %al
f01080a6:	0f b6 c0             	movzbl %al,%eax
}
f01080a9:	5d                   	pop    %ebp
f01080aa:	c3                   	ret    

f01080ab <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01080ab:	55                   	push   %ebp
f01080ac:	89 e5                	mov    %esp,%ebp
f01080ae:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01080b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080b4:	c1 e8 16             	shr    $0x16,%eax
f01080b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	01 d0                	add    %edx,%eax
f01080c3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080c6:	c1 ea 16             	shr    $0x16,%edx
f01080c9:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01080d0:	8b 55 08             	mov    0x8(%ebp),%edx
f01080d3:	01 ca                	add    %ecx,%edx
f01080d5:	8b 12                	mov    (%edx),%edx
f01080d7:	83 e2 df             	and    $0xffffffdf,%edx
f01080da:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080df:	83 ec 08             	sub    $0x8,%esp
f01080e2:	50                   	push   %eax
f01080e3:	6a 00                	push   $0x0
f01080e5:	e8 24 e4 ff ff       	call   f010650e <tlb_invalidate>
f01080ea:	83 c4 10             	add    $0x10,%esp
}
f01080ed:	90                   	nop
f01080ee:	c9                   	leave  
f01080ef:	c3                   	ret    

f01080f0 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01080f0:	55                   	push   %ebp
f01080f1:	89 e5                	mov    %esp,%ebp
f01080f3:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01080f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080f9:	c1 e8 16             	shr    $0x16,%eax
f01080fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108103:	8b 45 08             	mov    0x8(%ebp),%eax
f0108106:	01 d0                	add    %edx,%eax
f0108108:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010810e:	0f 20 d8             	mov    %cr3,%eax
f0108111:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108114:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108117:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010811a:	90                   	nop
f010811b:	c9                   	leave  
f010811c:	c3                   	ret    

f010811d <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010811d:	55                   	push   %ebp
f010811e:	89 e5                	mov    %esp,%ebp
f0108120:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108123:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010812a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108131:	eb 21                	jmp    f0108154 <env_page_ws_get_size+0x37>
f0108133:	8b 45 08             	mov    0x8(%ebp),%eax
f0108136:	8b 48 78             	mov    0x78(%eax),%ecx
f0108139:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010813c:	89 d0                	mov    %edx,%eax
f010813e:	01 c0                	add    %eax,%eax
f0108140:	01 d0                	add    %edx,%eax
f0108142:	c1 e0 03             	shl    $0x3,%eax
f0108145:	01 c8                	add    %ecx,%eax
f0108147:	8a 40 04             	mov    0x4(%eax),%al
f010814a:	84 c0                	test   %al,%al
f010814c:	75 03                	jne    f0108151 <env_page_ws_get_size+0x34>
f010814e:	ff 45 f8             	incl   -0x8(%ebp)
f0108151:	ff 45 fc             	incl   -0x4(%ebp)
f0108154:	8b 45 08             	mov    0x8(%ebp),%eax
f0108157:	8b 50 74             	mov    0x74(%eax),%edx
f010815a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010815d:	39 c2                	cmp    %eax,%edx
f010815f:	77 d2                	ja     f0108133 <env_page_ws_get_size+0x16>
	return counter;
f0108161:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108164:	c9                   	leave  
f0108165:	c3                   	ret    

f0108166 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108166:	55                   	push   %ebp
f0108167:	89 e5                	mov    %esp,%ebp
f0108169:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010816c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108173:	eb 4c                	jmp    f01081c1 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108175:	8b 45 08             	mov    0x8(%ebp),%eax
f0108178:	8b 48 78             	mov    0x78(%eax),%ecx
f010817b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010817e:	89 d0                	mov    %edx,%eax
f0108180:	01 c0                	add    %eax,%eax
f0108182:	01 d0                	add    %edx,%eax
f0108184:	c1 e0 03             	shl    $0x3,%eax
f0108187:	01 c8                	add    %ecx,%eax
f0108189:	8b 00                	mov    (%eax),%eax
f010818b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010818e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108191:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108196:	89 c2                	mov    %eax,%edx
f0108198:	8b 45 0c             	mov    0xc(%ebp),%eax
f010819b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010819e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01081a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01081a6:	39 c2                	cmp    %eax,%edx
f01081a8:	75 14                	jne    f01081be <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01081aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ad:	83 ec 08             	sub    $0x8,%esp
f01081b0:	50                   	push   %eax
f01081b1:	ff 75 08             	pushl  0x8(%ebp)
f01081b4:	e8 b9 00 00 00       	call   f0108272 <env_page_ws_clear_entry>
f01081b9:	83 c4 10             	add    $0x10,%esp
			break;
f01081bc:	eb 10                	jmp    f01081ce <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01081be:	ff 45 f4             	incl   -0xc(%ebp)
f01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c4:	8b 50 74             	mov    0x74(%eax),%edx
f01081c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081ca:	39 c2                	cmp    %eax,%edx
f01081cc:	77 a7                	ja     f0108175 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01081ce:	90                   	nop
f01081cf:	c9                   	leave  
f01081d0:	c3                   	ret    

f01081d1 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01081d1:	55                   	push   %ebp
f01081d2:	89 e5                	mov    %esp,%ebp
f01081d4:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01081d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01081da:	8b 40 74             	mov    0x74(%eax),%eax
f01081dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081e0:	77 16                	ja     f01081f8 <env_page_ws_set_entry+0x27>
f01081e2:	68 28 67 13 f0       	push   $0xf0136728
f01081e7:	68 5e 67 13 f0       	push   $0xf013675e
f01081ec:	6a 26                	push   $0x26
f01081ee:	68 74 67 13 f0       	push   $0xf0136774
f01081f3:	e8 0d 80 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01081f8:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01081ff:	76 16                	jbe    f0108217 <env_page_ws_set_entry+0x46>
f0108201:	68 94 67 13 f0       	push   $0xf0136794
f0108206:	68 5e 67 13 f0       	push   $0xf013675e
f010820b:	6a 27                	push   $0x27
f010820d:	68 74 67 13 f0       	push   $0xf0136774
f0108212:	e8 ee 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108217:	8b 45 08             	mov    0x8(%ebp),%eax
f010821a:	8b 48 78             	mov    0x78(%eax),%ecx
f010821d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108220:	89 d0                	mov    %edx,%eax
f0108222:	01 c0                	add    %eax,%eax
f0108224:	01 d0                	add    %edx,%eax
f0108226:	c1 e0 03             	shl    $0x3,%eax
f0108229:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010822c:	8b 45 10             	mov    0x10(%ebp),%eax
f010822f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108232:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108235:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010823a:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f010823c:	8b 45 08             	mov    0x8(%ebp),%eax
f010823f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108242:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108245:	89 d0                	mov    %edx,%eax
f0108247:	01 c0                	add    %eax,%eax
f0108249:	01 d0                	add    %edx,%eax
f010824b:	c1 e0 03             	shl    $0x3,%eax
f010824e:	01 c8                	add    %ecx,%eax
f0108250:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108254:	8b 45 08             	mov    0x8(%ebp),%eax
f0108257:	8b 48 78             	mov    0x78(%eax),%ecx
f010825a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010825d:	89 d0                	mov    %edx,%eax
f010825f:	01 c0                	add    %eax,%eax
f0108261:	01 d0                	add    %edx,%eax
f0108263:	c1 e0 03             	shl    $0x3,%eax
f0108266:	01 c8                	add    %ecx,%eax
f0108268:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010826f:	90                   	nop
}
f0108270:	c9                   	leave  
f0108271:	c3                   	ret    

f0108272 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108272:	55                   	push   %ebp
f0108273:	89 e5                	mov    %esp,%ebp
f0108275:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108278:	8b 45 08             	mov    0x8(%ebp),%eax
f010827b:	8b 40 74             	mov    0x74(%eax),%eax
f010827e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108281:	77 16                	ja     f0108299 <env_page_ws_clear_entry+0x27>
f0108283:	68 c8 67 13 f0       	push   $0xf01367c8
f0108288:	68 5e 67 13 f0       	push   $0xf013675e
f010828d:	6a 32                	push   $0x32
f010828f:	68 74 67 13 f0       	push   $0xf0136774
f0108294:	e8 6c 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108299:	8b 45 08             	mov    0x8(%ebp),%eax
f010829c:	8b 48 78             	mov    0x78(%eax),%ecx
f010829f:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082a2:	89 d0                	mov    %edx,%eax
f01082a4:	01 c0                	add    %eax,%eax
f01082a6:	01 d0                	add    %edx,%eax
f01082a8:	c1 e0 03             	shl    $0x3,%eax
f01082ab:	01 c8                	add    %ecx,%eax
f01082ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 48 78             	mov    0x78(%eax),%ecx
f01082b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082bc:	89 d0                	mov    %edx,%eax
f01082be:	01 c0                	add    %eax,%eax
f01082c0:	01 d0                	add    %edx,%eax
f01082c2:	c1 e0 03             	shl    $0x3,%eax
f01082c5:	01 c8                	add    %ecx,%eax
f01082c7:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01082cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ce:	8b 48 78             	mov    0x78(%eax),%ecx
f01082d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082d4:	89 d0                	mov    %edx,%eax
f01082d6:	01 c0                	add    %eax,%eax
f01082d8:	01 d0                	add    %edx,%eax
f01082da:	c1 e0 03             	shl    $0x3,%eax
f01082dd:	01 c8                	add    %ecx,%eax
f01082df:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01082e6:	90                   	nop
f01082e7:	c9                   	leave  
f01082e8:	c3                   	ret    

f01082e9 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01082e9:	55                   	push   %ebp
f01082ea:	89 e5                	mov    %esp,%ebp
f01082ec:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01082ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f2:	8b 40 74             	mov    0x74(%eax),%eax
f01082f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01082f8:	77 16                	ja     f0108310 <env_page_ws_get_virtual_address+0x27>
f01082fa:	68 c8 67 13 f0       	push   $0xf01367c8
f01082ff:	68 5e 67 13 f0       	push   $0xf013675e
f0108304:	6a 3a                	push   $0x3a
f0108306:	68 74 67 13 f0       	push   $0xf0136774
f010830b:	e8 f5 7e ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108310:	8b 45 08             	mov    0x8(%ebp),%eax
f0108313:	8b 48 78             	mov    0x78(%eax),%ecx
f0108316:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108319:	89 d0                	mov    %edx,%eax
f010831b:	01 c0                	add    %eax,%eax
f010831d:	01 d0                	add    %edx,%eax
f010831f:	c1 e0 03             	shl    $0x3,%eax
f0108322:	01 c8                	add    %ecx,%eax
f0108324:	8b 00                	mov    (%eax),%eax
f0108326:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108329:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010832c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108331:	c9                   	leave  
f0108332:	c3                   	ret    

f0108333 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108333:	55                   	push   %ebp
f0108334:	89 e5                	mov    %esp,%ebp
f0108336:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108339:	8b 45 08             	mov    0x8(%ebp),%eax
f010833c:	8b 40 74             	mov    0x74(%eax),%eax
f010833f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108342:	77 16                	ja     f010835a <env_page_ws_get_time_stamp+0x27>
f0108344:	68 c8 67 13 f0       	push   $0xf01367c8
f0108349:	68 5e 67 13 f0       	push   $0xf013675e
f010834e:	6a 40                	push   $0x40
f0108350:	68 74 67 13 f0       	push   $0xf0136774
f0108355:	e8 ab 7e ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f010835a:	8b 45 08             	mov    0x8(%ebp),%eax
f010835d:	8b 48 78             	mov    0x78(%eax),%ecx
f0108360:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108363:	89 d0                	mov    %edx,%eax
f0108365:	01 c0                	add    %eax,%eax
f0108367:	01 d0                	add    %edx,%eax
f0108369:	c1 e0 03             	shl    $0x3,%eax
f010836c:	01 c8                	add    %ecx,%eax
f010836e:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108371:	c9                   	leave  
f0108372:	c3                   	ret    

f0108373 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108373:	55                   	push   %ebp
f0108374:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108376:	8b 45 08             	mov    0x8(%ebp),%eax
f0108379:	8b 48 78             	mov    0x78(%eax),%ecx
f010837c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010837f:	89 d0                	mov    %edx,%eax
f0108381:	01 c0                	add    %eax,%eax
f0108383:	01 d0                	add    %edx,%eax
f0108385:	c1 e0 03             	shl    $0x3,%eax
f0108388:	01 c8                	add    %ecx,%eax
f010838a:	8a 40 04             	mov    0x4(%eax),%al
f010838d:	0f b6 c0             	movzbl %al,%eax
}
f0108390:	5d                   	pop    %ebp
f0108391:	c3                   	ret    

f0108392 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108392:	55                   	push   %ebp
f0108393:	89 e5                	mov    %esp,%ebp
f0108395:	53                   	push   %ebx
f0108396:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108399:	83 ec 0c             	sub    $0xc,%esp
f010839c:	6a 02                	push   $0x2
f010839e:	e8 b4 5d 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f01083a3:	83 c4 10             	add    $0x10,%esp
f01083a6:	85 c0                	test   %eax,%eax
f01083a8:	0f 84 fe 00 00 00    	je     f01084ac <env_page_ws_print+0x11a>
	{
		int i = 0;
f01083ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01083b5:	83 ec 0c             	sub    $0xc,%esp
f01083b8:	68 00 68 13 f0       	push   $0xf0136800
f01083bd:	e8 4c 89 ff ff       	call   f0100d0e <cprintf>
f01083c2:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01083c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c8:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01083ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01083d1:	eb 2c                	jmp    f01083ff <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01083d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01083d6:	8b 10                	mov    (%eax),%edx
f01083d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083db:	8d 48 01             	lea    0x1(%eax),%ecx
f01083de:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01083e1:	83 ec 04             	sub    $0x4,%esp
f01083e4:	52                   	push   %edx
f01083e5:	50                   	push   %eax
f01083e6:	68 1a 68 13 f0       	push   $0xf013681a
f01083eb:	e8 1e 89 ff ff       	call   f0100d0e <cprintf>
f01083f0:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01083f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f6:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01083fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01083ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108403:	74 08                	je     f010840d <env_page_ws_print+0x7b>
f0108405:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108408:	8b 40 10             	mov    0x10(%eax),%eax
f010840b:	eb 05                	jmp    f0108412 <env_page_ws_print+0x80>
f010840d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108412:	8b 55 08             	mov    0x8(%ebp),%edx
f0108415:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010841b:	8b 45 08             	mov    0x8(%ebp),%eax
f010841e:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108424:	85 c0                	test   %eax,%eax
f0108426:	75 ab                	jne    f01083d3 <env_page_ws_print+0x41>
f0108428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010842c:	75 a5                	jne    f01083d3 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f010842e:	83 ec 0c             	sub    $0xc,%esp
f0108431:	68 22 68 13 f0       	push   $0xf0136822
f0108436:	e8 d3 88 ff ff       	call   f0100d0e <cprintf>
f010843b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010843e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108441:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108447:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010844a:	eb 2c                	jmp    f0108478 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010844c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010844f:	8b 10                	mov    (%eax),%edx
f0108451:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108454:	8d 48 01             	lea    0x1(%eax),%ecx
f0108457:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010845a:	83 ec 04             	sub    $0x4,%esp
f010845d:	52                   	push   %edx
f010845e:	50                   	push   %eax
f010845f:	68 1a 68 13 f0       	push   $0xf013681a
f0108464:	e8 a5 88 ff ff       	call   f0100d0e <cprintf>
f0108469:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010846c:	8b 45 08             	mov    0x8(%ebp),%eax
f010846f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108475:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108478:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010847c:	74 08                	je     f0108486 <env_page_ws_print+0xf4>
f010847e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108481:	8b 40 10             	mov    0x10(%eax),%eax
f0108484:	eb 05                	jmp    f010848b <env_page_ws_print+0xf9>
f0108486:	b8 00 00 00 00       	mov    $0x0,%eax
f010848b:	8b 55 08             	mov    0x8(%ebp),%edx
f010848e:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f0108494:	8b 45 08             	mov    0x8(%ebp),%eax
f0108497:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010849d:	85 c0                	test   %eax,%eax
f010849f:	75 ab                	jne    f010844c <env_page_ws_print+0xba>
f01084a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01084a5:	75 a5                	jne    f010844c <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01084a7:	e9 95 01 00 00       	jmp    f0108641 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01084ac:	83 ec 0c             	sub    $0xc,%esp
f01084af:	68 3d 68 13 f0       	push   $0xf013683d
f01084b4:	e8 55 88 ff ff       	call   f0100d0e <cprintf>
f01084b9:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01084bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01084c3:	e9 6a 01 00 00       	jmp    f0108632 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01084c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01084cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01084ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084d1:	89 d0                	mov    %edx,%eax
f01084d3:	01 c0                	add    %eax,%eax
f01084d5:	01 d0                	add    %edx,%eax
f01084d7:	c1 e0 03             	shl    $0x3,%eax
f01084da:	01 c8                	add    %ecx,%eax
f01084dc:	8a 40 04             	mov    0x4(%eax),%al
f01084df:	84 c0                	test   %al,%al
f01084e1:	74 43                	je     f0108526 <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01084e3:	83 ec 0c             	sub    $0xc,%esp
f01084e6:	68 47 68 13 f0       	push   $0xf0136847
f01084eb:	e8 1e 88 ff ff       	call   f0100d0e <cprintf>
f01084f0:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01084f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01084f6:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01084fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084ff:	75 10                	jne    f0108511 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108501:	83 ec 0c             	sub    $0xc,%esp
f0108504:	68 56 68 13 f0       	push   $0xf0136856
f0108509:	e8 00 88 ff ff       	call   f0100d0e <cprintf>
f010850e:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108511:	83 ec 0c             	sub    $0xc,%esp
f0108514:	68 5c 68 13 f0       	push   $0xf013685c
f0108519:	e8 f0 87 ff ff       	call   f0100d0e <cprintf>
f010851e:	83 c4 10             	add    $0x10,%esp
				continue;
f0108521:	e9 09 01 00 00       	jmp    f010862f <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108526:	8b 45 08             	mov    0x8(%ebp),%eax
f0108529:	8b 48 78             	mov    0x78(%eax),%ecx
f010852c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010852f:	89 d0                	mov    %edx,%eax
f0108531:	01 c0                	add    %eax,%eax
f0108533:	01 d0                	add    %edx,%eax
f0108535:	c1 e0 03             	shl    $0x3,%eax
f0108538:	01 c8                	add    %ecx,%eax
f010853a:	8b 00                	mov    (%eax),%eax
f010853c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f010853f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108542:	8b 48 78             	mov    0x78(%eax),%ecx
f0108545:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108548:	89 d0                	mov    %edx,%eax
f010854a:	01 c0                	add    %eax,%eax
f010854c:	01 d0                	add    %edx,%eax
f010854e:	c1 e0 03             	shl    $0x3,%eax
f0108551:	01 c8                	add    %ecx,%eax
f0108553:	8b 40 08             	mov    0x8(%eax),%eax
f0108556:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108559:	8b 45 08             	mov    0x8(%ebp),%eax
f010855c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010855f:	83 ec 08             	sub    $0x8,%esp
f0108562:	ff 75 e8             	pushl  -0x18(%ebp)
f0108565:	50                   	push   %eax
f0108566:	e8 fd f9 ff ff       	call   f0107f68 <pt_get_page_permissions>
f010856b:	83 c4 10             	add    $0x10,%esp
f010856e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108571:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108574:	83 e0 40             	and    $0x40,%eax
f0108577:	85 c0                	test   %eax,%eax
f0108579:	0f 95 c0             	setne  %al
f010857c:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010857f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108582:	83 e0 20             	and    $0x20,%eax
f0108585:	85 c0                	test   %eax,%eax
f0108587:	0f 95 c0             	setne  %al
f010858a:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010858d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108590:	25 00 02 00 00       	and    $0x200,%eax
f0108595:	85 c0                	test   %eax,%eax
f0108597:	0f 95 c0             	setne  %al
f010859a:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010859d:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a0:	8b 48 78             	mov    0x78(%eax),%ecx
f01085a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085a6:	89 d0                	mov    %edx,%eax
f01085a8:	01 c0                	add    %eax,%eax
f01085aa:	01 d0                	add    %edx,%eax
f01085ac:	c1 e0 03             	shl    $0x3,%eax
f01085af:	01 c8                	add    %ecx,%eax
f01085b1:	8b 00                	mov    (%eax),%eax
f01085b3:	83 ec 04             	sub    $0x4,%esp
f01085b6:	50                   	push   %eax
f01085b7:	ff 75 ec             	pushl  -0x14(%ebp)
f01085ba:	68 5e 68 13 f0       	push   $0xf013685e
f01085bf:	e8 4a 87 ff ff       	call   f0100d0e <cprintf>
f01085c4:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01085c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01085ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01085cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085d0:	89 d0                	mov    %edx,%eax
f01085d2:	01 c0                	add    %eax,%eax
f01085d4:	01 d0                	add    %edx,%eax
f01085d6:	c1 e0 03             	shl    $0x3,%eax
f01085d9:	01 c8                	add    %ecx,%eax
f01085db:	8b 58 0c             	mov    0xc(%eax),%ebx
f01085de:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01085e2:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01085e6:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01085ea:	83 ec 08             	sub    $0x8,%esp
f01085ed:	53                   	push   %ebx
f01085ee:	ff 75 e4             	pushl  -0x1c(%ebp)
f01085f1:	51                   	push   %ecx
f01085f2:	52                   	push   %edx
f01085f3:	50                   	push   %eax
f01085f4:	68 70 68 13 f0       	push   $0xf0136870
f01085f9:	e8 10 87 ff ff       	call   f0100d0e <cprintf>
f01085fe:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108601:	8b 45 08             	mov    0x8(%ebp),%eax
f0108604:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010860a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010860d:	75 10                	jne    f010861f <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f010860f:	83 ec 0c             	sub    $0xc,%esp
f0108612:	68 b7 68 13 f0       	push   $0xf01368b7
f0108617:	e8 f2 86 ff ff       	call   f0100d0e <cprintf>
f010861c:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010861f:	83 ec 0c             	sub    $0xc,%esp
f0108622:	68 5c 68 13 f0       	push   $0xf013685c
f0108627:	e8 e2 86 ff ff       	call   f0100d0e <cprintf>
f010862c:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f010862f:	ff 45 ec             	incl   -0x14(%ebp)
f0108632:	8b 45 08             	mov    0x8(%ebp),%eax
f0108635:	8b 40 74             	mov    0x74(%eax),%eax
f0108638:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010863b:	0f 87 87 fe ff ff    	ja     f01084c8 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108641:	90                   	nop
f0108642:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108645:	c9                   	leave  
f0108646:	c3                   	ret    

f0108647 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108647:	55                   	push   %ebp
f0108648:	89 e5                	mov    %esp,%ebp
f010864a:	53                   	push   %ebx
f010864b:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010864e:	83 ec 0c             	sub    $0xc,%esp
f0108651:	68 bc 68 13 f0       	push   $0xf01368bc
f0108656:	e8 b3 86 ff ff       	call   f0100d0e <cprintf>
f010865b:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010865e:	83 ec 0c             	sub    $0xc,%esp
f0108661:	68 f1 68 13 f0       	push   $0xf01368f1
f0108666:	e8 a3 86 ff ff       	call   f0100d0e <cprintf>
f010866b:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010866e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108675:	e9 10 01 00 00       	jmp    f010878a <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f010867a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010867d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108680:	89 d0                	mov    %edx,%eax
f0108682:	01 c0                	add    %eax,%eax
f0108684:	01 d0                	add    %edx,%eax
f0108686:	c1 e0 03             	shl    $0x3,%eax
f0108689:	01 c8                	add    %ecx,%eax
f010868b:	83 e8 80             	sub    $0xffffff80,%eax
f010868e:	8a 00                	mov    (%eax),%al
f0108690:	84 c0                	test   %al,%al
f0108692:	74 43                	je     f01086d7 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0108694:	83 ec 0c             	sub    $0xc,%esp
f0108697:	68 47 68 13 f0       	push   $0xf0136847
f010869c:	e8 6d 86 ff ff       	call   f0100d0e <cprintf>
f01086a1:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01086a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a7:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01086ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01086b0:	75 10                	jne    f01086c2 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01086b2:	83 ec 0c             	sub    $0xc,%esp
f01086b5:	68 56 68 13 f0       	push   $0xf0136856
f01086ba:	e8 4f 86 ff ff       	call   f0100d0e <cprintf>
f01086bf:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01086c2:	83 ec 0c             	sub    $0xc,%esp
f01086c5:	68 5c 68 13 f0       	push   $0xf013685c
f01086ca:	e8 3f 86 ff ff       	call   f0100d0e <cprintf>
f01086cf:	83 c4 10             	add    $0x10,%esp
			continue;
f01086d2:	e9 b0 00 00 00       	jmp    f0108787 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01086d7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086dd:	89 d0                	mov    %edx,%eax
f01086df:	01 c0                	add    %eax,%eax
f01086e1:	01 d0                	add    %edx,%eax
f01086e3:	c1 e0 03             	shl    $0x3,%eax
f01086e6:	01 c8                	add    %ecx,%eax
f01086e8:	83 c0 7c             	add    $0x7c,%eax
f01086eb:	8b 00                	mov    (%eax),%eax
f01086ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01086f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086f6:	89 d0                	mov    %edx,%eax
f01086f8:	01 c0                	add    %eax,%eax
f01086fa:	01 d0                	add    %edx,%eax
f01086fc:	c1 e0 03             	shl    $0x3,%eax
f01086ff:	01 c8                	add    %ecx,%eax
f0108701:	83 c0 7c             	add    $0x7c,%eax
f0108704:	8b 00                	mov    (%eax),%eax
f0108706:	83 ec 04             	sub    $0x4,%esp
f0108709:	50                   	push   %eax
f010870a:	ff 75 f4             	pushl  -0xc(%ebp)
f010870d:	68 fc 68 13 f0       	push   $0xf01368fc
f0108712:	e8 f7 85 ff ff       	call   f0100d0e <cprintf>
f0108717:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f010871a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010871d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108720:	89 d0                	mov    %edx,%eax
f0108722:	01 c0                	add    %eax,%eax
f0108724:	01 d0                	add    %edx,%eax
f0108726:	c1 e0 03             	shl    $0x3,%eax
f0108729:	01 c8                	add    %ecx,%eax
f010872b:	05 84 00 00 00       	add    $0x84,%eax
f0108730:	8b 18                	mov    (%eax),%ebx
f0108732:	8b 45 08             	mov    0x8(%ebp),%eax
f0108735:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108738:	83 ec 08             	sub    $0x8,%esp
f010873b:	ff 75 f0             	pushl  -0x10(%ebp)
f010873e:	50                   	push   %eax
f010873f:	e8 43 f9 ff ff       	call   f0108087 <pd_is_table_used>
f0108744:	83 c4 10             	add    $0x10,%esp
f0108747:	83 ec 04             	sub    $0x4,%esp
f010874a:	53                   	push   %ebx
f010874b:	50                   	push   %eax
f010874c:	68 14 69 13 f0       	push   $0xf0136914
f0108751:	e8 b8 85 ff ff       	call   f0100d0e <cprintf>
f0108756:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108759:	8b 45 08             	mov    0x8(%ebp),%eax
f010875c:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108762:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108765:	75 10                	jne    f0108777 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108767:	83 ec 0c             	sub    $0xc,%esp
f010876a:	68 b7 68 13 f0       	push   $0xf01368b7
f010876f:	e8 9a 85 ff ff       	call   f0100d0e <cprintf>
f0108774:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108777:	83 ec 0c             	sub    $0xc,%esp
f010877a:	68 5c 68 13 f0       	push   $0xf013685c
f010877f:	e8 8a 85 ff ff       	call   f0100d0e <cprintf>
f0108784:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108787:	ff 45 f4             	incl   -0xc(%ebp)
f010878a:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010878e:	0f 86 e6 fe ff ff    	jbe    f010867a <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108794:	90                   	nop
f0108795:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108798:	c9                   	leave  
f0108799:	c3                   	ret    

f010879a <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f010879a:	55                   	push   %ebp
f010879b:	89 e5                	mov    %esp,%ebp
f010879d:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01087a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01087a7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01087ae:	eb 20                	jmp    f01087d0 <env_table_ws_get_size+0x36>
f01087b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01087b6:	89 d0                	mov    %edx,%eax
f01087b8:	01 c0                	add    %eax,%eax
f01087ba:	01 d0                	add    %edx,%eax
f01087bc:	c1 e0 03             	shl    $0x3,%eax
f01087bf:	01 c8                	add    %ecx,%eax
f01087c1:	83 e8 80             	sub    $0xffffff80,%eax
f01087c4:	8a 00                	mov    (%eax),%al
f01087c6:	84 c0                	test   %al,%al
f01087c8:	75 03                	jne    f01087cd <env_table_ws_get_size+0x33>
f01087ca:	ff 45 f8             	incl   -0x8(%ebp)
f01087cd:	ff 45 fc             	incl   -0x4(%ebp)
f01087d0:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01087d4:	7e da                	jle    f01087b0 <env_table_ws_get_size+0x16>
	return counter;
f01087d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01087d9:	c9                   	leave  
f01087da:	c3                   	ret    

f01087db <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01087db:	55                   	push   %ebp
f01087dc:	89 e5                	mov    %esp,%ebp
f01087de:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01087e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01087e8:	eb 4c                	jmp    f0108836 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01087ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f0:	89 d0                	mov    %edx,%eax
f01087f2:	01 c0                	add    %eax,%eax
f01087f4:	01 d0                	add    %edx,%eax
f01087f6:	c1 e0 03             	shl    $0x3,%eax
f01087f9:	01 c8                	add    %ecx,%eax
f01087fb:	83 c0 7c             	add    $0x7c,%eax
f01087fe:	8b 00                	mov    (%eax),%eax
f0108800:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108803:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108806:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010880b:	89 c2                	mov    %eax,%edx
f010880d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108810:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108816:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010881b:	39 c2                	cmp    %eax,%edx
f010881d:	75 14                	jne    f0108833 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f010881f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108822:	83 ec 08             	sub    $0x8,%esp
f0108825:	50                   	push   %eax
f0108826:	ff 75 08             	pushl  0x8(%ebp)
f0108829:	e8 b8 00 00 00       	call   f01088e6 <env_table_ws_clear_entry>
f010882e:	83 c4 10             	add    $0x10,%esp
			break;
f0108831:	eb 09                	jmp    f010883c <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108833:	ff 45 f4             	incl   -0xc(%ebp)
f0108836:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010883a:	7e ae                	jle    f01087ea <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f010883c:	90                   	nop
f010883d:	c9                   	leave  
f010883e:	c3                   	ret    

f010883f <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010883f:	55                   	push   %ebp
f0108840:	89 e5                	mov    %esp,%ebp
f0108842:	53                   	push   %ebx
f0108843:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108846:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010884a:	76 19                	jbe    f0108865 <env_table_ws_set_entry+0x26>
f010884c:	68 38 69 13 f0       	push   $0xf0136938
f0108851:	68 5e 67 13 f0       	push   $0xf013675e
f0108856:	68 b6 00 00 00       	push   $0xb6
f010885b:	68 74 67 13 f0       	push   $0xf0136774
f0108860:	e8 a0 79 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108865:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010886c:	76 19                	jbe    f0108887 <env_table_ws_set_entry+0x48>
f010886e:	68 94 67 13 f0       	push   $0xf0136794
f0108873:	68 5e 67 13 f0       	push   $0xf013675e
f0108878:	68 b7 00 00 00       	push   $0xb7
f010887d:	68 74 67 13 f0       	push   $0xf0136774
f0108882:	e8 7e 79 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108887:	8b 45 10             	mov    0x10(%ebp),%eax
f010888a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010888d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108890:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108895:	89 c1                	mov    %eax,%ecx
f0108897:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010889a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010889d:	89 d0                	mov    %edx,%eax
f010889f:	01 c0                	add    %eax,%eax
f01088a1:	01 d0                	add    %edx,%eax
f01088a3:	c1 e0 03             	shl    $0x3,%eax
f01088a6:	01 d8                	add    %ebx,%eax
f01088a8:	83 c0 7c             	add    $0x7c,%eax
f01088ab:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01088ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088b0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088b3:	89 d0                	mov    %edx,%eax
f01088b5:	01 c0                	add    %eax,%eax
f01088b7:	01 d0                	add    %edx,%eax
f01088b9:	c1 e0 03             	shl    $0x3,%eax
f01088bc:	01 c8                	add    %ecx,%eax
f01088be:	83 e8 80             	sub    $0xffffff80,%eax
f01088c1:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01088c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088c7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088ca:	89 d0                	mov    %edx,%eax
f01088cc:	01 c0                	add    %eax,%eax
f01088ce:	01 d0                	add    %edx,%eax
f01088d0:	c1 e0 03             	shl    $0x3,%eax
f01088d3:	01 c8                	add    %ecx,%eax
f01088d5:	05 84 00 00 00       	add    $0x84,%eax
f01088da:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01088e0:	90                   	nop
}
f01088e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01088e4:	c9                   	leave  
f01088e5:	c3                   	ret    

f01088e6 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01088e6:	55                   	push   %ebp
f01088e7:	89 e5                	mov    %esp,%ebp
f01088e9:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01088ec:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01088f0:	76 19                	jbe    f010890b <env_table_ws_clear_entry+0x25>
f01088f2:	68 38 69 13 f0       	push   $0xf0136938
f01088f7:	68 5e 67 13 f0       	push   $0xf013675e
f01088fc:	68 c2 00 00 00       	push   $0xc2
f0108901:	68 74 67 13 f0       	push   $0xf0136774
f0108906:	e8 fa 78 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f010890b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010890e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108911:	89 d0                	mov    %edx,%eax
f0108913:	01 c0                	add    %eax,%eax
f0108915:	01 d0                	add    %edx,%eax
f0108917:	c1 e0 03             	shl    $0x3,%eax
f010891a:	01 c8                	add    %ecx,%eax
f010891c:	83 c0 7c             	add    $0x7c,%eax
f010891f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108925:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108928:	8b 55 0c             	mov    0xc(%ebp),%edx
f010892b:	89 d0                	mov    %edx,%eax
f010892d:	01 c0                	add    %eax,%eax
f010892f:	01 d0                	add    %edx,%eax
f0108931:	c1 e0 03             	shl    $0x3,%eax
f0108934:	01 c8                	add    %ecx,%eax
f0108936:	83 e8 80             	sub    $0xffffff80,%eax
f0108939:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010893c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010893f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108942:	89 d0                	mov    %edx,%eax
f0108944:	01 c0                	add    %eax,%eax
f0108946:	01 d0                	add    %edx,%eax
f0108948:	c1 e0 03             	shl    $0x3,%eax
f010894b:	01 c8                	add    %ecx,%eax
f010894d:	05 84 00 00 00       	add    $0x84,%eax
f0108952:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108958:	90                   	nop
f0108959:	c9                   	leave  
f010895a:	c3                   	ret    

f010895b <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f010895b:	55                   	push   %ebp
f010895c:	89 e5                	mov    %esp,%ebp
f010895e:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108961:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108965:	76 19                	jbe    f0108980 <env_table_ws_get_virtual_address+0x25>
f0108967:	68 38 69 13 f0       	push   $0xf0136938
f010896c:	68 5e 67 13 f0       	push   $0xf013675e
f0108971:	68 ca 00 00 00       	push   $0xca
f0108976:	68 74 67 13 f0       	push   $0xf0136774
f010897b:	e8 85 78 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108980:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108983:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108986:	89 d0                	mov    %edx,%eax
f0108988:	01 c0                	add    %eax,%eax
f010898a:	01 d0                	add    %edx,%eax
f010898c:	c1 e0 03             	shl    $0x3,%eax
f010898f:	01 c8                	add    %ecx,%eax
f0108991:	83 c0 7c             	add    $0x7c,%eax
f0108994:	8b 00                	mov    (%eax),%eax
f0108996:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108999:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010899c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01089a1:	c9                   	leave  
f01089a2:	c3                   	ret    

f01089a3 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01089a3:	55                   	push   %ebp
f01089a4:	89 e5                	mov    %esp,%ebp
f01089a6:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089a9:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089ad:	76 19                	jbe    f01089c8 <env_table_ws_get_time_stamp+0x25>
f01089af:	68 38 69 13 f0       	push   $0xf0136938
f01089b4:	68 5e 67 13 f0       	push   $0xf013675e
f01089b9:	68 d1 00 00 00       	push   $0xd1
f01089be:	68 74 67 13 f0       	push   $0xf0136774
f01089c3:	e8 3d 78 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01089c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089cb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089ce:	89 d0                	mov    %edx,%eax
f01089d0:	01 c0                	add    %eax,%eax
f01089d2:	01 d0                	add    %edx,%eax
f01089d4:	c1 e0 03             	shl    $0x3,%eax
f01089d7:	01 c8                	add    %ecx,%eax
f01089d9:	05 84 00 00 00       	add    $0x84,%eax
f01089de:	8b 00                	mov    (%eax),%eax
}
f01089e0:	c9                   	leave  
f01089e1:	c3                   	ret    

f01089e2 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01089e2:	55                   	push   %ebp
f01089e3:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01089e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089e8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089eb:	89 d0                	mov    %edx,%eax
f01089ed:	01 c0                	add    %eax,%eax
f01089ef:	01 d0                	add    %edx,%eax
f01089f1:	c1 e0 03             	shl    $0x3,%eax
f01089f4:	01 c8                	add    %ecx,%eax
f01089f6:	83 e8 80             	sub    $0xffffff80,%eax
f01089f9:	8a 00                	mov    (%eax),%al
f01089fb:	0f b6 c0             	movzbl %al,%eax
}
f01089fe:	5d                   	pop    %ebp
f01089ff:	c3                   	ret    

f0108a00 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108a00:	55                   	push   %ebp
f0108a01:	89 e5                	mov    %esp,%ebp
f0108a03:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108a06:	83 ec 04             	sub    $0x4,%esp
f0108a09:	68 6c 69 13 f0       	push   $0xf013696c
f0108a0e:	68 e5 00 00 00       	push   $0xe5
f0108a13:	68 74 67 13 f0       	push   $0xf0136774
f0108a18:	e8 e8 77 ff ff       	call   f0100205 <_panic>

f0108a1d <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108a1d:	55                   	push   %ebp
f0108a1e:	89 e5                	mov    %esp,%ebp
f0108a20:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108a23:	83 ec 04             	sub    $0x4,%esp
f0108a26:	68 98 69 13 f0       	push   $0xf0136998
f0108a2b:	68 ec 00 00 00       	push   $0xec
f0108a30:	68 74 67 13 f0       	push   $0xf0136774
f0108a35:	e8 cb 77 ff ff       	call   f0100205 <_panic>

f0108a3a <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108a3a:	55                   	push   %ebp
f0108a3b:	89 e5                	mov    %esp,%ebp
f0108a3d:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108a40:	83 ec 04             	sub    $0x4,%esp
f0108a43:	68 c8 69 13 f0       	push   $0xf01369c8
f0108a48:	68 f3 00 00 00       	push   $0xf3
f0108a4d:	68 74 67 13 f0       	push   $0xf0136774
f0108a52:	e8 ae 77 ff ff       	call   f0100205 <_panic>

f0108a57 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108a57:	55                   	push   %ebp
f0108a58:	89 e5                	mov    %esp,%ebp
f0108a5a:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f0108a5d:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f0108a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a66:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108a69:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a6c:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a71:	85 c0                	test   %eax,%eax
f0108a73:	74 11                	je     f0108a86 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f0108a75:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108a7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a83:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f0108a86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a89:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a8e:	85 c0                	test   %eax,%eax
f0108a90:	74 11                	je     f0108aa3 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f0108a92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a95:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108a98:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108a9b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f0108aa3:	8b 45 14             	mov    0x14(%ebp),%eax
f0108aa6:	c1 e0 0c             	shl    $0xc,%eax
f0108aa9:	89 c2                	mov    %eax,%edx
f0108aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108aae:	01 d0                	add    %edx,%eax
f0108ab0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ab6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108ab9:	eb 4b                	jmp    f0108b06 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108abb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108ac2:	83 ec 04             	sub    $0x4,%esp
f0108ac5:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ac8:	50                   	push   %eax
f0108ac9:	ff 75 ec             	pushl  -0x14(%ebp)
f0108acc:	ff 75 08             	pushl  0x8(%ebp)
f0108acf:	e8 dd df ff ff       	call   f0106ab1 <get_page_table>
f0108ad4:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108ad7:	83 ec 04             	sub    $0x4,%esp
f0108ada:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108add:	50                   	push   %eax
f0108ade:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ae1:	ff 75 08             	pushl  0x8(%ebp)
f0108ae4:	e8 1d e3 ff ff       	call   f0106e06 <get_frame_info>
f0108ae9:	83 c4 10             	add    $0x10,%esp
f0108aec:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108aef:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108af3:	74 0a                	je     f0108aff <cut_paste_pages+0xa8>
			return -1;
f0108af5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108afa:	e9 d4 00 00 00       	jmp    f0108bd3 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108aff:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108b06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108b09:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108b0c:	72 ad                	jb     f0108abb <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b11:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108b14:	e9 a9 00 00 00       	jmp    f0108bc2 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108b19:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108b20:	83 ec 04             	sub    $0x4,%esp
f0108b23:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108b26:	50                   	push   %eax
f0108b27:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b2a:	ff 75 08             	pushl  0x8(%ebp)
f0108b2d:	e8 7f df ff ff       	call   f0106ab1 <get_page_table>
f0108b32:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108b35:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108b38:	85 c0                	test   %eax,%eax
f0108b3a:	75 14                	jne    f0108b50 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108b3c:	83 ec 08             	sub    $0x8,%esp
f0108b3f:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b42:	ff 75 08             	pushl  0x8(%ebp)
f0108b45:	e8 bd e0 ff ff       	call   f0106c07 <create_page_table>
f0108b4a:	83 c4 10             	add    $0x10,%esp
f0108b4d:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108b50:	83 ec 04             	sub    $0x4,%esp
f0108b53:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108b56:	50                   	push   %eax
f0108b57:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b5a:	ff 75 08             	pushl  0x8(%ebp)
f0108b5d:	e8 a4 e2 ff ff       	call   f0106e06 <get_frame_info>
f0108b62:	83 c4 10             	add    $0x10,%esp
f0108b65:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108b68:	83 ec 08             	sub    $0x8,%esp
f0108b6b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b6e:	ff 75 08             	pushl  0x8(%ebp)
f0108b71:	e8 f2 f3 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0108b76:	83 c4 10             	add    $0x10,%esp
f0108b79:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108b7c:	83 ec 08             	sub    $0x8,%esp
f0108b7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b82:	ff 75 08             	pushl  0x8(%ebp)
f0108b85:	e8 ec e2 ff ff       	call   f0106e76 <unmap_frame>
f0108b8a:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108b8d:	83 ec 0c             	sub    $0xc,%esp
f0108b90:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108b93:	50                   	push   %eax
f0108b94:	e8 59 dd ff ff       	call   f01068f2 <allocate_frame>
f0108b99:	83 c4 10             	add    $0x10,%esp
f0108b9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108b9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108ba2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ba5:	ff 75 e8             	pushl  -0x18(%ebp)
f0108ba8:	50                   	push   %eax
f0108ba9:	ff 75 08             	pushl  0x8(%ebp)
f0108bac:	e8 90 e1 ff ff       	call   f0106d41 <map_frame>
f0108bb1:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108bb4:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108bbb:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108bc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108bc5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108bc8:	0f 82 4b ff ff ff    	jb     f0108b19 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108bce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bd3:	c9                   	leave  
f0108bd4:	c3                   	ret    

f0108bd5 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108bd5:	55                   	push   %ebp
f0108bd6:	89 e5                	mov    %esp,%ebp
f0108bd8:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108bdb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108be2:	8b 45 10             	mov    0x10(%ebp),%eax
f0108be5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108be8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108beb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108bee:	8b 45 10             	mov    0x10(%ebp),%eax
f0108bf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108bf4:	e9 d1 00 00 00       	jmp    f0108cca <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108bf9:	83 ec 04             	sub    $0x4,%esp
f0108bfc:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108bff:	50                   	push   %eax
f0108c00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c03:	ff 75 08             	pushl  0x8(%ebp)
f0108c06:	e8 a6 de ff ff       	call   f0106ab1 <get_page_table>
f0108c0b:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108c0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c11:	85 c0                	test   %eax,%eax
f0108c13:	75 14                	jne    f0108c29 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f0108c15:	83 ec 08             	sub    $0x8,%esp
f0108c18:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c1b:	ff 75 08             	pushl  0x8(%ebp)
f0108c1e:	e8 e4 df ff ff       	call   f0106c07 <create_page_table>
f0108c23:	83 c4 10             	add    $0x10,%esp
f0108c26:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108c29:	83 ec 04             	sub    $0x4,%esp
f0108c2c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108c2f:	50                   	push   %eax
f0108c30:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c33:	ff 75 08             	pushl  0x8(%ebp)
f0108c36:	e8 cb e1 ff ff       	call   f0106e06 <get_frame_info>
f0108c3b:	83 c4 10             	add    $0x10,%esp
f0108c3e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f0108c41:	83 ec 08             	sub    $0x8,%esp
f0108c44:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c47:	ff 75 08             	pushl  0x8(%ebp)
f0108c4a:	e8 19 f3 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0108c4f:	83 c4 10             	add    $0x10,%esp
f0108c52:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f0108c55:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c58:	85 c0                	test   %eax,%eax
f0108c5a:	74 14                	je     f0108c70 <copy_paste_chunk+0x9b>
f0108c5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c5f:	83 e0 02             	and    $0x2,%eax
f0108c62:	85 c0                	test   %eax,%eax
f0108c64:	75 0a                	jne    f0108c70 <copy_paste_chunk+0x9b>
			return -1;
f0108c66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108c6b:	e9 a7 00 00 00       	jmp    f0108d17 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108c70:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c73:	85 c0                	test   %eax,%eax
f0108c75:	75 45                	jne    f0108cbc <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108c77:	83 ec 08             	sub    $0x8,%esp
f0108c7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c7d:	ff 75 08             	pushl  0x8(%ebp)
f0108c80:	e8 e3 f2 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0108c85:	83 c4 10             	add    $0x10,%esp
f0108c88:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108c8b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c8e:	83 e0 04             	and    $0x4,%eax
f0108c91:	83 c8 02             	or     $0x2,%eax
f0108c94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108c97:	83 ec 0c             	sub    $0xc,%esp
f0108c9a:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108c9d:	50                   	push   %eax
f0108c9e:	e8 4f dc ff ff       	call   f01068f2 <allocate_frame>
f0108ca3:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f0108ca6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108ca9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108cac:	52                   	push   %edx
f0108cad:	ff 75 f0             	pushl  -0x10(%ebp)
f0108cb0:	50                   	push   %eax
f0108cb1:	ff 75 08             	pushl  0x8(%ebp)
f0108cb4:	e8 88 e0 ff ff       	call   f0106d41 <map_frame>
f0108cb9:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108cbc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108cc3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108cca:	8b 55 10             	mov    0x10(%ebp),%edx
f0108ccd:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cd0:	01 d0                	add    %edx,%eax
f0108cd2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108cd5:	0f 87 1e ff ff ff    	ja     f0108bf9 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108cdb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108cde:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108ce1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ce4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108ced:	eb 16                	jmp    f0108d05 <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108cef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108cf2:	8b 10                	mov    (%eax),%edx
f0108cf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cf7:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108cf9:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108cfd:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108d01:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f0108d05:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d08:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d0b:	01 d0                	add    %edx,%eax
f0108d0d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108d10:	77 dd                	ja     f0108cef <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108d12:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108d17:	c9                   	leave  
f0108d18:	c3                   	ret    

f0108d19 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108d19:	55                   	push   %ebp
f0108d1a:	89 e5                	mov    %esp,%ebp
f0108d1c:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108d1f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108d26:	8b 45 10             	mov    0x10(%ebp),%eax
f0108d29:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d2f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d34:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108d37:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108d3e:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d41:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d44:	01 c2                	add    %eax,%edx
f0108d46:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d49:	01 d0                	add    %edx,%eax
f0108d4b:	48                   	dec    %eax
f0108d4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108d4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d52:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d57:	f7 75 e8             	divl   -0x18(%ebp)
f0108d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d5d:	29 d0                	sub    %edx,%eax
f0108d5f:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108d62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d65:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108d68:	e9 ac 00 00 00       	jmp    f0108e19 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108d6d:	83 ec 04             	sub    $0x4,%esp
f0108d70:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108d73:	50                   	push   %eax
f0108d74:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d77:	ff 75 08             	pushl  0x8(%ebp)
f0108d7a:	e8 32 dd ff ff       	call   f0106ab1 <get_page_table>
f0108d7f:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108d82:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d85:	85 c0                	test   %eax,%eax
f0108d87:	75 14                	jne    f0108d9d <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108d89:	83 ec 08             	sub    $0x8,%esp
f0108d8c:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d8f:	ff 75 08             	pushl  0x8(%ebp)
f0108d92:	e8 70 de ff ff       	call   f0106c07 <create_page_table>
f0108d97:	83 c4 10             	add    $0x10,%esp
f0108d9a:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108d9d:	83 ec 04             	sub    $0x4,%esp
f0108da0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108da3:	50                   	push   %eax
f0108da4:	ff 75 f4             	pushl  -0xc(%ebp)
f0108da7:	ff 75 08             	pushl  0x8(%ebp)
f0108daa:	e8 57 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108daf:	83 c4 10             	add    $0x10,%esp
f0108db2:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108db5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108db9:	74 07                	je     f0108dc2 <share_chunk+0xa9>
           return -1;
f0108dbb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108dc0:	eb 68                	jmp    f0108e2a <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108dc2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108dc9:	83 ec 04             	sub    $0x4,%esp
f0108dcc:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108dcf:	50                   	push   %eax
f0108dd0:	ff 75 0c             	pushl  0xc(%ebp)
f0108dd3:	ff 75 08             	pushl  0x8(%ebp)
f0108dd6:	e8 d6 dc ff ff       	call   f0106ab1 <get_page_table>
f0108ddb:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108dde:	83 ec 04             	sub    $0x4,%esp
f0108de1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108de4:	50                   	push   %eax
f0108de5:	ff 75 0c             	pushl  0xc(%ebp)
f0108de8:	ff 75 08             	pushl  0x8(%ebp)
f0108deb:	e8 16 e0 ff ff       	call   f0106e06 <get_frame_info>
f0108df0:	83 c4 10             	add    $0x10,%esp
f0108df3:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108df6:	8b 45 18             	mov    0x18(%ebp),%eax
f0108df9:	50                   	push   %eax
f0108dfa:	ff 75 f4             	pushl  -0xc(%ebp)
f0108dfd:	ff 75 d8             	pushl  -0x28(%ebp)
f0108e00:	ff 75 08             	pushl  0x8(%ebp)
f0108e03:	e8 39 df ff ff       	call   f0106d41 <map_frame>
f0108e08:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108e0b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108e12:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e1c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108e1f:	0f 82 48 ff ff ff    	jb     f0108d6d <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108e25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e2a:	c9                   	leave  
f0108e2b:	c3                   	ret    

f0108e2c <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108e2c:	55                   	push   %ebp
f0108e2d:	89 e5                	mov    %esp,%ebp
f0108e2f:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108e32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108e39:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e3c:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e3f:	01 d0                	add    %edx,%eax
f0108e41:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108e44:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108e4b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108e52:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108e59:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108e60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e63:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108e66:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108e71:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108e78:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108e7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e7e:	01 d0                	add    %edx,%eax
f0108e80:	48                   	dec    %eax
f0108e81:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108e84:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e87:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e8c:	f7 75 dc             	divl   -0x24(%ebp)
f0108e8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e92:	29 d0                	sub    %edx,%eax
f0108e94:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e9d:	e9 9d 00 00 00       	jmp    f0108f3f <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108ea8:	83 ec 04             	sub    $0x4,%esp
f0108eab:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108eae:	50                   	push   %eax
f0108eaf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108eb2:	ff 75 08             	pushl  0x8(%ebp)
f0108eb5:	e8 f7 db ff ff       	call   f0106ab1 <get_page_table>
f0108eba:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108ebd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ec0:	85 c0                	test   %eax,%eax
f0108ec2:	75 14                	jne    f0108ed8 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108ec4:	83 ec 08             	sub    $0x8,%esp
f0108ec7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108eca:	ff 75 08             	pushl  0x8(%ebp)
f0108ecd:	e8 35 dd ff ff       	call   f0106c07 <create_page_table>
f0108ed2:	83 c4 10             	add    $0x10,%esp
f0108ed5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108ed8:	83 ec 04             	sub    $0x4,%esp
f0108edb:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ede:	50                   	push   %eax
f0108edf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108ee2:	ff 75 08             	pushl  0x8(%ebp)
f0108ee5:	e8 1c df ff ff       	call   f0106e06 <get_frame_info>
f0108eea:	83 c4 10             	add    $0x10,%esp
f0108eed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108ef0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ef3:	85 c0                	test   %eax,%eax
f0108ef5:	74 07                	je     f0108efe <allocate_chunk+0xd2>
		{
			return -1;
f0108ef7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108efc:	eb 52                	jmp    f0108f50 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108efe:	83 ec 0c             	sub    $0xc,%esp
f0108f01:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108f04:	50                   	push   %eax
f0108f05:	e8 e8 d9 ff ff       	call   f01068f2 <allocate_frame>
f0108f0a:	83 c4 10             	add    $0x10,%esp
f0108f0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108f10:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108f14:	74 22                	je     f0108f38 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108f16:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f19:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108f1c:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108f1f:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f25:	52                   	push   %edx
f0108f26:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108f29:	50                   	push   %eax
f0108f2a:	ff 75 08             	pushl  0x8(%ebp)
f0108f2d:	e8 0f de ff ff       	call   f0106d41 <map_frame>
f0108f32:	83 c4 10             	add    $0x10,%esp
f0108f35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108f38:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f42:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108f45:	0f 82 57 ff ff ff    	jb     f0108ea2 <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108f4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108f50:	c9                   	leave  
f0108f51:	c3                   	ret    

f0108f52 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108f52:	55                   	push   %ebp
f0108f53:	89 e5                	mov    %esp,%ebp
f0108f55:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108f5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f61:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108f66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108f7a:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108f81:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f87:	01 d0                	add    %edx,%eax
f0108f89:	48                   	dec    %eax
f0108f8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108f8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f90:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f95:	f7 75 e0             	divl   -0x20(%ebp)
f0108f98:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f9b:	29 d0                	sub    %edx,%eax
f0108f9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108fa0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108fa3:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108fa6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108fa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fb3:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108fb8:	85 c0                	test   %eax,%eax
f0108fba:	75 37                	jne    f0108ff3 <calculate_allocated_space+0xa1>
		{
			uint32 *ptr_page_table = NULL;
f0108fbc:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108fc3:	83 ec 04             	sub    $0x4,%esp
f0108fc6:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108fc9:	50                   	push   %eax
f0108fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0108fcd:	ff 75 08             	pushl  0x8(%ebp)
f0108fd0:	e8 dc da ff ff       	call   f0106ab1 <get_page_table>
f0108fd5:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table != NULL)
f0108fd8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108fdb:	85 c0                	test   %eax,%eax
f0108fdd:	74 14                	je     f0108ff3 <calculate_allocated_space+0xa1>
			{
				(*num_tables)++;
f0108fdf:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fe2:	8b 00                	mov    (%eax),%eax
f0108fe4:	8d 50 01             	lea    0x1(%eax),%edx
f0108fe7:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fea:	89 10                	mov    %edx,(%eax)
				check = 1;
f0108fec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
			}
		}
		if(check == 1)
f0108ff3:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108ff7:	75 2d                	jne    f0109026 <calculate_allocated_space+0xd4>
		{
			uint32 *ptr_page = NULL;
f0108ff9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
			if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0109000:	83 ec 04             	sub    $0x4,%esp
f0109003:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0109006:	50                   	push   %eax
f0109007:	ff 75 f0             	pushl  -0x10(%ebp)
f010900a:	ff 75 08             	pushl  0x8(%ebp)
f010900d:	e8 f4 dd ff ff       	call   f0106e06 <get_frame_info>
f0109012:	83 c4 10             	add    $0x10,%esp
f0109015:	85 c0                	test   %eax,%eax
f0109017:	74 0d                	je     f0109026 <calculate_allocated_space+0xd4>
				(*num_pages)++;
f0109019:	8b 45 18             	mov    0x18(%ebp),%eax
f010901c:	8b 00                	mov    (%eax),%eax
f010901e:	8d 50 01             	lea    0x1(%eax),%edx
f0109021:	8b 45 18             	mov    0x18(%ebp),%eax
f0109024:	89 10                	mov    %edx,(%eax)
		}
		start_address += PAGE_SIZE;
f0109026:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		start_address_pt = start_address;
f010902d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109030:	89 45 f4             	mov    %eax,-0xc(%ebp)
	} while (start_address < sva+size);
f0109033:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109036:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109039:	01 d0                	add    %edx,%eax
f010903b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010903e:	0f 87 6c ff ff ff    	ja     f0108fb0 <calculate_allocated_space+0x5e>
}
f0109044:	90                   	nop
f0109045:	c9                   	leave  
f0109046:	c3                   	ret    

f0109047 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109047:	55                   	push   %ebp
f0109048:	89 e5                	mov    %esp,%ebp
f010904a:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f010904d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0109054:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f010905b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010905e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109061:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109064:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109069:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f010906c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010906f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109072:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109075:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010907a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt % (PAGE_SIZE*1024) == 0)
f010907d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109080:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0109085:	85 c0                	test   %eax,%eax
f0109087:	75 26                	jne    f01090af <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0109089:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0109090:	83 ec 04             	sub    $0x4,%esp
f0109093:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0109096:	50                   	push   %eax
f0109097:	ff 75 ec             	pushl  -0x14(%ebp)
f010909a:	ff 75 08             	pushl  0x8(%ebp)
f010909d:	e8 0f da ff ff       	call   f0106ab1 <get_page_table>
f01090a2:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f01090a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01090a8:	85 c0                	test   %eax,%eax
f01090aa:	75 03                	jne    f01090af <calculate_required_frames+0x68>
				number_of_tables++;
f01090ac:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f01090af:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f01090b6:	83 ec 04             	sub    $0x4,%esp
f01090b9:	8d 45 dc             	lea    -0x24(%ebp),%eax
f01090bc:	50                   	push   %eax
f01090bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01090c0:	ff 75 08             	pushl  0x8(%ebp)
f01090c3:	e8 3e dd ff ff       	call   f0106e06 <get_frame_info>
f01090c8:	83 c4 10             	add    $0x10,%esp
f01090cb:	85 c0                	test   %eax,%eax
f01090cd:	75 03                	jne    f01090d2 <calculate_required_frames+0x8b>
			number_of_pages++;
f01090cf:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f01090d2:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f01090d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f01090df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01090e2:	8b 45 10             	mov    0x10(%ebp),%eax
f01090e5:	01 d0                	add    %edx,%eax
f01090e7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01090ea:	77 91                	ja     f010907d <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f01090ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01090ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f2:	01 d0                	add    %edx,%eax
}
f01090f4:	c9                   	leave  
f01090f5:	c3                   	ret    

f01090f6 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01090f6:	55                   	push   %ebp
f01090f7:	89 e5                	mov    %esp,%ebp
f01090f9:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01090fc:	83 ec 04             	sub    $0x4,%esp
f01090ff:	68 f4 69 13 f0       	push   $0xf01369f4
f0109104:	68 25 01 00 00       	push   $0x125
f0109109:	68 24 6a 13 f0       	push   $0xf0136a24
f010910e:	e8 f2 70 ff ff       	call   f0100205 <_panic>

f0109113 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109113:	55                   	push   %ebp
f0109114:	89 e5                	mov    %esp,%ebp
f0109116:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");
	size = ROUNDUP(size,PAGE_SIZE);
f0109119:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0109120:	8b 55 10             	mov    0x10(%ebp),%edx
f0109123:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109126:	01 d0                	add    %edx,%eax
f0109128:	48                   	dec    %eax
f0109129:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010912c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010912f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109134:	f7 75 e8             	divl   -0x18(%ebp)
f0109137:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010913a:	29 d0                	sub    %edx,%eax
f010913c:	89 45 10             	mov    %eax,0x10(%ebp)
	virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010913f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109142:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109145:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109148:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010914d:	89 45 0c             	mov    %eax,0xc(%ebp)
	//uint32 end = ROUNDUP(virtual_address+size,PAGE_SIZE);
	//virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
	//cprintf("Before loop\n");
	//int count =1;
	int check = 0;
f0109150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(uint32 i = virtual_address; i < virtual_address + size ;i+=PAGE_SIZE)
f0109157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010915a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010915d:	e9 c8 00 00 00       	jmp    f010922a <free_user_mem+0x117>
	{
		//cprintf("Before Invalidate\n");
		//cprintf("%d\n",count);
		//count++;
		check = 0;
f0109162:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		pf_remove_env_page(e,i);
f0109169:	83 ec 08             	sub    $0x8,%esp
f010916c:	ff 75 f0             	pushl  -0x10(%ebp)
f010916f:	ff 75 08             	pushl  0x8(%ebp)
f0109172:	e8 80 a9 ff ff       	call   f0103af7 <pf_remove_env_page>
f0109177:	83 c4 10             	add    $0x10,%esp
		env_page_ws_invalidate(e,i);
f010917a:	83 ec 08             	sub    $0x8,%esp
f010917d:	ff 75 f0             	pushl  -0x10(%ebp)
f0109180:	ff 75 08             	pushl  0x8(%ebp)
f0109183:	e8 de ef ff ff       	call   f0108166 <env_page_ws_invalidate>
f0109188:	83 c4 10             	add    $0x10,%esp
		unmap_frame(e->env_page_directory,i);
f010918b:	8b 45 08             	mov    0x8(%ebp),%eax
f010918e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109191:	83 ec 08             	sub    $0x8,%esp
f0109194:	ff 75 f0             	pushl  -0x10(%ebp)
f0109197:	50                   	push   %eax
f0109198:	e8 d9 dc ff ff       	call   f0106e76 <unmap_frame>
f010919d:	83 c4 10             	add    $0x10,%esp

		uint32* ptr_page = NULL;
f01091a0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		get_page_table(e->env_page_directory,i,&ptr_page);
f01091a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01091aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01091ad:	83 ec 04             	sub    $0x4,%esp
f01091b0:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01091b3:	52                   	push   %edx
f01091b4:	ff 75 f0             	pushl  -0x10(%ebp)
f01091b7:	50                   	push   %eax
f01091b8:	e8 f4 d8 ff ff       	call   f0106ab1 <get_page_table>
f01091bd:	83 c4 10             	add    $0x10,%esp
		if (ptr_page != NULL)
f01091c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01091c3:	85 c0                	test   %eax,%eax
f01091c5:	74 5c                	je     f0109223 <free_user_mem+0x110>
		{
			for(int j = 0; j < 1024;j++)
f01091c7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01091ce:	eb 1d                	jmp    f01091ed <free_user_mem+0xda>
			{
				if(ptr_page[j] != 0)
f01091d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01091d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091d6:	c1 e2 02             	shl    $0x2,%edx
f01091d9:	01 d0                	add    %edx,%eax
f01091db:	8b 00                	mov    (%eax),%eax
f01091dd:	85 c0                	test   %eax,%eax
f01091df:	74 09                	je     f01091ea <free_user_mem+0xd7>
				{
					check = 1;
f01091e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					break;
f01091e8:	eb 0c                	jmp    f01091f6 <free_user_mem+0xe3>

		uint32* ptr_page = NULL;
		get_page_table(e->env_page_directory,i,&ptr_page);
		if (ptr_page != NULL)
		{
			for(int j = 0; j < 1024;j++)
f01091ea:	ff 45 ec             	incl   -0x14(%ebp)
f01091ed:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f01091f4:	7e da                	jle    f01091d0 <free_user_mem+0xbd>
				{
					check = 1;
					break;
				}
			}
			if(check == 0)
f01091f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01091fa:	75 27                	jne    f0109223 <free_user_mem+0x110>
			{
				pd_clear_page_dir_entry(e->env_page_directory, *ptr_page);
f01091fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01091ff:	8b 10                	mov    (%eax),%edx
f0109201:	8b 45 08             	mov    0x8(%ebp),%eax
f0109204:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109207:	83 ec 08             	sub    $0x8,%esp
f010920a:	52                   	push   %edx
f010920b:	50                   	push   %eax
f010920c:	e8 df ee ff ff       	call   f01080f0 <pd_clear_page_dir_entry>
f0109211:	83 c4 10             	add    $0x10,%esp
				kfree((void *)ptr_page);
f0109214:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109217:	83 ec 0c             	sub    $0xc,%esp
f010921a:	50                   	push   %eax
f010921b:	e8 37 ea ff ff       	call   f0107c57 <kfree>
f0109220:	83 c4 10             	add    $0x10,%esp
	//uint32 end = ROUNDUP(virtual_address+size,PAGE_SIZE);
	//virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
	//cprintf("Before loop\n");
	//int count =1;
	int check = 0;
	for(uint32 i = virtual_address; i < virtual_address + size ;i+=PAGE_SIZE)
f0109223:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010922a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010922d:	8b 45 10             	mov    0x10(%ebp),%eax
f0109230:	01 d0                	add    %edx,%eax
f0109232:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109235:	0f 87 27 ff ff ff    	ja     f0109162 <free_user_mem+0x4f>
	}
	//This function should:
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
}
f010923b:	90                   	nop
f010923c:	c9                   	leave  
f010923d:	c3                   	ret    

f010923e <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010923e:	55                   	push   %ebp
f010923f:	89 e5                	mov    %esp,%ebp
f0109241:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109244:	83 ec 04             	sub    $0x4,%esp
f0109247:	68 40 6a 13 f0       	push   $0xf0136a40
f010924c:	68 61 01 00 00       	push   $0x161
f0109251:	68 24 6a 13 f0       	push   $0xf0136a24
f0109256:	e8 aa 6f ff ff       	call   f0100205 <_panic>

f010925b <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010925b:	55                   	push   %ebp
f010925c:	89 e5                	mov    %esp,%ebp
f010925e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109261:	83 ec 04             	sub    $0x4,%esp
f0109264:	68 80 6a 13 f0       	push   $0xf0136a80
f0109269:	68 71 01 00 00       	push   $0x171
f010926e:	68 24 6a 13 f0       	push   $0xf0136a24
f0109273:	e8 8d 6f ff ff       	call   f0100205 <_panic>

f0109278 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109278:	55                   	push   %ebp
f0109279:	89 e5                	mov    %esp,%ebp
f010927b:	57                   	push   %edi
f010927c:	56                   	push   %esi
f010927d:	53                   	push   %ebx
f010927e:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109284:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f010928b:	83 ec 0c             	sub    $0xc,%esp
f010928e:	ff 75 08             	pushl  0x8(%ebp)
f0109291:	e8 0b 22 00 00       	call   f010b4a1 <get_user_program_info>
f0109296:	83 c4 10             	add    $0x10,%esp
f0109299:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f010929c:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01092a0:	75 0a                	jne    f01092ac <env_create+0x34>
f01092a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01092a7:	e9 cd 0b 00 00       	jmp    f0109e79 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01092ac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01092af:	8b 40 08             	mov    0x8(%eax),%eax
f01092b2:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01092b5:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f01092bc:	00 00 00 
	if(allocate_environment(&e) < 0)
f01092bf:	83 ec 0c             	sub    $0xc,%esp
f01092c2:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01092c8:	50                   	push   %eax
f01092c9:	e8 d3 0e 00 00       	call   f010a1a1 <allocate_environment>
f01092ce:	83 c4 10             	add    $0x10,%esp
f01092d1:	85 c0                	test   %eax,%eax
f01092d3:	79 0a                	jns    f01092df <env_create+0x67>
	{
		return 0;
f01092d5:	b8 00 00 00 00       	mov    $0x0,%eax
f01092da:	e9 9a 0b 00 00       	jmp    f0109e79 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01092df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01092e2:	8b 00                	mov    (%eax),%eax
f01092e4:	83 ec 0c             	sub    $0xc,%esp
f01092e7:	50                   	push   %eax
f01092e8:	e8 c0 83 02 00       	call   f01316ad <strlen>
f01092ed:	83 c4 10             	add    $0x10,%esp
f01092f0:	83 f8 3f             	cmp    $0x3f,%eax
f01092f3:	7f 20                	jg     f0109315 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01092f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01092f8:	8b 00                	mov    (%eax),%eax
f01092fa:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109300:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109306:	83 ec 08             	sub    $0x8,%esp
f0109309:	50                   	push   %eax
f010930a:	52                   	push   %edx
f010930b:	e8 ec 83 02 00       	call   f01316fc <strcpy>
f0109310:	83 c4 10             	add    $0x10,%esp
f0109313:	eb 20                	jmp    f0109335 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109315:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109318:	8b 00                	mov    (%eax),%eax
f010931a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109320:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109326:	83 ec 04             	sub    $0x4,%esp
f0109329:	6a 3f                	push   $0x3f
f010932b:	50                   	push   %eax
f010932c:	52                   	push   %edx
f010932d:	e8 f8 83 02 00       	call   f013172a <strncpy>
f0109332:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0109335:	e8 6d 0f 00 00       	call   f010a2a7 <create_user_directory>
f010933a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f010933d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109340:	83 ec 0c             	sub    $0xc,%esp
f0109343:	50                   	push   %eax
f0109344:	e8 61 ea ff ff       	call   f0107daa <kheap_physical_address>
f0109349:	83 c4 10             	add    $0x10,%esp
f010934c:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f010934f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109355:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109358:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010935b:	83 ec 0c             	sub    $0xc,%esp
f010935e:	6a 02                	push   $0x2
f0109360:	e8 f2 4d 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0109365:	83 c4 10             	add    $0x10,%esp
f0109368:	85 c0                	test   %eax,%eax
f010936a:	74 21                	je     f010938d <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f010936c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109372:	8b 55 10             	mov    0x10(%ebp),%edx
f0109375:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f010937b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109381:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109384:	2b 55 10             	sub    0x10(%ebp),%edx
f0109387:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f010938d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109391:	75 12                	jne    f01093a5 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109393:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109399:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f01093a0:	00 00 00 
f01093a3:	eb 0f                	jmp    f01093b4 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f01093a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093ab:	8b 55 14             	mov    0x14(%ebp),%edx
f01093ae:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01093b4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093ba:	83 ec 04             	sub    $0x4,%esp
f01093bd:	ff 75 ac             	pushl  -0x54(%ebp)
f01093c0:	ff 75 b0             	pushl  -0x50(%ebp)
f01093c3:	50                   	push   %eax
f01093c4:	e8 fa 15 00 00       	call   f010a9c3 <initialize_environment>
f01093c9:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01093cc:	0f 20 d8             	mov    %cr3,%eax
f01093cf:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f01093d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f01093d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f01093d8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093de:	8b 40 60             	mov    0x60(%eax),%eax
f01093e1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01093e7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01093ed:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01093f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01093f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01093fe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109404:	8b 40 74             	mov    0x74(%eax),%eax
f0109407:	48                   	dec    %eax
f0109408:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f010940b:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0109412:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109415:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f010941b:	83 ec 08             	sub    $0x8,%esp
f010941e:	ff 75 b8             	pushl  -0x48(%ebp)
f0109421:	50                   	push   %eax
f0109422:	e8 af 1d 00 00       	call   f010b1d6 <PROGRAM_SEGMENT_FIRST>
f0109427:	83 c4 0c             	add    $0xc,%esp
f010942a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109430:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109436:	b9 05 00 00 00       	mov    $0x5,%ecx
f010943b:	89 c7                	mov    %eax,%edi
f010943d:	89 d6                	mov    %edx,%esi
f010943f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109441:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109447:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010944a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010944d:	8b 40 10             	mov    0x10(%eax),%eax
f0109450:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109453:	75 07                	jne    f010945c <env_create+0x1e4>
f0109455:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010945c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010945f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109462:	e9 15 03 00 00       	jmp    f010977c <env_create+0x504>
	{
		segment_counter++;
f0109467:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f010946a:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109471:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109474:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010947a:	83 ec 0c             	sub    $0xc,%esp
f010947d:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0109483:	52                   	push   %edx
f0109484:	ff 75 dc             	pushl  -0x24(%ebp)
f0109487:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f010948d:	52                   	push   %edx
f010948e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109491:	50                   	push   %eax
f0109492:	e8 4b 0e 00 00       	call   f010a2e2 <program_segment_alloc_map_copy_workingset>
f0109497:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f010949a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01094a0:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f01094a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094a6:	8b 00                	mov    (%eax),%eax
f01094a8:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f01094ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094ae:	8b 40 0c             	mov    0xc(%eax),%eax
f01094b1:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01094b4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01094b7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01094ba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01094bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01094c2:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01094c5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01094cc:	8b 55 98             	mov    -0x68(%ebp),%edx
f01094cf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01094d2:	01 d0                	add    %edx,%eax
f01094d4:	48                   	dec    %eax
f01094d5:	89 45 88             	mov    %eax,-0x78(%ebp)
f01094d8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01094db:	ba 00 00 00 00       	mov    $0x0,%edx
f01094e0:	f7 75 8c             	divl   -0x74(%ebp)
f01094e3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01094e6:	29 d0                	sub    %edx,%eax
f01094e8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01094eb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01094ee:	2b 45 90             	sub    -0x70(%ebp),%eax
f01094f1:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01094f4:	a1 84 ad 89 f0       	mov    0xf089ad84,%eax
f01094f9:	83 ec 04             	sub    $0x4,%esp
f01094fc:	68 00 10 00 00       	push   $0x1000
f0109501:	6a 00                	push   $0x0
f0109503:	50                   	push   %eax
f0109504:	e8 92 83 02 00       	call   f013189b <memset>
f0109509:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f010950c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010950f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109512:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f0109518:	8b 45 80             	mov    -0x80(%ebp),%eax
f010951b:	01 d0                	add    %edx,%eax
f010951d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109520:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109523:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109526:	eb 13                	jmp    f010953b <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010952b:	8a 10                	mov    (%eax),%dl
f010952d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109530:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109532:	ff 45 cc             	incl   -0x34(%ebp)
f0109535:	ff 45 d4             	incl   -0x2c(%ebp)
f0109538:	ff 45 d0             	incl   -0x30(%ebp)
f010953b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010953e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109541:	72 e5                	jb     f0109528 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109543:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f0109549:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010954f:	83 ec 04             	sub    $0x4,%esp
f0109552:	52                   	push   %edx
f0109553:	ff 75 90             	pushl  -0x70(%ebp)
f0109556:	50                   	push   %eax
f0109557:	e8 b9 a1 ff ff       	call   f0103715 <pf_add_env_page>
f010955c:	83 c4 10             	add    $0x10,%esp
f010955f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109562:	75 17                	jne    f010957b <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109564:	83 ec 04             	sub    $0x4,%esp
f0109567:	68 ac 6a 13 f0       	push   $0xf0136aac
f010956c:	68 e1 00 00 00       	push   $0xe1
f0109571:	68 f1 6a 13 f0       	push   $0xf0136af1
f0109576:	e8 8a 6c ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010957b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010957e:	8b 50 04             	mov    0x4(%eax),%edx
f0109581:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109584:	01 d0                	add    %edx,%eax
f0109586:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010958c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109592:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109597:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010959d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01095a0:	8b 50 04             	mov    0x4(%eax),%edx
f01095a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01095a6:	01 d0                	add    %edx,%eax
f01095a8:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01095ae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01095b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01095b4:	eb 43                	jmp    f01095f9 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01095b6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01095b9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095bf:	83 ec 04             	sub    $0x4,%esp
f01095c2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01095c5:	52                   	push   %edx
f01095c6:	50                   	push   %eax
f01095c7:	e8 49 a1 ff ff       	call   f0103715 <pf_add_env_page>
f01095cc:	83 c4 10             	add    $0x10,%esp
f01095cf:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01095d2:	75 17                	jne    f01095eb <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01095d4:	83 ec 04             	sub    $0x4,%esp
f01095d7:	68 ac 6a 13 f0       	push   $0xf0136aac
f01095dc:	68 ee 00 00 00       	push   $0xee
f01095e1:	68 f1 6a 13 f0       	push   $0xf0136af1
f01095e6:	e8 1a 6c ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01095eb:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01095f2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01095f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01095fc:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0109602:	72 b2                	jb     f01095b6 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109604:	a1 84 ad 89 f0       	mov    0xf089ad84,%eax
f0109609:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010960c:	83 ec 04             	sub    $0x4,%esp
f010960f:	68 00 10 00 00       	push   $0x1000
f0109614:	6a 00                	push   $0x0
f0109616:	ff 75 d0             	pushl  -0x30(%ebp)
f0109619:	e8 7d 82 02 00       	call   f013189b <memset>
f010961e:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109621:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109627:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010962a:	eb 13                	jmp    f010963f <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f010962c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010962f:	8a 10                	mov    (%eax),%dl
f0109631:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109634:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109636:	ff 45 cc             	incl   -0x34(%ebp)
f0109639:	ff 45 d4             	incl   -0x2c(%ebp)
f010963c:	ff 45 d0             	incl   -0x30(%ebp)
f010963f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109642:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109648:	72 e2                	jb     f010962c <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010964a:	8b 15 84 ad 89 f0    	mov    0xf089ad84,%edx
f0109650:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109656:	83 ec 04             	sub    $0x4,%esp
f0109659:	52                   	push   %edx
f010965a:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109660:	50                   	push   %eax
f0109661:	e8 af a0 ff ff       	call   f0103715 <pf_add_env_page>
f0109666:	83 c4 10             	add    $0x10,%esp
f0109669:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010966c:	75 17                	jne    f0109685 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010966e:	83 ec 04             	sub    $0x4,%esp
f0109671:	68 ac 6a 13 f0       	push   $0xf0136aac
f0109676:	68 fd 00 00 00       	push   $0xfd
f010967b:	68 f1 6a 13 f0       	push   $0xf0136af1
f0109680:	e8 80 6b ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109685:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010968c:	10 00 00 
f010968f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109692:	8b 50 04             	mov    0x4(%eax),%edx
f0109695:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109698:	01 c2                	add    %eax,%edx
f010969a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01096a0:	01 d0                	add    %edx,%eax
f01096a2:	48                   	dec    %eax
f01096a3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01096a9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01096af:	ba 00 00 00 00       	mov    $0x0,%edx
f01096b4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01096ba:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01096c0:	29 d0                	sub    %edx,%eax
f01096c2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01096c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01096c8:	8b 50 08             	mov    0x8(%eax),%edx
f01096cb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01096ce:	01 d0                	add    %edx,%eax
f01096d0:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01096d3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01096d9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01096e0:	eb 41                	jmp    f0109723 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01096e2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096e8:	83 ec 04             	sub    $0x4,%esp
f01096eb:	6a 01                	push   $0x1
f01096ed:	ff 75 c8             	pushl  -0x38(%ebp)
f01096f0:	50                   	push   %eax
f01096f1:	e8 ee 9e ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01096f6:	83 c4 10             	add    $0x10,%esp
f01096f9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01096fc:	75 17                	jne    f0109715 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01096fe:	83 ec 04             	sub    $0x4,%esp
f0109701:	68 ac 6a 13 f0       	push   $0xf0136aac
f0109706:	68 0a 01 00 00       	push   $0x10a
f010970b:	68 f1 6a 13 f0       	push   $0xf0136af1
f0109710:	e8 f0 6a ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109715:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010971c:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109723:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010972a:	10 00 00 
f010972d:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109733:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109739:	01 d0                	add    %edx,%eax
f010973b:	48                   	dec    %eax
f010973c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109742:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109748:	ba 00 00 00 00       	mov    $0x0,%edx
f010974d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109753:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109759:	29 d0                	sub    %edx,%eax
f010975b:	89 c2                	mov    %eax,%edx
f010975d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109760:	39 c2                	cmp    %eax,%edx
f0109762:	0f 87 7a ff ff ff    	ja     f01096e2 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109768:	83 ec 08             	sub    $0x8,%esp
f010976b:	ff 75 b8             	pushl  -0x48(%ebp)
f010976e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109771:	e8 55 19 00 00       	call   f010b0cb <PROGRAM_SEGMENT_NEXT>
f0109776:	83 c4 10             	add    $0x10,%esp
f0109779:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010977c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109780:	0f 85 e1 fc ff ff    	jne    f0109467 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109786:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010978d:	e9 9d 00 00 00       	jmp    f010982f <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109792:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109798:	8b 48 78             	mov    0x78(%eax),%ecx
f010979b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010979e:	89 d0                	mov    %edx,%eax
f01097a0:	01 c0                	add    %eax,%eax
f01097a2:	01 d0                	add    %edx,%eax
f01097a4:	c1 e0 03             	shl    $0x3,%eax
f01097a7:	01 c8                	add    %ecx,%eax
f01097a9:	8a 40 04             	mov    0x4(%eax),%al
f01097ac:	84 c0                	test   %al,%al
f01097ae:	75 7c                	jne    f010982c <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01097b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097b6:	8b 48 78             	mov    0x78(%eax),%ecx
f01097b9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01097bc:	89 d0                	mov    %edx,%eax
f01097be:	01 c0                	add    %eax,%eax
f01097c0:	01 d0                	add    %edx,%eax
f01097c2:	c1 e0 03             	shl    $0x3,%eax
f01097c5:	01 c8                	add    %ecx,%eax
f01097c7:	8b 00                	mov    (%eax),%eax
f01097c9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01097cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01097d8:	83 ec 04             	sub    $0x4,%esp
f01097db:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01097e1:	52                   	push   %edx
f01097e2:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01097e8:	50                   	push   %eax
f01097e9:	e8 c3 d2 ff ff       	call   f0106ab1 <get_page_table>
f01097ee:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01097f1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01097f7:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01097fd:	c1 ea 0c             	shr    $0xc,%edx
f0109800:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0109806:	c1 e2 02             	shl    $0x2,%edx
f0109809:	01 d0                	add    %edx,%eax
f010980b:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109811:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109817:	c1 e9 0c             	shr    $0xc,%ecx
f010981a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109820:	c1 e1 02             	shl    $0x2,%ecx
f0109823:	01 ca                	add    %ecx,%edx
f0109825:	8b 12                	mov    (%edx),%edx
f0109827:	83 e2 bf             	and    $0xffffffbf,%edx
f010982a:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010982c:	ff 45 c4             	incl   -0x3c(%ebp)
f010982f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109835:	8b 50 74             	mov    0x74(%eax),%edx
f0109838:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010983b:	39 c2                	cmp    %eax,%edx
f010983d:	0f 87 4f ff ff ff    	ja     f0109792 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109843:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109846:	8b 50 08             	mov    0x8(%eax),%edx
f0109849:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010984f:	83 ec 08             	sub    $0x8,%esp
f0109852:	52                   	push   %edx
f0109853:	50                   	push   %eax
f0109854:	e8 bc 16 00 00       	call   f010af15 <set_environment_entry_point>
f0109859:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010985c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109862:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109869:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010986c:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109873:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109876:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010987d:	e9 53 05 00 00       	jmp    f0109dd5 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109882:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109889:	00 00 00 
		allocate_frame(&pp);
f010988c:	83 ec 0c             	sub    $0xc,%esp
f010988f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109895:	50                   	push   %eax
f0109896:	e8 57 d0 ff ff       	call   f01068f2 <allocate_frame>
f010989b:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010989e:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f01098a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01098ad:	6a 06                	push   $0x6
f01098af:	ff 75 c0             	pushl  -0x40(%ebp)
f01098b2:	52                   	push   %edx
f01098b3:	50                   	push   %eax
f01098b4:	e8 44 d6 ff ff       	call   f0106efd <loadtime_map_frame>
f01098b9:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01098bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01098bf:	83 ec 04             	sub    $0x4,%esp
f01098c2:	68 00 10 00 00       	push   $0x1000
f01098c7:	6a 00                	push   $0x0
f01098c9:	50                   	push   %eax
f01098ca:	e8 cc 7f 02 00       	call   f013189b <memset>
f01098cf:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01098d2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098d8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e4:	83 ec 04             	sub    $0x4,%esp
f01098e7:	ff 75 c0             	pushl  -0x40(%ebp)
f01098ea:	52                   	push   %edx
f01098eb:	50                   	push   %eax
f01098ec:	e8 e0 e8 ff ff       	call   f01081d1 <env_page_ws_set_entry>
f01098f1:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01098f4:	83 ec 0c             	sub    $0xc,%esp
f01098f7:	6a 02                	push   $0x2
f01098f9:	e8 59 48 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f01098fe:	83 c4 10             	add    $0x10,%esp
f0109901:	85 c0                	test   %eax,%eax
f0109903:	0f 84 6b 04 00 00    	je     f0109d74 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109909:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109912:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109918:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010991e:	89 d0                	mov    %edx,%eax
f0109920:	01 c0                	add    %eax,%eax
f0109922:	01 d0                	add    %edx,%eax
f0109924:	c1 e0 03             	shl    $0x3,%eax
f0109927:	01 c8                	add    %ecx,%eax
f0109929:	85 c0                	test   %eax,%eax
f010992b:	75 17                	jne    f0109944 <env_create+0x6cc>
f010992d:	83 ec 04             	sub    $0x4,%esp
f0109930:	68 0e 6b 13 f0       	push   $0xf0136b0e
f0109935:	68 41 01 00 00       	push   $0x141
f010993a:	68 f1 6a 13 f0       	push   $0xf0136af1
f010993f:	e8 c1 68 ff ff       	call   f0100205 <_panic>
f0109944:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010994a:	8b 48 78             	mov    0x78(%eax),%ecx
f010994d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109953:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109959:	89 d0                	mov    %edx,%eax
f010995b:	01 c0                	add    %eax,%eax
f010995d:	01 d0                	add    %edx,%eax
f010995f:	c1 e0 03             	shl    $0x3,%eax
f0109962:	01 c8                	add    %ecx,%eax
f0109964:	8b 40 10             	mov    0x10(%eax),%eax
f0109967:	85 c0                	test   %eax,%eax
f0109969:	74 4b                	je     f01099b6 <env_create+0x73e>
f010996b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109971:	8b 48 78             	mov    0x78(%eax),%ecx
f0109974:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109980:	89 d0                	mov    %edx,%eax
f0109982:	01 c0                	add    %eax,%eax
f0109984:	01 d0                	add    %edx,%eax
f0109986:	c1 e0 03             	shl    $0x3,%eax
f0109989:	01 c8                	add    %ecx,%eax
f010998b:	8b 50 10             	mov    0x10(%eax),%edx
f010998e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109994:	8b 58 78             	mov    0x78(%eax),%ebx
f0109997:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010999d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01099a3:	89 c8                	mov    %ecx,%eax
f01099a5:	01 c0                	add    %eax,%eax
f01099a7:	01 c8                	add    %ecx,%eax
f01099a9:	c1 e0 03             	shl    $0x3,%eax
f01099ac:	01 d8                	add    %ebx,%eax
f01099ae:	8b 40 14             	mov    0x14(%eax),%eax
f01099b1:	89 42 14             	mov    %eax,0x14(%edx)
f01099b4:	eb 2f                	jmp    f01099e5 <env_create+0x76d>
f01099b6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01099bc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099c2:	8b 58 78             	mov    0x78(%eax),%ebx
f01099c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099cb:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01099d1:	89 c8                	mov    %ecx,%eax
f01099d3:	01 c0                	add    %eax,%eax
f01099d5:	01 c8                	add    %ecx,%eax
f01099d7:	c1 e0 03             	shl    $0x3,%eax
f01099da:	01 d8                	add    %ebx,%eax
f01099dc:	8b 40 14             	mov    0x14(%eax),%eax
f01099df:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01099e5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099eb:	8b 48 78             	mov    0x78(%eax),%ecx
f01099ee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099f4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01099fa:	89 d0                	mov    %edx,%eax
f01099fc:	01 c0                	add    %eax,%eax
f01099fe:	01 d0                	add    %edx,%eax
f0109a00:	c1 e0 03             	shl    $0x3,%eax
f0109a03:	01 c8                	add    %ecx,%eax
f0109a05:	8b 40 14             	mov    0x14(%eax),%eax
f0109a08:	85 c0                	test   %eax,%eax
f0109a0a:	74 4b                	je     f0109a57 <env_create+0x7df>
f0109a0c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a12:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a15:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a21:	89 d0                	mov    %edx,%eax
f0109a23:	01 c0                	add    %eax,%eax
f0109a25:	01 d0                	add    %edx,%eax
f0109a27:	c1 e0 03             	shl    $0x3,%eax
f0109a2a:	01 c8                	add    %ecx,%eax
f0109a2c:	8b 50 14             	mov    0x14(%eax),%edx
f0109a2f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a35:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a38:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a3e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a44:	89 c8                	mov    %ecx,%eax
f0109a46:	01 c0                	add    %eax,%eax
f0109a48:	01 c8                	add    %ecx,%eax
f0109a4a:	c1 e0 03             	shl    $0x3,%eax
f0109a4d:	01 d8                	add    %ebx,%eax
f0109a4f:	8b 40 10             	mov    0x10(%eax),%eax
f0109a52:	89 42 10             	mov    %eax,0x10(%edx)
f0109a55:	eb 2f                	jmp    f0109a86 <env_create+0x80e>
f0109a57:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a5d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a63:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a6c:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a72:	89 c8                	mov    %ecx,%eax
f0109a74:	01 c0                	add    %eax,%eax
f0109a76:	01 c8                	add    %ecx,%eax
f0109a78:	c1 e0 03             	shl    $0x3,%eax
f0109a7b:	01 d8                	add    %ebx,%eax
f0109a7d:	8b 40 10             	mov    0x10(%eax),%eax
f0109a80:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109a86:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a8c:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a8f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a95:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a9b:	89 d0                	mov    %edx,%eax
f0109a9d:	01 c0                	add    %eax,%eax
f0109a9f:	01 d0                	add    %edx,%eax
f0109aa1:	c1 e0 03             	shl    $0x3,%eax
f0109aa4:	01 c8                	add    %ecx,%eax
f0109aa6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109aad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ab3:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ab6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109abc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ac2:	89 d0                	mov    %edx,%eax
f0109ac4:	01 c0                	add    %eax,%eax
f0109ac6:	01 d0                	add    %edx,%eax
f0109ac8:	c1 e0 03             	shl    $0x3,%eax
f0109acb:	01 c8                	add    %ecx,%eax
f0109acd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109ad4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ada:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109ae0:	4a                   	dec    %edx
f0109ae1:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109ae7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aed:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109af3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109af9:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109aff:	39 c2                	cmp    %eax,%edx
f0109b01:	0f 83 39 01 00 00    	jae    f0109c40 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109b07:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b0d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b10:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b16:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b1c:	89 d0                	mov    %edx,%eax
f0109b1e:	01 c0                	add    %eax,%eax
f0109b20:	01 d0                	add    %edx,%eax
f0109b22:	c1 e0 03             	shl    $0x3,%eax
f0109b25:	01 c8                	add    %ecx,%eax
f0109b27:	85 c0                	test   %eax,%eax
f0109b29:	75 17                	jne    f0109b42 <env_create+0x8ca>
f0109b2b:	83 ec 04             	sub    $0x4,%esp
f0109b2e:	68 2c 6b 13 f0       	push   $0xf0136b2c
f0109b33:	68 46 01 00 00       	push   $0x146
f0109b38:	68 f1 6a 13 f0       	push   $0xf0136af1
f0109b3d:	e8 c3 66 ff ff       	call   f0100205 <_panic>
f0109b42:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b48:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b4b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b51:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b57:	89 d0                	mov    %edx,%eax
f0109b59:	01 c0                	add    %eax,%eax
f0109b5b:	01 d0                	add    %edx,%eax
f0109b5d:	c1 e0 03             	shl    $0x3,%eax
f0109b60:	01 c8                	add    %ecx,%eax
f0109b62:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b68:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109b6e:	89 50 10             	mov    %edx,0x10(%eax)
f0109b71:	8b 40 10             	mov    0x10(%eax),%eax
f0109b74:	85 c0                	test   %eax,%eax
f0109b76:	74 31                	je     f0109ba9 <env_create+0x931>
f0109b78:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b7e:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109b84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b8a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b8d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b93:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b99:	89 c8                	mov    %ecx,%eax
f0109b9b:	01 c0                	add    %eax,%eax
f0109b9d:	01 c8                	add    %ecx,%eax
f0109b9f:	c1 e0 03             	shl    $0x3,%eax
f0109ba2:	01 d8                	add    %ebx,%eax
f0109ba4:	89 42 14             	mov    %eax,0x14(%edx)
f0109ba7:	eb 2c                	jmp    f0109bd5 <env_create+0x95d>
f0109ba9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109baf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb5:	8b 58 78             	mov    0x78(%eax),%ebx
f0109bb8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bbe:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bc4:	89 c8                	mov    %ecx,%eax
f0109bc6:	01 c0                	add    %eax,%eax
f0109bc8:	01 c8                	add    %ecx,%eax
f0109bca:	c1 e0 03             	shl    $0x3,%eax
f0109bcd:	01 d8                	add    %ebx,%eax
f0109bcf:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109bd5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109bdb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109be1:	8b 58 78             	mov    0x78(%eax),%ebx
f0109be4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bea:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bf0:	89 c8                	mov    %ecx,%eax
f0109bf2:	01 c0                	add    %eax,%eax
f0109bf4:	01 c8                	add    %ecx,%eax
f0109bf6:	c1 e0 03             	shl    $0x3,%eax
f0109bf9:	01 d8                	add    %ebx,%eax
f0109bfb:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109c01:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c07:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c0a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c10:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c16:	89 d0                	mov    %edx,%eax
f0109c18:	01 c0                	add    %eax,%eax
f0109c1a:	01 d0                	add    %edx,%eax
f0109c1c:	c1 e0 03             	shl    $0x3,%eax
f0109c1f:	01 c8                	add    %ecx,%eax
f0109c21:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109c28:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c2e:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109c34:	42                   	inc    %edx
f0109c35:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109c3b:	e9 34 01 00 00       	jmp    f0109d74 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109c40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c46:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c49:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c4f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c55:	89 d0                	mov    %edx,%eax
f0109c57:	01 c0                	add    %eax,%eax
f0109c59:	01 d0                	add    %edx,%eax
f0109c5b:	c1 e0 03             	shl    $0x3,%eax
f0109c5e:	01 c8                	add    %ecx,%eax
f0109c60:	85 c0                	test   %eax,%eax
f0109c62:	75 17                	jne    f0109c7b <env_create+0xa03>
f0109c64:	83 ec 04             	sub    $0x4,%esp
f0109c67:	68 2c 6b 13 f0       	push   $0xf0136b2c
f0109c6c:	68 4a 01 00 00       	push   $0x14a
f0109c71:	68 f1 6a 13 f0       	push   $0xf0136af1
f0109c76:	e8 8a 65 ff ff       	call   f0100205 <_panic>
f0109c7b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c81:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c8a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c90:	89 d0                	mov    %edx,%eax
f0109c92:	01 c0                	add    %eax,%eax
f0109c94:	01 d0                	add    %edx,%eax
f0109c96:	c1 e0 03             	shl    $0x3,%eax
f0109c99:	01 c8                	add    %ecx,%eax
f0109c9b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ca1:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109ca7:	89 50 10             	mov    %edx,0x10(%eax)
f0109caa:	8b 40 10             	mov    0x10(%eax),%eax
f0109cad:	85 c0                	test   %eax,%eax
f0109caf:	74 31                	je     f0109ce2 <env_create+0xa6a>
f0109cb1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cb7:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109cbd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cc3:	8b 58 78             	mov    0x78(%eax),%ebx
f0109cc6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ccc:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109cd2:	89 c8                	mov    %ecx,%eax
f0109cd4:	01 c0                	add    %eax,%eax
f0109cd6:	01 c8                	add    %ecx,%eax
f0109cd8:	c1 e0 03             	shl    $0x3,%eax
f0109cdb:	01 d8                	add    %ebx,%eax
f0109cdd:	89 42 14             	mov    %eax,0x14(%edx)
f0109ce0:	eb 2c                	jmp    f0109d0e <env_create+0xa96>
f0109ce2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ce8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cee:	8b 58 78             	mov    0x78(%eax),%ebx
f0109cf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109cfd:	89 c8                	mov    %ecx,%eax
f0109cff:	01 c0                	add    %eax,%eax
f0109d01:	01 c8                	add    %ecx,%eax
f0109d03:	c1 e0 03             	shl    $0x3,%eax
f0109d06:	01 d8                	add    %ebx,%eax
f0109d08:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109d0e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d1a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d1d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d23:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d29:	89 c8                	mov    %ecx,%eax
f0109d2b:	01 c0                	add    %eax,%eax
f0109d2d:	01 c8                	add    %ecx,%eax
f0109d2f:	c1 e0 03             	shl    $0x3,%eax
f0109d32:	01 d8                	add    %ebx,%eax
f0109d34:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109d3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d40:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d43:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d49:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d4f:	89 d0                	mov    %edx,%eax
f0109d51:	01 c0                	add    %eax,%eax
f0109d53:	01 d0                	add    %edx,%eax
f0109d55:	c1 e0 03             	shl    $0x3,%eax
f0109d58:	01 c8                	add    %ecx,%eax
f0109d5a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109d61:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d67:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109d6d:	42                   	inc    %edx
f0109d6e:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109d74:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d7a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d80:	42                   	inc    %edx
f0109d81:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109d87:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109d8d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d93:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109d99:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d9f:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109da2:	ba 00 00 00 00       	mov    $0x0,%edx
f0109da7:	f7 f3                	div    %ebx
f0109da9:	89 d0                	mov    %edx,%eax
f0109dab:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109db1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109db7:	83 ec 04             	sub    $0x4,%esp
f0109dba:	6a 01                	push   $0x1
f0109dbc:	ff 75 c0             	pushl  -0x40(%ebp)
f0109dbf:	50                   	push   %eax
f0109dc0:	e8 1f 98 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0109dc5:	83 c4 10             	add    $0x10,%esp
f0109dc8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109dce:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109dd5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109dd8:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109dde:	0f 83 9e fa ff ff    	jae    f0109882 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109de4:	83 ec 0c             	sub    $0xc,%esp
f0109de7:	6a 02                	push   $0x2
f0109de9:	e8 69 43 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f0109dee:	83 c4 10             	add    $0x10,%esp
f0109df1:	85 c0                	test   %eax,%eax
f0109df3:	74 72                	je     f0109e67 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109df5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109dfc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e02:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109e08:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109e0b:	eb 2b                	jmp    f0109e38 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109e0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109e10:	8b 10                	mov    (%eax),%edx
f0109e12:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e18:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109e1b:	6a 01                	push   $0x1
f0109e1d:	6a 00                	push   $0x0
f0109e1f:	52                   	push   %edx
f0109e20:	50                   	push   %eax
f0109e21:	e8 8e e0 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0109e26:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109e29:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e2f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109e35:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109e38:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e3e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109e42:	74 08                	je     f0109e4c <env_create+0xbd4>
f0109e44:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109e47:	8b 52 10             	mov    0x10(%edx),%edx
f0109e4a:	eb 05                	jmp    f0109e51 <env_create+0xbd9>
f0109e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e51:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109e57:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109e5d:	85 c0                	test   %eax,%eax
f0109e5f:	75 ac                	jne    f0109e0d <env_create+0xb95>
f0109e61:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109e65:	75 a6                	jne    f0109e0d <env_create+0xb95>
f0109e67:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109e6a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109e6d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109e70:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109e73:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109e79:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109e7c:	5b                   	pop    %ebx
f0109e7d:	5e                   	pop    %esi
f0109e7e:	5f                   	pop    %edi
f0109e7f:	5d                   	pop    %ebp
f0109e80:	c3                   	ret    

f0109e81 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109e81:	55                   	push   %ebp
f0109e82:	89 e5                	mov    %esp,%ebp
f0109e84:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109e87:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109e8c:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109e8f:	74 25                	je     f0109eb6 <env_run+0x35>
	{
		curenv = e ;
f0109e91:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e94:	a3 f4 a3 89 f0       	mov    %eax,0xf089a3f4
		curenv->env_runs++ ;
f0109e99:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109e9e:	8b 50 58             	mov    0x58(%eax),%edx
f0109ea1:	42                   	inc    %edx
f0109ea2:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109ea5:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109eaa:	8b 40 60             	mov    0x60(%eax),%eax
f0109ead:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eb3:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109eb6:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109ebb:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109ec2:	e8 f8 a2 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109ec7:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109ecc:	83 ec 0c             	sub    $0xc,%esp
f0109ecf:	50                   	push   %eax
f0109ed0:	e8 0f 01 00 00       	call   f0109fe4 <env_pop_tf>

f0109ed5 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109ed5:	55                   	push   %ebp
f0109ed6:	89 e5                	mov    %esp,%ebp
f0109ed8:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109edb:	83 ec 0c             	sub    $0xc,%esp
f0109ede:	ff 75 08             	pushl  0x8(%ebp)
f0109ee1:	e8 3e 11 00 00       	call   f010b024 <unshare_pws_at_user_space>
f0109ee6:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109ee9:	83 ec 04             	sub    $0x4,%esp
f0109eec:	68 50 6b 13 f0       	push   $0xf0136b50
f0109ef1:	68 9d 01 00 00       	push   $0x19d
f0109ef6:	68 f1 6a 13 f0       	push   $0xf0136af1
f0109efb:	e8 05 63 ff ff       	call   f0100205 <_panic>

f0109f00 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109f00:	55                   	push   %ebp
f0109f01:	89 e5                	mov    %esp,%ebp
f0109f03:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109f06:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109f0b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109f0e:	83 ec 0c             	sub    $0xc,%esp
f0109f11:	50                   	push   %eax
f0109f12:	e8 8b b3 ff ff       	call   f01052a2 <sched_exit_env>
f0109f17:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109f1a:	e8 07 a8 ff ff       	call   f0104726 <fos_scheduler>

f0109f1f <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109f1f:	55                   	push   %ebp
f0109f20:	89 e5                	mov    %esp,%ebp
f0109f22:	53                   	push   %ebx
f0109f23:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109f26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109f2a:	75 15                	jne    f0109f41 <envid2env+0x22>
		*env_store = curenv;
f0109f2c:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f0109f32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109f35:	89 10                	mov    %edx,(%eax)
		return 0;
f0109f37:	b8 00 00 00 00       	mov    $0x0,%eax
f0109f3c:	e9 9e 00 00 00       	jmp    f0109fdf <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109f41:	8b 1d f0 a3 89 f0    	mov    0xf089a3f0,%ebx
f0109f47:	83 ec 0c             	sub    $0xc,%esp
f0109f4a:	68 b1 02 00 00       	push   $0x2b1
f0109f4f:	e8 cb 64 02 00       	call   f013041f <nearest_pow2_ceil>
f0109f54:	83 c4 10             	add    $0x10,%esp
f0109f57:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109f5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f5d:	21 c2                	and    %eax,%edx
f0109f5f:	89 d0                	mov    %edx,%eax
f0109f61:	c1 e0 03             	shl    $0x3,%eax
f0109f64:	01 d0                	add    %edx,%eax
f0109f66:	01 c0                	add    %eax,%eax
f0109f68:	01 d0                	add    %edx,%eax
f0109f6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f71:	01 d0                	add    %edx,%eax
f0109f73:	c1 e0 04             	shl    $0x4,%eax
f0109f76:	01 d8                	add    %ebx,%eax
f0109f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f7e:	8b 40 54             	mov    0x54(%eax),%eax
f0109f81:	85 c0                	test   %eax,%eax
f0109f83:	74 0b                	je     f0109f90 <envid2env+0x71>
f0109f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f88:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109f8b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109f8e:	74 10                	je     f0109fa0 <envid2env+0x81>
		*env_store = 0;
f0109f90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109f93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109f99:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109f9e:	eb 3f                	jmp    f0109fdf <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109fa0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109fa4:	74 2c                	je     f0109fd2 <envid2env+0xb3>
f0109fa6:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109fab:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109fae:	74 22                	je     f0109fd2 <envid2env+0xb3>
f0109fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fb3:	8b 50 50             	mov    0x50(%eax),%edx
f0109fb6:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0109fbb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109fbe:	39 c2                	cmp    %eax,%edx
f0109fc0:	74 10                	je     f0109fd2 <envid2env+0xb3>
		*env_store = 0;
f0109fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fc5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109fcb:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109fd0:	eb 0d                	jmp    f0109fdf <envid2env+0xc0>
	}

	*env_store = e;
f0109fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fd8:	89 10                	mov    %edx,(%eax)
	return 0;
f0109fda:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109fdf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109fe2:	c9                   	leave  
f0109fe3:	c3                   	ret    

f0109fe4 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109fe4:	55                   	push   %ebp
f0109fe5:	89 e5                	mov    %esp,%ebp
f0109fe7:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109fea:	8b 65 08             	mov    0x8(%ebp),%esp
f0109fed:	61                   	popa   
f0109fee:	07                   	pop    %es
f0109fef:	1f                   	pop    %ds
f0109ff0:	83 c4 08             	add    $0x8,%esp
f0109ff3:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109ff4:	83 ec 04             	sub    $0x4,%esp
f0109ff7:	68 77 6b 13 f0       	push   $0xf0136b77
f0109ffc:	68 fd 01 00 00       	push   $0x1fd
f010a001:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a006:	e8 fa 61 ff ff       	call   f0100205 <_panic>

f010a00b <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a00b:	55                   	push   %ebp
f010a00c:	89 e5                	mov    %esp,%ebp
f010a00e:	53                   	push   %ebx
f010a00f:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a012:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a019:	e9 73 01 00 00       	jmp    f010a191 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a01e:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a024:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a027:	89 d0                	mov    %edx,%eax
f010a029:	c1 e0 03             	shl    $0x3,%eax
f010a02c:	01 d0                	add    %edx,%eax
f010a02e:	01 c0                	add    %eax,%eax
f010a030:	01 d0                	add    %edx,%eax
f010a032:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a039:	01 d0                	add    %edx,%eax
f010a03b:	c1 e0 04             	shl    $0x4,%eax
f010a03e:	01 c8                	add    %ecx,%eax
f010a040:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a047:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a04d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a050:	89 d0                	mov    %edx,%eax
f010a052:	c1 e0 03             	shl    $0x3,%eax
f010a055:	01 d0                	add    %edx,%eax
f010a057:	01 c0                	add    %eax,%eax
f010a059:	01 d0                	add    %edx,%eax
f010a05b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a062:	01 d0                	add    %edx,%eax
f010a064:	c1 e0 04             	shl    $0x4,%eax
f010a067:	01 c8                	add    %ecx,%eax
f010a069:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a070:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a076:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a079:	89 d0                	mov    %edx,%eax
f010a07b:	c1 e0 03             	shl    $0x3,%eax
f010a07e:	01 d0                	add    %edx,%eax
f010a080:	01 c0                	add    %eax,%eax
f010a082:	01 d0                	add    %edx,%eax
f010a084:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a08b:	01 d0                	add    %edx,%eax
f010a08d:	c1 e0 04             	shl    $0x4,%eax
f010a090:	01 c8                	add    %ecx,%eax
f010a092:	85 c0                	test   %eax,%eax
f010a094:	75 17                	jne    f010a0ad <env_init+0xa2>
f010a096:	83 ec 04             	sub    $0x4,%esp
f010a099:	68 2c 6b 13 f0       	push   $0xf0136b2c
f010a09e:	68 19 02 00 00       	push   $0x219
f010a0a3:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a0a8:	e8 58 61 ff ff       	call   f0100205 <_panic>
f010a0ad:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a0b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0b6:	89 d0                	mov    %edx,%eax
f010a0b8:	c1 e0 03             	shl    $0x3,%eax
f010a0bb:	01 d0                	add    %edx,%eax
f010a0bd:	01 c0                	add    %eax,%eax
f010a0bf:	01 d0                	add    %edx,%eax
f010a0c1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a0c8:	01 d0                	add    %edx,%eax
f010a0ca:	c1 e0 04             	shl    $0x4,%eax
f010a0cd:	01 c8                	add    %ecx,%eax
f010a0cf:	8b 15 f8 a3 89 f0    	mov    0xf089a3f8,%edx
f010a0d5:	89 50 44             	mov    %edx,0x44(%eax)
f010a0d8:	8b 40 44             	mov    0x44(%eax),%eax
f010a0db:	85 c0                	test   %eax,%eax
f010a0dd:	74 2d                	je     f010a10c <env_init+0x101>
f010a0df:	8b 0d f8 a3 89 f0    	mov    0xf089a3f8,%ecx
f010a0e5:	8b 1d f0 a3 89 f0    	mov    0xf089a3f0,%ebx
f010a0eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0ee:	89 d0                	mov    %edx,%eax
f010a0f0:	c1 e0 03             	shl    $0x3,%eax
f010a0f3:	01 d0                	add    %edx,%eax
f010a0f5:	01 c0                	add    %eax,%eax
f010a0f7:	01 d0                	add    %edx,%eax
f010a0f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a100:	01 d0                	add    %edx,%eax
f010a102:	c1 e0 04             	shl    $0x4,%eax
f010a105:	01 d8                	add    %ebx,%eax
f010a107:	89 41 48             	mov    %eax,0x48(%ecx)
f010a10a:	eb 27                	jmp    f010a133 <env_init+0x128>
f010a10c:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a112:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a115:	89 d0                	mov    %edx,%eax
f010a117:	c1 e0 03             	shl    $0x3,%eax
f010a11a:	01 d0                	add    %edx,%eax
f010a11c:	01 c0                	add    %eax,%eax
f010a11e:	01 d0                	add    %edx,%eax
f010a120:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a127:	01 d0                	add    %edx,%eax
f010a129:	c1 e0 04             	shl    $0x4,%eax
f010a12c:	01 c8                	add    %ecx,%eax
f010a12e:	a3 fc a3 89 f0       	mov    %eax,0xf089a3fc
f010a133:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a139:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a13c:	89 d0                	mov    %edx,%eax
f010a13e:	c1 e0 03             	shl    $0x3,%eax
f010a141:	01 d0                	add    %edx,%eax
f010a143:	01 c0                	add    %eax,%eax
f010a145:	01 d0                	add    %edx,%eax
f010a147:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a14e:	01 d0                	add    %edx,%eax
f010a150:	c1 e0 04             	shl    $0x4,%eax
f010a153:	01 c8                	add    %ecx,%eax
f010a155:	a3 f8 a3 89 f0       	mov    %eax,0xf089a3f8
f010a15a:	8b 0d f0 a3 89 f0    	mov    0xf089a3f0,%ecx
f010a160:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a163:	89 d0                	mov    %edx,%eax
f010a165:	c1 e0 03             	shl    $0x3,%eax
f010a168:	01 d0                	add    %edx,%eax
f010a16a:	01 c0                	add    %eax,%eax
f010a16c:	01 d0                	add    %edx,%eax
f010a16e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a175:	01 d0                	add    %edx,%eax
f010a177:	c1 e0 04             	shl    $0x4,%eax
f010a17a:	01 c8                	add    %ecx,%eax
f010a17c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a183:	a1 04 a4 89 f0       	mov    0xf089a404,%eax
f010a188:	40                   	inc    %eax
f010a189:	a3 04 a4 89 f0       	mov    %eax,0xf089a404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a18e:	ff 4d f4             	decl   -0xc(%ebp)
f010a191:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a195:	0f 89 83 fe ff ff    	jns    f010a01e <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a19b:	90                   	nop
f010a19c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a19f:	c9                   	leave  
f010a1a0:	c3                   	ret    

f010a1a1 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a1a1:	55                   	push   %ebp
f010a1a2:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a1a4:	8b 15 f8 a3 89 f0    	mov    0xf089a3f8,%edx
f010a1aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ad:	89 10                	mov    %edx,(%eax)
f010a1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b2:	8b 00                	mov    (%eax),%eax
f010a1b4:	85 c0                	test   %eax,%eax
f010a1b6:	75 07                	jne    f010a1bf <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a1b8:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a1bd:	eb 11                	jmp    f010a1d0 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c2:	8b 00                	mov    (%eax),%eax
f010a1c4:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a1cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a1d0:	5d                   	pop    %ebp
f010a1d1:	c3                   	ret    

f010a1d2 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a1d2:	55                   	push   %ebp
f010a1d3:	89 e5                	mov    %esp,%ebp
f010a1d5:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a1d8:	83 ec 04             	sub    $0x4,%esp
f010a1db:	68 f0 05 00 00       	push   $0x5f0
f010a1e0:	6a 00                	push   $0x0
f010a1e2:	ff 75 08             	pushl  0x8(%ebp)
f010a1e5:	e8 b1 76 02 00       	call   f013189b <memset>
f010a1ea:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a1ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1f0:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a1f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a1fb:	75 17                	jne    f010a214 <free_environment+0x42>
f010a1fd:	83 ec 04             	sub    $0x4,%esp
f010a200:	68 2c 6b 13 f0       	push   $0xf0136b2c
f010a205:	68 36 02 00 00       	push   $0x236
f010a20a:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a20f:	e8 f1 5f ff ff       	call   f0100205 <_panic>
f010a214:	8b 15 f8 a3 89 f0    	mov    0xf089a3f8,%edx
f010a21a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a21d:	89 50 44             	mov    %edx,0x44(%eax)
f010a220:	8b 45 08             	mov    0x8(%ebp),%eax
f010a223:	8b 40 44             	mov    0x44(%eax),%eax
f010a226:	85 c0                	test   %eax,%eax
f010a228:	74 0d                	je     f010a237 <free_environment+0x65>
f010a22a:	a1 f8 a3 89 f0       	mov    0xf089a3f8,%eax
f010a22f:	8b 55 08             	mov    0x8(%ebp),%edx
f010a232:	89 50 48             	mov    %edx,0x48(%eax)
f010a235:	eb 08                	jmp    f010a23f <free_environment+0x6d>
f010a237:	8b 45 08             	mov    0x8(%ebp),%eax
f010a23a:	a3 fc a3 89 f0       	mov    %eax,0xf089a3fc
f010a23f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a242:	a3 f8 a3 89 f0       	mov    %eax,0xf089a3f8
f010a247:	8b 45 08             	mov    0x8(%ebp),%eax
f010a24a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a251:	a1 04 a4 89 f0       	mov    0xf089a404,%eax
f010a256:	40                   	inc    %eax
f010a257:	a3 04 a4 89 f0       	mov    %eax,0xf089a404
}
f010a25c:	90                   	nop
f010a25d:	c9                   	leave  
f010a25e:	c3                   	ret    

f010a25f <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a25f:	55                   	push   %ebp
f010a260:	89 e5                	mov    %esp,%ebp
f010a262:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a265:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a268:	89 d0                	mov    %edx,%eax
f010a26a:	01 c0                	add    %eax,%eax
f010a26c:	01 d0                	add    %edx,%eax
f010a26e:	c1 e0 03             	shl    $0x3,%eax
f010a271:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a274:	83 ec 0c             	sub    $0xc,%esp
f010a277:	ff 75 f4             	pushl  -0xc(%ebp)
f010a27a:	e8 0d d9 ff ff       	call   f0107b8c <kmalloc>
f010a27f:	83 c4 10             	add    $0x10,%esp
f010a282:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a285:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a289:	75 17                	jne    f010a2a2 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a28b:	83 ec 04             	sub    $0x4,%esp
f010a28e:	68 83 6b 13 f0       	push   $0xf0136b83
f010a293:	68 44 02 00 00       	push   $0x244
f010a298:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a29d:	e8 63 5f ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a2a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a2a5:	c9                   	leave  
f010a2a6:	c3                   	ret    

f010a2a7 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a2a7:	55                   	push   %ebp
f010a2a8:	89 e5                	mov    %esp,%ebp
f010a2aa:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a2ad:	83 ec 0c             	sub    $0xc,%esp
f010a2b0:	68 00 10 00 00       	push   $0x1000
f010a2b5:	e8 d2 d8 ff ff       	call   f0107b8c <kmalloc>
f010a2ba:	83 c4 10             	add    $0x10,%esp
f010a2bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a2c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a2c4:	75 17                	jne    f010a2dd <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a2c6:	83 ec 04             	sub    $0x4,%esp
f010a2c9:	68 83 6b 13 f0       	push   $0xf0136b83
f010a2ce:	68 53 02 00 00       	push   $0x253
f010a2d3:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a2d8:	e8 28 5f ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a2dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f010a2e0:	c9                   	leave  
f010a2e1:	c3                   	ret    

f010a2e2 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a2e2:	55                   	push   %ebp
f010a2e3:	89 e5                	mov    %esp,%ebp
f010a2e5:	53                   	push   %ebx
f010a2e6:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a2e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2ec:	8b 40 0c             	mov    0xc(%eax),%eax
f010a2ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a2f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2f5:	8b 40 08             	mov    0x8(%eax),%eax
f010a2f8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a2fb:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a302:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a305:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a308:	01 c2                	add    %eax,%edx
f010a30a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a30d:	01 d0                	add    %edx,%eax
f010a30f:	48                   	dec    %eax
f010a310:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a313:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a316:	ba 00 00 00 00       	mov    $0x0,%edx
f010a31b:	f7 75 dc             	divl   -0x24(%ebp)
f010a31e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a321:	29 d0                	sub    %edx,%eax
f010a323:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a326:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a329:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a32c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a32f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a334:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a337:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a33e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a345:	8b 45 10             	mov    0x10(%ebp),%eax
f010a348:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a34e:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a355:	0f 85 c8 05 00 00    	jne    f010a923 <program_segment_alloc_map_copy_workingset+0x641>
f010a35b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a35e:	05 5c 05 00 00       	add    $0x55c,%eax
f010a363:	83 ec 08             	sub    $0x8,%esp
f010a366:	68 a0 6b 13 f0       	push   $0xf0136ba0
f010a36b:	50                   	push   %eax
f010a36c:	e8 48 74 02 00       	call   f01317b9 <strcmp>
f010a371:	83 c4 10             	add    $0x10,%esp
f010a374:	85 c0                	test   %eax,%eax
f010a376:	0f 84 a7 05 00 00    	je     f010a923 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a37c:	8b 45 14             	mov    0x14(%ebp),%eax
f010a37f:	83 f8 06             	cmp    $0x6,%eax
f010a382:	76 05                	jbe    f010a389 <program_segment_alloc_map_copy_workingset+0xa7>
f010a384:	b8 06 00 00 00       	mov    $0x6,%eax
f010a389:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a38c:	e9 92 05 00 00       	jmp    f010a923 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a391:	83 ec 0c             	sub    $0xc,%esp
f010a394:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a397:	50                   	push   %eax
f010a398:	e8 55 c5 ff ff       	call   f01068f2 <allocate_frame>
f010a39d:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a3a0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a3a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a3a9:	6a 06                	push   $0x6
f010a3ab:	ff 75 f4             	pushl  -0xc(%ebp)
f010a3ae:	52                   	push   %edx
f010a3af:	50                   	push   %eax
f010a3b0:	e8 48 cb ff ff       	call   f0106efd <loadtime_map_frame>
f010a3b5:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a3b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3bb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3c7:	89 d0                	mov    %edx,%eax
f010a3c9:	01 c0                	add    %eax,%eax
f010a3cb:	01 d0                	add    %edx,%eax
f010a3cd:	c1 e0 03             	shl    $0x3,%eax
f010a3d0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a3d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3d6:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a3d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3db:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3e7:	89 d0                	mov    %edx,%eax
f010a3e9:	01 c0                	add    %eax,%eax
f010a3eb:	01 d0                	add    %edx,%eax
f010a3ed:	c1 e0 03             	shl    $0x3,%eax
f010a3f0:	01 c8                	add    %ecx,%eax
f010a3f2:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a3f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ff:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a405:	89 d0                	mov    %edx,%eax
f010a407:	01 c0                	add    %eax,%eax
f010a409:	01 d0                	add    %edx,%eax
f010a40b:	c1 e0 03             	shl    $0x3,%eax
f010a40e:	01 c8                	add    %ecx,%eax
f010a410:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a417:	83 ec 0c             	sub    $0xc,%esp
f010a41a:	6a 02                	push   $0x2
f010a41c:	e8 36 3d 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f010a421:	83 c4 10             	add    $0x10,%esp
f010a424:	85 c0                	test   %eax,%eax
f010a426:	0f 84 c8 03 00 00    	je     f010a7f4 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a42c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a432:	8b 45 08             	mov    0x8(%ebp),%eax
f010a435:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a43b:	89 d0                	mov    %edx,%eax
f010a43d:	01 c0                	add    %eax,%eax
f010a43f:	01 d0                	add    %edx,%eax
f010a441:	c1 e0 03             	shl    $0x3,%eax
f010a444:	01 c8                	add    %ecx,%eax
f010a446:	85 c0                	test   %eax,%eax
f010a448:	75 17                	jne    f010a461 <program_segment_alloc_map_copy_workingset+0x17f>
f010a44a:	83 ec 04             	sub    $0x4,%esp
f010a44d:	68 0e 6b 13 f0       	push   $0xf0136b0e
f010a452:	68 85 02 00 00       	push   $0x285
f010a457:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a45c:	e8 a4 5d ff ff       	call   f0100205 <_panic>
f010a461:	8b 45 08             	mov    0x8(%ebp),%eax
f010a464:	8b 48 78             	mov    0x78(%eax),%ecx
f010a467:	8b 45 08             	mov    0x8(%ebp),%eax
f010a46a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a470:	89 d0                	mov    %edx,%eax
f010a472:	01 c0                	add    %eax,%eax
f010a474:	01 d0                	add    %edx,%eax
f010a476:	c1 e0 03             	shl    $0x3,%eax
f010a479:	01 c8                	add    %ecx,%eax
f010a47b:	8b 40 10             	mov    0x10(%eax),%eax
f010a47e:	85 c0                	test   %eax,%eax
f010a480:	74 3f                	je     f010a4c1 <program_segment_alloc_map_copy_workingset+0x1df>
f010a482:	8b 45 08             	mov    0x8(%ebp),%eax
f010a485:	8b 48 78             	mov    0x78(%eax),%ecx
f010a488:	8b 45 08             	mov    0x8(%ebp),%eax
f010a48b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a491:	89 d0                	mov    %edx,%eax
f010a493:	01 c0                	add    %eax,%eax
f010a495:	01 d0                	add    %edx,%eax
f010a497:	c1 e0 03             	shl    $0x3,%eax
f010a49a:	01 c8                	add    %ecx,%eax
f010a49c:	8b 50 10             	mov    0x10(%eax),%edx
f010a49f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a2:	8b 58 78             	mov    0x78(%eax),%ebx
f010a4a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a8:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a4ae:	89 c8                	mov    %ecx,%eax
f010a4b0:	01 c0                	add    %eax,%eax
f010a4b2:	01 c8                	add    %ecx,%eax
f010a4b4:	c1 e0 03             	shl    $0x3,%eax
f010a4b7:	01 d8                	add    %ebx,%eax
f010a4b9:	8b 40 14             	mov    0x14(%eax),%eax
f010a4bc:	89 42 14             	mov    %eax,0x14(%edx)
f010a4bf:	eb 26                	jmp    f010a4e7 <program_segment_alloc_map_copy_workingset+0x205>
f010a4c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ca:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4d0:	89 d0                	mov    %edx,%eax
f010a4d2:	01 c0                	add    %eax,%eax
f010a4d4:	01 d0                	add    %edx,%eax
f010a4d6:	c1 e0 03             	shl    $0x3,%eax
f010a4d9:	01 c8                	add    %ecx,%eax
f010a4db:	8b 50 14             	mov    0x14(%eax),%edx
f010a4de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e1:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a4e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ea:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4f6:	89 d0                	mov    %edx,%eax
f010a4f8:	01 c0                	add    %eax,%eax
f010a4fa:	01 d0                	add    %edx,%eax
f010a4fc:	c1 e0 03             	shl    $0x3,%eax
f010a4ff:	01 c8                	add    %ecx,%eax
f010a501:	8b 40 14             	mov    0x14(%eax),%eax
f010a504:	85 c0                	test   %eax,%eax
f010a506:	74 3f                	je     f010a547 <program_segment_alloc_map_copy_workingset+0x265>
f010a508:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a50e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a511:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a517:	89 d0                	mov    %edx,%eax
f010a519:	01 c0                	add    %eax,%eax
f010a51b:	01 d0                	add    %edx,%eax
f010a51d:	c1 e0 03             	shl    $0x3,%eax
f010a520:	01 c8                	add    %ecx,%eax
f010a522:	8b 50 14             	mov    0x14(%eax),%edx
f010a525:	8b 45 08             	mov    0x8(%ebp),%eax
f010a528:	8b 58 78             	mov    0x78(%eax),%ebx
f010a52b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a52e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a534:	89 c8                	mov    %ecx,%eax
f010a536:	01 c0                	add    %eax,%eax
f010a538:	01 c8                	add    %ecx,%eax
f010a53a:	c1 e0 03             	shl    $0x3,%eax
f010a53d:	01 d8                	add    %ebx,%eax
f010a53f:	8b 40 10             	mov    0x10(%eax),%eax
f010a542:	89 42 10             	mov    %eax,0x10(%edx)
f010a545:	eb 26                	jmp    f010a56d <program_segment_alloc_map_copy_workingset+0x28b>
f010a547:	8b 45 08             	mov    0x8(%ebp),%eax
f010a54a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a54d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a550:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a556:	89 d0                	mov    %edx,%eax
f010a558:	01 c0                	add    %eax,%eax
f010a55a:	01 d0                	add    %edx,%eax
f010a55c:	c1 e0 03             	shl    $0x3,%eax
f010a55f:	01 c8                	add    %ecx,%eax
f010a561:	8b 50 10             	mov    0x10(%eax),%edx
f010a564:	8b 45 08             	mov    0x8(%ebp),%eax
f010a567:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a56d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a570:	8b 48 78             	mov    0x78(%eax),%ecx
f010a573:	8b 45 08             	mov    0x8(%ebp),%eax
f010a576:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a57c:	89 d0                	mov    %edx,%eax
f010a57e:	01 c0                	add    %eax,%eax
f010a580:	01 d0                	add    %edx,%eax
f010a582:	c1 e0 03             	shl    $0x3,%eax
f010a585:	01 c8                	add    %ecx,%eax
f010a587:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a58e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a591:	8b 48 78             	mov    0x78(%eax),%ecx
f010a594:	8b 45 08             	mov    0x8(%ebp),%eax
f010a597:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a59d:	89 d0                	mov    %edx,%eax
f010a59f:	01 c0                	add    %eax,%eax
f010a5a1:	01 d0                	add    %edx,%eax
f010a5a3:	c1 e0 03             	shl    $0x3,%eax
f010a5a6:	01 c8                	add    %ecx,%eax
f010a5a8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a5af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b2:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a5b8:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a5bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5be:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a5c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c7:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a5cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d0:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a5d6:	48                   	dec    %eax
f010a5d7:	39 c2                	cmp    %eax,%edx
f010a5d9:	0f 83 0d 01 00 00    	jae    f010a6ec <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a5df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5ee:	89 d0                	mov    %edx,%eax
f010a5f0:	01 c0                	add    %eax,%eax
f010a5f2:	01 d0                	add    %edx,%eax
f010a5f4:	c1 e0 03             	shl    $0x3,%eax
f010a5f7:	01 c8                	add    %ecx,%eax
f010a5f9:	85 c0                	test   %eax,%eax
f010a5fb:	75 17                	jne    f010a614 <program_segment_alloc_map_copy_workingset+0x332>
f010a5fd:	83 ec 04             	sub    $0x4,%esp
f010a600:	68 2c 6b 13 f0       	push   $0xf0136b2c
f010a605:	68 89 02 00 00       	push   $0x289
f010a60a:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a60f:	e8 f1 5b ff ff       	call   f0100205 <_panic>
f010a614:	8b 45 08             	mov    0x8(%ebp),%eax
f010a617:	8b 48 78             	mov    0x78(%eax),%ecx
f010a61a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a623:	89 d0                	mov    %edx,%eax
f010a625:	01 c0                	add    %eax,%eax
f010a627:	01 d0                	add    %edx,%eax
f010a629:	c1 e0 03             	shl    $0x3,%eax
f010a62c:	01 c8                	add    %ecx,%eax
f010a62e:	8b 55 08             	mov    0x8(%ebp),%edx
f010a631:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a637:	89 50 10             	mov    %edx,0x10(%eax)
f010a63a:	8b 40 10             	mov    0x10(%eax),%eax
f010a63d:	85 c0                	test   %eax,%eax
f010a63f:	74 28                	je     f010a669 <program_segment_alloc_map_copy_workingset+0x387>
f010a641:	8b 45 08             	mov    0x8(%ebp),%eax
f010a644:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a64a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a650:	8b 45 08             	mov    0x8(%ebp),%eax
f010a653:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a659:	89 c8                	mov    %ecx,%eax
f010a65b:	01 c0                	add    %eax,%eax
f010a65d:	01 c8                	add    %ecx,%eax
f010a65f:	c1 e0 03             	shl    $0x3,%eax
f010a662:	01 d8                	add    %ebx,%eax
f010a664:	89 42 14             	mov    %eax,0x14(%edx)
f010a667:	eb 24                	jmp    f010a68d <program_segment_alloc_map_copy_workingset+0x3ab>
f010a669:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a66f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a672:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a678:	89 d0                	mov    %edx,%eax
f010a67a:	01 c0                	add    %eax,%eax
f010a67c:	01 d0                	add    %edx,%eax
f010a67e:	c1 e0 03             	shl    $0x3,%eax
f010a681:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a684:	8b 45 08             	mov    0x8(%ebp),%eax
f010a687:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a68d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a690:	8b 48 78             	mov    0x78(%eax),%ecx
f010a693:	8b 45 08             	mov    0x8(%ebp),%eax
f010a696:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a69c:	89 d0                	mov    %edx,%eax
f010a69e:	01 c0                	add    %eax,%eax
f010a6a0:	01 d0                	add    %edx,%eax
f010a6a2:	c1 e0 03             	shl    $0x3,%eax
f010a6a5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ab:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a6b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ba:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6c0:	89 d0                	mov    %edx,%eax
f010a6c2:	01 c0                	add    %eax,%eax
f010a6c4:	01 d0                	add    %edx,%eax
f010a6c6:	c1 e0 03             	shl    $0x3,%eax
f010a6c9:	01 c8                	add    %ecx,%eax
f010a6cb:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d5:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a6db:	8d 50 01             	lea    0x1(%eax),%edx
f010a6de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e1:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a6e7:	e9 08 01 00 00       	jmp    f010a7f4 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a6ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ef:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6fb:	89 d0                	mov    %edx,%eax
f010a6fd:	01 c0                	add    %eax,%eax
f010a6ff:	01 d0                	add    %edx,%eax
f010a701:	c1 e0 03             	shl    $0x3,%eax
f010a704:	01 c8                	add    %ecx,%eax
f010a706:	85 c0                	test   %eax,%eax
f010a708:	75 17                	jne    f010a721 <program_segment_alloc_map_copy_workingset+0x43f>
f010a70a:	83 ec 04             	sub    $0x4,%esp
f010a70d:	68 2c 6b 13 f0       	push   $0xf0136b2c
f010a712:	68 8e 02 00 00       	push   $0x28e
f010a717:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a71c:	e8 e4 5a ff ff       	call   f0100205 <_panic>
f010a721:	8b 45 08             	mov    0x8(%ebp),%eax
f010a724:	8b 48 78             	mov    0x78(%eax),%ecx
f010a727:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a730:	89 d0                	mov    %edx,%eax
f010a732:	01 c0                	add    %eax,%eax
f010a734:	01 d0                	add    %edx,%eax
f010a736:	c1 e0 03             	shl    $0x3,%eax
f010a739:	01 c8                	add    %ecx,%eax
f010a73b:	8b 55 08             	mov    0x8(%ebp),%edx
f010a73e:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a744:	89 50 10             	mov    %edx,0x10(%eax)
f010a747:	8b 40 10             	mov    0x10(%eax),%eax
f010a74a:	85 c0                	test   %eax,%eax
f010a74c:	74 28                	je     f010a776 <program_segment_alloc_map_copy_workingset+0x494>
f010a74e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a751:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a757:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75a:	8b 58 78             	mov    0x78(%eax),%ebx
f010a75d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a760:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a766:	89 c8                	mov    %ecx,%eax
f010a768:	01 c0                	add    %eax,%eax
f010a76a:	01 c8                	add    %ecx,%eax
f010a76c:	c1 e0 03             	shl    $0x3,%eax
f010a76f:	01 d8                	add    %ebx,%eax
f010a771:	89 42 14             	mov    %eax,0x14(%edx)
f010a774:	eb 24                	jmp    f010a79a <program_segment_alloc_map_copy_workingset+0x4b8>
f010a776:	8b 45 08             	mov    0x8(%ebp),%eax
f010a779:	8b 48 78             	mov    0x78(%eax),%ecx
f010a77c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a785:	89 d0                	mov    %edx,%eax
f010a787:	01 c0                	add    %eax,%eax
f010a789:	01 d0                	add    %edx,%eax
f010a78b:	c1 e0 03             	shl    $0x3,%eax
f010a78e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a791:	8b 45 08             	mov    0x8(%ebp),%eax
f010a794:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a79a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7a9:	89 d0                	mov    %edx,%eax
f010a7ab:	01 c0                	add    %eax,%eax
f010a7ad:	01 d0                	add    %edx,%eax
f010a7af:	c1 e0 03             	shl    $0x3,%eax
f010a7b2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a7b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b8:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a7be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7cd:	89 d0                	mov    %edx,%eax
f010a7cf:	01 c0                	add    %eax,%eax
f010a7d1:	01 d0                	add    %edx,%eax
f010a7d3:	c1 e0 03             	shl    $0x3,%eax
f010a7d6:	01 c8                	add    %ecx,%eax
f010a7d8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a7df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7e2:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a7e8:	8d 50 01             	lea    0x1(%eax),%edx
f010a7eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ee:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a7f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f7:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a7fd:	8d 50 01             	lea    0x1(%eax),%edx
f010a800:	8b 45 08             	mov    0x8(%ebp),%eax
f010a803:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a809:	8b 45 08             	mov    0x8(%ebp),%eax
f010a80c:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a812:	8b 55 08             	mov    0x8(%ebp),%edx
f010a815:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a818:	ba 00 00 00 00       	mov    $0x0,%edx
f010a81d:	f7 f1                	div    %ecx
f010a81f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a822:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a828:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a82b:	c1 e8 16             	shr    $0x16,%eax
f010a82e:	89 c2                	mov    %eax,%edx
f010a830:	8b 45 18             	mov    0x18(%ebp),%eax
f010a833:	8b 00                	mov    (%eax),%eax
f010a835:	39 c2                	cmp    %eax,%edx
f010a837:	0f 84 cf 00 00 00    	je     f010a90c <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a83d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a840:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a846:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a849:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a84c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a84f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a854:	89 c1                	mov    %eax,%ecx
f010a856:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a859:	89 d0                	mov    %edx,%eax
f010a85b:	01 c0                	add    %eax,%eax
f010a85d:	01 d0                	add    %edx,%eax
f010a85f:	c1 e0 03             	shl    $0x3,%eax
f010a862:	01 d8                	add    %ebx,%eax
f010a864:	83 c0 7c             	add    $0x7c,%eax
f010a867:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a869:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86c:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a872:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a875:	89 d0                	mov    %edx,%eax
f010a877:	01 c0                	add    %eax,%eax
f010a879:	01 d0                	add    %edx,%eax
f010a87b:	c1 e0 03             	shl    $0x3,%eax
f010a87e:	01 c8                	add    %ecx,%eax
f010a880:	83 e8 80             	sub    $0xffffff80,%eax
f010a883:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a886:	8b 45 08             	mov    0x8(%ebp),%eax
f010a889:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a88f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a892:	89 d0                	mov    %edx,%eax
f010a894:	01 c0                	add    %eax,%eax
f010a896:	01 d0                	add    %edx,%eax
f010a898:	c1 e0 03             	shl    $0x3,%eax
f010a89b:	01 c8                	add    %ecx,%eax
f010a89d:	05 84 00 00 00       	add    $0x84,%eax
f010a8a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a8a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ab:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a8b1:	8d 50 01             	lea    0x1(%eax),%edx
f010a8b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b7:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a8c6:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a8cb:	ba 00 00 00 00       	mov    $0x0,%edx
f010a8d0:	f7 f1                	div    %ecx
f010a8d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d5:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a8db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8de:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a8e4:	85 c0                	test   %eax,%eax
f010a8e6:	75 17                	jne    f010a8ff <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a8e8:	83 ec 04             	sub    $0x4,%esp
f010a8eb:	68 a4 6b 13 f0       	push   $0xf0136ba4
f010a8f0:	68 9e 02 00 00       	push   $0x29e
f010a8f5:	68 f1 6a 13 f0       	push   $0xf0136af1
f010a8fa:	e8 06 59 ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a8ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a902:	c1 e8 16             	shr    $0x16,%eax
f010a905:	89 c2                	mov    %eax,%edx
f010a907:	8b 45 18             	mov    0x18(%ebp),%eax
f010a90a:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a90c:	8b 45 10             	mov    0x10(%ebp),%eax
f010a90f:	8b 00                	mov    (%eax),%eax
f010a911:	8d 50 01             	lea    0x1(%eax),%edx
f010a914:	8b 45 10             	mov    0x10(%ebp),%eax
f010a917:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a919:	ff 45 f0             	incl   -0x10(%ebp)
f010a91c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a923:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a926:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a929:	73 0c                	jae    f010a937 <program_segment_alloc_map_copy_workingset+0x655>
f010a92b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a92e:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a931:	0f 82 5a fa ff ff    	jb     f010a391 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a937:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a93a:	8b 00                	mov    (%eax),%eax
f010a93c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a93f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a942:	8b 40 0c             	mov    0xc(%eax),%eax
f010a945:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a948:	eb 10                	jmp    f010a95a <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a94a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a94d:	8a 10                	mov    (%eax),%dl
f010a94f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a952:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a954:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a957:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a95a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a95d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a960:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a963:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a968:	89 c2                	mov    %eax,%edx
f010a96a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a96d:	8b 00                	mov    (%eax),%eax
f010a96f:	c1 e0 0c             	shl    $0xc,%eax
f010a972:	01 c2                	add    %eax,%edx
f010a974:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a977:	39 c2                	cmp    %eax,%edx
f010a979:	76 1d                	jbe    f010a998 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a97b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a97e:	8b 50 04             	mov    0x4(%eax),%edx
f010a981:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a984:	01 c2                	add    %eax,%edx
f010a986:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a989:	39 c2                	cmp    %eax,%edx
f010a98b:	77 bd                	ja     f010a94a <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a98d:	eb 09                	jmp    f010a998 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a98f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a992:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a995:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a998:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a99b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a99e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a9a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a9a6:	89 c2                	mov    %eax,%edx
f010a9a8:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9ab:	8b 00                	mov    (%eax),%eax
f010a9ad:	c1 e0 0c             	shl    $0xc,%eax
f010a9b0:	01 c2                	add    %eax,%edx
f010a9b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9b5:	39 c2                	cmp    %eax,%edx
f010a9b7:	77 d6                	ja     f010a98f <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a9b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a9be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a9c1:	c9                   	leave  
f010a9c2:	c3                   	ret    

f010a9c3 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a9c3:	55                   	push   %ebp
f010a9c4:	89 e5                	mov    %esp,%ebp
f010a9c6:	53                   	push   %ebx
f010a9c7:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a9ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a9d0:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a9d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d6:	8b 55 10             	mov    0x10(%ebp),%edx
f010a9d9:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a9dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a9e3:	eb 17                	jmp    f010a9fc <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a9e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a9eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9ee:	c1 e2 02             	shl    $0x2,%edx
f010a9f1:	01 d0                	add    %edx,%eax
f010a9f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a9f9:	ff 45 f4             	incl   -0xc(%ebp)
f010a9fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9ff:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010aa04:	76 df                	jbe    f010a9e5 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aa06:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010aa0d:	eb 22                	jmp    f010aa31 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010aa0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa12:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa18:	c1 e2 02             	shl    $0x2,%edx
f010aa1b:	01 c2                	add    %eax,%edx
f010aa1d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f010aa22:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010aa25:	c1 e1 02             	shl    $0x2,%ecx
f010aa28:	01 c8                	add    %ecx,%eax
f010aa2a:	8b 00                	mov    (%eax),%eax
f010aa2c:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aa2e:	ff 45 f4             	incl   -0xc(%ebp)
f010aa31:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010aa38:	7e d5                	jle    f010aa0f <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010aa3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3d:	8b 40 74             	mov    0x74(%eax),%eax
f010aa40:	83 ec 08             	sub    $0x8,%esp
f010aa43:	50                   	push   %eax
f010aa44:	ff 75 08             	pushl  0x8(%ebp)
f010aa47:	e8 13 f8 ff ff       	call   f010a25f <create_user_page_WS>
f010aa4c:	83 c4 10             	add    $0x10,%esp
f010aa4f:	89 c2                	mov    %eax,%edx
f010aa51:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa54:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010aa57:	83 ec 0c             	sub    $0xc,%esp
f010aa5a:	ff 75 08             	pushl  0x8(%ebp)
f010aa5d:	e8 f3 04 00 00       	call   f010af55 <share_pws_at_user_space>
f010aa62:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010aa65:	83 ec 0c             	sub    $0xc,%esp
f010aa68:	6a 02                	push   $0x2
f010aa6a:	e8 e8 36 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f010aa6f:	83 c4 10             	add    $0x10,%esp
f010aa72:	85 c0                	test   %eax,%eax
f010aa74:	0f 84 04 01 00 00    	je     f010ab7e <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010aa7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010aa81:	e9 e7 00 00 00       	jmp    f010ab6d <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010aa86:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa89:	8b 48 78             	mov    0x78(%eax),%ecx
f010aa8c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa8f:	89 d0                	mov    %edx,%eax
f010aa91:	01 c0                	add    %eax,%eax
f010aa93:	01 d0                	add    %edx,%eax
f010aa95:	c1 e0 03             	shl    $0x3,%eax
f010aa98:	01 c8                	add    %ecx,%eax
f010aa9a:	85 c0                	test   %eax,%eax
f010aa9c:	75 17                	jne    f010aab5 <initialize_environment+0xf2>
f010aa9e:	83 ec 04             	sub    $0x4,%esp
f010aaa1:	68 2c 6b 13 f0       	push   $0xf0136b2c
f010aaa6:	68 fc 02 00 00       	push   $0x2fc
f010aaab:	68 f1 6a 13 f0       	push   $0xf0136af1
f010aab0:	e8 50 57 ff ff       	call   f0100205 <_panic>
f010aab5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab8:	8b 48 78             	mov    0x78(%eax),%ecx
f010aabb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aabe:	89 d0                	mov    %edx,%eax
f010aac0:	01 c0                	add    %eax,%eax
f010aac2:	01 d0                	add    %edx,%eax
f010aac4:	c1 e0 03             	shl    $0x3,%eax
f010aac7:	01 c8                	add    %ecx,%eax
f010aac9:	8b 55 08             	mov    0x8(%ebp),%edx
f010aacc:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010aad2:	89 50 10             	mov    %edx,0x10(%eax)
f010aad5:	8b 40 10             	mov    0x10(%eax),%eax
f010aad8:	85 c0                	test   %eax,%eax
f010aada:	74 22                	je     f010aafe <initialize_environment+0x13b>
f010aadc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadf:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae8:	8b 58 78             	mov    0x78(%eax),%ebx
f010aaeb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010aaee:	89 c8                	mov    %ecx,%eax
f010aaf0:	01 c0                	add    %eax,%eax
f010aaf2:	01 c8                	add    %ecx,%eax
f010aaf4:	c1 e0 03             	shl    $0x3,%eax
f010aaf7:	01 d8                	add    %ebx,%eax
f010aaf9:	89 42 14             	mov    %eax,0x14(%edx)
f010aafc:	eb 1e                	jmp    f010ab1c <initialize_environment+0x159>
f010aafe:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab01:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab04:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab07:	89 d0                	mov    %edx,%eax
f010ab09:	01 c0                	add    %eax,%eax
f010ab0b:	01 d0                	add    %edx,%eax
f010ab0d:	c1 e0 03             	shl    $0x3,%eax
f010ab10:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ab13:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab16:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010ab1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab1f:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab22:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab25:	89 d0                	mov    %edx,%eax
f010ab27:	01 c0                	add    %eax,%eax
f010ab29:	01 d0                	add    %edx,%eax
f010ab2b:	c1 e0 03             	shl    $0x3,%eax
f010ab2e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ab31:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab34:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010ab3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab3d:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab43:	89 d0                	mov    %edx,%eax
f010ab45:	01 c0                	add    %eax,%eax
f010ab47:	01 d0                	add    %edx,%eax
f010ab49:	c1 e0 03             	shl    $0x3,%eax
f010ab4c:	01 c8                	add    %ecx,%eax
f010ab4e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ab55:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab58:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010ab5e:	8d 50 01             	lea    0x1(%eax),%edx
f010ab61:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab64:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ab6a:	ff 45 f0             	incl   -0x10(%ebp)
f010ab6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab70:	8b 50 74             	mov    0x74(%eax),%edx
f010ab73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab76:	39 c2                	cmp    %eax,%edx
f010ab78:	0f 87 08 ff ff ff    	ja     f010aa86 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ab7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab85:	eb 50                	jmp    f010abd7 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010ab87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8a:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab90:	89 d0                	mov    %edx,%eax
f010ab92:	01 c0                	add    %eax,%eax
f010ab94:	01 d0                	add    %edx,%eax
f010ab96:	c1 e0 03             	shl    $0x3,%eax
f010ab99:	01 c8                	add    %ecx,%eax
f010ab9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010aba1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba4:	8b 48 78             	mov    0x78(%eax),%ecx
f010aba7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abaa:	89 d0                	mov    %edx,%eax
f010abac:	01 c0                	add    %eax,%eax
f010abae:	01 d0                	add    %edx,%eax
f010abb0:	c1 e0 03             	shl    $0x3,%eax
f010abb3:	01 c8                	add    %ecx,%eax
f010abb5:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010abb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbc:	8b 48 78             	mov    0x78(%eax),%ecx
f010abbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abc2:	89 d0                	mov    %edx,%eax
f010abc4:	01 c0                	add    %eax,%eax
f010abc6:	01 d0                	add    %edx,%eax
f010abc8:	c1 e0 03             	shl    $0x3,%eax
f010abcb:	01 c8                	add    %ecx,%eax
f010abcd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010abd4:	ff 45 f4             	incl   -0xc(%ebp)
f010abd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abda:	8b 50 74             	mov    0x74(%eax),%edx
f010abdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abe0:	39 c2                	cmp    %eax,%edx
f010abe2:	77 a3                	ja     f010ab87 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010abe4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe7:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010abee:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010abf1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010abf8:	eb 50                	jmp    f010ac4a <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010abfa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010abfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac00:	89 d0                	mov    %edx,%eax
f010ac02:	01 c0                	add    %eax,%eax
f010ac04:	01 d0                	add    %edx,%eax
f010ac06:	c1 e0 03             	shl    $0x3,%eax
f010ac09:	01 c8                	add    %ecx,%eax
f010ac0b:	83 c0 7c             	add    $0x7c,%eax
f010ac0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010ac14:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac1a:	89 d0                	mov    %edx,%eax
f010ac1c:	01 c0                	add    %eax,%eax
f010ac1e:	01 d0                	add    %edx,%eax
f010ac20:	c1 e0 03             	shl    $0x3,%eax
f010ac23:	01 c8                	add    %ecx,%eax
f010ac25:	83 e8 80             	sub    $0xffffff80,%eax
f010ac28:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ac2b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac31:	89 d0                	mov    %edx,%eax
f010ac33:	01 c0                	add    %eax,%eax
f010ac35:	01 d0                	add    %edx,%eax
f010ac37:	c1 e0 03             	shl    $0x3,%eax
f010ac3a:	01 c8                	add    %ecx,%eax
f010ac3c:	05 84 00 00 00       	add    $0x84,%eax
f010ac41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ac47:	ff 45 f4             	incl   -0xc(%ebp)
f010ac4a:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010ac4e:	7e aa                	jle    f010abfa <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010ac50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac53:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ac5a:	00 00 00 

	e->pageFaultsCounter=0;
f010ac5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac60:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ac67:	00 00 00 
	e->tableFaultsCounter=0;
f010ac6a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6d:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ac74:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ac77:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac7a:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ac81:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ac84:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac87:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ac8e:	00 00 00 

	e->nModifiedPages=0;
f010ac91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac94:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ac9b:	00 00 00 
	e->nNotModifiedPages=0;
f010ac9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca1:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010aca8:	00 00 00 
	e->nClocks = 0;
f010acab:	8b 45 08             	mov    0x8(%ebp),%eax
f010acae:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010acb5:	00 00 00 

	//2020
	e->nPageIn = 0;
f010acb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbb:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010acc2:	00 00 00 
	e->nPageOut = 0;
f010acc5:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc8:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010accf:	00 00 00 
	e->nNewPageAdded = 0;
f010acd2:	8b 45 08             	mov    0x8(%ebp),%eax
f010acd5:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010acdc:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010acdf:	83 ec 0c             	sub    $0xc,%esp
f010ace2:	ff 75 08             	pushl  0x8(%ebp)
f010ace5:	e8 09 00 00 00       	call   f010acf3 <complete_environment_initialization>
f010acea:	83 c4 10             	add    $0x10,%esp
}
f010aced:	90                   	nop
f010acee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010acf1:	c9                   	leave  
f010acf2:	c3                   	ret    

f010acf3 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010acf3:	55                   	push   %ebp
f010acf4:	89 e5                	mov    %esp,%ebp
f010acf6:	53                   	push   %ebx
f010acf7:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010acfa:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ad00:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010ad06:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad09:	8b 40 60             	mov    0x60(%eax),%eax
f010ad0c:	83 c8 03             	or     $0x3,%eax
f010ad0f:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010ad11:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad14:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ad17:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010ad1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad20:	8b 40 60             	mov    0x60(%eax),%eax
f010ad23:	83 c8 05             	or     $0x5,%eax
f010ad26:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010ad28:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010ad32:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad35:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ad3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3f:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010ad46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad49:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010ad50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad53:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010ad56:	83 ec 0c             	sub    $0xc,%esp
f010ad59:	68 b1 02 00 00       	push   $0x2b1
f010ad5e:	e8 f1 56 02 00       	call   f0130454 <log2_ceil>
f010ad63:	83 c4 10             	add    $0x10,%esp
f010ad66:	ba 01 00 00 00       	mov    $0x1,%edx
f010ad6b:	88 c1                	mov    %al,%cl
f010ad6d:	d3 e2                	shl    %cl,%edx
f010ad6f:	89 d0                	mov    %edx,%eax
f010ad71:	01 d8                	add    %ebx,%eax
f010ad73:	89 c3                	mov    %eax,%ebx
f010ad75:	83 ec 0c             	sub    $0xc,%esp
f010ad78:	68 b1 02 00 00       	push   $0x2b1
f010ad7d:	e8 9d 56 02 00       	call   f013041f <nearest_pow2_ceil>
f010ad82:	83 c4 10             	add    $0x10,%esp
f010ad85:	f7 d8                	neg    %eax
f010ad87:	21 d8                	and    %ebx,%eax
f010ad89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ad8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad90:	7f 1e                	jg     f010adb0 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010ad92:	83 ec 0c             	sub    $0xc,%esp
f010ad95:	68 b1 02 00 00       	push   $0x2b1
f010ad9a:	e8 b5 56 02 00       	call   f0130454 <log2_ceil>
f010ad9f:	83 c4 10             	add    $0x10,%esp
f010ada2:	ba 01 00 00 00       	mov    $0x1,%edx
f010ada7:	88 c1                	mov    %al,%cl
f010ada9:	d3 e2                	shl    %cl,%edx
f010adab:	89 d0                	mov    %edx,%eax
f010adad:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010adb0:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb3:	8b 15 f0 a3 89 f0    	mov    0xf089a3f0,%edx
f010adb9:	29 d0                	sub    %edx,%eax
f010adbb:	c1 f8 04             	sar    $0x4,%eax
f010adbe:	89 c2                	mov    %eax,%edx
f010adc0:	89 d0                	mov    %edx,%eax
f010adc2:	c1 e0 03             	shl    $0x3,%eax
f010adc5:	01 d0                	add    %edx,%eax
f010adc7:	01 c0                	add    %eax,%eax
f010adc9:	01 d0                	add    %edx,%eax
f010adcb:	c1 e0 03             	shl    $0x3,%eax
f010adce:	01 d0                	add    %edx,%eax
f010add0:	89 c1                	mov    %eax,%ecx
f010add2:	c1 e1 08             	shl    $0x8,%ecx
f010add5:	01 c8                	add    %ecx,%eax
f010add7:	01 c0                	add    %eax,%eax
f010add9:	01 d0                	add    %edx,%eax
f010addb:	01 c0                	add    %eax,%eax
f010addd:	01 d0                	add    %edx,%eax
f010addf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ade6:	01 d0                	add    %edx,%eax
f010ade8:	89 c2                	mov    %eax,%edx
f010adea:	c1 e2 09             	shl    $0x9,%edx
f010aded:	29 c2                	sub    %eax,%edx
f010adef:	89 d0                	mov    %edx,%eax
f010adf1:	f7 d8                	neg    %eax
f010adf3:	0b 45 f4             	or     -0xc(%ebp),%eax
f010adf6:	89 c2                	mov    %eax,%edx
f010adf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adfb:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010adfe:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ae03:	85 c0                	test   %eax,%eax
f010ae05:	75 0c                	jne    f010ae13 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010ae07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0a:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010ae11:	eb 0e                	jmp    f010ae21 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010ae13:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ae18:	8b 50 4c             	mov    0x4c(%eax),%edx
f010ae1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae1e:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ae21:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae24:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010ae2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae2e:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010ae35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae38:	83 ec 04             	sub    $0x4,%esp
f010ae3b:	6a 44                	push   $0x44
f010ae3d:	6a 00                	push   $0x0
f010ae3f:	50                   	push   %eax
f010ae40:	e8 56 6a 02 00       	call   f013189b <memset>
f010ae45:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010ae48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae4b:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010ae51:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae54:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010ae5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5d:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010ae63:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae66:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010ae6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae70:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010ae76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae79:	8b 40 38             	mov    0x38(%eax),%eax
f010ae7c:	80 cc 02             	or     $0x2,%ah
f010ae7f:	89 c2                	mov    %eax,%edx
f010ae81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae84:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ae87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ae8b:	75 17                	jne    f010aea4 <complete_environment_initialization+0x1b1>
f010ae8d:	83 ec 04             	sub    $0x4,%esp
f010ae90:	68 0e 6b 13 f0       	push   $0xf0136b0e
f010ae95:	68 60 03 00 00       	push   $0x360
f010ae9a:	68 f1 6a 13 f0       	push   $0xf0136af1
f010ae9f:	e8 61 53 ff ff       	call   f0100205 <_panic>
f010aea4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea7:	8b 40 44             	mov    0x44(%eax),%eax
f010aeaa:	85 c0                	test   %eax,%eax
f010aeac:	74 11                	je     f010aebf <complete_environment_initialization+0x1cc>
f010aeae:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb1:	8b 40 44             	mov    0x44(%eax),%eax
f010aeb4:	8b 55 08             	mov    0x8(%ebp),%edx
f010aeb7:	8b 52 48             	mov    0x48(%edx),%edx
f010aeba:	89 50 48             	mov    %edx,0x48(%eax)
f010aebd:	eb 0b                	jmp    f010aeca <complete_environment_initialization+0x1d7>
f010aebf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec2:	8b 40 48             	mov    0x48(%eax),%eax
f010aec5:	a3 fc a3 89 f0       	mov    %eax,0xf089a3fc
f010aeca:	8b 45 08             	mov    0x8(%ebp),%eax
f010aecd:	8b 40 48             	mov    0x48(%eax),%eax
f010aed0:	85 c0                	test   %eax,%eax
f010aed2:	74 11                	je     f010aee5 <complete_environment_initialization+0x1f2>
f010aed4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed7:	8b 40 48             	mov    0x48(%eax),%eax
f010aeda:	8b 55 08             	mov    0x8(%ebp),%edx
f010aedd:	8b 52 44             	mov    0x44(%edx),%edx
f010aee0:	89 50 44             	mov    %edx,0x44(%eax)
f010aee3:	eb 0b                	jmp    f010aef0 <complete_environment_initialization+0x1fd>
f010aee5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee8:	8b 40 44             	mov    0x44(%eax),%eax
f010aeeb:	a3 f8 a3 89 f0       	mov    %eax,0xf089a3f8
f010aef0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aefa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010af04:	a1 04 a4 89 f0       	mov    0xf089a404,%eax
f010af09:	48                   	dec    %eax
f010af0a:	a3 04 a4 89 f0       	mov    %eax,0xf089a404
	return ;
f010af0f:	90                   	nop
}
f010af10:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010af13:	c9                   	leave  
f010af14:	c3                   	ret    

f010af15 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010af15:	55                   	push   %ebp
f010af16:	89 e5                	mov    %esp,%ebp
f010af18:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010af1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010af21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af24:	8b 00                	mov    (%eax),%eax
f010af26:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010af2b:	74 17                	je     f010af44 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010af2d:	83 ec 04             	sub    $0x4,%esp
f010af30:	68 47 6c 13 f0       	push   $0xf0136c47
f010af35:	68 6c 03 00 00       	push   $0x36c
f010af3a:	68 f1 6a 13 f0       	push   $0xf0136af1
f010af3f:	e8 c1 52 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010af44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af47:	8b 40 18             	mov    0x18(%eax),%eax
f010af4a:	89 c2                	mov    %eax,%edx
f010af4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4f:	89 50 30             	mov    %edx,0x30(%eax)
}
f010af52:	90                   	nop
f010af53:	c9                   	leave  
f010af54:	c3                   	ret    

f010af55 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010af55:	55                   	push   %ebp
f010af56:	89 e5                	mov    %esp,%ebp
f010af58:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010af5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af5e:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010af65:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010af68:	8b 45 08             	mov    0x8(%ebp),%eax
f010af6b:	8b 40 78             	mov    0x78(%eax),%eax
f010af6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010af71:	8b 45 08             	mov    0x8(%ebp),%eax
f010af74:	8b 50 74             	mov    0x74(%eax),%edx
f010af77:	89 d0                	mov    %edx,%eax
f010af79:	01 c0                	add    %eax,%eax
f010af7b:	01 d0                	add    %edx,%eax
f010af7d:	c1 e0 03             	shl    $0x3,%eax
f010af80:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010af83:	8b 45 08             	mov    0x8(%ebp),%eax
f010af86:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010af8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010af8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af92:	8b 40 78             	mov    0x78(%eax),%eax
f010af95:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010af98:	eb 71                	jmp    f010b00b <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010af9a:	83 ec 0c             	sub    $0xc,%esp
f010af9d:	ff 75 f4             	pushl  -0xc(%ebp)
f010afa0:	e8 05 ce ff ff       	call   f0107daa <kheap_physical_address>
f010afa5:	83 c4 10             	add    $0x10,%esp
f010afa8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010afab:	8b 45 08             	mov    0x8(%ebp),%eax
f010afae:	8b 40 5c             	mov    0x5c(%eax),%eax
f010afb1:	83 ec 04             	sub    $0x4,%esp
f010afb4:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010afb7:	52                   	push   %edx
f010afb8:	ff 75 f0             	pushl  -0x10(%ebp)
f010afbb:	50                   	push   %eax
f010afbc:	e8 f0 ba ff ff       	call   f0106ab1 <get_page_table>
f010afc1:	83 c4 10             	add    $0x10,%esp
f010afc4:	83 f8 01             	cmp    $0x1,%eax
f010afc7:	75 18                	jne    f010afe1 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010afc9:	8b 45 08             	mov    0x8(%ebp),%eax
f010afcc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010afcf:	83 ec 08             	sub    $0x8,%esp
f010afd2:	ff 75 f0             	pushl  -0x10(%ebp)
f010afd5:	50                   	push   %eax
f010afd6:	e8 2c bc ff ff       	call   f0106c07 <create_page_table>
f010afdb:	83 c4 10             	add    $0x10,%esp
f010afde:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010afe1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010afe4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010afe7:	c1 ea 0c             	shr    $0xc,%edx
f010afea:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010aff0:	c1 e2 02             	shl    $0x2,%edx
f010aff3:	01 d0                	add    %edx,%eax
f010aff5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010aff8:	83 ca 05             	or     $0x5,%edx
f010affb:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010affd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b004:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010b00b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b00e:	8b 40 78             	mov    0x78(%eax),%eax
f010b011:	89 c2                	mov    %eax,%edx
f010b013:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b016:	01 d0                	add    %edx,%eax
f010b018:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b01b:	0f 87 79 ff ff ff    	ja     f010af9a <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010b021:	90                   	nop
f010b022:	c9                   	leave  
f010b023:	c3                   	ret    

f010b024 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010b024:	55                   	push   %ebp
f010b025:	89 e5                	mov    %esp,%ebp
f010b027:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b02a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b02d:	8b 50 74             	mov    0x74(%eax),%edx
f010b030:	89 d0                	mov    %edx,%eax
f010b032:	01 c0                	add    %eax,%eax
f010b034:	01 d0                	add    %edx,%eax
f010b036:	c1 e0 03             	shl    $0x3,%eax
f010b039:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010b03c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03f:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b045:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010b048:	8b 45 08             	mov    0x8(%ebp),%eax
f010b04b:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b051:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b054:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b057:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b05c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b05f:	eb 46                	jmp    f010b0a7 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010b061:	8b 45 08             	mov    0x8(%ebp),%eax
f010b064:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b067:	83 ec 04             	sub    $0x4,%esp
f010b06a:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010b06d:	52                   	push   %edx
f010b06e:	ff 75 f4             	pushl  -0xc(%ebp)
f010b071:	50                   	push   %eax
f010b072:	e8 3a ba ff ff       	call   f0106ab1 <get_page_table>
f010b077:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010b07a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b07d:	83 ec 0c             	sub    $0xc,%esp
f010b080:	50                   	push   %eax
f010b081:	e8 d1 cb ff ff       	call   f0107c57 <kfree>
f010b086:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010b089:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b08f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b092:	c1 ea 16             	shr    $0x16,%edx
f010b095:	c1 e2 02             	shl    $0x2,%edx
f010b098:	01 d0                	add    %edx,%eax
f010b09a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b0a0:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010b0a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0aa:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b0b0:	89 c2                	mov    %eax,%edx
f010b0b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b0b5:	01 d0                	add    %edx,%eax
f010b0b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b0ba:	77 a5                	ja     f010b061 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b0bc:	0f 20 d8             	mov    %cr3,%eax
f010b0bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b0c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b0c5:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010b0c8:	90                   	nop
f010b0c9:	c9                   	leave  
f010b0ca:	c3                   	ret    

f010b0cb <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b0cb:	55                   	push   %ebp
f010b0cc:	89 e5                	mov    %esp,%ebp
f010b0ce:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b0d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d4:	8b 40 10             	mov    0x10(%eax),%eax
f010b0d7:	8d 48 01             	lea    0x1(%eax),%ecx
f010b0da:	8b 55 08             	mov    0x8(%ebp),%edx
f010b0dd:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b0e0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b0e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b0e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b0ec:	8b 00                	mov    (%eax),%eax
f010b0ee:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b0f3:	74 17                	je     f010b10c <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b0f5:	83 ec 04             	sub    $0x4,%esp
f010b0f8:	68 47 6c 13 f0       	push   $0xf0136c47
f010b0fd:	68 b6 03 00 00       	push   $0x3b6
f010b102:	68 f1 6a 13 f0       	push   $0xf0136af1
f010b107:	e8 f9 50 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b10c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b10f:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b112:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b115:	01 d0                	add    %edx,%eax
f010b117:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b11a:	eb 0f                	jmp    f010b12b <PROGRAM_SEGMENT_NEXT+0x60>
f010b11c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b11f:	8b 40 10             	mov    0x10(%eax),%eax
f010b122:	8d 50 01             	lea    0x1(%eax),%edx
f010b125:	8b 45 08             	mov    0x8(%ebp),%eax
f010b128:	89 50 10             	mov    %edx,0x10(%eax)
f010b12b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b12e:	8b 40 10             	mov    0x10(%eax),%eax
f010b131:	c1 e0 05             	shl    $0x5,%eax
f010b134:	89 c2                	mov    %eax,%edx
f010b136:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b139:	01 d0                	add    %edx,%eax
f010b13b:	8b 00                	mov    (%eax),%eax
f010b13d:	83 f8 01             	cmp    $0x1,%eax
f010b140:	74 13                	je     f010b155 <PROGRAM_SEGMENT_NEXT+0x8a>
f010b142:	8b 45 08             	mov    0x8(%ebp),%eax
f010b145:	8b 50 10             	mov    0x10(%eax),%edx
f010b148:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b14b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b14e:	0f b7 c0             	movzwl %ax,%eax
f010b151:	39 c2                	cmp    %eax,%edx
f010b153:	72 c7                	jb     f010b11c <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b155:	8b 45 08             	mov    0x8(%ebp),%eax
f010b158:	8b 40 10             	mov    0x10(%eax),%eax
f010b15b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b15e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b161:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b164:	0f b7 c0             	movzwl %ax,%eax
f010b167:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b16a:	7e 63                	jle    f010b1cf <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b16c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b16f:	c1 e0 05             	shl    $0x5,%eax
f010b172:	89 c2                	mov    %eax,%edx
f010b174:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b177:	01 d0                	add    %edx,%eax
f010b179:	8b 50 04             	mov    0x4(%eax),%edx
f010b17c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b17f:	01 c2                	add    %eax,%edx
f010b181:	8b 45 08             	mov    0x8(%ebp),%eax
f010b184:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b186:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b189:	c1 e0 05             	shl    $0x5,%eax
f010b18c:	89 c2                	mov    %eax,%edx
f010b18e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b191:	01 d0                	add    %edx,%eax
f010b193:	8b 50 14             	mov    0x14(%eax),%edx
f010b196:	8b 45 08             	mov    0x8(%ebp),%eax
f010b199:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b19c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b19f:	c1 e0 05             	shl    $0x5,%eax
f010b1a2:	89 c2                	mov    %eax,%edx
f010b1a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b1a7:	01 d0                	add    %edx,%eax
f010b1a9:	8b 50 10             	mov    0x10(%eax),%edx
f010b1ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1af:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b1b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1b5:	c1 e0 05             	shl    $0x5,%eax
f010b1b8:	89 c2                	mov    %eax,%edx
f010b1ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b1bd:	01 d0                	add    %edx,%eax
f010b1bf:	8b 40 08             	mov    0x8(%eax),%eax
f010b1c2:	89 c2                	mov    %eax,%edx
f010b1c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c7:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1cd:	eb 05                	jmp    f010b1d4 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b1cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b1d4:	c9                   	leave  
f010b1d5:	c3                   	ret    

f010b1d6 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b1d6:	55                   	push   %ebp
f010b1d7:	89 e5                	mov    %esp,%ebp
f010b1d9:	57                   	push   %edi
f010b1da:	56                   	push   %esi
f010b1db:	53                   	push   %ebx
f010b1dc:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b1df:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b1e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b1ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b1ef:	8b 00                	mov    (%eax),%eax
f010b1f1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b1f6:	74 17                	je     f010b20f <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b1f8:	83 ec 04             	sub    $0x4,%esp
f010b1fb:	68 47 6c 13 f0       	push   $0xf0136c47
f010b200:	68 d2 03 00 00       	push   $0x3d2
f010b205:	68 f1 6a 13 f0       	push   $0xf0136af1
f010b20a:	e8 f6 4f ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b20f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b212:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b215:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b218:	01 d0                	add    %edx,%eax
f010b21a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b21d:	eb 07                	jmp    f010b226 <PROGRAM_SEGMENT_FIRST+0x50>
f010b21f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b222:	40                   	inc    %eax
f010b223:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b226:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b229:	c1 e0 05             	shl    $0x5,%eax
f010b22c:	89 c2                	mov    %eax,%edx
f010b22e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b231:	01 d0                	add    %edx,%eax
f010b233:	8b 00                	mov    (%eax),%eax
f010b235:	83 f8 01             	cmp    $0x1,%eax
f010b238:	74 10                	je     f010b24a <PROGRAM_SEGMENT_FIRST+0x74>
f010b23a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b23d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b240:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b243:	0f b7 c0             	movzwl %ax,%eax
f010b246:	39 c2                	cmp    %eax,%edx
f010b248:	72 d5                	jb     f010b21f <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b24a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b24d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b250:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b253:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b256:	0f b7 c0             	movzwl %ax,%eax
f010b259:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b25c:	7e 68                	jle    f010b2c6 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b25e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b261:	c1 e0 05             	shl    $0x5,%eax
f010b264:	89 c2                	mov    %eax,%edx
f010b266:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b269:	01 d0                	add    %edx,%eax
f010b26b:	8b 50 04             	mov    0x4(%eax),%edx
f010b26e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b271:	01 d0                	add    %edx,%eax
f010b273:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b276:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b279:	c1 e0 05             	shl    $0x5,%eax
f010b27c:	89 c2                	mov    %eax,%edx
f010b27e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b281:	01 d0                	add    %edx,%eax
f010b283:	8b 40 14             	mov    0x14(%eax),%eax
f010b286:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b289:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b28c:	c1 e0 05             	shl    $0x5,%eax
f010b28f:	89 c2                	mov    %eax,%edx
f010b291:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b294:	01 d0                	add    %edx,%eax
f010b296:	8b 40 10             	mov    0x10(%eax),%eax
f010b299:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b29c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b29f:	c1 e0 05             	shl    $0x5,%eax
f010b2a2:	89 c2                	mov    %eax,%edx
f010b2a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b2a7:	01 d0                	add    %edx,%eax
f010b2a9:	8b 40 08             	mov    0x8(%eax),%eax
f010b2ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b2af:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2b2:	89 c3                	mov    %eax,%ebx
f010b2b4:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b2b7:	ba 05 00 00 00       	mov    $0x5,%edx
f010b2bc:	89 df                	mov    %ebx,%edi
f010b2be:	89 c6                	mov    %eax,%esi
f010b2c0:	89 d1                	mov    %edx,%ecx
f010b2c2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b2c4:	eb 1c                	jmp    f010b2e2 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b2c6:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2d0:	89 c3                	mov    %eax,%ebx
f010b2d2:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b2d5:	ba 05 00 00 00       	mov    $0x5,%edx
f010b2da:	89 df                	mov    %ebx,%edi
f010b2dc:	89 c6                	mov    %eax,%esi
f010b2de:	89 d1                	mov    %edx,%ecx
f010b2e0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b2e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b2e8:	5b                   	pop    %ebx
f010b2e9:	5e                   	pop    %esi
f010b2ea:	5f                   	pop    %edi
f010b2eb:	5d                   	pop    %ebp
f010b2ec:	c2 04 00             	ret    $0x4

f010b2ef <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b2ef:	55                   	push   %ebp
f010b2f0:	89 e5                	mov    %esp,%ebp
f010b2f2:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b2f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b2fc:	a1 b8 ac 89 f0       	mov    0xf089acb8,%eax
f010b301:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b304:	e9 c3 00 00 00       	jmp    f010b3cc <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b30c:	8b 40 10             	mov    0x10(%eax),%eax
f010b30f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b312:	0f 85 ac 00 00 00    	jne    f010b3c4 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b318:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b31b:	8b 50 0c             	mov    0xc(%eax),%edx
f010b31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b321:	8b 40 10             	mov    0x10(%eax),%eax
f010b324:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b327:	83 ec 08             	sub    $0x8,%esp
f010b32a:	52                   	push   %edx
f010b32b:	50                   	push   %eax
f010b32c:	e8 92 cc ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f010b331:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b334:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b338:	75 17                	jne    f010b351 <cleanup_buffers+0x62>
f010b33a:	83 ec 04             	sub    $0x4,%esp
f010b33d:	68 0e 6b 13 f0       	push   $0xf0136b0e
f010b342:	68 f9 03 00 00       	push   $0x3f9
f010b347:	68 f1 6a 13 f0       	push   $0xf0136af1
f010b34c:	e8 b4 4e ff ff       	call   f0100205 <_panic>
f010b351:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b354:	8b 00                	mov    (%eax),%eax
f010b356:	85 c0                	test   %eax,%eax
f010b358:	74 10                	je     f010b36a <cleanup_buffers+0x7b>
f010b35a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b35d:	8b 00                	mov    (%eax),%eax
f010b35f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b362:	8b 52 04             	mov    0x4(%edx),%edx
f010b365:	89 50 04             	mov    %edx,0x4(%eax)
f010b368:	eb 0b                	jmp    f010b375 <cleanup_buffers+0x86>
f010b36a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b36d:	8b 40 04             	mov    0x4(%eax),%eax
f010b370:	a3 bc ac 89 f0       	mov    %eax,0xf089acbc
f010b375:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b378:	8b 40 04             	mov    0x4(%eax),%eax
f010b37b:	85 c0                	test   %eax,%eax
f010b37d:	74 0f                	je     f010b38e <cleanup_buffers+0x9f>
f010b37f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b382:	8b 40 04             	mov    0x4(%eax),%eax
f010b385:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b388:	8b 12                	mov    (%edx),%edx
f010b38a:	89 10                	mov    %edx,(%eax)
f010b38c:	eb 0a                	jmp    f010b398 <cleanup_buffers+0xa9>
f010b38e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b391:	8b 00                	mov    (%eax),%eax
f010b393:	a3 b8 ac 89 f0       	mov    %eax,0xf089acb8
f010b398:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b39b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b3a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3a4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b3ab:	a1 c4 ac 89 f0       	mov    0xf089acc4,%eax
f010b3b0:	48                   	dec    %eax
f010b3b1:	a3 c4 ac 89 f0       	mov    %eax,0xf089acc4

			free_frame(ptr_fi);
f010b3b6:	83 ec 0c             	sub    $0xc,%esp
f010b3b9:	ff 75 f4             	pushl  -0xc(%ebp)
f010b3bc:	e8 46 b6 ff ff       	call   f0106a07 <free_frame>
f010b3c1:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b3c4:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f010b3c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b3cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b3d0:	74 07                	je     f010b3d9 <cleanup_buffers+0xea>
f010b3d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3d5:	8b 00                	mov    (%eax),%eax
f010b3d7:	eb 05                	jmp    f010b3de <cleanup_buffers+0xef>
f010b3d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3de:	a3 c0 ac 89 f0       	mov    %eax,0xf089acc0
f010b3e3:	a1 c0 ac 89 f0       	mov    0xf089acc0,%eax
f010b3e8:	85 c0                	test   %eax,%eax
f010b3ea:	0f 85 19 ff ff ff    	jne    f010b309 <cleanup_buffers+0x1a>
f010b3f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b3f4:	0f 85 0f ff ff ff    	jne    f010b309 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b3fa:	90                   	nop
f010b3fb:	c9                   	leave  
f010b3fc:	c3                   	ret    

f010b3fd <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b3fd:	55                   	push   %ebp
f010b3fe:	89 e5                	mov    %esp,%ebp
f010b400:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b403:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b407:	7e 06                	jle    f010b40f <set_program_priority+0x12>
f010b409:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b40d:	7e 14                	jle    f010b423 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b40f:	83 ec 04             	sub    $0x4,%esp
f010b412:	68 60 6c 13 f0       	push   $0xf0136c60
f010b417:	6a 10                	push   $0x10
f010b419:	68 84 6c 13 f0       	push   $0xf0136c84
f010b41e:	e8 e2 4d ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b423:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b427:	74 75                	je     f010b49e <set_program_priority+0xa1>
		return;
	switch(priority)
f010b429:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b42d:	77 56                	ja     f010b485 <set_program_priority+0x88>
f010b42f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b432:	c1 e0 02             	shl    $0x2,%eax
f010b435:	05 c0 6c 13 f0       	add    $0xf0136cc0,%eax
f010b43a:	8b 00                	mov    (%eax),%eax
f010b43c:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b43e:	83 ec 08             	sub    $0x8,%esp
f010b441:	6a 01                	push   $0x1
f010b443:	ff 75 08             	pushl  0x8(%ebp)
f010b446:	e8 ef d5 ff ff       	call   f0108a3a <half_WS_Size>
f010b44b:	83 c4 10             	add    $0x10,%esp
			break;
f010b44e:	eb 35                	jmp    f010b485 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b450:	83 ec 08             	sub    $0x8,%esp
f010b453:	6a 00                	push   $0x0
f010b455:	ff 75 08             	pushl  0x8(%ebp)
f010b458:	e8 dd d5 ff ff       	call   f0108a3a <half_WS_Size>
f010b45d:	83 c4 10             	add    $0x10,%esp
			break;
f010b460:	eb 23                	jmp    f010b485 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b462:	83 ec 08             	sub    $0x8,%esp
f010b465:	6a 01                	push   $0x1
f010b467:	ff 75 08             	pushl  0x8(%ebp)
f010b46a:	e8 ae d5 ff ff       	call   f0108a1d <double_WS_Size>
f010b46f:	83 c4 10             	add    $0x10,%esp
			break;
f010b472:	eb 11                	jmp    f010b485 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b474:	83 ec 08             	sub    $0x8,%esp
f010b477:	6a 00                	push   $0x0
f010b479:	ff 75 08             	pushl  0x8(%ebp)
f010b47c:	e8 9c d5 ff ff       	call   f0108a1d <double_WS_Size>
f010b481:	83 c4 10             	add    $0x10,%esp
			break;
f010b484:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b485:	8b 45 08             	mov    0x8(%ebp),%eax
f010b488:	8b 40 74             	mov    0x74(%eax),%eax
f010b48b:	83 ec 08             	sub    $0x8,%esp
f010b48e:	50                   	push   %eax
f010b48f:	68 a1 6c 13 f0       	push   $0xf0136ca1
f010b494:	e8 75 58 ff ff       	call   f0100d0e <cprintf>
f010b499:	83 c4 10             	add    $0x10,%esp
f010b49c:	eb 01                	jmp    f010b49f <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b49e:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b49f:	c9                   	leave  
f010b4a0:	c3                   	ret    

f010b4a1 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b4a1:	55                   	push   %ebp
f010b4a2:	89 e5                	mov    %esp,%ebp
f010b4a4:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b4a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b4ae:	eb 29                	jmp    f010b4d9 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b4b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4b3:	89 d0                	mov    %edx,%eax
f010b4b5:	01 c0                	add    %eax,%eax
f010b4b7:	01 d0                	add    %edx,%eax
f010b4b9:	c1 e0 02             	shl    $0x2,%eax
f010b4bc:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b4c1:	8b 00                	mov    (%eax),%eax
f010b4c3:	83 ec 08             	sub    $0x8,%esp
f010b4c6:	50                   	push   %eax
f010b4c7:	ff 75 08             	pushl  0x8(%ebp)
f010b4ca:	e8 ea 62 02 00       	call   f01317b9 <strcmp>
f010b4cf:	83 c4 10             	add    $0x10,%esp
f010b4d2:	85 c0                	test   %eax,%eax
f010b4d4:	74 0f                	je     f010b4e5 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b4d6:	ff 45 f4             	incl   -0xc(%ebp)
f010b4d9:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b4de:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b4e1:	7c cd                	jl     f010b4b0 <get_user_program_info+0xf>
f010b4e3:	eb 01                	jmp    f010b4e6 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b4e5:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b4e6:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b4eb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b4ee:	75 1a                	jne    f010b50a <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b4f0:	83 ec 08             	sub    $0x8,%esp
f010b4f3:	ff 75 08             	pushl  0x8(%ebp)
f010b4f6:	68 55 78 13 f0       	push   $0xf0137855
f010b4fb:	e8 0e 58 ff ff       	call   f0100d0e <cprintf>
f010b500:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b503:	b8 00 00 00 00       	mov    $0x0,%eax
f010b508:	eb 11                	jmp    f010b51b <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b50a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b50d:	89 d0                	mov    %edx,%eax
f010b50f:	01 c0                	add    %eax,%eax
f010b511:	01 d0                	add    %edx,%eax
f010b513:	c1 e0 02             	shl    $0x2,%eax
f010b516:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b51b:	c9                   	leave  
f010b51c:	c3                   	ret    

f010b51d <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b51d:	55                   	push   %ebp
f010b51e:	89 e5                	mov    %esp,%ebp
f010b520:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b523:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b52a:	eb 30                	jmp    f010b55c <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b52c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b52f:	89 d0                	mov    %edx,%eax
f010b531:	01 c0                	add    %eax,%eax
f010b533:	01 d0                	add    %edx,%eax
f010b535:	c1 e0 02             	shl    $0x2,%eax
f010b538:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b53d:	8b 00                	mov    (%eax),%eax
f010b53f:	8b 55 08             	mov    0x8(%ebp),%edx
f010b542:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b548:	83 ec 08             	sub    $0x8,%esp
f010b54b:	50                   	push   %eax
f010b54c:	52                   	push   %edx
f010b54d:	e8 67 62 02 00       	call   f01317b9 <strcmp>
f010b552:	83 c4 10             	add    $0x10,%esp
f010b555:	85 c0                	test   %eax,%eax
f010b557:	74 0f                	je     f010b568 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b559:	ff 45 f4             	incl   -0xc(%ebp)
f010b55c:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b561:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b564:	7c c6                	jl     f010b52c <get_user_program_info_by_env+0xf>
f010b566:	eb 01                	jmp    f010b569 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b568:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b569:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b56e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b571:	75 17                	jne    f010b58a <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b573:	83 ec 0c             	sub    $0xc,%esp
f010b576:	68 70 78 13 f0       	push   $0xf0137870
f010b57b:	e8 8e 57 ff ff       	call   f0100d0e <cprintf>
f010b580:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b583:	b8 00 00 00 00       	mov    $0x0,%eax
f010b588:	eb 11                	jmp    f010b59b <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b58a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b58d:	89 d0                	mov    %edx,%eax
f010b58f:	01 c0                	add    %eax,%eax
f010b591:	01 d0                	add    %edx,%eax
f010b593:	c1 e0 02             	shl    $0x2,%eax
f010b596:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b59b:	c9                   	leave  
f010b59c:	c3                   	ret    

f010b59d <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b59d:	55                   	push   %ebp
f010b59e:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b5a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5a3:	83 f8 13             	cmp    $0x13,%eax
f010b5a6:	77 0c                	ja     f010b5b4 <trapname+0x17>
		return excnames[trapno];
f010b5a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5ab:	8b 04 85 c0 7c 13 f0 	mov    -0xfec8340(,%eax,4),%eax
f010b5b2:	eb 12                	jmp    f010b5c6 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b5b4:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b5b8:	75 07                	jne    f010b5c1 <trapname+0x24>
		return "System call";
f010b5ba:	b8 a0 78 13 f0       	mov    $0xf01378a0,%eax
f010b5bf:	eb 05                	jmp    f010b5c6 <trapname+0x29>
	return "(unknown trap)";
f010b5c1:	b8 ac 78 13 f0       	mov    $0xf01378ac,%eax
}
f010b5c6:	5d                   	pop    %ebp
f010b5c7:	c3                   	ret    

f010b5c8 <idt_init>:


void
idt_init(void)
{
f010b5c8:	55                   	push   %ebp
f010b5c9:	89 e5                	mov    %esp,%ebp
f010b5cb:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b5ce:	b8 5c cc 10 f0       	mov    $0xf010cc5c,%eax
f010b5d3:	66 a3 90 a4 89 f0    	mov    %ax,0xf089a490
f010b5d9:	66 c7 05 92 a4 89 f0 	movw   $0x8,0xf089a492
f010b5e0:	08 00 
f010b5e2:	a0 94 a4 89 f0       	mov    0xf089a494,%al
f010b5e7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5ea:	a2 94 a4 89 f0       	mov    %al,0xf089a494
f010b5ef:	a0 94 a4 89 f0       	mov    0xf089a494,%al
f010b5f4:	83 e0 1f             	and    $0x1f,%eax
f010b5f7:	a2 94 a4 89 f0       	mov    %al,0xf089a494
f010b5fc:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b601:	83 e0 f0             	and    $0xfffffff0,%eax
f010b604:	83 c8 0e             	or     $0xe,%eax
f010b607:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b60c:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b611:	83 e0 ef             	and    $0xffffffef,%eax
f010b614:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b619:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b61e:	83 e0 9f             	and    $0xffffff9f,%eax
f010b621:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b626:	a0 95 a4 89 f0       	mov    0xf089a495,%al
f010b62b:	83 c8 80             	or     $0xffffff80,%eax
f010b62e:	a2 95 a4 89 f0       	mov    %al,0xf089a495
f010b633:	b8 5c cc 10 f0       	mov    $0xf010cc5c,%eax
f010b638:	c1 e8 10             	shr    $0x10,%eax
f010b63b:	66 a3 96 a4 89 f0    	mov    %ax,0xf089a496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b641:	b8 64 cc 10 f0       	mov    $0xf010cc64,%eax
f010b646:	66 a3 a0 a5 89 f0    	mov    %ax,0xf089a5a0
f010b64c:	66 c7 05 a2 a5 89 f0 	movw   $0x8,0xf089a5a2
f010b653:	08 00 
f010b655:	a0 a4 a5 89 f0       	mov    0xf089a5a4,%al
f010b65a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b65d:	a2 a4 a5 89 f0       	mov    %al,0xf089a5a4
f010b662:	a0 a4 a5 89 f0       	mov    0xf089a5a4,%al
f010b667:	83 e0 1f             	and    $0x1f,%eax
f010b66a:	a2 a4 a5 89 f0       	mov    %al,0xf089a5a4
f010b66f:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b674:	83 e0 f0             	and    $0xfffffff0,%eax
f010b677:	83 c8 0e             	or     $0xe,%eax
f010b67a:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b67f:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b684:	83 e0 ef             	and    $0xffffffef,%eax
f010b687:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b68c:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b691:	83 c8 60             	or     $0x60,%eax
f010b694:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b699:	a0 a5 a5 89 f0       	mov    0xf089a5a5,%al
f010b69e:	83 c8 80             	or     $0xffffff80,%eax
f010b6a1:	a2 a5 a5 89 f0       	mov    %al,0xf089a5a5
f010b6a6:	b8 64 cc 10 f0       	mov    $0xf010cc64,%eax
f010b6ab:	c1 e8 10             	shr    $0x10,%eax
f010b6ae:	66 a3 a6 a5 89 f0    	mov    %ax,0xf089a5a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b6b4:	b8 6e cc 10 f0       	mov    $0xf010cc6e,%eax
f010b6b9:	66 a3 60 a4 89 f0    	mov    %ax,0xf089a460
f010b6bf:	66 c7 05 62 a4 89 f0 	movw   $0x8,0xf089a462
f010b6c6:	08 00 
f010b6c8:	a0 64 a4 89 f0       	mov    0xf089a464,%al
f010b6cd:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6d0:	a2 64 a4 89 f0       	mov    %al,0xf089a464
f010b6d5:	a0 64 a4 89 f0       	mov    0xf089a464,%al
f010b6da:	83 e0 1f             	and    $0x1f,%eax
f010b6dd:	a2 64 a4 89 f0       	mov    %al,0xf089a464
f010b6e2:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b6e7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6ea:	83 c8 0e             	or     $0xe,%eax
f010b6ed:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b6f2:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b6f7:	83 e0 ef             	and    $0xffffffef,%eax
f010b6fa:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b6ff:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b704:	83 e0 9f             	and    $0xffffff9f,%eax
f010b707:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b70c:	a0 65 a4 89 f0       	mov    0xf089a465,%al
f010b711:	83 c8 80             	or     $0xffffff80,%eax
f010b714:	a2 65 a4 89 f0       	mov    %al,0xf089a465
f010b719:	b8 6e cc 10 f0       	mov    $0xf010cc6e,%eax
f010b71e:	c1 e8 10             	shr    $0x10,%eax
f010b721:	66 a3 66 a4 89 f0    	mov    %ax,0xf089a466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b727:	b8 76 cc 10 f0       	mov    $0xf010cc76,%eax
f010b72c:	66 a3 20 a4 89 f0    	mov    %ax,0xf089a420
f010b732:	66 c7 05 22 a4 89 f0 	movw   $0x8,0xf089a422
f010b739:	08 00 
f010b73b:	a0 24 a4 89 f0       	mov    0xf089a424,%al
f010b740:	83 e0 e0             	and    $0xffffffe0,%eax
f010b743:	a2 24 a4 89 f0       	mov    %al,0xf089a424
f010b748:	a0 24 a4 89 f0       	mov    0xf089a424,%al
f010b74d:	83 e0 1f             	and    $0x1f,%eax
f010b750:	a2 24 a4 89 f0       	mov    %al,0xf089a424
f010b755:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b75a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b75d:	83 c8 0e             	or     $0xe,%eax
f010b760:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b765:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b76a:	83 e0 ef             	and    $0xffffffef,%eax
f010b76d:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b772:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b777:	83 c8 60             	or     $0x60,%eax
f010b77a:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b77f:	a0 25 a4 89 f0       	mov    0xf089a425,%al
f010b784:	83 c8 80             	or     $0xffffff80,%eax
f010b787:	a2 25 a4 89 f0       	mov    %al,0xf089a425
f010b78c:	b8 76 cc 10 f0       	mov    $0xf010cc76,%eax
f010b791:	c1 e8 10             	shr    $0x10,%eax
f010b794:	66 a3 26 a4 89 f0    	mov    %ax,0xf089a426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b79a:	b8 80 cc 10 f0       	mov    $0xf010cc80,%eax
f010b79f:	66 a3 28 a4 89 f0    	mov    %ax,0xf089a428
f010b7a5:	66 c7 05 2a a4 89 f0 	movw   $0x8,0xf089a42a
f010b7ac:	08 00 
f010b7ae:	a0 2c a4 89 f0       	mov    0xf089a42c,%al
f010b7b3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7b6:	a2 2c a4 89 f0       	mov    %al,0xf089a42c
f010b7bb:	a0 2c a4 89 f0       	mov    0xf089a42c,%al
f010b7c0:	83 e0 1f             	and    $0x1f,%eax
f010b7c3:	a2 2c a4 89 f0       	mov    %al,0xf089a42c
f010b7c8:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b7cd:	83 c8 0f             	or     $0xf,%eax
f010b7d0:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b7d5:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b7da:	83 e0 ef             	and    $0xffffffef,%eax
f010b7dd:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b7e2:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b7e7:	83 c8 60             	or     $0x60,%eax
f010b7ea:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b7ef:	a0 2d a4 89 f0       	mov    0xf089a42d,%al
f010b7f4:	83 c8 80             	or     $0xffffff80,%eax
f010b7f7:	a2 2d a4 89 f0       	mov    %al,0xf089a42d
f010b7fc:	b8 80 cc 10 f0       	mov    $0xf010cc80,%eax
f010b801:	c1 e8 10             	shr    $0x10,%eax
f010b804:	66 a3 2e a4 89 f0    	mov    %ax,0xf089a42e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b80a:	b8 8a cc 10 f0       	mov    $0xf010cc8a,%eax
f010b80f:	66 a3 30 a4 89 f0    	mov    %ax,0xf089a430
f010b815:	66 c7 05 32 a4 89 f0 	movw   $0x8,0xf089a432
f010b81c:	08 00 
f010b81e:	a0 34 a4 89 f0       	mov    0xf089a434,%al
f010b823:	83 e0 e0             	and    $0xffffffe0,%eax
f010b826:	a2 34 a4 89 f0       	mov    %al,0xf089a434
f010b82b:	a0 34 a4 89 f0       	mov    0xf089a434,%al
f010b830:	83 e0 1f             	and    $0x1f,%eax
f010b833:	a2 34 a4 89 f0       	mov    %al,0xf089a434
f010b838:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010b83d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b840:	83 c8 0e             	or     $0xe,%eax
f010b843:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010b848:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010b84d:	83 e0 ef             	and    $0xffffffef,%eax
f010b850:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010b855:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010b85a:	83 c8 60             	or     $0x60,%eax
f010b85d:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010b862:	a0 35 a4 89 f0       	mov    0xf089a435,%al
f010b867:	83 c8 80             	or     $0xffffff80,%eax
f010b86a:	a2 35 a4 89 f0       	mov    %al,0xf089a435
f010b86f:	b8 8a cc 10 f0       	mov    $0xf010cc8a,%eax
f010b874:	c1 e8 10             	shr    $0x10,%eax
f010b877:	66 a3 36 a4 89 f0    	mov    %ax,0xf089a436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b87d:	b8 94 cc 10 f0       	mov    $0xf010cc94,%eax
f010b882:	66 a3 38 a4 89 f0    	mov    %ax,0xf089a438
f010b888:	66 c7 05 3a a4 89 f0 	movw   $0x8,0xf089a43a
f010b88f:	08 00 
f010b891:	a0 3c a4 89 f0       	mov    0xf089a43c,%al
f010b896:	83 e0 e0             	and    $0xffffffe0,%eax
f010b899:	a2 3c a4 89 f0       	mov    %al,0xf089a43c
f010b89e:	a0 3c a4 89 f0       	mov    0xf089a43c,%al
f010b8a3:	83 e0 1f             	and    $0x1f,%eax
f010b8a6:	a2 3c a4 89 f0       	mov    %al,0xf089a43c
f010b8ab:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010b8b0:	83 c8 0f             	or     $0xf,%eax
f010b8b3:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010b8b8:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010b8bd:	83 e0 ef             	and    $0xffffffef,%eax
f010b8c0:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010b8c5:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010b8ca:	83 c8 60             	or     $0x60,%eax
f010b8cd:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010b8d2:	a0 3d a4 89 f0       	mov    0xf089a43d,%al
f010b8d7:	83 c8 80             	or     $0xffffff80,%eax
f010b8da:	a2 3d a4 89 f0       	mov    %al,0xf089a43d
f010b8df:	b8 94 cc 10 f0       	mov    $0xf010cc94,%eax
f010b8e4:	c1 e8 10             	shr    $0x10,%eax
f010b8e7:	66 a3 3e a4 89 f0    	mov    %ax,0xf089a43e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b8ed:	b8 9e cc 10 f0       	mov    $0xf010cc9e,%eax
f010b8f2:	66 a3 40 a4 89 f0    	mov    %ax,0xf089a440
f010b8f8:	66 c7 05 42 a4 89 f0 	movw   $0x8,0xf089a442
f010b8ff:	08 00 
f010b901:	a0 44 a4 89 f0       	mov    0xf089a444,%al
f010b906:	83 e0 e0             	and    $0xffffffe0,%eax
f010b909:	a2 44 a4 89 f0       	mov    %al,0xf089a444
f010b90e:	a0 44 a4 89 f0       	mov    0xf089a444,%al
f010b913:	83 e0 1f             	and    $0x1f,%eax
f010b916:	a2 44 a4 89 f0       	mov    %al,0xf089a444
f010b91b:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010b920:	83 c8 0f             	or     $0xf,%eax
f010b923:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010b928:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010b92d:	83 e0 ef             	and    $0xffffffef,%eax
f010b930:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010b935:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010b93a:	83 c8 60             	or     $0x60,%eax
f010b93d:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010b942:	a0 45 a4 89 f0       	mov    0xf089a445,%al
f010b947:	83 c8 80             	or     $0xffffff80,%eax
f010b94a:	a2 45 a4 89 f0       	mov    %al,0xf089a445
f010b94f:	b8 9e cc 10 f0       	mov    $0xf010cc9e,%eax
f010b954:	c1 e8 10             	shr    $0x10,%eax
f010b957:	66 a3 46 a4 89 f0    	mov    %ax,0xf089a446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b95d:	b8 a8 cc 10 f0       	mov    $0xf010cca8,%eax
f010b962:	66 a3 48 a4 89 f0    	mov    %ax,0xf089a448
f010b968:	66 c7 05 4a a4 89 f0 	movw   $0x8,0xf089a44a
f010b96f:	08 00 
f010b971:	a0 4c a4 89 f0       	mov    0xf089a44c,%al
f010b976:	83 e0 e0             	and    $0xffffffe0,%eax
f010b979:	a2 4c a4 89 f0       	mov    %al,0xf089a44c
f010b97e:	a0 4c a4 89 f0       	mov    0xf089a44c,%al
f010b983:	83 e0 1f             	and    $0x1f,%eax
f010b986:	a2 4c a4 89 f0       	mov    %al,0xf089a44c
f010b98b:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010b990:	83 e0 f0             	and    $0xfffffff0,%eax
f010b993:	83 c8 0e             	or     $0xe,%eax
f010b996:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010b99b:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010b9a0:	83 e0 ef             	and    $0xffffffef,%eax
f010b9a3:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010b9a8:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010b9ad:	83 c8 60             	or     $0x60,%eax
f010b9b0:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010b9b5:	a0 4d a4 89 f0       	mov    0xf089a44d,%al
f010b9ba:	83 c8 80             	or     $0xffffff80,%eax
f010b9bd:	a2 4d a4 89 f0       	mov    %al,0xf089a44d
f010b9c2:	b8 a8 cc 10 f0       	mov    $0xf010cca8,%eax
f010b9c7:	c1 e8 10             	shr    $0x10,%eax
f010b9ca:	66 a3 4e a4 89 f0    	mov    %ax,0xf089a44e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b9d0:	b8 b2 cc 10 f0       	mov    $0xf010ccb2,%eax
f010b9d5:	66 a3 50 a4 89 f0    	mov    %ax,0xf089a450
f010b9db:	66 c7 05 52 a4 89 f0 	movw   $0x8,0xf089a452
f010b9e2:	08 00 
f010b9e4:	a0 54 a4 89 f0       	mov    0xf089a454,%al
f010b9e9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9ec:	a2 54 a4 89 f0       	mov    %al,0xf089a454
f010b9f1:	a0 54 a4 89 f0       	mov    0xf089a454,%al
f010b9f6:	83 e0 1f             	and    $0x1f,%eax
f010b9f9:	a2 54 a4 89 f0       	mov    %al,0xf089a454
f010b9fe:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010ba03:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba06:	83 c8 0e             	or     $0xe,%eax
f010ba09:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010ba0e:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010ba13:	83 e0 ef             	and    $0xffffffef,%eax
f010ba16:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010ba1b:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010ba20:	83 c8 60             	or     $0x60,%eax
f010ba23:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010ba28:	a0 55 a4 89 f0       	mov    0xf089a455,%al
f010ba2d:	83 c8 80             	or     $0xffffff80,%eax
f010ba30:	a2 55 a4 89 f0       	mov    %al,0xf089a455
f010ba35:	b8 b2 cc 10 f0       	mov    $0xf010ccb2,%eax
f010ba3a:	c1 e8 10             	shr    $0x10,%eax
f010ba3d:	66 a3 56 a4 89 f0    	mov    %ax,0xf089a456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010ba43:	b8 bc cc 10 f0       	mov    $0xf010ccbc,%eax
f010ba48:	66 a3 58 a4 89 f0    	mov    %ax,0xf089a458
f010ba4e:	66 c7 05 5a a4 89 f0 	movw   $0x8,0xf089a45a
f010ba55:	08 00 
f010ba57:	a0 5c a4 89 f0       	mov    0xf089a45c,%al
f010ba5c:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba5f:	a2 5c a4 89 f0       	mov    %al,0xf089a45c
f010ba64:	a0 5c a4 89 f0       	mov    0xf089a45c,%al
f010ba69:	83 e0 1f             	and    $0x1f,%eax
f010ba6c:	a2 5c a4 89 f0       	mov    %al,0xf089a45c
f010ba71:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010ba76:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba79:	83 c8 0e             	or     $0xe,%eax
f010ba7c:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010ba81:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010ba86:	83 e0 ef             	and    $0xffffffef,%eax
f010ba89:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010ba8e:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010ba93:	83 c8 60             	or     $0x60,%eax
f010ba96:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010ba9b:	a0 5d a4 89 f0       	mov    0xf089a45d,%al
f010baa0:	83 c8 80             	or     $0xffffff80,%eax
f010baa3:	a2 5d a4 89 f0       	mov    %al,0xf089a45d
f010baa8:	b8 bc cc 10 f0       	mov    $0xf010ccbc,%eax
f010baad:	c1 e8 10             	shr    $0x10,%eax
f010bab0:	66 a3 5e a4 89 f0    	mov    %ax,0xf089a45e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bab6:	b8 c6 cc 10 f0       	mov    $0xf010ccc6,%eax
f010babb:	66 a3 70 a4 89 f0    	mov    %ax,0xf089a470
f010bac1:	66 c7 05 72 a4 89 f0 	movw   $0x8,0xf089a472
f010bac8:	08 00 
f010baca:	a0 74 a4 89 f0       	mov    0xf089a474,%al
f010bacf:	83 e0 e0             	and    $0xffffffe0,%eax
f010bad2:	a2 74 a4 89 f0       	mov    %al,0xf089a474
f010bad7:	a0 74 a4 89 f0       	mov    0xf089a474,%al
f010badc:	83 e0 1f             	and    $0x1f,%eax
f010badf:	a2 74 a4 89 f0       	mov    %al,0xf089a474
f010bae4:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bae9:	83 e0 f0             	and    $0xfffffff0,%eax
f010baec:	83 c8 0e             	or     $0xe,%eax
f010baef:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010baf4:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010baf9:	83 e0 ef             	and    $0xffffffef,%eax
f010bafc:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bb01:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bb06:	83 c8 60             	or     $0x60,%eax
f010bb09:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bb0e:	a0 75 a4 89 f0       	mov    0xf089a475,%al
f010bb13:	83 c8 80             	or     $0xffffff80,%eax
f010bb16:	a2 75 a4 89 f0       	mov    %al,0xf089a475
f010bb1b:	b8 c6 cc 10 f0       	mov    $0xf010ccc6,%eax
f010bb20:	c1 e8 10             	shr    $0x10,%eax
f010bb23:	66 a3 76 a4 89 f0    	mov    %ax,0xf089a476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bb29:	b8 ce cc 10 f0       	mov    $0xf010ccce,%eax
f010bb2e:	66 a3 78 a4 89 f0    	mov    %ax,0xf089a478
f010bb34:	66 c7 05 7a a4 89 f0 	movw   $0x8,0xf089a47a
f010bb3b:	08 00 
f010bb3d:	a0 7c a4 89 f0       	mov    0xf089a47c,%al
f010bb42:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb45:	a2 7c a4 89 f0       	mov    %al,0xf089a47c
f010bb4a:	a0 7c a4 89 f0       	mov    0xf089a47c,%al
f010bb4f:	83 e0 1f             	and    $0x1f,%eax
f010bb52:	a2 7c a4 89 f0       	mov    %al,0xf089a47c
f010bb57:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bb5c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb5f:	83 c8 0e             	or     $0xe,%eax
f010bb62:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bb67:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bb6c:	83 e0 ef             	and    $0xffffffef,%eax
f010bb6f:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bb74:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bb79:	83 c8 60             	or     $0x60,%eax
f010bb7c:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bb81:	a0 7d a4 89 f0       	mov    0xf089a47d,%al
f010bb86:	83 c8 80             	or     $0xffffff80,%eax
f010bb89:	a2 7d a4 89 f0       	mov    %al,0xf089a47d
f010bb8e:	b8 ce cc 10 f0       	mov    $0xf010ccce,%eax
f010bb93:	c1 e8 10             	shr    $0x10,%eax
f010bb96:	66 a3 7e a4 89 f0    	mov    %ax,0xf089a47e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bb9c:	b8 d2 cc 10 f0       	mov    $0xf010ccd2,%eax
f010bba1:	66 a3 80 a4 89 f0    	mov    %ax,0xf089a480
f010bba7:	66 c7 05 82 a4 89 f0 	movw   $0x8,0xf089a482
f010bbae:	08 00 
f010bbb0:	a0 84 a4 89 f0       	mov    0xf089a484,%al
f010bbb5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbb8:	a2 84 a4 89 f0       	mov    %al,0xf089a484
f010bbbd:	a0 84 a4 89 f0       	mov    0xf089a484,%al
f010bbc2:	83 e0 1f             	and    $0x1f,%eax
f010bbc5:	a2 84 a4 89 f0       	mov    %al,0xf089a484
f010bbca:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bbcf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbd2:	83 c8 0e             	or     $0xe,%eax
f010bbd5:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bbda:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bbdf:	83 e0 ef             	and    $0xffffffef,%eax
f010bbe2:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bbe7:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bbec:	83 c8 60             	or     $0x60,%eax
f010bbef:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bbf4:	a0 85 a4 89 f0       	mov    0xf089a485,%al
f010bbf9:	83 c8 80             	or     $0xffffff80,%eax
f010bbfc:	a2 85 a4 89 f0       	mov    %al,0xf089a485
f010bc01:	b8 d2 cc 10 f0       	mov    $0xf010ccd2,%eax
f010bc06:	c1 e8 10             	shr    $0x10,%eax
f010bc09:	66 a3 86 a4 89 f0    	mov    %ax,0xf089a486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bc0f:	b8 d6 cc 10 f0       	mov    $0xf010ccd6,%eax
f010bc14:	66 a3 88 a4 89 f0    	mov    %ax,0xf089a488
f010bc1a:	66 c7 05 8a a4 89 f0 	movw   $0x8,0xf089a48a
f010bc21:	08 00 
f010bc23:	a0 8c a4 89 f0       	mov    0xf089a48c,%al
f010bc28:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc2b:	a2 8c a4 89 f0       	mov    %al,0xf089a48c
f010bc30:	a0 8c a4 89 f0       	mov    0xf089a48c,%al
f010bc35:	83 e0 1f             	and    $0x1f,%eax
f010bc38:	a2 8c a4 89 f0       	mov    %al,0xf089a48c
f010bc3d:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010bc42:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc45:	83 c8 0e             	or     $0xe,%eax
f010bc48:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010bc4d:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010bc52:	83 e0 ef             	and    $0xffffffef,%eax
f010bc55:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010bc5a:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010bc5f:	83 c8 60             	or     $0x60,%eax
f010bc62:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010bc67:	a0 8d a4 89 f0       	mov    0xf089a48d,%al
f010bc6c:	83 c8 80             	or     $0xffffff80,%eax
f010bc6f:	a2 8d a4 89 f0       	mov    %al,0xf089a48d
f010bc74:	b8 d6 cc 10 f0       	mov    $0xf010ccd6,%eax
f010bc79:	c1 e8 10             	shr    $0x10,%eax
f010bc7c:	66 a3 8e a4 89 f0    	mov    %ax,0xf089a48e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bc82:	b8 da cc 10 f0       	mov    $0xf010ccda,%eax
f010bc87:	66 a3 a0 a4 89 f0    	mov    %ax,0xf089a4a0
f010bc8d:	66 c7 05 a2 a4 89 f0 	movw   $0x8,0xf089a4a2
f010bc94:	08 00 
f010bc96:	a0 a4 a4 89 f0       	mov    0xf089a4a4,%al
f010bc9b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc9e:	a2 a4 a4 89 f0       	mov    %al,0xf089a4a4
f010bca3:	a0 a4 a4 89 f0       	mov    0xf089a4a4,%al
f010bca8:	83 e0 1f             	and    $0x1f,%eax
f010bcab:	a2 a4 a4 89 f0       	mov    %al,0xf089a4a4
f010bcb0:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010bcb5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcb8:	83 c8 0e             	or     $0xe,%eax
f010bcbb:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010bcc0:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010bcc5:	83 e0 ef             	and    $0xffffffef,%eax
f010bcc8:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010bccd:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010bcd2:	83 c8 60             	or     $0x60,%eax
f010bcd5:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010bcda:	a0 a5 a4 89 f0       	mov    0xf089a4a5,%al
f010bcdf:	83 c8 80             	or     $0xffffff80,%eax
f010bce2:	a2 a5 a4 89 f0       	mov    %al,0xf089a4a5
f010bce7:	b8 da cc 10 f0       	mov    $0xf010ccda,%eax
f010bcec:	c1 e8 10             	shr    $0x10,%eax
f010bcef:	66 a3 a6 a4 89 f0    	mov    %ax,0xf089a4a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bcf5:	b8 e0 cc 10 f0       	mov    $0xf010cce0,%eax
f010bcfa:	66 a3 a8 a4 89 f0    	mov    %ax,0xf089a4a8
f010bd00:	66 c7 05 aa a4 89 f0 	movw   $0x8,0xf089a4aa
f010bd07:	08 00 
f010bd09:	a0 ac a4 89 f0       	mov    0xf089a4ac,%al
f010bd0e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd11:	a2 ac a4 89 f0       	mov    %al,0xf089a4ac
f010bd16:	a0 ac a4 89 f0       	mov    0xf089a4ac,%al
f010bd1b:	83 e0 1f             	and    $0x1f,%eax
f010bd1e:	a2 ac a4 89 f0       	mov    %al,0xf089a4ac
f010bd23:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bd28:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd2b:	83 c8 0e             	or     $0xe,%eax
f010bd2e:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bd33:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bd38:	83 e0 ef             	and    $0xffffffef,%eax
f010bd3b:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bd40:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bd45:	83 c8 60             	or     $0x60,%eax
f010bd48:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bd4d:	a0 ad a4 89 f0       	mov    0xf089a4ad,%al
f010bd52:	83 c8 80             	or     $0xffffff80,%eax
f010bd55:	a2 ad a4 89 f0       	mov    %al,0xf089a4ad
f010bd5a:	b8 e0 cc 10 f0       	mov    $0xf010cce0,%eax
f010bd5f:	c1 e8 10             	shr    $0x10,%eax
f010bd62:	66 a3 ae a4 89 f0    	mov    %ax,0xf089a4ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bd68:	b8 e4 cc 10 f0       	mov    $0xf010cce4,%eax
f010bd6d:	66 a3 b0 a4 89 f0    	mov    %ax,0xf089a4b0
f010bd73:	66 c7 05 b2 a4 89 f0 	movw   $0x8,0xf089a4b2
f010bd7a:	08 00 
f010bd7c:	a0 b4 a4 89 f0       	mov    0xf089a4b4,%al
f010bd81:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd84:	a2 b4 a4 89 f0       	mov    %al,0xf089a4b4
f010bd89:	a0 b4 a4 89 f0       	mov    0xf089a4b4,%al
f010bd8e:	83 e0 1f             	and    $0x1f,%eax
f010bd91:	a2 b4 a4 89 f0       	mov    %al,0xf089a4b4
f010bd96:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bd9b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd9e:	83 c8 0e             	or     $0xe,%eax
f010bda1:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bda6:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bdab:	83 e0 ef             	and    $0xffffffef,%eax
f010bdae:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bdb3:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bdb8:	83 c8 60             	or     $0x60,%eax
f010bdbb:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bdc0:	a0 b5 a4 89 f0       	mov    0xf089a4b5,%al
f010bdc5:	83 c8 80             	or     $0xffffff80,%eax
f010bdc8:	a2 b5 a4 89 f0       	mov    %al,0xf089a4b5
f010bdcd:	b8 e4 cc 10 f0       	mov    $0xf010cce4,%eax
f010bdd2:	c1 e8 10             	shr    $0x10,%eax
f010bdd5:	66 a3 b6 a4 89 f0    	mov    %ax,0xf089a4b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bddb:	b8 ea cc 10 f0       	mov    $0xf010ccea,%eax
f010bde0:	66 a3 b8 a4 89 f0    	mov    %ax,0xf089a4b8
f010bde6:	66 c7 05 ba a4 89 f0 	movw   $0x8,0xf089a4ba
f010bded:	08 00 
f010bdef:	a0 bc a4 89 f0       	mov    0xf089a4bc,%al
f010bdf4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdf7:	a2 bc a4 89 f0       	mov    %al,0xf089a4bc
f010bdfc:	a0 bc a4 89 f0       	mov    0xf089a4bc,%al
f010be01:	83 e0 1f             	and    $0x1f,%eax
f010be04:	a2 bc a4 89 f0       	mov    %al,0xf089a4bc
f010be09:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010be0e:	83 e0 f0             	and    $0xfffffff0,%eax
f010be11:	83 c8 0e             	or     $0xe,%eax
f010be14:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010be19:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010be1e:	83 e0 ef             	and    $0xffffffef,%eax
f010be21:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010be26:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010be2b:	83 c8 60             	or     $0x60,%eax
f010be2e:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010be33:	a0 bd a4 89 f0       	mov    0xf089a4bd,%al
f010be38:	83 c8 80             	or     $0xffffff80,%eax
f010be3b:	a2 bd a4 89 f0       	mov    %al,0xf089a4bd
f010be40:	b8 ea cc 10 f0       	mov    $0xf010ccea,%eax
f010be45:	c1 e8 10             	shr    $0x10,%eax
f010be48:	66 a3 be a4 89 f0    	mov    %ax,0xf089a4be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010be4e:	b8 f0 cc 10 f0       	mov    $0xf010ccf0,%eax
f010be53:	66 a3 20 a5 89 f0    	mov    %ax,0xf089a520
f010be59:	66 c7 05 22 a5 89 f0 	movw   $0x8,0xf089a522
f010be60:	08 00 
f010be62:	a0 24 a5 89 f0       	mov    0xf089a524,%al
f010be67:	83 e0 e0             	and    $0xffffffe0,%eax
f010be6a:	a2 24 a5 89 f0       	mov    %al,0xf089a524
f010be6f:	a0 24 a5 89 f0       	mov    0xf089a524,%al
f010be74:	83 e0 1f             	and    $0x1f,%eax
f010be77:	a2 24 a5 89 f0       	mov    %al,0xf089a524
f010be7c:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010be81:	83 e0 f0             	and    $0xfffffff0,%eax
f010be84:	83 c8 0e             	or     $0xe,%eax
f010be87:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010be8c:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010be91:	83 e0 ef             	and    $0xffffffef,%eax
f010be94:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010be99:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010be9e:	83 c8 60             	or     $0x60,%eax
f010bea1:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010bea6:	a0 25 a5 89 f0       	mov    0xf089a525,%al
f010beab:	83 c8 80             	or     $0xffffff80,%eax
f010beae:	a2 25 a5 89 f0       	mov    %al,0xf089a525
f010beb3:	b8 f0 cc 10 f0       	mov    $0xf010ccf0,%eax
f010beb8:	c1 e8 10             	shr    $0x10,%eax
f010bebb:	66 a3 26 a5 89 f0    	mov    %ax,0xf089a526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bec1:	b8 f6 cc 10 f0       	mov    $0xf010ccf6,%eax
f010bec6:	66 a3 28 a5 89 f0    	mov    %ax,0xf089a528
f010becc:	66 c7 05 2a a5 89 f0 	movw   $0x8,0xf089a52a
f010bed3:	08 00 
f010bed5:	a0 2c a5 89 f0       	mov    0xf089a52c,%al
f010beda:	83 e0 e0             	and    $0xffffffe0,%eax
f010bedd:	a2 2c a5 89 f0       	mov    %al,0xf089a52c
f010bee2:	a0 2c a5 89 f0       	mov    0xf089a52c,%al
f010bee7:	83 e0 1f             	and    $0x1f,%eax
f010beea:	a2 2c a5 89 f0       	mov    %al,0xf089a52c
f010beef:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010bef4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bef7:	83 c8 0e             	or     $0xe,%eax
f010befa:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010beff:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010bf04:	83 e0 ef             	and    $0xffffffef,%eax
f010bf07:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010bf0c:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010bf11:	83 c8 60             	or     $0x60,%eax
f010bf14:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010bf19:	a0 2d a5 89 f0       	mov    0xf089a52d,%al
f010bf1e:	83 c8 80             	or     $0xffffff80,%eax
f010bf21:	a2 2d a5 89 f0       	mov    %al,0xf089a52d
f010bf26:	b8 f6 cc 10 f0       	mov    $0xf010ccf6,%eax
f010bf2b:	c1 e8 10             	shr    $0x10,%eax
f010bf2e:	66 a3 2e a5 89 f0    	mov    %ax,0xf089a52e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bf34:	b8 fc cc 10 f0       	mov    $0xf010ccfc,%eax
f010bf39:	66 a3 30 a5 89 f0    	mov    %ax,0xf089a530
f010bf3f:	66 c7 05 32 a5 89 f0 	movw   $0x8,0xf089a532
f010bf46:	08 00 
f010bf48:	a0 34 a5 89 f0       	mov    0xf089a534,%al
f010bf4d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf50:	a2 34 a5 89 f0       	mov    %al,0xf089a534
f010bf55:	a0 34 a5 89 f0       	mov    0xf089a534,%al
f010bf5a:	83 e0 1f             	and    $0x1f,%eax
f010bf5d:	a2 34 a5 89 f0       	mov    %al,0xf089a534
f010bf62:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010bf67:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf6a:	83 c8 0e             	or     $0xe,%eax
f010bf6d:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010bf72:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010bf77:	83 e0 ef             	and    $0xffffffef,%eax
f010bf7a:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010bf7f:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010bf84:	83 c8 60             	or     $0x60,%eax
f010bf87:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010bf8c:	a0 35 a5 89 f0       	mov    0xf089a535,%al
f010bf91:	83 c8 80             	or     $0xffffff80,%eax
f010bf94:	a2 35 a5 89 f0       	mov    %al,0xf089a535
f010bf99:	b8 fc cc 10 f0       	mov    $0xf010ccfc,%eax
f010bf9e:	c1 e8 10             	shr    $0x10,%eax
f010bfa1:	66 a3 36 a5 89 f0    	mov    %ax,0xf089a536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bfa7:	b8 02 cd 10 f0       	mov    $0xf010cd02,%eax
f010bfac:	66 a3 38 a5 89 f0    	mov    %ax,0xf089a538
f010bfb2:	66 c7 05 3a a5 89 f0 	movw   $0x8,0xf089a53a
f010bfb9:	08 00 
f010bfbb:	a0 3c a5 89 f0       	mov    0xf089a53c,%al
f010bfc0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfc3:	a2 3c a5 89 f0       	mov    %al,0xf089a53c
f010bfc8:	a0 3c a5 89 f0       	mov    0xf089a53c,%al
f010bfcd:	83 e0 1f             	and    $0x1f,%eax
f010bfd0:	a2 3c a5 89 f0       	mov    %al,0xf089a53c
f010bfd5:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010bfda:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfdd:	83 c8 0e             	or     $0xe,%eax
f010bfe0:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010bfe5:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010bfea:	83 e0 ef             	and    $0xffffffef,%eax
f010bfed:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010bff2:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010bff7:	83 c8 60             	or     $0x60,%eax
f010bffa:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010bfff:	a0 3d a5 89 f0       	mov    0xf089a53d,%al
f010c004:	83 c8 80             	or     $0xffffff80,%eax
f010c007:	a2 3d a5 89 f0       	mov    %al,0xf089a53d
f010c00c:	b8 02 cd 10 f0       	mov    $0xf010cd02,%eax
f010c011:	c1 e8 10             	shr    $0x10,%eax
f010c014:	66 a3 3e a5 89 f0    	mov    %ax,0xf089a53e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c01a:	b8 08 cd 10 f0       	mov    $0xf010cd08,%eax
f010c01f:	66 a3 40 a5 89 f0    	mov    %ax,0xf089a540
f010c025:	66 c7 05 42 a5 89 f0 	movw   $0x8,0xf089a542
f010c02c:	08 00 
f010c02e:	a0 44 a5 89 f0       	mov    0xf089a544,%al
f010c033:	83 e0 e0             	and    $0xffffffe0,%eax
f010c036:	a2 44 a5 89 f0       	mov    %al,0xf089a544
f010c03b:	a0 44 a5 89 f0       	mov    0xf089a544,%al
f010c040:	83 e0 1f             	and    $0x1f,%eax
f010c043:	a2 44 a5 89 f0       	mov    %al,0xf089a544
f010c048:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c04d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c050:	83 c8 0e             	or     $0xe,%eax
f010c053:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c058:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c05d:	83 e0 ef             	and    $0xffffffef,%eax
f010c060:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c065:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c06a:	83 c8 60             	or     $0x60,%eax
f010c06d:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c072:	a0 45 a5 89 f0       	mov    0xf089a545,%al
f010c077:	83 c8 80             	or     $0xffffff80,%eax
f010c07a:	a2 45 a5 89 f0       	mov    %al,0xf089a545
f010c07f:	b8 08 cd 10 f0       	mov    $0xf010cd08,%eax
f010c084:	c1 e8 10             	shr    $0x10,%eax
f010c087:	66 a3 46 a5 89 f0    	mov    %ax,0xf089a546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c08d:	b8 0e cd 10 f0       	mov    $0xf010cd0e,%eax
f010c092:	66 a3 48 a5 89 f0    	mov    %ax,0xf089a548
f010c098:	66 c7 05 4a a5 89 f0 	movw   $0x8,0xf089a54a
f010c09f:	08 00 
f010c0a1:	a0 4c a5 89 f0       	mov    0xf089a54c,%al
f010c0a6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0a9:	a2 4c a5 89 f0       	mov    %al,0xf089a54c
f010c0ae:	a0 4c a5 89 f0       	mov    0xf089a54c,%al
f010c0b3:	83 e0 1f             	and    $0x1f,%eax
f010c0b6:	a2 4c a5 89 f0       	mov    %al,0xf089a54c
f010c0bb:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c0c0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0c3:	83 c8 0e             	or     $0xe,%eax
f010c0c6:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c0cb:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c0d0:	83 e0 ef             	and    $0xffffffef,%eax
f010c0d3:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c0d8:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c0dd:	83 c8 60             	or     $0x60,%eax
f010c0e0:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c0e5:	a0 4d a5 89 f0       	mov    0xf089a54d,%al
f010c0ea:	83 c8 80             	or     $0xffffff80,%eax
f010c0ed:	a2 4d a5 89 f0       	mov    %al,0xf089a54d
f010c0f2:	b8 0e cd 10 f0       	mov    $0xf010cd0e,%eax
f010c0f7:	c1 e8 10             	shr    $0x10,%eax
f010c0fa:	66 a3 4e a5 89 f0    	mov    %ax,0xf089a54e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c100:	b8 14 cd 10 f0       	mov    $0xf010cd14,%eax
f010c105:	66 a3 50 a5 89 f0    	mov    %ax,0xf089a550
f010c10b:	66 c7 05 52 a5 89 f0 	movw   $0x8,0xf089a552
f010c112:	08 00 
f010c114:	a0 54 a5 89 f0       	mov    0xf089a554,%al
f010c119:	83 e0 e0             	and    $0xffffffe0,%eax
f010c11c:	a2 54 a5 89 f0       	mov    %al,0xf089a554
f010c121:	a0 54 a5 89 f0       	mov    0xf089a554,%al
f010c126:	83 e0 1f             	and    $0x1f,%eax
f010c129:	a2 54 a5 89 f0       	mov    %al,0xf089a554
f010c12e:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c133:	83 e0 f0             	and    $0xfffffff0,%eax
f010c136:	83 c8 0e             	or     $0xe,%eax
f010c139:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c13e:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c143:	83 e0 ef             	and    $0xffffffef,%eax
f010c146:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c14b:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c150:	83 c8 60             	or     $0x60,%eax
f010c153:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c158:	a0 55 a5 89 f0       	mov    0xf089a555,%al
f010c15d:	83 c8 80             	or     $0xffffff80,%eax
f010c160:	a2 55 a5 89 f0       	mov    %al,0xf089a555
f010c165:	b8 14 cd 10 f0       	mov    $0xf010cd14,%eax
f010c16a:	c1 e8 10             	shr    $0x10,%eax
f010c16d:	66 a3 56 a5 89 f0    	mov    %ax,0xf089a556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c173:	b8 1a cd 10 f0       	mov    $0xf010cd1a,%eax
f010c178:	66 a3 58 a5 89 f0    	mov    %ax,0xf089a558
f010c17e:	66 c7 05 5a a5 89 f0 	movw   $0x8,0xf089a55a
f010c185:	08 00 
f010c187:	a0 5c a5 89 f0       	mov    0xf089a55c,%al
f010c18c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c18f:	a2 5c a5 89 f0       	mov    %al,0xf089a55c
f010c194:	a0 5c a5 89 f0       	mov    0xf089a55c,%al
f010c199:	83 e0 1f             	and    $0x1f,%eax
f010c19c:	a2 5c a5 89 f0       	mov    %al,0xf089a55c
f010c1a1:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c1a6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1a9:	83 c8 0e             	or     $0xe,%eax
f010c1ac:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c1b1:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c1b6:	83 e0 ef             	and    $0xffffffef,%eax
f010c1b9:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c1be:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c1c3:	83 c8 60             	or     $0x60,%eax
f010c1c6:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c1cb:	a0 5d a5 89 f0       	mov    0xf089a55d,%al
f010c1d0:	83 c8 80             	or     $0xffffff80,%eax
f010c1d3:	a2 5d a5 89 f0       	mov    %al,0xf089a55d
f010c1d8:	b8 1a cd 10 f0       	mov    $0xf010cd1a,%eax
f010c1dd:	c1 e8 10             	shr    $0x10,%eax
f010c1e0:	66 a3 5e a5 89 f0    	mov    %ax,0xf089a55e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c1e6:	b8 20 cd 10 f0       	mov    $0xf010cd20,%eax
f010c1eb:	66 a3 60 a5 89 f0    	mov    %ax,0xf089a560
f010c1f1:	66 c7 05 62 a5 89 f0 	movw   $0x8,0xf089a562
f010c1f8:	08 00 
f010c1fa:	a0 64 a5 89 f0       	mov    0xf089a564,%al
f010c1ff:	83 e0 e0             	and    $0xffffffe0,%eax
f010c202:	a2 64 a5 89 f0       	mov    %al,0xf089a564
f010c207:	a0 64 a5 89 f0       	mov    0xf089a564,%al
f010c20c:	83 e0 1f             	and    $0x1f,%eax
f010c20f:	a2 64 a5 89 f0       	mov    %al,0xf089a564
f010c214:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c219:	83 e0 f0             	and    $0xfffffff0,%eax
f010c21c:	83 c8 0e             	or     $0xe,%eax
f010c21f:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c224:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c229:	83 e0 ef             	and    $0xffffffef,%eax
f010c22c:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c231:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c236:	83 c8 60             	or     $0x60,%eax
f010c239:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c23e:	a0 65 a5 89 f0       	mov    0xf089a565,%al
f010c243:	83 c8 80             	or     $0xffffff80,%eax
f010c246:	a2 65 a5 89 f0       	mov    %al,0xf089a565
f010c24b:	b8 20 cd 10 f0       	mov    $0xf010cd20,%eax
f010c250:	c1 e8 10             	shr    $0x10,%eax
f010c253:	66 a3 66 a5 89 f0    	mov    %ax,0xf089a566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c259:	b8 26 cd 10 f0       	mov    $0xf010cd26,%eax
f010c25e:	66 a3 68 a5 89 f0    	mov    %ax,0xf089a568
f010c264:	66 c7 05 6a a5 89 f0 	movw   $0x8,0xf089a56a
f010c26b:	08 00 
f010c26d:	a0 6c a5 89 f0       	mov    0xf089a56c,%al
f010c272:	83 e0 e0             	and    $0xffffffe0,%eax
f010c275:	a2 6c a5 89 f0       	mov    %al,0xf089a56c
f010c27a:	a0 6c a5 89 f0       	mov    0xf089a56c,%al
f010c27f:	83 e0 1f             	and    $0x1f,%eax
f010c282:	a2 6c a5 89 f0       	mov    %al,0xf089a56c
f010c287:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c28c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c28f:	83 c8 0e             	or     $0xe,%eax
f010c292:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c297:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c29c:	83 e0 ef             	and    $0xffffffef,%eax
f010c29f:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c2a4:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c2a9:	83 c8 60             	or     $0x60,%eax
f010c2ac:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c2b1:	a0 6d a5 89 f0       	mov    0xf089a56d,%al
f010c2b6:	83 c8 80             	or     $0xffffff80,%eax
f010c2b9:	a2 6d a5 89 f0       	mov    %al,0xf089a56d
f010c2be:	b8 26 cd 10 f0       	mov    $0xf010cd26,%eax
f010c2c3:	c1 e8 10             	shr    $0x10,%eax
f010c2c6:	66 a3 6e a5 89 f0    	mov    %ax,0xf089a56e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c2cc:	b8 2c cd 10 f0       	mov    $0xf010cd2c,%eax
f010c2d1:	66 a3 70 a5 89 f0    	mov    %ax,0xf089a570
f010c2d7:	66 c7 05 72 a5 89 f0 	movw   $0x8,0xf089a572
f010c2de:	08 00 
f010c2e0:	a0 74 a5 89 f0       	mov    0xf089a574,%al
f010c2e5:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2e8:	a2 74 a5 89 f0       	mov    %al,0xf089a574
f010c2ed:	a0 74 a5 89 f0       	mov    0xf089a574,%al
f010c2f2:	83 e0 1f             	and    $0x1f,%eax
f010c2f5:	a2 74 a5 89 f0       	mov    %al,0xf089a574
f010c2fa:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c2ff:	83 e0 f0             	and    $0xfffffff0,%eax
f010c302:	83 c8 0e             	or     $0xe,%eax
f010c305:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c30a:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c30f:	83 e0 ef             	and    $0xffffffef,%eax
f010c312:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c317:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c31c:	83 c8 60             	or     $0x60,%eax
f010c31f:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c324:	a0 75 a5 89 f0       	mov    0xf089a575,%al
f010c329:	83 c8 80             	or     $0xffffff80,%eax
f010c32c:	a2 75 a5 89 f0       	mov    %al,0xf089a575
f010c331:	b8 2c cd 10 f0       	mov    $0xf010cd2c,%eax
f010c336:	c1 e8 10             	shr    $0x10,%eax
f010c339:	66 a3 76 a5 89 f0    	mov    %ax,0xf089a576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c33f:	b8 32 cd 10 f0       	mov    $0xf010cd32,%eax
f010c344:	66 a3 78 a5 89 f0    	mov    %ax,0xf089a578
f010c34a:	66 c7 05 7a a5 89 f0 	movw   $0x8,0xf089a57a
f010c351:	08 00 
f010c353:	a0 7c a5 89 f0       	mov    0xf089a57c,%al
f010c358:	83 e0 e0             	and    $0xffffffe0,%eax
f010c35b:	a2 7c a5 89 f0       	mov    %al,0xf089a57c
f010c360:	a0 7c a5 89 f0       	mov    0xf089a57c,%al
f010c365:	83 e0 1f             	and    $0x1f,%eax
f010c368:	a2 7c a5 89 f0       	mov    %al,0xf089a57c
f010c36d:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c372:	83 e0 f0             	and    $0xfffffff0,%eax
f010c375:	83 c8 0e             	or     $0xe,%eax
f010c378:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c37d:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c382:	83 e0 ef             	and    $0xffffffef,%eax
f010c385:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c38a:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c38f:	83 c8 60             	or     $0x60,%eax
f010c392:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c397:	a0 7d a5 89 f0       	mov    0xf089a57d,%al
f010c39c:	83 c8 80             	or     $0xffffff80,%eax
f010c39f:	a2 7d a5 89 f0       	mov    %al,0xf089a57d
f010c3a4:	b8 32 cd 10 f0       	mov    $0xf010cd32,%eax
f010c3a9:	c1 e8 10             	shr    $0x10,%eax
f010c3ac:	66 a3 7e a5 89 f0    	mov    %ax,0xf089a57e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c3b2:	b8 38 cd 10 f0       	mov    $0xf010cd38,%eax
f010c3b7:	66 a3 80 a5 89 f0    	mov    %ax,0xf089a580
f010c3bd:	66 c7 05 82 a5 89 f0 	movw   $0x8,0xf089a582
f010c3c4:	08 00 
f010c3c6:	a0 84 a5 89 f0       	mov    0xf089a584,%al
f010c3cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3ce:	a2 84 a5 89 f0       	mov    %al,0xf089a584
f010c3d3:	a0 84 a5 89 f0       	mov    0xf089a584,%al
f010c3d8:	83 e0 1f             	and    $0x1f,%eax
f010c3db:	a2 84 a5 89 f0       	mov    %al,0xf089a584
f010c3e0:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c3e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3e8:	83 c8 0e             	or     $0xe,%eax
f010c3eb:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c3f0:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c3f5:	83 e0 ef             	and    $0xffffffef,%eax
f010c3f8:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c3fd:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c402:	83 c8 60             	or     $0x60,%eax
f010c405:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c40a:	a0 85 a5 89 f0       	mov    0xf089a585,%al
f010c40f:	83 c8 80             	or     $0xffffff80,%eax
f010c412:	a2 85 a5 89 f0       	mov    %al,0xf089a585
f010c417:	b8 38 cd 10 f0       	mov    $0xf010cd38,%eax
f010c41c:	c1 e8 10             	shr    $0x10,%eax
f010c41f:	66 a3 86 a5 89 f0    	mov    %ax,0xf089a586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c425:	b8 3e cd 10 f0       	mov    $0xf010cd3e,%eax
f010c42a:	66 a3 88 a5 89 f0    	mov    %ax,0xf089a588
f010c430:	66 c7 05 8a a5 89 f0 	movw   $0x8,0xf089a58a
f010c437:	08 00 
f010c439:	a0 8c a5 89 f0       	mov    0xf089a58c,%al
f010c43e:	83 e0 e0             	and    $0xffffffe0,%eax
f010c441:	a2 8c a5 89 f0       	mov    %al,0xf089a58c
f010c446:	a0 8c a5 89 f0       	mov    0xf089a58c,%al
f010c44b:	83 e0 1f             	and    $0x1f,%eax
f010c44e:	a2 8c a5 89 f0       	mov    %al,0xf089a58c
f010c453:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c458:	83 e0 f0             	and    $0xfffffff0,%eax
f010c45b:	83 c8 0e             	or     $0xe,%eax
f010c45e:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c463:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c468:	83 e0 ef             	and    $0xffffffef,%eax
f010c46b:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c470:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c475:	83 c8 60             	or     $0x60,%eax
f010c478:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c47d:	a0 8d a5 89 f0       	mov    0xf089a58d,%al
f010c482:	83 c8 80             	or     $0xffffff80,%eax
f010c485:	a2 8d a5 89 f0       	mov    %al,0xf089a58d
f010c48a:	b8 3e cd 10 f0       	mov    $0xf010cd3e,%eax
f010c48f:	c1 e8 10             	shr    $0x10,%eax
f010c492:	66 a3 8e a5 89 f0    	mov    %ax,0xf089a58e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c498:	b8 44 cd 10 f0       	mov    $0xf010cd44,%eax
f010c49d:	66 a3 90 a5 89 f0    	mov    %ax,0xf089a590
f010c4a3:	66 c7 05 92 a5 89 f0 	movw   $0x8,0xf089a592
f010c4aa:	08 00 
f010c4ac:	a0 94 a5 89 f0       	mov    0xf089a594,%al
f010c4b1:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4b4:	a2 94 a5 89 f0       	mov    %al,0xf089a594
f010c4b9:	a0 94 a5 89 f0       	mov    0xf089a594,%al
f010c4be:	83 e0 1f             	and    $0x1f,%eax
f010c4c1:	a2 94 a5 89 f0       	mov    %al,0xf089a594
f010c4c6:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c4cb:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4ce:	83 c8 0e             	or     $0xe,%eax
f010c4d1:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c4d6:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c4db:	83 e0 ef             	and    $0xffffffef,%eax
f010c4de:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c4e3:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c4e8:	83 c8 60             	or     $0x60,%eax
f010c4eb:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c4f0:	a0 95 a5 89 f0       	mov    0xf089a595,%al
f010c4f5:	83 c8 80             	or     $0xffffff80,%eax
f010c4f8:	a2 95 a5 89 f0       	mov    %al,0xf089a595
f010c4fd:	b8 44 cd 10 f0       	mov    $0xf010cd44,%eax
f010c502:	c1 e8 10             	shr    $0x10,%eax
f010c505:	66 a3 96 a5 89 f0    	mov    %ax,0xf089a596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c50b:	b8 4a cd 10 f0       	mov    $0xf010cd4a,%eax
f010c510:	66 a3 98 a5 89 f0    	mov    %ax,0xf089a598
f010c516:	66 c7 05 9a a5 89 f0 	movw   $0x8,0xf089a59a
f010c51d:	08 00 
f010c51f:	a0 9c a5 89 f0       	mov    0xf089a59c,%al
f010c524:	83 e0 e0             	and    $0xffffffe0,%eax
f010c527:	a2 9c a5 89 f0       	mov    %al,0xf089a59c
f010c52c:	a0 9c a5 89 f0       	mov    0xf089a59c,%al
f010c531:	83 e0 1f             	and    $0x1f,%eax
f010c534:	a2 9c a5 89 f0       	mov    %al,0xf089a59c
f010c539:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c53e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c541:	83 c8 0e             	or     $0xe,%eax
f010c544:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c549:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c54e:	83 e0 ef             	and    $0xffffffef,%eax
f010c551:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c556:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c55b:	83 c8 60             	or     $0x60,%eax
f010c55e:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c563:	a0 9d a5 89 f0       	mov    0xf089a59d,%al
f010c568:	83 c8 80             	or     $0xffffff80,%eax
f010c56b:	a2 9d a5 89 f0       	mov    %al,0xf089a59d
f010c570:	b8 4a cd 10 f0       	mov    $0xf010cd4a,%eax
f010c575:	c1 e8 10             	shr    $0x10,%eax
f010c578:	66 a3 9e a5 89 f0    	mov    %ax,0xf089a59e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c57e:	c7 05 44 ac 89 f0 00 	movl   $0xefc00000,0xf089ac44
f010c585:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c588:	66 c7 05 48 ac 89 f0 	movw   $0x10,0xf089ac48
f010c58f:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c591:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c598:	68 00 
f010c59a:	b8 40 ac 89 f0       	mov    $0xf089ac40,%eax
f010c59f:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c5a5:	b8 40 ac 89 f0       	mov    $0xf089ac40,%eax
f010c5aa:	c1 e8 10             	shr    $0x10,%eax
f010c5ad:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c5b2:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c5b7:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5ba:	83 c8 09             	or     $0x9,%eax
f010c5bd:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c5c2:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c5c7:	83 c8 10             	or     $0x10,%eax
f010c5ca:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c5cf:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c5d4:	83 e0 9f             	and    $0xffffff9f,%eax
f010c5d7:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c5dc:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c5e1:	83 c8 80             	or     $0xffffff80,%eax
f010c5e4:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c5e9:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c5ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5f1:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c5f6:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c5fb:	83 e0 ef             	and    $0xffffffef,%eax
f010c5fe:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c603:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c608:	83 e0 df             	and    $0xffffffdf,%eax
f010c60b:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c610:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c615:	83 c8 40             	or     $0x40,%eax
f010c618:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c61d:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c622:	83 e0 7f             	and    $0x7f,%eax
f010c625:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c62a:	b8 40 ac 89 f0       	mov    $0xf089ac40,%eax
f010c62f:	c1 e8 18             	shr    $0x18,%eax
f010c632:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c637:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c63c:	83 e0 ef             	and    $0xffffffef,%eax
f010c63f:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c644:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c64a:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c64e:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c651:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c658:	90                   	nop
f010c659:	c9                   	leave  
f010c65a:	c3                   	ret    

f010c65b <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c65b:	55                   	push   %ebp
f010c65c:	89 e5                	mov    %esp,%ebp
f010c65e:	53                   	push   %ebx
f010c65f:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c662:	83 ec 08             	sub    $0x8,%esp
f010c665:	ff 75 08             	pushl  0x8(%ebp)
f010c668:	68 bb 78 13 f0       	push   $0xf01378bb
f010c66d:	e8 9c 46 ff ff       	call   f0100d0e <cprintf>
f010c672:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c675:	8b 45 08             	mov    0x8(%ebp),%eax
f010c678:	83 ec 0c             	sub    $0xc,%esp
f010c67b:	50                   	push   %eax
f010c67c:	e8 fd 00 00 00       	call   f010c77e <print_regs>
f010c681:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c684:	8b 45 08             	mov    0x8(%ebp),%eax
f010c687:	8b 40 20             	mov    0x20(%eax),%eax
f010c68a:	0f b7 c0             	movzwl %ax,%eax
f010c68d:	83 ec 08             	sub    $0x8,%esp
f010c690:	50                   	push   %eax
f010c691:	68 cd 78 13 f0       	push   $0xf01378cd
f010c696:	e8 73 46 ff ff       	call   f0100d0e <cprintf>
f010c69b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c69e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6a1:	8b 40 24             	mov    0x24(%eax),%eax
f010c6a4:	0f b7 c0             	movzwl %ax,%eax
f010c6a7:	83 ec 08             	sub    $0x8,%esp
f010c6aa:	50                   	push   %eax
f010c6ab:	68 e0 78 13 f0       	push   $0xf01378e0
f010c6b0:	e8 59 46 ff ff       	call   f0100d0e <cprintf>
f010c6b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c6b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6bb:	8b 58 28             	mov    0x28(%eax),%ebx
f010c6be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6c1:	8b 40 28             	mov    0x28(%eax),%eax
f010c6c4:	83 ec 0c             	sub    $0xc,%esp
f010c6c7:	50                   	push   %eax
f010c6c8:	e8 d0 ee ff ff       	call   f010b59d <trapname>
f010c6cd:	83 c4 10             	add    $0x10,%esp
f010c6d0:	89 c2                	mov    %eax,%edx
f010c6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6d5:	8b 40 28             	mov    0x28(%eax),%eax
f010c6d8:	53                   	push   %ebx
f010c6d9:	52                   	push   %edx
f010c6da:	50                   	push   %eax
f010c6db:	68 f3 78 13 f0       	push   $0xf01378f3
f010c6e0:	e8 29 46 ff ff       	call   f0100d0e <cprintf>
f010c6e5:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6eb:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c6ee:	83 ec 08             	sub    $0x8,%esp
f010c6f1:	50                   	push   %eax
f010c6f2:	68 0a 79 13 f0       	push   $0xf013790a
f010c6f7:	e8 12 46 ff ff       	call   f0100d0e <cprintf>
f010c6fc:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c6ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010c702:	8b 40 30             	mov    0x30(%eax),%eax
f010c705:	83 ec 08             	sub    $0x8,%esp
f010c708:	50                   	push   %eax
f010c709:	68 19 79 13 f0       	push   $0xf0137919
f010c70e:	e8 fb 45 ff ff       	call   f0100d0e <cprintf>
f010c713:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c716:	8b 45 08             	mov    0x8(%ebp),%eax
f010c719:	8b 40 34             	mov    0x34(%eax),%eax
f010c71c:	0f b7 c0             	movzwl %ax,%eax
f010c71f:	83 ec 08             	sub    $0x8,%esp
f010c722:	50                   	push   %eax
f010c723:	68 28 79 13 f0       	push   $0xf0137928
f010c728:	e8 e1 45 ff ff       	call   f0100d0e <cprintf>
f010c72d:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c730:	8b 45 08             	mov    0x8(%ebp),%eax
f010c733:	8b 40 38             	mov    0x38(%eax),%eax
f010c736:	83 ec 08             	sub    $0x8,%esp
f010c739:	50                   	push   %eax
f010c73a:	68 3b 79 13 f0       	push   $0xf013793b
f010c73f:	e8 ca 45 ff ff       	call   f0100d0e <cprintf>
f010c744:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c747:	8b 45 08             	mov    0x8(%ebp),%eax
f010c74a:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c74d:	83 ec 08             	sub    $0x8,%esp
f010c750:	50                   	push   %eax
f010c751:	68 4a 79 13 f0       	push   $0xf013794a
f010c756:	e8 b3 45 ff ff       	call   f0100d0e <cprintf>
f010c75b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c75e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c761:	8b 40 40             	mov    0x40(%eax),%eax
f010c764:	0f b7 c0             	movzwl %ax,%eax
f010c767:	83 ec 08             	sub    $0x8,%esp
f010c76a:	50                   	push   %eax
f010c76b:	68 59 79 13 f0       	push   $0xf0137959
f010c770:	e8 99 45 ff ff       	call   f0100d0e <cprintf>
f010c775:	83 c4 10             	add    $0x10,%esp
}
f010c778:	90                   	nop
f010c779:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c77c:	c9                   	leave  
f010c77d:	c3                   	ret    

f010c77e <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c77e:	55                   	push   %ebp
f010c77f:	89 e5                	mov    %esp,%ebp
f010c781:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c784:	8b 45 08             	mov    0x8(%ebp),%eax
f010c787:	8b 00                	mov    (%eax),%eax
f010c789:	83 ec 08             	sub    $0x8,%esp
f010c78c:	50                   	push   %eax
f010c78d:	68 6c 79 13 f0       	push   $0xf013796c
f010c792:	e8 77 45 ff ff       	call   f0100d0e <cprintf>
f010c797:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c79a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c79d:	8b 40 04             	mov    0x4(%eax),%eax
f010c7a0:	83 ec 08             	sub    $0x8,%esp
f010c7a3:	50                   	push   %eax
f010c7a4:	68 7b 79 13 f0       	push   $0xf013797b
f010c7a9:	e8 60 45 ff ff       	call   f0100d0e <cprintf>
f010c7ae:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c7b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7b4:	8b 40 08             	mov    0x8(%eax),%eax
f010c7b7:	83 ec 08             	sub    $0x8,%esp
f010c7ba:	50                   	push   %eax
f010c7bb:	68 8a 79 13 f0       	push   $0xf013798a
f010c7c0:	e8 49 45 ff ff       	call   f0100d0e <cprintf>
f010c7c5:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7cb:	8b 40 0c             	mov    0xc(%eax),%eax
f010c7ce:	83 ec 08             	sub    $0x8,%esp
f010c7d1:	50                   	push   %eax
f010c7d2:	68 99 79 13 f0       	push   $0xf0137999
f010c7d7:	e8 32 45 ff ff       	call   f0100d0e <cprintf>
f010c7dc:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c7df:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7e2:	8b 40 10             	mov    0x10(%eax),%eax
f010c7e5:	83 ec 08             	sub    $0x8,%esp
f010c7e8:	50                   	push   %eax
f010c7e9:	68 a8 79 13 f0       	push   $0xf01379a8
f010c7ee:	e8 1b 45 ff ff       	call   f0100d0e <cprintf>
f010c7f3:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c7f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f9:	8b 40 14             	mov    0x14(%eax),%eax
f010c7fc:	83 ec 08             	sub    $0x8,%esp
f010c7ff:	50                   	push   %eax
f010c800:	68 b7 79 13 f0       	push   $0xf01379b7
f010c805:	e8 04 45 ff ff       	call   f0100d0e <cprintf>
f010c80a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c80d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c810:	8b 40 18             	mov    0x18(%eax),%eax
f010c813:	83 ec 08             	sub    $0x8,%esp
f010c816:	50                   	push   %eax
f010c817:	68 c6 79 13 f0       	push   $0xf01379c6
f010c81c:	e8 ed 44 ff ff       	call   f0100d0e <cprintf>
f010c821:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c824:	8b 45 08             	mov    0x8(%ebp),%eax
f010c827:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c82a:	83 ec 08             	sub    $0x8,%esp
f010c82d:	50                   	push   %eax
f010c82e:	68 d5 79 13 f0       	push   $0xf01379d5
f010c833:	e8 d6 44 ff ff       	call   f0100d0e <cprintf>
f010c838:	83 c4 10             	add    $0x10,%esp
}
f010c83b:	90                   	nop
f010c83c:	c9                   	leave  
f010c83d:	c3                   	ret    

f010c83e <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c83e:	55                   	push   %ebp
f010c83f:	89 e5                	mov    %esp,%ebp
f010c841:	57                   	push   %edi
f010c842:	56                   	push   %esi
f010c843:	53                   	push   %ebx
f010c844:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c847:	8b 45 08             	mov    0x8(%ebp),%eax
f010c84a:	8b 40 28             	mov    0x28(%eax),%eax
f010c84d:	83 f8 0e             	cmp    $0xe,%eax
f010c850:	75 29                	jne    f010c87b <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c852:	83 ec 0c             	sub    $0xc,%esp
f010c855:	6a 01                	push   $0x1
f010c857:	e8 fb 18 00 00       	call   f010e157 <isPageReplacmentAlgorithmLRU>
f010c85c:	83 c4 10             	add    $0x10,%esp
f010c85f:	85 c0                	test   %eax,%eax
f010c861:	74 05                	je     f010c868 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c863:	e8 c4 91 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c868:	83 ec 0c             	sub    $0xc,%esp
f010c86b:	ff 75 08             	pushl  0x8(%ebp)
f010c86e:	e8 51 02 00 00       	call   f010cac4 <fault_handler>
f010c873:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c876:	e9 bb 00 00 00       	jmp    f010c936 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c87b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c87e:	8b 40 28             	mov    0x28(%eax),%eax
f010c881:	83 f8 30             	cmp    $0x30,%eax
f010c884:	75 42                	jne    f010c8c8 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c886:	8b 45 08             	mov    0x8(%ebp),%eax
f010c889:	8b 78 04             	mov    0x4(%eax),%edi
f010c88c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c88f:	8b 30                	mov    (%eax),%esi
f010c891:	8b 45 08             	mov    0x8(%ebp),%eax
f010c894:	8b 58 10             	mov    0x10(%eax),%ebx
f010c897:	8b 45 08             	mov    0x8(%ebp),%eax
f010c89a:	8b 48 18             	mov    0x18(%eax),%ecx
f010c89d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a0:	8b 50 14             	mov    0x14(%eax),%edx
f010c8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a6:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c8a9:	83 ec 08             	sub    $0x8,%esp
f010c8ac:	57                   	push   %edi
f010c8ad:	56                   	push   %esi
f010c8ae:	53                   	push   %ebx
f010c8af:	51                   	push   %ecx
f010c8b0:	52                   	push   %edx
f010c8b1:	50                   	push   %eax
f010c8b2:	e8 eb 0f 00 00       	call   f010d8a2 <syscall>
f010c8b7:	83 c4 20             	add    $0x20,%esp
f010c8ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c8c3:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c8c6:	eb 6e                	jmp    f010c936 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c8c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8cb:	8b 40 28             	mov    0x28(%eax),%eax
f010c8ce:	83 f8 08             	cmp    $0x8,%eax
f010c8d1:	75 17                	jne    f010c8ea <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c8d3:	83 ec 04             	sub    $0x4,%esp
f010c8d6:	68 e4 79 13 f0       	push   $0xf01379e4
f010c8db:	68 e7 00 00 00       	push   $0xe7
f010c8e0:	68 f3 79 13 f0       	push   $0xf01379f3
f010c8e5:	e8 1b 39 ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c8ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ed:	8b 40 28             	mov    0x28(%eax),%eax
f010c8f0:	83 f8 20             	cmp    $0x20,%eax
f010c8f3:	75 07                	jne    f010c8fc <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c8f5:	e8 11 91 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c8fa:	eb 3a                	jmp    f010c936 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ff:	8b 40 34             	mov    0x34(%eax),%eax
f010c902:	66 83 f8 08          	cmp    $0x8,%ax
f010c906:	75 17                	jne    f010c91f <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c908:	83 ec 04             	sub    $0x4,%esp
f010c90b:	68 04 7a 13 f0       	push   $0xf0137a04
f010c910:	68 f4 00 00 00       	push   $0xf4
f010c915:	68 f3 79 13 f0       	push   $0xf01379f3
f010c91a:	e8 e6 38 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c91f:	83 ec 04             	sub    $0x4,%esp
f010c922:	68 20 7a 13 f0       	push   $0xf0137a20
f010c927:	68 f8 00 00 00       	push   $0xf8
f010c92c:	68 f3 79 13 f0       	push   $0xf01379f3
f010c931:	e8 cf 38 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c936:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c939:	5b                   	pop    %ebx
f010c93a:	5e                   	pop    %esi
f010c93b:	5f                   	pop    %edi
f010c93c:	5d                   	pop    %ebp
f010c93d:	c3                   	ret    

f010c93e <trap>:

void trap(struct Trapframe *tf)
{
f010c93e:	55                   	push   %ebp
f010c93f:	89 e5                	mov    %esp,%ebp
f010c941:	57                   	push   %edi
f010c942:	56                   	push   %esi
f010c943:	53                   	push   %ebx
f010c944:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c947:	e8 48 78 ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c94c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c953:	8b 45 08             	mov    0x8(%ebp),%eax
f010c956:	8b 40 34             	mov    0x34(%eax),%eax
f010c959:	0f b7 c0             	movzwl %ax,%eax
f010c95c:	83 e0 03             	and    $0x3,%eax
f010c95f:	83 f8 03             	cmp    $0x3,%eax
f010c962:	75 49                	jne    f010c9ad <trap+0x6f>
		assert(curenv);
f010c964:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010c969:	85 c0                	test   %eax,%eax
f010c96b:	75 19                	jne    f010c986 <trap+0x48>
f010c96d:	68 3f 7a 13 f0       	push   $0xf0137a3f
f010c972:	68 46 7a 13 f0       	push   $0xf0137a46
f010c977:	68 06 01 00 00       	push   $0x106
f010c97c:	68 f3 79 13 f0       	push   $0xf01379f3
f010c981:	e8 7f 38 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c986:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010c98c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c98f:	89 c3                	mov    %eax,%ebx
f010c991:	b8 11 00 00 00       	mov    $0x11,%eax
f010c996:	89 d7                	mov    %edx,%edi
f010c998:	89 de                	mov    %ebx,%esi
f010c99a:	89 c1                	mov    %eax,%ecx
f010c99c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c99e:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010c9a3:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c9a6:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c9ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9b0:	8b 40 28             	mov    0x28(%eax),%eax
f010c9b3:	83 f8 20             	cmp    $0x20,%eax
f010c9b6:	75 40                	jne    f010c9f8 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c9b8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c9bc:	0f 84 a6 00 00 00    	je     f010ca68 <trap+0x12a>
		{
			assert(curenv);
f010c9c2:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010c9c7:	85 c0                	test   %eax,%eax
f010c9c9:	75 19                	jne    f010c9e4 <trap+0xa6>
f010c9cb:	68 3f 7a 13 f0       	push   $0xf0137a3f
f010c9d0:	68 46 7a 13 f0       	push   $0xf0137a46
f010c9d5:	68 12 01 00 00       	push   $0x112
f010c9da:	68 f3 79 13 f0       	push   $0xf01379f3
f010c9df:	e8 21 38 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c9e4:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010c9e9:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c9ef:	42                   	inc    %edx
f010c9f0:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c9f6:	eb 70                	jmp    f010ca68 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c9f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fb:	8b 40 28             	mov    0x28(%eax),%eax
f010c9fe:	83 f8 0e             	cmp    $0xe,%eax
f010ca01:	75 65                	jne    f010ca68 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010ca03:	a0 a8 ac 89 f0       	mov    0xf089aca8,%al
f010ca08:	84 c0                	test   %al,%al
f010ca0a:	74 5c                	je     f010ca68 <trap+0x12a>
			if (userTrap){
f010ca0c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ca10:	74 2c                	je     f010ca3e <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010ca12:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ca17:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010ca1d:	8b 52 30             	mov    0x30(%edx),%edx
f010ca20:	89 d1                	mov    %edx,%ecx
f010ca22:	8a 15 a8 ac 89 f0    	mov    0xf089aca8,%dl
f010ca28:	0f b6 d2             	movzbl %dl,%edx
f010ca2b:	01 ca                	add    %ecx,%edx
f010ca2d:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010ca30:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ca35:	83 ec 0c             	sub    $0xc,%esp
f010ca38:	50                   	push   %eax
f010ca39:	e8 43 d4 ff ff       	call   f0109e81 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010ca3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca41:	8b 40 30             	mov    0x30(%eax),%eax
f010ca44:	89 c2                	mov    %eax,%edx
f010ca46:	a0 a8 ac 89 f0       	mov    0xf089aca8,%al
f010ca4b:	0f b6 c0             	movzbl %al,%eax
f010ca4e:	01 d0                	add    %edx,%eax
f010ca50:	89 c2                	mov    %eax,%edx
f010ca52:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca55:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010ca58:	e8 62 77 ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010ca5d:	83 ec 0c             	sub    $0xc,%esp
f010ca60:	ff 75 08             	pushl  0x8(%ebp)
f010ca63:	e8 7c d5 ff ff       	call   f0109fe4 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010ca68:	83 ec 0c             	sub    $0xc,%esp
f010ca6b:	ff 75 08             	pushl  0x8(%ebp)
f010ca6e:	e8 cb fd ff ff       	call   f010c83e <trap_dispatch>
f010ca73:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010ca76:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ca7a:	74 3d                	je     f010cab9 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010ca7c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ca81:	85 c0                	test   %eax,%eax
f010ca83:	74 0d                	je     f010ca92 <trap+0x154>
f010ca85:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ca8a:	8b 40 54             	mov    0x54(%eax),%eax
f010ca8d:	83 f8 02             	cmp    $0x2,%eax
f010ca90:	74 19                	je     f010caab <trap+0x16d>
f010ca92:	68 5c 7a 13 f0       	push   $0xf0137a5c
f010ca97:	68 46 7a 13 f0       	push   $0xf0137a46
f010ca9c:	68 27 01 00 00       	push   $0x127
f010caa1:	68 f3 79 13 f0       	push   $0xf01379f3
f010caa6:	e8 5a 37 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010caab:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cab0:	83 ec 0c             	sub    $0xc,%esp
f010cab3:	50                   	push   %eax
f010cab4:	e8 c8 d3 ff ff       	call   f0109e81 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010cab9:	83 ec 0c             	sub    $0xc,%esp
f010cabc:	ff 75 08             	pushl  0x8(%ebp)
f010cabf:	e8 20 d5 ff ff       	call   f0109fe4 <env_pop_tf>

f010cac4 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010cac4:	55                   	push   %ebp
f010cac5:	89 e5                	mov    %esp,%ebp
f010cac7:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010caca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cad1:	8b 45 08             	mov    0x8(%ebp),%eax
f010cad4:	8b 40 34             	mov    0x34(%eax),%eax
f010cad7:	0f b7 c0             	movzwl %ax,%eax
f010cada:	83 e0 03             	and    $0x3,%eax
f010cadd:	83 f8 03             	cmp    $0x3,%eax
f010cae0:	75 07                	jne    f010cae9 <fault_handler+0x25>
		userTrap = 1;
f010cae2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cae9:	0f 20 d0             	mov    %cr2,%eax
f010caec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010caef:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010caf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010caf5:	a1 20 ac 89 f0       	mov    0xf089ac20,%eax
f010cafa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cafd:	75 2b                	jne    f010cb2a <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010caff:	a0 24 ac 89 f0       	mov    0xf089ac24,%al
f010cb04:	40                   	inc    %eax
f010cb05:	a2 24 ac 89 f0       	mov    %al,0xf089ac24
		if (num_repeated_fault == 3)
f010cb0a:	a0 24 ac 89 f0       	mov    0xf089ac24,%al
f010cb0f:	3c 03                	cmp    $0x3,%al
f010cb11:	75 1e                	jne    f010cb31 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010cb13:	ff 75 ec             	pushl  -0x14(%ebp)
f010cb16:	68 8c 7a 13 f0       	push   $0xf0137a8c
f010cb1b:	68 47 01 00 00       	push   $0x147
f010cb20:	68 f3 79 13 f0       	push   $0xf01379f3
f010cb25:	e8 db 36 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010cb2a:	c6 05 24 ac 89 f0 00 	movb   $0x0,0xf089ac24
	}
	last_fault_va = fault_va ;
f010cb31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb34:	a3 20 ac 89 f0       	mov    %eax,0xf089ac20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010cb39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cb3d:	75 29                	jne    f010cb68 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010cb3f:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cb46:	77 40                	ja     f010cb88 <fault_handler+0xc4>
f010cb48:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cb4f:	76 37                	jbe    f010cb88 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010cb51:	83 ec 04             	sub    $0x4,%esp
f010cb54:	68 d8 7a 13 f0       	push   $0xf0137ad8
f010cb59:	68 53 01 00 00       	push   $0x153
f010cb5e:	68 f3 79 13 f0       	push   $0xf01379f3
f010cb63:	e8 9d 36 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010cb68:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cb6f:	76 17                	jbe    f010cb88 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010cb71:	83 ec 04             	sub    $0x4,%esp
f010cb74:	68 fc 7a 13 f0       	push   $0xf0137afc
f010cb79:	68 59 01 00 00       	push   $0x159
f010cb7e:	68 f3 79 13 f0       	push   $0xf01379f3
f010cb83:	e8 7d 36 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cb88:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cb8d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cb90:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb93:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cb96:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cb99:	c1 ea 16             	shr    $0x16,%edx
f010cb9c:	c1 e2 02             	shl    $0x2,%edx
f010cb9f:	01 d0                	add    %edx,%eax
f010cba1:	8b 00                	mov    (%eax),%eax
f010cba3:	83 e0 01             	and    $0x1,%eax
f010cba6:	85 c0                	test   %eax,%eax
f010cba8:	75 28                	jne    f010cbd2 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cbaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cbad:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010cbb3:	8d 50 01             	lea    0x1(%eax),%edx
f010cbb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cbb9:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cbbf:	83 ec 08             	sub    $0x8,%esp
f010cbc2:	ff 75 ec             	pushl  -0x14(%ebp)
f010cbc5:	ff 75 e8             	pushl  -0x18(%ebp)
f010cbc8:	e8 6f 16 00 00       	call   f010e23c <table_fault_handler>
f010cbcd:	83 c4 10             	add    $0x10,%esp
f010cbd0:	eb 7b                	jmp    f010cc4d <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cbd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cbd5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cbd8:	83 ec 08             	sub    $0x8,%esp
f010cbdb:	ff 75 ec             	pushl  -0x14(%ebp)
f010cbde:	50                   	push   %eax
f010cbdf:	e8 84 b3 ff ff       	call   f0107f68 <pt_get_page_permissions>
f010cbe4:	83 c4 10             	add    $0x10,%esp
f010cbe7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cbea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cbed:	83 e0 01             	and    $0x1,%eax
f010cbf0:	85 c0                	test   %eax,%eax
f010cbf2:	74 17                	je     f010cc0b <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cbf4:	ff 75 ec             	pushl  -0x14(%ebp)
f010cbf7:	68 20 7b 13 f0       	push   $0xf0137b20
f010cbfc:	68 6e 01 00 00       	push   $0x16e
f010cc01:	68 f3 79 13 f0       	push   $0xf01379f3
f010cc06:	e8 fa 35 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010cc0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc0e:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010cc14:	8d 50 01             	lea    0x1(%eax),%edx
f010cc17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc1a:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010cc20:	e8 f5 15 00 00       	call   f010e21a <isBufferingEnabled>
f010cc25:	84 c0                	test   %al,%al
f010cc27:	74 13                	je     f010cc3c <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010cc29:	83 ec 08             	sub    $0x8,%esp
f010cc2c:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc2f:	ff 75 e8             	pushl  -0x18(%ebp)
f010cc32:	e8 8b 18 00 00       	call   f010e4c2 <__page_fault_handler_with_buffering>
f010cc37:	83 c4 10             	add    $0x10,%esp
f010cc3a:	eb 11                	jmp    f010cc4d <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cc3c:	83 ec 08             	sub    $0x8,%esp
f010cc3f:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc42:	ff 75 e8             	pushl  -0x18(%ebp)
f010cc45:	e8 13 16 00 00       	call   f010e25d <page_fault_handler>
f010cc4a:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010cc4d:	0f 20 d8             	mov    %cr3,%eax
f010cc50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010cc53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc56:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cc59:	90                   	nop
f010cc5a:	c9                   	leave  
f010cc5b:	c3                   	ret    

f010cc5c <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cc5c:	6a 0e                	push   $0xe
f010cc5e:	e9 ed 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc63:	90                   	nop

f010cc64 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cc64:	6a 00                	push   $0x0
f010cc66:	6a 30                	push   $0x30
f010cc68:	e9 e3 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc6d:	90                   	nop

f010cc6e <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cc6e:	6a 08                	push   $0x8
f010cc70:	e9 db 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc75:	90                   	nop

f010cc76 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cc76:	6a 00                	push   $0x0
f010cc78:	6a 00                	push   $0x0
f010cc7a:	e9 d1 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc7f:	90                   	nop

f010cc80 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cc80:	6a 00                	push   $0x0
f010cc82:	6a 01                	push   $0x1
f010cc84:	e9 c7 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc89:	90                   	nop

f010cc8a <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cc8a:	6a 00                	push   $0x0
f010cc8c:	6a 02                	push   $0x2
f010cc8e:	e9 bd 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc93:	90                   	nop

f010cc94 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cc94:	6a 00                	push   $0x0
f010cc96:	6a 03                	push   $0x3
f010cc98:	e9 b3 00 00 00       	jmp    f010cd50 <_alltraps>
f010cc9d:	90                   	nop

f010cc9e <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cc9e:	6a 00                	push   $0x0
f010cca0:	6a 04                	push   $0x4
f010cca2:	e9 a9 00 00 00       	jmp    f010cd50 <_alltraps>
f010cca7:	90                   	nop

f010cca8 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cca8:	6a 00                	push   $0x0
f010ccaa:	6a 05                	push   $0x5
f010ccac:	e9 9f 00 00 00       	jmp    f010cd50 <_alltraps>
f010ccb1:	90                   	nop

f010ccb2 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010ccb2:	6a 00                	push   $0x0
f010ccb4:	6a 06                	push   $0x6
f010ccb6:	e9 95 00 00 00       	jmp    f010cd50 <_alltraps>
f010ccbb:	90                   	nop

f010ccbc <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010ccbc:	6a 00                	push   $0x0
f010ccbe:	6a 07                	push   $0x7
f010ccc0:	e9 8b 00 00 00       	jmp    f010cd50 <_alltraps>
f010ccc5:	90                   	nop

f010ccc6 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010ccc6:	6a 0a                	push   $0xa
f010ccc8:	e9 83 00 00 00       	jmp    f010cd50 <_alltraps>
f010cccd:	90                   	nop

f010ccce <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010ccce:	6a 0b                	push   $0xb
f010ccd0:	eb 7e                	jmp    f010cd50 <_alltraps>

f010ccd2 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010ccd2:	6a 0c                	push   $0xc
f010ccd4:	eb 7a                	jmp    f010cd50 <_alltraps>

f010ccd6 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010ccd6:	6a 0d                	push   $0xd
f010ccd8:	eb 76                	jmp    f010cd50 <_alltraps>

f010ccda <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010ccda:	6a 00                	push   $0x0
f010ccdc:	6a 10                	push   $0x10
f010ccde:	eb 70                	jmp    f010cd50 <_alltraps>

f010cce0 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cce0:	6a 11                	push   $0x11
f010cce2:	eb 6c                	jmp    f010cd50 <_alltraps>

f010cce4 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cce4:	6a 00                	push   $0x0
f010cce6:	6a 12                	push   $0x12
f010cce8:	eb 66                	jmp    f010cd50 <_alltraps>

f010ccea <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010ccea:	6a 00                	push   $0x0
f010ccec:	6a 13                	push   $0x13
f010ccee:	eb 60                	jmp    f010cd50 <_alltraps>

f010ccf0 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010ccf0:	6a 00                	push   $0x0
f010ccf2:	6a 20                	push   $0x20
f010ccf4:	eb 5a                	jmp    f010cd50 <_alltraps>

f010ccf6 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010ccf6:	6a 00                	push   $0x0
f010ccf8:	6a 21                	push   $0x21
f010ccfa:	eb 54                	jmp    f010cd50 <_alltraps>

f010ccfc <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010ccfc:	6a 00                	push   $0x0
f010ccfe:	6a 22                	push   $0x22
f010cd00:	eb 4e                	jmp    f010cd50 <_alltraps>

f010cd02 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cd02:	6a 00                	push   $0x0
f010cd04:	6a 23                	push   $0x23
f010cd06:	eb 48                	jmp    f010cd50 <_alltraps>

f010cd08 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cd08:	6a 00                	push   $0x0
f010cd0a:	6a 24                	push   $0x24
f010cd0c:	eb 42                	jmp    f010cd50 <_alltraps>

f010cd0e <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cd0e:	6a 00                	push   $0x0
f010cd10:	6a 25                	push   $0x25
f010cd12:	eb 3c                	jmp    f010cd50 <_alltraps>

f010cd14 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cd14:	6a 00                	push   $0x0
f010cd16:	6a 26                	push   $0x26
f010cd18:	eb 36                	jmp    f010cd50 <_alltraps>

f010cd1a <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cd1a:	6a 00                	push   $0x0
f010cd1c:	6a 27                	push   $0x27
f010cd1e:	eb 30                	jmp    f010cd50 <_alltraps>

f010cd20 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cd20:	6a 00                	push   $0x0
f010cd22:	6a 28                	push   $0x28
f010cd24:	eb 2a                	jmp    f010cd50 <_alltraps>

f010cd26 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cd26:	6a 00                	push   $0x0
f010cd28:	6a 29                	push   $0x29
f010cd2a:	eb 24                	jmp    f010cd50 <_alltraps>

f010cd2c <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cd2c:	6a 00                	push   $0x0
f010cd2e:	6a 2a                	push   $0x2a
f010cd30:	eb 1e                	jmp    f010cd50 <_alltraps>

f010cd32 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cd32:	6a 00                	push   $0x0
f010cd34:	6a 2b                	push   $0x2b
f010cd36:	eb 18                	jmp    f010cd50 <_alltraps>

f010cd38 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cd38:	6a 00                	push   $0x0
f010cd3a:	6a 2c                	push   $0x2c
f010cd3c:	eb 12                	jmp    f010cd50 <_alltraps>

f010cd3e <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cd3e:	6a 00                	push   $0x0
f010cd40:	6a 2d                	push   $0x2d
f010cd42:	eb 0c                	jmp    f010cd50 <_alltraps>

f010cd44 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cd44:	6a 00                	push   $0x0
f010cd46:	6a 2e                	push   $0x2e
f010cd48:	eb 06                	jmp    f010cd50 <_alltraps>

f010cd4a <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cd4a:	6a 00                	push   $0x0
f010cd4c:	6a 2f                	push   $0x2f
f010cd4e:	eb 00                	jmp    f010cd50 <_alltraps>

f010cd50 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cd50:	1e                   	push   %ds
push %es
f010cd51:	06                   	push   %es
pushal
f010cd52:	60                   	pusha  

mov $(GD_KD), %ax
f010cd53:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cd57:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cd59:	8e c0                	mov    %eax,%es

push %esp
f010cd5b:	54                   	push   %esp

call trap
f010cd5c:	e8 dd fb ff ff       	call   f010c93e <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cd61:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cd62:	61                   	popa   
pop %es
f010cd63:	07                   	pop    %es
pop %ds
f010cd64:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cd65:	83 c4 08             	add    $0x8,%esp

iret
f010cd68:	cf                   	iret   

f010cd69 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cd69:	55                   	push   %ebp
f010cd6a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cd6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd6f:	8b 15 54 ad 89 f0    	mov    0xf089ad54,%edx
f010cd75:	29 d0                	sub    %edx,%eax
f010cd77:	c1 f8 03             	sar    $0x3,%eax
f010cd7a:	89 c2                	mov    %eax,%edx
f010cd7c:	89 d0                	mov    %edx,%eax
f010cd7e:	c1 e0 02             	shl    $0x2,%eax
f010cd81:	01 d0                	add    %edx,%eax
f010cd83:	c1 e0 02             	shl    $0x2,%eax
f010cd86:	01 d0                	add    %edx,%eax
f010cd88:	c1 e0 02             	shl    $0x2,%eax
f010cd8b:	01 d0                	add    %edx,%eax
f010cd8d:	89 c1                	mov    %eax,%ecx
f010cd8f:	c1 e1 08             	shl    $0x8,%ecx
f010cd92:	01 c8                	add    %ecx,%eax
f010cd94:	89 c1                	mov    %eax,%ecx
f010cd96:	c1 e1 10             	shl    $0x10,%ecx
f010cd99:	01 c8                	add    %ecx,%eax
f010cd9b:	01 c0                	add    %eax,%eax
f010cd9d:	01 d0                	add    %edx,%eax
}
f010cd9f:	5d                   	pop    %ebp
f010cda0:	c3                   	ret    

f010cda1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cda1:	55                   	push   %ebp
f010cda2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cda4:	ff 75 08             	pushl  0x8(%ebp)
f010cda7:	e8 bd ff ff ff       	call   f010cd69 <to_frame_number>
f010cdac:	83 c4 04             	add    $0x4,%esp
f010cdaf:	c1 e0 0c             	shl    $0xc,%eax
}
f010cdb2:	c9                   	leave  
f010cdb3:	c3                   	ret    

f010cdb4 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cdb4:	55                   	push   %ebp
f010cdb5:	89 e5                	mov    %esp,%ebp
f010cdb7:	83 ec 18             	sub    $0x18,%esp
f010cdba:	8b 45 10             	mov    0x10(%ebp),%eax
f010cdbd:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cdc0:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cdc4:	74 26                	je     f010cdec <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cdc6:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cdcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cdce:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010cdd4:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cdda:	83 ec 04             	sub    $0x4,%esp
f010cddd:	50                   	push   %eax
f010cdde:	52                   	push   %edx
f010cddf:	68 10 7d 13 f0       	push   $0xf0137d10
f010cde4:	e8 25 3f ff ff       	call   f0100d0e <cprintf>
f010cde9:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cdec:	83 ec 04             	sub    $0x4,%esp
f010cdef:	ff 75 08             	pushl  0x8(%ebp)
f010cdf2:	ff 75 0c             	pushl  0xc(%ebp)
f010cdf5:	68 19 7d 13 f0       	push   $0xf0137d19
f010cdfa:	e8 0f 3f ff ff       	call   f0100d0e <cprintf>
f010cdff:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010ce02:	90                   	nop
f010ce03:	c9                   	leave  
f010ce04:	c3                   	ret    

f010ce05 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010ce05:	55                   	push   %ebp
f010ce06:	89 e5                	mov    %esp,%ebp
f010ce08:	83 ec 18             	sub    $0x18,%esp
f010ce0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce0e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010ce11:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010ce15:	83 ec 08             	sub    $0x8,%esp
f010ce18:	50                   	push   %eax
f010ce19:	68 1e 7d 13 f0       	push   $0xf0137d1e
f010ce1e:	e8 eb 3e ff ff       	call   f0100d0e <cprintf>
f010ce23:	83 c4 10             	add    $0x10,%esp
}
f010ce26:	90                   	nop
f010ce27:	c9                   	leave  
f010ce28:	c3                   	ret    

f010ce29 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ce29:	55                   	push   %ebp
f010ce2a:	89 e5                	mov    %esp,%ebp
f010ce2c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ce2f:	e8 14 3d ff ff       	call   f0100b48 <cons_getc2>
f010ce34:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010ce37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ce3a:	c9                   	leave  
f010ce3b:	c3                   	ret    

f010ce3c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010ce3c:	55                   	push   %ebp
f010ce3d:	89 e5                	mov    %esp,%ebp
f010ce3f:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ce42:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010ce47:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010ce4a:	83 ec 0c             	sub    $0xc,%esp
f010ce4d:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010ce50:	50                   	push   %eax
f010ce51:	e8 9c 9a ff ff       	call   f01068f2 <allocate_frame>
f010ce56:	83 c4 10             	add    $0x10,%esp
f010ce59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ce5c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010ce60:	75 08                	jne    f010ce6a <__sys_allocate_page+0x2e>
		return r ;
f010ce62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce65:	e9 e9 00 00 00       	jmp    f010cf53 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010ce6a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce6d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010ce72:	77 0c                	ja     f010ce80 <__sys_allocate_page+0x44>
f010ce74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce77:	25 ff 0f 00 00       	and    $0xfff,%eax
f010ce7c:	85 c0                	test   %eax,%eax
f010ce7e:	74 0a                	je     f010ce8a <__sys_allocate_page+0x4e>
		return E_INVAL;
f010ce80:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ce85:	e9 c9 00 00 00       	jmp    f010cf53 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010ce8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce8d:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010ce92:	83 f8 04             	cmp    $0x4,%eax
f010ce95:	74 0a                	je     f010cea1 <__sys_allocate_page+0x65>
		return E_INVAL;
f010ce97:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010ce9c:	e9 b2 00 00 00       	jmp    f010cf53 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cea4:	83 ec 0c             	sub    $0xc,%esp
f010cea7:	50                   	push   %eax
f010cea8:	e8 f4 fe ff ff       	call   f010cda1 <to_physical_address>
f010cead:	83 c4 10             	add    $0x10,%esp
f010ceb0:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010ceb3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ceb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ceb9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cebc:	6a 02                	push   $0x2
f010cebe:	68 00 00 80 ef       	push   $0xef800000
f010cec3:	52                   	push   %edx
f010cec4:	50                   	push   %eax
f010cec5:	e8 77 9e ff ff       	call   f0106d41 <map_frame>
f010ceca:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cecd:	83 ec 04             	sub    $0x4,%esp
f010ced0:	68 00 10 00 00       	push   $0x1000
f010ced5:	6a 00                	push   $0x0
f010ced7:	68 00 00 80 ef       	push   $0xef800000
f010cedc:	e8 ba 49 02 00       	call   f013189b <memset>
f010cee1:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cee4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cee7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ceea:	8b 40 08             	mov    0x8(%eax),%eax
f010ceed:	40                   	inc    %eax
f010ceee:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cef5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cef8:	83 ec 08             	sub    $0x8,%esp
f010cefb:	68 00 00 80 ef       	push   $0xef800000
f010cf00:	50                   	push   %eax
f010cf01:	e8 70 9f ff ff       	call   f0106e76 <unmap_frame>
f010cf06:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cf09:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf0f:	8b 40 08             	mov    0x8(%eax),%eax
f010cf12:	48                   	dec    %eax
f010cf13:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cf17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cf1a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf20:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cf23:	ff 75 0c             	pushl  0xc(%ebp)
f010cf26:	51                   	push   %ecx
f010cf27:	52                   	push   %edx
f010cf28:	50                   	push   %eax
f010cf29:	e8 13 9e ff ff       	call   f0106d41 <map_frame>
f010cf2e:	83 c4 10             	add    $0x10,%esp
f010cf31:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cf34:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cf38:	75 14                	jne    f010cf4e <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cf3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf3d:	83 ec 0c             	sub    $0xc,%esp
f010cf40:	50                   	push   %eax
f010cf41:	e8 3b 9b ff ff       	call   f0106a81 <decrement_references>
f010cf46:	83 c4 10             	add    $0x10,%esp
		return r;
f010cf49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf4c:	eb 05                	jmp    f010cf53 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cf4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cf53:	c9                   	leave  
f010cf54:	c3                   	ret    

f010cf55 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cf55:	55                   	push   %ebp
f010cf56:	89 e5                	mov    %esp,%ebp
f010cf58:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cf5b:	83 ec 04             	sub    $0x4,%esp
f010cf5e:	68 21 7d 13 f0       	push   $0xf0137d21
f010cf63:	68 b3 00 00 00       	push   $0xb3
f010cf68:	68 3f 7d 13 f0       	push   $0xf0137d3f
f010cf6d:	e8 93 32 ff ff       	call   f0100205 <_panic>

f010cf72 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cf72:	55                   	push   %ebp
f010cf73:	89 e5                	mov    %esp,%ebp
f010cf75:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cf78:	83 ec 04             	sub    $0x4,%esp
f010cf7b:	68 54 7d 13 f0       	push   $0xf0137d54
f010cf80:	68 c3 00 00 00       	push   $0xc3
f010cf85:	68 3f 7d 13 f0       	push   $0xf0137d3f
f010cf8a:	e8 76 32 ff ff       	call   f0100205 <_panic>

f010cf8f <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cf8f:	55                   	push   %ebp
f010cf90:	89 e5                	mov    %esp,%ebp
f010cf92:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cf95:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010cf9a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cf9d:	83 ec 04             	sub    $0x4,%esp
f010cfa0:	ff 75 0c             	pushl  0xc(%ebp)
f010cfa3:	ff 75 08             	pushl  0x8(%ebp)
f010cfa6:	50                   	push   %eax
f010cfa7:	e8 9b c0 ff ff       	call   f0109047 <calculate_required_frames>
f010cfac:	83 c4 10             	add    $0x10,%esp
}
f010cfaf:	c9                   	leave  
f010cfb0:	c3                   	ret    

f010cfb1 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cfb1:	55                   	push   %ebp
f010cfb2:	89 e5                	mov    %esp,%ebp
f010cfb4:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cfb7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cfba:	83 ec 0c             	sub    $0xc,%esp
f010cfbd:	50                   	push   %eax
f010cfbe:	e8 18 a0 ff ff       	call   f0106fdb <calculate_available_frames>
f010cfc3:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cfc6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cfc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cfcc:	01 d0                	add    %edx,%eax
}
f010cfce:	c9                   	leave  
f010cfcf:	c3                   	ret    

f010cfd0 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cfd0:	55                   	push   %ebp
f010cfd1:	89 e5                	mov    %esp,%ebp
f010cfd3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cfd6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cfd9:	83 ec 0c             	sub    $0xc,%esp
f010cfdc:	50                   	push   %eax
f010cfdd:	e8 f9 9f ff ff       	call   f0106fdb <calculate_available_frames>
f010cfe2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cfe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cfe8:	c9                   	leave  
f010cfe9:	c3                   	ret    

f010cfea <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cfea:	55                   	push   %ebp
f010cfeb:	89 e5                	mov    %esp,%ebp
f010cfed:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cff0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cff3:	83 ec 0c             	sub    $0xc,%esp
f010cff6:	50                   	push   %eax
f010cff7:	e8 df 9f ff ff       	call   f0106fdb <calculate_available_frames>
f010cffc:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cfff:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d002:	c9                   	leave  
f010d003:	c3                   	ret    

f010d004 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d004:	55                   	push   %ebp
f010d005:	89 e5                	mov    %esp,%ebp
f010d007:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d00a:	83 ec 0c             	sub    $0xc,%esp
f010d00d:	ff 75 08             	pushl  0x8(%ebp)
f010d010:	e8 a3 35 02 00       	call   f01305b8 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d015:	83 c4 10             	add    $0x10,%esp
}
f010d018:	c9                   	leave  
f010d019:	c3                   	ret    

f010d01a <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d01a:	55                   	push   %ebp
f010d01b:	89 e5                	mov    %esp,%ebp
f010d01d:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d020:	e8 eb 34 02 00       	call   f0130510 <scarce_memory>
}
f010d025:	90                   	nop
f010d026:	c9                   	leave  
f010d027:	c3                   	ret    

f010d028 <sys_clearFFL>:

void sys_clearFFL()
{
f010d028:	55                   	push   %ebp
f010d029:	89 e5                	mov    %esp,%ebp
f010d02b:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d02e:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f010d033:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d036:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d03d:	eb 12                	jmp    f010d051 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d03f:	83 ec 0c             	sub    $0xc,%esp
f010d042:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d045:	50                   	push   %eax
f010d046:	e8 a7 98 ff ff       	call   f01068f2 <allocate_frame>
f010d04b:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d04e:	ff 45 f4             	incl   -0xc(%ebp)
f010d051:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d054:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d057:	7c e6                	jl     f010d03f <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d059:	90                   	nop
f010d05a:	c9                   	leave  
f010d05b:	c3                   	ret    

f010d05c <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d05c:	55                   	push   %ebp
f010d05d:	89 e5                	mov    %esp,%ebp
f010d05f:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d062:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d067:	83 ec 0c             	sub    $0xc,%esp
f010d06a:	50                   	push   %eax
f010d06b:	e8 b8 6c ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010d070:	83 c4 10             	add    $0x10,%esp
}
f010d073:	c9                   	leave  
f010d074:	c3                   	ret    

f010d075 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d075:	55                   	push   %ebp
f010d076:	89 e5                	mov    %esp,%ebp
f010d078:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d07b:	e8 9a 11 00 00       	call   f010e21a <isBufferingEnabled>
f010d080:	84 c0                	test   %al,%al
f010d082:	74 19                	je     f010d09d <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d084:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d089:	83 ec 04             	sub    $0x4,%esp
f010d08c:	ff 75 0c             	pushl  0xc(%ebp)
f010d08f:	ff 75 08             	pushl  0x8(%ebp)
f010d092:	50                   	push   %eax
f010d093:	e8 a6 c1 ff ff       	call   f010923e <__free_user_mem_with_buffering>
f010d098:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d09b:	eb 18                	jmp    f010d0b5 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d09d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d0a2:	83 ec 04             	sub    $0x4,%esp
f010d0a5:	ff 75 0c             	pushl  0xc(%ebp)
f010d0a8:	ff 75 08             	pushl  0x8(%ebp)
f010d0ab:	50                   	push   %eax
f010d0ac:	e8 62 c0 ff ff       	call   f0109113 <free_user_mem>
f010d0b1:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d0b4:	90                   	nop
}
f010d0b5:	c9                   	leave  
f010d0b6:	c3                   	ret    

f010d0b7 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d0b7:	55                   	push   %ebp
f010d0b8:	89 e5                	mov    %esp,%ebp
f010d0ba:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d0bd:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d0c2:	83 ec 04             	sub    $0x4,%esp
f010d0c5:	ff 75 0c             	pushl  0xc(%ebp)
f010d0c8:	ff 75 08             	pushl  0x8(%ebp)
f010d0cb:	50                   	push   %eax
f010d0cc:	e8 25 c0 ff ff       	call   f01090f6 <allocate_user_mem>
f010d0d1:	83 c4 10             	add    $0x10,%esp
	return;
f010d0d4:	90                   	nop
}
f010d0d5:	c9                   	leave  
f010d0d6:	c3                   	ret    

f010d0d7 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d0d7:	55                   	push   %ebp
f010d0d8:	89 e5                	mov    %esp,%ebp
f010d0da:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d0dd:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d0e2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0e5:	ff 75 10             	pushl  0x10(%ebp)
f010d0e8:	ff 75 0c             	pushl  0xc(%ebp)
f010d0eb:	ff 75 08             	pushl  0x8(%ebp)
f010d0ee:	50                   	push   %eax
f010d0ef:	e8 38 bd ff ff       	call   f0108e2c <allocate_chunk>
f010d0f4:	83 c4 10             	add    $0x10,%esp
	return;
f010d0f7:	90                   	nop
}
f010d0f8:	c9                   	leave  
f010d0f9:	c3                   	ret    

f010d0fa <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d0fa:	55                   	push   %ebp
f010d0fb:	89 e5                	mov    %esp,%ebp
f010d0fd:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d100:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d105:	ff 75 10             	pushl  0x10(%ebp)
f010d108:	ff 75 0c             	pushl  0xc(%ebp)
f010d10b:	ff 75 08             	pushl  0x8(%ebp)
f010d10e:	50                   	push   %eax
f010d10f:	e8 47 c1 ff ff       	call   f010925b <move_user_mem>
f010d114:	83 c4 10             	add    $0x10,%esp
	return;
f010d117:	90                   	nop
}
f010d118:	c9                   	leave  
f010d119:	c3                   	ret    

f010d11a <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d11a:	55                   	push   %ebp
f010d11b:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d11d:	a1 30 ad 89 f0       	mov    0xf089ad30,%eax
}
f010d122:	5d                   	pop    %ebp
f010d123:	c3                   	ret    

f010d124 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d124:	55                   	push   %ebp
f010d125:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d127:	8b 45 08             	mov    0x8(%ebp),%eax
f010d12a:	a3 30 ad 89 f0       	mov    %eax,0xf089ad30
}
f010d12f:	90                   	nop
f010d130:	5d                   	pop    %ebp
f010d131:	c3                   	ret    

f010d132 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d132:	55                   	push   %ebp
f010d133:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d135:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d13a:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010d140:	8b 52 38             	mov    0x38(%edx),%edx
f010d143:	80 e6 fd             	and    $0xfd,%dh
f010d146:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d149:	90                   	nop
f010d14a:	5d                   	pop    %ebp
f010d14b:	c3                   	ret    

f010d14c <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d14c:	55                   	push   %ebp
f010d14d:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d14f:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d154:	8b 15 f4 a3 89 f0    	mov    0xf089a3f4,%edx
f010d15a:	8b 52 38             	mov    0x38(%edx),%edx
f010d15d:	80 ce 02             	or     $0x2,%dh
f010d160:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d163:	90                   	nop
f010d164:	5d                   	pop    %ebp
f010d165:	c3                   	ret    

f010d166 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d166:	55                   	push   %ebp
f010d167:	89 e5                	mov    %esp,%ebp
f010d169:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d16c:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d171:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d174:	83 ec 04             	sub    $0x4,%esp
f010d177:	ff 75 0c             	pushl  0xc(%ebp)
f010d17a:	ff 75 08             	pushl  0x8(%ebp)
f010d17d:	50                   	push   %eax
f010d17e:	e8 fe 16 00 00       	call   f010e881 <createSemaphore>
f010d183:	83 c4 10             	add    $0x10,%esp
}
f010d186:	c9                   	leave  
f010d187:	c3                   	ret    

f010d188 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d188:	55                   	push   %ebp
f010d189:	89 e5                	mov    %esp,%ebp
f010d18b:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d18e:	83 ec 08             	sub    $0x8,%esp
f010d191:	ff 75 0c             	pushl  0xc(%ebp)
f010d194:	ff 75 08             	pushl  0x8(%ebp)
f010d197:	e8 5d 17 00 00       	call   f010e8f9 <waitSemaphore>
f010d19c:	83 c4 10             	add    $0x10,%esp
}
f010d19f:	90                   	nop
f010d1a0:	c9                   	leave  
f010d1a1:	c3                   	ret    

f010d1a2 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d1a2:	55                   	push   %ebp
f010d1a3:	89 e5                	mov    %esp,%ebp
f010d1a5:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d1a8:	83 ec 08             	sub    $0x8,%esp
f010d1ab:	ff 75 0c             	pushl  0xc(%ebp)
f010d1ae:	ff 75 08             	pushl  0x8(%ebp)
f010d1b1:	e8 f5 17 00 00       	call   f010e9ab <signalSemaphore>
f010d1b6:	83 c4 10             	add    $0x10,%esp
}
f010d1b9:	90                   	nop
f010d1ba:	c9                   	leave  
f010d1bb:	c3                   	ret    

f010d1bc <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d1bc:	55                   	push   %ebp
f010d1bd:	89 e5                	mov    %esp,%ebp
f010d1bf:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d1c2:	83 ec 08             	sub    $0x8,%esp
f010d1c5:	ff 75 0c             	pushl  0xc(%ebp)
f010d1c8:	ff 75 08             	pushl  0x8(%ebp)
f010d1cb:	e8 29 15 00 00       	call   f010e6f9 <get_semaphore_object_ID>
f010d1d0:	83 c4 10             	add    $0x10,%esp
f010d1d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d1d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d1da:	78 0c                	js     f010d1e8 <sys_getSemaphoreValue+0x2c>
f010d1dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d1df:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010d1e4:	39 c2                	cmp    %eax,%edx
f010d1e6:	72 19                	jb     f010d201 <sys_getSemaphoreValue+0x45>
f010d1e8:	68 74 7d 13 f0       	push   $0xf0137d74
f010d1ed:	68 99 7d 13 f0       	push   $0xf0137d99
f010d1f2:	68 4a 01 00 00       	push   $0x14a
f010d1f7:	68 3f 7d 13 f0       	push   $0xf0137d3f
f010d1fc:	e8 04 30 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d201:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010d207:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d20a:	89 d0                	mov    %edx,%eax
f010d20c:	c1 e0 02             	shl    $0x2,%eax
f010d20f:	01 d0                	add    %edx,%eax
f010d211:	01 c0                	add    %eax,%eax
f010d213:	01 d0                	add    %edx,%eax
f010d215:	01 c0                	add    %eax,%eax
f010d217:	01 d0                	add    %edx,%eax
f010d219:	c1 e0 02             	shl    $0x2,%eax
f010d21c:	01 c8                	add    %ecx,%eax
f010d21e:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d221:	c9                   	leave  
f010d222:	c3                   	ret    

f010d223 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d223:	55                   	push   %ebp
f010d224:	89 e5                	mov    %esp,%ebp
f010d226:	83 ec 18             	sub    $0x18,%esp
f010d229:	8b 45 10             	mov    0x10(%ebp),%eax
f010d22c:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d22f:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d233:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d238:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d23b:	83 ec 0c             	sub    $0xc,%esp
f010d23e:	ff 75 14             	pushl  0x14(%ebp)
f010d241:	52                   	push   %edx
f010d242:	ff 75 0c             	pushl  0xc(%ebp)
f010d245:	ff 75 08             	pushl  0x8(%ebp)
f010d248:	50                   	push   %eax
f010d249:	e8 4e a3 ff ff       	call   f010759c <createSharedObject>
f010d24e:	83 c4 20             	add    $0x20,%esp
}
f010d251:	c9                   	leave  
f010d252:	c3                   	ret    

f010d253 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d253:	55                   	push   %ebp
f010d254:	89 e5                	mov    %esp,%ebp
f010d256:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d259:	83 ec 08             	sub    $0x8,%esp
f010d25c:	ff 75 0c             	pushl  0xc(%ebp)
f010d25f:	ff 75 08             	pushl  0x8(%ebp)
f010d262:	e8 ef a2 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010d267:	83 c4 10             	add    $0x10,%esp
}
f010d26a:	c9                   	leave  
f010d26b:	c3                   	ret    

f010d26c <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d26c:	55                   	push   %ebp
f010d26d:	89 e5                	mov    %esp,%ebp
f010d26f:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d272:	83 ec 04             	sub    $0x4,%esp
f010d275:	ff 75 10             	pushl  0x10(%ebp)
f010d278:	ff 75 0c             	pushl  0xc(%ebp)
f010d27b:	ff 75 08             	pushl  0x8(%ebp)
f010d27e:	e8 2e a5 ff ff       	call   f01077b1 <getSharedObject>
f010d283:	83 c4 10             	add    $0x10,%esp
}
f010d286:	c9                   	leave  
f010d287:	c3                   	ret    

f010d288 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d288:	55                   	push   %ebp
f010d289:	89 e5                	mov    %esp,%ebp
f010d28b:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d28e:	83 ec 08             	sub    $0x8,%esp
f010d291:	ff 75 0c             	pushl  0xc(%ebp)
f010d294:	ff 75 08             	pushl  0x8(%ebp)
f010d297:	e8 47 a6 ff ff       	call   f01078e3 <freeSharedObject>
f010d29c:	83 c4 10             	add    $0x10,%esp
}
f010d29f:	c9                   	leave  
f010d2a0:	c3                   	ret    

f010d2a1 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d2a1:	55                   	push   %ebp
f010d2a2:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d2a4:	a1 28 ad 89 f0       	mov    0xf089ad28,%eax
}
f010d2a9:	5d                   	pop    %ebp
f010d2aa:	c3                   	ret    

f010d2ab <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d2ab:	55                   	push   %ebp
f010d2ac:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d2ae:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d2b3:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d2b6:	5d                   	pop    %ebp
f010d2b7:	c3                   	ret    

f010d2b8 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d2b8:	55                   	push   %ebp
f010d2b9:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d2bb:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d2c0:	89 c2                	mov    %eax,%edx
f010d2c2:	a1 f0 a3 89 f0       	mov    0xf089a3f0,%eax
f010d2c7:	29 c2                	sub    %eax,%edx
f010d2c9:	89 d0                	mov    %edx,%eax
f010d2cb:	c1 f8 04             	sar    $0x4,%eax
f010d2ce:	89 c2                	mov    %eax,%edx
f010d2d0:	89 d0                	mov    %edx,%eax
f010d2d2:	c1 e0 03             	shl    $0x3,%eax
f010d2d5:	01 d0                	add    %edx,%eax
f010d2d7:	01 c0                	add    %eax,%eax
f010d2d9:	01 d0                	add    %edx,%eax
f010d2db:	c1 e0 03             	shl    $0x3,%eax
f010d2de:	01 d0                	add    %edx,%eax
f010d2e0:	89 c1                	mov    %eax,%ecx
f010d2e2:	c1 e1 08             	shl    $0x8,%ecx
f010d2e5:	01 c8                	add    %ecx,%eax
f010d2e7:	01 c0                	add    %eax,%eax
f010d2e9:	01 d0                	add    %edx,%eax
f010d2eb:	01 c0                	add    %eax,%eax
f010d2ed:	01 d0                	add    %edx,%eax
f010d2ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d2f6:	01 d0                	add    %edx,%eax
f010d2f8:	89 c2                	mov    %eax,%edx
f010d2fa:	c1 e2 09             	shl    $0x9,%edx
f010d2fd:	29 c2                	sub    %eax,%edx
f010d2ff:	89 d0                	mov    %edx,%eax
f010d301:	f7 d8                	neg    %eax
}
f010d303:	5d                   	pop    %ebp
f010d304:	c3                   	ret    

f010d305 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d305:	55                   	push   %ebp
f010d306:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d308:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d30d:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d310:	5d                   	pop    %ebp
f010d311:	c3                   	ret    

f010d312 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d312:	55                   	push   %ebp
f010d313:	89 e5                	mov    %esp,%ebp
f010d315:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d318:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d31c:	75 0a                	jne    f010d328 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d31e:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d323:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d326:	eb 22                	jmp    f010d34a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d328:	83 ec 04             	sub    $0x4,%esp
f010d32b:	6a 00                	push   $0x0
f010d32d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d330:	50                   	push   %eax
f010d331:	ff 75 08             	pushl  0x8(%ebp)
f010d334:	e8 e6 cb ff ff       	call   f0109f1f <envid2env>
f010d339:	83 c4 10             	add    $0x10,%esp
f010d33c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d33f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d343:	79 05                	jns    f010d34a <sys_destroy_env+0x38>
	{
		return r;
f010d345:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d348:	eb 5e                	jmp    f010d3a8 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d34a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d34d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d352:	39 c2                	cmp    %eax,%edx
f010d354:	75 1b                	jne    f010d371 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d356:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d35b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d35e:	83 ec 08             	sub    $0x8,%esp
f010d361:	50                   	push   %eax
f010d362:	68 ae 7d 13 f0       	push   $0xf0137dae
f010d367:	e8 a2 39 ff ff       	call   f0100d0e <cprintf>
f010d36c:	83 c4 10             	add    $0x10,%esp
f010d36f:	eb 20                	jmp    f010d391 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d371:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d374:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d377:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d37c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d37f:	83 ec 04             	sub    $0x4,%esp
f010d382:	52                   	push   %edx
f010d383:	50                   	push   %eax
f010d384:	68 c9 7d 13 f0       	push   $0xf0137dc9
f010d389:	e8 80 39 ff ff       	call   f0100d0e <cprintf>
f010d38e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d391:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d394:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d397:	83 ec 0c             	sub    $0xc,%esp
f010d39a:	50                   	push   %eax
f010d39b:	e8 9f 82 ff ff       	call   f010563f <sched_kill_env>
f010d3a0:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d3a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d3a8:	c9                   	leave  
f010d3a9:	c3                   	ret    

f010d3aa <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d3aa:	55                   	push   %ebp
f010d3ab:	89 e5                	mov    %esp,%ebp
f010d3ad:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d3b0:	e8 4b cb ff ff       	call   f0109f00 <env_exit>
	//env_run_cmd_prmpt();
}
f010d3b5:	90                   	nop
f010d3b6:	c9                   	leave  
f010d3b7:	c3                   	ret    

f010d3b8 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d3b8:	55                   	push   %ebp
f010d3b9:	89 e5                	mov    %esp,%ebp
f010d3bb:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d3be:	ff 75 14             	pushl  0x14(%ebp)
f010d3c1:	ff 75 10             	pushl  0x10(%ebp)
f010d3c4:	ff 75 0c             	pushl  0xc(%ebp)
f010d3c7:	ff 75 08             	pushl  0x8(%ebp)
f010d3ca:	e8 a9 be ff ff       	call   f0109278 <env_create>
f010d3cf:	83 c4 10             	add    $0x10,%esp
f010d3d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d3d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3d9:	75 07                	jne    f010d3e2 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d3db:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d3e0:	eb 14                	jmp    f010d3f6 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d3e2:	83 ec 0c             	sub    $0xc,%esp
f010d3e5:	ff 75 f4             	pushl  -0xc(%ebp)
f010d3e8:	e8 17 7e ff ff       	call   f0105204 <sched_new_env>
f010d3ed:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d3f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f3:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d3f6:	c9                   	leave  
f010d3f7:	c3                   	ret    

f010d3f8 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d3f8:	55                   	push   %ebp
f010d3f9:	89 e5                	mov    %esp,%ebp
f010d3fb:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d3fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010d401:	83 ec 0c             	sub    $0xc,%esp
f010d404:	50                   	push   %eax
f010d405:	e8 17 7e ff ff       	call   f0105221 <sched_run_env>
f010d40a:	83 c4 10             	add    $0x10,%esp
}
f010d40d:	90                   	nop
f010d40e:	c9                   	leave  
f010d40f:	c3                   	ret    

f010d410 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d410:	55                   	push   %ebp
f010d411:	89 e5                	mov    %esp,%ebp
f010d413:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d416:	0f 31                	rdtsc  
f010d418:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d41b:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d41e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d421:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d424:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d427:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d42a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d42d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d430:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d433:	89 01                	mov    %eax,(%ecx)
f010d435:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d438:	8b 45 08             	mov    0x8(%ebp),%eax
f010d43b:	c9                   	leave  
f010d43c:	c2 04 00             	ret    $0x4

f010d43f <sys_rcr2>:

uint32 sys_rcr2()
{
f010d43f:	55                   	push   %ebp
f010d440:	89 e5                	mov    %esp,%ebp
f010d442:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d445:	0f 20 d0             	mov    %cr2,%eax
f010d448:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d44b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d44e:	90                   	nop
}
f010d44f:	c9                   	leave  
f010d450:	c3                   	ret    

f010d451 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d451:	55                   	push   %ebp
f010d452:	89 e5                	mov    %esp,%ebp
f010d454:	83 ec 04             	sub    $0x4,%esp
f010d457:	8b 45 08             	mov    0x8(%ebp),%eax
f010d45a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d45d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d460:	a2 a8 ac 89 f0       	mov    %al,0xf089aca8
}
f010d465:	90                   	nop
f010d466:	c9                   	leave  
f010d467:	c3                   	ret    

f010d468 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d468:	55                   	push   %ebp
f010d469:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d46b:	c7 05 b0 ae 89 f0 00 	movl   $0x0,0xf089aeb0
f010d472:	00 00 00 
}
f010d475:	90                   	nop
f010d476:	5d                   	pop    %ebp
f010d477:	c3                   	ret    

f010d478 <inctst>:
void inctst()
{
f010d478:	55                   	push   %ebp
f010d479:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d47b:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
f010d480:	40                   	inc    %eax
f010d481:	a3 b0 ae 89 f0       	mov    %eax,0xf089aeb0
}
f010d486:	90                   	nop
f010d487:	5d                   	pop    %ebp
f010d488:	c3                   	ret    

f010d489 <gettst>:
uint32 gettst()
{
f010d489:	55                   	push   %ebp
f010d48a:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d48c:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
}
f010d491:	5d                   	pop    %ebp
f010d492:	c3                   	ret    

f010d493 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d493:	55                   	push   %ebp
f010d494:	89 e5                	mov    %esp,%ebp
f010d496:	83 ec 28             	sub    $0x28,%esp
f010d499:	8b 45 14             	mov    0x14(%ebp),%eax
f010d49c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d49f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d4a6:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d4aa:	83 f8 65             	cmp    $0x65,%eax
f010d4ad:	74 5d                	je     f010d50c <tst+0x79>
f010d4af:	83 f8 65             	cmp    $0x65,%eax
f010d4b2:	7f 0a                	jg     f010d4be <tst+0x2b>
f010d4b4:	83 f8 62             	cmp    $0x62,%eax
f010d4b7:	74 73                	je     f010d52c <tst+0x99>
f010d4b9:	e9 91 00 00 00       	jmp    f010d54f <tst+0xbc>
f010d4be:	83 f8 67             	cmp    $0x67,%eax
f010d4c1:	74 29                	je     f010d4ec <tst+0x59>
f010d4c3:	83 f8 6c             	cmp    $0x6c,%eax
f010d4c6:	0f 85 83 00 00 00    	jne    f010d54f <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d4cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4cf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d4d2:	73 09                	jae    f010d4dd <tst+0x4a>
			chk = 1;
f010d4d4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d4db:	eb 68                	jmp    f010d545 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d4dd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d4e1:	74 62                	je     f010d545 <tst+0xb2>
			chk = 1;
f010d4e3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d4ea:	eb 59                	jmp    f010d545 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d4ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d4f2:	76 09                	jbe    f010d4fd <tst+0x6a>
			chk = 1;
f010d4f4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d4fb:	eb 4b                	jmp    f010d548 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d4fd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d501:	74 45                	je     f010d548 <tst+0xb5>
			chk = 1;
f010d503:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d50a:	eb 3c                	jmp    f010d548 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d50c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d50f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d512:	75 09                	jne    f010d51d <tst+0x8a>
			chk = 1;
f010d514:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d51b:	eb 2e                	jmp    f010d54b <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d51d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d521:	74 28                	je     f010d54b <tst+0xb8>
			chk = 1;
f010d523:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d52a:	eb 1f                	jmp    f010d54b <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d52c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d52f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d532:	72 1a                	jb     f010d54e <tst+0xbb>
f010d534:	8b 45 08             	mov    0x8(%ebp),%eax
f010d537:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d53a:	77 12                	ja     f010d54e <tst+0xbb>
			chk = 1;
f010d53c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d543:	eb 09                	jmp    f010d54e <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d545:	90                   	nop
f010d546:	eb 07                	jmp    f010d54f <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d548:	90                   	nop
f010d549:	eb 04                	jmp    f010d54f <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d54b:	90                   	nop
f010d54c:	eb 01                	jmp    f010d54f <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d54e:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d54f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d553:	75 17                	jne    f010d56c <tst+0xd9>
f010d555:	83 ec 04             	sub    $0x4,%esp
f010d558:	68 e1 7d 13 f0       	push   $0xf0137de1
f010d55d:	68 00 02 00 00       	push   $0x200
f010d562:	68 3f 7d 13 f0       	push   $0xf0137d3f
f010d567:	e8 99 2c ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d56c:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
f010d571:	40                   	inc    %eax
f010d572:	a3 b0 ae 89 f0       	mov    %eax,0xf089aeb0
	return;
f010d577:	90                   	nop
}
f010d578:	c9                   	leave  
f010d579:	c3                   	ret    

f010d57a <chktst>:

void chktst(uint32 n)
{
f010d57a:	55                   	push   %ebp
f010d57b:	89 e5                	mov    %esp,%ebp
f010d57d:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d580:	a1 b0 ae 89 f0       	mov    0xf089aeb0,%eax
f010d585:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d588:	75 12                	jne    f010d59c <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d58a:	83 ec 0c             	sub    $0xc,%esp
f010d58d:	68 f4 7d 13 f0       	push   $0xf0137df4
f010d592:	e8 77 37 ff ff       	call   f0100d0e <cprintf>
f010d597:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d59a:	eb 17                	jmp    f010d5b3 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d59c:	83 ec 04             	sub    $0x4,%esp
f010d59f:	68 20 7e 13 f0       	push   $0xf0137e20
f010d5a4:	68 0a 02 00 00       	push   $0x20a
f010d5a9:	68 3f 7d 13 f0       	push   $0xf0137d3f
f010d5ae:	e8 52 2c ff ff       	call   f0100205 <_panic>
}
f010d5b3:	c9                   	leave  
f010d5b4:	c3                   	ret    

f010d5b5 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d5b5:	55                   	push   %ebp
f010d5b6:	89 e5                	mov    %esp,%ebp
f010d5b8:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d5bb:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d5c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d5c3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d5ca:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d5d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d5d5:	0f 84 a5 00 00 00    	je     f010d680 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d5db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d5e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5e5:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d5eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d5ee:	eb 4a                	jmp    f010d63a <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d5f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5f3:	8b 00                	mov    (%eax),%eax
f010d5f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d5f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d5fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d600:	89 c2                	mov    %eax,%edx
f010d602:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d605:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d60c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d60f:	01 c8                	add    %ecx,%eax
f010d611:	8b 00                	mov    (%eax),%eax
f010d613:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d619:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d61e:	39 c2                	cmp    %eax,%edx
f010d620:	74 09                	je     f010d62b <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d622:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d629:	eb 3e                	jmp    f010d669 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d62b:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d62e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d631:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d637:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d63a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d63e:	74 08                	je     f010d648 <sys_check_LRU_lists+0x93>
f010d640:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d643:	8b 40 10             	mov    0x10(%eax),%eax
f010d646:	eb 05                	jmp    f010d64d <sys_check_LRU_lists+0x98>
f010d648:	b8 00 00 00 00       	mov    $0x0,%eax
f010d64d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d650:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d656:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d659:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d65f:	85 c0                	test   %eax,%eax
f010d661:	75 8d                	jne    f010d5f0 <sys_check_LRU_lists+0x3b>
f010d663:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d667:	75 87                	jne    f010d5f0 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d669:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d66c:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d672:	8b 45 10             	mov    0x10(%ebp),%eax
f010d675:	39 c2                	cmp    %eax,%edx
f010d677:	74 07                	je     f010d680 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d679:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d680:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d684:	0f 84 a5 00 00 00    	je     f010d72f <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d68a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d691:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d694:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d69a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d69d:	eb 4a                	jmp    f010d6e9 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d69f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6a2:	8b 00                	mov    (%eax),%eax
f010d6a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d6a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d6aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d6af:	89 c2                	mov    %eax,%edx
f010d6b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6b4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d6bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6be:	01 c8                	add    %ecx,%eax
f010d6c0:	8b 00                	mov    (%eax),%eax
f010d6c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d6c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d6c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d6cd:	39 c2                	cmp    %eax,%edx
f010d6cf:	74 09                	je     f010d6da <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d6d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d6d8:	eb 3e                	jmp    f010d718 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d6da:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d6dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d6e0:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d6e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d6e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d6ed:	74 08                	je     f010d6f7 <sys_check_LRU_lists+0x142>
f010d6ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6f2:	8b 40 10             	mov    0x10(%eax),%eax
f010d6f5:	eb 05                	jmp    f010d6fc <sys_check_LRU_lists+0x147>
f010d6f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d6ff:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d705:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d708:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d70e:	85 c0                	test   %eax,%eax
f010d710:	75 8d                	jne    f010d69f <sys_check_LRU_lists+0xea>
f010d712:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d716:	75 87                	jne    f010d69f <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d718:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d71b:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d721:	8b 45 14             	mov    0x14(%ebp),%eax
f010d724:	39 c2                	cmp    %eax,%edx
f010d726:	74 07                	je     f010d72f <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d728:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d72f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d732:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d735:	c9                   	leave  
f010d736:	c3                   	ret    

f010d737 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d737:	55                   	push   %ebp
f010d738:	89 e5                	mov    %esp,%ebp
f010d73a:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d73d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010d742:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d745:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d74c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d74f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d755:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d758:	eb 65                	jmp    f010d7bf <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d75a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d761:	eb 3a                	jmp    f010d79d <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d763:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d766:	8b 00                	mov    (%eax),%eax
f010d768:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d76b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d76e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d773:	89 c2                	mov    %eax,%edx
f010d775:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d778:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d77f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d782:	01 c8                	add    %ecx,%eax
f010d784:	8b 00                	mov    (%eax),%eax
f010d786:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d789:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d78c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d791:	39 c2                	cmp    %eax,%edx
f010d793:	75 05                	jne    f010d79a <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d795:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d798:	eb 0b                	jmp    f010d7a5 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d79a:	ff 45 f4             	incl   -0xc(%ebp)
f010d79d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d7a3:	7c be                	jl     f010d763 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d7a5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d7a9:	7e 08                	jle    f010d7b3 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d7ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d7ae:	e9 ed 00 00 00       	jmp    f010d8a0 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d7b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7b6:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d7bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d7bf:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d7c3:	74 08                	je     f010d7cd <sys_check_LRU_lists_free+0x96>
f010d7c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d7c8:	8b 40 10             	mov    0x10(%eax),%eax
f010d7cb:	eb 05                	jmp    f010d7d2 <sys_check_LRU_lists_free+0x9b>
f010d7cd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d7d5:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d7db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7de:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d7e4:	85 c0                	test   %eax,%eax
f010d7e6:	0f 85 6e ff ff ff    	jne    f010d75a <sys_check_LRU_lists_free+0x23>
f010d7ec:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d7f0:	0f 85 64 ff ff ff    	jne    f010d75a <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d7f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7f9:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d7ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d802:	eb 62                	jmp    f010d866 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d804:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d80b:	eb 3a                	jmp    f010d847 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d80d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d810:	8b 00                	mov    (%eax),%eax
f010d812:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d815:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d818:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d81d:	89 c2                	mov    %eax,%edx
f010d81f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d822:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d829:	8b 45 08             	mov    0x8(%ebp),%eax
f010d82c:	01 c8                	add    %ecx,%eax
f010d82e:	8b 00                	mov    (%eax),%eax
f010d830:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d833:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d836:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d83b:	39 c2                	cmp    %eax,%edx
f010d83d:	75 05                	jne    f010d844 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d83f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d842:	eb 0b                	jmp    f010d84f <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d844:	ff 45 f0             	incl   -0x10(%ebp)
f010d847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d84a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d84d:	7c be                	jl     f010d80d <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d84f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d853:	7e 05                	jle    f010d85a <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d855:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d858:	eb 46                	jmp    f010d8a0 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d85a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d85d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d863:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d866:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d86a:	74 08                	je     f010d874 <sys_check_LRU_lists_free+0x13d>
f010d86c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d86f:	8b 40 10             	mov    0x10(%eax),%eax
f010d872:	eb 05                	jmp    f010d879 <sys_check_LRU_lists_free+0x142>
f010d874:	b8 00 00 00 00       	mov    $0x0,%eax
f010d879:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d87c:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d882:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d885:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d88b:	85 c0                	test   %eax,%eax
f010d88d:	0f 85 71 ff ff ff    	jne    f010d804 <sys_check_LRU_lists_free+0xcd>
f010d893:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d897:	0f 85 67 ff ff ff    	jne    f010d804 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d89d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d8a0:	c9                   	leave  
f010d8a1:	c3                   	ret    

f010d8a2 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d8a2:	55                   	push   %ebp
f010d8a3:	89 e5                	mov    %esp,%ebp
f010d8a5:	56                   	push   %esi
f010d8a6:	53                   	push   %ebx
f010d8a7:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d8aa:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d8ae:	0f 87 0e 04 00 00    	ja     f010dcc2 <syscall+0x420>
f010d8b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8b7:	c1 e0 02             	shl    $0x2,%eax
f010d8ba:	05 3c 7e 13 f0       	add    $0xf0137e3c,%eax
f010d8bf:	8b 00                	mov    (%eax),%eax
f010d8c1:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d8c3:	8b 45 14             	mov    0x14(%ebp),%eax
f010d8c6:	0f b6 d0             	movzbl %al,%edx
f010d8c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8cc:	83 ec 04             	sub    $0x4,%esp
f010d8cf:	52                   	push   %edx
f010d8d0:	ff 75 10             	pushl  0x10(%ebp)
f010d8d3:	50                   	push   %eax
f010d8d4:	e8 db f4 ff ff       	call   f010cdb4 <sys_cputs>
f010d8d9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d8dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8e1:	e9 e1 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d8e6:	e8 3e f5 ff ff       	call   f010ce29 <sys_cgetc>
f010d8eb:	e9 d7 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d8f0:	83 ec 08             	sub    $0x8,%esp
f010d8f3:	ff 75 10             	pushl  0x10(%ebp)
f010d8f6:	ff 75 0c             	pushl  0xc(%ebp)
f010d8f9:	e8 91 f6 ff ff       	call   f010cf8f <sys_calculate_required_frames>
f010d8fe:	83 c4 10             	add    $0x10,%esp
f010d901:	e9 c1 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d906:	e8 a6 f6 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f010d90b:	e9 b7 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d910:	e8 bb f6 ff ff       	call   f010cfd0 <sys_calculate_modified_frames>
f010d915:	e9 ad 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d91a:	e8 cb f6 ff ff       	call   f010cfea <sys_calculate_notmod_frames>
f010d91f:	e9 a3 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d924:	e8 33 f7 ff ff       	call   f010d05c <sys_pf_calculate_allocated_pages>
f010d929:	e9 99 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d92e:	83 ec 0c             	sub    $0xc,%esp
f010d931:	ff 75 0c             	pushl  0xc(%ebp)
f010d934:	e8 cb f6 ff ff       	call   f010d004 <sys_calculate_pages_tobe_removed_ready_exit>
f010d939:	83 c4 10             	add    $0x10,%esp
f010d93c:	e9 86 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d941:	e8 d4 f6 ff ff       	call   f010d01a <sys_scarce_memory>
		return 0;
f010d946:	b8 00 00 00 00       	mov    $0x0,%eax
f010d94b:	e9 77 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d950:	83 ec 08             	sub    $0x8,%esp
f010d953:	ff 75 10             	pushl  0x10(%ebp)
f010d956:	ff 75 0c             	pushl  0xc(%ebp)
f010d959:	e8 17 f7 ff ff       	call   f010d075 <sys_free_user_mem>
f010d95e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d961:	b8 00 00 00 00       	mov    $0x0,%eax
f010d966:	e9 5c 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d96b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d96e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d971:	83 ec 08             	sub    $0x8,%esp
f010d974:	52                   	push   %edx
f010d975:	50                   	push   %eax
f010d976:	e8 c1 f4 ff ff       	call   f010ce3c <__sys_allocate_page>
f010d97b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d97e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d983:	e9 3f 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d988:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d98b:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d98e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d991:	8b 55 10             	mov    0x10(%ebp),%edx
f010d994:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d997:	83 ec 0c             	sub    $0xc,%esp
f010d99a:	56                   	push   %esi
f010d99b:	53                   	push   %ebx
f010d99c:	51                   	push   %ecx
f010d99d:	52                   	push   %edx
f010d99e:	50                   	push   %eax
f010d99f:	e8 b1 f5 ff ff       	call   f010cf55 <__sys_map_frame>
f010d9a4:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d9a7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9ac:	e9 16 03 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d9b1:	8b 55 10             	mov    0x10(%ebp),%edx
f010d9b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9b7:	83 ec 08             	sub    $0x8,%esp
f010d9ba:	52                   	push   %edx
f010d9bb:	50                   	push   %eax
f010d9bc:	e8 b1 f5 ff ff       	call   f010cf72 <__sys_unmap_frame>
f010d9c1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d9c4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9c9:	e9 f9 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d9ce:	83 ec 04             	sub    $0x4,%esp
f010d9d1:	ff 75 14             	pushl  0x14(%ebp)
f010d9d4:	ff 75 10             	pushl  0x10(%ebp)
f010d9d7:	ff 75 0c             	pushl  0xc(%ebp)
f010d9da:	e8 f8 f6 ff ff       	call   f010d0d7 <sys_allocate_chunk>
f010d9df:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d9e2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9e7:	e9 db 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d9ec:	e8 41 f7 ff ff       	call   f010d132 <sys_disable_interrupt>
		return 0;
f010d9f1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9f6:	e9 cc 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d9fb:	e8 4c f7 ff ff       	call   f010d14c <sys_enable_interrupt>
		return 0;
f010da00:	b8 00 00 00 00       	mov    $0x0,%eax
f010da05:	e9 bd 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010da0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da0d:	0f be c0             	movsbl %al,%eax
f010da10:	83 ec 0c             	sub    $0xc,%esp
f010da13:	50                   	push   %eax
f010da14:	e8 ec f3 ff ff       	call   f010ce05 <sys_cputc>
f010da19:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da1c:	b8 00 00 00 00       	mov    $0x0,%eax
f010da21:	e9 a1 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010da26:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da29:	0f be c0             	movsbl %al,%eax
f010da2c:	83 ec 0c             	sub    $0xc,%esp
f010da2f:	50                   	push   %eax
f010da30:	e8 f3 f5 ff ff       	call   f010d028 <sys_clearFFL>
f010da35:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da38:	b8 00 00 00 00       	mov    $0x0,%eax
f010da3d:	e9 85 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010da42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da45:	83 ec 08             	sub    $0x8,%esp
f010da48:	ff 75 10             	pushl  0x10(%ebp)
f010da4b:	50                   	push   %eax
f010da4c:	e8 15 f7 ff ff       	call   f010d166 <sys_createSemaphore>
f010da51:	83 c4 10             	add    $0x10,%esp
f010da54:	e9 6e 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010da59:	8b 55 10             	mov    0x10(%ebp),%edx
f010da5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da5f:	83 ec 08             	sub    $0x8,%esp
f010da62:	52                   	push   %edx
f010da63:	50                   	push   %eax
f010da64:	e8 1f f7 ff ff       	call   f010d188 <sys_waitSemaphore>
f010da69:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da6c:	b8 00 00 00 00       	mov    $0x0,%eax
f010da71:	e9 51 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010da76:	8b 55 10             	mov    0x10(%ebp),%edx
f010da79:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da7c:	83 ec 08             	sub    $0x8,%esp
f010da7f:	52                   	push   %edx
f010da80:	50                   	push   %eax
f010da81:	e8 1c f7 ff ff       	call   f010d1a2 <sys_signalSemaphore>
f010da86:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da89:	b8 00 00 00 00       	mov    $0x0,%eax
f010da8e:	e9 34 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010da93:	8b 55 10             	mov    0x10(%ebp),%edx
f010da96:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da99:	83 ec 08             	sub    $0x8,%esp
f010da9c:	52                   	push   %edx
f010da9d:	50                   	push   %eax
f010da9e:	e8 19 f7 ff ff       	call   f010d1bc <sys_getSemaphoreValue>
f010daa3:	83 c4 10             	add    $0x10,%esp
f010daa6:	e9 1c 02 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010daab:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010daae:	8b 45 14             	mov    0x14(%ebp),%eax
f010dab1:	0f b6 d0             	movzbl %al,%edx
f010dab4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dab7:	51                   	push   %ecx
f010dab8:	52                   	push   %edx
f010dab9:	ff 75 10             	pushl  0x10(%ebp)
f010dabc:	50                   	push   %eax
f010dabd:	e8 61 f7 ff ff       	call   f010d223 <sys_createSharedObject>
f010dac2:	83 c4 10             	add    $0x10,%esp
f010dac5:	e9 fd 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010daca:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dacd:	8b 55 10             	mov    0x10(%ebp),%edx
f010dad0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dad3:	83 ec 04             	sub    $0x4,%esp
f010dad6:	51                   	push   %ecx
f010dad7:	52                   	push   %edx
f010dad8:	50                   	push   %eax
f010dad9:	e8 8e f7 ff ff       	call   f010d26c <sys_getSharedObject>
f010dade:	83 c4 10             	add    $0x10,%esp
f010dae1:	e9 e1 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010dae6:	8b 55 10             	mov    0x10(%ebp),%edx
f010dae9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010daec:	83 ec 08             	sub    $0x8,%esp
f010daef:	52                   	push   %edx
f010daf0:	50                   	push   %eax
f010daf1:	e8 92 f7 ff ff       	call   f010d288 <sys_freeSharedObject>
f010daf6:	83 c4 10             	add    $0x10,%esp
f010daf9:	e9 c9 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dafe:	8b 55 10             	mov    0x10(%ebp),%edx
f010db01:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db04:	83 ec 08             	sub    $0x8,%esp
f010db07:	52                   	push   %edx
f010db08:	50                   	push   %eax
f010db09:	e8 45 f7 ff ff       	call   f010d253 <sys_getSizeOfSharedObject>
f010db0e:	83 c4 10             	add    $0x10,%esp
f010db11:	e9 b1 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010db16:	e8 86 f7 ff ff       	call   f010d2a1 <sys_getMaxShares>
f010db1b:	e9 a7 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010db20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db23:	ff 75 18             	pushl  0x18(%ebp)
f010db26:	ff 75 14             	pushl  0x14(%ebp)
f010db29:	ff 75 10             	pushl  0x10(%ebp)
f010db2c:	50                   	push   %eax
f010db2d:	e8 86 f8 ff ff       	call   f010d3b8 <sys_create_env>
f010db32:	83 c4 10             	add    $0x10,%esp
f010db35:	e9 8d 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010db3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db3d:	83 ec 0c             	sub    $0xc,%esp
f010db40:	50                   	push   %eax
f010db41:	e8 b2 f8 ff ff       	call   f010d3f8 <sys_run_env>
f010db46:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db49:	b8 00 00 00 00       	mov    $0x0,%eax
f010db4e:	e9 74 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010db53:	e8 60 f7 ff ff       	call   f010d2b8 <sys_getenvindex>
f010db58:	e9 6a 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010db5d:	e8 49 f7 ff ff       	call   f010d2ab <sys_getenvid>
f010db62:	e9 60 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010db67:	e8 99 f7 ff ff       	call   f010d305 <sys_getparentenvid>
f010db6c:	e9 56 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010db71:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db74:	83 ec 0c             	sub    $0xc,%esp
f010db77:	50                   	push   %eax
f010db78:	e8 95 f7 ff ff       	call   f010d312 <sys_destroy_env>
f010db7d:	83 c4 10             	add    $0x10,%esp
f010db80:	e9 42 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010db85:	e8 20 f8 ff ff       	call   f010d3aa <sys_exit_env>
		return 0;
f010db8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010db8f:	e9 33 01 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010db94:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010db97:	83 ec 0c             	sub    $0xc,%esp
f010db9a:	50                   	push   %eax
f010db9b:	e8 70 f8 ff ff       	call   f010d410 <sys_get_virtual_time>
f010dba0:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dba3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dba6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dba9:	8b 45 10             	mov    0x10(%ebp),%eax
f010dbac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010dbaf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dbb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dbb5:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010dbb7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dbba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dbbd:	89 10                	mov    %edx,(%eax)
		return 0;
f010dbbf:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbc4:	e9 fe 00 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dbc9:	83 ec 04             	sub    $0x4,%esp
f010dbcc:	ff 75 14             	pushl  0x14(%ebp)
f010dbcf:	ff 75 10             	pushl  0x10(%ebp)
f010dbd2:	ff 75 0c             	pushl  0xc(%ebp)
f010dbd5:	e8 20 f5 ff ff       	call   f010d0fa <sys_move_user_mem>
f010dbda:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbdd:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbe2:	e9 e0 00 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dbe7:	e8 53 f8 ff ff       	call   f010d43f <sys_rcr2>
f010dbec:	e9 d6 00 00 00       	jmp    f010dcc7 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010dbf1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbf4:	0f b6 c0             	movzbl %al,%eax
f010dbf7:	83 ec 0c             	sub    $0xc,%esp
f010dbfa:	50                   	push   %eax
f010dbfb:	e8 51 f8 ff ff       	call   f010d451 <sys_bypassPageFault>
f010dc00:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc03:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc08:	e9 ba 00 00 00       	jmp    f010dcc7 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010dc0d:	e8 56 f8 ff ff       	call   f010d468 <rsttst>
		return 0;
f010dc12:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc17:	e9 ab 00 00 00       	jmp    f010dcc7 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010dc1c:	e8 57 f8 ff ff       	call   f010d478 <inctst>
		return 0;
f010dc21:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc26:	e9 9c 00 00 00       	jmp    f010dcc7 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010dc2b:	83 ec 0c             	sub    $0xc,%esp
f010dc2e:	ff 75 0c             	pushl  0xc(%ebp)
f010dc31:	e8 44 f9 ff ff       	call   f010d57a <chktst>
f010dc36:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc39:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc3e:	e9 84 00 00 00       	jmp    f010dcc7 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010dc43:	e8 41 f8 ff ff       	call   f010d489 <gettst>
f010dc48:	eb 7d                	jmp    f010dcc7 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010dc4a:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010dc4d:	8b 45 18             	mov    0x18(%ebp),%eax
f010dc50:	0f be c0             	movsbl %al,%eax
f010dc53:	83 ec 0c             	sub    $0xc,%esp
f010dc56:	52                   	push   %edx
f010dc57:	50                   	push   %eax
f010dc58:	ff 75 14             	pushl  0x14(%ebp)
f010dc5b:	ff 75 10             	pushl  0x10(%ebp)
f010dc5e:	ff 75 0c             	pushl  0xc(%ebp)
f010dc61:	e8 2d f8 ff ff       	call   f010d493 <tst>
f010dc66:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dc69:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc6e:	eb 57                	jmp    f010dcc7 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010dc70:	e8 a5 f4 ff ff       	call   f010d11a <sys_get_heap_strategy>
f010dc75:	eb 50                	jmp    f010dcc7 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010dc77:	83 ec 0c             	sub    $0xc,%esp
f010dc7a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc7d:	e8 a2 f4 ff ff       	call   f010d124 <sys_set_uheap_strategy>
f010dc82:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc85:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc8a:	eb 3b                	jmp    f010dcc7 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010dc8c:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dc8f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dc92:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc95:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc98:	53                   	push   %ebx
f010dc99:	51                   	push   %ecx
f010dc9a:	52                   	push   %edx
f010dc9b:	50                   	push   %eax
f010dc9c:	e8 14 f9 ff ff       	call   f010d5b5 <sys_check_LRU_lists>
f010dca1:	83 c4 10             	add    $0x10,%esp
f010dca4:	eb 21                	jmp    f010dcc7 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010dca6:	8b 55 10             	mov    0x10(%ebp),%edx
f010dca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcac:	83 ec 08             	sub    $0x8,%esp
f010dcaf:	52                   	push   %edx
f010dcb0:	50                   	push   %eax
f010dcb1:	e8 81 fa ff ff       	call   f010d737 <sys_check_LRU_lists_free>
f010dcb6:	83 c4 10             	add    $0x10,%esp
f010dcb9:	eb 0c                	jmp    f010dcc7 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010dcbb:	b8 03 00 00 00       	mov    $0x3,%eax
f010dcc0:	eb 05                	jmp    f010dcc7 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dcc2:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dcc7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010dcca:	5b                   	pop    %ebx
f010dccb:	5e                   	pop    %esi
f010dccc:	5d                   	pop    %ebp
f010dccd:	c3                   	ret    

f010dcce <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010dcce:	55                   	push   %ebp
f010dccf:	89 e5                	mov    %esp,%ebp
f010dcd1:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010dcd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcd7:	8b 00                	mov    (%eax),%eax
f010dcd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dcdc:	8b 45 10             	mov    0x10(%ebp),%eax
f010dcdf:	8b 00                	mov    (%eax),%eax
f010dce1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dce4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dceb:	e9 ca 00 00 00       	jmp    f010ddba <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010dcf0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dcf3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dcf6:	01 d0                	add    %edx,%eax
f010dcf8:	89 c2                	mov    %eax,%edx
f010dcfa:	c1 ea 1f             	shr    $0x1f,%edx
f010dcfd:	01 d0                	add    %edx,%eax
f010dcff:	d1 f8                	sar    %eax
f010dd01:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dd04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dd07:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dd0a:	eb 03                	jmp    f010dd0f <stab_binsearch+0x41>
			m--;
f010dd0c:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dd0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd12:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dd15:	7c 1e                	jl     f010dd35 <stab_binsearch+0x67>
f010dd17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd1a:	89 d0                	mov    %edx,%eax
f010dd1c:	01 c0                	add    %eax,%eax
f010dd1e:	01 d0                	add    %edx,%eax
f010dd20:	c1 e0 02             	shl    $0x2,%eax
f010dd23:	89 c2                	mov    %eax,%edx
f010dd25:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd28:	01 d0                	add    %edx,%eax
f010dd2a:	8a 40 04             	mov    0x4(%eax),%al
f010dd2d:	0f b6 c0             	movzbl %al,%eax
f010dd30:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dd33:	75 d7                	jne    f010dd0c <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010dd35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd38:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dd3b:	7d 09                	jge    f010dd46 <stab_binsearch+0x78>
			l = true_m + 1;
f010dd3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dd40:	40                   	inc    %eax
f010dd41:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010dd44:	eb 74                	jmp    f010ddba <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010dd46:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010dd4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd50:	89 d0                	mov    %edx,%eax
f010dd52:	01 c0                	add    %eax,%eax
f010dd54:	01 d0                	add    %edx,%eax
f010dd56:	c1 e0 02             	shl    $0x2,%eax
f010dd59:	89 c2                	mov    %eax,%edx
f010dd5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd5e:	01 d0                	add    %edx,%eax
f010dd60:	8b 40 08             	mov    0x8(%eax),%eax
f010dd63:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dd66:	73 11                	jae    f010dd79 <stab_binsearch+0xab>
			*region_left = m;
f010dd68:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd6e:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010dd70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dd73:	40                   	inc    %eax
f010dd74:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dd77:	eb 41                	jmp    f010ddba <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010dd79:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd7c:	89 d0                	mov    %edx,%eax
f010dd7e:	01 c0                	add    %eax,%eax
f010dd80:	01 d0                	add    %edx,%eax
f010dd82:	c1 e0 02             	shl    $0x2,%eax
f010dd85:	89 c2                	mov    %eax,%edx
f010dd87:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd8a:	01 d0                	add    %edx,%eax
f010dd8c:	8b 40 08             	mov    0x8(%eax),%eax
f010dd8f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010dd92:	76 14                	jbe    f010dda8 <stab_binsearch+0xda>
			*region_right = m - 1;
f010dd94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd97:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dd9a:	8b 45 10             	mov    0x10(%ebp),%eax
f010dd9d:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010dd9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dda2:	48                   	dec    %eax
f010dda3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dda6:	eb 12                	jmp    f010ddba <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010dda8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddae:	89 10                	mov    %edx,(%eax)
			l = m;
f010ddb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010ddb6:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010ddba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ddbd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010ddc0:	0f 8e 2a ff ff ff    	jle    f010dcf0 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010ddc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ddca:	75 0f                	jne    f010dddb <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010ddcc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddcf:	8b 00                	mov    (%eax),%eax
f010ddd1:	8d 50 ff             	lea    -0x1(%eax),%edx
f010ddd4:	8b 45 10             	mov    0x10(%ebp),%eax
f010ddd7:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010ddd9:	eb 3d                	jmp    f010de18 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dddb:	8b 45 10             	mov    0x10(%ebp),%eax
f010ddde:	8b 00                	mov    (%eax),%eax
f010dde0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dde3:	eb 03                	jmp    f010dde8 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dde5:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dde8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddeb:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dded:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ddf0:	7d 1e                	jge    f010de10 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010ddf2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ddf5:	89 d0                	mov    %edx,%eax
f010ddf7:	01 c0                	add    %eax,%eax
f010ddf9:	01 d0                	add    %edx,%eax
f010ddfb:	c1 e0 02             	shl    $0x2,%eax
f010ddfe:	89 c2                	mov    %eax,%edx
f010de00:	8b 45 08             	mov    0x8(%ebp),%eax
f010de03:	01 d0                	add    %edx,%eax
f010de05:	8a 40 04             	mov    0x4(%eax),%al
f010de08:	0f b6 c0             	movzbl %al,%eax
f010de0b:	3b 45 14             	cmp    0x14(%ebp),%eax
f010de0e:	75 d5                	jne    f010dde5 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010de10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de13:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de16:	89 10                	mov    %edx,(%eax)
	}
}
f010de18:	90                   	nop
f010de19:	c9                   	leave  
f010de1a:	c3                   	ret    

f010de1b <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010de1b:	55                   	push   %ebp
f010de1c:	89 e5                	mov    %esp,%ebp
f010de1e:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010de21:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de24:	c7 00 00 7f 13 f0    	movl   $0xf0137f00,(%eax)
	info->eip_line = 0;
f010de2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de2d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010de34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de37:	c7 40 08 00 7f 13 f0 	movl   $0xf0137f00,0x8(%eax)
	info->eip_fn_namelen = 9;
f010de3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de41:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010de48:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de4b:	8b 55 08             	mov    0x8(%ebp),%edx
f010de4e:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010de51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de54:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010de5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010de5e:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010de63:	76 1e                	jbe    f010de83 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010de65:	c7 45 f4 b0 da 13 f0 	movl   $0xf013dab0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010de6c:	c7 45 f0 f4 da 17 f0 	movl   $0xf017daf4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010de73:	c7 45 ec f5 da 17 f0 	movl   $0xf017daf5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010de7a:	c7 45 e8 e7 a7 18 f0 	movl   $0xf018a7e7,-0x18(%ebp)
f010de81:	eb 2a                	jmp    f010dead <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010de83:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010de8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010de8d:	8b 00                	mov    (%eax),%eax
f010de8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010de92:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010de95:	8b 40 04             	mov    0x4(%eax),%eax
f010de98:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010de9b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010de9e:	8b 40 08             	mov    0x8(%eax),%eax
f010dea1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010dea4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dea7:	8b 40 0c             	mov    0xc(%eax),%eax
f010deaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010dead:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010deb0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010deb3:	76 0a                	jbe    f010debf <debuginfo_eip+0xa4>
f010deb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010deb8:	48                   	dec    %eax
f010deb9:	8a 00                	mov    (%eax),%al
f010debb:	84 c0                	test   %al,%al
f010debd:	74 0a                	je     f010dec9 <debuginfo_eip+0xae>
		return -1;
f010debf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dec4:	e9 01 02 00 00       	jmp    f010e0ca <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dec9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010ded0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ded3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ded6:	29 c2                	sub    %eax,%edx
f010ded8:	89 d0                	mov    %edx,%eax
f010deda:	c1 f8 02             	sar    $0x2,%eax
f010dedd:	89 c2                	mov    %eax,%edx
f010dedf:	89 d0                	mov    %edx,%eax
f010dee1:	c1 e0 02             	shl    $0x2,%eax
f010dee4:	01 d0                	add    %edx,%eax
f010dee6:	c1 e0 02             	shl    $0x2,%eax
f010dee9:	01 d0                	add    %edx,%eax
f010deeb:	c1 e0 02             	shl    $0x2,%eax
f010deee:	01 d0                	add    %edx,%eax
f010def0:	89 c1                	mov    %eax,%ecx
f010def2:	c1 e1 08             	shl    $0x8,%ecx
f010def5:	01 c8                	add    %ecx,%eax
f010def7:	89 c1                	mov    %eax,%ecx
f010def9:	c1 e1 10             	shl    $0x10,%ecx
f010defc:	01 c8                	add    %ecx,%eax
f010defe:	01 c0                	add    %eax,%eax
f010df00:	01 d0                	add    %edx,%eax
f010df02:	48                   	dec    %eax
f010df03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010df06:	ff 75 08             	pushl  0x8(%ebp)
f010df09:	6a 64                	push   $0x64
f010df0b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010df0e:	50                   	push   %eax
f010df0f:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010df12:	50                   	push   %eax
f010df13:	ff 75 f4             	pushl  -0xc(%ebp)
f010df16:	e8 b3 fd ff ff       	call   f010dcce <stab_binsearch>
f010df1b:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010df1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df21:	85 c0                	test   %eax,%eax
f010df23:	75 0a                	jne    f010df2f <debuginfo_eip+0x114>
		return -1;
f010df25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010df2a:	e9 9b 01 00 00       	jmp    f010e0ca <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010df2f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010df32:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010df35:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010df38:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010df3b:	ff 75 08             	pushl  0x8(%ebp)
f010df3e:	6a 24                	push   $0x24
f010df40:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010df43:	50                   	push   %eax
f010df44:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010df47:	50                   	push   %eax
f010df48:	ff 75 f4             	pushl  -0xc(%ebp)
f010df4b:	e8 7e fd ff ff       	call   f010dcce <stab_binsearch>
f010df50:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010df53:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010df56:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010df59:	39 c2                	cmp    %eax,%edx
f010df5b:	0f 8f 86 00 00 00    	jg     f010dfe7 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010df61:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010df64:	89 c2                	mov    %eax,%edx
f010df66:	89 d0                	mov    %edx,%eax
f010df68:	01 c0                	add    %eax,%eax
f010df6a:	01 d0                	add    %edx,%eax
f010df6c:	c1 e0 02             	shl    $0x2,%eax
f010df6f:	89 c2                	mov    %eax,%edx
f010df71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df74:	01 d0                	add    %edx,%eax
f010df76:	8b 00                	mov    (%eax),%eax
f010df78:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010df7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010df7e:	29 d1                	sub    %edx,%ecx
f010df80:	89 ca                	mov    %ecx,%edx
f010df82:	39 d0                	cmp    %edx,%eax
f010df84:	73 22                	jae    f010dfa8 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010df86:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010df89:	89 c2                	mov    %eax,%edx
f010df8b:	89 d0                	mov    %edx,%eax
f010df8d:	01 c0                	add    %eax,%eax
f010df8f:	01 d0                	add    %edx,%eax
f010df91:	c1 e0 02             	shl    $0x2,%eax
f010df94:	89 c2                	mov    %eax,%edx
f010df96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df99:	01 d0                	add    %edx,%eax
f010df9b:	8b 10                	mov    (%eax),%edx
f010df9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dfa0:	01 c2                	add    %eax,%edx
f010dfa2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa5:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010dfa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dfab:	89 c2                	mov    %eax,%edx
f010dfad:	89 d0                	mov    %edx,%eax
f010dfaf:	01 c0                	add    %eax,%eax
f010dfb1:	01 d0                	add    %edx,%eax
f010dfb3:	c1 e0 02             	shl    $0x2,%eax
f010dfb6:	89 c2                	mov    %eax,%edx
f010dfb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dfbb:	01 d0                	add    %edx,%eax
f010dfbd:	8b 50 08             	mov    0x8(%eax),%edx
f010dfc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfc3:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010dfc6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dfc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfcc:	8b 40 10             	mov    0x10(%eax),%eax
f010dfcf:	29 c2                	sub    %eax,%edx
f010dfd1:	89 d0                	mov    %edx,%eax
f010dfd3:	c1 f8 02             	sar    $0x2,%eax
f010dfd6:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010dfd9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dfdc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010dfdf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dfe2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010dfe5:	eb 15                	jmp    f010dffc <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010dfe7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfea:	8b 55 08             	mov    0x8(%ebp),%edx
f010dfed:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010dff0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dff3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010dff6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dff9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010dffc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfff:	8b 40 08             	mov    0x8(%eax),%eax
f010e002:	83 ec 08             	sub    $0x8,%esp
f010e005:	6a 3a                	push   $0x3a
f010e007:	50                   	push   %eax
f010e008:	e8 62 38 02 00       	call   f013186f <strfind>
f010e00d:	83 c4 10             	add    $0x10,%esp
f010e010:	89 c2                	mov    %eax,%edx
f010e012:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e015:	8b 40 08             	mov    0x8(%eax),%eax
f010e018:	29 c2                	sub    %eax,%edx
f010e01a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e01d:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e020:	eb 03                	jmp    f010e025 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e022:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e025:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e028:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e02b:	7c 4e                	jl     f010e07b <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e02d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e030:	89 d0                	mov    %edx,%eax
f010e032:	01 c0                	add    %eax,%eax
f010e034:	01 d0                	add    %edx,%eax
f010e036:	c1 e0 02             	shl    $0x2,%eax
f010e039:	89 c2                	mov    %eax,%edx
f010e03b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e03e:	01 d0                	add    %edx,%eax
f010e040:	8a 40 04             	mov    0x4(%eax),%al
f010e043:	3c 84                	cmp    $0x84,%al
f010e045:	74 34                	je     f010e07b <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e047:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e04a:	89 d0                	mov    %edx,%eax
f010e04c:	01 c0                	add    %eax,%eax
f010e04e:	01 d0                	add    %edx,%eax
f010e050:	c1 e0 02             	shl    $0x2,%eax
f010e053:	89 c2                	mov    %eax,%edx
f010e055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e058:	01 d0                	add    %edx,%eax
f010e05a:	8a 40 04             	mov    0x4(%eax),%al
f010e05d:	3c 64                	cmp    $0x64,%al
f010e05f:	75 c1                	jne    f010e022 <debuginfo_eip+0x207>
f010e061:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e064:	89 d0                	mov    %edx,%eax
f010e066:	01 c0                	add    %eax,%eax
f010e068:	01 d0                	add    %edx,%eax
f010e06a:	c1 e0 02             	shl    $0x2,%eax
f010e06d:	89 c2                	mov    %eax,%edx
f010e06f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e072:	01 d0                	add    %edx,%eax
f010e074:	8b 40 08             	mov    0x8(%eax),%eax
f010e077:	85 c0                	test   %eax,%eax
f010e079:	74 a7                	je     f010e022 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e07b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e07e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e081:	7c 42                	jl     f010e0c5 <debuginfo_eip+0x2aa>
f010e083:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e086:	89 d0                	mov    %edx,%eax
f010e088:	01 c0                	add    %eax,%eax
f010e08a:	01 d0                	add    %edx,%eax
f010e08c:	c1 e0 02             	shl    $0x2,%eax
f010e08f:	89 c2                	mov    %eax,%edx
f010e091:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e094:	01 d0                	add    %edx,%eax
f010e096:	8b 00                	mov    (%eax),%eax
f010e098:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e09b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e09e:	29 d1                	sub    %edx,%ecx
f010e0a0:	89 ca                	mov    %ecx,%edx
f010e0a2:	39 d0                	cmp    %edx,%eax
f010e0a4:	73 1f                	jae    f010e0c5 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e0a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0a9:	89 d0                	mov    %edx,%eax
f010e0ab:	01 c0                	add    %eax,%eax
f010e0ad:	01 d0                	add    %edx,%eax
f010e0af:	c1 e0 02             	shl    $0x2,%eax
f010e0b2:	89 c2                	mov    %eax,%edx
f010e0b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0b7:	01 d0                	add    %edx,%eax
f010e0b9:	8b 10                	mov    (%eax),%edx
f010e0bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e0be:	01 c2                	add    %eax,%edx
f010e0c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0c3:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e0c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e0ca:	c9                   	leave  
f010e0cb:	c3                   	ret    

f010e0cc <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e0cc:	55                   	push   %ebp
f010e0cd:	89 e5                	mov    %esp,%ebp
f010e0cf:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e0d2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e0d6:	74 1c                	je     f010e0f4 <setPageReplacmentAlgorithmLRU+0x28>
f010e0d8:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e0dc:	74 16                	je     f010e0f4 <setPageReplacmentAlgorithmLRU+0x28>
f010e0de:	68 0c 7f 13 f0       	push   $0xf0137f0c
f010e0e3:	68 56 7f 13 f0       	push   $0xf0137f56
f010e0e8:	6a 18                	push   $0x18
f010e0ea:	68 6b 7f 13 f0       	push   $0xf0137f6b
f010e0ef:	e8 11 21 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e0f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0f7:	a3 88 ad 89 f0       	mov    %eax,0xf089ad88
}
f010e0fc:	90                   	nop
f010e0fd:	c9                   	leave  
f010e0fe:	c3                   	ret    

f010e0ff <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e0ff:	55                   	push   %ebp
f010e100:	89 e5                	mov    %esp,%ebp
f010e102:	c7 05 88 ad 89 f0 03 	movl   $0x3,0xf089ad88
f010e109:	00 00 00 
f010e10c:	90                   	nop
f010e10d:	5d                   	pop    %ebp
f010e10e:	c3                   	ret    

f010e10f <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e10f:	55                   	push   %ebp
f010e110:	89 e5                	mov    %esp,%ebp
f010e112:	c7 05 88 ad 89 f0 04 	movl   $0x4,0xf089ad88
f010e119:	00 00 00 
f010e11c:	90                   	nop
f010e11d:	5d                   	pop    %ebp
f010e11e:	c3                   	ret    

f010e11f <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e11f:	55                   	push   %ebp
f010e120:	89 e5                	mov    %esp,%ebp
f010e122:	c7 05 88 ad 89 f0 05 	movl   $0x5,0xf089ad88
f010e129:	00 00 00 
f010e12c:	90                   	nop
f010e12d:	5d                   	pop    %ebp
f010e12e:	c3                   	ret    

f010e12f <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e12f:	55                   	push   %ebp
f010e130:	89 e5                	mov    %esp,%ebp
f010e132:	c7 05 88 ad 89 f0 07 	movl   $0x7,0xf089ad88
f010e139:	00 00 00 
f010e13c:	90                   	nop
f010e13d:	5d                   	pop    %ebp
f010e13e:	c3                   	ret    

f010e13f <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e13f:	55                   	push   %ebp
f010e140:	89 e5                	mov    %esp,%ebp
f010e142:	c7 05 88 ad 89 f0 06 	movl   $0x6,0xf089ad88
f010e149:	00 00 00 
f010e14c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e14f:	a3 e4 ac 89 f0       	mov    %eax,0xf089ace4
f010e154:	90                   	nop
f010e155:	5d                   	pop    %ebp
f010e156:	c3                   	ret    

f010e157 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e157:	55                   	push   %ebp
f010e158:	89 e5                	mov    %esp,%ebp
f010e15a:	8b 15 88 ad 89 f0    	mov    0xf089ad88,%edx
f010e160:	8b 45 08             	mov    0x8(%ebp),%eax
f010e163:	39 c2                	cmp    %eax,%edx
f010e165:	0f 94 c0             	sete   %al
f010e168:	0f b6 c0             	movzbl %al,%eax
f010e16b:	5d                   	pop    %ebp
f010e16c:	c3                   	ret    

f010e16d <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e16d:	55                   	push   %ebp
f010e16e:	89 e5                	mov    %esp,%ebp
f010e170:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e175:	83 f8 03             	cmp    $0x3,%eax
f010e178:	75 07                	jne    f010e181 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e17a:	b8 01 00 00 00       	mov    $0x1,%eax
f010e17f:	eb 05                	jmp    f010e186 <isPageReplacmentAlgorithmCLOCK+0x19>
f010e181:	b8 00 00 00 00       	mov    $0x0,%eax
f010e186:	5d                   	pop    %ebp
f010e187:	c3                   	ret    

f010e188 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e188:	55                   	push   %ebp
f010e189:	89 e5                	mov    %esp,%ebp
f010e18b:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e190:	83 f8 04             	cmp    $0x4,%eax
f010e193:	75 07                	jne    f010e19c <isPageReplacmentAlgorithmFIFO+0x14>
f010e195:	b8 01 00 00 00       	mov    $0x1,%eax
f010e19a:	eb 05                	jmp    f010e1a1 <isPageReplacmentAlgorithmFIFO+0x19>
f010e19c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1a1:	5d                   	pop    %ebp
f010e1a2:	c3                   	ret    

f010e1a3 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e1a3:	55                   	push   %ebp
f010e1a4:	89 e5                	mov    %esp,%ebp
f010e1a6:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e1ab:	83 f8 05             	cmp    $0x5,%eax
f010e1ae:	75 07                	jne    f010e1b7 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e1b0:	b8 01 00 00 00       	mov    $0x1,%eax
f010e1b5:	eb 05                	jmp    f010e1bc <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e1b7:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1bc:	5d                   	pop    %ebp
f010e1bd:	c3                   	ret    

f010e1be <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e1be:	55                   	push   %ebp
f010e1bf:	89 e5                	mov    %esp,%ebp
f010e1c1:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e1c6:	83 f8 07             	cmp    $0x7,%eax
f010e1c9:	75 07                	jne    f010e1d2 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e1cb:	b8 01 00 00 00       	mov    $0x1,%eax
f010e1d0:	eb 05                	jmp    f010e1d7 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e1d2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1d7:	5d                   	pop    %ebp
f010e1d8:	c3                   	ret    

f010e1d9 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e1d9:	55                   	push   %ebp
f010e1da:	89 e5                	mov    %esp,%ebp
f010e1dc:	a1 88 ad 89 f0       	mov    0xf089ad88,%eax
f010e1e1:	83 f8 06             	cmp    $0x6,%eax
f010e1e4:	75 07                	jne    f010e1ed <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e1e6:	b8 01 00 00 00       	mov    $0x1,%eax
f010e1eb:	eb 05                	jmp    f010e1f2 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e1ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1f2:	5d                   	pop    %ebp
f010e1f3:	c3                   	ret    

f010e1f4 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e1f4:	55                   	push   %ebp
f010e1f5:	89 e5                	mov    %esp,%ebp
f010e1f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1fa:	a3 50 ad 89 f0       	mov    %eax,0xf089ad50
f010e1ff:	90                   	nop
f010e200:	5d                   	pop    %ebp
f010e201:	c3                   	ret    

f010e202 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e202:	55                   	push   %ebp
f010e203:	89 e5                	mov    %esp,%ebp
f010e205:	a1 50 ad 89 f0       	mov    0xf089ad50,%eax
f010e20a:	5d                   	pop    %ebp
f010e20b:	c3                   	ret    

f010e20c <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e20c:	55                   	push   %ebp
f010e20d:	89 e5                	mov    %esp,%ebp
f010e20f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e212:	a3 90 ad 89 f0       	mov    %eax,0xf089ad90
f010e217:	90                   	nop
f010e218:	5d                   	pop    %ebp
f010e219:	c3                   	ret    

f010e21a <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e21a:	55                   	push   %ebp
f010e21b:	89 e5                	mov    %esp,%ebp
f010e21d:	a1 90 ad 89 f0       	mov    0xf089ad90,%eax
f010e222:	5d                   	pop    %ebp
f010e223:	c3                   	ret    

f010e224 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e224:	55                   	push   %ebp
f010e225:	89 e5                	mov    %esp,%ebp
f010e227:	8b 45 08             	mov    0x8(%ebp),%eax
f010e22a:	a3 b0 ad 89 f0       	mov    %eax,0xf089adb0
f010e22f:	90                   	nop
f010e230:	5d                   	pop    %ebp
f010e231:	c3                   	ret    

f010e232 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e232:	55                   	push   %ebp
f010e233:	89 e5                	mov    %esp,%ebp
f010e235:	a1 b0 ad 89 f0       	mov    0xf089adb0,%eax
f010e23a:	5d                   	pop    %ebp
f010e23b:	c3                   	ret    

f010e23c <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e23c:	55                   	push   %ebp
f010e23d:	89 e5                	mov    %esp,%ebp
f010e23f:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e242:	8b 45 08             	mov    0x8(%ebp),%eax
f010e245:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e248:	83 ec 08             	sub    $0x8,%esp
f010e24b:	ff 75 0c             	pushl  0xc(%ebp)
f010e24e:	50                   	push   %eax
f010e24f:	e8 b3 89 ff ff       	call   f0106c07 <create_page_table>
f010e254:	83 c4 10             	add    $0x10,%esp
f010e257:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e25a:	90                   	nop
f010e25b:	c9                   	leave  
f010e25c:	c3                   	ret    

f010e25d <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e25d:	55                   	push   %ebp
f010e25e:	89 e5                	mov    %esp,%ebp
f010e260:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010e263:	83 ec 0c             	sub    $0xc,%esp
f010e266:	ff 75 08             	pushl  0x8(%ebp)
f010e269:	e8 af 9e ff ff       	call   f010811d <env_page_ws_get_size>
f010e26e:	83 c4 10             	add    $0x10,%esp
f010e271:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010e274:	8b 45 08             	mov    0x8(%ebp),%eax
f010e277:	8b 40 74             	mov    0x74(%eax),%eax
f010e27a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e27d:	0f 85 56 01 00 00    	jne    f010e3d9 <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010e283:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(1 == 1)  // Find victim virtual
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010e28a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e28d:	8b 48 78             	mov    0x78(%eax),%ecx
f010e290:	8b 45 08             	mov    0x8(%ebp),%eax
f010e293:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e299:	89 d0                	mov    %edx,%eax
f010e29b:	01 c0                	add    %eax,%eax
f010e29d:	01 d0                	add    %edx,%eax
f010e29f:	c1 e0 03             	shl    $0x3,%eax
f010e2a2:	01 c8                	add    %ecx,%eax
f010e2a4:	8b 10                	mov    (%eax),%edx
f010e2a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2a9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2ac:	83 ec 08             	sub    $0x8,%esp
f010e2af:	52                   	push   %edx
f010e2b0:	50                   	push   %eax
f010e2b1:	e8 b2 9c ff ff       	call   f0107f68 <pt_get_page_permissions>
f010e2b6:	83 c4 10             	add    $0x10,%esp
f010e2b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010e2bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2bf:	83 e0 20             	and    $0x20,%eax
f010e2c2:	85 c0                	test   %eax,%eax
f010e2c4:	74 46                	je     f010e30c <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010e2c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2c9:	8b 48 78             	mov    0x78(%eax),%ecx
f010e2cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2cf:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e2d5:	89 d0                	mov    %edx,%eax
f010e2d7:	01 c0                	add    %eax,%eax
f010e2d9:	01 d0                	add    %edx,%eax
f010e2db:	c1 e0 03             	shl    $0x3,%eax
f010e2de:	01 c8                	add    %ecx,%eax
f010e2e0:	8b 10                	mov    (%eax),%edx
f010e2e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2e5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2e8:	6a 20                	push   $0x20
f010e2ea:	6a 00                	push   $0x0
f010e2ec:	52                   	push   %edx
f010e2ed:	50                   	push   %eax
f010e2ee:	e8 c1 9b ff ff       	call   f0107eb4 <pt_set_page_permissions>
f010e2f3:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010e2f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2f9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e2ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010e302:	8b 40 74             	mov    0x74(%eax),%eax
f010e305:	48                   	dec    %eax
f010e306:	39 c2                	cmp    %eax,%edx
f010e308:	75 7b                	jne    f010e385 <page_fault_handler+0x128>
f010e30a:	eb 67                	jmp    f010e373 <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e30f:	8b 48 78             	mov    0x78(%eax),%ecx
f010e312:	8b 45 08             	mov    0x8(%ebp),%eax
f010e315:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e31b:	89 d0                	mov    %edx,%eax
f010e31d:	01 c0                	add    %eax,%eax
f010e31f:	01 d0                	add    %edx,%eax
f010e321:	c1 e0 03             	shl    $0x3,%eax
f010e324:	01 c8                	add    %ecx,%eax
f010e326:	8b 00                	mov    (%eax),%eax
f010e328:	89 45 f0             	mov    %eax,-0x10(%ebp)
				break;
f010e32b:	90                   	nop
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}

		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010e32c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e32f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e332:	83 ec 08             	sub    $0x8,%esp
f010e335:	ff 75 f0             	pushl  -0x10(%ebp)
f010e338:	50                   	push   %eax
f010e339:	e8 2a 9c ff ff       	call   f0107f68 <pt_get_page_permissions>
f010e33e:	83 c4 10             	add    $0x10,%esp
f010e341:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 *ptr_page_table = NULL ;
f010e344:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010e34b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e34e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e351:	83 ec 04             	sub    $0x4,%esp
f010e354:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010e357:	52                   	push   %edx
f010e358:	ff 75 f0             	pushl  -0x10(%ebp)
f010e35b:	50                   	push   %eax
f010e35c:	e8 a5 8a ff ff       	call   f0106e06 <get_frame_info>
f010e361:	83 c4 10             	add    $0x10,%esp
f010e364:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010e367:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e36a:	83 e0 40             	and    $0x40,%eax
f010e36d:	85 c0                	test   %eax,%eax
f010e36f:	74 42                	je     f010e3b3 <page_fault_handler+0x156>
f010e371:	eb 2c                	jmp    f010e39f <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010e373:	8b 45 08             	mov    0x8(%ebp),%eax
f010e376:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e37d:	00 00 00 
f010e380:	e9 05 ff ff ff       	jmp    f010e28a <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010e385:	8b 45 08             	mov    0x8(%ebp),%eax
f010e388:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e38e:	8d 50 01             	lea    0x1(%eax),%edx
f010e391:	8b 45 08             	mov    0x8(%ebp),%eax
f010e394:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e39a:	e9 eb fe ff ff       	jmp    f010e28a <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010e39f:	83 ec 04             	sub    $0x4,%esp
f010e3a2:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e3a5:	ff 75 f0             	pushl  -0x10(%ebp)
f010e3a8:	ff 75 08             	pushl  0x8(%ebp)
f010e3ab:	e8 28 54 ff ff       	call   f01037d8 <pf_update_env_page>
f010e3b0:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010e3b3:	83 ec 08             	sub    $0x8,%esp
f010e3b6:	ff 75 f0             	pushl  -0x10(%ebp)
f010e3b9:	ff 75 08             	pushl  0x8(%ebp)
f010e3bc:	e8 a5 9d ff ff       	call   f0108166 <env_page_ws_invalidate>
f010e3c1:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010e3c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e3ca:	83 ec 08             	sub    $0x8,%esp
f010e3cd:	ff 75 f0             	pushl  -0x10(%ebp)
f010e3d0:	50                   	push   %eax
f010e3d1:	e8 a0 8a ff ff       	call   f0106e76 <unmap_frame>
f010e3d6:	83 c4 10             	add    $0x10,%esp
	}
	// Placement
	struct FrameInfo *ptr_frame;
	allocate_frame(&ptr_frame);
f010e3d9:	83 ec 0c             	sub    $0xc,%esp
f010e3dc:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e3df:	50                   	push   %eax
f010e3e0:	e8 0d 85 ff ff       	call   f01068f2 <allocate_frame>
f010e3e5:	83 c4 10             	add    $0x10,%esp
	map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_PRESENT|PERM_WRITEABLE|PERM_USER);
f010e3e8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010e3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3ee:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e3f1:	6a 07                	push   $0x7
f010e3f3:	ff 75 0c             	pushl  0xc(%ebp)
f010e3f6:	52                   	push   %edx
f010e3f7:	50                   	push   %eax
f010e3f8:	e8 44 89 ff ff       	call   f0106d41 <map_frame>
f010e3fd:	83 c4 10             	add    $0x10,%esp
	int ret = pf_read_env_page(curenv, (void *)fault_va);
f010e400:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e403:	83 ec 08             	sub    $0x8,%esp
f010e406:	50                   	push   %eax
f010e407:	ff 75 08             	pushl  0x8(%ebp)
f010e40a:	e8 2b 56 ff ff       	call   f0103a3a <pf_read_env_page>
f010e40f:	83 c4 10             	add    $0x10,%esp
f010e412:	89 45 e0             	mov    %eax,-0x20(%ebp)

	if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e415:	83 7d e0 f7          	cmpl   $0xfffffff7,-0x20(%ebp)
f010e419:	75 54                	jne    f010e46f <page_fault_handler+0x212>
	{
		if(
f010e41b:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e422:	77 27                	ja     f010e44b <page_fault_handler+0x1ee>
			!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e424:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e42b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e42e:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e433:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e436:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e439:	ba 00 00 00 00       	mov    $0x0,%edx
f010e43e:	f7 75 dc             	divl   -0x24(%ebp)
f010e441:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e444:	29 d0                	sub    %edx,%eax
f010e446:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e449:	76 24                	jbe    f010e46f <page_fault_handler+0x212>
f010e44b:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e452:	77 07                	ja     f010e45b <page_fault_handler+0x1fe>
				(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e454:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e457:	85 c0                	test   %eax,%eax
f010e459:	78 14                	js     f010e46f <page_fault_handler+0x212>
		)
			panic("ILLEGAL MEMORY ACCESS");
f010e45b:	83 ec 04             	sub    $0x4,%esp
f010e45e:	68 85 7f 13 f0       	push   $0xf0137f85
f010e463:	6a 7c                	push   $0x7c
f010e465:	68 6b 7f 13 f0       	push   $0xf0137f6b
f010e46a:	e8 96 1d ff ff       	call   f0100205 <_panic>
	}
	env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e46f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e472:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e478:	83 ec 04             	sub    $0x4,%esp
f010e47b:	ff 75 0c             	pushl  0xc(%ebp)
f010e47e:	50                   	push   %eax
f010e47f:	ff 75 08             	pushl  0x8(%ebp)
f010e482:	e8 4a 9d ff ff       	call   f01081d1 <env_page_ws_set_entry>
f010e487:	83 c4 10             	add    $0x10,%esp
	curenv->page_last_WS_index++;
f010e48a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e48d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e493:	8d 50 01             	lea    0x1(%eax),%edx
f010e496:	8b 45 08             	mov    0x8(%ebp),%eax
f010e499:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
	if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e49f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4a2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4ab:	8b 40 74             	mov    0x74(%eax),%eax
f010e4ae:	39 c2                	cmp    %eax,%edx
f010e4b0:	75 0d                	jne    f010e4bf <page_fault_handler+0x262>
			curenv->page_last_WS_index = 0;
f010e4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4b5:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e4bc:	00 00 00 

	//refer to the project presentation and documentation for details
}
f010e4bf:	90                   	nop
f010e4c0:	c9                   	leave  
f010e4c1:	c3                   	ret    

f010e4c2 <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e4c2:	55                   	push   %ebp
f010e4c3:	89 e5                	mov    %esp,%ebp
f010e4c5:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e4c8:	83 ec 04             	sub    $0x4,%esp
f010e4cb:	68 9c 7f 13 f0       	push   $0xf0137f9c
f010e4d0:	68 88 00 00 00       	push   $0x88
f010e4d5:	68 6b 7f 13 f0       	push   $0xf0137f6b
f010e4da:	e8 26 1d ff ff       	call   f0100205 <_panic>

f010e4df <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e4df:	55                   	push   %ebp
f010e4e0:	89 e5                	mov    %esp,%ebp
f010e4e2:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e4e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4e8:	a3 b4 ac 89 f0       	mov    %eax,0xf089acb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e4ed:	8b 55 08             	mov    0x8(%ebp),%edx
f010e4f0:	89 d0                	mov    %edx,%eax
f010e4f2:	c1 e0 02             	shl    $0x2,%eax
f010e4f5:	01 d0                	add    %edx,%eax
f010e4f7:	01 c0                	add    %eax,%eax
f010e4f9:	01 d0                	add    %edx,%eax
f010e4fb:	01 c0                	add    %eax,%eax
f010e4fd:	01 d0                	add    %edx,%eax
f010e4ff:	c1 e0 02             	shl    $0x2,%eax
f010e502:	83 ec 0c             	sub    $0xc,%esp
f010e505:	50                   	push   %eax
f010e506:	e8 81 96 ff ff       	call   f0107b8c <kmalloc>
f010e50b:	83 c4 10             	add    $0x10,%esp
f010e50e:	a3 0c ad 89 f0       	mov    %eax,0xf089ad0c
	if (semaphores == NULL)
f010e513:	a1 0c ad 89 f0       	mov    0xf089ad0c,%eax
f010e518:	85 c0                	test   %eax,%eax
f010e51a:	75 14                	jne    f010e530 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e51c:	83 ec 04             	sub    $0x4,%esp
f010e51f:	68 e0 7f 13 f0       	push   $0xf0137fe0
f010e524:	6a 1e                	push   $0x1e
f010e526:	68 20 80 13 f0       	push   $0xf0138020
f010e52b:	e8 d5 1c ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e530:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e537:	e9 bd 00 00 00       	jmp    f010e5f9 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e53c:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e542:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e545:	89 d0                	mov    %edx,%eax
f010e547:	c1 e0 02             	shl    $0x2,%eax
f010e54a:	01 d0                	add    %edx,%eax
f010e54c:	01 c0                	add    %eax,%eax
f010e54e:	01 d0                	add    %edx,%eax
f010e550:	01 c0                	add    %eax,%eax
f010e552:	01 d0                	add    %edx,%eax
f010e554:	c1 e0 02             	shl    $0x2,%eax
f010e557:	01 c8                	add    %ecx,%eax
f010e559:	83 ec 04             	sub    $0x4,%esp
f010e55c:	6a 5c                	push   $0x5c
f010e55e:	6a 00                	push   $0x0
f010e560:	50                   	push   %eax
f010e561:	e8 35 33 02 00       	call   f013189b <memset>
f010e566:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e569:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e56f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e572:	89 d0                	mov    %edx,%eax
f010e574:	c1 e0 02             	shl    $0x2,%eax
f010e577:	01 d0                	add    %edx,%eax
f010e579:	01 c0                	add    %eax,%eax
f010e57b:	01 d0                	add    %edx,%eax
f010e57d:	01 c0                	add    %eax,%eax
f010e57f:	01 d0                	add    %edx,%eax
f010e581:	c1 e0 02             	shl    $0x2,%eax
f010e584:	01 c8                	add    %ecx,%eax
f010e586:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e58a:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e593:	89 d0                	mov    %edx,%eax
f010e595:	c1 e0 02             	shl    $0x2,%eax
f010e598:	01 d0                	add    %edx,%eax
f010e59a:	01 c0                	add    %eax,%eax
f010e59c:	01 d0                	add    %edx,%eax
f010e59e:	01 c0                	add    %eax,%eax
f010e5a0:	01 d0                	add    %edx,%eax
f010e5a2:	c1 e0 02             	shl    $0x2,%eax
f010e5a5:	01 c8                	add    %ecx,%eax
f010e5a7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e5ae:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e5b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5b7:	89 d0                	mov    %edx,%eax
f010e5b9:	c1 e0 02             	shl    $0x2,%eax
f010e5bc:	01 d0                	add    %edx,%eax
f010e5be:	01 c0                	add    %eax,%eax
f010e5c0:	01 d0                	add    %edx,%eax
f010e5c2:	01 c0                	add    %eax,%eax
f010e5c4:	01 d0                	add    %edx,%eax
f010e5c6:	c1 e0 02             	shl    $0x2,%eax
f010e5c9:	01 c8                	add    %ecx,%eax
f010e5cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e5d2:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e5d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5db:	89 d0                	mov    %edx,%eax
f010e5dd:	c1 e0 02             	shl    $0x2,%eax
f010e5e0:	01 d0                	add    %edx,%eax
f010e5e2:	01 c0                	add    %eax,%eax
f010e5e4:	01 d0                	add    %edx,%eax
f010e5e6:	01 c0                	add    %eax,%eax
f010e5e8:	01 d0                	add    %edx,%eax
f010e5ea:	c1 e0 02             	shl    $0x2,%eax
f010e5ed:	01 c8                	add    %ecx,%eax
f010e5ef:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e5f6:	ff 45 f4             	incl   -0xc(%ebp)
f010e5f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e5fc:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e601:	39 c2                	cmp    %eax,%edx
f010e603:	0f 82 33 ff ff ff    	jb     f010e53c <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e609:	90                   	nop
f010e60a:	c9                   	leave  
f010e60b:	c3                   	ret    

f010e60c <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e60c:	55                   	push   %ebp
f010e60d:	89 e5                	mov    %esp,%ebp
f010e60f:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e612:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e619:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e620:	eb 2f                	jmp    f010e651 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e622:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e628:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e62b:	89 d0                	mov    %edx,%eax
f010e62d:	c1 e0 02             	shl    $0x2,%eax
f010e630:	01 d0                	add    %edx,%eax
f010e632:	01 c0                	add    %eax,%eax
f010e634:	01 d0                	add    %edx,%eax
f010e636:	01 c0                	add    %eax,%eax
f010e638:	01 d0                	add    %edx,%eax
f010e63a:	c1 e0 02             	shl    $0x2,%eax
f010e63d:	01 c8                	add    %ecx,%eax
f010e63f:	8a 40 58             	mov    0x58(%eax),%al
f010e642:	84 c0                	test   %al,%al
f010e644:	74 08                	je     f010e64e <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e646:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e649:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e64c:	eb 0f                	jmp    f010e65d <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e64e:	ff 45 f0             	incl   -0x10(%ebp)
f010e651:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e654:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e659:	39 c2                	cmp    %eax,%edx
f010e65b:	72 c5                	jb     f010e622 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e65d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e661:	75 4d                	jne    f010e6b0 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e663:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e668:	01 c0                	add    %eax,%eax
f010e66a:	89 c2                	mov    %eax,%edx
f010e66c:	a1 0c ad 89 f0       	mov    0xf089ad0c,%eax
f010e671:	83 ec 08             	sub    $0x8,%esp
f010e674:	52                   	push   %edx
f010e675:	50                   	push   %eax
f010e676:	e8 d1 97 ff ff       	call   f0107e4c <krealloc>
f010e67b:	83 c4 10             	add    $0x10,%esp
f010e67e:	a3 0c ad 89 f0       	mov    %eax,0xf089ad0c
			if (semaphores == NULL)
f010e683:	a1 0c ad 89 f0       	mov    0xf089ad0c,%eax
f010e688:	85 c0                	test   %eax,%eax
f010e68a:	75 10                	jne    f010e69c <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e68c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e68f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e695:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e69a:	eb 5b                	jmp    f010e6f7 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e69c:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e6a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e6a4:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e6a9:	01 c0                	add    %eax,%eax
f010e6ab:	a3 b4 ac 89 f0       	mov    %eax,0xf089acb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e6b0:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e6b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e6b9:	89 d0                	mov    %edx,%eax
f010e6bb:	c1 e0 02             	shl    $0x2,%eax
f010e6be:	01 d0                	add    %edx,%eax
f010e6c0:	01 c0                	add    %eax,%eax
f010e6c2:	01 d0                	add    %edx,%eax
f010e6c4:	01 c0                	add    %eax,%eax
f010e6c6:	01 d0                	add    %edx,%eax
f010e6c8:	c1 e0 02             	shl    $0x2,%eax
f010e6cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e6ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6d1:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e6d3:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e6d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e6dc:	89 d0                	mov    %edx,%eax
f010e6de:	c1 e0 02             	shl    $0x2,%eax
f010e6e1:	01 d0                	add    %edx,%eax
f010e6e3:	01 c0                	add    %eax,%eax
f010e6e5:	01 d0                	add    %edx,%eax
f010e6e7:	01 c0                	add    %eax,%eax
f010e6e9:	01 d0                	add    %edx,%eax
f010e6eb:	c1 e0 02             	shl    $0x2,%eax
f010e6ee:	01 c8                	add    %ecx,%eax
f010e6f0:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e6f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e6f7:	c9                   	leave  
f010e6f8:	c3                   	ret    

f010e6f9 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e6f9:	55                   	push   %ebp
f010e6fa:	89 e5                	mov    %esp,%ebp
f010e6fc:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e6ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e706:	e9 84 00 00 00       	jmp    f010e78f <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e70b:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e711:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e714:	89 d0                	mov    %edx,%eax
f010e716:	c1 e0 02             	shl    $0x2,%eax
f010e719:	01 d0                	add    %edx,%eax
f010e71b:	01 c0                	add    %eax,%eax
f010e71d:	01 d0                	add    %edx,%eax
f010e71f:	01 c0                	add    %eax,%eax
f010e721:	01 d0                	add    %edx,%eax
f010e723:	c1 e0 02             	shl    $0x2,%eax
f010e726:	01 c8                	add    %ecx,%eax
f010e728:	8a 40 58             	mov    0x58(%eax),%al
f010e72b:	84 c0                	test   %al,%al
f010e72d:	75 5c                	jne    f010e78b <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e72f:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e735:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e738:	89 d0                	mov    %edx,%eax
f010e73a:	c1 e0 02             	shl    $0x2,%eax
f010e73d:	01 d0                	add    %edx,%eax
f010e73f:	01 c0                	add    %eax,%eax
f010e741:	01 d0                	add    %edx,%eax
f010e743:	01 c0                	add    %eax,%eax
f010e745:	01 d0                	add    %edx,%eax
f010e747:	c1 e0 02             	shl    $0x2,%eax
f010e74a:	01 c8                	add    %ecx,%eax
f010e74c:	8b 00                	mov    (%eax),%eax
f010e74e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e751:	75 39                	jne    f010e78c <get_semaphore_object_ID+0x93>
f010e753:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e759:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e75c:	89 d0                	mov    %edx,%eax
f010e75e:	c1 e0 02             	shl    $0x2,%eax
f010e761:	01 d0                	add    %edx,%eax
f010e763:	01 c0                	add    %eax,%eax
f010e765:	01 d0                	add    %edx,%eax
f010e767:	01 c0                	add    %eax,%eax
f010e769:	01 d0                	add    %edx,%eax
f010e76b:	c1 e0 02             	shl    $0x2,%eax
f010e76e:	01 c8                	add    %ecx,%eax
f010e770:	83 c0 04             	add    $0x4,%eax
f010e773:	83 ec 08             	sub    $0x8,%esp
f010e776:	50                   	push   %eax
f010e777:	ff 75 0c             	pushl  0xc(%ebp)
f010e77a:	e8 3a 30 02 00       	call   f01317b9 <strcmp>
f010e77f:	83 c4 10             	add    $0x10,%esp
f010e782:	85 c0                	test   %eax,%eax
f010e784:	75 06                	jne    f010e78c <get_semaphore_object_ID+0x93>
		{
			return i;
f010e786:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e789:	eb 19                	jmp    f010e7a4 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e78b:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e78c:	ff 45 f4             	incl   -0xc(%ebp)
f010e78f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e792:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e797:	39 c2                	cmp    %eax,%edx
f010e799:	0f 82 6c ff ff ff    	jb     f010e70b <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e79f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e7a4:	c9                   	leave  
f010e7a5:	c3                   	ret    

f010e7a6 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e7a6:	55                   	push   %ebp
f010e7a7:	89 e5                	mov    %esp,%ebp
f010e7a9:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e7ac:	a1 b4 ac 89 f0       	mov    0xf089acb4,%eax
f010e7b1:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e7b4:	72 0a                	jb     f010e7c0 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e7b6:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e7bb:	e9 bf 00 00 00       	jmp    f010e87f <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e7c0:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e7c6:	8b 55 08             	mov    0x8(%ebp),%edx
f010e7c9:	89 d0                	mov    %edx,%eax
f010e7cb:	c1 e0 02             	shl    $0x2,%eax
f010e7ce:	01 d0                	add    %edx,%eax
f010e7d0:	01 c0                	add    %eax,%eax
f010e7d2:	01 d0                	add    %edx,%eax
f010e7d4:	01 c0                	add    %eax,%eax
f010e7d6:	01 d0                	add    %edx,%eax
f010e7d8:	c1 e0 02             	shl    $0x2,%eax
f010e7db:	01 c8                	add    %ecx,%eax
f010e7dd:	83 ec 04             	sub    $0x4,%esp
f010e7e0:	6a 5c                	push   $0x5c
f010e7e2:	6a 00                	push   $0x0
f010e7e4:	50                   	push   %eax
f010e7e5:	e8 b1 30 02 00       	call   f013189b <memset>
f010e7ea:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e7ed:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e7f3:	8b 55 08             	mov    0x8(%ebp),%edx
f010e7f6:	89 d0                	mov    %edx,%eax
f010e7f8:	c1 e0 02             	shl    $0x2,%eax
f010e7fb:	01 d0                	add    %edx,%eax
f010e7fd:	01 c0                	add    %eax,%eax
f010e7ff:	01 d0                	add    %edx,%eax
f010e801:	01 c0                	add    %eax,%eax
f010e803:	01 d0                	add    %edx,%eax
f010e805:	c1 e0 02             	shl    $0x2,%eax
f010e808:	01 c8                	add    %ecx,%eax
f010e80a:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e80e:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e814:	8b 55 08             	mov    0x8(%ebp),%edx
f010e817:	89 d0                	mov    %edx,%eax
f010e819:	c1 e0 02             	shl    $0x2,%eax
f010e81c:	01 d0                	add    %edx,%eax
f010e81e:	01 c0                	add    %eax,%eax
f010e820:	01 d0                	add    %edx,%eax
f010e822:	01 c0                	add    %eax,%eax
f010e824:	01 d0                	add    %edx,%eax
f010e826:	c1 e0 02             	shl    $0x2,%eax
f010e829:	01 c8                	add    %ecx,%eax
f010e82b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e832:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e838:	8b 55 08             	mov    0x8(%ebp),%edx
f010e83b:	89 d0                	mov    %edx,%eax
f010e83d:	c1 e0 02             	shl    $0x2,%eax
f010e840:	01 d0                	add    %edx,%eax
f010e842:	01 c0                	add    %eax,%eax
f010e844:	01 d0                	add    %edx,%eax
f010e846:	01 c0                	add    %eax,%eax
f010e848:	01 d0                	add    %edx,%eax
f010e84a:	c1 e0 02             	shl    $0x2,%eax
f010e84d:	01 c8                	add    %ecx,%eax
f010e84f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e856:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e85c:	8b 55 08             	mov    0x8(%ebp),%edx
f010e85f:	89 d0                	mov    %edx,%eax
f010e861:	c1 e0 02             	shl    $0x2,%eax
f010e864:	01 d0                	add    %edx,%eax
f010e866:	01 c0                	add    %eax,%eax
f010e868:	01 d0                	add    %edx,%eax
f010e86a:	01 c0                	add    %eax,%eax
f010e86c:	01 d0                	add    %edx,%eax
f010e86e:	c1 e0 02             	shl    $0x2,%eax
f010e871:	01 c8                	add    %ecx,%eax
f010e873:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e87a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e87f:	c9                   	leave  
f010e880:	c3                   	ret    

f010e881 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e881:	55                   	push   %ebp
f010e882:	89 e5                	mov    %esp,%ebp
f010e884:	83 ec 18             	sub    $0x18,%esp
	//Return:
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full
	//change this "return" according to your answer
	struct Semaphore *new_semaphore=NULL;
f010e887:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e88e:	83 ec 08             	sub    $0x8,%esp
f010e891:	ff 75 0c             	pushl  0xc(%ebp)
f010e894:	ff 75 08             	pushl  0x8(%ebp)
f010e897:	e8 5d fe ff ff       	call   f010e6f9 <get_semaphore_object_ID>
f010e89c:	83 c4 10             	add    $0x10,%esp
f010e89f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret_of_get ==E_SEMAPHORE_NOT_EXISTS)
f010e8a2:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010e8a6:	75 43                	jne    f010e8eb <createSemaphore+0x6a>
		{
			int result_of_allocation=allocate_semaphore_object(&new_semaphore);
f010e8a8:	83 ec 0c             	sub    $0xc,%esp
f010e8ab:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010e8ae:	50                   	push   %eax
f010e8af:	e8 58 fd ff ff       	call   f010e60c <allocate_semaphore_object>
f010e8b4:	83 c4 10             	add    $0x10,%esp
f010e8b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if(result_of_allocation!=E_NO_SEMAPHORE)
f010e8ba:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010e8be:	74 32                	je     f010e8f2 <createSemaphore+0x71>
			{   //*new_semaphore->name=*semaphoreName;
				strcpy(new_semaphore->name,semaphoreName);
f010e8c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e8c3:	83 c0 04             	add    $0x4,%eax
f010e8c6:	83 ec 08             	sub    $0x8,%esp
f010e8c9:	ff 75 0c             	pushl  0xc(%ebp)
f010e8cc:	50                   	push   %eax
f010e8cd:	e8 2a 2e 02 00       	call   f01316fc <strcpy>
f010e8d2:	83 c4 10             	add    $0x10,%esp
				new_semaphore->ownerID=ownerEnvID;
f010e8d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e8d8:	8b 55 08             	mov    0x8(%ebp),%edx
f010e8db:	89 10                	mov    %edx,(%eax)
				new_semaphore->value=initialValue;
f010e8dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e8e0:	8b 55 10             	mov    0x10(%ebp),%edx
f010e8e3:	89 50 54             	mov    %edx,0x54(%eax)
				return result_of_allocation;
f010e8e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e8e9:	eb 0c                	jmp    f010e8f7 <createSemaphore+0x76>
			}

		}
		else
		{
			return E_SEMAPHORE_EXISTS;
f010e8eb:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010e8f0:	eb 05                	jmp    f010e8f7 <createSemaphore+0x76>
		}

		return E_NO_SEMAPHORE;
f010e8f2:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010e8f7:	c9                   	leave  
f010e8f8:	c3                   	ret    

f010e8f9 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e8f9:	55                   	push   %ebp
f010e8fa:	89 e5                	mov    %esp,%ebp
f010e8fc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010e8ff:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f010e904:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//		a) adding it to semaphore queue		[refer to helper functions in doc]
	//		b) changing its status to ENV_BLOCKED
	//		c) set curenv with NULL
	//	4) Call "fos_scheduler()" to continue running the remaining envs

	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e907:	83 ec 08             	sub    $0x8,%esp
f010e90a:	ff 75 0c             	pushl  0xc(%ebp)
f010e90d:	ff 75 08             	pushl  0x8(%ebp)
f010e910:	e8 e4 fd ff ff       	call   f010e6f9 <get_semaphore_object_ID>
f010e915:	83 c4 10             	add    $0x10,%esp
f010e918:	89 45 f0             	mov    %eax,-0x10(%ebp)
		semaphores[return_of_get].value--;
f010e91b:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e921:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e924:	89 d0                	mov    %edx,%eax
f010e926:	c1 e0 02             	shl    $0x2,%eax
f010e929:	01 d0                	add    %edx,%eax
f010e92b:	01 c0                	add    %eax,%eax
f010e92d:	01 d0                	add    %edx,%eax
f010e92f:	01 c0                	add    %eax,%eax
f010e931:	01 d0                	add    %edx,%eax
f010e933:	c1 e0 02             	shl    $0x2,%eax
f010e936:	01 c8                	add    %ecx,%eax
f010e938:	8b 50 54             	mov    0x54(%eax),%edx
f010e93b:	4a                   	dec    %edx
f010e93c:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<0)
f010e93f:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e945:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e948:	89 d0                	mov    %edx,%eax
f010e94a:	c1 e0 02             	shl    $0x2,%eax
f010e94d:	01 d0                	add    %edx,%eax
f010e94f:	01 c0                	add    %eax,%eax
f010e951:	01 d0                	add    %edx,%eax
f010e953:	01 c0                	add    %eax,%eax
f010e955:	01 d0                	add    %edx,%eax
f010e957:	c1 e0 02             	shl    $0x2,%eax
f010e95a:	01 c8                	add    %ecx,%eax
f010e95c:	8b 40 54             	mov    0x54(%eax),%eax
f010e95f:	85 c0                	test   %eax,%eax
f010e961:	79 43                	jns    f010e9a6 <waitSemaphore+0xad>
		{
			enqueue(&semaphores[return_of_get].env_queue,myenv);
f010e963:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e969:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e96c:	89 d0                	mov    %edx,%eax
f010e96e:	c1 e0 02             	shl    $0x2,%eax
f010e971:	01 d0                	add    %edx,%eax
f010e973:	01 c0                	add    %eax,%eax
f010e975:	01 d0                	add    %edx,%eax
f010e977:	01 c0                	add    %eax,%eax
f010e979:	01 d0                	add    %edx,%eax
f010e97b:	c1 e0 02             	shl    $0x2,%eax
f010e97e:	01 c8                	add    %ecx,%eax
f010e980:	83 c0 44             	add    $0x44,%eax
f010e983:	83 ec 08             	sub    $0x8,%esp
f010e986:	ff 75 f4             	pushl  -0xc(%ebp)
f010e989:	50                   	push   %eax
f010e98a:	e8 0e 5b ff ff       	call   f010449d <enqueue>
f010e98f:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010e992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e995:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			//curenv->env_status=ENV_BLOCKED;
			curenv=NULL;
f010e99c:	c7 05 f4 a3 89 f0 00 	movl   $0x0,0xf089a3f4
f010e9a3:	00 00 00 
		}
		fos_scheduler();
f010e9a6:	e8 7b 5d ff ff       	call   f0104726 <fos_scheduler>

f010e9ab <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e9ab:	55                   	push   %ebp
f010e9ac:	89 e5                	mov    %esp,%ebp
f010e9ae:	83 ec 18             	sub    $0x18,%esp
	//		c) changing its status to ENV_READY


	    //uint32 val=0;
		struct Env* env;
		int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e9b1:	83 ec 08             	sub    $0x8,%esp
f010e9b4:	ff 75 0c             	pushl  0xc(%ebp)
f010e9b7:	ff 75 08             	pushl  0x8(%ebp)
f010e9ba:	e8 3a fd ff ff       	call   f010e6f9 <get_semaphore_object_ID>
f010e9bf:	83 c4 10             	add    $0x10,%esp
f010e9c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		semaphores[return_of_get].value++;
f010e9c5:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e9cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9ce:	89 d0                	mov    %edx,%eax
f010e9d0:	c1 e0 02             	shl    $0x2,%eax
f010e9d3:	01 d0                	add    %edx,%eax
f010e9d5:	01 c0                	add    %eax,%eax
f010e9d7:	01 d0                	add    %edx,%eax
f010e9d9:	01 c0                	add    %eax,%eax
f010e9db:	01 d0                	add    %edx,%eax
f010e9dd:	c1 e0 02             	shl    $0x2,%eax
f010e9e0:	01 c8                	add    %ecx,%eax
f010e9e2:	8b 50 54             	mov    0x54(%eax),%edx
f010e9e5:	42                   	inc    %edx
f010e9e6:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[return_of_get].value<=0)
f010e9e9:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010e9ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9f2:	89 d0                	mov    %edx,%eax
f010e9f4:	c1 e0 02             	shl    $0x2,%eax
f010e9f7:	01 d0                	add    %edx,%eax
f010e9f9:	01 c0                	add    %eax,%eax
f010e9fb:	01 d0                	add    %edx,%eax
f010e9fd:	01 c0                	add    %eax,%eax
f010e9ff:	01 d0                	add    %edx,%eax
f010ea01:	c1 e0 02             	shl    $0x2,%eax
f010ea04:	01 c8                	add    %ecx,%eax
f010ea06:	8b 40 54             	mov    0x54(%eax),%eax
f010ea09:	85 c0                	test   %eax,%eax
f010ea0b:	7f 47                	jg     f010ea54 <signalSemaphore+0xa9>
		{
			env=dequeue(&semaphores[return_of_get].env_queue);
f010ea0d:	8b 0d 0c ad 89 f0    	mov    0xf089ad0c,%ecx
f010ea13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea16:	89 d0                	mov    %edx,%eax
f010ea18:	c1 e0 02             	shl    $0x2,%eax
f010ea1b:	01 d0                	add    %edx,%eax
f010ea1d:	01 c0                	add    %eax,%eax
f010ea1f:	01 d0                	add    %edx,%eax
f010ea21:	01 c0                	add    %eax,%eax
f010ea23:	01 d0                	add    %edx,%eax
f010ea25:	c1 e0 02             	shl    $0x2,%eax
f010ea28:	01 c8                	add    %ecx,%eax
f010ea2a:	83 c0 44             	add    $0x44,%eax
f010ea2d:	83 ec 0c             	sub    $0xc,%esp
f010ea30:	50                   	push   %eax
f010ea31:	e8 f8 5a ff ff       	call   f010452e <dequeue>
f010ea36:	83 c4 10             	add    $0x10,%esp
f010ea39:	89 45 f0             	mov    %eax,-0x10(%ebp)
			sched_insert_ready(env);
f010ea3c:	83 ec 0c             	sub    $0xc,%esp
f010ea3f:	ff 75 f0             	pushl  -0x10(%ebp)
f010ea42:	e8 05 5f ff ff       	call   f010494c <sched_insert_ready>
f010ea47:	83 c4 10             	add    $0x10,%esp
			env->env_status=ENV_READY;
f010ea4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ea4d:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)





}
f010ea54:	90                   	nop
f010ea55:	c9                   	leave  
f010ea56:	c3                   	ret    

f010ea57 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010ea57:	55                   	push   %ebp
f010ea58:	89 e5                	mov    %esp,%ebp
f010ea5a:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010ea5d:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ea64:	83 ec 0c             	sub    $0xc,%esp
f010ea67:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea6a:	e8 a8 37 02 00       	call   f0132217 <initialize_MemBlocksList>
f010ea6f:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010ea72:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ea77:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ea7a:	74 17                	je     f010ea93 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010ea7c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ea81:	50                   	push   %eax
f010ea82:	68 40 80 13 f0       	push   $0xf0138040
f010ea87:	6a 1f                	push   $0x1f
f010ea89:	68 94 80 13 f0       	push   $0xf0138094
f010ea8e:	e8 72 17 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ea93:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ea98:	85 c0                	test   %eax,%eax
f010ea9a:	74 17                	je     f010eab3 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010ea9c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010eaa1:	50                   	push   %eax
f010eaa2:	68 b8 80 13 f0       	push   $0xf01380b8
f010eaa7:	6a 26                	push   $0x26
f010eaa9:	68 94 80 13 f0       	push   $0xf0138094
f010eaae:	e8 52 17 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010eab3:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010eab8:	85 c0                	test   %eax,%eax
f010eaba:	74 17                	je     f010ead3 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010eabc:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010eac1:	50                   	push   %eax
f010eac2:	68 08 81 13 f0       	push   $0xf0138108
f010eac7:	6a 2c                	push   $0x2c
f010eac9:	68 94 80 13 f0       	push   $0xf0138094
f010eace:	e8 32 17 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010ead3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010eada:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010eae1:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f010eae6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eae9:	eb 29                	jmp    f010eb14 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010eaeb:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010eaee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eaf1:	8b 50 0c             	mov    0xc(%eax),%edx
f010eaf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eaf7:	8b 40 08             	mov    0x8(%eax),%eax
f010eafa:	83 ec 04             	sub    $0x4,%esp
f010eafd:	52                   	push   %edx
f010eafe:	50                   	push   %eax
f010eaff:	68 58 81 13 f0       	push   $0xf0138158
f010eb04:	e8 05 22 ff ff       	call   f0100d0e <cprintf>
f010eb09:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010eb0c:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f010eb11:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eb14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010eb18:	74 07                	je     f010eb21 <test_initialize_MemBlocksList+0xca>
f010eb1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eb1d:	8b 00                	mov    (%eax),%eax
f010eb1f:	eb 05                	jmp    f010eb26 <test_initialize_MemBlocksList+0xcf>
f010eb21:	b8 00 00 00 00       	mov    $0x0,%eax
f010eb26:	a3 a0 ad 89 f0       	mov    %eax,0xf089ada0
f010eb2b:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f010eb30:	85 c0                	test   %eax,%eax
f010eb32:	75 b7                	jne    f010eaeb <test_initialize_MemBlocksList+0x94>
f010eb34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010eb38:	75 b1                	jne    f010eaeb <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010eb3a:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010eb3f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb42:	74 14                	je     f010eb58 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010eb44:	83 ec 04             	sub    $0x4,%esp
f010eb47:	68 78 81 13 f0       	push   $0xf0138178
f010eb4c:	6a 38                	push   $0x38
f010eb4e:	68 94 80 13 f0       	push   $0xf0138094
f010eb53:	e8 ad 16 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010eb58:	83 ec 0c             	sub    $0xc,%esp
f010eb5b:	68 d0 81 13 f0       	push   $0xf01381d0
f010eb60:	e8 a9 21 ff ff       	call   f0100d0e <cprintf>
f010eb65:	83 c4 10             	add    $0x10,%esp
}
f010eb68:	90                   	nop
f010eb69:	c9                   	leave  
f010eb6a:	c3                   	ret    

f010eb6b <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010eb6b:	55                   	push   %ebp
f010eb6c:	89 e5                	mov    %esp,%ebp
f010eb6e:	57                   	push   %edi
f010eb6f:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010eb75:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eb7c:	83 ec 0c             	sub    $0xc,%esp
f010eb7f:	ff 75 f4             	pushl  -0xc(%ebp)
f010eb82:	e8 90 36 02 00       	call   f0132217 <initialize_MemBlocksList>
f010eb87:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eb8a:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010eb91:	00 00 00 
f010eb94:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010eb9b:	00 00 00 
f010eb9e:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010eba5:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010eba8:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010ebaf:	00 00 00 
f010ebb2:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010ebb9:	00 00 00 
f010ebbc:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010ebc3:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010ebc6:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010ebc9:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ebce:	b8 00 00 00 00       	mov    $0x0,%eax
f010ebd3:	89 d7                	mov    %edx,%edi
f010ebd5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010ebd7:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ebda:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ebdf:	b8 00 00 00 00       	mov    $0x0,%eax
f010ebe4:	89 d7                	mov    %edx,%edi
f010ebe6:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010ebe8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010ebef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010ebf6:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010ebfd:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010ec04:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec07:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010ec0a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ec0d:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010ec10:	83 ec 0c             	sub    $0xc,%esp
f010ec13:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ec16:	50                   	push   %eax
f010ec17:	e8 30 37 02 00       	call   f013234c <insert_sorted_allocList>
f010ec1c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010ec1f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ec26:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ec2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec2e:	74 14                	je     f010ec44 <test_insert_sorted_allocList+0xd9>
f010ec30:	83 ec 04             	sub    $0x4,%esp
f010ec33:	68 1c 82 13 f0       	push   $0xf013821c
f010ec38:	6a 56                	push   $0x56
f010ec3a:	68 94 80 13 f0       	push   $0xf0138094
f010ec3f:	e8 c1 15 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ec44:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ec49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec4c:	74 14                	je     f010ec62 <test_insert_sorted_allocList+0xf7>
f010ec4e:	83 ec 04             	sub    $0x4,%esp
f010ec51:	68 68 82 13 f0       	push   $0xf0138268
f010ec56:	6a 59                	push   $0x59
f010ec58:	68 94 80 13 f0       	push   $0xf0138094
f010ec5d:	e8 a3 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ec62:	83 ec 0c             	sub    $0xc,%esp
f010ec65:	ff 75 f0             	pushl  -0x10(%ebp)
f010ec68:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ec6b:	50                   	push   %eax
f010ec6c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ec6f:	50                   	push   %eax
f010ec70:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ec73:	50                   	push   %eax
f010ec74:	68 c8 ac 89 f0       	push   $0xf089acc8
f010ec79:	e8 7d 26 00 00       	call   f01112fb <check_list_data>
f010ec7e:	83 c4 20             	add    $0x20,%esp
f010ec81:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ec84:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ec88:	74 14                	je     f010ec9e <test_insert_sorted_allocList+0x133>
f010ec8a:	83 ec 04             	sub    $0x4,%esp
f010ec8d:	68 b8 82 13 f0       	push   $0xf01382b8
f010ec92:	6a 5d                	push   $0x5d
f010ec94:	68 94 80 13 f0       	push   $0xf0138094
f010ec99:	e8 67 15 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ec9e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eca1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eca4:	74 14                	je     f010ecba <test_insert_sorted_allocList+0x14f>
f010eca6:	83 ec 04             	sub    $0x4,%esp
f010eca9:	68 08 83 13 f0       	push   $0xf0138308
f010ecae:	6a 5e                	push   $0x5e
f010ecb0:	68 94 80 13 f0       	push   $0xf0138094
f010ecb5:	e8 4b 15 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010ecba:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010ecc1:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010ecc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010eccb:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010ecce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ecd1:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010ecd4:	83 ec 0c             	sub    $0xc,%esp
f010ecd7:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ecda:	50                   	push   %eax
f010ecdb:	e8 6c 36 02 00       	call   f013234c <insert_sorted_allocList>
f010ece0:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010ece3:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ecea:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ecef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecf2:	74 14                	je     f010ed08 <test_insert_sorted_allocList+0x19d>
f010ecf4:	83 ec 04             	sub    $0x4,%esp
f010ecf7:	68 1c 82 13 f0       	push   $0xf013821c
f010ecfc:	6a 6d                	push   $0x6d
f010ecfe:	68 94 80 13 f0       	push   $0xf0138094
f010ed03:	e8 fd 14 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ed08:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ed0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ed10:	74 14                	je     f010ed26 <test_insert_sorted_allocList+0x1bb>
f010ed12:	83 ec 04             	sub    $0x4,%esp
f010ed15:	68 68 82 13 f0       	push   $0xf0138268
f010ed1a:	6a 70                	push   $0x70
f010ed1c:	68 94 80 13 f0       	push   $0xf0138094
f010ed21:	e8 df 14 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ed26:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ed2d:	83 ec 0c             	sub    $0xc,%esp
f010ed30:	ff 75 f0             	pushl  -0x10(%ebp)
f010ed33:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ed36:	50                   	push   %eax
f010ed37:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ed3a:	50                   	push   %eax
f010ed3b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ed3e:	50                   	push   %eax
f010ed3f:	68 c8 ac 89 f0       	push   $0xf089acc8
f010ed44:	e8 b2 25 00 00       	call   f01112fb <check_list_data>
f010ed49:	83 c4 20             	add    $0x20,%esp
f010ed4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ed4f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ed53:	74 14                	je     f010ed69 <test_insert_sorted_allocList+0x1fe>
f010ed55:	83 ec 04             	sub    $0x4,%esp
f010ed58:	68 b8 82 13 f0       	push   $0xf01382b8
f010ed5d:	6a 75                	push   $0x75
f010ed5f:	68 94 80 13 f0       	push   $0xf0138094
f010ed64:	e8 9c 14 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ed69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ed6c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed6f:	74 14                	je     f010ed85 <test_insert_sorted_allocList+0x21a>
f010ed71:	83 ec 04             	sub    $0x4,%esp
f010ed74:	68 08 83 13 f0       	push   $0xf0138308
f010ed79:	6a 76                	push   $0x76
f010ed7b:	68 94 80 13 f0       	push   $0xf0138094
f010ed80:	e8 80 14 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010ed85:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010ed8c:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010ed93:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ed96:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010ed99:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed9c:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010ed9f:	83 ec 0c             	sub    $0xc,%esp
f010eda2:	8d 45 90             	lea    -0x70(%ebp),%eax
f010eda5:	50                   	push   %eax
f010eda6:	e8 a1 35 02 00       	call   f013234c <insert_sorted_allocList>
f010edab:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010edae:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010edb5:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010edba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010edbd:	74 17                	je     f010edd6 <test_insert_sorted_allocList+0x26b>
f010edbf:	83 ec 04             	sub    $0x4,%esp
f010edc2:	68 1c 82 13 f0       	push   $0xf013821c
f010edc7:	68 85 00 00 00       	push   $0x85
f010edcc:	68 94 80 13 f0       	push   $0xf0138094
f010edd1:	e8 2f 14 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010edd6:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010eddb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010edde:	74 17                	je     f010edf7 <test_insert_sorted_allocList+0x28c>
f010ede0:	83 ec 04             	sub    $0x4,%esp
f010ede3:	68 54 83 13 f0       	push   $0xf0138354
f010ede8:	68 88 00 00 00       	push   $0x88
f010eded:	68 94 80 13 f0       	push   $0xf0138094
f010edf2:	e8 0e 14 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010edf7:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010edfe:	83 ec 0c             	sub    $0xc,%esp
f010ee01:	ff 75 f0             	pushl  -0x10(%ebp)
f010ee04:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ee07:	50                   	push   %eax
f010ee08:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ee0b:	50                   	push   %eax
f010ee0c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ee0f:	50                   	push   %eax
f010ee10:	68 c8 ac 89 f0       	push   $0xf089acc8
f010ee15:	e8 e1 24 00 00       	call   f01112fb <check_list_data>
f010ee1a:	83 c4 20             	add    $0x20,%esp
f010ee1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ee20:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ee24:	74 17                	je     f010ee3d <test_insert_sorted_allocList+0x2d2>
f010ee26:	83 ec 04             	sub    $0x4,%esp
f010ee29:	68 b8 82 13 f0       	push   $0xf01382b8
f010ee2e:	68 8d 00 00 00       	push   $0x8d
f010ee33:	68 94 80 13 f0       	push   $0xf0138094
f010ee38:	e8 c8 13 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ee3d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ee40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee43:	74 17                	je     f010ee5c <test_insert_sorted_allocList+0x2f1>
f010ee45:	83 ec 04             	sub    $0x4,%esp
f010ee48:	68 08 83 13 f0       	push   $0xf0138308
f010ee4d:	68 8e 00 00 00       	push   $0x8e
f010ee52:	68 94 80 13 f0       	push   $0xf0138094
f010ee57:	e8 a9 13 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010ee5c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010ee63:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010ee6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ee6d:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010ee70:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ee73:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010ee76:	83 ec 0c             	sub    $0xc,%esp
f010ee79:	8d 45 80             	lea    -0x80(%ebp),%eax
f010ee7c:	50                   	push   %eax
f010ee7d:	e8 ca 34 02 00       	call   f013234c <insert_sorted_allocList>
f010ee82:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ee85:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ee8c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ee91:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee94:	74 17                	je     f010eead <test_insert_sorted_allocList+0x342>
f010ee96:	83 ec 04             	sub    $0x4,%esp
f010ee99:	68 1c 82 13 f0       	push   $0xf013821c
f010ee9e:	68 9c 00 00 00       	push   $0x9c
f010eea3:	68 94 80 13 f0       	push   $0xf0138094
f010eea8:	e8 58 13 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eead:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010eeb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eeb5:	74 17                	je     f010eece <test_insert_sorted_allocList+0x363>
f010eeb7:	83 ec 04             	sub    $0x4,%esp
f010eeba:	68 68 82 13 f0       	push   $0xf0138268
f010eebf:	68 9f 00 00 00       	push   $0x9f
f010eec4:	68 94 80 13 f0       	push   $0xf0138094
f010eec9:	e8 37 13 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eece:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eed5:	83 ec 0c             	sub    $0xc,%esp
f010eed8:	ff 75 f0             	pushl  -0x10(%ebp)
f010eedb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eede:	50                   	push   %eax
f010eedf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eee2:	50                   	push   %eax
f010eee3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eee6:	50                   	push   %eax
f010eee7:	68 c8 ac 89 f0       	push   $0xf089acc8
f010eeec:	e8 0a 24 00 00       	call   f01112fb <check_list_data>
f010eef1:	83 c4 20             	add    $0x20,%esp
f010eef4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eef7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eefb:	74 17                	je     f010ef14 <test_insert_sorted_allocList+0x3a9>
f010eefd:	83 ec 04             	sub    $0x4,%esp
f010ef00:	68 b8 82 13 f0       	push   $0xf01382b8
f010ef05:	68 a4 00 00 00       	push   $0xa4
f010ef0a:	68 94 80 13 f0       	push   $0xf0138094
f010ef0f:	e8 f1 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ef14:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ef17:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef1a:	74 17                	je     f010ef33 <test_insert_sorted_allocList+0x3c8>
f010ef1c:	83 ec 04             	sub    $0x4,%esp
f010ef1f:	68 08 83 13 f0       	push   $0xf0138308
f010ef24:	68 a5 00 00 00       	push   $0xa5
f010ef29:	68 94 80 13 f0       	push   $0xf0138094
f010ef2e:	e8 d2 12 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010ef33:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010ef3a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010ef41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef44:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010ef4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ef4d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010ef53:	83 ec 0c             	sub    $0xc,%esp
f010ef56:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010ef5c:	50                   	push   %eax
f010ef5d:	e8 ea 33 02 00       	call   f013234c <insert_sorted_allocList>
f010ef62:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010ef65:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ef6c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010ef71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef74:	74 17                	je     f010ef8d <test_insert_sorted_allocList+0x422>
f010ef76:	83 ec 04             	sub    $0x4,%esp
f010ef79:	68 1c 82 13 f0       	push   $0xf013821c
f010ef7e:	68 b3 00 00 00       	push   $0xb3
f010ef83:	68 94 80 13 f0       	push   $0xf0138094
f010ef88:	e8 78 12 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ef8d:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010ef92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ef95:	74 17                	je     f010efae <test_insert_sorted_allocList+0x443>
f010ef97:	83 ec 04             	sub    $0x4,%esp
f010ef9a:	68 68 82 13 f0       	push   $0xf0138268
f010ef9f:	68 b6 00 00 00       	push   $0xb6
f010efa4:	68 94 80 13 f0       	push   $0xf0138094
f010efa9:	e8 57 12 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010efae:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010efb5:	83 ec 0c             	sub    $0xc,%esp
f010efb8:	ff 75 f0             	pushl  -0x10(%ebp)
f010efbb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010efbe:	50                   	push   %eax
f010efbf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010efc2:	50                   	push   %eax
f010efc3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010efc6:	50                   	push   %eax
f010efc7:	68 c8 ac 89 f0       	push   $0xf089acc8
f010efcc:	e8 2a 23 00 00       	call   f01112fb <check_list_data>
f010efd1:	83 c4 20             	add    $0x20,%esp
f010efd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010efd7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010efdb:	74 17                	je     f010eff4 <test_insert_sorted_allocList+0x489>
f010efdd:	83 ec 04             	sub    $0x4,%esp
f010efe0:	68 b8 82 13 f0       	push   $0xf01382b8
f010efe5:	68 bb 00 00 00       	push   $0xbb
f010efea:	68 94 80 13 f0       	push   $0xf0138094
f010efef:	e8 11 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eff4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eff7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010effa:	74 17                	je     f010f013 <test_insert_sorted_allocList+0x4a8>
f010effc:	83 ec 04             	sub    $0x4,%esp
f010efff:	68 08 83 13 f0       	push   $0xf0138308
f010f004:	68 bc 00 00 00       	push   $0xbc
f010f009:	68 94 80 13 f0       	push   $0xf0138094
f010f00e:	e8 f2 11 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010f013:	83 ec 0c             	sub    $0xc,%esp
f010f016:	68 a4 83 13 f0       	push   $0xf01383a4
f010f01b:	e8 ee 1c ff ff       	call   f0100d0e <cprintf>
f010f020:	83 c4 10             	add    $0x10,%esp
}
f010f023:	90                   	nop
f010f024:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f027:	c9                   	leave  
f010f028:	c3                   	ret    

f010f029 <test_find_block>:

void test_find_block()
{
f010f029:	55                   	push   %ebp
f010f02a:	89 e5                	mov    %esp,%ebp
f010f02c:	57                   	push   %edi
f010f02d:	56                   	push   %esi
f010f02e:	53                   	push   %ebx
f010f02f:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010f035:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f03c:	83 ec 0c             	sub    $0xc,%esp
f010f03f:	ff 75 e0             	pushl  -0x20(%ebp)
f010f042:	e8 d0 31 02 00       	call   f0132217 <initialize_MemBlocksList>
f010f047:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010f04a:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010f051:	00 00 00 
f010f054:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010f05b:	00 00 00 
f010f05e:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010f065:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010f068:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f06b:	bb 1c 85 13 f0       	mov    $0xf013851c,%ebx
f010f070:	ba 06 00 00 00       	mov    $0x6,%edx
f010f075:	89 c7                	mov    %eax,%edi
f010f077:	89 de                	mov    %ebx,%esi
f010f079:	89 d1                	mov    %edx,%ecx
f010f07b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010f07d:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f080:	bb 34 85 13 f0       	mov    $0xf0138534,%ebx
f010f085:	ba 06 00 00 00       	mov    $0x6,%edx
f010f08a:	89 c7                	mov    %eax,%edi
f010f08c:	89 de                	mov    %ebx,%esi
f010f08e:	89 d1                	mov    %edx,%ecx
f010f090:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010f092:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010f099:	00 00 00 
f010f09c:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010f0a3:	00 00 00 
f010f0a6:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010f0ad:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f0b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f0b7:	e9 5f 01 00 00       	jmp    f010f21b <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f0bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0bf:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f0c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0c6:	c1 e2 04             	shl    $0x4,%edx
f010f0c9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f0cc:	01 da                	add    %ebx,%edx
f010f0ce:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f0d4:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f0d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f0d9:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f0dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f0e0:	c1 e2 04             	shl    $0x4,%edx
f010f0e3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f0e6:	01 f2                	add    %esi,%edx
f010f0e8:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f0ee:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f0f0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f0f4:	0f 85 92 00 00 00    	jne    f010f18c <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f0fa:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f010f0ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f102:	c1 e2 04             	shl    $0x4,%edx
f010f105:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f108:	01 fa                	add    %edi,%edx
f010f10a:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f110:	89 02                	mov    %eax,(%edx)
f010f112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f115:	c1 e0 04             	shl    $0x4,%eax
f010f118:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f11b:	01 d8                	add    %ebx,%eax
f010f11d:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f122:	8b 00                	mov    (%eax),%eax
f010f124:	85 c0                	test   %eax,%eax
f010f126:	74 18                	je     f010f140 <test_find_block+0x117>
f010f128:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f010f12d:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f133:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f136:	c1 e1 04             	shl    $0x4,%ecx
f010f139:	01 ca                	add    %ecx,%edx
f010f13b:	89 50 04             	mov    %edx,0x4(%eax)
f010f13e:	eb 13                	jmp    f010f153 <test_find_block+0x12a>
f010f140:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f146:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f149:	c1 e2 04             	shl    $0x4,%edx
f010f14c:	01 d0                	add    %edx,%eax
f010f14e:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f010f153:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f159:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f15c:	c1 e2 04             	shl    $0x4,%edx
f010f15f:	01 d0                	add    %edx,%eax
f010f161:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f010f166:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f169:	c1 e0 04             	shl    $0x4,%eax
f010f16c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f16f:	01 f0                	add    %esi,%eax
f010f171:	2d 98 00 00 00       	sub    $0x98,%eax
f010f176:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f17c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f181:	40                   	inc    %eax
f010f182:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
f010f187:	e9 8c 00 00 00       	jmp    f010f218 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f18c:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f010f191:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f194:	c1 e2 04             	shl    $0x4,%edx
f010f197:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f19a:	01 fa                	add    %edi,%edx
f010f19c:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f1a2:	89 02                	mov    %eax,(%edx)
f010f1a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f1a7:	c1 e0 04             	shl    $0x4,%eax
f010f1aa:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f1ad:	01 d8                	add    %ebx,%eax
f010f1af:	2d 98 00 00 00       	sub    $0x98,%eax
f010f1b4:	8b 00                	mov    (%eax),%eax
f010f1b6:	85 c0                	test   %eax,%eax
f010f1b8:	74 17                	je     f010f1d1 <test_find_block+0x1a8>
f010f1ba:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f010f1bf:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f1c5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f1c8:	c1 e1 04             	shl    $0x4,%ecx
f010f1cb:	01 ca                	add    %ecx,%edx
f010f1cd:	89 10                	mov    %edx,(%eax)
f010f1cf:	eb 13                	jmp    f010f1e4 <test_find_block+0x1bb>
f010f1d1:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f1d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f1da:	c1 e2 04             	shl    $0x4,%edx
f010f1dd:	01 d0                	add    %edx,%eax
f010f1df:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f010f1e4:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f1ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f1ed:	c1 e2 04             	shl    $0x4,%edx
f010f1f0:	01 d0                	add    %edx,%eax
f010f1f2:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f010f1f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f1fa:	c1 e0 04             	shl    $0x4,%eax
f010f1fd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f200:	01 f0                	add    %esi,%eax
f010f202:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f207:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f20d:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f212:	40                   	inc    %eax
f010f213:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f218:	ff 45 e4             	incl   -0x1c(%ebp)
f010f21b:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f21f:	0f 8e 97 fe ff ff    	jle    f010f0bc <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f225:	83 ec 08             	sub    $0x8,%esp
f010f228:	68 00 10 00 00       	push   $0x1000
f010f22d:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f232:	e8 bd 30 02 00       	call   f01322f4 <find_block>
f010f237:	83 c4 10             	add    $0x10,%esp
f010f23a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f23d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f241:	74 17                	je     f010f25a <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f243:	83 ec 04             	sub    $0x4,%esp
f010f246:	68 e4 83 13 f0       	push   $0xf01383e4
f010f24b:	68 de 00 00 00       	push   $0xde
f010f250:	68 94 80 13 f0       	push   $0xf0138094
f010f255:	e8 ab 0f ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f25a:	83 ec 08             	sub    $0x8,%esp
f010f25d:	6a 00                	push   $0x0
f010f25f:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f264:	e8 8b 30 02 00       	call   f01322f4 <find_block>
f010f269:	83 c4 10             	add    $0x10,%esp
f010f26c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f26f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f273:	74 17                	je     f010f28c <test_find_block+0x263>
f010f275:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f278:	8b 40 0c             	mov    0xc(%eax),%eax
f010f27b:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f280:	75 0a                	jne    f010f28c <test_find_block+0x263>
f010f282:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f285:	8b 40 08             	mov    0x8(%eax),%eax
f010f288:	85 c0                	test   %eax,%eax
f010f28a:	74 17                	je     f010f2a3 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f28c:	83 ec 04             	sub    $0x4,%esp
f010f28f:	68 48 84 13 f0       	push   $0xf0138448
f010f294:	68 e3 00 00 00       	push   $0xe3
f010f299:	68 94 80 13 f0       	push   $0xf0138094
f010f29e:	e8 62 0f ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f2a3:	83 ec 08             	sub    $0x8,%esp
f010f2a6:	68 00 70 00 00       	push   $0x7000
f010f2ab:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f2b0:	e8 3f 30 02 00       	call   f01322f4 <find_block>
f010f2b5:	83 c4 10             	add    $0x10,%esp
f010f2b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f2bb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f2bf:	74 1a                	je     f010f2db <test_find_block+0x2b2>
f010f2c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2c4:	8b 40 0c             	mov    0xc(%eax),%eax
f010f2c7:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f2cc:	75 0d                	jne    f010f2db <test_find_block+0x2b2>
f010f2ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2d1:	8b 40 08             	mov    0x8(%eax),%eax
f010f2d4:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f2d9:	74 17                	je     f010f2f2 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f2db:	83 ec 04             	sub    $0x4,%esp
f010f2de:	68 48 84 13 f0       	push   $0xf0138448
f010f2e3:	68 e8 00 00 00       	push   $0xe8
f010f2e8:	68 94 80 13 f0       	push   $0xf0138094
f010f2ed:	e8 13 0f ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f2f2:	83 ec 08             	sub    $0x8,%esp
f010f2f5:	68 00 a4 01 00       	push   $0x1a400
f010f2fa:	68 c8 ac 89 f0       	push   $0xf089acc8
f010f2ff:	e8 f0 2f 02 00       	call   f01322f4 <find_block>
f010f304:	83 c4 10             	add    $0x10,%esp
f010f307:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f30a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f30e:	74 1a                	je     f010f32a <test_find_block+0x301>
f010f310:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f313:	8b 40 0c             	mov    0xc(%eax),%eax
f010f316:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f31b:	75 0d                	jne    f010f32a <test_find_block+0x301>
f010f31d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f320:	8b 40 08             	mov    0x8(%eax),%eax
f010f323:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f328:	74 17                	je     f010f341 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f32a:	83 ec 04             	sub    $0x4,%esp
f010f32d:	68 48 84 13 f0       	push   $0xf0138448
f010f332:	68 ed 00 00 00       	push   $0xed
f010f337:	68 94 80 13 f0       	push   $0xf0138094
f010f33c:	e8 c4 0e ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f341:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f346:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f349:	75 09                	jne    f010f354 <test_find_block+0x32b>
f010f34b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f350:	85 c0                	test   %eax,%eax
f010f352:	74 17                	je     f010f36b <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f354:	83 ec 04             	sub    $0x4,%esp
f010f357:	68 7c 84 13 f0       	push   $0xf013847c
f010f35c:	68 f2 00 00 00       	push   $0xf2
f010f361:	68 94 80 13 f0       	push   $0xf0138094
f010f366:	e8 9a 0e ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f36b:	83 ec 0c             	sub    $0xc,%esp
f010f36e:	68 e0 84 13 f0       	push   $0xf01384e0
f010f373:	e8 96 19 ff ff       	call   f0100d0e <cprintf>
f010f378:	83 c4 10             	add    $0x10,%esp
}
f010f37b:	90                   	nop
f010f37c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f37f:	5b                   	pop    %ebx
f010f380:	5e                   	pop    %esi
f010f381:	5f                   	pop    %edi
f010f382:	5d                   	pop    %ebp
f010f383:	c3                   	ret    

f010f384 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f384:	55                   	push   %ebp
f010f385:	89 e5                	mov    %esp,%ebp
f010f387:	57                   	push   %edi
f010f388:	56                   	push   %esi
f010f389:	53                   	push   %ebx
f010f38a:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f390:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f397:	83 ec 0c             	sub    $0xc,%esp
f010f39a:	ff 75 e0             	pushl  -0x20(%ebp)
f010f39d:	e8 75 2e 02 00       	call   f0132217 <initialize_MemBlocksList>
f010f3a2:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f3a5:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010f3ac:	00 00 00 
f010f3af:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010f3b6:	00 00 00 
f010f3b9:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010f3c0:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f3c3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f3c6:	bb c0 87 13 f0       	mov    $0xf01387c0,%ebx
f010f3cb:	ba 08 00 00 00       	mov    $0x8,%edx
f010f3d0:	89 c7                	mov    %eax,%edi
f010f3d2:	89 de                	mov    %ebx,%esi
f010f3d4:	89 d1                	mov    %edx,%ecx
f010f3d6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f3d8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f3db:	bb e0 87 13 f0       	mov    $0xf01387e0,%ebx
f010f3e0:	ba 08 00 00 00       	mov    $0x8,%edx
f010f3e5:	89 c7                	mov    %eax,%edi
f010f3e7:	89 de                	mov    %ebx,%esi
f010f3e9:	89 d1                	mov    %edx,%ecx
f010f3eb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f3ed:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010f3f4:	00 00 00 
f010f3f7:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010f3fe:	00 00 00 
f010f401:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010f408:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f40b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f412:	e9 5f 01 00 00       	jmp    f010f576 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f417:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f41a:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f41e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f421:	c1 e2 04             	shl    $0x4,%edx
f010f424:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f427:	01 da                	add    %ebx,%edx
f010f429:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f42f:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f431:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f434:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f438:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f43b:	c1 e2 04             	shl    $0x4,%edx
f010f43e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f441:	01 f2                	add    %esi,%edx
f010f443:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f449:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f44b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f44f:	0f 85 92 00 00 00    	jne    f010f4e7 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f455:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010f45a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f45d:	c1 e2 04             	shl    $0x4,%edx
f010f460:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f463:	01 fa                	add    %edi,%edx
f010f465:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f46b:	89 02                	mov    %eax,(%edx)
f010f46d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f470:	c1 e0 04             	shl    $0x4,%eax
f010f473:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f476:	01 d8                	add    %ebx,%eax
f010f478:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f47d:	8b 00                	mov    (%eax),%eax
f010f47f:	85 c0                	test   %eax,%eax
f010f481:	74 18                	je     f010f49b <test_alloc_block_FF+0x117>
f010f483:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010f488:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f48e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f491:	c1 e1 04             	shl    $0x4,%ecx
f010f494:	01 ca                	add    %ecx,%edx
f010f496:	89 50 04             	mov    %edx,0x4(%eax)
f010f499:	eb 13                	jmp    f010f4ae <test_alloc_block_FF+0x12a>
f010f49b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f4a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4a4:	c1 e2 04             	shl    $0x4,%edx
f010f4a7:	01 d0                	add    %edx,%eax
f010f4a9:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010f4ae:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f4b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4b7:	c1 e2 04             	shl    $0x4,%edx
f010f4ba:	01 d0                	add    %edx,%eax
f010f4bc:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010f4c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4c4:	c1 e0 04             	shl    $0x4,%eax
f010f4c7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f4ca:	01 f0                	add    %esi,%eax
f010f4cc:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f4d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f4d7:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f4dc:	40                   	inc    %eax
f010f4dd:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
f010f4e2:	e9 8c 00 00 00       	jmp    f010f573 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f4e7:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010f4ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4ef:	c1 e2 04             	shl    $0x4,%edx
f010f4f2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4f5:	01 fa                	add    %edi,%edx
f010f4f7:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f4fd:	89 02                	mov    %eax,(%edx)
f010f4ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f502:	c1 e0 04             	shl    $0x4,%eax
f010f505:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f508:	01 d8                	add    %ebx,%eax
f010f50a:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f50f:	8b 00                	mov    (%eax),%eax
f010f511:	85 c0                	test   %eax,%eax
f010f513:	74 17                	je     f010f52c <test_alloc_block_FF+0x1a8>
f010f515:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010f51a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f520:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f523:	c1 e1 04             	shl    $0x4,%ecx
f010f526:	01 ca                	add    %ecx,%edx
f010f528:	89 10                	mov    %edx,(%eax)
f010f52a:	eb 13                	jmp    f010f53f <test_alloc_block_FF+0x1bb>
f010f52c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f532:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f535:	c1 e2 04             	shl    $0x4,%edx
f010f538:	01 d0                	add    %edx,%eax
f010f53a:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010f53f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f545:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f548:	c1 e2 04             	shl    $0x4,%edx
f010f54b:	01 d0                	add    %edx,%eax
f010f54d:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010f552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f555:	c1 e0 04             	shl    $0x4,%eax
f010f558:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f55b:	01 f0                	add    %esi,%eax
f010f55d:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f562:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f568:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f56d:	40                   	inc    %eax
f010f56e:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f573:	ff 45 e4             	incl   -0x1c(%ebp)
f010f576:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f57a:	0f 8e 97 fe ff ff    	jle    f010f417 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f580:	83 ec 0c             	sub    $0xc,%esp
f010f583:	68 00 00 30 00       	push   $0x300000
f010f588:	e8 4c 30 02 00       	call   f01325d9 <alloc_block_FF>
f010f58d:	83 c4 10             	add    $0x10,%esp
f010f590:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f593:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f597:	74 17                	je     f010f5b0 <test_alloc_block_FF+0x22c>
f010f599:	83 ec 04             	sub    $0x4,%esp
f010f59c:	68 4c 85 13 f0       	push   $0xf013854c
f010f5a1:	68 15 01 00 00       	push   $0x115
f010f5a6:	68 94 80 13 f0       	push   $0xf0138094
f010f5ab:	e8 55 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f5b0:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f5b5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f5b8:	75 13                	jne    f010f5cd <test_alloc_block_FF+0x249>
f010f5ba:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f5bf:	83 f8 08             	cmp    $0x8,%eax
f010f5c2:	75 09                	jne    f010f5cd <test_alloc_block_FF+0x249>
f010f5c4:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f5c9:	85 c0                	test   %eax,%eax
f010f5cb:	74 17                	je     f010f5e4 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f5cd:	83 ec 04             	sub    $0x4,%esp
f010f5d0:	68 c0 85 13 f0       	push   $0xf01385c0
f010f5d5:	68 19 01 00 00       	push   $0x119
f010f5da:	68 94 80 13 f0       	push   $0xf0138094
f010f5df:	e8 21 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f5e4:	83 ec 0c             	sub    $0xc,%esp
f010f5e7:	68 00 24 00 00       	push   $0x2400
f010f5ec:	e8 e8 2f 02 00       	call   f01325d9 <alloc_block_FF>
f010f5f1:	83 c4 10             	add    $0x10,%esp
f010f5f4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f5f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5fb:	74 1a                	je     f010f617 <test_alloc_block_FF+0x293>
f010f5fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f600:	8b 40 0c             	mov    0xc(%eax),%eax
f010f603:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f608:	75 0d                	jne    f010f617 <test_alloc_block_FF+0x293>
f010f60a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f60d:	8b 40 08             	mov    0x8(%eax),%eax
f010f610:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f615:	74 17                	je     f010f62e <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f617:	83 ec 04             	sub    $0x4,%esp
f010f61a:	68 38 86 13 f0       	push   $0xf0138638
f010f61f:	68 21 01 00 00       	push   $0x121
f010f624:	68 94 80 13 f0       	push   $0xf0138094
f010f629:	e8 d7 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f62e:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f633:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f636:	75 13                	jne    f010f64b <test_alloc_block_FF+0x2c7>
f010f638:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f63d:	83 f8 07             	cmp    $0x7,%eax
f010f640:	75 09                	jne    f010f64b <test_alloc_block_FF+0x2c7>
f010f642:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f647:	85 c0                	test   %eax,%eax
f010f649:	74 17                	je     f010f662 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f64b:	83 ec 04             	sub    $0x4,%esp
f010f64e:	68 7c 86 13 f0       	push   $0xf013867c
f010f653:	68 25 01 00 00       	push   $0x125
f010f658:	68 94 80 13 f0       	push   $0xf0138094
f010f65d:	e8 a3 0b ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f662:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f669:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f66c:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f673:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f67a:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f681:	83 ec 0c             	sub    $0xc,%esp
f010f684:	ff 75 d8             	pushl  -0x28(%ebp)
f010f687:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f68d:	50                   	push   %eax
f010f68e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f691:	50                   	push   %eax
f010f692:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f695:	50                   	push   %eax
f010f696:	68 64 ad 89 f0       	push   $0xf089ad64
f010f69b:	e8 5b 1c 00 00       	call   f01112fb <check_list_data>
f010f6a0:	83 c4 20             	add    $0x20,%esp
f010f6a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f6a6:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f6aa:	74 17                	je     f010f6c3 <test_alloc_block_FF+0x33f>
f010f6ac:	83 ec 04             	sub    $0x4,%esp
f010f6af:	68 e0 86 13 f0       	push   $0xf01386e0
f010f6b4:	68 2d 01 00 00       	push   $0x12d
f010f6b9:	68 94 80 13 f0       	push   $0xf0138094
f010f6be:	e8 42 0b ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f6c3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f6c9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f6cc:	74 17                	je     f010f6e5 <test_alloc_block_FF+0x361>
f010f6ce:	83 ec 04             	sub    $0x4,%esp
f010f6d1:	68 2c 87 13 f0       	push   $0xf013872c
f010f6d6:	68 2e 01 00 00       	push   $0x12e
f010f6db:	68 94 80 13 f0       	push   $0xf0138094
f010f6e0:	e8 20 0b ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f6e5:	83 ec 0c             	sub    $0xc,%esp
f010f6e8:	68 00 00 10 00       	push   $0x100000
f010f6ed:	e8 e7 2e 02 00       	call   f01325d9 <alloc_block_FF>
f010f6f2:	83 c4 10             	add    $0x10,%esp
f010f6f5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f6f8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f6fc:	74 1a                	je     f010f718 <test_alloc_block_FF+0x394>
f010f6fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f701:	8b 40 0c             	mov    0xc(%eax),%eax
f010f704:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f709:	75 0d                	jne    f010f718 <test_alloc_block_FF+0x394>
f010f70b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f70e:	8b 40 08             	mov    0x8(%eax),%eax
f010f711:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f716:	74 17                	je     f010f72f <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f718:	83 ec 04             	sub    $0x4,%esp
f010f71b:	68 38 86 13 f0       	push   $0xf0138638
f010f720:	68 36 01 00 00       	push   $0x136
f010f725:	68 94 80 13 f0       	push   $0xf0138094
f010f72a:	e8 d6 0a ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f72f:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010f734:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f737:	4a                   	dec    %edx
f010f738:	39 d0                	cmp    %edx,%eax
f010f73a:	75 13                	jne    f010f74f <test_alloc_block_FF+0x3cb>
f010f73c:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f741:	83 f8 07             	cmp    $0x7,%eax
f010f744:	75 09                	jne    f010f74f <test_alloc_block_FF+0x3cb>
f010f746:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010f74b:	85 c0                	test   %eax,%eax
f010f74d:	74 17                	je     f010f766 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f74f:	83 ec 04             	sub    $0x4,%esp
f010f752:	68 7c 86 13 f0       	push   $0xf013867c
f010f757:	68 3a 01 00 00       	push   $0x13a
f010f75c:	68 94 80 13 f0       	push   $0xf0138094
f010f761:	e8 9f 0a ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f766:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f76d:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f770:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f777:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f77e:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f785:	83 ec 0c             	sub    $0xc,%esp
f010f788:	ff 75 d8             	pushl  -0x28(%ebp)
f010f78b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f791:	50                   	push   %eax
f010f792:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f795:	50                   	push   %eax
f010f796:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f799:	50                   	push   %eax
f010f79a:	68 64 ad 89 f0       	push   $0xf089ad64
f010f79f:	e8 57 1b 00 00       	call   f01112fb <check_list_data>
f010f7a4:	83 c4 20             	add    $0x20,%esp
f010f7a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f7aa:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f7ae:	74 17                	je     f010f7c7 <test_alloc_block_FF+0x443>
f010f7b0:	83 ec 04             	sub    $0x4,%esp
f010f7b3:	68 e0 86 13 f0       	push   $0xf01386e0
f010f7b8:	68 42 01 00 00       	push   $0x142
f010f7bd:	68 94 80 13 f0       	push   $0xf0138094
f010f7c2:	e8 3e 0a ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f7c7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f7cd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f7d0:	74 17                	je     f010f7e9 <test_alloc_block_FF+0x465>
f010f7d2:	83 ec 04             	sub    $0x4,%esp
f010f7d5:	68 2c 87 13 f0       	push   $0xf013872c
f010f7da:	68 43 01 00 00       	push   $0x143
f010f7df:	68 94 80 13 f0       	push   $0xf0138094
f010f7e4:	e8 1c 0a ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f7e9:	83 ec 0c             	sub    $0xc,%esp
f010f7ec:	68 78 87 13 f0       	push   $0xf0138778
f010f7f1:	e8 18 15 ff ff       	call   f0100d0e <cprintf>
f010f7f6:	83 c4 10             	add    $0x10,%esp
}
f010f7f9:	90                   	nop
f010f7fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f7fd:	5b                   	pop    %ebx
f010f7fe:	5e                   	pop    %esi
f010f7ff:	5f                   	pop    %edi
f010f800:	5d                   	pop    %ebp
f010f801:	c3                   	ret    

f010f802 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f802:	55                   	push   %ebp
f010f803:	89 e5                	mov    %esp,%ebp
f010f805:	57                   	push   %edi
f010f806:	56                   	push   %esi
f010f807:	53                   	push   %ebx
f010f808:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f80e:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f815:	83 ec 0c             	sub    $0xc,%esp
f010f818:	ff 75 e0             	pushl  -0x20(%ebp)
f010f81b:	e8 f7 29 02 00       	call   f0132217 <initialize_MemBlocksList>
f010f820:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f823:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010f82a:	00 00 00 
f010f82d:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010f834:	00 00 00 
f010f837:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010f83e:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f841:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f844:	bb f4 89 13 f0       	mov    $0xf01389f4,%ebx
f010f849:	ba 07 00 00 00       	mov    $0x7,%edx
f010f84e:	89 c7                	mov    %eax,%edi
f010f850:	89 de                	mov    %ebx,%esi
f010f852:	89 d1                	mov    %edx,%ecx
f010f854:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f856:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f859:	bb 10 8a 13 f0       	mov    $0xf0138a10,%ebx
f010f85e:	ba 07 00 00 00       	mov    $0x7,%edx
f010f863:	89 c7                	mov    %eax,%edi
f010f865:	89 de                	mov    %ebx,%esi
f010f867:	89 d1                	mov    %edx,%ecx
f010f869:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f86b:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010f872:	00 00 00 
f010f875:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010f87c:	00 00 00 
f010f87f:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010f886:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f889:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f890:	e9 5f 01 00 00       	jmp    f010f9f4 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f895:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f898:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f89c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f89f:	c1 e2 04             	shl    $0x4,%edx
f010f8a2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f8a5:	01 da                	add    %ebx,%edx
f010f8a7:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f8ad:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f8af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8b2:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f8b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8b9:	c1 e2 04             	shl    $0x4,%edx
f010f8bc:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f8bf:	01 f2                	add    %esi,%edx
f010f8c1:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f8c7:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f8c9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f8cd:	0f 85 92 00 00 00    	jne    f010f965 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f8d3:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010f8d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8db:	c1 e2 04             	shl    $0x4,%edx
f010f8de:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f8e1:	01 fa                	add    %edi,%edx
f010f8e3:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f8e9:	89 02                	mov    %eax,(%edx)
f010f8eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8ee:	c1 e0 04             	shl    $0x4,%eax
f010f8f1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f8f4:	01 d8                	add    %ebx,%eax
f010f8f6:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f8fb:	8b 00                	mov    (%eax),%eax
f010f8fd:	85 c0                	test   %eax,%eax
f010f8ff:	74 18                	je     f010f919 <test_alloc_block_BF+0x117>
f010f901:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010f906:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f90c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f90f:	c1 e1 04             	shl    $0x4,%ecx
f010f912:	01 ca                	add    %ecx,%edx
f010f914:	89 50 04             	mov    %edx,0x4(%eax)
f010f917:	eb 13                	jmp    f010f92c <test_alloc_block_BF+0x12a>
f010f919:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f91f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f922:	c1 e2 04             	shl    $0x4,%edx
f010f925:	01 d0                	add    %edx,%eax
f010f927:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010f92c:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f932:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f935:	c1 e2 04             	shl    $0x4,%edx
f010f938:	01 d0                	add    %edx,%eax
f010f93a:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010f93f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f942:	c1 e0 04             	shl    $0x4,%eax
f010f945:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f948:	01 f0                	add    %esi,%eax
f010f94a:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f94f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f955:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f95a:	40                   	inc    %eax
f010f95b:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
f010f960:	e9 8c 00 00 00       	jmp    f010f9f1 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f965:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010f96a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f96d:	c1 e2 04             	shl    $0x4,%edx
f010f970:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f973:	01 fa                	add    %edi,%edx
f010f975:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f97b:	89 02                	mov    %eax,(%edx)
f010f97d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f980:	c1 e0 04             	shl    $0x4,%eax
f010f983:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f986:	01 d8                	add    %ebx,%eax
f010f988:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f98d:	8b 00                	mov    (%eax),%eax
f010f98f:	85 c0                	test   %eax,%eax
f010f991:	74 17                	je     f010f9aa <test_alloc_block_BF+0x1a8>
f010f993:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010f998:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f99e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f9a1:	c1 e1 04             	shl    $0x4,%ecx
f010f9a4:	01 ca                	add    %ecx,%edx
f010f9a6:	89 10                	mov    %edx,(%eax)
f010f9a8:	eb 13                	jmp    f010f9bd <test_alloc_block_BF+0x1bb>
f010f9aa:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f9b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f9b3:	c1 e2 04             	shl    $0x4,%edx
f010f9b6:	01 d0                	add    %edx,%eax
f010f9b8:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010f9bd:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f9c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f9c6:	c1 e2 04             	shl    $0x4,%edx
f010f9c9:	01 d0                	add    %edx,%eax
f010f9cb:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010f9d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9d3:	c1 e0 04             	shl    $0x4,%eax
f010f9d6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f9d9:	01 f0                	add    %esi,%eax
f010f9db:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f9e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f9e6:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010f9eb:	40                   	inc    %eax
f010f9ec:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f9f1:	ff 45 e4             	incl   -0x1c(%ebp)
f010f9f4:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f9f8:	0f 8e 97 fe ff ff    	jle    f010f895 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f9fe:	83 ec 0c             	sub    $0xc,%esp
f010fa01:	68 00 00 40 00       	push   $0x400000
f010fa06:	e8 9b 2d 02 00       	call   f01327a6 <alloc_block_BF>
f010fa0b:	83 c4 10             	add    $0x10,%esp
f010fa0e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010fa11:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa15:	74 17                	je     f010fa2e <test_alloc_block_BF+0x22c>
f010fa17:	83 ec 04             	sub    $0x4,%esp
f010fa1a:	68 00 88 13 f0       	push   $0xf0138800
f010fa1f:	68 66 01 00 00       	push   $0x166
f010fa24:	68 94 80 13 f0       	push   $0xf0138094
f010fa29:	e8 d7 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa2e:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fa33:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fa36:	75 13                	jne    f010fa4b <test_alloc_block_BF+0x249>
f010fa38:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fa3d:	83 f8 07             	cmp    $0x7,%eax
f010fa40:	75 09                	jne    f010fa4b <test_alloc_block_BF+0x249>
f010fa42:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fa47:	85 c0                	test   %eax,%eax
f010fa49:	74 17                	je     f010fa62 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fa4b:	83 ec 04             	sub    $0x4,%esp
f010fa4e:	68 c0 85 13 f0       	push   $0xf01385c0
f010fa53:	68 6a 01 00 00       	push   $0x16a
f010fa58:	68 94 80 13 f0       	push   $0xf0138094
f010fa5d:	e8 a3 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fa62:	83 ec 0c             	sub    $0xc,%esp
f010fa65:	68 00 00 10 00       	push   $0x100000
f010fa6a:	e8 37 2d 02 00       	call   f01327a6 <alloc_block_BF>
f010fa6f:	83 c4 10             	add    $0x10,%esp
f010fa72:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010fa75:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa79:	74 1a                	je     f010fa95 <test_alloc_block_BF+0x293>
f010fa7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa7e:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa81:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fa86:	75 0d                	jne    f010fa95 <test_alloc_block_BF+0x293>
f010fa88:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa8b:	8b 40 08             	mov    0x8(%eax),%eax
f010fa8e:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fa93:	74 17                	je     f010faac <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fa95:	83 ec 04             	sub    $0x4,%esp
f010fa98:	68 74 88 13 f0       	push   $0xf0138874
f010fa9d:	68 72 01 00 00       	push   $0x172
f010faa2:	68 94 80 13 f0       	push   $0xf0138094
f010faa7:	e8 59 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010faac:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fab1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fab4:	75 13                	jne    f010fac9 <test_alloc_block_BF+0x2c7>
f010fab6:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fabb:	83 f8 06             	cmp    $0x6,%eax
f010fabe:	75 09                	jne    f010fac9 <test_alloc_block_BF+0x2c7>
f010fac0:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fac5:	85 c0                	test   %eax,%eax
f010fac7:	74 17                	je     f010fae0 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fac9:	83 ec 04             	sub    $0x4,%esp
f010facc:	68 b8 88 13 f0       	push   $0xf01388b8
f010fad1:	68 76 01 00 00       	push   $0x176
f010fad6:	68 94 80 13 f0       	push   $0xf0138094
f010fadb:	e8 25 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fae0:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fae7:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010faea:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010faf1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010faf8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010faff:	83 ec 0c             	sub    $0xc,%esp
f010fb02:	ff 75 d8             	pushl  -0x28(%ebp)
f010fb05:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fb0b:	50                   	push   %eax
f010fb0c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fb0f:	50                   	push   %eax
f010fb10:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb13:	50                   	push   %eax
f010fb14:	68 64 ad 89 f0       	push   $0xf089ad64
f010fb19:	e8 dd 17 00 00       	call   f01112fb <check_list_data>
f010fb1e:	83 c4 20             	add    $0x20,%esp
f010fb21:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb24:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb28:	74 17                	je     f010fb41 <test_alloc_block_BF+0x33f>
f010fb2a:	83 ec 04             	sub    $0x4,%esp
f010fb2d:	68 1c 89 13 f0       	push   $0xf013891c
f010fb32:	68 7e 01 00 00       	push   $0x17e
f010fb37:	68 94 80 13 f0       	push   $0xf0138094
f010fb3c:	e8 c4 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb41:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fb47:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb4a:	74 17                	je     f010fb63 <test_alloc_block_BF+0x361>
f010fb4c:	83 ec 04             	sub    $0x4,%esp
f010fb4f:	68 68 89 13 f0       	push   $0xf0138968
f010fb54:	68 7f 01 00 00       	push   $0x17f
f010fb59:	68 94 80 13 f0       	push   $0xf0138094
f010fb5e:	e8 a2 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fb63:	83 ec 0c             	sub    $0xc,%esp
f010fb66:	68 00 00 10 00       	push   $0x100000
f010fb6b:	e8 36 2c 02 00       	call   f01327a6 <alloc_block_BF>
f010fb70:	83 c4 10             	add    $0x10,%esp
f010fb73:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fb76:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb7a:	74 1a                	je     f010fb96 <test_alloc_block_BF+0x394>
f010fb7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb7f:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb82:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fb87:	75 0d                	jne    f010fb96 <test_alloc_block_BF+0x394>
f010fb89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb8c:	8b 40 08             	mov    0x8(%eax),%eax
f010fb8f:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fb94:	74 17                	je     f010fbad <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fb96:	83 ec 04             	sub    $0x4,%esp
f010fb99:	68 74 88 13 f0       	push   $0xf0138874
f010fb9e:	68 87 01 00 00       	push   $0x187
f010fba3:	68 94 80 13 f0       	push   $0xf0138094
f010fba8:	e8 58 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fbad:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fbb2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fbb5:	4a                   	dec    %edx
f010fbb6:	39 d0                	cmp    %edx,%eax
f010fbb8:	75 13                	jne    f010fbcd <test_alloc_block_BF+0x3cb>
f010fbba:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fbbf:	83 f8 06             	cmp    $0x6,%eax
f010fbc2:	75 09                	jne    f010fbcd <test_alloc_block_BF+0x3cb>
f010fbc4:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fbc9:	85 c0                	test   %eax,%eax
f010fbcb:	74 17                	je     f010fbe4 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fbcd:	83 ec 04             	sub    $0x4,%esp
f010fbd0:	68 b8 88 13 f0       	push   $0xf01388b8
f010fbd5:	68 8b 01 00 00       	push   $0x18b
f010fbda:	68 94 80 13 f0       	push   $0xf0138094
f010fbdf:	e8 21 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fbe4:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fbeb:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fbee:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010fbf5:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fbfc:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fc03:	83 ec 0c             	sub    $0xc,%esp
f010fc06:	ff 75 d8             	pushl  -0x28(%ebp)
f010fc09:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fc0f:	50                   	push   %eax
f010fc10:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fc13:	50                   	push   %eax
f010fc14:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fc17:	50                   	push   %eax
f010fc18:	68 64 ad 89 f0       	push   $0xf089ad64
f010fc1d:	e8 d9 16 00 00       	call   f01112fb <check_list_data>
f010fc22:	83 c4 20             	add    $0x20,%esp
f010fc25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc28:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc2c:	74 17                	je     f010fc45 <test_alloc_block_BF+0x443>
f010fc2e:	83 ec 04             	sub    $0x4,%esp
f010fc31:	68 1c 89 13 f0       	push   $0xf013891c
f010fc36:	68 93 01 00 00       	push   $0x193
f010fc3b:	68 94 80 13 f0       	push   $0xf0138094
f010fc40:	e8 c0 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc45:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fc4b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc4e:	74 17                	je     f010fc67 <test_alloc_block_BF+0x465>
f010fc50:	83 ec 04             	sub    $0x4,%esp
f010fc53:	68 68 89 13 f0       	push   $0xf0138968
f010fc58:	68 94 01 00 00       	push   $0x194
f010fc5d:	68 94 80 13 f0       	push   $0xf0138094
f010fc62:	e8 9e 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010fc67:	83 ec 0c             	sub    $0xc,%esp
f010fc6a:	68 00 0c 00 00       	push   $0xc00
f010fc6f:	e8 32 2b 02 00       	call   f01327a6 <alloc_block_BF>
f010fc74:	83 c4 10             	add    $0x10,%esp
f010fc77:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010fc7a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fc7e:	74 1a                	je     f010fc9a <test_alloc_block_BF+0x498>
f010fc80:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc83:	8b 40 0c             	mov    0xc(%eax),%eax
f010fc86:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fc8b:	75 0d                	jne    f010fc9a <test_alloc_block_BF+0x498>
f010fc8d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc90:	8b 40 08             	mov    0x8(%eax),%eax
f010fc93:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fc98:	74 17                	je     f010fcb1 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fc9a:	83 ec 04             	sub    $0x4,%esp
f010fc9d:	68 74 88 13 f0       	push   $0xf0138874
f010fca2:	68 9c 01 00 00       	push   $0x19c
f010fca7:	68 94 80 13 f0       	push   $0xf0138094
f010fcac:	e8 54 05 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fcb1:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fcb6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fcb9:	83 ea 02             	sub    $0x2,%edx
f010fcbc:	39 d0                	cmp    %edx,%eax
f010fcbe:	75 13                	jne    f010fcd3 <test_alloc_block_BF+0x4d1>
f010fcc0:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fcc5:	83 f8 06             	cmp    $0x6,%eax
f010fcc8:	75 09                	jne    f010fcd3 <test_alloc_block_BF+0x4d1>
f010fcca:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fccf:	85 c0                	test   %eax,%eax
f010fcd1:	74 17                	je     f010fcea <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fcd3:	83 ec 04             	sub    $0x4,%esp
f010fcd6:	68 b8 88 13 f0       	push   $0xf01388b8
f010fcdb:	68 a0 01 00 00       	push   $0x1a0
f010fce0:	68 94 80 13 f0       	push   $0xf0138094
f010fce5:	e8 1b 05 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fcea:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fcf1:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fcf4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010fcfb:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010fd02:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fd09:	83 ec 0c             	sub    $0xc,%esp
f010fd0c:	ff 75 d8             	pushl  -0x28(%ebp)
f010fd0f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fd15:	50                   	push   %eax
f010fd16:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fd19:	50                   	push   %eax
f010fd1a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fd1d:	50                   	push   %eax
f010fd1e:	68 64 ad 89 f0       	push   $0xf089ad64
f010fd23:	e8 d3 15 00 00       	call   f01112fb <check_list_data>
f010fd28:	83 c4 20             	add    $0x20,%esp
f010fd2b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fd2e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fd32:	74 17                	je     f010fd4b <test_alloc_block_BF+0x549>
f010fd34:	83 ec 04             	sub    $0x4,%esp
f010fd37:	68 1c 89 13 f0       	push   $0xf013891c
f010fd3c:	68 a8 01 00 00       	push   $0x1a8
f010fd41:	68 94 80 13 f0       	push   $0xf0138094
f010fd46:	e8 ba 04 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fd4b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fd51:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fd54:	74 17                	je     f010fd6d <test_alloc_block_BF+0x56b>
f010fd56:	83 ec 04             	sub    $0x4,%esp
f010fd59:	68 68 89 13 f0       	push   $0xf0138968
f010fd5e:	68 a9 01 00 00       	push   $0x1a9
f010fd63:	68 94 80 13 f0       	push   $0xf0138094
f010fd68:	e8 98 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010fd6d:	83 ec 0c             	sub    $0xc,%esp
f010fd70:	68 00 08 00 00       	push   $0x800
f010fd75:	e8 2c 2a 02 00       	call   f01327a6 <alloc_block_BF>
f010fd7a:	83 c4 10             	add    $0x10,%esp
f010fd7d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010fd80:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd84:	74 17                	je     f010fd9d <test_alloc_block_BF+0x59b>
f010fd86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd89:	8b 40 0c             	mov    0xc(%eax),%eax
f010fd8c:	3d 00 08 00 00       	cmp    $0x800,%eax
f010fd91:	75 0a                	jne    f010fd9d <test_alloc_block_BF+0x59b>
f010fd93:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd96:	8b 40 08             	mov    0x8(%eax),%eax
f010fd99:	85 c0                	test   %eax,%eax
f010fd9b:	74 17                	je     f010fdb4 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fd9d:	83 ec 04             	sub    $0x4,%esp
f010fda0:	68 74 88 13 f0       	push   $0xf0138874
f010fda5:	68 b1 01 00 00       	push   $0x1b1
f010fdaa:	68 94 80 13 f0       	push   $0xf0138094
f010fdaf:	e8 51 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fdb4:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f010fdb9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fdbc:	83 ea 02             	sub    $0x2,%edx
f010fdbf:	39 d0                	cmp    %edx,%eax
f010fdc1:	75 13                	jne    f010fdd6 <test_alloc_block_BF+0x5d4>
f010fdc3:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010fdc8:	83 f8 05             	cmp    $0x5,%eax
f010fdcb:	75 09                	jne    f010fdd6 <test_alloc_block_BF+0x5d4>
f010fdcd:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f010fdd2:	85 c0                	test   %eax,%eax
f010fdd4:	74 17                	je     f010fded <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fdd6:	83 ec 04             	sub    $0x4,%esp
f010fdd9:	68 b8 88 13 f0       	push   $0xf01388b8
f010fdde:	68 b5 01 00 00       	push   $0x1b5
f010fde3:	68 94 80 13 f0       	push   $0xf0138094
f010fde8:	e8 18 04 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fded:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fdf4:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010fdf7:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010fdfe:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010fe05:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fe0c:	83 ec 0c             	sub    $0xc,%esp
f010fe0f:	ff 75 d8             	pushl  -0x28(%ebp)
f010fe12:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fe18:	50                   	push   %eax
f010fe19:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fe1c:	50                   	push   %eax
f010fe1d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fe20:	50                   	push   %eax
f010fe21:	68 64 ad 89 f0       	push   $0xf089ad64
f010fe26:	e8 d0 14 00 00       	call   f01112fb <check_list_data>
f010fe2b:	83 c4 20             	add    $0x20,%esp
f010fe2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe31:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe35:	74 17                	je     f010fe4e <test_alloc_block_BF+0x64c>
f010fe37:	83 ec 04             	sub    $0x4,%esp
f010fe3a:	68 1c 89 13 f0       	push   $0xf013891c
f010fe3f:	68 bd 01 00 00       	push   $0x1bd
f010fe44:	68 94 80 13 f0       	push   $0xf0138094
f010fe49:	e8 b7 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe4e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fe54:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fe57:	74 17                	je     f010fe70 <test_alloc_block_BF+0x66e>
f010fe59:	83 ec 04             	sub    $0x4,%esp
f010fe5c:	68 68 89 13 f0       	push   $0xf0138968
f010fe61:	68 be 01 00 00       	push   $0x1be
f010fe66:	68 94 80 13 f0       	push   $0xf0138094
f010fe6b:	e8 95 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010fe70:	83 ec 0c             	sub    $0xc,%esp
f010fe73:	68 b4 89 13 f0       	push   $0xf01389b4
f010fe78:	e8 91 0e ff ff       	call   f0100d0e <cprintf>
f010fe7d:	83 c4 10             	add    $0x10,%esp
}
f010fe80:	90                   	nop
f010fe81:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fe84:	5b                   	pop    %ebx
f010fe85:	5e                   	pop    %esi
f010fe86:	5f                   	pop    %edi
f010fe87:	5d                   	pop    %ebp
f010fe88:	c3                   	ret    

f010fe89 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010fe89:	55                   	push   %ebp
f010fe8a:	89 e5                	mov    %esp,%ebp
f010fe8c:	57                   	push   %edi
f010fe8d:	56                   	push   %esi
f010fe8e:	53                   	push   %ebx
f010fe8f:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010fe95:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fe9c:	83 ec 0c             	sub    $0xc,%esp
f010fe9f:	ff 75 e0             	pushl  -0x20(%ebp)
f010fea2:	e8 70 23 02 00       	call   f0132217 <initialize_MemBlocksList>
f010fea7:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010feaa:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f010feb1:	00 00 00 
f010feb4:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f010febb:	00 00 00 
f010febe:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f010fec5:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fec8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fecb:	bb c0 87 13 f0       	mov    $0xf01387c0,%ebx
f010fed0:	ba 08 00 00 00       	mov    $0x8,%edx
f010fed5:	89 c7                	mov    %eax,%edi
f010fed7:	89 de                	mov    %ebx,%esi
f010fed9:	89 d1                	mov    %edx,%ecx
f010fedb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fedd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fee0:	bb 20 8c 13 f0       	mov    $0xf0138c20,%ebx
f010fee5:	ba 08 00 00 00       	mov    $0x8,%edx
f010feea:	89 c7                	mov    %eax,%edi
f010feec:	89 de                	mov    %ebx,%esi
f010feee:	89 d1                	mov    %edx,%ecx
f010fef0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fef2:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f010fef9:	00 00 00 
f010fefc:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f010ff03:	00 00 00 
f010ff06:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f010ff0d:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ff10:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ff17:	e9 5f 01 00 00       	jmp    f011007b <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ff1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff1f:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010ff23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff26:	c1 e2 04             	shl    $0x4,%edx
f010ff29:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ff2c:	01 da                	add    %ebx,%edx
f010ff2e:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010ff34:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ff36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff39:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ff3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff40:	c1 e2 04             	shl    $0x4,%edx
f010ff43:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ff46:	01 f2                	add    %esi,%edx
f010ff48:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ff4e:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ff50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ff54:	0f 85 92 00 00 00    	jne    f010ffec <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ff5a:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010ff5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ff62:	c1 e2 04             	shl    $0x4,%edx
f010ff65:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ff68:	01 fa                	add    %edi,%edx
f010ff6a:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010ff70:	89 02                	mov    %eax,(%edx)
f010ff72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff75:	c1 e0 04             	shl    $0x4,%eax
f010ff78:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ff7b:	01 d8                	add    %ebx,%eax
f010ff7d:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ff82:	8b 00                	mov    (%eax),%eax
f010ff84:	85 c0                	test   %eax,%eax
f010ff86:	74 18                	je     f010ffa0 <test_alloc_block_NF+0x117>
f010ff88:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f010ff8d:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ff93:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ff96:	c1 e1 04             	shl    $0x4,%ecx
f010ff99:	01 ca                	add    %ecx,%edx
f010ff9b:	89 50 04             	mov    %edx,0x4(%eax)
f010ff9e:	eb 13                	jmp    f010ffb3 <test_alloc_block_NF+0x12a>
f010ffa0:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ffa6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ffa9:	c1 e2 04             	shl    $0x4,%edx
f010ffac:	01 d0                	add    %edx,%eax
f010ffae:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f010ffb3:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ffb9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ffbc:	c1 e2 04             	shl    $0x4,%edx
f010ffbf:	01 d0                	add    %edx,%eax
f010ffc1:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f010ffc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffc9:	c1 e0 04             	shl    $0x4,%eax
f010ffcc:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ffcf:	01 f0                	add    %esi,%eax
f010ffd1:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ffd6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ffdc:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f010ffe1:	40                   	inc    %eax
f010ffe2:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
f010ffe7:	e9 8c 00 00 00       	jmp    f0110078 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ffec:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f010fff1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fff4:	c1 e2 04             	shl    $0x4,%edx
f010fff7:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fffa:	01 fa                	add    %edi,%edx
f010fffc:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f0110002:	89 02                	mov    %eax,(%edx)
f0110004:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110007:	c1 e0 04             	shl    $0x4,%eax
f011000a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f011000d:	01 d8                	add    %ebx,%eax
f011000f:	2d d0 00 00 00       	sub    $0xd0,%eax
f0110014:	8b 00                	mov    (%eax),%eax
f0110016:	85 c0                	test   %eax,%eax
f0110018:	74 17                	je     f0110031 <test_alloc_block_NF+0x1a8>
f011001a:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f011001f:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f0110025:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f0110028:	c1 e1 04             	shl    $0x4,%ecx
f011002b:	01 ca                	add    %ecx,%edx
f011002d:	89 10                	mov    %edx,(%eax)
f011002f:	eb 13                	jmp    f0110044 <test_alloc_block_NF+0x1bb>
f0110031:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110037:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011003a:	c1 e2 04             	shl    $0x4,%edx
f011003d:	01 d0                	add    %edx,%eax
f011003f:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0110044:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011004a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011004d:	c1 e2 04             	shl    $0x4,%edx
f0110050:	01 d0                	add    %edx,%eax
f0110052:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0110057:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011005a:	c1 e0 04             	shl    $0x4,%eax
f011005d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110060:	01 f0                	add    %esi,%eax
f0110062:	2d d4 00 00 00       	sub    $0xd4,%eax
f0110067:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f011006d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110072:	40                   	inc    %eax
f0110073:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f0110078:	ff 45 e4             	incl   -0x1c(%ebp)
f011007b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f011007f:	0f 8e 97 fe ff ff    	jle    f010ff1c <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f0110085:	83 ec 0c             	sub    $0xc,%esp
f0110088:	68 00 00 a0 00       	push   $0xa00000
f011008d:	e8 25 29 02 00       	call   f01329b7 <alloc_block_NF>
f0110092:	83 c4 10             	add    $0x10,%esp
f0110095:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f0110098:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011009c:	74 17                	je     f01100b5 <test_alloc_block_NF+0x22c>
f011009e:	83 ec 04             	sub    $0x4,%esp
f01100a1:	68 2c 8a 13 f0       	push   $0xf0138a2c
f01100a6:	68 e1 01 00 00       	push   $0x1e1
f01100ab:	68 94 80 13 f0       	push   $0xf0138094
f01100b0:	e8 50 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01100b5:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01100ba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01100bd:	75 13                	jne    f01100d2 <test_alloc_block_NF+0x249>
f01100bf:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01100c4:	83 f8 08             	cmp    $0x8,%eax
f01100c7:	75 09                	jne    f01100d2 <test_alloc_block_NF+0x249>
f01100c9:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01100ce:	85 c0                	test   %eax,%eax
f01100d0:	74 17                	je     f01100e9 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f01100d2:	83 ec 04             	sub    $0x4,%esp
f01100d5:	68 c0 85 13 f0       	push   $0xf01385c0
f01100da:	68 e5 01 00 00       	push   $0x1e5
f01100df:	68 94 80 13 f0       	push   $0xf0138094
f01100e4:	e8 1c 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f01100e9:	83 ec 0c             	sub    $0xc,%esp
f01100ec:	68 00 28 00 00       	push   $0x2800
f01100f1:	e8 c1 28 02 00       	call   f01329b7 <alloc_block_NF>
f01100f6:	83 c4 10             	add    $0x10,%esp
f01100f9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f01100fc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110100:	74 1a                	je     f011011c <test_alloc_block_NF+0x293>
f0110102:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110105:	8b 40 0c             	mov    0xc(%eax),%eax
f0110108:	3d 00 28 00 00       	cmp    $0x2800,%eax
f011010d:	75 0d                	jne    f011011c <test_alloc_block_NF+0x293>
f011010f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110112:	8b 40 08             	mov    0x8(%eax),%eax
f0110115:	3d 00 70 00 00       	cmp    $0x7000,%eax
f011011a:	74 17                	je     f0110133 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011011c:	83 ec 04             	sub    $0x4,%esp
f011011f:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0110124:	68 ed 01 00 00       	push   $0x1ed
f0110129:	68 94 80 13 f0       	push   $0xf0138094
f011012e:	e8 d2 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110133:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110138:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011013b:	75 13                	jne    f0110150 <test_alloc_block_NF+0x2c7>
f011013d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110142:	83 f8 07             	cmp    $0x7,%eax
f0110145:	75 09                	jne    f0110150 <test_alloc_block_NF+0x2c7>
f0110147:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f011014c:	85 c0                	test   %eax,%eax
f011014e:	74 17                	je     f0110167 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110150:	83 ec 04             	sub    $0x4,%esp
f0110153:	68 e4 8a 13 f0       	push   $0xf0138ae4
f0110158:	68 f1 01 00 00       	push   $0x1f1
f011015d:	68 94 80 13 f0       	push   $0xf0138094
f0110162:	e8 9e 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f0110167:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011016e:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f0110171:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f0110178:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f011017f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110186:	83 ec 0c             	sub    $0xc,%esp
f0110189:	ff 75 d8             	pushl  -0x28(%ebp)
f011018c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110192:	50                   	push   %eax
f0110193:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110196:	50                   	push   %eax
f0110197:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011019a:	50                   	push   %eax
f011019b:	68 64 ad 89 f0       	push   $0xf089ad64
f01101a0:	e8 56 11 00 00       	call   f01112fb <check_list_data>
f01101a5:	83 c4 20             	add    $0x20,%esp
f01101a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01101ab:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01101af:	74 17                	je     f01101c8 <test_alloc_block_NF+0x33f>
f01101b1:	83 ec 04             	sub    $0x4,%esp
f01101b4:	68 48 8b 13 f0       	push   $0xf0138b48
f01101b9:	68 f9 01 00 00       	push   $0x1f9
f01101be:	68 94 80 13 f0       	push   $0xf0138094
f01101c3:	e8 3d 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01101c8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01101ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01101d1:	74 17                	je     f01101ea <test_alloc_block_NF+0x361>
f01101d3:	83 ec 04             	sub    $0x4,%esp
f01101d6:	68 94 8b 13 f0       	push   $0xf0138b94
f01101db:	68 fa 01 00 00       	push   $0x1fa
f01101e0:	68 94 80 13 f0       	push   $0xf0138094
f01101e5:	e8 1b 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f01101ea:	83 ec 0c             	sub    $0xc,%esp
f01101ed:	68 00 00 20 00       	push   $0x200000
f01101f2:	e8 c0 27 02 00       	call   f01329b7 <alloc_block_NF>
f01101f7:	83 c4 10             	add    $0x10,%esp
f01101fa:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f01101fd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110201:	74 1a                	je     f011021d <test_alloc_block_NF+0x394>
f0110203:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110206:	8b 40 0c             	mov    0xc(%eax),%eax
f0110209:	3d 00 00 20 00       	cmp    $0x200000,%eax
f011020e:	75 0d                	jne    f011021d <test_alloc_block_NF+0x394>
f0110210:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110213:	8b 40 08             	mov    0x8(%eax),%eax
f0110216:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f011021b:	74 17                	je     f0110234 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011021d:	83 ec 04             	sub    $0x4,%esp
f0110220:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0110225:	68 03 02 00 00       	push   $0x203
f011022a:	68 94 80 13 f0       	push   $0xf0138094
f011022f:	e8 d1 ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110234:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110239:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011023c:	75 13                	jne    f0110251 <test_alloc_block_NF+0x3c8>
f011023e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110243:	83 f8 06             	cmp    $0x6,%eax
f0110246:	75 09                	jne    f0110251 <test_alloc_block_NF+0x3c8>
f0110248:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f011024d:	85 c0                	test   %eax,%eax
f011024f:	74 17                	je     f0110268 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110251:	83 ec 04             	sub    $0x4,%esp
f0110254:	68 e4 8a 13 f0       	push   $0xf0138ae4
f0110259:	68 07 02 00 00       	push   $0x207
f011025e:	68 94 80 13 f0       	push   $0xf0138094
f0110263:	e8 9d ff fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110268:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011026f:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110272:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f0110279:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f0110280:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110287:	83 ec 0c             	sub    $0xc,%esp
f011028a:	ff 75 d8             	pushl  -0x28(%ebp)
f011028d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110293:	50                   	push   %eax
f0110294:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110297:	50                   	push   %eax
f0110298:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011029b:	50                   	push   %eax
f011029c:	68 64 ad 89 f0       	push   $0xf089ad64
f01102a1:	e8 55 10 00 00       	call   f01112fb <check_list_data>
f01102a6:	83 c4 20             	add    $0x20,%esp
f01102a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01102ac:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01102b0:	74 17                	je     f01102c9 <test_alloc_block_NF+0x440>
f01102b2:	83 ec 04             	sub    $0x4,%esp
f01102b5:	68 48 8b 13 f0       	push   $0xf0138b48
f01102ba:	68 0f 02 00 00       	push   $0x20f
f01102bf:	68 94 80 13 f0       	push   $0xf0138094
f01102c4:	e8 3c ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01102c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01102cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01102d2:	74 17                	je     f01102eb <test_alloc_block_NF+0x462>
f01102d4:	83 ec 04             	sub    $0x4,%esp
f01102d7:	68 94 8b 13 f0       	push   $0xf0138b94
f01102dc:	68 10 02 00 00       	push   $0x210
f01102e1:	68 94 80 13 f0       	push   $0xf0138094
f01102e6:	e8 1a ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f01102eb:	83 ec 0c             	sub    $0xc,%esp
f01102ee:	68 00 00 08 00       	push   $0x80000
f01102f3:	e8 bf 26 02 00       	call   f01329b7 <alloc_block_NF>
f01102f8:	83 c4 10             	add    $0x10,%esp
f01102fb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f01102fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110302:	74 1a                	je     f011031e <test_alloc_block_NF+0x495>
f0110304:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110307:	8b 40 0c             	mov    0xc(%eax),%eax
f011030a:	3d 00 00 08 00       	cmp    $0x80000,%eax
f011030f:	75 0d                	jne    f011031e <test_alloc_block_NF+0x495>
f0110311:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110314:	8b 40 08             	mov    0x8(%eax),%eax
f0110317:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f011031c:	74 17                	je     f0110335 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011031e:	83 ec 04             	sub    $0x4,%esp
f0110321:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0110326:	68 19 02 00 00       	push   $0x219
f011032b:	68 94 80 13 f0       	push   $0xf0138094
f0110330:	e8 d0 fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110335:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f011033a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011033d:	4a                   	dec    %edx
f011033e:	39 d0                	cmp    %edx,%eax
f0110340:	75 13                	jne    f0110355 <test_alloc_block_NF+0x4cc>
f0110342:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110347:	83 f8 06             	cmp    $0x6,%eax
f011034a:	75 09                	jne    f0110355 <test_alloc_block_NF+0x4cc>
f011034c:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110351:	85 c0                	test   %eax,%eax
f0110353:	74 17                	je     f011036c <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110355:	83 ec 04             	sub    $0x4,%esp
f0110358:	68 e4 8a 13 f0       	push   $0xf0138ae4
f011035d:	68 1d 02 00 00       	push   $0x21d
f0110362:	68 94 80 13 f0       	push   $0xf0138094
f0110367:	e8 99 fe fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011036c:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110373:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110376:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f011037d:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f0110384:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011038b:	83 ec 0c             	sub    $0xc,%esp
f011038e:	ff 75 d8             	pushl  -0x28(%ebp)
f0110391:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110397:	50                   	push   %eax
f0110398:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011039b:	50                   	push   %eax
f011039c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011039f:	50                   	push   %eax
f01103a0:	68 64 ad 89 f0       	push   $0xf089ad64
f01103a5:	e8 51 0f 00 00       	call   f01112fb <check_list_data>
f01103aa:	83 c4 20             	add    $0x20,%esp
f01103ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01103b0:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01103b4:	74 17                	je     f01103cd <test_alloc_block_NF+0x544>
f01103b6:	83 ec 04             	sub    $0x4,%esp
f01103b9:	68 48 8b 13 f0       	push   $0xf0138b48
f01103be:	68 25 02 00 00       	push   $0x225
f01103c3:	68 94 80 13 f0       	push   $0xf0138094
f01103c8:	e8 38 fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01103cd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01103d3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01103d6:	74 17                	je     f01103ef <test_alloc_block_NF+0x566>
f01103d8:	83 ec 04             	sub    $0x4,%esp
f01103db:	68 94 8b 13 f0       	push   $0xf0138b94
f01103e0:	68 26 02 00 00       	push   $0x226
f01103e5:	68 94 80 13 f0       	push   $0xf0138094
f01103ea:	e8 16 fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f01103ef:	83 ec 0c             	sub    $0xc,%esp
f01103f2:	68 00 fc 07 00       	push   $0x7fc00
f01103f7:	e8 bb 25 02 00       	call   f01329b7 <alloc_block_NF>
f01103fc:	83 c4 10             	add    $0x10,%esp
f01103ff:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f0110402:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110406:	74 1a                	je     f0110422 <test_alloc_block_NF+0x599>
f0110408:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011040b:	8b 40 0c             	mov    0xc(%eax),%eax
f011040e:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f0110413:	75 0d                	jne    f0110422 <test_alloc_block_NF+0x599>
f0110415:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110418:	8b 40 08             	mov    0x8(%eax),%eax
f011041b:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110420:	74 17                	je     f0110439 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110422:	83 ec 04             	sub    $0x4,%esp
f0110425:	68 a0 8a 13 f0       	push   $0xf0138aa0
f011042a:	68 2f 02 00 00       	push   $0x22f
f011042f:	68 94 80 13 f0       	push   $0xf0138094
f0110434:	e8 cc fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110439:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f011043e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110441:	83 ea 02             	sub    $0x2,%edx
f0110444:	39 d0                	cmp    %edx,%eax
f0110446:	75 13                	jne    f011045b <test_alloc_block_NF+0x5d2>
f0110448:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f011044d:	83 f8 06             	cmp    $0x6,%eax
f0110450:	75 09                	jne    f011045b <test_alloc_block_NF+0x5d2>
f0110452:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110457:	85 c0                	test   %eax,%eax
f0110459:	74 17                	je     f0110472 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011045b:	83 ec 04             	sub    $0x4,%esp
f011045e:	68 e4 8a 13 f0       	push   $0xf0138ae4
f0110463:	68 33 02 00 00       	push   $0x233
f0110468:	68 94 80 13 f0       	push   $0xf0138094
f011046d:	e8 93 fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110472:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110479:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011047c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f0110483:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f011048a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110491:	83 ec 0c             	sub    $0xc,%esp
f0110494:	ff 75 d8             	pushl  -0x28(%ebp)
f0110497:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011049d:	50                   	push   %eax
f011049e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104a1:	50                   	push   %eax
f01104a2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01104a5:	50                   	push   %eax
f01104a6:	68 64 ad 89 f0       	push   $0xf089ad64
f01104ab:	e8 4b 0e 00 00       	call   f01112fb <check_list_data>
f01104b0:	83 c4 20             	add    $0x20,%esp
f01104b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01104b6:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104ba:	74 17                	je     f01104d3 <test_alloc_block_NF+0x64a>
f01104bc:	83 ec 04             	sub    $0x4,%esp
f01104bf:	68 48 8b 13 f0       	push   $0xf0138b48
f01104c4:	68 3b 02 00 00       	push   $0x23b
f01104c9:	68 94 80 13 f0       	push   $0xf0138094
f01104ce:	e8 32 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01104d3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01104d9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01104dc:	74 17                	je     f01104f5 <test_alloc_block_NF+0x66c>
f01104de:	83 ec 04             	sub    $0x4,%esp
f01104e1:	68 94 8b 13 f0       	push   $0xf0138b94
f01104e6:	68 3c 02 00 00       	push   $0x23c
f01104eb:	68 94 80 13 f0       	push   $0xf0138094
f01104f0:	e8 10 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f01104f5:	83 ec 0c             	sub    $0xc,%esp
f01104f8:	68 00 0c 00 00       	push   $0xc00
f01104fd:	e8 b5 24 02 00       	call   f01329b7 <alloc_block_NF>
f0110502:	83 c4 10             	add    $0x10,%esp
f0110505:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f0110508:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011050c:	74 17                	je     f0110525 <test_alloc_block_NF+0x69c>
f011050e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110511:	8b 40 0c             	mov    0xc(%eax),%eax
f0110514:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f0110519:	75 0a                	jne    f0110525 <test_alloc_block_NF+0x69c>
f011051b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011051e:	8b 40 08             	mov    0x8(%eax),%eax
f0110521:	85 c0                	test   %eax,%eax
f0110523:	74 17                	je     f011053c <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110525:	83 ec 04             	sub    $0x4,%esp
f0110528:	68 a0 8a 13 f0       	push   $0xf0138aa0
f011052d:	68 45 02 00 00       	push   $0x245
f0110532:	68 94 80 13 f0       	push   $0xf0138094
f0110537:	e8 c9 fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011053c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110541:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110544:	83 ea 02             	sub    $0x2,%edx
f0110547:	39 d0                	cmp    %edx,%eax
f0110549:	75 13                	jne    f011055e <test_alloc_block_NF+0x6d5>
f011054b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110550:	83 f8 05             	cmp    $0x5,%eax
f0110553:	75 09                	jne    f011055e <test_alloc_block_NF+0x6d5>
f0110555:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f011055a:	85 c0                	test   %eax,%eax
f011055c:	74 17                	je     f0110575 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011055e:	83 ec 04             	sub    $0x4,%esp
f0110561:	68 e4 8a 13 f0       	push   $0xf0138ae4
f0110566:	68 49 02 00 00       	push   $0x249
f011056b:	68 94 80 13 f0       	push   $0xf0138094
f0110570:	e8 90 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110575:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011057c:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f011057f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f0110586:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f011058d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110594:	83 ec 0c             	sub    $0xc,%esp
f0110597:	ff 75 d8             	pushl  -0x28(%ebp)
f011059a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01105a0:	50                   	push   %eax
f01105a1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105a4:	50                   	push   %eax
f01105a5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105a8:	50                   	push   %eax
f01105a9:	68 64 ad 89 f0       	push   $0xf089ad64
f01105ae:	e8 48 0d 00 00       	call   f01112fb <check_list_data>
f01105b3:	83 c4 20             	add    $0x20,%esp
f01105b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01105b9:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01105bd:	74 17                	je     f01105d6 <test_alloc_block_NF+0x74d>
f01105bf:	83 ec 04             	sub    $0x4,%esp
f01105c2:	68 48 8b 13 f0       	push   $0xf0138b48
f01105c7:	68 51 02 00 00       	push   $0x251
f01105cc:	68 94 80 13 f0       	push   $0xf0138094
f01105d1:	e8 2f fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01105d6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01105dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105df:	74 17                	je     f01105f8 <test_alloc_block_NF+0x76f>
f01105e1:	83 ec 04             	sub    $0x4,%esp
f01105e4:	68 94 8b 13 f0       	push   $0xf0138b94
f01105e9:	68 52 02 00 00       	push   $0x252
f01105ee:	68 94 80 13 f0       	push   $0xf0138094
f01105f3:	e8 0d fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f01105f8:	83 ec 0c             	sub    $0xc,%esp
f01105fb:	68 00 04 00 00       	push   $0x400
f0110600:	e8 b2 23 02 00       	call   f01329b7 <alloc_block_NF>
f0110605:	83 c4 10             	add    $0x10,%esp
f0110608:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f011060b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011060f:	74 1a                	je     f011062b <test_alloc_block_NF+0x7a2>
f0110611:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110614:	8b 40 0c             	mov    0xc(%eax),%eax
f0110617:	3d 00 04 00 00       	cmp    $0x400,%eax
f011061c:	75 0d                	jne    f011062b <test_alloc_block_NF+0x7a2>
f011061e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110621:	8b 40 08             	mov    0x8(%eax),%eax
f0110624:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110629:	74 17                	je     f0110642 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011062b:	83 ec 04             	sub    $0x4,%esp
f011062e:	68 a0 8a 13 f0       	push   $0xf0138aa0
f0110633:	68 5b 02 00 00       	push   $0x25b
f0110638:	68 94 80 13 f0       	push   $0xf0138094
f011063d:	e8 c3 fb fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110642:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110647:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011064a:	83 ea 03             	sub    $0x3,%edx
f011064d:	39 d0                	cmp    %edx,%eax
f011064f:	75 13                	jne    f0110664 <test_alloc_block_NF+0x7db>
f0110651:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110656:	83 f8 05             	cmp    $0x5,%eax
f0110659:	75 09                	jne    f0110664 <test_alloc_block_NF+0x7db>
f011065b:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110660:	85 c0                	test   %eax,%eax
f0110662:	74 17                	je     f011067b <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110664:	83 ec 04             	sub    $0x4,%esp
f0110667:	68 e4 8a 13 f0       	push   $0xf0138ae4
f011066c:	68 5f 02 00 00       	push   $0x25f
f0110671:	68 94 80 13 f0       	push   $0xf0138094
f0110676:	e8 8a fb fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011067b:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110682:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110685:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f011068c:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f0110693:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011069a:	83 ec 0c             	sub    $0xc,%esp
f011069d:	ff 75 d8             	pushl  -0x28(%ebp)
f01106a0:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01106a6:	50                   	push   %eax
f01106a7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106aa:	50                   	push   %eax
f01106ab:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01106ae:	50                   	push   %eax
f01106af:	68 64 ad 89 f0       	push   $0xf089ad64
f01106b4:	e8 42 0c 00 00       	call   f01112fb <check_list_data>
f01106b9:	83 c4 20             	add    $0x20,%esp
f01106bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01106bf:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01106c3:	74 17                	je     f01106dc <test_alloc_block_NF+0x853>
f01106c5:	83 ec 04             	sub    $0x4,%esp
f01106c8:	68 48 8b 13 f0       	push   $0xf0138b48
f01106cd:	68 67 02 00 00       	push   $0x267
f01106d2:	68 94 80 13 f0       	push   $0xf0138094
f01106d7:	e8 29 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01106dc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01106e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01106e5:	74 17                	je     f01106fe <test_alloc_block_NF+0x875>
f01106e7:	83 ec 04             	sub    $0x4,%esp
f01106ea:	68 94 8b 13 f0       	push   $0xf0138b94
f01106ef:	68 68 02 00 00       	push   $0x268
f01106f4:	68 94 80 13 f0       	push   $0xf0138094
f01106f9:	e8 07 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f01106fe:	83 ec 0c             	sub    $0xc,%esp
f0110701:	68 e0 8b 13 f0       	push   $0xf0138be0
f0110706:	e8 03 06 ff ff       	call   f0100d0e <cprintf>
f011070b:	83 c4 10             	add    $0x10,%esp

}
f011070e:	90                   	nop
f011070f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110712:	5b                   	pop    %ebx
f0110713:	5e                   	pop    %esi
f0110714:	5f                   	pop    %edi
f0110715:	5d                   	pop    %ebp
f0110716:	c3                   	ret    

f0110717 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110717:	55                   	push   %ebp
f0110718:	89 e5                	mov    %esp,%ebp
f011071a:	57                   	push   %edi
f011071b:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110721:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110728:	83 ec 0c             	sub    $0xc,%esp
f011072b:	ff 75 f4             	pushl  -0xc(%ebp)
f011072e:	e8 e4 1a 02 00       	call   f0132217 <initialize_MemBlocksList>
f0110733:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110736:	c7 05 c8 ac 89 f0 00 	movl   $0x0,0xf089acc8
f011073d:	00 00 00 
f0110740:	c7 05 cc ac 89 f0 00 	movl   $0x0,0xf089accc
f0110747:	00 00 00 
f011074a:	c7 05 d4 ac 89 f0 00 	movl   $0x0,0xf089acd4
f0110751:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110754:	c7 05 64 ad 89 f0 00 	movl   $0x0,0xf089ad64
f011075b:	00 00 00 
f011075e:	c7 05 68 ad 89 f0 00 	movl   $0x0,0xf089ad68
f0110765:	00 00 00 
f0110768:	c7 05 70 ad 89 f0 00 	movl   $0x0,0xf089ad70
f011076f:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110772:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110775:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011077a:	b8 00 00 00 00       	mov    $0x0,%eax
f011077f:	89 d7                	mov    %edx,%edi
f0110781:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110783:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110786:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011078b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110790:	89 d7                	mov    %edx,%edi
f0110792:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110794:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f011079b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f01107a2:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f01107a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107ac:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f01107b3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01107b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107b7:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01107be:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01107bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107c2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01107c6:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f01107c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107cc:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01107d0:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f01107d3:	83 ec 0c             	sub    $0xc,%esp
f01107d6:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01107d9:	50                   	push   %eax
f01107da:	e8 a5 27 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f01107df:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01107e2:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01107e7:	85 c0                	test   %eax,%eax
f01107e9:	75 14                	jne    f01107ff <test_insert_sorted_with_merge_freeList+0xe8>
f01107eb:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01107f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01107f3:	75 0a                	jne    f01107ff <test_insert_sorted_with_merge_freeList+0xe8>
f01107f5:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01107fa:	83 f8 01             	cmp    $0x1,%eax
f01107fd:	74 17                	je     f0110816 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01107ff:	83 ec 04             	sub    $0x4,%esp
f0110802:	68 40 8c 13 f0       	push   $0xf0138c40
f0110807:	68 88 02 00 00       	push   $0x288
f011080c:	68 94 80 13 f0       	push   $0xf0138094
f0110811:	e8 ef f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110816:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f011081d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110824:	83 ec 0c             	sub    $0xc,%esp
f0110827:	ff 75 f0             	pushl  -0x10(%ebp)
f011082a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011082d:	50                   	push   %eax
f011082e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110831:	50                   	push   %eax
f0110832:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110835:	50                   	push   %eax
f0110836:	68 64 ad 89 f0       	push   $0xf089ad64
f011083b:	e8 bb 0a 00 00       	call   f01112fb <check_list_data>
f0110840:	83 c4 20             	add    $0x20,%esp
f0110843:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110846:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011084a:	74 17                	je     f0110863 <test_insert_sorted_with_merge_freeList+0x14c>
f011084c:	83 ec 04             	sub    $0x4,%esp
f011084f:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110854:	68 8e 02 00 00       	push   $0x28e
f0110859:	68 94 80 13 f0       	push   $0xf0138094
f011085e:	e8 a2 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110863:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110866:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110869:	74 17                	je     f0110882 <test_insert_sorted_with_merge_freeList+0x16b>
f011086b:	83 ec 04             	sub    $0x4,%esp
f011086e:	68 00 8d 13 f0       	push   $0xf0138d00
f0110873:	68 8f 02 00 00       	push   $0x28f
f0110878:	68 94 80 13 f0       	push   $0xf0138094
f011087d:	e8 83 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110882:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110889:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011088c:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110893:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110894:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110897:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f011089e:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011089f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108a2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01108a6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f01108ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01108af:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01108b3:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f01108b6:	83 ec 0c             	sub    $0xc,%esp
f01108b9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01108bf:	50                   	push   %eax
f01108c0:	e8 bf 26 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f01108c5:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f01108c8:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01108cd:	85 c0                	test   %eax,%eax
f01108cf:	75 14                	jne    f01108e5 <test_insert_sorted_with_merge_freeList+0x1ce>
f01108d1:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01108d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01108d9:	75 0a                	jne    f01108e5 <test_insert_sorted_with_merge_freeList+0x1ce>
f01108db:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01108e0:	83 f8 02             	cmp    $0x2,%eax
f01108e3:	74 17                	je     f01108fc <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01108e5:	83 ec 04             	sub    $0x4,%esp
f01108e8:	68 40 8c 13 f0       	push   $0xf0138c40
f01108ed:	68 9e 02 00 00       	push   $0x29e
f01108f2:	68 94 80 13 f0       	push   $0xf0138094
f01108f7:	e8 09 f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01108fc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110903:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011090a:	83 ec 0c             	sub    $0xc,%esp
f011090d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110910:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110913:	50                   	push   %eax
f0110914:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110917:	50                   	push   %eax
f0110918:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011091b:	50                   	push   %eax
f011091c:	68 64 ad 89 f0       	push   $0xf089ad64
f0110921:	e8 d5 09 00 00       	call   f01112fb <check_list_data>
f0110926:	83 c4 20             	add    $0x20,%esp
f0110929:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011092c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110930:	74 17                	je     f0110949 <test_insert_sorted_with_merge_freeList+0x232>
f0110932:	83 ec 04             	sub    $0x4,%esp
f0110935:	68 ac 8c 13 f0       	push   $0xf0138cac
f011093a:	68 a4 02 00 00       	push   $0x2a4
f011093f:	68 94 80 13 f0       	push   $0xf0138094
f0110944:	e8 bc f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110949:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011094c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011094f:	74 17                	je     f0110968 <test_insert_sorted_with_merge_freeList+0x251>
f0110951:	83 ec 04             	sub    $0x4,%esp
f0110954:	68 00 8d 13 f0       	push   $0xf0138d00
f0110959:	68 a5 02 00 00       	push   $0x2a5
f011095e:	68 94 80 13 f0       	push   $0xf0138094
f0110963:	e8 9d f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110968:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f011096f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110972:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110979:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011097a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011097d:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110984:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110985:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110988:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011098c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110992:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110995:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110999:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f011099f:	83 ec 0c             	sub    $0xc,%esp
f01109a2:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f01109a8:	50                   	push   %eax
f01109a9:	e8 d6 25 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f01109ae:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01109b1:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01109b6:	85 c0                	test   %eax,%eax
f01109b8:	75 14                	jne    f01109ce <test_insert_sorted_with_merge_freeList+0x2b7>
f01109ba:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01109bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01109c2:	75 0a                	jne    f01109ce <test_insert_sorted_with_merge_freeList+0x2b7>
f01109c4:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01109c9:	83 f8 03             	cmp    $0x3,%eax
f01109cc:	74 17                	je     f01109e5 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109ce:	83 ec 04             	sub    $0x4,%esp
f01109d1:	68 40 8c 13 f0       	push   $0xf0138c40
f01109d6:	68 b4 02 00 00       	push   $0x2b4
f01109db:	68 94 80 13 f0       	push   $0xf0138094
f01109e0:	e8 20 f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01109e5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01109ec:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01109f3:	83 ec 0c             	sub    $0xc,%esp
f01109f6:	ff 75 f0             	pushl  -0x10(%ebp)
f01109f9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109fc:	50                   	push   %eax
f01109fd:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110a00:	50                   	push   %eax
f0110a01:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110a04:	50                   	push   %eax
f0110a05:	68 64 ad 89 f0       	push   $0xf089ad64
f0110a0a:	e8 ec 08 00 00       	call   f01112fb <check_list_data>
f0110a0f:	83 c4 20             	add    $0x20,%esp
f0110a12:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110a15:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a19:	74 17                	je     f0110a32 <test_insert_sorted_with_merge_freeList+0x31b>
f0110a1b:	83 ec 04             	sub    $0x4,%esp
f0110a1e:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110a23:	68 ba 02 00 00       	push   $0x2ba
f0110a28:	68 94 80 13 f0       	push   $0xf0138094
f0110a2d:	e8 d3 f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a32:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a35:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a38:	74 17                	je     f0110a51 <test_insert_sorted_with_merge_freeList+0x33a>
f0110a3a:	83 ec 04             	sub    $0x4,%esp
f0110a3d:	68 00 8d 13 f0       	push   $0xf0138d00
f0110a42:	68 bb 02 00 00       	push   $0x2bb
f0110a47:	68 94 80 13 f0       	push   $0xf0138094
f0110a4c:	e8 b4 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110a51:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a5b:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110a62:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110a63:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a66:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110a6d:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110a6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a71:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110a75:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110a7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a7e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110a82:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110a88:	83 ec 0c             	sub    $0xc,%esp
f0110a8b:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110a91:	50                   	push   %eax
f0110a92:	e8 ed 24 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0110a97:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110a9a:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110a9f:	85 c0                	test   %eax,%eax
f0110aa1:	75 14                	jne    f0110ab7 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110aa3:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110aa8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110aab:	75 0a                	jne    f0110ab7 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110aad:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110ab2:	83 f8 04             	cmp    $0x4,%eax
f0110ab5:	74 17                	je     f0110ace <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110ab7:	83 ec 04             	sub    $0x4,%esp
f0110aba:	68 40 8c 13 f0       	push   $0xf0138c40
f0110abf:	68 ca 02 00 00       	push   $0x2ca
f0110ac4:	68 94 80 13 f0       	push   $0xf0138094
f0110ac9:	e8 37 f7 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110ace:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110ad5:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110adc:	83 ec 0c             	sub    $0xc,%esp
f0110adf:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ae2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ae5:	50                   	push   %eax
f0110ae6:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110ae9:	50                   	push   %eax
f0110aea:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110aed:	50                   	push   %eax
f0110aee:	68 64 ad 89 f0       	push   $0xf089ad64
f0110af3:	e8 03 08 00 00       	call   f01112fb <check_list_data>
f0110af8:	83 c4 20             	add    $0x20,%esp
f0110afb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110afe:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b02:	74 17                	je     f0110b1b <test_insert_sorted_with_merge_freeList+0x404>
f0110b04:	83 ec 04             	sub    $0x4,%esp
f0110b07:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110b0c:	68 d0 02 00 00       	push   $0x2d0
f0110b11:	68 94 80 13 f0       	push   $0xf0138094
f0110b16:	e8 ea f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b1b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b1e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b21:	74 17                	je     f0110b3a <test_insert_sorted_with_merge_freeList+0x423>
f0110b23:	83 ec 04             	sub    $0x4,%esp
f0110b26:	68 00 8d 13 f0       	push   $0xf0138d00
f0110b2b:	68 d1 02 00 00       	push   $0x2d1
f0110b30:	68 94 80 13 f0       	push   $0xf0138094
f0110b35:	e8 cb f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110b3a:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b44:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110b4b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110b4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b4f:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110b56:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110b57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b5a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110b5e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110b64:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b67:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b6b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110b71:	83 ec 0c             	sub    $0xc,%esp
f0110b74:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110b7a:	50                   	push   %eax
f0110b7b:	e8 04 24 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0110b80:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110b83:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110b88:	85 c0                	test   %eax,%eax
f0110b8a:	75 17                	jne    f0110ba3 <test_insert_sorted_with_merge_freeList+0x48c>
f0110b8c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110b91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110b94:	42                   	inc    %edx
f0110b95:	39 d0                	cmp    %edx,%eax
f0110b97:	75 0a                	jne    f0110ba3 <test_insert_sorted_with_merge_freeList+0x48c>
f0110b99:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110b9e:	83 f8 04             	cmp    $0x4,%eax
f0110ba1:	74 17                	je     f0110bba <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110ba3:	83 ec 04             	sub    $0x4,%esp
f0110ba6:	68 40 8c 13 f0       	push   $0xf0138c40
f0110bab:	68 e3 02 00 00       	push   $0x2e3
f0110bb0:	68 94 80 13 f0       	push   $0xf0138094
f0110bb5:	e8 4b f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110bba:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110bc1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110bc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bcb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110bce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bd1:	48                   	dec    %eax
f0110bd2:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bd9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bdd:	01 c8                	add    %ecx,%eax
f0110bdf:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110be3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110be6:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110bed:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110bee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bf1:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110bf8:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110bf9:	83 ec 0c             	sub    $0xc,%esp
f0110bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0110bff:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c02:	50                   	push   %eax
f0110c03:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c06:	50                   	push   %eax
f0110c07:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c0a:	50                   	push   %eax
f0110c0b:	68 64 ad 89 f0       	push   $0xf089ad64
f0110c10:	e8 e6 06 00 00       	call   f01112fb <check_list_data>
f0110c15:	83 c4 20             	add    $0x20,%esp
f0110c18:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c1b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c1f:	74 17                	je     f0110c38 <test_insert_sorted_with_merge_freeList+0x521>
f0110c21:	83 ec 04             	sub    $0x4,%esp
f0110c24:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110c29:	68 ec 02 00 00       	push   $0x2ec
f0110c2e:	68 94 80 13 f0       	push   $0xf0138094
f0110c33:	e8 cd f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110c38:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110c3e:	74 17                	je     f0110c57 <test_insert_sorted_with_merge_freeList+0x540>
f0110c40:	83 ec 04             	sub    $0x4,%esp
f0110c43:	68 00 8d 13 f0       	push   $0xf0138d00
f0110c48:	68 ed 02 00 00       	push   $0x2ed
f0110c4d:	68 94 80 13 f0       	push   $0xf0138094
f0110c52:	e8 ae f5 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110c57:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110c5e:	83 ec 0c             	sub    $0xc,%esp
f0110c61:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c64:	50                   	push   %eax
f0110c65:	e8 5d 07 00 00       	call   f01113c7 <check_avaliable_list_data>
f0110c6a:	83 c4 10             	add    $0x10,%esp
f0110c6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110c73:	8d 50 01             	lea    0x1(%eax),%edx
f0110c76:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c79:	39 c2                	cmp    %eax,%edx
f0110c7b:	74 17                	je     f0110c94 <test_insert_sorted_with_merge_freeList+0x57d>
f0110c7d:	83 ec 04             	sub    $0x4,%esp
f0110c80:	68 54 8d 13 f0       	push   $0xf0138d54
f0110c85:	68 f2 02 00 00       	push   $0x2f2
f0110c8a:	68 94 80 13 f0       	push   $0xf0138094
f0110c8f:	e8 71 f5 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110c94:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c98:	74 17                	je     f0110cb1 <test_insert_sorted_with_merge_freeList+0x59a>
f0110c9a:	83 ec 04             	sub    $0x4,%esp
f0110c9d:	68 ac 8d 13 f0       	push   $0xf0138dac
f0110ca2:	68 f3 02 00 00       	push   $0x2f3
f0110ca7:	68 94 80 13 f0       	push   $0xf0138094
f0110cac:	e8 54 f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110cb1:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110cb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cbb:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110cc2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110cc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cc6:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110ccd:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110cce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cd1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110cd5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110cdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cde:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ce2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110ce8:	83 ec 0c             	sub    $0xc,%esp
f0110ceb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110cf1:	50                   	push   %eax
f0110cf2:	e8 8d 22 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0110cf7:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110cfa:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110cff:	85 c0                	test   %eax,%eax
f0110d01:	75 19                	jne    f0110d1c <test_insert_sorted_with_merge_freeList+0x605>
f0110d03:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110d08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110d0b:	83 c2 02             	add    $0x2,%edx
f0110d0e:	39 d0                	cmp    %edx,%eax
f0110d10:	75 0a                	jne    f0110d1c <test_insert_sorted_with_merge_freeList+0x605>
f0110d12:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110d17:	83 f8 04             	cmp    $0x4,%eax
f0110d1a:	74 17                	je     f0110d33 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d1c:	83 ec 04             	sub    $0x4,%esp
f0110d1f:	68 40 8c 13 f0       	push   $0xf0138c40
f0110d24:	68 05 03 00 00       	push   $0x305
f0110d29:	68 94 80 13 f0       	push   $0xf0138094
f0110d2e:	e8 d2 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d33:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110d3a:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110d41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d44:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110d47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d4a:	48                   	dec    %eax
f0110d4b:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110d4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d52:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d56:	01 c8                	add    %ecx,%eax
f0110d58:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110d5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d5f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110d66:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110d67:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d6a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110d71:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110d72:	83 ec 0c             	sub    $0xc,%esp
f0110d75:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d78:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d7b:	50                   	push   %eax
f0110d7c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110d7f:	50                   	push   %eax
f0110d80:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110d83:	50                   	push   %eax
f0110d84:	68 64 ad 89 f0       	push   $0xf089ad64
f0110d89:	e8 6d 05 00 00       	call   f01112fb <check_list_data>
f0110d8e:	83 c4 20             	add    $0x20,%esp
f0110d91:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110d94:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d98:	74 17                	je     f0110db1 <test_insert_sorted_with_merge_freeList+0x69a>
f0110d9a:	83 ec 04             	sub    $0x4,%esp
f0110d9d:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110da2:	68 0e 03 00 00       	push   $0x30e
f0110da7:	68 94 80 13 f0       	push   $0xf0138094
f0110dac:	e8 54 f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110db1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110db4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110db7:	74 17                	je     f0110dd0 <test_insert_sorted_with_merge_freeList+0x6b9>
f0110db9:	83 ec 04             	sub    $0x4,%esp
f0110dbc:	68 00 8d 13 f0       	push   $0xf0138d00
f0110dc1:	68 0f 03 00 00       	push   $0x30f
f0110dc6:	68 94 80 13 f0       	push   $0xf0138094
f0110dcb:	e8 35 f4 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110dd0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110dd7:	83 ec 0c             	sub    $0xc,%esp
f0110dda:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ddd:	50                   	push   %eax
f0110dde:	e8 e4 05 00 00       	call   f01113c7 <check_avaliable_list_data>
f0110de3:	83 c4 10             	add    $0x10,%esp
f0110de6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110dec:	8d 50 02             	lea    0x2(%eax),%edx
f0110def:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110df2:	39 c2                	cmp    %eax,%edx
f0110df4:	74 17                	je     f0110e0d <test_insert_sorted_with_merge_freeList+0x6f6>
f0110df6:	83 ec 04             	sub    $0x4,%esp
f0110df9:	68 54 8d 13 f0       	push   $0xf0138d54
f0110dfe:	68 14 03 00 00       	push   $0x314
f0110e03:	68 94 80 13 f0       	push   $0xf0138094
f0110e08:	e8 f8 f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110e0d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e11:	74 17                	je     f0110e2a <test_insert_sorted_with_merge_freeList+0x713>
f0110e13:	83 ec 04             	sub    $0x4,%esp
f0110e16:	68 ac 8d 13 f0       	push   $0xf0138dac
f0110e1b:	68 15 03 00 00       	push   $0x315
f0110e20:	68 94 80 13 f0       	push   $0xf0138094
f0110e25:	e8 db f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110e2a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110e31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e34:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110e3b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110e3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e3f:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110e46:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e4a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110e4e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110e54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e57:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110e5b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110e61:	83 ec 0c             	sub    $0xc,%esp
f0110e64:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110e6a:	50                   	push   %eax
f0110e6b:	e8 14 21 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0110e70:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110e73:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0110e78:	85 c0                	test   %eax,%eax
f0110e7a:	75 19                	jne    f0110e95 <test_insert_sorted_with_merge_freeList+0x77e>
f0110e7c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0110e81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110e84:	83 c2 03             	add    $0x3,%edx
f0110e87:	39 d0                	cmp    %edx,%eax
f0110e89:	75 0a                	jne    f0110e95 <test_insert_sorted_with_merge_freeList+0x77e>
f0110e8b:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0110e90:	83 f8 04             	cmp    $0x4,%eax
f0110e93:	74 17                	je     f0110eac <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110e95:	83 ec 04             	sub    $0x4,%esp
f0110e98:	68 40 8c 13 f0       	push   $0xf0138c40
f0110e9d:	68 28 03 00 00       	push   $0x328
f0110ea2:	68 94 80 13 f0       	push   $0xf0138094
f0110ea7:	e8 59 f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110eac:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110eb3:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110eba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ebd:	8d 50 01             	lea    0x1(%eax),%edx
f0110ec0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ec3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ec7:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ece:	8d 50 01             	lea    0x1(%eax),%edx
f0110ed1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ed4:	40                   	inc    %eax
f0110ed5:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110ed9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110edc:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ee0:	01 c8                	add    %ecx,%eax
f0110ee2:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110ee6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ee9:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110ef0:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110ef1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ef4:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110efb:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110efc:	83 ec 0c             	sub    $0xc,%esp
f0110eff:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f02:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f05:	50                   	push   %eax
f0110f06:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110f09:	50                   	push   %eax
f0110f0a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110f0d:	50                   	push   %eax
f0110f0e:	68 64 ad 89 f0       	push   $0xf089ad64
f0110f13:	e8 e3 03 00 00       	call   f01112fb <check_list_data>
f0110f18:	83 c4 20             	add    $0x20,%esp
f0110f1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110f1e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f22:	74 17                	je     f0110f3b <test_insert_sorted_with_merge_freeList+0x824>
f0110f24:	83 ec 04             	sub    $0x4,%esp
f0110f27:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110f2c:	68 32 03 00 00       	push   $0x332
f0110f31:	68 94 80 13 f0       	push   $0xf0138094
f0110f36:	e8 ca f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110f3b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110f3e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110f41:	74 17                	je     f0110f5a <test_insert_sorted_with_merge_freeList+0x843>
f0110f43:	83 ec 04             	sub    $0x4,%esp
f0110f46:	68 00 8d 13 f0       	push   $0xf0138d00
f0110f4b:	68 33 03 00 00       	push   $0x333
f0110f50:	68 94 80 13 f0       	push   $0xf0138094
f0110f55:	e8 ab f2 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110f5a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110f61:	83 ec 0c             	sub    $0xc,%esp
f0110f64:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f67:	50                   	push   %eax
f0110f68:	e8 5a 04 00 00       	call   f01113c7 <check_avaliable_list_data>
f0110f6d:	83 c4 10             	add    $0x10,%esp
f0110f70:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110f76:	8d 50 03             	lea    0x3(%eax),%edx
f0110f79:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110f7c:	39 c2                	cmp    %eax,%edx
f0110f7e:	74 17                	je     f0110f97 <test_insert_sorted_with_merge_freeList+0x880>
f0110f80:	83 ec 04             	sub    $0x4,%esp
f0110f83:	68 54 8d 13 f0       	push   $0xf0138d54
f0110f88:	68 38 03 00 00       	push   $0x338
f0110f8d:	68 94 80 13 f0       	push   $0xf0138094
f0110f92:	e8 6e f2 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110f97:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f9b:	74 17                	je     f0110fb4 <test_insert_sorted_with_merge_freeList+0x89d>
f0110f9d:	83 ec 04             	sub    $0x4,%esp
f0110fa0:	68 ac 8d 13 f0       	push   $0xf0138dac
f0110fa5:	68 39 03 00 00       	push   $0x339
f0110faa:	68 94 80 13 f0       	push   $0xf0138094
f0110faf:	e8 51 f2 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110fb4:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110fbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fbe:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110fc5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110fc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fc9:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110fd0:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110fd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fd4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110fd8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110fde:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fe1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110fe5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110feb:	83 ec 0c             	sub    $0xc,%esp
f0110fee:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110ff4:	50                   	push   %eax
f0110ff5:	e8 8a 1f 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0110ffa:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ffd:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0111002:	85 c0                	test   %eax,%eax
f0111004:	75 19                	jne    f011101f <test_insert_sorted_with_merge_freeList+0x908>
f0111006:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f011100b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011100e:	83 c2 04             	add    $0x4,%edx
f0111011:	39 d0                	cmp    %edx,%eax
f0111013:	75 0a                	jne    f011101f <test_insert_sorted_with_merge_freeList+0x908>
f0111015:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f011101a:	83 f8 04             	cmp    $0x4,%eax
f011101d:	74 17                	je     f0111036 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011101f:	83 ec 04             	sub    $0x4,%esp
f0111022:	68 40 8c 13 f0       	push   $0xf0138c40
f0111027:	68 4c 03 00 00       	push   $0x34c
f011102c:	68 94 80 13 f0       	push   $0xf0138094
f0111031:	e8 cf f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111036:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011103d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0111044:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111047:	8d 50 01             	lea    0x1(%eax),%edx
f011104a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011104d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111051:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0111055:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111058:	8d 50 01             	lea    0x1(%eax),%edx
f011105b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011105e:	40                   	inc    %eax
f011105f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111063:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111066:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011106a:	01 c8                	add    %ecx,%eax
f011106c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111070:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111073:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011107a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011107b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011107e:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111085:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111086:	83 ec 0c             	sub    $0xc,%esp
f0111089:	ff 75 f0             	pushl  -0x10(%ebp)
f011108c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011108f:	50                   	push   %eax
f0111090:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111093:	50                   	push   %eax
f0111094:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111097:	50                   	push   %eax
f0111098:	68 64 ad 89 f0       	push   $0xf089ad64
f011109d:	e8 59 02 00 00       	call   f01112fb <check_list_data>
f01110a2:	83 c4 20             	add    $0x20,%esp
f01110a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01110a8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01110ac:	74 17                	je     f01110c5 <test_insert_sorted_with_merge_freeList+0x9ae>
f01110ae:	83 ec 04             	sub    $0x4,%esp
f01110b1:	68 ac 8c 13 f0       	push   $0xf0138cac
f01110b6:	68 56 03 00 00       	push   $0x356
f01110bb:	68 94 80 13 f0       	push   $0xf0138094
f01110c0:	e8 40 f1 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01110c5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01110c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01110cb:	74 17                	je     f01110e4 <test_insert_sorted_with_merge_freeList+0x9cd>
f01110cd:	83 ec 04             	sub    $0x4,%esp
f01110d0:	68 00 8d 13 f0       	push   $0xf0138d00
f01110d5:	68 57 03 00 00       	push   $0x357
f01110da:	68 94 80 13 f0       	push   $0xf0138094
f01110df:	e8 21 f1 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01110e4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01110eb:	83 ec 0c             	sub    $0xc,%esp
f01110ee:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01110f1:	50                   	push   %eax
f01110f2:	e8 d0 02 00 00       	call   f01113c7 <check_avaliable_list_data>
f01110f7:	83 c4 10             	add    $0x10,%esp
f01110fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01110fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111100:	8d 50 04             	lea    0x4(%eax),%edx
f0111103:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111106:	39 c2                	cmp    %eax,%edx
f0111108:	74 17                	je     f0111121 <test_insert_sorted_with_merge_freeList+0xa0a>
f011110a:	83 ec 04             	sub    $0x4,%esp
f011110d:	68 54 8d 13 f0       	push   $0xf0138d54
f0111112:	68 5c 03 00 00       	push   $0x35c
f0111117:	68 94 80 13 f0       	push   $0xf0138094
f011111c:	e8 e4 f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111121:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111125:	74 17                	je     f011113e <test_insert_sorted_with_merge_freeList+0xa27>
f0111127:	83 ec 04             	sub    $0x4,%esp
f011112a:	68 ac 8d 13 f0       	push   $0xf0138dac
f011112f:	68 5d 03 00 00       	push   $0x35d
f0111134:	68 94 80 13 f0       	push   $0xf0138094
f0111139:	e8 c7 f0 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f011113e:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0111145:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111148:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f011114f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0111150:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111153:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f011115a:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011115b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011115e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111162:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0111168:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011116b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011116f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0111175:	83 ec 0c             	sub    $0xc,%esp
f0111178:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011117e:	50                   	push   %eax
f011117f:	e8 00 1e 02 00       	call   f0132f84 <insert_sorted_with_merge_freeList>
f0111184:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0111187:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f011118c:	85 c0                	test   %eax,%eax
f011118e:	75 19                	jne    f01111a9 <test_insert_sorted_with_merge_freeList+0xa92>
f0111190:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0111195:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111198:	83 c2 06             	add    $0x6,%edx
f011119b:	39 d0                	cmp    %edx,%eax
f011119d:	75 0a                	jne    f01111a9 <test_insert_sorted_with_merge_freeList+0xa92>
f011119f:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01111a4:	83 f8 03             	cmp    $0x3,%eax
f01111a7:	74 17                	je     f01111c0 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01111a9:	83 ec 04             	sub    $0x4,%esp
f01111ac:	68 40 8c 13 f0       	push   $0xf0138c40
f01111b1:	68 70 03 00 00       	push   $0x370
f01111b6:	68 94 80 13 f0       	push   $0xf0138094
f01111bb:	e8 45 f0 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01111c0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01111c7:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01111ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111d1:	48                   	dec    %eax
f01111d2:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01111d9:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f01111da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111dd:	8d 50 ff             	lea    -0x1(%eax),%edx
f01111e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111e3:	48                   	dec    %eax
f01111e4:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01111e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111eb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01111ef:	01 c1                	add    %eax,%ecx
f01111f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111f4:	40                   	inc    %eax
f01111f5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01111f9:	01 c8                	add    %ecx,%eax
f01111fb:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01111ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111202:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111209:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011120a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011120d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111214:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0111215:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111218:	40                   	inc    %eax
f0111219:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111220:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111221:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111224:	40                   	inc    %eax
f0111225:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011122c:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011122d:	83 ec 0c             	sub    $0xc,%esp
f0111230:	ff 75 f0             	pushl  -0x10(%ebp)
f0111233:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111236:	50                   	push   %eax
f0111237:	8d 45 98             	lea    -0x68(%ebp),%eax
f011123a:	50                   	push   %eax
f011123b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011123e:	50                   	push   %eax
f011123f:	68 64 ad 89 f0       	push   $0xf089ad64
f0111244:	e8 b2 00 00 00       	call   f01112fb <check_list_data>
f0111249:	83 c4 20             	add    $0x20,%esp
f011124c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011124f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111253:	74 17                	je     f011126c <test_insert_sorted_with_merge_freeList+0xb55>
f0111255:	83 ec 04             	sub    $0x4,%esp
f0111258:	68 ac 8c 13 f0       	push   $0xf0138cac
f011125d:	68 7c 03 00 00       	push   $0x37c
f0111262:	68 94 80 13 f0       	push   $0xf0138094
f0111267:	e8 99 ef fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011126c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011126f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111272:	74 17                	je     f011128b <test_insert_sorted_with_merge_freeList+0xb74>
f0111274:	83 ec 04             	sub    $0x4,%esp
f0111277:	68 00 8d 13 f0       	push   $0xf0138d00
f011127c:	68 7d 03 00 00       	push   $0x37d
f0111281:	68 94 80 13 f0       	push   $0xf0138094
f0111286:	e8 7a ef fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011128b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111292:	83 ec 0c             	sub    $0xc,%esp
f0111295:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111298:	50                   	push   %eax
f0111299:	e8 29 01 00 00       	call   f01113c7 <check_avaliable_list_data>
f011129e:	83 c4 10             	add    $0x10,%esp
f01112a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01112a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01112a7:	8d 50 06             	lea    0x6(%eax),%edx
f01112aa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112ad:	39 c2                	cmp    %eax,%edx
f01112af:	74 17                	je     f01112c8 <test_insert_sorted_with_merge_freeList+0xbb1>
f01112b1:	83 ec 04             	sub    $0x4,%esp
f01112b4:	68 54 8d 13 f0       	push   $0xf0138d54
f01112b9:	68 82 03 00 00       	push   $0x382
f01112be:	68 94 80 13 f0       	push   $0xf0138094
f01112c3:	e8 3d ef fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01112c8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112cc:	74 17                	je     f01112e5 <test_insert_sorted_with_merge_freeList+0xbce>
f01112ce:	83 ec 04             	sub    $0x4,%esp
f01112d1:	68 ac 8d 13 f0       	push   $0xf0138dac
f01112d6:	68 83 03 00 00       	push   $0x383
f01112db:	68 94 80 13 f0       	push   $0xf0138094
f01112e0:	e8 20 ef fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f01112e5:	83 ec 0c             	sub    $0xc,%esp
f01112e8:	68 08 8e 13 f0       	push   $0xf0138e08
f01112ed:	e8 1c fa fe ff       	call   f0100d0e <cprintf>
f01112f2:	83 c4 10             	add    $0x10,%esp

}
f01112f5:	90                   	nop
f01112f6:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01112f9:	c9                   	leave  
f01112fa:	c3                   	ret    

f01112fb <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01112fb:	55                   	push   %ebp
f01112fc:	89 e5                	mov    %esp,%ebp
f01112fe:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111301:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0111308:	8b 45 14             	mov    0x14(%ebp),%eax
f011130b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111311:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0111318:	8b 45 08             	mov    0x8(%ebp),%eax
f011131b:	8b 00                	mov    (%eax),%eax
f011131d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111320:	eb 6e                	jmp    f0111390 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0111322:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0111325:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111328:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011132f:	8b 45 10             	mov    0x10(%ebp),%eax
f0111332:	01 d0                	add    %edx,%eax
f0111334:	8b 00                	mov    (%eax),%eax
f0111336:	85 c0                	test   %eax,%eax
f0111338:	74 e8                	je     f0111322 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f011133a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011133d:	8b 50 08             	mov    0x8(%eax),%edx
f0111340:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111343:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011134a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011134d:	01 c8                	add    %ecx,%eax
f011134f:	8b 00                	mov    (%eax),%eax
f0111351:	39 c2                	cmp    %eax,%edx
f0111353:	75 1b                	jne    f0111370 <check_list_data+0x75>
f0111355:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111358:	8b 50 0c             	mov    0xc(%eax),%edx
f011135b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011135e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111365:	8b 45 10             	mov    0x10(%ebp),%eax
f0111368:	01 c8                	add    %ecx,%eax
f011136a:	8b 00                	mov    (%eax),%eax
f011136c:	39 c2                	cmp    %eax,%edx
f011136e:	74 07                	je     f0111377 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0111370:	b8 00 00 00 00       	mov    $0x0,%eax
f0111375:	eb 4e                	jmp    f01113c5 <check_list_data+0xca>
		}
		(*size)++;
f0111377:	8b 45 14             	mov    0x14(%ebp),%eax
f011137a:	8b 00                	mov    (%eax),%eax
f011137c:	8d 50 01             	lea    0x1(%eax),%edx
f011137f:	8b 45 14             	mov    0x14(%ebp),%eax
f0111382:	89 10                	mov    %edx,(%eax)
		i++;
f0111384:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0111387:	8b 45 08             	mov    0x8(%ebp),%eax
f011138a:	8b 40 08             	mov    0x8(%eax),%eax
f011138d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111390:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111394:	74 07                	je     f011139d <check_list_data+0xa2>
f0111396:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111399:	8b 00                	mov    (%eax),%eax
f011139b:	eb 05                	jmp    f01113a2 <check_list_data+0xa7>
f011139d:	b8 00 00 00 00       	mov    $0x0,%eax
f01113a2:	8b 55 08             	mov    0x8(%ebp),%edx
f01113a5:	89 42 08             	mov    %eax,0x8(%edx)
f01113a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01113ab:	8b 40 08             	mov    0x8(%eax),%eax
f01113ae:	85 c0                	test   %eax,%eax
f01113b0:	0f 85 6f ff ff ff    	jne    f0111325 <check_list_data+0x2a>
f01113b6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01113ba:	0f 85 65 ff ff ff    	jne    f0111325 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f01113c0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01113c5:	c9                   	leave  
f01113c6:	c3                   	ret    

f01113c7 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01113c7:	55                   	push   %ebp
f01113c8:	89 e5                	mov    %esp,%ebp
f01113ca:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01113cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01113d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01113d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01113dd:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01113e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01113e5:	eb 30                	jmp    f0111417 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f01113e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01113ea:	8b 40 08             	mov    0x8(%eax),%eax
f01113ed:	85 c0                	test   %eax,%eax
f01113ef:	75 0a                	jne    f01113fb <check_avaliable_list_data+0x34>
f01113f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01113f4:	8b 40 0c             	mov    0xc(%eax),%eax
f01113f7:	85 c0                	test   %eax,%eax
f01113f9:	74 07                	je     f0111402 <check_avaliable_list_data+0x3b>
		{
			return 0;
f01113fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0111400:	eb 40                	jmp    f0111442 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0111402:	8b 45 08             	mov    0x8(%ebp),%eax
f0111405:	8b 00                	mov    (%eax),%eax
f0111407:	8d 50 01             	lea    0x1(%eax),%edx
f011140a:	8b 45 08             	mov    0x8(%ebp),%eax
f011140d:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011140f:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f0111414:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111417:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011141b:	74 07                	je     f0111424 <check_avaliable_list_data+0x5d>
f011141d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111420:	8b 00                	mov    (%eax),%eax
f0111422:	eb 05                	jmp    f0111429 <check_avaliable_list_data+0x62>
f0111424:	b8 00 00 00 00       	mov    $0x0,%eax
f0111429:	a3 a0 ad 89 f0       	mov    %eax,0xf089ada0
f011142e:	a1 a0 ad 89 f0       	mov    0xf089ada0,%eax
f0111433:	85 c0                	test   %eax,%eax
f0111435:	75 b0                	jne    f01113e7 <check_avaliable_list_data+0x20>
f0111437:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011143b:	75 aa                	jne    f01113e7 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f011143d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111442:	c9                   	leave  
f0111443:	c3                   	ret    

f0111444 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0111444:	55                   	push   %ebp
f0111445:	89 e5                	mov    %esp,%ebp
f0111447:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f011144a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111451:	8b 45 08             	mov    0x8(%ebp),%eax
f0111454:	8b 00                	mov    (%eax),%eax
f0111456:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111459:	eb 27                	jmp    f0111482 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f011145b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011145e:	8b 50 0c             	mov    0xc(%eax),%edx
f0111461:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111464:	8b 40 08             	mov    0x8(%eax),%eax
f0111467:	83 ec 04             	sub    $0x4,%esp
f011146a:	52                   	push   %edx
f011146b:	50                   	push   %eax
f011146c:	68 58 81 13 f0       	push   $0xf0138158
f0111471:	e8 98 f8 fe ff       	call   f0100d0e <cprintf>
f0111476:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0111479:	8b 45 08             	mov    0x8(%ebp),%eax
f011147c:	8b 40 08             	mov    0x8(%eax),%eax
f011147f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111482:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111486:	74 07                	je     f011148f <show_list_content+0x4b>
f0111488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011148b:	8b 00                	mov    (%eax),%eax
f011148d:	eb 05                	jmp    f0111494 <show_list_content+0x50>
f011148f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111494:	8b 55 08             	mov    0x8(%ebp),%edx
f0111497:	89 42 08             	mov    %eax,0x8(%edx)
f011149a:	8b 45 08             	mov    0x8(%ebp),%eax
f011149d:	8b 40 08             	mov    0x8(%eax),%eax
f01114a0:	85 c0                	test   %eax,%eax
f01114a2:	75 b7                	jne    f011145b <show_list_content+0x17>
f01114a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01114a8:	75 b1                	jne    f011145b <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01114aa:	90                   	nop
f01114ab:	c9                   	leave  
f01114ac:	c3                   	ret    

f01114ad <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01114ad:	55                   	push   %ebp
f01114ae:	89 e5                	mov    %esp,%ebp
f01114b0:	57                   	push   %edi
f01114b1:	56                   	push   %esi
f01114b2:	53                   	push   %ebx
f01114b3:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01114b9:	83 ec 0c             	sub    $0xc,%esp
f01114bc:	68 5c 8e 13 f0       	push   $0xf0138e5c
f01114c1:	e8 48 f8 fe ff       	call   f0100d0e <cprintf>
f01114c6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01114c9:	83 ec 0c             	sub    $0xc,%esp
f01114cc:	68 80 8e 13 f0       	push   $0xf0138e80
f01114d1:	e8 38 f8 fe ff       	call   f0100d0e <cprintf>
f01114d6:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01114d9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01114e0:	83 ec 0c             	sub    $0xc,%esp
f01114e3:	68 9c 8e 13 f0       	push   $0xf0138e9c
f01114e8:	e8 21 f8 fe ff       	call   f0100d0e <cprintf>
f01114ed:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01114f0:	8d 45 80             	lea    -0x80(%ebp),%eax
f01114f3:	bb 56 8f 13 f0       	mov    $0xf0138f56,%ebx
f01114f8:	ba 03 00 00 00       	mov    $0x3,%edx
f01114fd:	89 c7                	mov    %eax,%edi
f01114ff:	89 de                	mov    %ebx,%esi
f0111501:	89 d1                	mov    %edx,%ecx
f0111503:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111505:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111508:	b9 16 00 00 00       	mov    $0x16,%ecx
f011150d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111512:	89 d7                	mov    %edx,%edi
f0111514:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111516:	83 ec 0c             	sub    $0xc,%esp
f0111519:	8d 45 80             	lea    -0x80(%ebp),%eax
f011151c:	50                   	push   %eax
f011151d:	e8 4e f8 fe ff       	call   f0100d70 <execute_command>
f0111522:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111525:	83 ec 0c             	sub    $0xc,%esp
f0111528:	68 ca 8e 13 f0       	push   $0xf0138eca
f011152d:	e8 dc f7 fe ff       	call   f0100d0e <cprintf>
f0111532:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111535:	83 ec 0c             	sub    $0xc,%esp
f0111538:	68 e0 8e 13 f0       	push   $0xf0138ee0
f011153d:	e8 cc f7 fe ff       	call   f0100d0e <cprintf>
f0111542:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111545:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f011154c:	65 00 00 
f011154f:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111555:	b9 18 00 00 00       	mov    $0x18,%ecx
f011155a:	b8 00 00 00 00       	mov    $0x0,%eax
f011155f:	89 d7                	mov    %edx,%edi
f0111561:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111563:	83 ec 0c             	sub    $0xc,%esp
f0111566:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f011156c:	50                   	push   %eax
f011156d:	e8 fe f7 fe ff       	call   f0100d70 <execute_command>
f0111572:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111575:	83 ec 0c             	sub    $0xc,%esp
f0111578:	68 ca 8e 13 f0       	push   $0xf0138eca
f011157d:	e8 8c f7 fe ff       	call   f0100d0e <cprintf>
f0111582:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111585:	83 ec 0c             	sub    $0xc,%esp
f0111588:	68 08 8f 13 f0       	push   $0xf0138f08
f011158d:	e8 7c f7 fe ff       	call   f0100d0e <cprintf>
f0111592:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111595:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f011159c:	75 00 00 
f011159f:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01115a5:	b9 18 00 00 00       	mov    $0x18,%ecx
f01115aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01115af:	89 d7                	mov    %edx,%edi
f01115b1:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01115b3:	83 ec 0c             	sub    $0xc,%esp
f01115b6:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01115bc:	50                   	push   %eax
f01115bd:	e8 ae f7 fe ff       	call   f0100d70 <execute_command>
f01115c2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01115c5:	83 ec 0c             	sub    $0xc,%esp
f01115c8:	68 ca 8e 13 f0       	push   $0xf0138eca
f01115cd:	e8 3c f7 fe ff       	call   f0100d0e <cprintf>
f01115d2:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01115d5:	83 ec 0c             	sub    $0xc,%esp
f01115d8:	68 30 8f 13 f0       	push   $0xf0138f30
f01115dd:	e8 2c f7 fe ff       	call   f0100d0e <cprintf>
f01115e2:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01115e5:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01115ec:	6d 6d 00 
f01115ef:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01115f5:	b9 18 00 00 00       	mov    $0x18,%ecx
f01115fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01115ff:	89 d7                	mov    %edx,%edi
f0111601:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111603:	83 ec 0c             	sub    $0xc,%esp
f0111606:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011160c:	50                   	push   %eax
f011160d:	e8 5e f7 fe ff       	call   f0100d70 <execute_command>
f0111612:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111615:	83 ec 0c             	sub    $0xc,%esp
f0111618:	68 ca 8e 13 f0       	push   $0xf0138eca
f011161d:	e8 ec f6 fe ff       	call   f0100d0e <cprintf>
f0111622:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111625:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011162a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011162d:	5b                   	pop    %ebx
f011162e:	5e                   	pop    %esi
f011162f:	5f                   	pop    %edi
f0111630:	5d                   	pop    %ebp
f0111631:	c3                   	ret    

f0111632 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111632:	55                   	push   %ebp
f0111633:	89 e5                	mov    %esp,%ebp
f0111635:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111638:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011163f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111646:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011164d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111652:	ff 75 ec             	pushl  -0x14(%ebp)
f0111655:	ff 75 f0             	pushl  -0x10(%ebp)
f0111658:	ff 75 f4             	pushl  -0xc(%ebp)
f011165b:	50                   	push   %eax
f011165c:	e8 53 68 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111661:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111664:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111669:	ff 75 ec             	pushl  -0x14(%ebp)
f011166c:	ff 75 f0             	pushl  -0x10(%ebp)
f011166f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111672:	50                   	push   %eax
f0111673:	e8 9e 4e 00 00       	call   f0116516 <CP>
f0111678:	83 c4 10             	add    $0x10,%esp
f011167b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011167e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111682:	74 14                	je     f0111698 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111684:	83 ec 04             	sub    $0x4,%esp
f0111687:	68 bc 8f 13 f0       	push   $0xf0138fbc
f011168c:	6a 5a                	push   $0x5a
f011168e:	68 de 8f 13 f0       	push   $0xf0138fde
f0111693:	e8 6d eb fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111698:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011169f:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01116a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116ad:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01116b2:	ff 75 ec             	pushl  -0x14(%ebp)
f01116b5:	ff 75 f0             	pushl  -0x10(%ebp)
f01116b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01116bb:	50                   	push   %eax
f01116bc:	e8 f3 67 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f01116c1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01116c4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01116c9:	ff 75 ec             	pushl  -0x14(%ebp)
f01116cc:	ff 75 f0             	pushl  -0x10(%ebp)
f01116cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01116d2:	50                   	push   %eax
f01116d3:	e8 3e 4e 00 00       	call   f0116516 <CP>
f01116d8:	83 c4 10             	add    $0x10,%esp
f01116db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01116de:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01116e2:	74 14                	je     f01116f8 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01116e4:	83 ec 04             	sub    $0x4,%esp
f01116e7:	68 fc 8f 13 f0       	push   $0xf0138ffc
f01116ec:	6a 66                	push   $0x66
f01116ee:	68 de 8f 13 f0       	push   $0xf0138fde
f01116f3:	e8 0d eb fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01116f8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f01116ff:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111706:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011170d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111712:	ff 75 ec             	pushl  -0x14(%ebp)
f0111715:	ff 75 f0             	pushl  -0x10(%ebp)
f0111718:	ff 75 f4             	pushl  -0xc(%ebp)
f011171b:	50                   	push   %eax
f011171c:	e8 93 67 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111721:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111724:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111729:	ff 75 ec             	pushl  -0x14(%ebp)
f011172c:	ff 75 f0             	pushl  -0x10(%ebp)
f011172f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111732:	50                   	push   %eax
f0111733:	e8 de 4d 00 00       	call   f0116516 <CP>
f0111738:	83 c4 10             	add    $0x10,%esp
f011173b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011173e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111742:	74 14                	je     f0111758 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111744:	83 ec 04             	sub    $0x4,%esp
f0111747:	68 20 90 13 f0       	push   $0xf0139020
f011174c:	6a 71                	push   $0x71
f011174e:	68 de 8f 13 f0       	push   $0xf0138fde
f0111753:	e8 ad ea fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111758:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f011175f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111766:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011176d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111772:	ff 75 ec             	pushl  -0x14(%ebp)
f0111775:	ff 75 f0             	pushl  -0x10(%ebp)
f0111778:	ff 75 f4             	pushl  -0xc(%ebp)
f011177b:	50                   	push   %eax
f011177c:	e8 33 67 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111781:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111784:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111789:	ff 75 ec             	pushl  -0x14(%ebp)
f011178c:	ff 75 f0             	pushl  -0x10(%ebp)
f011178f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111792:	50                   	push   %eax
f0111793:	e8 7e 4d 00 00       	call   f0116516 <CP>
f0111798:	83 c4 10             	add    $0x10,%esp
f011179b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011179e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01117a2:	74 14                	je     f01117b8 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01117a4:	83 ec 04             	sub    $0x4,%esp
f01117a7:	68 44 90 13 f0       	push   $0xf0139044
f01117ac:	6a 7d                	push   $0x7d
f01117ae:	68 de 8f 13 f0       	push   $0xf0138fde
f01117b3:	e8 4d ea fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01117b8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01117bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01117c6:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01117cd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01117d2:	ff 75 ec             	pushl  -0x14(%ebp)
f01117d5:	ff 75 f0             	pushl  -0x10(%ebp)
f01117d8:	ff 75 f4             	pushl  -0xc(%ebp)
f01117db:	50                   	push   %eax
f01117dc:	e8 d3 66 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f01117e1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01117e4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01117e9:	ff 75 ec             	pushl  -0x14(%ebp)
f01117ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01117ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01117f2:	50                   	push   %eax
f01117f3:	e8 1e 4d 00 00       	call   f0116516 <CP>
f01117f8:	83 c4 10             	add    $0x10,%esp
f01117fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01117fe:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111802:	74 17                	je     f011181b <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111804:	83 ec 04             	sub    $0x4,%esp
f0111807:	68 68 90 13 f0       	push   $0xf0139068
f011180c:	68 89 00 00 00       	push   $0x89
f0111811:	68 de 8f 13 f0       	push   $0xf0138fde
f0111816:	e8 ea e9 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011181b:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111822:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111829:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111830:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111835:	ff 75 ec             	pushl  -0x14(%ebp)
f0111838:	ff 75 f0             	pushl  -0x10(%ebp)
f011183b:	ff 75 f4             	pushl  -0xc(%ebp)
f011183e:	50                   	push   %eax
f011183f:	e8 70 66 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f0111844:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111847:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011184c:	ff 75 ec             	pushl  -0x14(%ebp)
f011184f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111852:	ff 75 f4             	pushl  -0xc(%ebp)
f0111855:	50                   	push   %eax
f0111856:	e8 bb 4c 00 00       	call   f0116516 <CP>
f011185b:	83 c4 10             	add    $0x10,%esp
f011185e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111861:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111865:	74 17                	je     f011187e <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111867:	83 ec 04             	sub    $0x4,%esp
f011186a:	68 8c 90 13 f0       	push   $0xf013908c
f011186f:	68 95 00 00 00       	push   $0x95
f0111874:	68 de 8f 13 f0       	push   $0xf0138fde
f0111879:	e8 87 e9 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f011187e:	83 ec 0c             	sub    $0xc,%esp
f0111881:	68 b8 90 13 f0       	push   $0xf01390b8
f0111886:	e8 83 f4 fe ff       	call   f0100d0e <cprintf>
f011188b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011188e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111893:	c9                   	leave  
f0111894:	c3                   	ret    

f0111895 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111895:	55                   	push   %ebp
f0111896:	89 e5                	mov    %esp,%ebp
f0111898:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011189b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01118a2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01118a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01118b0:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01118b5:	ff 75 ec             	pushl  -0x14(%ebp)
f01118b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01118bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01118be:	50                   	push   %eax
f01118bf:	e8 f0 65 ff ff       	call   f0107eb4 <pt_set_page_permissions>
f01118c4:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01118c7:	83 ec 04             	sub    $0x4,%esp
f01118ca:	68 08 91 13 f0       	push   $0xf0139108
f01118cf:	68 a2 00 00 00       	push   $0xa2
f01118d4:	68 de 8f 13 f0       	push   $0xf0138fde
f01118d9:	e8 27 e9 fe ff       	call   f0100205 <_panic>

f01118de <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01118de:	55                   	push   %ebp
f01118df:	89 e5                	mov    %esp,%ebp
f01118e1:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01118e4:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01118eb:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01118f0:	83 ec 08             	sub    $0x8,%esp
f01118f3:	ff 75 f4             	pushl  -0xc(%ebp)
f01118f6:	50                   	push   %eax
f01118f7:	e8 6c 66 ff ff       	call   f0107f68 <pt_get_page_permissions>
f01118fc:	83 c4 10             	add    $0x10,%esp
f01118ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111902:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111906:	74 17                	je     f011191f <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111908:	83 ec 04             	sub    $0x4,%esp
f011190b:	68 a4 91 13 f0       	push   $0xf01391a4
f0111910:	68 b0 00 00 00       	push   $0xb0
f0111915:	68 de 8f 13 f0       	push   $0xf0138fde
f011191a:	e8 e6 e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011191f:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111926:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f011192b:	83 ec 08             	sub    $0x8,%esp
f011192e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111931:	50                   	push   %eax
f0111932:	e8 31 66 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0111937:	83 c4 10             	add    $0x10,%esp
f011193a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f011193d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111941:	74 17                	je     f011195a <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111943:	83 ec 04             	sub    $0x4,%esp
f0111946:	68 c8 91 13 f0       	push   $0xf01391c8
f011194b:	68 b8 00 00 00       	push   $0xb8
f0111950:	68 de 8f 13 f0       	push   $0xf0138fde
f0111955:	e8 ab e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011195a:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111961:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111966:	83 ec 08             	sub    $0x8,%esp
f0111969:	ff 75 f4             	pushl  -0xc(%ebp)
f011196c:	50                   	push   %eax
f011196d:	e8 f6 65 ff ff       	call   f0107f68 <pt_get_page_permissions>
f0111972:	83 c4 10             	add    $0x10,%esp
f0111975:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111978:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011197c:	74 17                	je     f0111995 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f011197e:	83 ec 04             	sub    $0x4,%esp
f0111981:	68 ec 91 13 f0       	push   $0xf01391ec
f0111986:	68 c0 00 00 00       	push   $0xc0
f011198b:	68 de 8f 13 f0       	push   $0xf0138fde
f0111990:	e8 70 e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111995:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011199c:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01119a1:	83 ec 08             	sub    $0x8,%esp
f01119a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01119a7:	50                   	push   %eax
f01119a8:	e8 bb 65 ff ff       	call   f0107f68 <pt_get_page_permissions>
f01119ad:	83 c4 10             	add    $0x10,%esp
f01119b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01119b3:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01119b7:	74 17                	je     f01119d0 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01119b9:	83 ec 04             	sub    $0x4,%esp
f01119bc:	68 10 92 13 f0       	push   $0xf0139210
f01119c1:	68 c7 00 00 00       	push   $0xc7
f01119c6:	68 de 8f 13 f0       	push   $0xf0138fde
f01119cb:	e8 35 e8 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01119d0:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01119d7:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01119dc:	83 ec 08             	sub    $0x8,%esp
f01119df:	ff 75 f4             	pushl  -0xc(%ebp)
f01119e2:	50                   	push   %eax
f01119e3:	e8 80 65 ff ff       	call   f0107f68 <pt_get_page_permissions>
f01119e8:	83 c4 10             	add    $0x10,%esp
f01119eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01119ee:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01119f2:	74 17                	je     f0111a0b <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01119f4:	83 ec 04             	sub    $0x4,%esp
f01119f7:	68 34 92 13 f0       	push   $0xf0139234
f01119fc:	68 ce 00 00 00       	push   $0xce
f0111a01:	68 de 8f 13 f0       	push   $0xf0138fde
f0111a06:	e8 fa e7 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111a0b:	83 ec 0c             	sub    $0xc,%esp
f0111a0e:	68 58 92 13 f0       	push   $0xf0139258
f0111a13:	e8 f6 f2 fe ff       	call   f0100d0e <cprintf>
f0111a18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111a1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111a20:	c9                   	leave  
f0111a21:	c3                   	ret    

f0111a22 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111a22:	55                   	push   %ebp
f0111a23:	89 e5                	mov    %esp,%ebp
f0111a25:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111a28:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a2f:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a34:	83 ec 08             	sub    $0x8,%esp
f0111a37:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a3a:	50                   	push   %eax
f0111a3b:	e8 83 65 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111a40:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111a43:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a48:	83 ec 08             	sub    $0x8,%esp
f0111a4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a4e:	50                   	push   %eax
f0111a4f:	e8 1e 4a 00 00       	call   f0116472 <CE>
f0111a54:	83 c4 10             	add    $0x10,%esp
f0111a57:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111a5a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111a5e:	74 17                	je     f0111a77 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111a60:	83 ec 04             	sub    $0x4,%esp
f0111a63:	68 a0 92 13 f0       	push   $0xf01392a0
f0111a68:	68 de 00 00 00       	push   $0xde
f0111a6d:	68 de 8f 13 f0       	push   $0xf0138fde
f0111a72:	e8 8e e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111a77:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111a7e:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a83:	83 ec 08             	sub    $0x8,%esp
f0111a86:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a89:	50                   	push   %eax
f0111a8a:	e8 34 65 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111a8f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111a92:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111a97:	83 ec 08             	sub    $0x8,%esp
f0111a9a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a9d:	50                   	push   %eax
f0111a9e:	e8 cf 49 00 00       	call   f0116472 <CE>
f0111aa3:	83 c4 10             	add    $0x10,%esp
f0111aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111aa9:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111aad:	74 17                	je     f0111ac6 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111aaf:	83 ec 04             	sub    $0x4,%esp
f0111ab2:	68 cc 92 13 f0       	push   $0xf01392cc
f0111ab7:	68 e6 00 00 00       	push   $0xe6
f0111abc:	68 de 8f 13 f0       	push   $0xf0138fde
f0111ac1:	e8 3f e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111ac6:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111acd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ad2:	83 ec 08             	sub    $0x8,%esp
f0111ad5:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ad8:	50                   	push   %eax
f0111ad9:	e8 e5 64 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111ade:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111ae1:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ae6:	83 ec 08             	sub    $0x8,%esp
f0111ae9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111aec:	50                   	push   %eax
f0111aed:	e8 80 49 00 00       	call   f0116472 <CE>
f0111af2:	83 c4 10             	add    $0x10,%esp
f0111af5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111af8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111afc:	74 17                	je     f0111b15 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111afe:	83 ec 04             	sub    $0x4,%esp
f0111b01:	68 f8 92 13 f0       	push   $0xf01392f8
f0111b06:	68 ee 00 00 00       	push   $0xee
f0111b0b:	68 de 8f 13 f0       	push   $0xf0138fde
f0111b10:	e8 f0 e6 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111b15:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111b1c:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111b21:	83 ec 08             	sub    $0x8,%esp
f0111b24:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b27:	50                   	push   %eax
f0111b28:	e8 96 64 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111b2d:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111b30:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111b35:	83 ec 08             	sub    $0x8,%esp
f0111b38:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b3b:	50                   	push   %eax
f0111b3c:	e8 31 49 00 00       	call   f0116472 <CE>
f0111b41:	83 c4 10             	add    $0x10,%esp
f0111b44:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111b47:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111b4b:	74 17                	je     f0111b64 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111b4d:	83 ec 04             	sub    $0x4,%esp
f0111b50:	68 24 93 13 f0       	push   $0xf0139324
f0111b55:	68 f6 00 00 00       	push   $0xf6
f0111b5a:	68 de 8f 13 f0       	push   $0xf0138fde
f0111b5f:	e8 a1 e6 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111b64:	83 ec 0c             	sub    $0xc,%esp
f0111b67:	68 50 93 13 f0       	push   $0xf0139350
f0111b6c:	e8 9d f1 fe ff       	call   f0100d0e <cprintf>
f0111b71:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111b74:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111b79:	c9                   	leave  
f0111b7a:	c3                   	ret    

f0111b7b <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111b7b:	55                   	push   %ebp
f0111b7c:	89 e5                	mov    %esp,%ebp
f0111b7e:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111b81:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111b88:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111b8d:	83 ec 08             	sub    $0x8,%esp
f0111b90:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b93:	50                   	push   %eax
f0111b94:	e8 2a 64 ff ff       	call   f0107fc3 <pt_clear_page_table_entry>
f0111b99:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111b9c:	83 ec 04             	sub    $0x4,%esp
f0111b9f:	68 9c 93 13 f0       	push   $0xf013939c
f0111ba4:	68 01 01 00 00       	push   $0x101
f0111ba9:	68 de 8f 13 f0       	push   $0xf0138fde
f0111bae:	e8 52 e6 fe ff       	call   f0100205 <_panic>

f0111bb3 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111bb3:	55                   	push   %ebp
f0111bb4:	89 e5                	mov    %esp,%ebp
f0111bb6:	57                   	push   %edi
f0111bb7:	56                   	push   %esi
f0111bb8:	53                   	push   %ebx
f0111bb9:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111bbf:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111bc6:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111bcd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111bd2:	83 ec 0c             	sub    $0xc,%esp
f0111bd5:	50                   	push   %eax
f0111bd6:	e8 79 49 00 00       	call   f0116554 <ClearUserSpace>
f0111bdb:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111bde:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111be5:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111bea:	83 ec 08             	sub    $0x8,%esp
f0111bed:	ff 75 dc             	pushl  -0x24(%ebp)
f0111bf0:	50                   	push   %eax
f0111bf1:	e8 39 64 ff ff       	call   f010802f <virtual_to_physical>
f0111bf6:	83 c4 10             	add    $0x10,%esp
f0111bf9:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111bfc:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111c00:	74 17                	je     f0111c19 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111c02:	83 ec 04             	sub    $0x4,%esp
f0111c05:	68 34 94 13 f0       	push   $0xf0139434
f0111c0a:	68 16 01 00 00       	push   $0x116
f0111c0f:	68 de 8f 13 f0       	push   $0xf0138fde
f0111c14:	e8 ec e5 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111c19:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111c20:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111c25:	83 ec 08             	sub    $0x8,%esp
f0111c28:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c2b:	50                   	push   %eax
f0111c2c:	e8 fe 63 ff ff       	call   f010802f <virtual_to_physical>
f0111c31:	83 c4 10             	add    $0x10,%esp
f0111c34:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111c37:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111c3c:	83 ec 08             	sub    $0x8,%esp
f0111c3f:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c42:	50                   	push   %eax
f0111c43:	e8 0b 48 00 00       	call   f0116453 <CA>
f0111c48:	83 c4 10             	add    $0x10,%esp
f0111c4b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111c4e:	74 17                	je     f0111c67 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111c50:	83 ec 04             	sub    $0x4,%esp
f0111c53:	68 6c 94 13 f0       	push   $0xf013946c
f0111c58:	68 1f 01 00 00       	push   $0x11f
f0111c5d:	68 de 8f 13 f0       	push   $0xf0138fde
f0111c62:	e8 9e e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111c67:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111c6d:	bb 38 96 13 f0       	mov    $0xf0139638,%ebx
f0111c72:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111c77:	89 c7                	mov    %eax,%edi
f0111c79:	89 de                	mov    %ebx,%esi
f0111c7b:	89 d1                	mov    %edx,%ecx
f0111c7d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c7f:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111c82:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111c87:	b0 00                	mov    $0x0,%al
f0111c89:	89 d7                	mov    %edx,%edi
f0111c8b:	f3 aa                	rep stos %al,%es:(%edi)
f0111c8d:	83 ec 0c             	sub    $0xc,%esp
f0111c90:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111c96:	50                   	push   %eax
f0111c97:	e8 d4 f0 fe ff       	call   f0100d70 <execute_command>
f0111c9c:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111c9f:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111ca6:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111cab:	83 ec 08             	sub    $0x8,%esp
f0111cae:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cb1:	50                   	push   %eax
f0111cb2:	e8 78 63 ff ff       	call   f010802f <virtual_to_physical>
f0111cb7:	83 c4 10             	add    $0x10,%esp
f0111cba:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111cbd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111cc2:	83 ec 08             	sub    $0x8,%esp
f0111cc5:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cc8:	50                   	push   %eax
f0111cc9:	e8 85 47 00 00       	call   f0116453 <CA>
f0111cce:	83 c4 10             	add    $0x10,%esp
f0111cd1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111cd4:	74 17                	je     f0111ced <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111cd6:	83 ec 04             	sub    $0x4,%esp
f0111cd9:	68 a4 94 13 f0       	push   $0xf01394a4
f0111cde:	68 28 01 00 00       	push   $0x128
f0111ce3:	68 de 8f 13 f0       	push   $0xf0138fde
f0111ce8:	e8 18 e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111ced:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111cf3:	bb 9c 96 13 f0       	mov    $0xf013969c,%ebx
f0111cf8:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111cfd:	89 c7                	mov    %eax,%edi
f0111cff:	89 de                	mov    %ebx,%esi
f0111d01:	89 d1                	mov    %edx,%ecx
f0111d03:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d05:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111d0b:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111d10:	b0 00                	mov    $0x0,%al
f0111d12:	89 d7                	mov    %edx,%edi
f0111d14:	f3 aa                	rep stos %al,%es:(%edi)
f0111d16:	83 ec 0c             	sub    $0xc,%esp
f0111d19:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111d1f:	50                   	push   %eax
f0111d20:	e8 4b f0 fe ff       	call   f0100d70 <execute_command>
f0111d25:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111d28:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111d2f:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111d34:	83 ec 08             	sub    $0x8,%esp
f0111d37:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d3a:	50                   	push   %eax
f0111d3b:	e8 ef 62 ff ff       	call   f010802f <virtual_to_physical>
f0111d40:	83 c4 10             	add    $0x10,%esp
f0111d43:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111d46:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111d4b:	83 ec 08             	sub    $0x8,%esp
f0111d4e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111d51:	50                   	push   %eax
f0111d52:	e8 fc 46 00 00       	call   f0116453 <CA>
f0111d57:	83 c4 10             	add    $0x10,%esp
f0111d5a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111d5d:	74 17                	je     f0111d76 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111d5f:	83 ec 04             	sub    $0x4,%esp
f0111d62:	68 dc 94 13 f0       	push   $0xf01394dc
f0111d67:	68 31 01 00 00       	push   $0x131
f0111d6c:	68 de 8f 13 f0       	push   $0xf0138fde
f0111d71:	e8 8f e4 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111d76:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111d7c:	bb 00 97 13 f0       	mov    $0xf0139700,%ebx
f0111d81:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111d86:	89 c7                	mov    %eax,%edi
f0111d88:	89 de                	mov    %ebx,%esi
f0111d8a:	89 d1                	mov    %edx,%ecx
f0111d8c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d8e:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111d94:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111d99:	b0 00                	mov    $0x0,%al
f0111d9b:	89 d7                	mov    %edx,%edi
f0111d9d:	f3 aa                	rep stos %al,%es:(%edi)
f0111d9f:	83 ec 0c             	sub    $0xc,%esp
f0111da2:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111da8:	50                   	push   %eax
f0111da9:	e8 c2 ef fe ff       	call   f0100d70 <execute_command>
f0111dae:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111db1:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111db8:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111dbd:	83 ec 08             	sub    $0x8,%esp
f0111dc0:	ff 75 dc             	pushl  -0x24(%ebp)
f0111dc3:	50                   	push   %eax
f0111dc4:	e8 66 62 ff ff       	call   f010802f <virtual_to_physical>
f0111dc9:	83 c4 10             	add    $0x10,%esp
f0111dcc:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111dcf:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111dd4:	83 ec 08             	sub    $0x8,%esp
f0111dd7:	ff 75 dc             	pushl  -0x24(%ebp)
f0111dda:	50                   	push   %eax
f0111ddb:	e8 73 46 00 00       	call   f0116453 <CA>
f0111de0:	83 c4 10             	add    $0x10,%esp
f0111de3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111de6:	74 17                	je     f0111dff <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111de8:	83 ec 04             	sub    $0x4,%esp
f0111deb:	68 14 95 13 f0       	push   $0xf0139514
f0111df0:	68 3a 01 00 00       	push   $0x13a
f0111df5:	68 de 8f 13 f0       	push   $0xf0138fde
f0111dfa:	e8 06 e4 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0111dff:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111e06:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e0b:	83 ec 08             	sub    $0x8,%esp
f0111e0e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e11:	50                   	push   %eax
f0111e12:	e8 18 62 ff ff       	call   f010802f <virtual_to_physical>
f0111e17:	83 c4 10             	add    $0x10,%esp
f0111e1a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111e1d:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e22:	83 ec 08             	sub    $0x8,%esp
f0111e25:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e28:	50                   	push   %eax
f0111e29:	e8 25 46 00 00       	call   f0116453 <CA>
f0111e2e:	83 c4 10             	add    $0x10,%esp
f0111e31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111e34:	74 17                	je     f0111e4d <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111e36:	83 ec 04             	sub    $0x4,%esp
f0111e39:	68 4c 95 13 f0       	push   $0xf013954c
f0111e3e:	68 42 01 00 00       	push   $0x142
f0111e43:	68 de 8f 13 f0       	push   $0xf0138fde
f0111e48:	e8 b8 e3 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111e4d:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111e54:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e59:	83 ec 08             	sub    $0x8,%esp
f0111e5c:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e5f:	50                   	push   %eax
f0111e60:	e8 ca 61 ff ff       	call   f010802f <virtual_to_physical>
f0111e65:	83 c4 10             	add    $0x10,%esp
f0111e68:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111e6b:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111e70:	83 ec 08             	sub    $0x8,%esp
f0111e73:	ff 75 dc             	pushl  -0x24(%ebp)
f0111e76:	50                   	push   %eax
f0111e77:	e8 d7 45 00 00       	call   f0116453 <CA>
f0111e7c:	83 c4 10             	add    $0x10,%esp
f0111e7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111e82:	74 17                	je     f0111e9b <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111e84:	83 ec 04             	sub    $0x4,%esp
f0111e87:	68 84 95 13 f0       	push   $0xf0139584
f0111e8c:	68 4a 01 00 00       	push   $0x14a
f0111e91:	68 de 8f 13 f0       	push   $0xf0138fde
f0111e96:	e8 6a e3 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111e9b:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111ea1:	bb 64 97 13 f0       	mov    $0xf0139764,%ebx
f0111ea6:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111eab:	89 c7                	mov    %eax,%edi
f0111ead:	89 de                	mov    %ebx,%esi
f0111eaf:	89 d1                	mov    %edx,%ecx
f0111eb1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111eb3:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111eb9:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111ebe:	b0 00                	mov    $0x0,%al
f0111ec0:	89 d7                	mov    %edx,%edi
f0111ec2:	f3 aa                	rep stos %al,%es:(%edi)
f0111ec4:	83 ec 0c             	sub    $0xc,%esp
f0111ec7:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111ecd:	50                   	push   %eax
f0111ece:	e8 9d ee fe ff       	call   f0100d70 <execute_command>
f0111ed3:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111ed6:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111edd:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ee2:	83 ec 08             	sub    $0x8,%esp
f0111ee5:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ee8:	50                   	push   %eax
f0111ee9:	e8 41 61 ff ff       	call   f010802f <virtual_to_physical>
f0111eee:	83 c4 10             	add    $0x10,%esp
f0111ef1:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111ef4:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0111ef9:	83 ec 08             	sub    $0x8,%esp
f0111efc:	ff 75 dc             	pushl  -0x24(%ebp)
f0111eff:	50                   	push   %eax
f0111f00:	e8 4e 45 00 00       	call   f0116453 <CA>
f0111f05:	83 c4 10             	add    $0x10,%esp
f0111f08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111f0b:	74 17                	je     f0111f24 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111f0d:	83 ec 04             	sub    $0x4,%esp
f0111f10:	68 bc 95 13 f0       	push   $0xf01395bc
f0111f15:	68 53 01 00 00       	push   $0x153
f0111f1a:	68 de 8f 13 f0       	push   $0xf0138fde
f0111f1f:	e8 e1 e2 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111f24:	83 ec 0c             	sub    $0xc,%esp
f0111f27:	68 f4 95 13 f0       	push   $0xf01395f4
f0111f2c:	e8 dd ed fe ff       	call   f0100d0e <cprintf>
f0111f31:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111f34:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f39:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111f3c:	5b                   	pop    %ebx
f0111f3d:	5e                   	pop    %esi
f0111f3e:	5f                   	pop    %edi
f0111f3f:	5d                   	pop    %ebp
f0111f40:	c3                   	ret    

f0111f41 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111f41:	55                   	push   %ebp
f0111f42:	89 e5                	mov    %esp,%ebp
f0111f44:	57                   	push   %edi
f0111f45:	56                   	push   %esi
f0111f46:	53                   	push   %ebx
f0111f47:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111f4d:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111f53:	bb 78 9a 13 f0       	mov    $0xf0139a78,%ebx
f0111f58:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111f5d:	89 c7                	mov    %eax,%edi
f0111f5f:	89 de                	mov    %ebx,%esi
f0111f61:	89 d1                	mov    %edx,%ecx
f0111f63:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111f65:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111f6b:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111f70:	b0 00                	mov    $0x0,%al
f0111f72:	89 d7                	mov    %edx,%edi
f0111f74:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111f76:	6a 00                	push   $0x0
f0111f78:	6a 0a                	push   $0xa
f0111f7a:	6a 14                	push   $0x14
f0111f7c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111f82:	50                   	push   %eax
f0111f83:	e8 f0 72 ff ff       	call   f0109278 <env_create>
f0111f88:	83 c4 10             	add    $0x10,%esp
f0111f8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111f8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f91:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111f94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111f97:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f9a:	8b 40 60             	mov    0x60(%eax),%eax
f0111f9d:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111fa0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111fa3:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111fa6:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111fad:	75 70 20 
f0111fb0:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111fb7:	00 00 00 
f0111fba:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111fc0:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111fc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0111fca:	89 d7                	mov    %edx,%edi
f0111fcc:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111fce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111fd1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111fd4:	83 ec 08             	sub    $0x8,%esp
f0111fd7:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111fdd:	52                   	push   %edx
f0111fde:	50                   	push   %eax
f0111fdf:	e8 6f fb 01 00       	call   f0131b53 <ltostr>
f0111fe4:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111fe7:	83 ec 04             	sub    $0x4,%esp
f0111fea:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111ff0:	50                   	push   %eax
f0111ff1:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111ff7:	50                   	push   %eax
f0111ff8:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111ffe:	50                   	push   %eax
f0111fff:	e8 47 fc 01 00       	call   f0131c4b <strcconcat>
f0112004:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0112007:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011200e:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112015:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f011201c:	83 ec 0c             	sub    $0xc,%esp
f011201f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112022:	e8 2d 45 00 00       	call   f0116554 <ClearUserSpace>
f0112027:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f011202a:	83 ec 04             	sub    $0x4,%esp
f011202d:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112033:	50                   	push   %eax
f0112034:	68 c8 97 13 f0       	push   $0xf01397c8
f0112039:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011203f:	50                   	push   %eax
f0112040:	e8 06 fc 01 00       	call   f0131c4b <strcconcat>
f0112045:	83 c4 10             	add    $0x10,%esp
f0112048:	83 ec 0c             	sub    $0xc,%esp
f011204b:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112051:	50                   	push   %eax
f0112052:	e8 19 ed fe ff       	call   f0100d70 <execute_command>
f0112057:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f011205a:	83 ec 04             	sub    $0x4,%esp
f011205d:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112063:	50                   	push   %eax
f0112064:	68 d3 97 13 f0       	push   $0xf01397d3
f0112069:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011206f:	50                   	push   %eax
f0112070:	e8 d6 fb 01 00       	call   f0131c4b <strcconcat>
f0112075:	83 c4 10             	add    $0x10,%esp
f0112078:	83 ec 0c             	sub    $0xc,%esp
f011207b:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112081:	50                   	push   %eax
f0112082:	e8 e9 ec fe ff       	call   f0100d70 <execute_command>
f0112087:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f011208a:	83 ec 04             	sub    $0x4,%esp
f011208d:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0112093:	50                   	push   %eax
f0112094:	68 de 97 13 f0       	push   $0xf01397de
f0112099:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011209f:	50                   	push   %eax
f01120a0:	e8 a6 fb 01 00       	call   f0131c4b <strcconcat>
f01120a5:	83 c4 10             	add    $0x10,%esp
f01120a8:	83 ec 0c             	sub    $0xc,%esp
f01120ab:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01120b1:	50                   	push   %eax
f01120b2:	e8 b9 ec fe ff       	call   f0100d70 <execute_command>
f01120b7:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01120ba:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01120c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120c4:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01120c7:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01120ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120d1:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01120d4:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01120db:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120de:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01120e1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01120e4:	83 ec 08             	sub    $0x8,%esp
f01120e7:	50                   	push   %eax
f01120e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120eb:	e8 45 44 00 00       	call   f0116535 <GP>
f01120f0:	83 c4 10             	add    $0x10,%esp
f01120f3:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01120f6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01120fd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0112104:	e8 a8 ae ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0112109:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011210c:	83 ec 0c             	sub    $0xc,%esp
f011210f:	68 ec 97 13 f0       	push   $0xf01397ec
f0112114:	e8 f5 eb fe ff       	call   f0100d0e <cprintf>
f0112119:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011211c:	6a 03                	push   $0x3
f011211e:	68 00 00 90 02       	push   $0x2900000
f0112123:	68 00 00 80 02       	push   $0x2800000
f0112128:	ff 75 d4             	pushl  -0x2c(%ebp)
f011212b:	e8 27 69 ff ff       	call   f0108a57 <cut_paste_pages>
f0112130:	83 c4 10             	add    $0x10,%esp
f0112133:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112136:	e8 76 ae ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011213b:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f011213e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112145:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112149:	75 08                	jne    f0112153 <test_cut_paste_pages+0x212>
f011214b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011214e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112151:	74 2b                	je     f011217e <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112153:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112156:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112159:	83 ec 0c             	sub    $0xc,%esp
f011215c:	50                   	push   %eax
f011215d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112160:	68 1c 98 13 f0       	push   $0xf013981c
f0112165:	68 91 01 00 00       	push   $0x191
f011216a:	68 de 8f 13 f0       	push   $0xf0138fde
f011216f:	e8 9f e2 fe ff       	call   f0100413 <_warn>
f0112174:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112177:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f011217e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112182:	74 04                	je     f0112188 <test_cut_paste_pages+0x247>
f0112184:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112188:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011218f:	83 ec 08             	sub    $0x8,%esp
f0112192:	6a 00                	push   $0x0
f0112194:	6a 01                	push   $0x1
f0112196:	6a 00                	push   $0x0
f0112198:	68 ff 0f 00 00       	push   $0xfff
f011219d:	ff 75 bc             	pushl  -0x44(%ebp)
f01121a0:	6a 01                	push   $0x1
f01121a2:	68 00 30 00 00       	push   $0x3000
f01121a7:	68 00 00 90 02       	push   $0x2900000
f01121ac:	68 00 00 80 02       	push   $0x2800000
f01121b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121b4:	e8 cf 43 00 00       	call   f0116588 <CCP>
f01121b9:	83 c4 30             	add    $0x30,%esp
f01121bc:	83 f8 01             	cmp    $0x1,%eax
f01121bf:	74 21                	je     f01121e2 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01121c1:	83 ec 04             	sub    $0x4,%esp
f01121c4:	68 70 98 13 f0       	push   $0xf0139870
f01121c9:	68 99 01 00 00       	push   $0x199
f01121ce:	68 de 8f 13 f0       	push   $0xf0138fde
f01121d3:	e8 3b e2 fe ff       	call   f0100413 <_warn>
f01121d8:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01121db:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01121e2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121e6:	74 04                	je     f01121ec <test_cut_paste_pages+0x2ab>
f01121e8:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01121ec:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01121f3:	83 ec 04             	sub    $0x4,%esp
f01121f6:	6a 00                	push   $0x0
f01121f8:	68 00 00 90 02       	push   $0x2900000
f01121fd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112200:	e8 5f 41 00 00       	call   f0116364 <CB>
f0112205:	83 c4 10             	add    $0x10,%esp
f0112208:	85 c0                	test   %eax,%eax
f011220a:	0f 84 f6 00 00 00    	je     f0112306 <test_cut_paste_pages+0x3c5>
f0112210:	83 ec 04             	sub    $0x4,%esp
f0112213:	6a 00                	push   $0x0
f0112215:	68 00 10 90 02       	push   $0x2901000
f011221a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011221d:	e8 42 41 00 00       	call   f0116364 <CB>
f0112222:	83 c4 10             	add    $0x10,%esp
f0112225:	85 c0                	test   %eax,%eax
f0112227:	0f 84 d9 00 00 00    	je     f0112306 <test_cut_paste_pages+0x3c5>
f011222d:	83 ec 04             	sub    $0x4,%esp
f0112230:	6a 00                	push   $0x0
f0112232:	68 00 20 90 02       	push   $0x2902000
f0112237:	ff 75 d4             	pushl  -0x2c(%ebp)
f011223a:	e8 25 41 00 00       	call   f0116364 <CB>
f011223f:	83 c4 10             	add    $0x10,%esp
f0112242:	85 c0                	test   %eax,%eax
f0112244:	0f 84 bc 00 00 00    	je     f0112306 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f011224a:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112251:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112258:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011225f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112262:	8a 00                	mov    (%eax),%al
f0112264:	3c 61                	cmp    $0x61,%al
f0112266:	75 12                	jne    f011227a <test_cut_paste_pages+0x339>
f0112268:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011226b:	8a 00                	mov    (%eax),%al
f011226d:	3c 62                	cmp    $0x62,%al
f011226f:	75 09                	jne    f011227a <test_cut_paste_pages+0x339>
f0112271:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112274:	8a 00                	mov    (%eax),%al
f0112276:	3c 63                	cmp    $0x63,%al
f0112278:	74 21                	je     f011229b <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011227a:	83 ec 04             	sub    $0x4,%esp
f011227d:	68 bc 98 13 f0       	push   $0xf01398bc
f0112282:	68 a6 01 00 00       	push   $0x1a6
f0112287:	68 de 8f 13 f0       	push   $0xf0138fde
f011228c:	e8 82 e1 fe ff       	call   f0100413 <_warn>
f0112291:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112294:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011229b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011229f:	74 04                	je     f01122a5 <test_cut_paste_pages+0x364>
f01122a1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01122a5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01122ac:	83 ec 04             	sub    $0x4,%esp
f01122af:	6a 01                	push   $0x1
f01122b1:	68 00 10 90 02       	push   $0x2901000
f01122b6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122b9:	e8 a6 40 00 00       	call   f0116364 <CB>
f01122be:	83 c4 10             	add    $0x10,%esp
f01122c1:	85 c0                	test   %eax,%eax
f01122c3:	74 41                	je     f0112306 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01122c5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01122c8:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01122cb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01122ce:	8a 00                	mov    (%eax),%al
f01122d0:	3c 79                	cmp    $0x79,%al
f01122d2:	74 21                	je     f01122f5 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01122d4:	83 ec 04             	sub    $0x4,%esp
f01122d7:	68 bc 98 13 f0       	push   $0xf01398bc
f01122dc:	68 b1 01 00 00       	push   $0x1b1
f01122e1:	68 de 8f 13 f0       	push   $0xf0138fde
f01122e6:	e8 28 e1 fe ff       	call   f0100413 <_warn>
f01122eb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01122ee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01122f5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122f9:	74 04                	je     f01122ff <test_cut_paste_pages+0x3be>
f01122fb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01122ff:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0112306:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112309:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011230c:	6a 02                	push   $0x2
f011230e:	68 00 f0 bf 02       	push   $0x2bff000
f0112313:	68 00 10 90 02       	push   $0x2901000
f0112318:	ff 75 d4             	pushl  -0x2c(%ebp)
f011231b:	e8 37 67 ff ff       	call   f0108a57 <cut_paste_pages>
f0112320:	83 c4 10             	add    $0x10,%esp
f0112323:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112326:	e8 86 ac ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011232b:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011232e:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112332:	75 0b                	jne    f011233f <test_cut_paste_pages+0x3fe>
f0112334:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112337:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011233a:	83 f8 01             	cmp    $0x1,%eax
f011233d:	74 2b                	je     f011236a <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011233f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112342:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112345:	83 ec 0c             	sub    $0xc,%esp
f0112348:	50                   	push   %eax
f0112349:	ff 75 b4             	pushl  -0x4c(%ebp)
f011234c:	68 1c 98 13 f0       	push   $0xf013981c
f0112351:	68 c2 01 00 00       	push   $0x1c2
f0112356:	68 de 8f 13 f0       	push   $0xf0138fde
f011235b:	e8 b3 e0 fe ff       	call   f0100413 <_warn>
f0112360:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112363:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011236a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011236e:	74 04                	je     f0112374 <test_cut_paste_pages+0x433>
f0112370:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112374:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011237b:	83 ec 08             	sub    $0x8,%esp
f011237e:	6a 00                	push   $0x0
f0112380:	6a 01                	push   $0x1
f0112382:	6a 00                	push   $0x0
f0112384:	68 ff 0f 00 00       	push   $0xfff
f0112389:	ff 75 bc             	pushl  -0x44(%ebp)
f011238c:	6a 01                	push   $0x1
f011238e:	68 00 20 00 00       	push   $0x2000
f0112393:	68 00 f0 bf 02       	push   $0x2bff000
f0112398:	68 00 10 90 02       	push   $0x2901000
f011239d:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123a0:	e8 e3 41 00 00       	call   f0116588 <CCP>
f01123a5:	83 c4 30             	add    $0x30,%esp
f01123a8:	83 f8 01             	cmp    $0x1,%eax
f01123ab:	74 21                	je     f01123ce <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01123ad:	83 ec 04             	sub    $0x4,%esp
f01123b0:	68 70 98 13 f0       	push   $0xf0139870
f01123b5:	68 ca 01 00 00       	push   $0x1ca
f01123ba:	68 de 8f 13 f0       	push   $0xf0138fde
f01123bf:	e8 4f e0 fe ff       	call   f0100413 <_warn>
f01123c4:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01123c7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01123ce:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123d2:	74 04                	je     f01123d8 <test_cut_paste_pages+0x497>
f01123d4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01123d8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01123df:	83 ec 04             	sub    $0x4,%esp
f01123e2:	6a 00                	push   $0x0
f01123e4:	68 ff f7 bf 02       	push   $0x2bff7ff
f01123e9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123ec:	e8 73 3f 00 00       	call   f0116364 <CB>
f01123f1:	83 c4 10             	add    $0x10,%esp
f01123f4:	85 c0                	test   %eax,%eax
f01123f6:	74 6b                	je     f0112463 <test_cut_paste_pages+0x522>
f01123f8:	83 ec 04             	sub    $0x4,%esp
f01123fb:	6a 00                	push   $0x0
f01123fd:	68 ff 0f c0 02       	push   $0x2c00fff
f0112402:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112405:	e8 5a 3f 00 00       	call   f0116364 <CB>
f011240a:	83 c4 10             	add    $0x10,%esp
f011240d:	85 c0                	test   %eax,%eax
f011240f:	74 52                	je     f0112463 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112411:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112418:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011241f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112422:	8a 00                	mov    (%eax),%al
f0112424:	3c 79                	cmp    $0x79,%al
f0112426:	75 09                	jne    f0112431 <test_cut_paste_pages+0x4f0>
f0112428:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011242b:	8a 00                	mov    (%eax),%al
f011242d:	3c 63                	cmp    $0x63,%al
f011242f:	74 21                	je     f0112452 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112431:	83 ec 04             	sub    $0x4,%esp
f0112434:	68 bc 98 13 f0       	push   $0xf01398bc
f0112439:	68 d6 01 00 00       	push   $0x1d6
f011243e:	68 de 8f 13 f0       	push   $0xf0138fde
f0112443:	e8 cb df fe ff       	call   f0100413 <_warn>
f0112448:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011244b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112452:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112456:	74 04                	je     f011245c <test_cut_paste_pages+0x51b>
f0112458:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011245c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112463:	83 ec 0c             	sub    $0xc,%esp
f0112466:	68 f5 98 13 f0       	push   $0xf01398f5
f011246b:	e8 9e e8 fe ff       	call   f0100d0e <cprintf>
f0112470:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112473:	83 ec 0c             	sub    $0xc,%esp
f0112476:	68 04 99 13 f0       	push   $0xf0139904
f011247b:	e8 8e e8 fe ff       	call   f0100d0e <cprintf>
f0112480:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112483:	83 ec 04             	sub    $0x4,%esp
f0112486:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011248c:	50                   	push   %eax
f011248d:	68 2d 99 13 f0       	push   $0xf013992d
f0112492:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112498:	50                   	push   %eax
f0112499:	e8 ad f7 01 00       	call   f0131c4b <strcconcat>
f011249e:	83 c4 10             	add    $0x10,%esp
f01124a1:	83 ec 0c             	sub    $0xc,%esp
f01124a4:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01124aa:	50                   	push   %eax
f01124ab:	e8 c0 e8 fe ff       	call   f0100d70 <execute_command>
f01124b0:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01124b3:	83 ec 04             	sub    $0x4,%esp
f01124b6:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01124bc:	50                   	push   %eax
f01124bd:	68 38 99 13 f0       	push   $0xf0139938
f01124c2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01124c8:	50                   	push   %eax
f01124c9:	e8 7d f7 01 00       	call   f0131c4b <strcconcat>
f01124ce:	83 c4 10             	add    $0x10,%esp
f01124d1:	83 ec 0c             	sub    $0xc,%esp
f01124d4:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01124da:	50                   	push   %eax
f01124db:	e8 90 e8 fe ff       	call   f0100d70 <execute_command>
f01124e0:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01124e3:	83 ec 04             	sub    $0x4,%esp
f01124e6:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01124ec:	50                   	push   %eax
f01124ed:	68 43 99 13 f0       	push   $0xf0139943
f01124f2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01124f8:	50                   	push   %eax
f01124f9:	e8 4d f7 01 00       	call   f0131c4b <strcconcat>
f01124fe:	83 c4 10             	add    $0x10,%esp
f0112501:	83 ec 0c             	sub    $0xc,%esp
f0112504:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011250a:	50                   	push   %eax
f011250b:	e8 60 e8 fe ff       	call   f0100d70 <execute_command>
f0112510:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112513:	83 ec 04             	sub    $0x4,%esp
f0112516:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011251c:	50                   	push   %eax
f011251d:	68 4e 99 13 f0       	push   $0xf013994e
f0112522:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112528:	50                   	push   %eax
f0112529:	e8 1d f7 01 00       	call   f0131c4b <strcconcat>
f011252e:	83 c4 10             	add    $0x10,%esp
f0112531:	83 ec 0c             	sub    $0xc,%esp
f0112534:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011253a:	50                   	push   %eax
f011253b:	e8 30 e8 fe ff       	call   f0100d70 <execute_command>
f0112540:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112543:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f011254a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011254d:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112550:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112557:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011255a:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f011255d:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112564:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112567:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f011256a:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112571:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112574:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112577:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f011257e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112581:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112584:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f011258b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011258e:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112591:	83 ec 08             	sub    $0x8,%esp
f0112594:	68 00 00 c0 01       	push   $0x1c00000
f0112599:	ff 75 d4             	pushl  -0x2c(%ebp)
f011259c:	e8 94 3f 00 00       	call   f0116535 <GP>
f01125a1:	83 c4 10             	add    $0x10,%esp
f01125a4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01125a7:	83 ec 08             	sub    $0x8,%esp
f01125aa:	68 00 00 40 01       	push   $0x1400000
f01125af:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125b2:	e8 7e 3f 00 00       	call   f0116535 <GP>
f01125b7:	83 c4 10             	add    $0x10,%esp
f01125ba:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01125bd:	e8 ef a9 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01125c2:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01125c5:	6a 01                	push   $0x1
f01125c7:	68 00 00 40 01       	push   $0x1400000
f01125cc:	68 00 00 c0 01       	push   $0x1c00000
f01125d1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125d4:	e8 7e 64 ff ff       	call   f0108a57 <cut_paste_pages>
f01125d9:	83 c4 10             	add    $0x10,%esp
f01125dc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01125df:	e8 cd a9 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01125e4:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01125e7:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01125eb:	75 08                	jne    f01125f5 <test_cut_paste_pages+0x6b4>
f01125ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125f0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01125f3:	74 2b                	je     f0112620 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01125f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125f8:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01125fb:	83 ec 0c             	sub    $0xc,%esp
f01125fe:	50                   	push   %eax
f01125ff:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112602:	68 5c 99 13 f0       	push   $0xf013995c
f0112607:	68 f9 01 00 00       	push   $0x1f9
f011260c:	68 de 8f 13 f0       	push   $0xf0138fde
f0112611:	e8 fd dd fe ff       	call   f0100413 <_warn>
f0112616:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112619:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112620:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112624:	74 04                	je     f011262a <test_cut_paste_pages+0x6e9>
f0112626:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011262a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112631:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112638:	83 ec 08             	sub    $0x8,%esp
f011263b:	6a 00                	push   $0x0
f011263d:	68 ff 0f 00 00       	push   $0xfff
f0112642:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112645:	68 ff 0f 00 00       	push   $0xfff
f011264a:	ff 75 a0             	pushl  -0x60(%ebp)
f011264d:	6a 01                	push   $0x1
f011264f:	68 00 10 00 00       	push   $0x1000
f0112654:	68 00 00 40 01       	push   $0x1400000
f0112659:	68 00 00 c0 01       	push   $0x1c00000
f011265e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112661:	e8 22 3f 00 00       	call   f0116588 <CCP>
f0112666:	83 c4 30             	add    $0x30,%esp
f0112669:	83 f8 01             	cmp    $0x1,%eax
f011266c:	74 28                	je     f0112696 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011266e:	83 ec 04             	sub    $0x4,%esp
f0112671:	68 70 98 13 f0       	push   $0xf0139870
f0112676:	68 02 02 00 00       	push   $0x202
f011267b:	68 de 8f 13 f0       	push   $0xf0138fde
f0112680:	e8 8e dd fe ff       	call   f0100413 <_warn>
f0112685:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112688:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011268f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112696:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011269a:	74 04                	je     f01126a0 <test_cut_paste_pages+0x75f>
f011269c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01126a0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01126a7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01126ab:	0f 84 92 00 00 00    	je     f0112743 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01126b1:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01126b8:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01126bf:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01126c6:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01126cd:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01126d4:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01126db:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126de:	8a 00                	mov    (%eax),%al
f01126e0:	3c 61                	cmp    $0x61,%al
f01126e2:	75 2d                	jne    f0112711 <test_cut_paste_pages+0x7d0>
f01126e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126e7:	8a 00                	mov    (%eax),%al
f01126e9:	3c 78                	cmp    $0x78,%al
f01126eb:	75 24                	jne    f0112711 <test_cut_paste_pages+0x7d0>
f01126ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01126f0:	8a 00                	mov    (%eax),%al
f01126f2:	3c 62                	cmp    $0x62,%al
f01126f4:	75 1b                	jne    f0112711 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01126f6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01126f9:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01126fb:	3c 79                	cmp    $0x79,%al
f01126fd:	75 12                	jne    f0112711 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01126ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112702:	8a 00                	mov    (%eax),%al
f0112704:	3c 63                	cmp    $0x63,%al
f0112706:	75 09                	jne    f0112711 <test_cut_paste_pages+0x7d0>
f0112708:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011270b:	8a 00                	mov    (%eax),%al
f011270d:	3c 7a                	cmp    $0x7a,%al
f011270f:	74 21                	je     f0112732 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112711:	83 ec 04             	sub    $0x4,%esp
f0112714:	68 bc 98 13 f0       	push   $0xf01398bc
f0112719:	68 14 02 00 00       	push   $0x214
f011271e:	68 de 8f 13 f0       	push   $0xf0138fde
f0112723:	e8 eb dc fe ff       	call   f0100413 <_warn>
f0112728:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011272b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112732:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112736:	74 04                	je     f011273c <test_cut_paste_pages+0x7fb>
f0112738:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011273c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112743:	e8 69 a8 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0112748:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f011274b:	6a 03                	push   $0x3
f011274d:	68 00 f0 bf 01       	push   $0x1bff000
f0112752:	68 00 00 40 01       	push   $0x1400000
f0112757:	ff 75 d4             	pushl  -0x2c(%ebp)
f011275a:	e8 f8 62 ff ff       	call   f0108a57 <cut_paste_pages>
f011275f:	83 c4 10             	add    $0x10,%esp
f0112762:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112765:	e8 47 a8 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011276a:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011276d:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112771:	75 08                	jne    f011277b <test_cut_paste_pages+0x83a>
f0112773:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112776:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112779:	74 2b                	je     f01127a6 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011277b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011277e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112781:	83 ec 0c             	sub    $0xc,%esp
f0112784:	50                   	push   %eax
f0112785:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112788:	68 5c 99 13 f0       	push   $0xf013995c
f011278d:	68 23 02 00 00       	push   $0x223
f0112792:	68 de 8f 13 f0       	push   $0xf0138fde
f0112797:	e8 77 dc fe ff       	call   f0100413 <_warn>
f011279c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011279f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01127a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127aa:	74 04                	je     f01127b0 <test_cut_paste_pages+0x86f>
f01127ac:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01127b0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f01127b7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01127be:	83 ec 04             	sub    $0x4,%esp
f01127c1:	6a 00                	push   $0x0
f01127c3:	68 00 00 40 01       	push   $0x1400000
f01127c8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127cb:	e8 94 3b 00 00       	call   f0116364 <CB>
f01127d0:	83 c4 10             	add    $0x10,%esp
f01127d3:	83 f8 01             	cmp    $0x1,%eax
f01127d6:	0f 85 80 00 00 00    	jne    f011285c <test_cut_paste_pages+0x91b>
f01127dc:	83 ec 04             	sub    $0x4,%esp
f01127df:	6a 00                	push   $0x0
f01127e1:	68 00 10 40 01       	push   $0x1401000
f01127e6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127e9:	e8 76 3b 00 00       	call   f0116364 <CB>
f01127ee:	83 c4 10             	add    $0x10,%esp
f01127f1:	83 f8 01             	cmp    $0x1,%eax
f01127f4:	75 66                	jne    f011285c <test_cut_paste_pages+0x91b>
f01127f6:	83 ec 04             	sub    $0x4,%esp
f01127f9:	6a 00                	push   $0x0
f01127fb:	68 00 20 40 01       	push   $0x1402000
f0112800:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112803:	e8 5c 3b 00 00       	call   f0116364 <CB>
f0112808:	83 c4 10             	add    $0x10,%esp
f011280b:	83 f8 01             	cmp    $0x1,%eax
f011280e:	75 4c                	jne    f011285c <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112810:	83 ec 04             	sub    $0x4,%esp
f0112813:	6a 00                	push   $0x0
f0112815:	68 00 f0 bf 01       	push   $0x1bff000
f011281a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011281d:	e8 42 3b 00 00       	call   f0116364 <CB>
f0112822:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112825:	85 c0                	test   %eax,%eax
f0112827:	75 33                	jne    f011285c <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112829:	83 ec 04             	sub    $0x4,%esp
f011282c:	6a 00                	push   $0x0
f011282e:	68 00 00 c0 01       	push   $0x1c00000
f0112833:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112836:	e8 29 3b 00 00       	call   f0116364 <CB>
f011283b:	83 c4 10             	add    $0x10,%esp
f011283e:	83 f8 01             	cmp    $0x1,%eax
f0112841:	75 19                	jne    f011285c <test_cut_paste_pages+0x91b>
f0112843:	83 ec 04             	sub    $0x4,%esp
f0112846:	6a 00                	push   $0x0
f0112848:	68 00 10 c0 01       	push   $0x1c01000
f011284d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112850:	e8 0f 3b 00 00       	call   f0116364 <CB>
f0112855:	83 c4 10             	add    $0x10,%esp
f0112858:	85 c0                	test   %eax,%eax
f011285a:	74 28                	je     f0112884 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f011285c:	83 ec 04             	sub    $0x4,%esp
f011285f:	68 bc 99 13 f0       	push   $0xf01399bc
f0112864:	68 2c 02 00 00       	push   $0x22c
f0112869:	68 de 8f 13 f0       	push   $0xf0138fde
f011286e:	e8 a0 db fe ff       	call   f0100413 <_warn>
f0112873:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112876:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011287d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112884:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112888:	74 04                	je     f011288e <test_cut_paste_pages+0x94d>
f011288a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011288e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112895:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112899:	0f 84 99 00 00 00    	je     f0112938 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011289f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01128a6:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01128ad:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01128b4:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01128bb:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01128c2:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01128c9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128cc:	8a 00                	mov    (%eax),%al
f01128ce:	3c 61                	cmp    $0x61,%al
f01128d0:	75 2d                	jne    f01128ff <test_cut_paste_pages+0x9be>
f01128d2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128d5:	8a 00                	mov    (%eax),%al
f01128d7:	3c 78                	cmp    $0x78,%al
f01128d9:	75 24                	jne    f01128ff <test_cut_paste_pages+0x9be>
f01128db:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128de:	8a 00                	mov    (%eax),%al
f01128e0:	3c 62                	cmp    $0x62,%al
f01128e2:	75 1b                	jne    f01128ff <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01128e4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01128e7:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01128e9:	3c 79                	cmp    $0x79,%al
f01128eb:	75 12                	jne    f01128ff <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01128ed:	8b 45 98             	mov    -0x68(%ebp),%eax
f01128f0:	8a 00                	mov    (%eax),%al
f01128f2:	3c 63                	cmp    $0x63,%al
f01128f4:	75 09                	jne    f01128ff <test_cut_paste_pages+0x9be>
f01128f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01128f9:	8a 00                	mov    (%eax),%al
f01128fb:	3c 7a                	cmp    $0x7a,%al
f01128fd:	74 28                	je     f0112927 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f01128ff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112906:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011290d:	83 ec 04             	sub    $0x4,%esp
f0112910:	68 bc 98 13 f0       	push   $0xf01398bc
f0112915:	68 40 02 00 00       	push   $0x240
f011291a:	68 de 8f 13 f0       	push   $0xf0138fde
f011291f:	e8 ef da fe ff       	call   f0100413 <_warn>
f0112924:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112927:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011292b:	74 04                	je     f0112931 <test_cut_paste_pages+0x9f0>
f011292d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112931:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112938:	83 ec 0c             	sub    $0xc,%esp
f011293b:	68 f5 99 13 f0       	push   $0xf01399f5
f0112940:	e8 c9 e3 fe ff       	call   f0100d0e <cprintf>
f0112945:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112948:	83 ec 08             	sub    $0x8,%esp
f011294b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011294e:	68 04 9a 13 f0       	push   $0xf0139a04
f0112953:	e8 b6 e3 fe ff       	call   f0100d0e <cprintf>
f0112958:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011295b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011295f:	75 10                	jne    f0112971 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112961:	83 ec 0c             	sub    $0xc,%esp
f0112964:	68 38 9a 13 f0       	push   $0xf0139a38
f0112969:	e8 a0 e3 fe ff       	call   f0100d0e <cprintf>
f011296e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112971:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0112976:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112979:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011297c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011297f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112984:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112987:	5b                   	pop    %ebx
f0112988:	5e                   	pop    %esi
f0112989:	5f                   	pop    %edi
f011298a:	5d                   	pop    %ebp
f011298b:	c3                   	ret    

f011298c <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011298c:	55                   	push   %ebp
f011298d:	89 e5                	mov    %esp,%ebp
f011298f:	57                   	push   %edi
f0112990:	56                   	push   %esi
f0112991:	53                   	push   %ebx
f0112992:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112998:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011299e:	bb 78 9a 13 f0       	mov    $0xf0139a78,%ebx
f01129a3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01129a8:	89 c7                	mov    %eax,%edi
f01129aa:	89 de                	mov    %ebx,%esi
f01129ac:	89 d1                	mov    %edx,%ecx
f01129ae:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01129b0:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f01129b6:	b9 23 00 00 00       	mov    $0x23,%ecx
f01129bb:	b0 00                	mov    $0x0,%al
f01129bd:	89 d7                	mov    %edx,%edi
f01129bf:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01129c1:	6a 00                	push   $0x0
f01129c3:	6a 0a                	push   $0xa
f01129c5:	6a 14                	push   $0x14
f01129c7:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01129cd:	50                   	push   %eax
f01129ce:	e8 a5 68 ff ff       	call   f0109278 <env_create>
f01129d3:	83 c4 10             	add    $0x10,%esp
f01129d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01129d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01129dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01129df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01129e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01129e5:	8b 40 60             	mov    0x60(%eax),%eax
f01129e8:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01129ee:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01129f4:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01129f7:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f01129fe:	75 70 20 
f0112a01:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112a08:	00 00 00 
f0112a0b:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112a11:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112a16:	b8 00 00 00 00       	mov    $0x0,%eax
f0112a1b:	89 d7                	mov    %edx,%edi
f0112a1d:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112a1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a22:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112a25:	83 ec 08             	sub    $0x8,%esp
f0112a28:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112a2e:	52                   	push   %edx
f0112a2f:	50                   	push   %eax
f0112a30:	e8 1e f1 01 00       	call   f0131b53 <ltostr>
f0112a35:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112a38:	83 ec 04             	sub    $0x4,%esp
f0112a3b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a41:	50                   	push   %eax
f0112a42:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112a48:	50                   	push   %eax
f0112a49:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112a4f:	50                   	push   %eax
f0112a50:	e8 f6 f1 01 00       	call   f0131c4b <strcconcat>
f0112a55:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112a58:	83 ec 0c             	sub    $0xc,%esp
f0112a5b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a5e:	e8 f1 3a 00 00       	call   f0116554 <ClearUserSpace>
f0112a63:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112a66:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112a6d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112a74:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112a7b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112a82:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112a89:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112a90:	83 ec 0c             	sub    $0xc,%esp
f0112a93:	68 ac 9a 13 f0       	push   $0xf0139aac
f0112a98:	e8 71 e2 fe ff       	call   f0100d0e <cprintf>
f0112a9d:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112aa0:	83 ec 04             	sub    $0x4,%esp
f0112aa3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112aa9:	50                   	push   %eax
f0112aaa:	68 e2 9a 13 f0       	push   $0xf0139ae2
f0112aaf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ab5:	50                   	push   %eax
f0112ab6:	e8 90 f1 01 00       	call   f0131c4b <strcconcat>
f0112abb:	83 c4 10             	add    $0x10,%esp
f0112abe:	83 ec 0c             	sub    $0xc,%esp
f0112ac1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ac7:	50                   	push   %eax
f0112ac8:	e8 a3 e2 fe ff       	call   f0100d70 <execute_command>
f0112acd:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112ad0:	83 ec 04             	sub    $0x4,%esp
f0112ad3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ad9:	50                   	push   %eax
f0112ada:	68 e7 9a 13 f0       	push   $0xf0139ae7
f0112adf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ae5:	50                   	push   %eax
f0112ae6:	e8 60 f1 01 00       	call   f0131c4b <strcconcat>
f0112aeb:	83 c4 10             	add    $0x10,%esp
f0112aee:	83 ec 0c             	sub    $0xc,%esp
f0112af1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112af7:	50                   	push   %eax
f0112af8:	e8 73 e2 fe ff       	call   f0100d70 <execute_command>
f0112afd:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112b00:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b06:	bb ed 9d 13 f0       	mov    $0xf0139ded,%ebx
f0112b0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b10:	89 c7                	mov    %eax,%edi
f0112b12:	89 de                	mov    %ebx,%esi
f0112b14:	89 d1                	mov    %edx,%ecx
f0112b16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b18:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112b1e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b23:	b0 00                	mov    $0x0,%al
f0112b25:	89 d7                	mov    %edx,%edi
f0112b27:	f3 aa                	rep stos %al,%es:(%edi)
f0112b29:	83 ec 0c             	sub    $0xc,%esp
f0112b2c:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112b32:	50                   	push   %eax
f0112b33:	e8 38 e2 fe ff       	call   f0100d70 <execute_command>
f0112b38:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112b3b:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112b41:	bb 51 9e 13 f0       	mov    $0xf0139e51,%ebx
f0112b46:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b4b:	89 c7                	mov    %eax,%edi
f0112b4d:	89 de                	mov    %ebx,%esi
f0112b4f:	89 d1                	mov    %edx,%ecx
f0112b51:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b53:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112b59:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b5e:	b0 00                	mov    $0x0,%al
f0112b60:	89 d7                	mov    %edx,%edi
f0112b62:	f3 aa                	rep stos %al,%es:(%edi)
f0112b64:	83 ec 0c             	sub    $0xc,%esp
f0112b67:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112b6d:	50                   	push   %eax
f0112b6e:	e8 fd e1 fe ff       	call   f0100d70 <execute_command>
f0112b73:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112b76:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112b7c:	bb b5 9e 13 f0       	mov    $0xf0139eb5,%ebx
f0112b81:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b86:	89 c7                	mov    %eax,%edi
f0112b88:	89 de                	mov    %ebx,%esi
f0112b8a:	89 d1                	mov    %edx,%ecx
f0112b8c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b8e:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112b94:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b99:	b0 00                	mov    $0x0,%al
f0112b9b:	89 d7                	mov    %edx,%edi
f0112b9d:	f3 aa                	rep stos %al,%es:(%edi)
f0112b9f:	83 ec 0c             	sub    $0xc,%esp
f0112ba2:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112ba8:	50                   	push   %eax
f0112ba9:	e8 c2 e1 fe ff       	call   f0100d70 <execute_command>
f0112bae:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112bb1:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112bb7:	bb 19 9f 13 f0       	mov    $0xf0139f19,%ebx
f0112bbc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bc1:	89 c7                	mov    %eax,%edi
f0112bc3:	89 de                	mov    %ebx,%esi
f0112bc5:	89 d1                	mov    %edx,%ecx
f0112bc7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bc9:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112bcf:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bd4:	b0 00                	mov    $0x0,%al
f0112bd6:	89 d7                	mov    %edx,%edi
f0112bd8:	f3 aa                	rep stos %al,%es:(%edi)
f0112bda:	83 ec 0c             	sub    $0xc,%esp
f0112bdd:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112be3:	50                   	push   %eax
f0112be4:	e8 87 e1 fe ff       	call   f0100d70 <execute_command>
f0112be9:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112bec:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112bf2:	bb 7d 9f 13 f0       	mov    $0xf0139f7d,%ebx
f0112bf7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bfc:	89 c7                	mov    %eax,%edi
f0112bfe:	89 de                	mov    %ebx,%esi
f0112c00:	89 d1                	mov    %edx,%ecx
f0112c02:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c04:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112c0a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c0f:	b0 00                	mov    $0x0,%al
f0112c11:	89 d7                	mov    %edx,%edi
f0112c13:	f3 aa                	rep stos %al,%es:(%edi)
f0112c15:	83 ec 0c             	sub    $0xc,%esp
f0112c18:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112c1e:	50                   	push   %eax
f0112c1f:	e8 4c e1 fe ff       	call   f0100d70 <execute_command>
f0112c24:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112c27:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112c2d:	bb e1 9f 13 f0       	mov    $0xf0139fe1,%ebx
f0112c32:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c37:	89 c7                	mov    %eax,%edi
f0112c39:	89 de                	mov    %ebx,%esi
f0112c3b:	89 d1                	mov    %edx,%ecx
f0112c3d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c3f:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112c45:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c4a:	b0 00                	mov    $0x0,%al
f0112c4c:	89 d7                	mov    %edx,%edi
f0112c4e:	f3 aa                	rep stos %al,%es:(%edi)
f0112c50:	83 ec 0c             	sub    $0xc,%esp
f0112c53:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112c59:	50                   	push   %eax
f0112c5a:	e8 11 e1 fe ff       	call   f0100d70 <execute_command>
f0112c5f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112c62:	83 ec 04             	sub    $0x4,%esp
f0112c65:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c6b:	50                   	push   %eax
f0112c6c:	68 ef 9a 13 f0       	push   $0xf0139aef
f0112c71:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112c77:	50                   	push   %eax
f0112c78:	e8 ce ef 01 00       	call   f0131c4b <strcconcat>
f0112c7d:	83 c4 10             	add    $0x10,%esp
f0112c80:	83 ec 0c             	sub    $0xc,%esp
f0112c83:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c89:	50                   	push   %eax
f0112c8a:	e8 e1 e0 fe ff       	call   f0100d70 <execute_command>
f0112c8f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112c92:	83 ec 04             	sub    $0x4,%esp
f0112c95:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112c9b:	50                   	push   %eax
f0112c9c:	68 f9 9a 13 f0       	push   $0xf0139af9
f0112ca1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ca7:	50                   	push   %eax
f0112ca8:	e8 9e ef 01 00       	call   f0131c4b <strcconcat>
f0112cad:	83 c4 10             	add    $0x10,%esp
f0112cb0:	83 ec 0c             	sub    $0xc,%esp
f0112cb3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112cb9:	50                   	push   %eax
f0112cba:	e8 b1 e0 fe ff       	call   f0100d70 <execute_command>
f0112cbf:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112cc2:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112cc8:	bb 45 a0 13 f0       	mov    $0xf013a045,%ebx
f0112ccd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cd2:	89 c7                	mov    %eax,%edi
f0112cd4:	89 de                	mov    %ebx,%esi
f0112cd6:	89 d1                	mov    %edx,%ecx
f0112cd8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cda:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112ce0:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ce5:	b0 00                	mov    $0x0,%al
f0112ce7:	89 d7                	mov    %edx,%edi
f0112ce9:	f3 aa                	rep stos %al,%es:(%edi)
f0112ceb:	83 ec 0c             	sub    $0xc,%esp
f0112cee:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112cf4:	50                   	push   %eax
f0112cf5:	e8 76 e0 fe ff       	call   f0100d70 <execute_command>
f0112cfa:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112cfd:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d03:	bb a9 a0 13 f0       	mov    $0xf013a0a9,%ebx
f0112d08:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d0d:	89 c7                	mov    %eax,%edi
f0112d0f:	89 de                	mov    %ebx,%esi
f0112d11:	89 d1                	mov    %edx,%ecx
f0112d13:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d15:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112d1b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d20:	b0 00                	mov    $0x0,%al
f0112d22:	89 d7                	mov    %edx,%edi
f0112d24:	f3 aa                	rep stos %al,%es:(%edi)
f0112d26:	83 ec 0c             	sub    $0xc,%esp
f0112d29:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112d2f:	50                   	push   %eax
f0112d30:	e8 3b e0 fe ff       	call   f0100d70 <execute_command>
f0112d35:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112d38:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112d3e:	bb 0d a1 13 f0       	mov    $0xf013a10d,%ebx
f0112d43:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d48:	89 c7                	mov    %eax,%edi
f0112d4a:	89 de                	mov    %ebx,%esi
f0112d4c:	89 d1                	mov    %edx,%ecx
f0112d4e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d50:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112d56:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d5b:	b0 00                	mov    $0x0,%al
f0112d5d:	89 d7                	mov    %edx,%edi
f0112d5f:	f3 aa                	rep stos %al,%es:(%edi)
f0112d61:	83 ec 0c             	sub    $0xc,%esp
f0112d64:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112d6a:	50                   	push   %eax
f0112d6b:	e8 00 e0 fe ff       	call   f0100d70 <execute_command>
f0112d70:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112d73:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112d7a:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112d81:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112d88:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112d8f:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112d96:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112d9d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112da4:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112dab:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112db2:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112db9:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112dc0:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112dc7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112dca:	8a 00                	mov    (%eax),%al
f0112dcc:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112dd2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dd5:	8a 00                	mov    (%eax),%al
f0112dd7:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112ddd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112de0:	8a 00                	mov    (%eax),%al
f0112de2:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112de8:	e8 c4 a1 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0112ded:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112df0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112df3:	89 d0                	mov    %edx,%eax
f0112df5:	01 c0                	add    %eax,%eax
f0112df7:	01 d0                	add    %edx,%eax
f0112df9:	01 c0                	add    %eax,%eax
f0112dfb:	50                   	push   %eax
f0112dfc:	68 00 00 10 00       	push   $0x100000
f0112e01:	6a 00                	push   $0x0
f0112e03:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e06:	e8 ca 5d ff ff       	call   f0108bd5 <copy_paste_chunk>
f0112e0b:	83 c4 10             	add    $0x10,%esp
f0112e0e:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e11:	e8 9b a1 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0112e16:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112e19:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112e20:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112e24:	75 08                	jne    f0112e2e <test_copy_paste_chunk+0x4a2>
f0112e26:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e29:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112e2c:	74 2b                	je     f0112e59 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112e2e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e31:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e34:	83 ec 0c             	sub    $0xc,%esp
f0112e37:	50                   	push   %eax
f0112e38:	ff 75 88             	pushl  -0x78(%ebp)
f0112e3b:	68 08 9b 13 f0       	push   $0xf0139b08
f0112e40:	68 93 02 00 00       	push   $0x293
f0112e45:	68 de 8f 13 f0       	push   $0xf0138fde
f0112e4a:	e8 c4 d5 fe ff       	call   f0100413 <_warn>
f0112e4f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e52:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112e59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e5d:	74 04                	je     f0112e63 <test_copy_paste_chunk+0x4d7>
f0112e5f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112e63:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112e6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112e6d:	8a 00                	mov    (%eax),%al
f0112e6f:	3c 61                	cmp    $0x61,%al
f0112e71:	75 75                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112e73:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112e76:	8a 00                	mov    (%eax),%al
f0112e78:	3c 78                	cmp    $0x78,%al
f0112e7a:	75 6c                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112e7c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112e7f:	8a 00                	mov    (%eax),%al
f0112e81:	3c 62                	cmp    $0x62,%al
f0112e83:	75 63                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112e85:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112e88:	8a 00                	mov    (%eax),%al
f0112e8a:	3c 79                	cmp    $0x79,%al
f0112e8c:	75 5a                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112e8e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112e91:	8a 00                	mov    (%eax),%al
f0112e93:	3c 63                	cmp    $0x63,%al
f0112e95:	75 51                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112e97:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112e9a:	8a 00                	mov    (%eax),%al
f0112e9c:	3c 7a                	cmp    $0x7a,%al
f0112e9e:	75 48                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112ea0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112ea3:	8a 00                	mov    (%eax),%al
f0112ea5:	3c 64                	cmp    $0x64,%al
f0112ea7:	75 3f                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112ea9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112eac:	8a 10                	mov    (%eax),%dl
f0112eae:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112eb4:	38 c2                	cmp    %al,%dl
f0112eb6:	75 30                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112eb8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ebb:	8a 00                	mov    (%eax),%al
f0112ebd:	3c 65                	cmp    $0x65,%al
f0112ebf:	75 27                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112ec1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ec4:	8a 10                	mov    (%eax),%dl
f0112ec6:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112ecc:	38 c2                	cmp    %al,%dl
f0112ece:	75 18                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112ed0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112ed3:	8a 00                	mov    (%eax),%al
f0112ed5:	3c 66                	cmp    $0x66,%al
f0112ed7:	75 0f                	jne    f0112ee8 <test_copy_paste_chunk+0x55c>
f0112ed9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112edc:	8a 10                	mov    (%eax),%dl
f0112ede:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112ee4:	38 c2                	cmp    %al,%dl
f0112ee6:	74 21                	je     f0112f09 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112ee8:	83 ec 04             	sub    $0x4,%esp
f0112eeb:	68 6c 9b 13 f0       	push   $0xf0139b6c
f0112ef0:	68 9c 02 00 00       	push   $0x29c
f0112ef5:	68 de 8f 13 f0       	push   $0xf0138fde
f0112efa:	e8 14 d5 fe ff       	call   f0100413 <_warn>
f0112eff:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f02:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112f09:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f0d:	74 04                	je     f0112f13 <test_copy_paste_chunk+0x587>
f0112f0f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f13:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112f1a:	83 ec 0c             	sub    $0xc,%esp
f0112f1d:	68 a6 9b 13 f0       	push   $0xf0139ba6
f0112f22:	e8 e7 dd fe ff       	call   f0100d0e <cprintf>
f0112f27:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112f2a:	83 ec 0c             	sub    $0xc,%esp
f0112f2d:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0112f32:	e8 d7 dd fe ff       	call   f0100d0e <cprintf>
f0112f37:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112f3a:	83 ec 04             	sub    $0x4,%esp
f0112f3d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f43:	50                   	push   %eax
f0112f44:	68 ee 9b 13 f0       	push   $0xf0139bee
f0112f49:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f4f:	50                   	push   %eax
f0112f50:	e8 f6 ec 01 00       	call   f0131c4b <strcconcat>
f0112f55:	83 c4 10             	add    $0x10,%esp
f0112f58:	83 ec 0c             	sub    $0xc,%esp
f0112f5b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f61:	50                   	push   %eax
f0112f62:	e8 09 de fe ff       	call   f0100d70 <execute_command>
f0112f67:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112f6a:	83 ec 04             	sub    $0x4,%esp
f0112f6d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f73:	50                   	push   %eax
f0112f74:	68 f8 9b 13 f0       	push   $0xf0139bf8
f0112f79:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f7f:	50                   	push   %eax
f0112f80:	e8 c6 ec 01 00       	call   f0131c4b <strcconcat>
f0112f85:	83 c4 10             	add    $0x10,%esp
f0112f88:	83 ec 0c             	sub    $0xc,%esp
f0112f8b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f91:	50                   	push   %eax
f0112f92:	e8 d9 dd fe ff       	call   f0100d70 <execute_command>
f0112f97:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112f9a:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112fa0:	bb 71 a1 13 f0       	mov    $0xf013a171,%ebx
f0112fa5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112faa:	89 c7                	mov    %eax,%edi
f0112fac:	89 de                	mov    %ebx,%esi
f0112fae:	89 d1                	mov    %edx,%ecx
f0112fb0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fb2:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112fb8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fbd:	b0 00                	mov    $0x0,%al
f0112fbf:	89 d7                	mov    %edx,%edi
f0112fc1:	f3 aa                	rep stos %al,%es:(%edi)
f0112fc3:	83 ec 0c             	sub    $0xc,%esp
f0112fc6:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112fcc:	50                   	push   %eax
f0112fcd:	e8 9e dd fe ff       	call   f0100d70 <execute_command>
f0112fd2:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112fd5:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112fdb:	bb d5 a1 13 f0       	mov    $0xf013a1d5,%ebx
f0112fe0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fe5:	89 c7                	mov    %eax,%edi
f0112fe7:	89 de                	mov    %ebx,%esi
f0112fe9:	89 d1                	mov    %edx,%ecx
f0112feb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fed:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112ff3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ff8:	b0 00                	mov    $0x0,%al
f0112ffa:	89 d7                	mov    %edx,%edi
f0112ffc:	f3 aa                	rep stos %al,%es:(%edi)
f0112ffe:	83 ec 0c             	sub    $0xc,%esp
f0113001:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113007:	50                   	push   %eax
f0113008:	e8 63 dd fe ff       	call   f0100d70 <execute_command>
f011300d:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113010:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113016:	bb 39 a2 13 f0       	mov    $0xf013a239,%ebx
f011301b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113020:	89 c7                	mov    %eax,%edi
f0113022:	89 de                	mov    %ebx,%esi
f0113024:	89 d1                	mov    %edx,%ecx
f0113026:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113028:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011302e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113033:	b0 00                	mov    $0x0,%al
f0113035:	89 d7                	mov    %edx,%edi
f0113037:	f3 aa                	rep stos %al,%es:(%edi)
f0113039:	83 ec 0c             	sub    $0xc,%esp
f011303c:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113042:	50                   	push   %eax
f0113043:	e8 28 dd fe ff       	call   f0100d70 <execute_command>
f0113048:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011304b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113051:	bb 9d a2 13 f0       	mov    $0xf013a29d,%ebx
f0113056:	ba 0f 00 00 00       	mov    $0xf,%edx
f011305b:	89 c7                	mov    %eax,%edi
f011305d:	89 de                	mov    %ebx,%esi
f011305f:	89 d1                	mov    %edx,%ecx
f0113061:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113063:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113069:	b9 55 00 00 00       	mov    $0x55,%ecx
f011306e:	b0 00                	mov    $0x0,%al
f0113070:	89 d7                	mov    %edx,%edi
f0113072:	f3 aa                	rep stos %al,%es:(%edi)
f0113074:	83 ec 0c             	sub    $0xc,%esp
f0113077:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011307d:	50                   	push   %eax
f011307e:	e8 ed dc fe ff       	call   f0100d70 <execute_command>
f0113083:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113086:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011308c:	bb 01 a3 13 f0       	mov    $0xf013a301,%ebx
f0113091:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113096:	89 c7                	mov    %eax,%edi
f0113098:	89 de                	mov    %ebx,%esi
f011309a:	89 d1                	mov    %edx,%ecx
f011309c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011309e:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01130a4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130a9:	b0 00                	mov    $0x0,%al
f01130ab:	89 d7                	mov    %edx,%edi
f01130ad:	f3 aa                	rep stos %al,%es:(%edi)
f01130af:	83 ec 0c             	sub    $0xc,%esp
f01130b2:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01130b8:	50                   	push   %eax
f01130b9:	e8 b2 dc fe ff       	call   f0100d70 <execute_command>
f01130be:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01130c1:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01130c7:	bb 65 a3 13 f0       	mov    $0xf013a365,%ebx
f01130cc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130d1:	89 c7                	mov    %eax,%edi
f01130d3:	89 de                	mov    %ebx,%esi
f01130d5:	89 d1                	mov    %edx,%ecx
f01130d7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130d9:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01130df:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130e4:	b0 00                	mov    $0x0,%al
f01130e6:	89 d7                	mov    %edx,%edi
f01130e8:	f3 aa                	rep stos %al,%es:(%edi)
f01130ea:	83 ec 0c             	sub    $0xc,%esp
f01130ed:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01130f3:	50                   	push   %eax
f01130f4:	e8 77 dc fe ff       	call   f0100d70 <execute_command>
f01130f9:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01130fc:	83 ec 04             	sub    $0x4,%esp
f01130ff:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113105:	50                   	push   %eax
f0113106:	68 02 9c 13 f0       	push   $0xf0139c02
f011310b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113111:	50                   	push   %eax
f0113112:	e8 34 eb 01 00       	call   f0131c4b <strcconcat>
f0113117:	83 c4 10             	add    $0x10,%esp
f011311a:	83 ec 0c             	sub    $0xc,%esp
f011311d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113123:	50                   	push   %eax
f0113124:	e8 47 dc fe ff       	call   f0100d70 <execute_command>
f0113129:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011312c:	83 ec 04             	sub    $0x4,%esp
f011312f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113135:	50                   	push   %eax
f0113136:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011313b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113141:	50                   	push   %eax
f0113142:	e8 04 eb 01 00       	call   f0131c4b <strcconcat>
f0113147:	83 c4 10             	add    $0x10,%esp
f011314a:	83 ec 0c             	sub    $0xc,%esp
f011314d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113153:	50                   	push   %eax
f0113154:	e8 17 dc fe ff       	call   f0100d70 <execute_command>
f0113159:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011315c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113162:	bb c9 a3 13 f0       	mov    $0xf013a3c9,%ebx
f0113167:	ba 0f 00 00 00       	mov    $0xf,%edx
f011316c:	89 c7                	mov    %eax,%edi
f011316e:	89 de                	mov    %ebx,%esi
f0113170:	89 d1                	mov    %edx,%ecx
f0113172:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113174:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011317a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011317f:	b0 00                	mov    $0x0,%al
f0113181:	89 d7                	mov    %edx,%edi
f0113183:	f3 aa                	rep stos %al,%es:(%edi)
f0113185:	83 ec 0c             	sub    $0xc,%esp
f0113188:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011318e:	50                   	push   %eax
f011318f:	e8 dc db fe ff       	call   f0100d70 <execute_command>
f0113194:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113197:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011319d:	bb 2d a4 13 f0       	mov    $0xf013a42d,%ebx
f01131a2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131a7:	89 c7                	mov    %eax,%edi
f01131a9:	89 de                	mov    %ebx,%esi
f01131ab:	89 d1                	mov    %edx,%ecx
f01131ad:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131af:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01131b5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131ba:	b0 00                	mov    $0x0,%al
f01131bc:	89 d7                	mov    %edx,%edi
f01131be:	f3 aa                	rep stos %al,%es:(%edi)
f01131c0:	83 ec 0c             	sub    $0xc,%esp
f01131c3:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01131c9:	50                   	push   %eax
f01131ca:	e8 a1 db fe ff       	call   f0100d70 <execute_command>
f01131cf:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01131d2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01131d8:	bb 91 a4 13 f0       	mov    $0xf013a491,%ebx
f01131dd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01131e2:	89 c7                	mov    %eax,%edi
f01131e4:	89 de                	mov    %ebx,%esi
f01131e6:	89 d1                	mov    %edx,%ecx
f01131e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01131ea:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01131f0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131f5:	b0 00                	mov    $0x0,%al
f01131f7:	89 d7                	mov    %edx,%edi
f01131f9:	f3 aa                	rep stos %al,%es:(%edi)
f01131fb:	83 ec 0c             	sub    $0xc,%esp
f01131fe:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113204:	50                   	push   %eax
f0113205:	e8 66 db fe ff       	call   f0100d70 <execute_command>
f011320a:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011320d:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113214:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011321b:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113222:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113229:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113230:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113237:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011323e:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113245:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011324c:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113253:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011325a:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113261:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113264:	8a 00                	mov    (%eax),%al
f0113266:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011326c:	e8 40 9d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113271:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113274:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113277:	89 d0                	mov    %edx,%eax
f0113279:	01 c0                	add    %eax,%eax
f011327b:	01 d0                	add    %edx,%eax
f011327d:	01 c0                	add    %eax,%eax
f011327f:	50                   	push   %eax
f0113280:	68 00 00 40 00       	push   $0x400000
f0113285:	68 00 00 20 00       	push   $0x200000
f011328a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011328d:	e8 43 59 ff ff       	call   f0108bd5 <copy_paste_chunk>
f0113292:	83 c4 10             	add    $0x10,%esp
f0113295:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113298:	e8 14 9d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011329d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01132a0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01132a7:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01132ab:	75 08                	jne    f01132b5 <test_copy_paste_chunk+0x929>
f01132ad:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01132b0:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01132b3:	74 2b                	je     f01132e0 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01132b5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01132b8:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01132bb:	83 ec 0c             	sub    $0xc,%esp
f01132be:	50                   	push   %eax
f01132bf:	ff 75 80             	pushl  -0x80(%ebp)
f01132c2:	68 18 9c 13 f0       	push   $0xf0139c18
f01132c7:	68 cc 02 00 00       	push   $0x2cc
f01132cc:	68 de 8f 13 f0       	push   $0xf0138fde
f01132d1:	e8 3d d1 fe ff       	call   f0100413 <_warn>
f01132d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132d9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01132e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132e4:	74 04                	je     f01132ea <test_copy_paste_chunk+0x95e>
f01132e6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01132ea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01132f1:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01132f8:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01132fb:	83 ec 08             	sub    $0x8,%esp
f01132fe:	6a 01                	push   $0x1
f0113300:	6a 07                	push   $0x7
f0113302:	6a 07                	push   $0x7
f0113304:	6a 07                	push   $0x7
f0113306:	6a 07                	push   $0x7
f0113308:	6a 01                	push   $0x1
f011330a:	68 00 20 00 00       	push   $0x2000
f011330f:	68 00 00 40 00       	push   $0x400000
f0113314:	68 00 00 20 00       	push   $0x200000
f0113319:	ff 75 d4             	pushl  -0x2c(%ebp)
f011331c:	e8 67 32 00 00       	call   f0116588 <CCP>
f0113321:	83 c4 30             	add    $0x30,%esp
f0113324:	83 f8 01             	cmp    $0x1,%eax
f0113327:	74 2b                	je     f0113354 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113329:	83 ec 04             	sub    $0x4,%esp
f011332c:	68 6c 9c 13 f0       	push   $0xf0139c6c
f0113331:	68 d5 02 00 00       	push   $0x2d5
f0113336:	68 de 8f 13 f0       	push   $0xf0138fde
f011333b:	e8 d3 d0 fe ff       	call   f0100413 <_warn>
f0113340:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113343:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011334a:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113351:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113354:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113358:	74 04                	je     f011335e <test_copy_paste_chunk+0x9d2>
f011335a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011335e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113365:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113368:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011336b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011336e:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113371:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113374:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113377:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011337a:	8a 00                	mov    (%eax),%al
f011337c:	3c 61                	cmp    $0x61,%al
f011337e:	75 69                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f0113380:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113383:	8a 00                	mov    (%eax),%al
f0113385:	3c 61                	cmp    $0x61,%al
f0113387:	75 60                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f0113389:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011338c:	8a 00                	mov    (%eax),%al
f011338e:	3c 79                	cmp    $0x79,%al
f0113390:	75 57                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f0113392:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113395:	8a 00                	mov    (%eax),%al
f0113397:	3c 62                	cmp    $0x62,%al
f0113399:	75 4e                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f011339b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011339e:	8a 00                	mov    (%eax),%al
f01133a0:	3c 63                	cmp    $0x63,%al
f01133a2:	75 45                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f01133a4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01133a7:	8a 00                	mov    (%eax),%al
f01133a9:	3c 7a                	cmp    $0x7a,%al
f01133ab:	75 3c                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01133ad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01133b0:	8a 00                	mov    (%eax),%al
f01133b2:	3c 77                	cmp    $0x77,%al
f01133b4:	75 33                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f01133b6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01133b9:	8a 00                	mov    (%eax),%al
f01133bb:	3c 64                	cmp    $0x64,%al
f01133bd:	75 2a                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f01133bf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01133c2:	8a 00                	mov    (%eax),%al
f01133c4:	3c 65                	cmp    $0x65,%al
f01133c6:	75 21                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f01133c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01133cb:	8a 00                	mov    (%eax),%al
f01133cd:	3c 65                	cmp    $0x65,%al
f01133cf:	75 18                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f01133d1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01133d4:	8a 00                	mov    (%eax),%al
f01133d6:	3c 66                	cmp    $0x66,%al
f01133d8:	75 0f                	jne    f01133e9 <test_copy_paste_chunk+0xa5d>
f01133da:	8b 45 90             	mov    -0x70(%ebp),%eax
f01133dd:	8a 10                	mov    (%eax),%dl
f01133df:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01133e5:	38 c2                	cmp    %al,%dl
f01133e7:	74 21                	je     f011340a <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01133e9:	83 ec 04             	sub    $0x4,%esp
f01133ec:	68 6c 9b 13 f0       	push   $0xf0139b6c
f01133f1:	68 e3 02 00 00       	push   $0x2e3
f01133f6:	68 de 8f 13 f0       	push   $0xf0138fde
f01133fb:	e8 13 d0 fe ff       	call   f0100413 <_warn>
f0113400:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113403:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011340a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011340e:	74 04                	je     f0113414 <test_copy_paste_chunk+0xa88>
f0113410:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113414:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011341b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011341e:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113421:	e8 8b 9b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113426:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113429:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011342c:	89 c2                	mov    %eax,%edx
f011342e:	01 d2                	add    %edx,%edx
f0113430:	01 d0                	add    %edx,%eax
f0113432:	50                   	push   %eax
f0113433:	68 00 08 20 00       	push   $0x200800
f0113438:	68 00 08 40 00       	push   $0x400800
f011343d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113440:	e8 90 57 ff ff       	call   f0108bd5 <copy_paste_chunk>
f0113445:	83 c4 10             	add    $0x10,%esp
f0113448:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011344b:	e8 61 9b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113450:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113453:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113457:	75 08                	jne    f0113461 <test_copy_paste_chunk+0xad5>
f0113459:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011345c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011345f:	74 2b                	je     f011348c <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113461:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113464:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113467:	83 ec 0c             	sub    $0xc,%esp
f011346a:	50                   	push   %eax
f011346b:	ff 75 80             	pushl  -0x80(%ebp)
f011346e:	68 18 9c 13 f0       	push   $0xf0139c18
f0113473:	68 f3 02 00 00       	push   $0x2f3
f0113478:	68 de 8f 13 f0       	push   $0xf0138fde
f011347d:	e8 91 cf fe ff       	call   f0100413 <_warn>
f0113482:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113485:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011348c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113490:	74 04                	je     f0113496 <test_copy_paste_chunk+0xb0a>
f0113492:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113496:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011349d:	83 ec 08             	sub    $0x8,%esp
f01134a0:	6a 01                	push   $0x1
f01134a2:	6a 07                	push   $0x7
f01134a4:	6a 07                	push   $0x7
f01134a6:	6a 07                	push   $0x7
f01134a8:	6a 07                	push   $0x7
f01134aa:	6a 01                	push   $0x1
f01134ac:	68 00 20 00 00       	push   $0x2000
f01134b1:	68 00 00 20 00       	push   $0x200000
f01134b6:	68 00 00 40 00       	push   $0x400000
f01134bb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134be:	e8 c5 30 00 00       	call   f0116588 <CCP>
f01134c3:	83 c4 30             	add    $0x30,%esp
f01134c6:	83 f8 01             	cmp    $0x1,%eax
f01134c9:	74 21                	je     f01134ec <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01134cb:	83 ec 04             	sub    $0x4,%esp
f01134ce:	68 b8 9c 13 f0       	push   $0xf0139cb8
f01134d3:	68 fb 02 00 00       	push   $0x2fb
f01134d8:	68 de 8f 13 f0       	push   $0xf0138fde
f01134dd:	e8 31 cf fe ff       	call   f0100413 <_warn>
f01134e2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134e5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01134ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01134f0:	74 04                	je     f01134f6 <test_copy_paste_chunk+0xb6a>
f01134f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01134f6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01134fd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113500:	8a 00                	mov    (%eax),%al
f0113502:	3c 61                	cmp    $0x61,%al
f0113504:	75 69                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f0113506:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113509:	8a 00                	mov    (%eax),%al
f011350b:	3c 61                	cmp    $0x61,%al
f011350d:	75 60                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f011350f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113512:	8a 00                	mov    (%eax),%al
f0113514:	3c 79                	cmp    $0x79,%al
f0113516:	75 57                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f0113518:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011351b:	8a 00                	mov    (%eax),%al
f011351d:	3c 62                	cmp    $0x62,%al
f011351f:	75 4e                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f0113521:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113524:	8a 00                	mov    (%eax),%al
f0113526:	3c 7a                	cmp    $0x7a,%al
f0113528:	75 45                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f011352a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011352d:	8a 00                	mov    (%eax),%al
f011352f:	3c 7a                	cmp    $0x7a,%al
f0113531:	75 3c                	jne    f011356f <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113533:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113536:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113538:	3c 64                	cmp    $0x64,%al
f011353a:	75 33                	jne    f011356f <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011353c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011353f:	8a 00                	mov    (%eax),%al
f0113541:	3c 64                	cmp    $0x64,%al
f0113543:	75 2a                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f0113545:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113548:	8a 00                	mov    (%eax),%al
f011354a:	3c 65                	cmp    $0x65,%al
f011354c:	75 21                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f011354e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113551:	8a 00                	mov    (%eax),%al
f0113553:	3c 78                	cmp    $0x78,%al
f0113555:	75 18                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f0113557:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011355a:	8a 00                	mov    (%eax),%al
f011355c:	3c 66                	cmp    $0x66,%al
f011355e:	75 0f                	jne    f011356f <test_copy_paste_chunk+0xbe3>
f0113560:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113563:	8a 10                	mov    (%eax),%dl
f0113565:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011356b:	38 c2                	cmp    %al,%dl
f011356d:	74 21                	je     f0113590 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011356f:	83 ec 04             	sub    $0x4,%esp
f0113572:	68 6c 9b 13 f0       	push   $0xf0139b6c
f0113577:	68 04 03 00 00       	push   $0x304
f011357c:	68 de 8f 13 f0       	push   $0xf0138fde
f0113581:	e8 8d ce fe ff       	call   f0100413 <_warn>
f0113586:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113589:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113590:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113594:	74 04                	je     f011359a <test_copy_paste_chunk+0xc0e>
f0113596:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011359a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01135a1:	83 ec 0c             	sub    $0xc,%esp
f01135a4:	68 03 9d 13 f0       	push   $0xf0139d03
f01135a9:	e8 60 d7 fe ff       	call   f0100d0e <cprintf>
f01135ae:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01135b1:	83 ec 0c             	sub    $0xc,%esp
f01135b4:	68 14 9d 13 f0       	push   $0xf0139d14
f01135b9:	e8 50 d7 fe ff       	call   f0100d0e <cprintf>
f01135be:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01135c1:	83 ec 04             	sub    $0x4,%esp
f01135c4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01135ca:	50                   	push   %eax
f01135cb:	68 48 9d 13 f0       	push   $0xf0139d48
f01135d0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01135d6:	50                   	push   %eax
f01135d7:	e8 6f e6 01 00       	call   f0131c4b <strcconcat>
f01135dc:	83 c4 10             	add    $0x10,%esp
f01135df:	83 ec 0c             	sub    $0xc,%esp
f01135e2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01135e8:	50                   	push   %eax
f01135e9:	e8 82 d7 fe ff       	call   f0100d70 <execute_command>
f01135ee:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01135f1:	83 ec 04             	sub    $0x4,%esp
f01135f4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01135fa:	50                   	push   %eax
f01135fb:	68 52 9d 13 f0       	push   $0xf0139d52
f0113600:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113606:	50                   	push   %eax
f0113607:	e8 3f e6 01 00       	call   f0131c4b <strcconcat>
f011360c:	83 c4 10             	add    $0x10,%esp
f011360f:	83 ec 0c             	sub    $0xc,%esp
f0113612:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113618:	50                   	push   %eax
f0113619:	e8 52 d7 fe ff       	call   f0100d70 <execute_command>
f011361e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113621:	83 ec 04             	sub    $0x4,%esp
f0113624:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011362a:	50                   	push   %eax
f011362b:	68 5c 9d 13 f0       	push   $0xf0139d5c
f0113630:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113636:	50                   	push   %eax
f0113637:	e8 0f e6 01 00       	call   f0131c4b <strcconcat>
f011363c:	83 c4 10             	add    $0x10,%esp
f011363f:	83 ec 0c             	sub    $0xc,%esp
f0113642:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113648:	50                   	push   %eax
f0113649:	e8 22 d7 fe ff       	call   f0100d70 <execute_command>
f011364e:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113651:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113657:	bb f5 a4 13 f0       	mov    $0xf013a4f5,%ebx
f011365c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113661:	89 c7                	mov    %eax,%edi
f0113663:	89 de                	mov    %ebx,%esi
f0113665:	89 d1                	mov    %edx,%ecx
f0113667:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113669:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011366f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113674:	b0 00                	mov    $0x0,%al
f0113676:	89 d7                	mov    %edx,%edi
f0113678:	f3 aa                	rep stos %al,%es:(%edi)
f011367a:	83 ec 0c             	sub    $0xc,%esp
f011367d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113683:	50                   	push   %eax
f0113684:	e8 e7 d6 fe ff       	call   f0100d70 <execute_command>
f0113689:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011368c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113692:	bb 59 a5 13 f0       	mov    $0xf013a559,%ebx
f0113697:	ba 0f 00 00 00       	mov    $0xf,%edx
f011369c:	89 c7                	mov    %eax,%edi
f011369e:	89 de                	mov    %ebx,%esi
f01136a0:	89 d1                	mov    %edx,%ecx
f01136a2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136a4:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01136aa:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136af:	b0 00                	mov    $0x0,%al
f01136b1:	89 d7                	mov    %edx,%edi
f01136b3:	f3 aa                	rep stos %al,%es:(%edi)
f01136b5:	83 ec 0c             	sub    $0xc,%esp
f01136b8:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01136be:	50                   	push   %eax
f01136bf:	e8 ac d6 fe ff       	call   f0100d70 <execute_command>
f01136c4:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01136c7:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01136cd:	bb bd a5 13 f0       	mov    $0xf013a5bd,%ebx
f01136d2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136d7:	89 c7                	mov    %eax,%edi
f01136d9:	89 de                	mov    %ebx,%esi
f01136db:	89 d1                	mov    %edx,%ecx
f01136dd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136df:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01136e5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136ea:	b0 00                	mov    $0x0,%al
f01136ec:	89 d7                	mov    %edx,%edi
f01136ee:	f3 aa                	rep stos %al,%es:(%edi)
f01136f0:	83 ec 0c             	sub    $0xc,%esp
f01136f3:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01136f9:	50                   	push   %eax
f01136fa:	e8 71 d6 fe ff       	call   f0100d70 <execute_command>
f01136ff:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113702:	e8 aa 98 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113707:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011370a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011370d:	89 d0                	mov    %edx,%eax
f011370f:	01 c0                	add    %eax,%eax
f0113711:	01 d0                	add    %edx,%eax
f0113713:	c1 e0 02             	shl    $0x2,%eax
f0113716:	50                   	push   %eax
f0113717:	68 00 00 90 00       	push   $0x900000
f011371c:	68 00 00 80 00       	push   $0x800000
f0113721:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113724:	e8 ac 54 ff ff       	call   f0108bd5 <copy_paste_chunk>
f0113729:	83 c4 10             	add    $0x10,%esp
f011372c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113732:	e8 7a 98 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113737:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011373a:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113741:	75 0b                	jne    f011374e <test_copy_paste_chunk+0xdc2>
f0113743:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113746:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113749:	83 f8 03             	cmp    $0x3,%eax
f011374c:	74 2e                	je     f011377c <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011374e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113751:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113754:	83 ec 0c             	sub    $0xc,%esp
f0113757:	50                   	push   %eax
f0113758:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011375e:	68 18 9c 13 f0       	push   $0xf0139c18
f0113763:	68 22 03 00 00       	push   $0x322
f0113768:	68 de 8f 13 f0       	push   $0xf0138fde
f011376d:	e8 a1 cc fe ff       	call   f0100413 <_warn>
f0113772:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113775:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011377c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113780:	74 04                	je     f0113786 <test_copy_paste_chunk+0xdfa>
f0113782:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113786:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011378d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113794:	83 ec 08             	sub    $0x8,%esp
f0113797:	6a 01                	push   $0x1
f0113799:	6a 07                	push   $0x7
f011379b:	6a 07                	push   $0x7
f011379d:	6a 07                	push   $0x7
f011379f:	6a 07                	push   $0x7
f01137a1:	6a 01                	push   $0x1
f01137a3:	68 00 30 00 00       	push   $0x3000
f01137a8:	68 00 00 90 00       	push   $0x900000
f01137ad:	68 00 00 80 00       	push   $0x800000
f01137b2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137b5:	e8 ce 2d 00 00       	call   f0116588 <CCP>
f01137ba:	83 c4 30             	add    $0x30,%esp
f01137bd:	83 f8 01             	cmp    $0x1,%eax
f01137c0:	74 28                	je     f01137ea <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01137c2:	83 ec 04             	sub    $0x4,%esp
f01137c5:	68 b8 9c 13 f0       	push   $0xf0139cb8
f01137ca:	68 2b 03 00 00       	push   $0x32b
f01137cf:	68 de 8f 13 f0       	push   $0xf0138fde
f01137d4:	e8 3a cc fe ff       	call   f0100413 <_warn>
f01137d9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137dc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01137e3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01137ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137ee:	74 04                	je     f01137f4 <test_copy_paste_chunk+0xe68>
f01137f0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137f4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01137fb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01137ff:	0f 84 9e 00 00 00    	je     f01138a3 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113805:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011380c:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113813:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011381a:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113821:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113828:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011382f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113832:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113835:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113838:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f011383b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011383e:	8a 00                	mov    (%eax),%al
f0113840:	3c 61                	cmp    $0x61,%al
f0113842:	75 2d                	jne    f0113871 <test_copy_paste_chunk+0xee5>
f0113844:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113847:	8a 00                	mov    (%eax),%al
f0113849:	3c 61                	cmp    $0x61,%al
f011384b:	75 24                	jne    f0113871 <test_copy_paste_chunk+0xee5>
f011384d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113850:	8a 00                	mov    (%eax),%al
f0113852:	3c 79                	cmp    $0x79,%al
f0113854:	75 1b                	jne    f0113871 <test_copy_paste_chunk+0xee5>
f0113856:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113859:	8a 00                	mov    (%eax),%al
f011385b:	3c 62                	cmp    $0x62,%al
f011385d:	75 12                	jne    f0113871 <test_copy_paste_chunk+0xee5>
f011385f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113862:	8a 00                	mov    (%eax),%al
f0113864:	3c 63                	cmp    $0x63,%al
f0113866:	75 09                	jne    f0113871 <test_copy_paste_chunk+0xee5>
f0113868:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011386b:	8a 00                	mov    (%eax),%al
f011386d:	3c 7a                	cmp    $0x7a,%al
f011386f:	74 21                	je     f0113892 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113871:	83 ec 04             	sub    $0x4,%esp
f0113874:	68 6c 9b 13 f0       	push   $0xf0139b6c
f0113879:	68 3d 03 00 00       	push   $0x33d
f011387e:	68 de 8f 13 f0       	push   $0xf0138fde
f0113883:	e8 8b cb fe ff       	call   f0100413 <_warn>
f0113888:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011388b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113892:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113896:	74 04                	je     f011389c <test_copy_paste_chunk+0xf10>
f0113898:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011389c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01138a3:	e8 09 97 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01138a8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01138ab:	6a 00                	push   $0x0
f01138ad:	6a 02                	push   $0x2
f01138af:	68 00 10 90 00       	push   $0x901000
f01138b4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138b7:	e8 59 2b 00 00       	call   f0116415 <SB>
f01138bc:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f01138bf:	6a 00                	push   $0x0
f01138c1:	6a 02                	push   $0x2
f01138c3:	68 00 20 90 00       	push   $0x902000
f01138c8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138cb:	e8 45 2b 00 00       	call   f0116415 <SB>
f01138d0:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01138d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01138d6:	c1 e0 03             	shl    $0x3,%eax
f01138d9:	50                   	push   %eax
f01138da:	68 00 f0 bf 00       	push   $0xbff000
f01138df:	68 00 10 90 00       	push   $0x901000
f01138e4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138e7:	e8 e9 52 ff ff       	call   f0108bd5 <copy_paste_chunk>
f01138ec:	83 c4 10             	add    $0x10,%esp
f01138ef:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01138f5:	e8 b7 96 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01138fa:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01138fd:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113904:	75 0b                	jne    f0113911 <test_copy_paste_chunk+0xf85>
f0113906:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113909:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011390c:	83 f8 03             	cmp    $0x3,%eax
f011390f:	74 2e                	je     f011393f <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113911:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113914:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113917:	83 ec 0c             	sub    $0xc,%esp
f011391a:	50                   	push   %eax
f011391b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113921:	68 18 9c 13 f0       	push   $0xf0139c18
f0113926:	68 4d 03 00 00       	push   $0x34d
f011392b:	68 de 8f 13 f0       	push   $0xf0138fde
f0113930:	e8 de ca fe ff       	call   f0100413 <_warn>
f0113935:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113938:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011393f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113943:	74 04                	je     f0113949 <test_copy_paste_chunk+0xfbd>
f0113945:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113949:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113950:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113957:	83 ec 08             	sub    $0x8,%esp
f011395a:	6a 01                	push   $0x1
f011395c:	6a 07                	push   $0x7
f011395e:	6a 03                	push   $0x3
f0113960:	6a 07                	push   $0x7
f0113962:	6a 03                	push   $0x3
f0113964:	6a 01                	push   $0x1
f0113966:	68 00 20 00 00       	push   $0x2000
f011396b:	68 00 f0 bf 00       	push   $0xbff000
f0113970:	68 00 10 90 00       	push   $0x901000
f0113975:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113978:	e8 0b 2c 00 00       	call   f0116588 <CCP>
f011397d:	83 c4 30             	add    $0x30,%esp
f0113980:	83 f8 01             	cmp    $0x1,%eax
f0113983:	74 28                	je     f01139ad <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113985:	83 ec 04             	sub    $0x4,%esp
f0113988:	68 b8 9c 13 f0       	push   $0xf0139cb8
f011398d:	68 56 03 00 00       	push   $0x356
f0113992:	68 de 8f 13 f0       	push   $0xf0138fde
f0113997:	e8 77 ca fe ff       	call   f0100413 <_warn>
f011399c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011399f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01139a6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01139ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139b1:	74 04                	je     f01139b7 <test_copy_paste_chunk+0x102b>
f01139b3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01139b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01139be:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01139c2:	74 72                	je     f0113a36 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01139c4:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01139cb:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01139d2:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01139d9:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01139e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01139e3:	8a 00                	mov    (%eax),%al
f01139e5:	3c 62                	cmp    $0x62,%al
f01139e7:	75 1b                	jne    f0113a04 <test_copy_paste_chunk+0x1078>
f01139e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01139ec:	8a 00                	mov    (%eax),%al
f01139ee:	3c 62                	cmp    $0x62,%al
f01139f0:	75 12                	jne    f0113a04 <test_copy_paste_chunk+0x1078>
f01139f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01139f5:	8a 00                	mov    (%eax),%al
f01139f7:	3c 7a                	cmp    $0x7a,%al
f01139f9:	75 09                	jne    f0113a04 <test_copy_paste_chunk+0x1078>
f01139fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01139fe:	8a 00                	mov    (%eax),%al
f0113a00:	3c 7a                	cmp    $0x7a,%al
f0113a02:	74 21                	je     f0113a25 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113a04:	83 ec 04             	sub    $0x4,%esp
f0113a07:	68 6c 9b 13 f0       	push   $0xf0139b6c
f0113a0c:	68 62 03 00 00       	push   $0x362
f0113a11:	68 de 8f 13 f0       	push   $0xf0138fde
f0113a16:	e8 f8 c9 fe ff       	call   f0100413 <_warn>
f0113a1b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113a1e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113a25:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a29:	74 04                	je     f0113a2f <test_copy_paste_chunk+0x10a3>
f0113a2b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113a2f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113a36:	83 ec 0c             	sub    $0xc,%esp
f0113a39:	68 66 9d 13 f0       	push   $0xf0139d66
f0113a3e:	e8 cb d2 fe ff       	call   f0100d0e <cprintf>
f0113a43:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113a46:	83 ec 08             	sub    $0x8,%esp
f0113a49:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113a4c:	68 78 9d 13 f0       	push   $0xf0139d78
f0113a51:	e8 b8 d2 fe ff       	call   f0100d0e <cprintf>
f0113a56:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113a59:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113a5d:	75 10                	jne    f0113a6f <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113a5f:	83 ec 0c             	sub    $0xc,%esp
f0113a62:	68 ac 9d 13 f0       	push   $0xf0139dac
f0113a67:	e8 a2 d2 fe ff       	call   f0100d0e <cprintf>
f0113a6c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113a6f:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0113a74:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113a77:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113a7a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113a7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113a82:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113a85:	5b                   	pop    %ebx
f0113a86:	5e                   	pop    %esi
f0113a87:	5f                   	pop    %edi
f0113a88:	5d                   	pop    %ebp
f0113a89:	c3                   	ret    

f0113a8a <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113a8a:	55                   	push   %ebp
f0113a8b:	89 e5                	mov    %esp,%ebp
f0113a8d:	57                   	push   %edi
f0113a8e:	56                   	push   %esi
f0113a8f:	53                   	push   %ebx
f0113a90:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113a96:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113a9c:	bb 78 9a 13 f0       	mov    $0xf0139a78,%ebx
f0113aa1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113aa6:	89 c7                	mov    %eax,%edi
f0113aa8:	89 de                	mov    %ebx,%esi
f0113aaa:	89 d1                	mov    %edx,%ecx
f0113aac:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113aae:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113ab4:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113ab9:	b0 00                	mov    $0x0,%al
f0113abb:	89 d7                	mov    %edx,%edi
f0113abd:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113abf:	6a 00                	push   $0x0
f0113ac1:	6a 0a                	push   $0xa
f0113ac3:	6a 14                	push   $0x14
f0113ac5:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113acb:	50                   	push   %eax
f0113acc:	e8 a7 57 ff ff       	call   f0109278 <env_create>
f0113ad1:	83 c4 10             	add    $0x10,%esp
f0113ad4:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113ad7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ada:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113add:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113ae0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ae3:	8b 40 60             	mov    0x60(%eax),%eax
f0113ae6:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113ae9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113aec:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113aef:	83 ec 0c             	sub    $0xc,%esp
f0113af2:	ff 75 cc             	pushl  -0x34(%ebp)
f0113af5:	e8 5a 2a 00 00       	call   f0116554 <ClearUserSpace>
f0113afa:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113afd:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113b04:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113b0b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113b12:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113b16:	83 ec 0c             	sub    $0xc,%esp
f0113b19:	68 24 a6 13 f0       	push   $0xf013a624
f0113b1e:	e8 eb d1 fe ff       	call   f0100d0e <cprintf>
f0113b23:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113b26:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113b2d:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113b34:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b37:	8a 00                	mov    (%eax),%al
f0113b39:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113b3f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b42:	8a 00                	mov    (%eax),%al
f0113b44:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b4a:	e8 62 94 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113b4f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113b52:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b55:	89 d0                	mov    %edx,%eax
f0113b57:	01 c0                	add    %eax,%eax
f0113b59:	01 d0                	add    %edx,%eax
f0113b5b:	01 c0                	add    %eax,%eax
f0113b5d:	83 ec 0c             	sub    $0xc,%esp
f0113b60:	6a 02                	push   $0x2
f0113b62:	50                   	push   %eax
f0113b63:	68 00 40 10 f0       	push   $0xf0104000
f0113b68:	68 00 00 10 f0       	push   $0xf0100000
f0113b6d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b70:	e8 a4 51 ff ff       	call   f0108d19 <share_chunk>
f0113b75:	83 c4 20             	add    $0x20,%esp
f0113b78:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b7b:	e8 31 94 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113b80:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113b83:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113b87:	75 08                	jne    f0113b91 <test_share_chunk+0x107>
f0113b89:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b8c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113b8f:	74 28                	je     f0113bb9 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113b91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b94:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b97:	83 ec 0c             	sub    $0xc,%esp
f0113b9a:	50                   	push   %eax
f0113b9b:	ff 75 b0             	pushl  -0x50(%ebp)
f0113b9e:	68 50 a6 13 f0       	push   $0xf013a650
f0113ba3:	68 9e 03 00 00       	push   $0x39e
f0113ba8:	68 de 8f 13 f0       	push   $0xf0138fde
f0113bad:	e8 61 c8 fe ff       	call   f0100413 <_warn>
f0113bb2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bb5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113bb9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bbd:	74 04                	je     f0113bc3 <test_share_chunk+0x139>
f0113bbf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113bc3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113bc7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113bca:	c1 e0 03             	shl    $0x3,%eax
f0113bcd:	83 ec 08             	sub    $0x8,%esp
f0113bd0:	68 fd 00 00 00       	push   $0xfd
f0113bd5:	6a 07                	push   $0x7
f0113bd7:	6a 03                	push   $0x3
f0113bd9:	6a 07                	push   $0x7
f0113bdb:	6a 03                	push   $0x3
f0113bdd:	6a 01                	push   $0x1
f0113bdf:	50                   	push   %eax
f0113be0:	68 00 40 10 f0       	push   $0xf0104000
f0113be5:	68 00 00 10 f0       	push   $0xf0100000
f0113bea:	ff 75 cc             	pushl  -0x34(%ebp)
f0113bed:	e8 96 29 00 00       	call   f0116588 <CCP>
f0113bf2:	83 c4 30             	add    $0x30,%esp
f0113bf5:	85 c0                	test   %eax,%eax
f0113bf7:	75 1e                	jne    f0113c17 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113bf9:	83 ec 04             	sub    $0x4,%esp
f0113bfc:	68 ac a6 13 f0       	push   $0xf013a6ac
f0113c01:	68 a6 03 00 00       	push   $0x3a6
f0113c06:	68 de 8f 13 f0       	push   $0xf0138fde
f0113c0b:	e8 03 c8 fe ff       	call   f0100413 <_warn>
f0113c10:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c13:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c17:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c1b:	74 04                	je     f0113c21 <test_share_chunk+0x197>
f0113c1d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113c21:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c24:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113c27:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c2a:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113c2d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c30:	8a 00                	mov    (%eax),%al
f0113c32:	3c 41                	cmp    $0x41,%al
f0113c34:	75 09                	jne    f0113c3f <test_share_chunk+0x1b5>
f0113c36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c39:	8a 00                	mov    (%eax),%al
f0113c3b:	3c 42                	cmp    $0x42,%al
f0113c3d:	74 1e                	je     f0113c5d <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113c3f:	83 ec 04             	sub    $0x4,%esp
f0113c42:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0113c47:	68 b0 03 00 00       	push   $0x3b0
f0113c4c:	68 de 8f 13 f0       	push   $0xf0138fde
f0113c51:	e8 bd c7 fe ff       	call   f0100413 <_warn>
f0113c56:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c59:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c5d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c61:	74 04                	je     f0113c67 <test_share_chunk+0x1dd>
f0113c63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c67:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113c6b:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113c71:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c74:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113c76:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113c7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c7f:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113c81:	83 ec 0c             	sub    $0xc,%esp
f0113c84:	68 29 a7 13 f0       	push   $0xf013a729
f0113c89:	e8 80 d0 fe ff       	call   f0100d0e <cprintf>
f0113c8e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113c91:	83 ec 0c             	sub    $0xc,%esp
f0113c94:	68 38 a7 13 f0       	push   $0xf013a738
f0113c99:	e8 70 d0 fe ff       	call   f0100d0e <cprintf>
f0113c9e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ca1:	e8 0b 93 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113ca6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113ca9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113cac:	c1 e0 05             	shl    $0x5,%eax
f0113caf:	83 ec 0c             	sub    $0xc,%esp
f0113cb2:	68 02 0e 00 00       	push   $0xe02
f0113cb7:	50                   	push   %eax
f0113cb8:	68 00 00 00 40       	push   $0x40000000
f0113cbd:	68 00 00 00 f0       	push   $0xf0000000
f0113cc2:	ff 75 cc             	pushl  -0x34(%ebp)
f0113cc5:	e8 4f 50 ff ff       	call   f0108d19 <share_chunk>
f0113cca:	83 c4 20             	add    $0x20,%esp
f0113ccd:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113cd0:	e8 dc 92 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113cd5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113cd8:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113cdc:	75 1f                	jne    f0113cfd <test_share_chunk+0x273>
f0113cde:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ce1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ce4:	89 c1                	mov    %eax,%ecx
f0113ce6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113ce9:	c1 e0 05             	shl    $0x5,%eax
f0113cec:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113cef:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113cf6:	99                   	cltd   
f0113cf7:	f7 fb                	idiv   %ebx
f0113cf9:	39 c1                	cmp    %eax,%ecx
f0113cfb:	74 28                	je     f0113d25 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113cfd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d00:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d03:	83 ec 0c             	sub    $0xc,%esp
f0113d06:	50                   	push   %eax
f0113d07:	ff 75 a8             	pushl  -0x58(%ebp)
f0113d0a:	68 74 a7 13 f0       	push   $0xf013a774
f0113d0f:	68 c8 03 00 00       	push   $0x3c8
f0113d14:	68 de 8f 13 f0       	push   $0xf0138fde
f0113d19:	e8 f5 c6 fe ff       	call   f0100413 <_warn>
f0113d1e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d25:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d29:	74 04                	je     f0113d2f <test_share_chunk+0x2a5>
f0113d2b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d2f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113d33:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113d3a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113d3d:	c1 e0 05             	shl    $0x5,%eax
f0113d40:	83 ec 08             	sub    $0x8,%esp
f0113d43:	6a 02                	push   $0x2
f0113d45:	6a 07                	push   $0x7
f0113d47:	6a 03                	push   $0x3
f0113d49:	68 07 0e 00 00       	push   $0xe07
f0113d4e:	68 03 0e 00 00       	push   $0xe03
f0113d53:	6a ff                	push   $0xffffffff
f0113d55:	50                   	push   %eax
f0113d56:	68 00 00 00 40       	push   $0x40000000
f0113d5b:	68 00 00 00 f0       	push   $0xf0000000
f0113d60:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d63:	e8 20 28 00 00       	call   f0116588 <CCP>
f0113d68:	83 c4 30             	add    $0x30,%esp
f0113d6b:	85 c0                	test   %eax,%eax
f0113d6d:	75 25                	jne    f0113d94 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113d6f:	83 ec 04             	sub    $0x4,%esp
f0113d72:	68 ac a6 13 f0       	push   $0xf013a6ac
f0113d77:	68 d1 03 00 00       	push   $0x3d1
f0113d7c:	68 de 8f 13 f0       	push   $0xf0138fde
f0113d81:	e8 8d c6 fe ff       	call   f0100413 <_warn>
f0113d86:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d89:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113d8d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113d94:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d97:	89 d0                	mov    %edx,%eax
f0113d99:	01 c0                	add    %eax,%eax
f0113d9b:	01 d0                	add    %edx,%eax
f0113d9d:	c1 e0 02             	shl    $0x2,%eax
f0113da0:	83 ec 08             	sub    $0x8,%esp
f0113da3:	6a 02                	push   $0x2
f0113da5:	6a 07                	push   $0x7
f0113da7:	6a 03                	push   $0x3
f0113da9:	68 07 0e 00 00       	push   $0xe07
f0113dae:	68 03 0e 00 00       	push   $0xe03
f0113db3:	6a 02                	push   $0x2
f0113db5:	50                   	push   %eax
f0113db6:	68 00 00 00 40       	push   $0x40000000
f0113dbb:	68 00 00 00 f0       	push   $0xf0000000
f0113dc0:	ff 75 cc             	pushl  -0x34(%ebp)
f0113dc3:	e8 c0 27 00 00       	call   f0116588 <CCP>
f0113dc8:	83 c4 30             	add    $0x30,%esp
f0113dcb:	85 c0                	test   %eax,%eax
f0113dcd:	75 1e                	jne    f0113ded <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113dcf:	83 ec 04             	sub    $0x4,%esp
f0113dd2:	68 ac a6 13 f0       	push   $0xf013a6ac
f0113dd7:	68 d8 03 00 00       	push   $0x3d8
f0113ddc:	68 de 8f 13 f0       	push   $0xf0138fde
f0113de1:	e8 2d c6 fe ff       	call   f0100413 <_warn>
f0113de6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113de9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ded:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113df1:	74 04                	je     f0113df7 <test_share_chunk+0x36d>
f0113df3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113df7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113dfb:	b8 bc ae 89 f0       	mov    $0xf089aebc,%eax
f0113e00:	05 00 00 00 10       	add    $0x10000000,%eax
f0113e05:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113e08:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113e0b:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113e10:	83 ec 08             	sub    $0x8,%esp
f0113e13:	6a 02                	push   $0x2
f0113e15:	6a 07                	push   $0x7
f0113e17:	6a 03                	push   $0x3
f0113e19:	68 07 0e 00 00       	push   $0xe07
f0113e1e:	68 03 0e 00 00       	push   $0xe03
f0113e23:	6a 02                	push   $0x2
f0113e25:	50                   	push   %eax
f0113e26:	68 00 00 0a 40       	push   $0x400a0000
f0113e2b:	68 00 00 0a f0       	push   $0xf00a0000
f0113e30:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e33:	e8 50 27 00 00       	call   f0116588 <CCP>
f0113e38:	83 c4 30             	add    $0x30,%esp
f0113e3b:	85 c0                	test   %eax,%eax
f0113e3d:	75 1e                	jne    f0113e5d <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e3f:	83 ec 04             	sub    $0x4,%esp
f0113e42:	68 ac a6 13 f0       	push   $0xf013a6ac
f0113e47:	68 e2 03 00 00       	push   $0x3e2
f0113e4c:	68 de 8f 13 f0       	push   $0xf0138fde
f0113e51:	e8 bd c5 fe ff       	call   f0100413 <_warn>
f0113e56:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e59:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e5d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e61:	74 04                	je     f0113e67 <test_share_chunk+0x3dd>
f0113e63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e67:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113e6b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113e6f:	0f 84 a4 00 00 00    	je     f0113f19 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113e75:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113e7c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e7f:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113e82:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113e89:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e8c:	8a 00                	mov    (%eax),%al
f0113e8e:	3c 41                	cmp    $0x41,%al
f0113e90:	75 09                	jne    f0113e9b <test_share_chunk+0x411>
f0113e92:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e95:	8a 00                	mov    (%eax),%al
f0113e97:	3c 41                	cmp    $0x41,%al
f0113e99:	74 1e                	je     f0113eb9 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113e9b:	83 ec 04             	sub    $0x4,%esp
f0113e9e:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0113ea3:	68 ef 03 00 00       	push   $0x3ef
f0113ea8:	68 de 8f 13 f0       	push   $0xf0138fde
f0113ead:	e8 61 c5 fe ff       	call   f0100413 <_warn>
f0113eb2:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113eb5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113eb9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ebd:	74 04                	je     f0113ec3 <test_share_chunk+0x439>
f0113ebf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113ec3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113ec7:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113ece:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ed1:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113ed4:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113edb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ede:	8a 00                	mov    (%eax),%al
f0113ee0:	3c 43                	cmp    $0x43,%al
f0113ee2:	75 09                	jne    f0113eed <test_share_chunk+0x463>
f0113ee4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ee7:	8a 00                	mov    (%eax),%al
f0113ee9:	3c 43                	cmp    $0x43,%al
f0113eeb:	74 1e                	je     f0113f0b <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113eed:	83 ec 04             	sub    $0x4,%esp
f0113ef0:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0113ef5:	68 fa 03 00 00       	push   $0x3fa
f0113efa:	68 de 8f 13 f0       	push   $0xf0138fde
f0113eff:	e8 0f c5 fe ff       	call   f0100413 <_warn>
f0113f04:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113f0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f0f:	74 04                	je     f0113f15 <test_share_chunk+0x48b>
f0113f11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113f15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113f19:	83 ec 0c             	sub    $0xc,%esp
f0113f1c:	68 03 9d 13 f0       	push   $0xf0139d03
f0113f21:	e8 e8 cd fe ff       	call   f0100d0e <cprintf>
f0113f26:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113f29:	83 ec 0c             	sub    $0xc,%esp
f0113f2c:	68 c4 a7 13 f0       	push   $0xf013a7c4
f0113f31:	e8 d8 cd fe ff       	call   f0100d0e <cprintf>
f0113f36:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f39:	e8 73 90 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113f3e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113f41:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f44:	89 d0                	mov    %edx,%eax
f0113f46:	c1 e0 03             	shl    $0x3,%eax
f0113f49:	01 d0                	add    %edx,%eax
f0113f4b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113f52:	01 d0                	add    %edx,%eax
f0113f54:	c1 e0 03             	shl    $0x3,%eax
f0113f57:	83 ec 0c             	sub    $0xc,%esp
f0113f5a:	6a 06                	push   $0x6
f0113f5c:	50                   	push   %eax
f0113f5d:	6a 00                	push   $0x0
f0113f5f:	68 00 00 00 40       	push   $0x40000000
f0113f64:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f67:	e8 ad 4d ff ff       	call   f0108d19 <share_chunk>
f0113f6c:	83 c4 20             	add    $0x20,%esp
f0113f6f:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f72:	e8 3a 90 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0113f77:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113f7a:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113f7e:	75 0b                	jne    f0113f8b <test_share_chunk+0x501>
f0113f80:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f83:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f86:	83 f8 01             	cmp    $0x1,%eax
f0113f89:	74 28                	je     f0113fb3 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113f8b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f8e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f91:	83 ec 0c             	sub    $0xc,%esp
f0113f94:	50                   	push   %eax
f0113f95:	ff 75 a0             	pushl  -0x60(%ebp)
f0113f98:	68 74 a7 13 f0       	push   $0xf013a774
f0113f9d:	68 10 04 00 00       	push   $0x410
f0113fa2:	68 de 8f 13 f0       	push   $0xf0138fde
f0113fa7:	e8 67 c4 fe ff       	call   f0100413 <_warn>
f0113fac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113faf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fb3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fb7:	74 04                	je     f0113fbd <test_share_chunk+0x533>
f0113fb9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fbd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113fc1:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113fc8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fcb:	05 00 80 02 00       	add    $0x28000,%eax
f0113fd0:	c1 e0 02             	shl    $0x2,%eax
f0113fd3:	83 ec 08             	sub    $0x8,%esp
f0113fd6:	6a 02                	push   $0x2
f0113fd8:	6a 07                	push   $0x7
f0113fda:	6a 03                	push   $0x3
f0113fdc:	6a 07                	push   $0x7
f0113fde:	6a 07                	push   $0x7
f0113fe0:	6a ff                	push   $0xffffffff
f0113fe2:	50                   	push   %eax
f0113fe3:	6a 00                	push   $0x0
f0113fe5:	68 00 00 00 40       	push   $0x40000000
f0113fea:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fed:	e8 96 25 00 00       	call   f0116588 <CCP>
f0113ff2:	83 c4 30             	add    $0x30,%esp
f0113ff5:	85 c0                	test   %eax,%eax
f0113ff7:	75 25                	jne    f011401e <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ff9:	83 ec 04             	sub    $0x4,%esp
f0113ffc:	68 ac a6 13 f0       	push   $0xf013a6ac
f0114001:	68 19 04 00 00       	push   $0x419
f0114006:	68 de 8f 13 f0       	push   $0xf0138fde
f011400b:	e8 03 c4 fe ff       	call   f0100413 <_warn>
f0114010:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114013:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114017:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011401e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114021:	89 d0                	mov    %edx,%eax
f0114023:	01 c0                	add    %eax,%eax
f0114025:	01 d0                	add    %edx,%eax
f0114027:	c1 e0 02             	shl    $0x2,%eax
f011402a:	83 ec 08             	sub    $0x8,%esp
f011402d:	6a 02                	push   $0x2
f011402f:	6a 07                	push   $0x7
f0114031:	6a 03                	push   $0x3
f0114033:	6a 07                	push   $0x7
f0114035:	6a 07                	push   $0x7
f0114037:	6a 03                	push   $0x3
f0114039:	50                   	push   %eax
f011403a:	6a 00                	push   $0x0
f011403c:	68 00 00 00 40       	push   $0x40000000
f0114041:	ff 75 cc             	pushl  -0x34(%ebp)
f0114044:	e8 3f 25 00 00       	call   f0116588 <CCP>
f0114049:	83 c4 30             	add    $0x30,%esp
f011404c:	85 c0                	test   %eax,%eax
f011404e:	75 1e                	jne    f011406e <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114050:	83 ec 04             	sub    $0x4,%esp
f0114053:	68 ac a6 13 f0       	push   $0xf013a6ac
f0114058:	68 20 04 00 00       	push   $0x420
f011405d:	68 de 8f 13 f0       	push   $0xf0138fde
f0114062:	e8 ac c3 fe ff       	call   f0100413 <_warn>
f0114067:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011406a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011406e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114072:	74 04                	je     f0114078 <test_share_chunk+0x5ee>
f0114074:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114078:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011407c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011407f:	89 d0                	mov    %edx,%eax
f0114081:	01 c0                	add    %eax,%eax
f0114083:	01 d0                	add    %edx,%eax
f0114085:	c1 e0 02             	shl    $0x2,%eax
f0114088:	f7 d8                	neg    %eax
f011408a:	05 00 00 0a 00       	add    $0xa0000,%eax
f011408f:	83 ec 08             	sub    $0x8,%esp
f0114092:	6a 02                	push   $0x2
f0114094:	6a 07                	push   $0x7
f0114096:	6a 03                	push   $0x3
f0114098:	6a 07                	push   $0x7
f011409a:	6a 07                	push   $0x7
f011409c:	6a 02                	push   $0x2
f011409e:	50                   	push   %eax
f011409f:	68 00 30 00 00       	push   $0x3000
f01140a4:	68 00 30 00 40       	push   $0x40003000
f01140a9:	ff 75 cc             	pushl  -0x34(%ebp)
f01140ac:	e8 d7 24 00 00       	call   f0116588 <CCP>
f01140b1:	83 c4 30             	add    $0x30,%esp
f01140b4:	85 c0                	test   %eax,%eax
f01140b6:	75 1e                	jne    f01140d6 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140b8:	83 ec 04             	sub    $0x4,%esp
f01140bb:	68 ac a6 13 f0       	push   $0xf013a6ac
f01140c0:	68 28 04 00 00       	push   $0x428
f01140c5:	68 de 8f 13 f0       	push   $0xf0138fde
f01140ca:	e8 44 c3 fe ff       	call   f0100413 <_warn>
f01140cf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140d6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140da:	74 04                	je     f01140e0 <test_share_chunk+0x656>
f01140dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140e0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01140e4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01140e7:	c1 e0 02             	shl    $0x2,%eax
f01140ea:	83 ec 08             	sub    $0x8,%esp
f01140ed:	6a 02                	push   $0x2
f01140ef:	6a 07                	push   $0x7
f01140f1:	6a 03                	push   $0x3
f01140f3:	6a 07                	push   $0x7
f01140f5:	6a 07                	push   $0x7
f01140f7:	6a 03                	push   $0x3
f01140f9:	50                   	push   %eax
f01140fa:	68 00 00 0a 00       	push   $0xa0000
f01140ff:	68 00 00 0a 40       	push   $0x400a0000
f0114104:	ff 75 cc             	pushl  -0x34(%ebp)
f0114107:	e8 7c 24 00 00       	call   f0116588 <CCP>
f011410c:	83 c4 30             	add    $0x30,%esp
f011410f:	85 c0                	test   %eax,%eax
f0114111:	75 1e                	jne    f0114131 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114113:	83 ec 04             	sub    $0x4,%esp
f0114116:	68 ac a6 13 f0       	push   $0xf013a6ac
f011411b:	68 30 04 00 00       	push   $0x430
f0114120:	68 de 8f 13 f0       	push   $0xf0138fde
f0114125:	e8 e9 c2 fe ff       	call   f0100413 <_warn>
f011412a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011412d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114131:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114135:	74 04                	je     f011413b <test_share_chunk+0x6b1>
f0114137:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011413b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011413f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114143:	0f 84 92 00 00 00    	je     f01141db <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0114149:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114150:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0114157:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f011415e:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0114165:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114168:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f011416b:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114172:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114179:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011417c:	8a 00                	mov    (%eax),%al
f011417e:	3c 41                	cmp    $0x41,%al
f0114180:	75 2d                	jne    f01141af <test_share_chunk+0x725>
f0114182:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114185:	8a 00                	mov    (%eax),%al
f0114187:	3c 41                	cmp    $0x41,%al
f0114189:	75 24                	jne    f01141af <test_share_chunk+0x725>
f011418b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011418e:	8a 00                	mov    (%eax),%al
f0114190:	3c 41                	cmp    $0x41,%al
f0114192:	75 1b                	jne    f01141af <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114194:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114197:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114199:	3c 44                	cmp    $0x44,%al
f011419b:	75 12                	jne    f01141af <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011419d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01141a0:	8a 00                	mov    (%eax),%al
f01141a2:	3c 44                	cmp    $0x44,%al
f01141a4:	75 09                	jne    f01141af <test_share_chunk+0x725>
f01141a6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01141a9:	8a 00                	mov    (%eax),%al
f01141ab:	3c 44                	cmp    $0x44,%al
f01141ad:	74 1e                	je     f01141cd <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01141af:	83 ec 04             	sub    $0x4,%esp
f01141b2:	68 f4 a6 13 f0       	push   $0xf013a6f4
f01141b7:	68 42 04 00 00       	push   $0x442
f01141bc:	68 de 8f 13 f0       	push   $0xf0138fde
f01141c1:	e8 4d c2 fe ff       	call   f0100413 <_warn>
f01141c6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01141c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01141cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141d1:	74 04                	je     f01141d7 <test_share_chunk+0x74d>
f01141d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01141d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01141db:	83 ec 0c             	sub    $0xc,%esp
f01141de:	68 66 9d 13 f0       	push   $0xf0139d66
f01141e3:	e8 26 cb fe ff       	call   f0100d0e <cprintf>
f01141e8:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01141eb:	83 ec 0c             	sub    $0xc,%esp
f01141ee:	68 00 a8 13 f0       	push   $0xf013a800
f01141f3:	e8 16 cb fe ff       	call   f0100d0e <cprintf>
f01141f8:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01141fb:	e8 b1 8d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114200:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114203:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114206:	89 d0                	mov    %edx,%eax
f0114208:	01 c0                	add    %eax,%eax
f011420a:	01 d0                	add    %edx,%eax
f011420c:	01 c0                	add    %eax,%eax
f011420e:	01 d0                	add    %edx,%eax
f0114210:	83 ec 0c             	sub    $0xc,%esp
f0114213:	6a 04                	push   $0x4
f0114215:	50                   	push   %eax
f0114216:	68 00 fc 3f 00       	push   $0x3ffc00
f011421b:	68 00 fc 09 00       	push   $0x9fc00
f0114220:	ff 75 cc             	pushl  -0x34(%ebp)
f0114223:	e8 f1 4a ff ff       	call   f0108d19 <share_chunk>
f0114228:	83 c4 20             	add    $0x20,%esp
f011422b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011422e:	e8 7e 8d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114233:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114236:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011423a:	75 0b                	jne    f0114247 <test_share_chunk+0x7bd>
f011423c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011423f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114242:	83 f8 01             	cmp    $0x1,%eax
f0114245:	74 28                	je     f011426f <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114247:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011424a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011424d:	83 ec 0c             	sub    $0xc,%esp
f0114250:	50                   	push   %eax
f0114251:	ff 75 8c             	pushl  -0x74(%ebp)
f0114254:	68 74 a7 13 f0       	push   $0xf013a774
f0114259:	68 58 04 00 00       	push   $0x458
f011425e:	68 de 8f 13 f0       	push   $0xf0138fde
f0114263:	e8 ab c1 fe ff       	call   f0100413 <_warn>
f0114268:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011426b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011426f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114273:	74 04                	je     f0114279 <test_share_chunk+0x7ef>
f0114275:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114279:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011427d:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114284:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114287:	89 d0                	mov    %edx,%eax
f0114289:	01 c0                	add    %eax,%eax
f011428b:	01 d0                	add    %edx,%eax
f011428d:	c1 e0 02             	shl    $0x2,%eax
f0114290:	83 ec 08             	sub    $0x8,%esp
f0114293:	6a 02                	push   $0x2
f0114295:	6a 07                	push   $0x7
f0114297:	6a 07                	push   $0x7
f0114299:	6a 07                	push   $0x7
f011429b:	6a 05                	push   $0x5
f011429d:	6a ff                	push   $0xffffffff
f011429f:	50                   	push   %eax
f01142a0:	68 00 f0 3f 00       	push   $0x3ff000
f01142a5:	68 00 f0 09 00       	push   $0x9f000
f01142aa:	ff 75 cc             	pushl  -0x34(%ebp)
f01142ad:	e8 d6 22 00 00       	call   f0116588 <CCP>
f01142b2:	83 c4 30             	add    $0x30,%esp
f01142b5:	85 c0                	test   %eax,%eax
f01142b7:	75 25                	jne    f01142de <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01142b9:	83 ec 04             	sub    $0x4,%esp
f01142bc:	68 ac a6 13 f0       	push   $0xf013a6ac
f01142c1:	68 61 04 00 00       	push   $0x461
f01142c6:	68 de 8f 13 f0       	push   $0xf0138fde
f01142cb:	e8 43 c1 fe ff       	call   f0100413 <_warn>
f01142d0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142d3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01142d7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01142de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142e2:	74 04                	je     f01142e8 <test_share_chunk+0x85e>
f01142e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01142ec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142ef:	c1 e0 02             	shl    $0x2,%eax
f01142f2:	83 ec 08             	sub    $0x8,%esp
f01142f5:	6a 02                	push   $0x2
f01142f7:	6a 07                	push   $0x7
f01142f9:	6a 07                	push   $0x7
f01142fb:	6a 07                	push   $0x7
f01142fd:	6a 05                	push   $0x5
f01142ff:	6a 03                	push   $0x3
f0114301:	50                   	push   %eax
f0114302:	68 00 f0 3f 00       	push   $0x3ff000
f0114307:	68 00 f0 09 00       	push   $0x9f000
f011430c:	ff 75 cc             	pushl  -0x34(%ebp)
f011430f:	e8 74 22 00 00       	call   f0116588 <CCP>
f0114314:	83 c4 30             	add    $0x30,%esp
f0114317:	85 c0                	test   %eax,%eax
f0114319:	75 1e                	jne    f0114339 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011431b:	83 ec 04             	sub    $0x4,%esp
f011431e:	68 ac a6 13 f0       	push   $0xf013a6ac
f0114323:	68 6a 04 00 00       	push   $0x46a
f0114328:	68 de 8f 13 f0       	push   $0xf0138fde
f011432d:	e8 e1 c0 fe ff       	call   f0100413 <_warn>
f0114332:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114335:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114339:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011433d:	74 04                	je     f0114343 <test_share_chunk+0x8b9>
f011433f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114343:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114347:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011434a:	c1 e0 03             	shl    $0x3,%eax
f011434d:	83 ec 08             	sub    $0x8,%esp
f0114350:	6a 02                	push   $0x2
f0114352:	6a 07                	push   $0x7
f0114354:	6a 07                	push   $0x7
f0114356:	6a 07                	push   $0x7
f0114358:	6a 05                	push   $0x5
f011435a:	6a 04                	push   $0x4
f011435c:	50                   	push   %eax
f011435d:	68 00 00 40 00       	push   $0x400000
f0114362:	68 00 00 0a 00       	push   $0xa0000
f0114367:	ff 75 cc             	pushl  -0x34(%ebp)
f011436a:	e8 19 22 00 00       	call   f0116588 <CCP>
f011436f:	83 c4 30             	add    $0x30,%esp
f0114372:	85 c0                	test   %eax,%eax
f0114374:	75 1e                	jne    f0114394 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114376:	83 ec 04             	sub    $0x4,%esp
f0114379:	68 ac a6 13 f0       	push   $0xf013a6ac
f011437e:	68 72 04 00 00       	push   $0x472
f0114383:	68 de 8f 13 f0       	push   $0xf0138fde
f0114388:	e8 86 c0 fe ff       	call   f0100413 <_warn>
f011438d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114390:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114394:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114398:	74 04                	je     f011439e <test_share_chunk+0x914>
f011439a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011439e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01143a2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01143a6:	0f 84 b2 00 00 00    	je     f011445e <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01143ac:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01143b3:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01143ba:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01143c1:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01143c8:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01143cf:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01143d6:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01143dd:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01143e4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143e7:	8a 00                	mov    (%eax),%al
f01143e9:	3c 44                	cmp    $0x44,%al
f01143eb:	75 45                	jne    f0114432 <test_share_chunk+0x9a8>
f01143ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01143f0:	8a 00                	mov    (%eax),%al
f01143f2:	3c 44                	cmp    $0x44,%al
f01143f4:	75 3c                	jne    f0114432 <test_share_chunk+0x9a8>
f01143f6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01143f9:	8a 00                	mov    (%eax),%al
f01143fb:	3c 44                	cmp    $0x44,%al
f01143fd:	75 33                	jne    f0114432 <test_share_chunk+0x9a8>
f01143ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114402:	8a 00                	mov    (%eax),%al
f0114404:	3c 44                	cmp    $0x44,%al
f0114406:	75 2a                	jne    f0114432 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114408:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011440b:	8a 10                	mov    (%eax),%dl
f011440d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114410:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114412:	38 c2                	cmp    %al,%dl
f0114414:	75 1c                	jne    f0114432 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114416:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114419:	8a 10                	mov    (%eax),%dl
f011441b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011441e:	8a 00                	mov    (%eax),%al
f0114420:	38 c2                	cmp    %al,%dl
f0114422:	75 0e                	jne    f0114432 <test_share_chunk+0x9a8>
f0114424:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114427:	8a 10                	mov    (%eax),%dl
f0114429:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011442c:	8a 00                	mov    (%eax),%al
f011442e:	38 c2                	cmp    %al,%dl
f0114430:	74 1e                	je     f0114450 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114432:	83 ec 04             	sub    $0x4,%esp
f0114435:	68 f4 a6 13 f0       	push   $0xf013a6f4
f011443a:	68 87 04 00 00       	push   $0x487
f011443f:	68 de 8f 13 f0       	push   $0xf0138fde
f0114444:	e8 ca bf fe ff       	call   f0100413 <_warn>
f0114449:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011444c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114450:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114454:	74 04                	je     f011445a <test_share_chunk+0x9d0>
f0114456:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011445a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f011445e:	83 ec 0c             	sub    $0xc,%esp
f0114461:	68 38 a8 13 f0       	push   $0xf013a838
f0114466:	e8 a3 c8 fe ff       	call   f0100d0e <cprintf>
f011446b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f011446e:	83 ec 08             	sub    $0x8,%esp
f0114471:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114474:	68 48 a8 13 f0       	push   $0xf013a848
f0114479:	e8 90 c8 fe ff       	call   f0100d0e <cprintf>
f011447e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114481:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114485:	75 10                	jne    f0114497 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114487:	83 ec 0c             	sub    $0xc,%esp
f011448a:	68 78 a8 13 f0       	push   $0xf013a878
f011448f:	e8 7a c8 fe ff       	call   f0100d0e <cprintf>
f0114494:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114497:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f011449c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011449f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01144a2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01144a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01144aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01144ad:	5b                   	pop    %ebx
f01144ae:	5e                   	pop    %esi
f01144af:	5f                   	pop    %edi
f01144b0:	5d                   	pop    %ebp
f01144b1:	c3                   	ret    

f01144b2 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01144b2:	55                   	push   %ebp
f01144b3:	89 e5                	mov    %esp,%ebp
f01144b5:	57                   	push   %edi
f01144b6:	56                   	push   %esi
f01144b7:	53                   	push   %ebx
f01144b8:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01144be:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01144c4:	bb 78 9a 13 f0       	mov    $0xf0139a78,%ebx
f01144c9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01144ce:	89 c7                	mov    %eax,%edi
f01144d0:	89 de                	mov    %ebx,%esi
f01144d2:	89 d1                	mov    %edx,%ecx
f01144d4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01144d6:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01144dc:	b9 23 00 00 00       	mov    $0x23,%ecx
f01144e1:	b0 00                	mov    $0x0,%al
f01144e3:	89 d7                	mov    %edx,%edi
f01144e5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01144e7:	6a 00                	push   $0x0
f01144e9:	6a 0a                	push   $0xa
f01144eb:	6a 14                	push   $0x14
f01144ed:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01144f3:	50                   	push   %eax
f01144f4:	e8 7f 4d ff ff       	call   f0109278 <env_create>
f01144f9:	83 c4 10             	add    $0x10,%esp
f01144fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01144ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114502:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114505:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0114508:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011450b:	8b 40 60             	mov    0x60(%eax),%eax
f011450e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114511:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114514:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114517:	83 ec 0c             	sub    $0xc,%esp
f011451a:	ff 75 d0             	pushl  -0x30(%ebp)
f011451d:	e8 32 20 00 00       	call   f0116554 <ClearUserSpace>
f0114522:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114525:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011452c:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114533:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011453a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f011453e:	83 ec 0c             	sub    $0xc,%esp
f0114541:	68 b4 a8 13 f0       	push   $0xf013a8b4
f0114546:	e8 c3 c7 fe ff       	call   f0100d0e <cprintf>
f011454b:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f011454e:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114555:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f011455c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011455f:	8a 00                	mov    (%eax),%al
f0114561:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114567:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011456a:	8a 00                	mov    (%eax),%al
f011456c:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114572:	83 ec 08             	sub    $0x8,%esp
f0114575:	68 00 f0 bf ef       	push   $0xefbff000
f011457a:	ff 75 d0             	pushl  -0x30(%ebp)
f011457d:	e8 b3 1f 00 00       	call   f0116535 <GP>
f0114582:	83 c4 10             	add    $0x10,%esp
f0114585:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114588:	e8 24 8a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011458d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114590:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114593:	c1 e0 02             	shl    $0x2,%eax
f0114596:	6a 02                	push   $0x2
f0114598:	50                   	push   %eax
f0114599:	68 00 f0 bf ef       	push   $0xefbff000
f011459e:	ff 75 d0             	pushl  -0x30(%ebp)
f01145a1:	e8 86 48 ff ff       	call   f0108e2c <allocate_chunk>
f01145a6:	83 c4 10             	add    $0x10,%esp
f01145a9:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01145ac:	e8 00 8a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01145b1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01145b4:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01145b8:	75 08                	jne    f01145c2 <test_allocate_chunk+0x110>
f01145ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145bd:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01145c0:	74 2a                	je     f01145ec <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01145c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145c5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145c8:	83 ec 08             	sub    $0x8,%esp
f01145cb:	6a 00                	push   $0x0
f01145cd:	50                   	push   %eax
f01145ce:	ff 75 b0             	pushl  -0x50(%ebp)
f01145d1:	68 e0 a8 13 f0       	push   $0xf013a8e0
f01145d6:	68 c3 04 00 00       	push   $0x4c3
f01145db:	68 de 8f 13 f0       	push   $0xf0138fde
f01145e0:	e8 2e be fe ff       	call   f0100413 <_warn>
f01145e5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01145ec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145f0:	74 04                	je     f01145f6 <test_allocate_chunk+0x144>
f01145f2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145f6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01145fa:	e8 b2 89 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01145ff:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114602:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114605:	01 c0                	add    %eax,%eax
f0114607:	89 c1                	mov    %eax,%ecx
f0114609:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011460c:	89 d0                	mov    %edx,%eax
f011460e:	c1 e0 02             	shl    $0x2,%eax
f0114611:	01 d0                	add    %edx,%eax
f0114613:	f7 d8                	neg    %eax
f0114615:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011461a:	6a 02                	push   $0x2
f011461c:	51                   	push   %ecx
f011461d:	50                   	push   %eax
f011461e:	ff 75 d0             	pushl  -0x30(%ebp)
f0114621:	e8 06 48 ff ff       	call   f0108e2c <allocate_chunk>
f0114626:	83 c4 10             	add    $0x10,%esp
f0114629:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011462c:	e8 80 89 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114631:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114634:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114638:	75 08                	jne    f0114642 <test_allocate_chunk+0x190>
f011463a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011463d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114640:	74 2a                	je     f011466c <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114642:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114645:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114648:	83 ec 08             	sub    $0x8,%esp
f011464b:	6a 00                	push   $0x0
f011464d:	50                   	push   %eax
f011464e:	ff 75 b0             	pushl  -0x50(%ebp)
f0114651:	68 e0 a8 13 f0       	push   $0xf013a8e0
f0114656:	68 d1 04 00 00       	push   $0x4d1
f011465b:	68 de 8f 13 f0       	push   $0xf0138fde
f0114660:	e8 ae bd fe ff       	call   f0100413 <_warn>
f0114665:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114668:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011466c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114670:	74 04                	je     f0114676 <test_allocate_chunk+0x1c4>
f0114672:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114676:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f011467a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011467d:	c1 e0 02             	shl    $0x2,%eax
f0114680:	83 ec 08             	sub    $0x8,%esp
f0114683:	6a 03                	push   $0x3
f0114685:	6a 00                	push   $0x0
f0114687:	6a 00                	push   $0x0
f0114689:	68 ff 0f 00 00       	push   $0xfff
f011468e:	ff 75 b8             	pushl  -0x48(%ebp)
f0114691:	6a 01                	push   $0x1
f0114693:	50                   	push   %eax
f0114694:	68 00 f0 bf ef       	push   $0xefbff000
f0114699:	6a 00                	push   $0x0
f011469b:	ff 75 d0             	pushl  -0x30(%ebp)
f011469e:	e8 e5 1e 00 00       	call   f0116588 <CCP>
f01146a3:	83 c4 30             	add    $0x30,%esp
f01146a6:	85 c0                	test   %eax,%eax
f01146a8:	75 1e                	jne    f01146c8 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01146aa:	83 ec 04             	sub    $0x4,%esp
f01146ad:	68 48 a9 13 f0       	push   $0xf013a948
f01146b2:	68 d9 04 00 00       	push   $0x4d9
f01146b7:	68 de 8f 13 f0       	push   $0xf0138fde
f01146bc:	e8 52 bd fe ff       	call   f0100413 <_warn>
f01146c1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146c4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146c8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146cc:	74 04                	je     f01146d2 <test_allocate_chunk+0x220>
f01146ce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146d2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01146d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01146d9:	8a 10                	mov    (%eax),%dl
f01146db:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01146e1:	38 c2                	cmp    %al,%dl
f01146e3:	75 0f                	jne    f01146f4 <test_allocate_chunk+0x242>
f01146e5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01146e8:	8a 10                	mov    (%eax),%dl
f01146ea:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01146f0:	38 c2                	cmp    %al,%dl
f01146f2:	74 1e                	je     f0114712 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01146f4:	83 ec 04             	sub    $0x4,%esp
f01146f7:	68 94 a9 13 f0       	push   $0xf013a994
f01146fc:	68 e1 04 00 00       	push   $0x4e1
f0114701:	68 de 8f 13 f0       	push   $0xf0138fde
f0114706:	e8 08 bd fe ff       	call   f0100413 <_warn>
f011470b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011470e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114712:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114716:	74 04                	je     f011471c <test_allocate_chunk+0x26a>
f0114718:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011471c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114720:	83 ec 0c             	sub    $0xc,%esp
f0114723:	68 29 a7 13 f0       	push   $0xf013a729
f0114728:	e8 e1 c5 fe ff       	call   f0100d0e <cprintf>
f011472d:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114730:	83 ec 0c             	sub    $0xc,%esp
f0114733:	68 cc a9 13 f0       	push   $0xf013a9cc
f0114738:	e8 d1 c5 fe ff       	call   f0100d0e <cprintf>
f011473d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114740:	e8 6c 88 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114745:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114748:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011474b:	c1 e0 05             	shl    $0x5,%eax
f011474e:	68 02 0e 00 00       	push   $0xe02
f0114753:	50                   	push   %eax
f0114754:	6a 00                	push   $0x0
f0114756:	ff 75 d0             	pushl  -0x30(%ebp)
f0114759:	e8 ce 46 ff ff       	call   f0108e2c <allocate_chunk>
f011475e:	83 c4 10             	add    $0x10,%esp
f0114761:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114764:	e8 48 88 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114769:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f011476c:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114770:	75 36                	jne    f01147a8 <test_allocate_chunk+0x2f6>
f0114772:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114775:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114778:	89 c1                	mov    %eax,%ecx
f011477a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011477d:	c1 e0 05             	shl    $0x5,%eax
f0114780:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114783:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011478a:	99                   	cltd   
f011478b:	f7 fe                	idiv   %esi
f011478d:	89 c3                	mov    %eax,%ebx
f011478f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114792:	c1 e0 05             	shl    $0x5,%eax
f0114795:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114798:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011479f:	99                   	cltd   
f01147a0:	f7 fe                	idiv   %esi
f01147a2:	01 d8                	add    %ebx,%eax
f01147a4:	39 c1                	cmp    %eax,%ecx
f01147a6:	74 54                	je     f01147fc <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01147a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147ab:	c1 e0 05             	shl    $0x5,%eax
f01147ae:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01147b1:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01147b8:	99                   	cltd   
f01147b9:	f7 ff                	idiv   %edi
f01147bb:	89 c1                	mov    %eax,%ecx
f01147bd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147c0:	c1 e0 05             	shl    $0x5,%eax
f01147c3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01147c6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01147cd:	99                   	cltd   
f01147ce:	f7 fe                	idiv   %esi
f01147d0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01147d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01147d6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01147d9:	83 ec 08             	sub    $0x8,%esp
f01147dc:	52                   	push   %edx
f01147dd:	50                   	push   %eax
f01147de:	ff 75 a8             	pushl  -0x58(%ebp)
f01147e1:	68 0c aa 13 f0       	push   $0xf013aa0c
f01147e6:	68 f6 04 00 00       	push   $0x4f6
f01147eb:	68 de 8f 13 f0       	push   $0xf0138fde
f01147f0:	e8 1e bc fe ff       	call   f0100413 <_warn>
f01147f5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147f8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147fc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114800:	74 04                	je     f0114806 <test_allocate_chunk+0x354>
f0114802:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114806:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011480a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114811:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114814:	c1 e0 05             	shl    $0x5,%eax
f0114817:	83 ec 08             	sub    $0x8,%esp
f011481a:	6a 03                	push   $0x3
f011481c:	6a 00                	push   $0x0
f011481e:	6a 00                	push   $0x0
f0114820:	68 07 0e 00 00       	push   $0xe07
f0114825:	68 03 0e 00 00       	push   $0xe03
f011482a:	6a 01                	push   $0x1
f011482c:	50                   	push   %eax
f011482d:	6a 00                	push   $0x0
f011482f:	6a 00                	push   $0x0
f0114831:	ff 75 d0             	pushl  -0x30(%ebp)
f0114834:	e8 4f 1d 00 00       	call   f0116588 <CCP>
f0114839:	83 c4 30             	add    $0x30,%esp
f011483c:	85 c0                	test   %eax,%eax
f011483e:	75 25                	jne    f0114865 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114840:	83 ec 04             	sub    $0x4,%esp
f0114843:	68 48 a9 13 f0       	push   $0xf013a948
f0114848:	68 ff 04 00 00       	push   $0x4ff
f011484d:	68 de 8f 13 f0       	push   $0xf0138fde
f0114852:	e8 bc bb fe ff       	call   f0100413 <_warn>
f0114857:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011485a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011485e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114865:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114869:	74 04                	je     f011486f <test_allocate_chunk+0x3bd>
f011486b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011486f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114873:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114877:	74 5a                	je     f01148d3 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114879:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011487c:	01 c0                	add    %eax,%eax
f011487e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114881:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114884:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114887:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011488a:	01 c0                	add    %eax,%eax
f011488c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011488f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114892:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114895:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114898:	8a 00                	mov    (%eax),%al
f011489a:	3c 4b                	cmp    $0x4b,%al
f011489c:	75 09                	jne    f01148a7 <test_allocate_chunk+0x3f5>
f011489e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01148a1:	8a 00                	mov    (%eax),%al
f01148a3:	3c 4d                	cmp    $0x4d,%al
f01148a5:	74 1e                	je     f01148c5 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01148a7:	83 ec 04             	sub    $0x4,%esp
f01148aa:	68 94 a9 13 f0       	push   $0xf013a994
f01148af:	68 0d 05 00 00       	push   $0x50d
f01148b4:	68 de 8f 13 f0       	push   $0xf0138fde
f01148b9:	e8 55 bb fe ff       	call   f0100413 <_warn>
f01148be:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01148c1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01148c5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148c9:	74 04                	je     f01148cf <test_allocate_chunk+0x41d>
f01148cb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01148cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01148d3:	83 ec 0c             	sub    $0xc,%esp
f01148d6:	68 03 9d 13 f0       	push   $0xf0139d03
f01148db:	e8 2e c4 fe ff       	call   f0100d0e <cprintf>
f01148e0:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01148e3:	83 ec 0c             	sub    $0xc,%esp
f01148e6:	68 6c aa 13 f0       	push   $0xf013aa6c
f01148eb:	e8 1e c4 fe ff       	call   f0100d0e <cprintf>
f01148f0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01148f3:	e8 b9 86 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01148f8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01148fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148fe:	c1 e0 06             	shl    $0x6,%eax
f0114901:	89 c2                	mov    %eax,%edx
f0114903:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114906:	c1 e0 05             	shl    $0x5,%eax
f0114909:	6a 00                	push   $0x0
f011490b:	52                   	push   %edx
f011490c:	50                   	push   %eax
f011490d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114910:	e8 17 45 ff ff       	call   f0108e2c <allocate_chunk>
f0114915:	83 c4 10             	add    $0x10,%esp
f0114918:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011491b:	e8 91 86 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114920:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114923:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114927:	75 36                	jne    f011495f <test_allocate_chunk+0x4ad>
f0114929:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011492c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011492f:	89 c1                	mov    %eax,%ecx
f0114931:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114934:	c1 e0 06             	shl    $0x6,%eax
f0114937:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011493a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114941:	99                   	cltd   
f0114942:	f7 ff                	idiv   %edi
f0114944:	89 c3                	mov    %eax,%ebx
f0114946:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114949:	c1 e0 06             	shl    $0x6,%eax
f011494c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011494f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114956:	99                   	cltd   
f0114957:	f7 fe                	idiv   %esi
f0114959:	01 d8                	add    %ebx,%eax
f011495b:	39 c1                	cmp    %eax,%ecx
f011495d:	74 54                	je     f01149b3 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f011495f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114962:	c1 e0 06             	shl    $0x6,%eax
f0114965:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114968:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011496f:	99                   	cltd   
f0114970:	f7 fb                	idiv   %ebx
f0114972:	89 c1                	mov    %eax,%ecx
f0114974:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114977:	c1 e0 06             	shl    $0x6,%eax
f011497a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011497d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114984:	99                   	cltd   
f0114985:	f7 ff                	idiv   %edi
f0114987:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011498a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011498d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114990:	83 ec 08             	sub    $0x8,%esp
f0114993:	52                   	push   %edx
f0114994:	50                   	push   %eax
f0114995:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114998:	68 0c aa 13 f0       	push   $0xf013aa0c
f011499d:	68 23 05 00 00       	push   $0x523
f01149a2:	68 de 8f 13 f0       	push   $0xf0138fde
f01149a7:	e8 67 ba fe ff       	call   f0100413 <_warn>
f01149ac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149b3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149b7:	74 04                	je     f01149bd <test_allocate_chunk+0x50b>
f01149b9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149bd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01149c1:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01149c8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149cb:	c1 e0 06             	shl    $0x6,%eax
f01149ce:	89 c2                	mov    %eax,%edx
f01149d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01149d3:	c1 e0 05             	shl    $0x5,%eax
f01149d6:	83 ec 08             	sub    $0x8,%esp
f01149d9:	6a 03                	push   $0x3
f01149db:	6a 00                	push   $0x0
f01149dd:	6a 00                	push   $0x0
f01149df:	68 07 0e 00 00       	push   $0xe07
f01149e4:	6a 01                	push   $0x1
f01149e6:	6a 01                	push   $0x1
f01149e8:	52                   	push   %edx
f01149e9:	50                   	push   %eax
f01149ea:	6a 00                	push   $0x0
f01149ec:	ff 75 d0             	pushl  -0x30(%ebp)
f01149ef:	e8 94 1b 00 00       	call   f0116588 <CCP>
f01149f4:	83 c4 30             	add    $0x30,%esp
f01149f7:	85 c0                	test   %eax,%eax
f01149f9:	75 25                	jne    f0114a20 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01149fb:	83 ec 04             	sub    $0x4,%esp
f01149fe:	68 48 a9 13 f0       	push   $0xf013a948
f0114a03:	68 2c 05 00 00       	push   $0x52c
f0114a08:	68 de 8f 13 f0       	push   $0xf0138fde
f0114a0d:	e8 01 ba fe ff       	call   f0100413 <_warn>
f0114a12:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114a19:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114a20:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a24:	74 04                	je     f0114a2a <test_allocate_chunk+0x578>
f0114a26:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a2a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114a2e:	83 ec 0c             	sub    $0xc,%esp
f0114a31:	68 66 9d 13 f0       	push   $0xf0139d66
f0114a36:	e8 d3 c2 fe ff       	call   f0100d0e <cprintf>
f0114a3b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114a3e:	83 ec 0c             	sub    $0xc,%esp
f0114a41:	68 ac aa 13 f0       	push   $0xf013aaac
f0114a46:	e8 c3 c2 fe ff       	call   f0100d0e <cprintf>
f0114a4b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a4e:	e8 5e 85 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114a53:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114a56:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a59:	c1 e0 06             	shl    $0x6,%eax
f0114a5c:	68 06 0e 00 00       	push   $0xe06
f0114a61:	50                   	push   %eax
f0114a62:	68 00 00 00 80       	push   $0x80000000
f0114a67:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a6a:	e8 bd 43 ff ff       	call   f0108e2c <allocate_chunk>
f0114a6f:	83 c4 10             	add    $0x10,%esp
f0114a72:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a75:	e8 37 85 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114a7a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114a7d:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114a81:	75 36                	jne    f0114ab9 <test_allocate_chunk+0x607>
f0114a83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a86:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a89:	89 c1                	mov    %eax,%ecx
f0114a8b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a8e:	c1 e0 06             	shl    $0x6,%eax
f0114a91:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114a94:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114a9b:	99                   	cltd   
f0114a9c:	f7 fb                	idiv   %ebx
f0114a9e:	89 c3                	mov    %eax,%ebx
f0114aa0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114aa3:	c1 e0 06             	shl    $0x6,%eax
f0114aa6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114aa9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ab0:	99                   	cltd   
f0114ab1:	f7 fe                	idiv   %esi
f0114ab3:	01 d8                	add    %ebx,%eax
f0114ab5:	39 c1                	cmp    %eax,%ecx
f0114ab7:	74 54                	je     f0114b0d <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114ab9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114abc:	c1 e0 06             	shl    $0x6,%eax
f0114abf:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ac2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114ac9:	99                   	cltd   
f0114aca:	f7 ff                	idiv   %edi
f0114acc:	89 c1                	mov    %eax,%ecx
f0114ace:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ad1:	c1 e0 06             	shl    $0x6,%eax
f0114ad4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ad7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114ade:	99                   	cltd   
f0114adf:	f7 fb                	idiv   %ebx
f0114ae1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114ae4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ae7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114aea:	83 ec 08             	sub    $0x8,%esp
f0114aed:	52                   	push   %edx
f0114aee:	50                   	push   %eax
f0114aef:	ff 75 9c             	pushl  -0x64(%ebp)
f0114af2:	68 0c aa 13 f0       	push   $0xf013aa0c
f0114af7:	68 42 05 00 00       	push   $0x542
f0114afc:	68 de 8f 13 f0       	push   $0xf0138fde
f0114b01:	e8 0d b9 fe ff       	call   f0100413 <_warn>
f0114b06:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b0d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b11:	74 04                	je     f0114b17 <test_allocate_chunk+0x665>
f0114b13:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114b1b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114b22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b25:	c1 e0 06             	shl    $0x6,%eax
f0114b28:	83 ec 08             	sub    $0x8,%esp
f0114b2b:	6a 03                	push   $0x3
f0114b2d:	6a 00                	push   $0x0
f0114b2f:	6a 00                	push   $0x0
f0114b31:	68 07 0e 00 00       	push   $0xe07
f0114b36:	68 07 0e 00 00       	push   $0xe07
f0114b3b:	6a 01                	push   $0x1
f0114b3d:	50                   	push   %eax
f0114b3e:	68 00 00 00 80       	push   $0x80000000
f0114b43:	6a 00                	push   $0x0
f0114b45:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b48:	e8 3b 1a 00 00       	call   f0116588 <CCP>
f0114b4d:	83 c4 30             	add    $0x30,%esp
f0114b50:	85 c0                	test   %eax,%eax
f0114b52:	75 25                	jne    f0114b79 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114b54:	83 ec 04             	sub    $0x4,%esp
f0114b57:	68 48 a9 13 f0       	push   $0xf013a948
f0114b5c:	68 4b 05 00 00       	push   $0x54b
f0114b61:	68 de 8f 13 f0       	push   $0xf0138fde
f0114b66:	e8 a8 b8 fe ff       	call   f0100413 <_warn>
f0114b6b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114b72:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114b79:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b7d:	74 04                	je     f0114b83 <test_allocate_chunk+0x6d1>
f0114b7f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b83:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114b87:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114b8b:	74 6f                	je     f0114bfc <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114b8d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114b90:	01 c0                	add    %eax,%eax
f0114b92:	05 00 00 00 80       	add    $0x80000000,%eax
f0114b97:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114b9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b9d:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114ba0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ba3:	89 d0                	mov    %edx,%eax
f0114ba5:	c1 e0 02             	shl    $0x2,%eax
f0114ba8:	01 d0                	add    %edx,%eax
f0114baa:	01 c0                	add    %eax,%eax
f0114bac:	01 d0                	add    %edx,%eax
f0114bae:	01 c0                	add    %eax,%eax
f0114bb0:	05 00 00 00 80       	add    $0x80000000,%eax
f0114bb5:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114bb8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bbb:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114bbe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bc1:	8a 00                	mov    (%eax),%al
f0114bc3:	3c 4b                	cmp    $0x4b,%al
f0114bc5:	75 09                	jne    f0114bd0 <test_allocate_chunk+0x71e>
f0114bc7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bca:	8a 00                	mov    (%eax),%al
f0114bcc:	3c 4d                	cmp    $0x4d,%al
f0114bce:	74 1e                	je     f0114bee <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114bd0:	83 ec 04             	sub    $0x4,%esp
f0114bd3:	68 94 a9 13 f0       	push   $0xf013a994
f0114bd8:	68 59 05 00 00       	push   $0x559
f0114bdd:	68 de 8f 13 f0       	push   $0xf0138fde
f0114be2:	e8 2c b8 fe ff       	call   f0100413 <_warn>
f0114be7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114bea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114bee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bf2:	74 04                	je     f0114bf8 <test_allocate_chunk+0x746>
f0114bf4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114bf8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114bfc:	83 ec 0c             	sub    $0xc,%esp
f0114bff:	68 38 a8 13 f0       	push   $0xf013a838
f0114c04:	e8 05 c1 fe ff       	call   f0100d0e <cprintf>
f0114c09:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114c0c:	83 ec 0c             	sub    $0xc,%esp
f0114c0f:	68 e8 aa 13 f0       	push   $0xf013aae8
f0114c14:	e8 f5 c0 fe ff       	call   f0100d0e <cprintf>
f0114c19:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c1c:	e8 90 83 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114c21:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114c24:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114c27:	89 d0                	mov    %edx,%eax
f0114c29:	01 c0                	add    %eax,%eax
f0114c2b:	01 d0                	add    %edx,%eax
f0114c2d:	01 c0                	add    %eax,%eax
f0114c2f:	01 d0                	add    %edx,%eax
f0114c31:	68 04 0e 00 00       	push   $0xe04
f0114c36:	50                   	push   %eax
f0114c37:	68 00 fc 3f 40       	push   $0x403ffc00
f0114c3c:	ff 75 d0             	pushl  -0x30(%ebp)
f0114c3f:	e8 e8 41 ff ff       	call   f0108e2c <allocate_chunk>
f0114c44:	83 c4 10             	add    $0x10,%esp
f0114c47:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c4a:	e8 62 83 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0114c4f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114c52:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114c56:	75 0b                	jne    f0114c63 <test_allocate_chunk+0x7b1>
f0114c58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c5b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c5e:	83 f8 05             	cmp    $0x5,%eax
f0114c61:	74 2a                	je     f0114c8d <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114c63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c66:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c69:	83 ec 08             	sub    $0x8,%esp
f0114c6c:	6a 05                	push   $0x5
f0114c6e:	50                   	push   %eax
f0114c6f:	ff 75 98             	pushl  -0x68(%ebp)
f0114c72:	68 0c aa 13 f0       	push   $0xf013aa0c
f0114c77:	68 70 05 00 00       	push   $0x570
f0114c7c:	68 de 8f 13 f0       	push   $0xf0138fde
f0114c81:	e8 8d b7 fe ff       	call   f0100413 <_warn>
f0114c86:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c89:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c8d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c91:	74 04                	je     f0114c97 <test_allocate_chunk+0x7e5>
f0114c93:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c97:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114c9b:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114ca2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ca5:	89 d0                	mov    %edx,%eax
f0114ca7:	01 c0                	add    %eax,%eax
f0114ca9:	01 d0                	add    %edx,%eax
f0114cab:	c1 e0 02             	shl    $0x2,%eax
f0114cae:	83 ec 08             	sub    $0x8,%esp
f0114cb1:	6a 03                	push   $0x3
f0114cb3:	6a 00                	push   $0x0
f0114cb5:	6a 00                	push   $0x0
f0114cb7:	68 07 0e 00 00       	push   $0xe07
f0114cbc:	68 05 0e 00 00       	push   $0xe05
f0114cc1:	6a 01                	push   $0x1
f0114cc3:	50                   	push   %eax
f0114cc4:	68 00 f0 3f 40       	push   $0x403ff000
f0114cc9:	6a 00                	push   $0x0
f0114ccb:	ff 75 d0             	pushl  -0x30(%ebp)
f0114cce:	e8 b5 18 00 00       	call   f0116588 <CCP>
f0114cd3:	83 c4 30             	add    $0x30,%esp
f0114cd6:	85 c0                	test   %eax,%eax
f0114cd8:	75 25                	jne    f0114cff <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114cda:	83 ec 04             	sub    $0x4,%esp
f0114cdd:	68 48 a9 13 f0       	push   $0xf013a948
f0114ce2:	68 79 05 00 00       	push   $0x579
f0114ce7:	68 de 8f 13 f0       	push   $0xf0138fde
f0114cec:	e8 22 b7 fe ff       	call   f0100413 <_warn>
f0114cf1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114cf4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114cf8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114cff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d03:	74 04                	je     f0114d09 <test_allocate_chunk+0x857>
f0114d05:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d09:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114d0d:	83 ec 0c             	sub    $0xc,%esp
f0114d10:	68 1f ab 13 f0       	push   $0xf013ab1f
f0114d15:	e8 f4 bf fe ff       	call   f0100d0e <cprintf>
f0114d1a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114d1d:	83 ec 08             	sub    $0x8,%esp
f0114d20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114d23:	68 30 ab 13 f0       	push   $0xf013ab30
f0114d28:	e8 e1 bf fe ff       	call   f0100d0e <cprintf>
f0114d2d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114d30:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114d34:	75 10                	jne    f0114d46 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114d36:	83 ec 0c             	sub    $0xc,%esp
f0114d39:	68 64 ab 13 f0       	push   $0xf013ab64
f0114d3e:	e8 cb bf fe ff       	call   f0100d0e <cprintf>
f0114d43:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114d46:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f0114d4b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114d4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d51:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114d54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114d59:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114d5c:	5b                   	pop    %ebx
f0114d5d:	5e                   	pop    %esi
f0114d5e:	5f                   	pop    %edi
f0114d5f:	5d                   	pop    %ebp
f0114d60:	c3                   	ret    

f0114d61 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114d61:	55                   	push   %ebp
f0114d62:	89 e5                	mov    %esp,%ebp
f0114d64:	57                   	push   %edi
f0114d65:	56                   	push   %esi
f0114d66:	53                   	push   %ebx
f0114d67:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114d6d:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114d70:	bb 78 9a 13 f0       	mov    $0xf0139a78,%ebx
f0114d75:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114d7a:	89 c7                	mov    %eax,%edi
f0114d7c:	89 de                	mov    %ebx,%esi
f0114d7e:	89 d1                	mov    %edx,%ecx
f0114d80:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114d82:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114d85:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114d8a:	b0 00                	mov    $0x0,%al
f0114d8c:	89 d7                	mov    %edx,%edi
f0114d8e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114d90:	6a 00                	push   $0x0
f0114d92:	6a 0a                	push   $0xa
f0114d94:	6a 14                	push   $0x14
f0114d96:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114d99:	50                   	push   %eax
f0114d9a:	e8 d9 44 ff ff       	call   f0109278 <env_create>
f0114d9f:	83 c4 10             	add    $0x10,%esp
f0114da2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114da5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114da8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114dab:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114dae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114db1:	8b 40 60             	mov    0x60(%eax),%eax
f0114db4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114db7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dba:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114dbd:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114dc4:	75 70 20 
f0114dc7:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114dce:	00 00 00 
f0114dd1:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114dd4:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114dd9:	b8 00 00 00 00       	mov    $0x0,%eax
f0114dde:	89 d7                	mov    %edx,%edi
f0114de0:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114de2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114de5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114de8:	83 ec 08             	sub    $0x8,%esp
f0114deb:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114df1:	52                   	push   %edx
f0114df2:	50                   	push   %eax
f0114df3:	e8 5b cd 01 00       	call   f0131b53 <ltostr>
f0114df8:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114dfb:	83 ec 04             	sub    $0x4,%esp
f0114dfe:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114e04:	50                   	push   %eax
f0114e05:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114e0b:	50                   	push   %eax
f0114e0c:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114e12:	50                   	push   %eax
f0114e13:	e8 33 ce 01 00       	call   f0131c4b <strcconcat>
f0114e18:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114e1b:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114e22:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114e29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114e30:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114e37:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114e3b:	83 ec 0c             	sub    $0xc,%esp
f0114e3e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e41:	e8 0e 17 00 00       	call   f0116554 <ClearUserSpace>
f0114e46:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114e49:	83 ec 0c             	sub    $0xc,%esp
f0114e4c:	68 a4 ab 13 f0       	push   $0xf013aba4
f0114e51:	e8 b8 be fe ff       	call   f0100d0e <cprintf>
f0114e56:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114e59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114e5c:	c1 e0 03             	shl    $0x3,%eax
f0114e5f:	83 ec 04             	sub    $0x4,%esp
f0114e62:	50                   	push   %eax
f0114e63:	6a 00                	push   $0x0
f0114e65:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e68:	e8 da 41 ff ff       	call   f0109047 <calculate_required_frames>
f0114e6d:	83 c4 10             	add    $0x10,%esp
f0114e70:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114e73:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114e77:	74 23                	je     f0114e9c <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114e79:	83 ec 0c             	sub    $0xc,%esp
f0114e7c:	6a 03                	push   $0x3
f0114e7e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e81:	68 d8 ab 13 f0       	push   $0xf013abd8
f0114e86:	68 b2 05 00 00       	push   $0x5b2
f0114e8b:	68 de 8f 13 f0       	push   $0xf0138fde
f0114e90:	e8 7e b5 fe ff       	call   f0100413 <_warn>
f0114e95:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ea0:	74 04                	je     f0114ea6 <test_calculate_required_frames+0x145>
f0114ea2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ea6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114eaa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ead:	c1 e0 02             	shl    $0x2,%eax
f0114eb0:	83 ec 04             	sub    $0x4,%esp
f0114eb3:	50                   	push   %eax
f0114eb4:	6a 00                	push   $0x0
f0114eb6:	ff 75 d8             	pushl  -0x28(%ebp)
f0114eb9:	e8 89 41 ff ff       	call   f0109047 <calculate_required_frames>
f0114ebe:	83 c4 10             	add    $0x10,%esp
f0114ec1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114ec4:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114ecb:	74 26                	je     f0114ef3 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114ecd:	83 ec 0c             	sub    $0xc,%esp
f0114ed0:	68 01 04 00 00       	push   $0x401
f0114ed5:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ed8:	68 d8 ab 13 f0       	push   $0xf013abd8
f0114edd:	68 bc 05 00 00       	push   $0x5bc
f0114ee2:	68 de 8f 13 f0       	push   $0xf0138fde
f0114ee7:	e8 27 b5 fe ff       	call   f0100413 <_warn>
f0114eec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114eef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ef3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ef7:	74 04                	je     f0114efd <test_calculate_required_frames+0x19c>
f0114ef9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114efd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114f01:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f04:	c1 e0 0a             	shl    $0xa,%eax
f0114f07:	83 ec 04             	sub    $0x4,%esp
f0114f0a:	50                   	push   %eax
f0114f0b:	6a 00                	push   $0x0
f0114f0d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f10:	e8 32 41 ff ff       	call   f0109047 <calculate_required_frames>
f0114f15:	83 c4 10             	add    $0x10,%esp
f0114f18:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114f1b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f1e:	c1 e0 0a             	shl    $0xa,%eax
f0114f21:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f24:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f2b:	99                   	cltd   
f0114f2c:	f7 fb                	idiv   %ebx
f0114f2e:	89 c1                	mov    %eax,%ecx
f0114f30:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f33:	c1 e0 0a             	shl    $0xa,%eax
f0114f36:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114f39:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114f40:	99                   	cltd   
f0114f41:	f7 fe                	idiv   %esi
f0114f43:	01 c8                	add    %ecx,%eax
f0114f45:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114f48:	74 4c                	je     f0114f96 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114f4a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f4d:	c1 e0 0a             	shl    $0xa,%eax
f0114f50:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f53:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f5a:	99                   	cltd   
f0114f5b:	f7 fb                	idiv   %ebx
f0114f5d:	89 c1                	mov    %eax,%ecx
f0114f5f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114f62:	c1 e0 0a             	shl    $0xa,%eax
f0114f65:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114f68:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114f6f:	99                   	cltd   
f0114f70:	f7 fe                	idiv   %esi
f0114f72:	01 c8                	add    %ecx,%eax
f0114f74:	83 ec 0c             	sub    $0xc,%esp
f0114f77:	50                   	push   %eax
f0114f78:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f7b:	68 d8 ab 13 f0       	push   $0xf013abd8
f0114f80:	68 c6 05 00 00       	push   $0x5c6
f0114f85:	68 de 8f 13 f0       	push   $0xf0138fde
f0114f8a:	e8 84 b4 fe ff       	call   f0100413 <_warn>
f0114f8f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f92:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f96:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f9a:	74 04                	je     f0114fa0 <test_calculate_required_frames+0x23f>
f0114f9c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fa0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114fa4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114fa7:	89 d0                	mov    %edx,%eax
f0114fa9:	01 c0                	add    %eax,%eax
f0114fab:	01 d0                	add    %edx,%eax
f0114fad:	01 c0                	add    %eax,%eax
f0114faf:	83 ec 04             	sub    $0x4,%esp
f0114fb2:	50                   	push   %eax
f0114fb3:	68 00 10 00 00       	push   $0x1000
f0114fb8:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fbb:	e8 87 40 ff ff       	call   f0109047 <calculate_required_frames>
f0114fc0:	83 c4 10             	add    $0x10,%esp
f0114fc3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114fc6:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114fca:	74 23                	je     f0114fef <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114fcc:	83 ec 0c             	sub    $0xc,%esp
f0114fcf:	6a 03                	push   $0x3
f0114fd1:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fd4:	68 d8 ab 13 f0       	push   $0xf013abd8
f0114fd9:	68 d2 05 00 00       	push   $0x5d2
f0114fde:	68 de 8f 13 f0       	push   $0xf0138fde
f0114fe3:	e8 2b b4 fe ff       	call   f0100413 <_warn>
f0114fe8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114feb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ff3:	74 04                	je     f0114ff9 <test_calculate_required_frames+0x298>
f0114ff5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ff9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114ffd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115000:	89 c2                	mov    %eax,%edx
f0115002:	01 d2                	add    %edx,%edx
f0115004:	01 d0                	add    %edx,%eax
f0115006:	83 ec 04             	sub    $0x4,%esp
f0115009:	50                   	push   %eax
f011500a:	68 00 18 00 00       	push   $0x1800
f011500f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115012:	e8 30 40 ff ff       	call   f0109047 <calculate_required_frames>
f0115017:	83 c4 10             	add    $0x10,%esp
f011501a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011501d:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115021:	74 23                	je     f0115046 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115023:	83 ec 0c             	sub    $0xc,%esp
f0115026:	6a 03                	push   $0x3
f0115028:	ff 75 c8             	pushl  -0x38(%ebp)
f011502b:	68 d8 ab 13 f0       	push   $0xf013abd8
f0115030:	68 dc 05 00 00       	push   $0x5dc
f0115035:	68 de 8f 13 f0       	push   $0xf0138fde
f011503a:	e8 d4 b3 fe ff       	call   f0100413 <_warn>
f011503f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115042:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115046:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011504a:	74 04                	je     f0115050 <test_calculate_required_frames+0x2ef>
f011504c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115050:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115054:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115057:	89 d0                	mov    %edx,%eax
f0115059:	c1 e0 02             	shl    $0x2,%eax
f011505c:	01 d0                	add    %edx,%eax
f011505e:	01 c0                	add    %eax,%eax
f0115060:	83 ec 04             	sub    $0x4,%esp
f0115063:	50                   	push   %eax
f0115064:	68 00 00 40 00       	push   $0x400000
f0115069:	ff 75 d8             	pushl  -0x28(%ebp)
f011506c:	e8 d6 3f ff ff       	call   f0109047 <calculate_required_frames>
f0115071:	83 c4 10             	add    $0x10,%esp
f0115074:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115077:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011507e:	74 26                	je     f01150a6 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115080:	83 ec 0c             	sub    $0xc,%esp
f0115083:	68 03 0a 00 00       	push   $0xa03
f0115088:	ff 75 c8             	pushl  -0x38(%ebp)
f011508b:	68 d8 ab 13 f0       	push   $0xf013abd8
f0115090:	68 e6 05 00 00       	push   $0x5e6
f0115095:	68 de 8f 13 f0       	push   $0xf0138fde
f011509a:	e8 74 b3 fe ff       	call   f0100413 <_warn>
f011509f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01150a6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150aa:	74 04                	je     f01150b0 <test_calculate_required_frames+0x34f>
f01150ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150b0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01150b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150b7:	01 c0                	add    %eax,%eax
f01150b9:	83 ec 04             	sub    $0x4,%esp
f01150bc:	50                   	push   %eax
f01150bd:	68 00 00 70 00       	push   $0x700000
f01150c2:	ff 75 d8             	pushl  -0x28(%ebp)
f01150c5:	e8 7d 3f ff ff       	call   f0109047 <calculate_required_frames>
f01150ca:	83 c4 10             	add    $0x10,%esp
f01150cd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01150d0:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01150d7:	74 26                	je     f01150ff <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01150d9:	83 ec 0c             	sub    $0xc,%esp
f01150dc:	68 02 02 00 00       	push   $0x202
f01150e1:	ff 75 c8             	pushl  -0x38(%ebp)
f01150e4:	68 d8 ab 13 f0       	push   $0xf013abd8
f01150e9:	68 f2 05 00 00       	push   $0x5f2
f01150ee:	68 de 8f 13 f0       	push   $0xf0138fde
f01150f3:	e8 1b b3 fe ff       	call   f0100413 <_warn>
f01150f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01150ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115103:	74 04                	je     f0115109 <test_calculate_required_frames+0x3a8>
f0115105:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115109:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011510d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115110:	83 ec 04             	sub    $0x4,%esp
f0115113:	50                   	push   %eax
f0115114:	68 ff ff 3f 00       	push   $0x3fffff
f0115119:	ff 75 d8             	pushl  -0x28(%ebp)
f011511c:	e8 26 3f ff ff       	call   f0109047 <calculate_required_frames>
f0115121:	83 c4 10             	add    $0x10,%esp
f0115124:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115127:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f011512b:	74 23                	je     f0115150 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011512d:	83 ec 0c             	sub    $0xc,%esp
f0115130:	6a 04                	push   $0x4
f0115132:	ff 75 c8             	pushl  -0x38(%ebp)
f0115135:	68 d8 ab 13 f0       	push   $0xf013abd8
f011513a:	68 fc 05 00 00       	push   $0x5fc
f011513f:	68 de 8f 13 f0       	push   $0xf0138fde
f0115144:	e8 ca b2 fe ff       	call   f0100413 <_warn>
f0115149:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011514c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115150:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115154:	74 04                	je     f011515a <test_calculate_required_frames+0x3f9>
f0115156:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011515a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011515e:	83 ec 0c             	sub    $0xc,%esp
f0115161:	68 29 a7 13 f0       	push   $0xf013a729
f0115166:	e8 a3 bb fe ff       	call   f0100d0e <cprintf>
f011516b:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011516e:	83 ec 0c             	sub    $0xc,%esp
f0115171:	68 30 ac 13 f0       	push   $0xf013ac30
f0115176:	e8 93 bb fe ff       	call   f0100d0e <cprintf>
f011517b:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011517e:	83 ec 04             	sub    $0x4,%esp
f0115181:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115187:	50                   	push   %eax
f0115188:	68 e2 9a 13 f0       	push   $0xf0139ae2
f011518d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115193:	50                   	push   %eax
f0115194:	e8 b2 ca 01 00       	call   f0131c4b <strcconcat>
f0115199:	83 c4 10             	add    $0x10,%esp
f011519c:	83 ec 0c             	sub    $0xc,%esp
f011519f:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01151a5:	50                   	push   %eax
f01151a6:	e8 c5 bb fe ff       	call   f0100d70 <execute_command>
f01151ab:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01151ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151b1:	c1 e0 03             	shl    $0x3,%eax
f01151b4:	83 ec 04             	sub    $0x4,%esp
f01151b7:	50                   	push   %eax
f01151b8:	6a 00                	push   $0x0
f01151ba:	ff 75 d8             	pushl  -0x28(%ebp)
f01151bd:	e8 85 3e ff ff       	call   f0109047 <calculate_required_frames>
f01151c2:	83 c4 10             	add    $0x10,%esp
f01151c5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01151c8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01151cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01151d2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01151d5:	74 24                	je     f01151fb <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01151d7:	83 ec 0c             	sub    $0xc,%esp
f01151da:	ff 75 c4             	pushl  -0x3c(%ebp)
f01151dd:	ff 75 c8             	pushl  -0x38(%ebp)
f01151e0:	68 d8 ab 13 f0       	push   $0xf013abd8
f01151e5:	68 10 06 00 00       	push   $0x610
f01151ea:	68 de 8f 13 f0       	push   $0xf0138fde
f01151ef:	e8 1f b2 fe ff       	call   f0100413 <_warn>
f01151f4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151f7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151fb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151ff:	74 04                	je     f0115205 <test_calculate_required_frames+0x4a4>
f0115201:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115205:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115209:	83 ec 04             	sub    $0x4,%esp
f011520c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115212:	50                   	push   %eax
f0115213:	68 ef 9a 13 f0       	push   $0xf0139aef
f0115218:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011521e:	50                   	push   %eax
f011521f:	e8 27 ca 01 00       	call   f0131c4b <strcconcat>
f0115224:	83 c4 10             	add    $0x10,%esp
f0115227:	83 ec 0c             	sub    $0xc,%esp
f011522a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115230:	50                   	push   %eax
f0115231:	e8 3a bb fe ff       	call   f0100d70 <execute_command>
f0115236:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115239:	83 ec 04             	sub    $0x4,%esp
f011523c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115242:	50                   	push   %eax
f0115243:	68 64 ac 13 f0       	push   $0xf013ac64
f0115248:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011524e:	50                   	push   %eax
f011524f:	e8 f7 c9 01 00       	call   f0131c4b <strcconcat>
f0115254:	83 c4 10             	add    $0x10,%esp
f0115257:	83 ec 0c             	sub    $0xc,%esp
f011525a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115260:	50                   	push   %eax
f0115261:	e8 0a bb fe ff       	call   f0100d70 <execute_command>
f0115266:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115269:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011526c:	c1 e0 03             	shl    $0x3,%eax
f011526f:	83 ec 04             	sub    $0x4,%esp
f0115272:	50                   	push   %eax
f0115273:	6a 00                	push   $0x0
f0115275:	ff 75 d8             	pushl  -0x28(%ebp)
f0115278:	e8 ca 3d ff ff       	call   f0109047 <calculate_required_frames>
f011527d:	83 c4 10             	add    $0x10,%esp
f0115280:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115283:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f011528a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011528d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115290:	74 24                	je     f01152b6 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115292:	83 ec 0c             	sub    $0xc,%esp
f0115295:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115298:	ff 75 c8             	pushl  -0x38(%ebp)
f011529b:	68 d8 ab 13 f0       	push   $0xf013abd8
f01152a0:	68 1e 06 00 00       	push   $0x61e
f01152a5:	68 de 8f 13 f0       	push   $0xf0138fde
f01152aa:	e8 64 b1 fe ff       	call   f0100413 <_warn>
f01152af:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152ba:	74 04                	je     f01152c0 <test_calculate_required_frames+0x55f>
f01152bc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01152c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152c7:	c1 e0 0a             	shl    $0xa,%eax
f01152ca:	83 ec 04             	sub    $0x4,%esp
f01152cd:	50                   	push   %eax
f01152ce:	6a 00                	push   $0x0
f01152d0:	ff 75 d8             	pushl  -0x28(%ebp)
f01152d3:	e8 6f 3d ff ff       	call   f0109047 <calculate_required_frames>
f01152d8:	83 c4 10             	add    $0x10,%esp
f01152db:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01152de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152e1:	c1 e0 0a             	shl    $0xa,%eax
f01152e4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01152e7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01152ee:	99                   	cltd   
f01152ef:	f7 fb                	idiv   %ebx
f01152f1:	89 c1                	mov    %eax,%ecx
f01152f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152f6:	c1 e0 0a             	shl    $0xa,%eax
f01152f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152fc:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115303:	99                   	cltd   
f0115304:	f7 fe                	idiv   %esi
f0115306:	01 c8                	add    %ecx,%eax
f0115308:	83 e8 05             	sub    $0x5,%eax
f011530b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f011530e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115311:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115314:	74 24                	je     f011533a <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115316:	83 ec 0c             	sub    $0xc,%esp
f0115319:	ff 75 c4             	pushl  -0x3c(%ebp)
f011531c:	ff 75 c8             	pushl  -0x38(%ebp)
f011531f:	68 d8 ab 13 f0       	push   $0xf013abd8
f0115324:	68 29 06 00 00       	push   $0x629
f0115329:	68 de 8f 13 f0       	push   $0xf0138fde
f011532e:	e8 e0 b0 fe ff       	call   f0100413 <_warn>
f0115333:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115336:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011533a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011533e:	74 04                	je     f0115344 <test_calculate_required_frames+0x5e3>
f0115340:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115344:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115348:	83 ec 04             	sub    $0x4,%esp
f011534b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115351:	50                   	push   %eax
f0115352:	68 70 ac 13 f0       	push   $0xf013ac70
f0115357:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011535d:	50                   	push   %eax
f011535e:	e8 e8 c8 01 00       	call   f0131c4b <strcconcat>
f0115363:	83 c4 10             	add    $0x10,%esp
f0115366:	83 ec 0c             	sub    $0xc,%esp
f0115369:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011536f:	50                   	push   %eax
f0115370:	e8 fb b9 fe ff       	call   f0100d70 <execute_command>
f0115375:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115378:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011537b:	89 c2                	mov    %eax,%edx
f011537d:	01 d2                	add    %edx,%edx
f011537f:	01 d0                	add    %edx,%eax
f0115381:	83 ec 04             	sub    $0x4,%esp
f0115384:	50                   	push   %eax
f0115385:	68 00 18 00 00       	push   $0x1800
f011538a:	ff 75 d8             	pushl  -0x28(%ebp)
f011538d:	e8 b5 3c ff ff       	call   f0109047 <calculate_required_frames>
f0115392:	83 c4 10             	add    $0x10,%esp
f0115395:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115398:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011539f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01153a2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01153a5:	74 24                	je     f01153cb <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01153a7:	83 ec 0c             	sub    $0xc,%esp
f01153aa:	ff 75 c4             	pushl  -0x3c(%ebp)
f01153ad:	ff 75 c8             	pushl  -0x38(%ebp)
f01153b0:	68 d8 ab 13 f0       	push   $0xf013abd8
f01153b5:	68 38 06 00 00       	push   $0x638
f01153ba:	68 de 8f 13 f0       	push   $0xf0138fde
f01153bf:	e8 4f b0 fe ff       	call   f0100413 <_warn>
f01153c4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153c7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153cb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153cf:	74 04                	je     f01153d5 <test_calculate_required_frames+0x674>
f01153d1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153d5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01153d9:	83 ec 04             	sub    $0x4,%esp
f01153dc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01153e2:	50                   	push   %eax
f01153e3:	68 48 9d 13 f0       	push   $0xf0139d48
f01153e8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153ee:	50                   	push   %eax
f01153ef:	e8 57 c8 01 00       	call   f0131c4b <strcconcat>
f01153f4:	83 c4 10             	add    $0x10,%esp
f01153f7:	83 ec 0c             	sub    $0xc,%esp
f01153fa:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115400:	50                   	push   %eax
f0115401:	e8 6a b9 fe ff       	call   f0100d70 <execute_command>
f0115406:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115409:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011540c:	89 d0                	mov    %edx,%eax
f011540e:	c1 e0 02             	shl    $0x2,%eax
f0115411:	01 d0                	add    %edx,%eax
f0115413:	01 c0                	add    %eax,%eax
f0115415:	83 ec 04             	sub    $0x4,%esp
f0115418:	50                   	push   %eax
f0115419:	68 00 00 40 00       	push   $0x400000
f011541e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115421:	e8 21 3c ff ff       	call   f0109047 <calculate_required_frames>
f0115426:	83 c4 10             	add    $0x10,%esp
f0115429:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011542c:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115433:	74 26                	je     f011545b <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115435:	83 ec 0c             	sub    $0xc,%esp
f0115438:	68 03 0a 00 00       	push   $0xa03
f011543d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115440:	68 d8 ab 13 f0       	push   $0xf013abd8
f0115445:	68 44 06 00 00       	push   $0x644
f011544a:	68 de 8f 13 f0       	push   $0xf0138fde
f011544f:	e8 bf af fe ff       	call   f0100413 <_warn>
f0115454:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115457:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011545b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011545f:	74 04                	je     f0115465 <test_calculate_required_frames+0x704>
f0115461:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115465:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115469:	83 ec 04             	sub    $0x4,%esp
f011546c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115472:	50                   	push   %eax
f0115473:	68 52 9d 13 f0       	push   $0xf0139d52
f0115478:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011547e:	50                   	push   %eax
f011547f:	e8 c7 c7 01 00       	call   f0131c4b <strcconcat>
f0115484:	83 c4 10             	add    $0x10,%esp
f0115487:	83 ec 0c             	sub    $0xc,%esp
f011548a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115490:	50                   	push   %eax
f0115491:	e8 da b8 fe ff       	call   f0100d70 <execute_command>
f0115496:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115499:	83 ec 04             	sub    $0x4,%esp
f011549c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01154a2:	50                   	push   %eax
f01154a3:	68 78 ac 13 f0       	push   $0xf013ac78
f01154a8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154ae:	50                   	push   %eax
f01154af:	e8 97 c7 01 00       	call   f0131c4b <strcconcat>
f01154b4:	83 c4 10             	add    $0x10,%esp
f01154b7:	83 ec 0c             	sub    $0xc,%esp
f01154ba:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01154c0:	50                   	push   %eax
f01154c1:	e8 aa b8 fe ff       	call   f0100d70 <execute_command>
f01154c6:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01154c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154cc:	01 c0                	add    %eax,%eax
f01154ce:	83 ec 04             	sub    $0x4,%esp
f01154d1:	50                   	push   %eax
f01154d2:	68 00 00 70 00       	push   $0x700000
f01154d7:	ff 75 d8             	pushl  -0x28(%ebp)
f01154da:	e8 68 3b ff ff       	call   f0109047 <calculate_required_frames>
f01154df:	83 c4 10             	add    $0x10,%esp
f01154e2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01154e5:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01154ec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01154ef:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01154f2:	74 24                	je     f0115518 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01154f4:	83 ec 0c             	sub    $0xc,%esp
f01154f7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01154fa:	ff 75 c8             	pushl  -0x38(%ebp)
f01154fd:	68 d8 ab 13 f0       	push   $0xf013abd8
f0115502:	68 54 06 00 00       	push   $0x654
f0115507:	68 de 8f 13 f0       	push   $0xf0138fde
f011550c:	e8 02 af fe ff       	call   f0100413 <_warn>
f0115511:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115514:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115518:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011551c:	74 04                	je     f0115522 <test_calculate_required_frames+0x7c1>
f011551e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115522:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115526:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115529:	83 ec 04             	sub    $0x4,%esp
f011552c:	50                   	push   %eax
f011552d:	68 ff ff 3f 00       	push   $0x3fffff
f0115532:	ff 75 d8             	pushl  -0x28(%ebp)
f0115535:	e8 0d 3b ff ff       	call   f0109047 <calculate_required_frames>
f011553a:	83 c4 10             	add    $0x10,%esp
f011553d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115540:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115547:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011554a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011554d:	74 24                	je     f0115573 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011554f:	83 ec 0c             	sub    $0xc,%esp
f0115552:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115555:	ff 75 c8             	pushl  -0x38(%ebp)
f0115558:	68 d8 ab 13 f0       	push   $0xf013abd8
f011555d:	68 5f 06 00 00       	push   $0x65f
f0115562:	68 de 8f 13 f0       	push   $0xf0138fde
f0115567:	e8 a7 ae fe ff       	call   f0100413 <_warn>
f011556c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011556f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115573:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115577:	74 04                	je     f011557d <test_calculate_required_frames+0x81c>
f0115579:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011557d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115581:	83 ec 0c             	sub    $0xc,%esp
f0115584:	68 03 9d 13 f0       	push   $0xf0139d03
f0115589:	e8 80 b7 fe ff       	call   f0100d0e <cprintf>
f011558e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115591:	83 ec 08             	sub    $0x8,%esp
f0115594:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115597:	68 84 ac 13 f0       	push   $0xf013ac84
f011559c:	e8 6d b7 fe ff       	call   f0100d0e <cprintf>
f01155a1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01155a4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01155a8:	75 10                	jne    f01155ba <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01155aa:	83 ec 0c             	sub    $0xc,%esp
f01155ad:	68 c4 ac 13 f0       	push   $0xf013acc4
f01155b2:	e8 57 b7 fe ff       	call   f0100d0e <cprintf>
f01155b7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01155ba:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f01155bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01155c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01155c5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01155c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01155cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01155d0:	5b                   	pop    %ebx
f01155d1:	5e                   	pop    %esi
f01155d2:	5f                   	pop    %edi
f01155d3:	5d                   	pop    %ebp
f01155d4:	c3                   	ret    

f01155d5 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01155d5:	55                   	push   %ebp
f01155d6:	89 e5                	mov    %esp,%ebp
f01155d8:	57                   	push   %edi
f01155d9:	56                   	push   %esi
f01155da:	53                   	push   %ebx
f01155db:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01155e1:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01155e4:	bb 78 9a 13 f0       	mov    $0xf0139a78,%ebx
f01155e9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01155ee:	89 c7                	mov    %eax,%edi
f01155f0:	89 de                	mov    %ebx,%esi
f01155f2:	89 d1                	mov    %edx,%ecx
f01155f4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01155f6:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01155f9:	b9 23 00 00 00       	mov    $0x23,%ecx
f01155fe:	b0 00                	mov    $0x0,%al
f0115600:	89 d7                	mov    %edx,%edi
f0115602:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115604:	6a 00                	push   $0x0
f0115606:	6a 0a                	push   $0xa
f0115608:	6a 14                	push   $0x14
f011560a:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011560d:	50                   	push   %eax
f011560e:	e8 65 3c ff ff       	call   f0109278 <env_create>
f0115613:	83 c4 10             	add    $0x10,%esp
f0115616:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115619:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011561c:	8b 40 5c             	mov    0x5c(%eax),%eax
f011561f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115622:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115625:	8b 40 60             	mov    0x60(%eax),%eax
f0115628:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011562b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011562e:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115631:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115638:	75 70 20 
f011563b:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115642:	00 00 00 
f0115645:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115648:	b9 03 00 00 00       	mov    $0x3,%ecx
f011564d:	b8 00 00 00 00       	mov    $0x0,%eax
f0115652:	89 d7                	mov    %edx,%edi
f0115654:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115656:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115659:	8b 40 4c             	mov    0x4c(%eax),%eax
f011565c:	83 ec 08             	sub    $0x8,%esp
f011565f:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115665:	52                   	push   %edx
f0115666:	50                   	push   %eax
f0115667:	e8 e7 c4 01 00       	call   f0131b53 <ltostr>
f011566c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011566f:	83 ec 04             	sub    $0x4,%esp
f0115672:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115678:	50                   	push   %eax
f0115679:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011567f:	50                   	push   %eax
f0115680:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115686:	50                   	push   %eax
f0115687:	e8 bf c5 01 00       	call   f0131c4b <strcconcat>
f011568c:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011568f:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115696:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011569d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01156a4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01156a8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156af:	00 00 00 
	uint32 num_tables = 0;
f01156b2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156b9:	00 00 00 
	ClearUserSpace(proc_directory);
f01156bc:	83 ec 0c             	sub    $0xc,%esp
f01156bf:	ff 75 d8             	pushl  -0x28(%ebp)
f01156c2:	e8 8d 0e 00 00       	call   f0116554 <ClearUserSpace>
f01156c7:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01156ca:	83 ec 0c             	sub    $0xc,%esp
f01156cd:	68 a4 ab 13 f0       	push   $0xf013aba4
f01156d2:	e8 37 b6 fe ff       	call   f0100d0e <cprintf>
f01156d7:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01156da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156dd:	c1 e0 03             	shl    $0x3,%eax
f01156e0:	89 c2                	mov    %eax,%edx
f01156e2:	83 ec 0c             	sub    $0xc,%esp
f01156e5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01156eb:	50                   	push   %eax
f01156ec:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01156f2:	50                   	push   %eax
f01156f3:	52                   	push   %edx
f01156f4:	6a 00                	push   $0x0
f01156f6:	ff 75 d8             	pushl  -0x28(%ebp)
f01156f9:	e8 54 38 ff ff       	call   f0108f52 <calculate_allocated_space>
f01156fe:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115701:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115707:	85 c0                	test   %eax,%eax
f0115709:	74 27                	je     f0115732 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011570b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115711:	83 ec 0c             	sub    $0xc,%esp
f0115714:	6a 00                	push   $0x0
f0115716:	50                   	push   %eax
f0115717:	68 10 ad 13 f0       	push   $0xf013ad10
f011571c:	68 94 06 00 00       	push   $0x694
f0115721:	68 de 8f 13 f0       	push   $0xf0138fde
f0115726:	e8 e8 ac fe ff       	call   f0100413 <_warn>
f011572b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011572e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115732:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115738:	85 c0                	test   %eax,%eax
f011573a:	74 27                	je     f0115763 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011573c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115742:	83 ec 0c             	sub    $0xc,%esp
f0115745:	6a 00                	push   $0x0
f0115747:	50                   	push   %eax
f0115748:	68 70 ad 13 f0       	push   $0xf013ad70
f011574d:	68 99 06 00 00       	push   $0x699
f0115752:	68 de 8f 13 f0       	push   $0xf0138fde
f0115757:	e8 b7 ac fe ff       	call   f0100413 <_warn>
f011575c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011575f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115763:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115767:	74 04                	je     f011576d <test_calculate_allocated_space+0x198>
f0115769:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011576d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115771:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115778:	00 00 00 
		num_pages = 0;
f011577b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115782:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115785:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115788:	c1 e0 02             	shl    $0x2,%eax
f011578b:	89 c2                	mov    %eax,%edx
f011578d:	83 ec 0c             	sub    $0xc,%esp
f0115790:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115796:	50                   	push   %eax
f0115797:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011579d:	50                   	push   %eax
f011579e:	52                   	push   %edx
f011579f:	6a 00                	push   $0x0
f01157a1:	ff 75 d8             	pushl  -0x28(%ebp)
f01157a4:	e8 a9 37 ff ff       	call   f0108f52 <calculate_allocated_space>
f01157a9:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01157ac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157b2:	85 c0                	test   %eax,%eax
f01157b4:	74 27                	je     f01157dd <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01157b6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157bc:	83 ec 0c             	sub    $0xc,%esp
f01157bf:	6a 00                	push   $0x0
f01157c1:	50                   	push   %eax
f01157c2:	68 10 ad 13 f0       	push   $0xf013ad10
f01157c7:	68 a5 06 00 00       	push   $0x6a5
f01157cc:	68 de 8f 13 f0       	push   $0xf0138fde
f01157d1:	e8 3d ac fe ff       	call   f0100413 <_warn>
f01157d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01157dd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157e3:	85 c0                	test   %eax,%eax
f01157e5:	74 27                	je     f011580e <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01157e7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157ed:	83 ec 0c             	sub    $0xc,%esp
f01157f0:	6a 00                	push   $0x0
f01157f2:	50                   	push   %eax
f01157f3:	68 70 ad 13 f0       	push   $0xf013ad70
f01157f8:	68 aa 06 00 00       	push   $0x6aa
f01157fd:	68 de 8f 13 f0       	push   $0xf0138fde
f0115802:	e8 0c ac fe ff       	call   f0100413 <_warn>
f0115807:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011580a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011580e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115812:	74 04                	je     f0115818 <test_calculate_allocated_space+0x243>
f0115814:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115818:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011581c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115823:	00 00 00 
		num_pages = 0;
f0115826:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011582d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115830:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115833:	c1 e0 0a             	shl    $0xa,%eax
f0115836:	89 c2                	mov    %eax,%edx
f0115838:	83 ec 0c             	sub    $0xc,%esp
f011583b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115841:	50                   	push   %eax
f0115842:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115848:	50                   	push   %eax
f0115849:	52                   	push   %edx
f011584a:	6a 00                	push   $0x0
f011584c:	ff 75 d8             	pushl  -0x28(%ebp)
f011584f:	e8 fe 36 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115854:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115857:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011585d:	85 c0                	test   %eax,%eax
f011585f:	74 27                	je     f0115888 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115861:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115867:	83 ec 0c             	sub    $0xc,%esp
f011586a:	6a 00                	push   $0x0
f011586c:	50                   	push   %eax
f011586d:	68 10 ad 13 f0       	push   $0xf013ad10
f0115872:	68 b6 06 00 00       	push   $0x6b6
f0115877:	68 de 8f 13 f0       	push   $0xf0138fde
f011587c:	e8 92 ab fe ff       	call   f0100413 <_warn>
f0115881:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115884:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115888:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011588e:	85 c0                	test   %eax,%eax
f0115890:	74 27                	je     f01158b9 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115892:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115898:	83 ec 0c             	sub    $0xc,%esp
f011589b:	6a 00                	push   $0x0
f011589d:	50                   	push   %eax
f011589e:	68 70 ad 13 f0       	push   $0xf013ad70
f01158a3:	68 bb 06 00 00       	push   $0x6bb
f01158a8:	68 de 8f 13 f0       	push   $0xf0138fde
f01158ad:	e8 61 ab fe ff       	call   f0100413 <_warn>
f01158b2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158bd:	74 04                	je     f01158c3 <test_calculate_allocated_space+0x2ee>
f01158bf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01158c7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01158ce:	00 00 00 
		num_pages = 0;
f01158d1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01158d8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01158db:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01158de:	89 d0                	mov    %edx,%eax
f01158e0:	01 c0                	add    %eax,%eax
f01158e2:	01 d0                	add    %edx,%eax
f01158e4:	01 c0                	add    %eax,%eax
f01158e6:	05 00 10 00 00       	add    $0x1000,%eax
f01158eb:	89 c2                	mov    %eax,%edx
f01158ed:	83 ec 0c             	sub    $0xc,%esp
f01158f0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158f6:	50                   	push   %eax
f01158f7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158fd:	50                   	push   %eax
f01158fe:	52                   	push   %edx
f01158ff:	68 00 10 00 00       	push   $0x1000
f0115904:	ff 75 d8             	pushl  -0x28(%ebp)
f0115907:	e8 46 36 ff ff       	call   f0108f52 <calculate_allocated_space>
f011590c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011590f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115915:	85 c0                	test   %eax,%eax
f0115917:	74 27                	je     f0115940 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115919:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011591f:	83 ec 0c             	sub    $0xc,%esp
f0115922:	6a 00                	push   $0x0
f0115924:	50                   	push   %eax
f0115925:	68 10 ad 13 f0       	push   $0xf013ad10
f011592a:	68 c8 06 00 00       	push   $0x6c8
f011592f:	68 de 8f 13 f0       	push   $0xf0138fde
f0115934:	e8 da aa fe ff       	call   f0100413 <_warn>
f0115939:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011593c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115940:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115946:	85 c0                	test   %eax,%eax
f0115948:	74 27                	je     f0115971 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011594a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115950:	83 ec 0c             	sub    $0xc,%esp
f0115953:	6a 00                	push   $0x0
f0115955:	50                   	push   %eax
f0115956:	68 70 ad 13 f0       	push   $0xf013ad70
f011595b:	68 cd 06 00 00       	push   $0x6cd
f0115960:	68 de 8f 13 f0       	push   $0xf0138fde
f0115965:	e8 a9 aa fe ff       	call   f0100413 <_warn>
f011596a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011596d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115971:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115975:	74 04                	je     f011597b <test_calculate_allocated_space+0x3a6>
f0115977:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011597b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f011597f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115986:	00 00 00 
		num_pages = 0;
f0115989:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115990:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115993:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115996:	89 c2                	mov    %eax,%edx
f0115998:	01 d2                	add    %edx,%edx
f011599a:	01 d0                	add    %edx,%eax
f011599c:	05 00 18 00 00       	add    $0x1800,%eax
f01159a1:	89 c2                	mov    %eax,%edx
f01159a3:	83 ec 0c             	sub    $0xc,%esp
f01159a6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159ac:	50                   	push   %eax
f01159ad:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159b3:	50                   	push   %eax
f01159b4:	52                   	push   %edx
f01159b5:	68 00 18 00 00       	push   $0x1800
f01159ba:	ff 75 d8             	pushl  -0x28(%ebp)
f01159bd:	e8 90 35 ff ff       	call   f0108f52 <calculate_allocated_space>
f01159c2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01159c5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159cb:	85 c0                	test   %eax,%eax
f01159cd:	74 27                	je     f01159f6 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01159cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159d5:	83 ec 0c             	sub    $0xc,%esp
f01159d8:	6a 00                	push   $0x0
f01159da:	50                   	push   %eax
f01159db:	68 10 ad 13 f0       	push   $0xf013ad10
f01159e0:	68 d9 06 00 00       	push   $0x6d9
f01159e5:	68 de 8f 13 f0       	push   $0xf0138fde
f01159ea:	e8 24 aa fe ff       	call   f0100413 <_warn>
f01159ef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159f2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01159f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159fc:	85 c0                	test   %eax,%eax
f01159fe:	74 27                	je     f0115a27 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a00:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a06:	83 ec 0c             	sub    $0xc,%esp
f0115a09:	6a 00                	push   $0x0
f0115a0b:	50                   	push   %eax
f0115a0c:	68 70 ad 13 f0       	push   $0xf013ad70
f0115a11:	68 de 06 00 00       	push   $0x6de
f0115a16:	68 de 8f 13 f0       	push   $0xf0138fde
f0115a1b:	e8 f3 a9 fe ff       	call   f0100413 <_warn>
f0115a20:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a23:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a27:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a2b:	74 04                	je     f0115a31 <test_calculate_allocated_space+0x45c>
f0115a2d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a31:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115a35:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a3c:	00 00 00 
		num_pages = 0;
f0115a3f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a46:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115a49:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115a4c:	89 d0                	mov    %edx,%eax
f0115a4e:	c1 e0 02             	shl    $0x2,%eax
f0115a51:	01 d0                	add    %edx,%eax
f0115a53:	01 c0                	add    %eax,%eax
f0115a55:	05 00 00 40 00       	add    $0x400000,%eax
f0115a5a:	89 c2                	mov    %eax,%edx
f0115a5c:	83 ec 0c             	sub    $0xc,%esp
f0115a5f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a65:	50                   	push   %eax
f0115a66:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a6c:	50                   	push   %eax
f0115a6d:	52                   	push   %edx
f0115a6e:	68 00 00 40 00       	push   $0x400000
f0115a73:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a76:	e8 d7 34 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115a7b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a7e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a84:	85 c0                	test   %eax,%eax
f0115a86:	74 27                	je     f0115aaf <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a8e:	83 ec 0c             	sub    $0xc,%esp
f0115a91:	6a 00                	push   $0x0
f0115a93:	50                   	push   %eax
f0115a94:	68 10 ad 13 f0       	push   $0xf013ad10
f0115a99:	68 ea 06 00 00       	push   $0x6ea
f0115a9e:	68 de 8f 13 f0       	push   $0xf0138fde
f0115aa3:	e8 6b a9 fe ff       	call   f0100413 <_warn>
f0115aa8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115aab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115aaf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ab5:	85 c0                	test   %eax,%eax
f0115ab7:	74 27                	je     f0115ae0 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ab9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115abf:	83 ec 0c             	sub    $0xc,%esp
f0115ac2:	6a 00                	push   $0x0
f0115ac4:	50                   	push   %eax
f0115ac5:	68 70 ad 13 f0       	push   $0xf013ad70
f0115aca:	68 ef 06 00 00       	push   $0x6ef
f0115acf:	68 de 8f 13 f0       	push   $0xf0138fde
f0115ad4:	e8 3a a9 fe ff       	call   f0100413 <_warn>
f0115ad9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115adc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ae0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ae4:	74 04                	je     f0115aea <test_calculate_allocated_space+0x515>
f0115ae6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115aea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115aee:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115af5:	00 00 00 
		num_pages = 0;
f0115af8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115aff:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115b02:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b05:	05 00 00 38 00       	add    $0x380000,%eax
f0115b0a:	01 c0                	add    %eax,%eax
f0115b0c:	89 c2                	mov    %eax,%edx
f0115b0e:	83 ec 0c             	sub    $0xc,%esp
f0115b11:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b17:	50                   	push   %eax
f0115b18:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b1e:	50                   	push   %eax
f0115b1f:	52                   	push   %edx
f0115b20:	68 00 00 70 00       	push   $0x700000
f0115b25:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b28:	e8 25 34 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115b2d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b30:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b36:	85 c0                	test   %eax,%eax
f0115b38:	74 27                	je     f0115b61 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b3a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b40:	83 ec 0c             	sub    $0xc,%esp
f0115b43:	6a 00                	push   $0x0
f0115b45:	50                   	push   %eax
f0115b46:	68 10 ad 13 f0       	push   $0xf013ad10
f0115b4b:	68 fc 06 00 00       	push   $0x6fc
f0115b50:	68 de 8f 13 f0       	push   $0xf0138fde
f0115b55:	e8 b9 a8 fe ff       	call   f0100413 <_warn>
f0115b5a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b5d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b61:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b67:	85 c0                	test   %eax,%eax
f0115b69:	74 27                	je     f0115b92 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b6b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b71:	83 ec 0c             	sub    $0xc,%esp
f0115b74:	6a 00                	push   $0x0
f0115b76:	50                   	push   %eax
f0115b77:	68 70 ad 13 f0       	push   $0xf013ad70
f0115b7c:	68 01 07 00 00       	push   $0x701
f0115b81:	68 de 8f 13 f0       	push   $0xf0138fde
f0115b86:	e8 88 a8 fe ff       	call   f0100413 <_warn>
f0115b8b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b8e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b92:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b96:	74 04                	je     f0115b9c <test_calculate_allocated_space+0x5c7>
f0115b98:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b9c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115ba0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ba7:	00 00 00 
		num_pages = 0;
f0115baa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bb1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115bb4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115bb7:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115bbc:	89 c2                	mov    %eax,%edx
f0115bbe:	83 ec 0c             	sub    $0xc,%esp
f0115bc1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bc7:	50                   	push   %eax
f0115bc8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bce:	50                   	push   %eax
f0115bcf:	52                   	push   %edx
f0115bd0:	68 ff ff 3f 00       	push   $0x3fffff
f0115bd5:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bd8:	e8 75 33 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115bdd:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115be0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115be6:	85 c0                	test   %eax,%eax
f0115be8:	74 27                	je     f0115c11 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115bea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bf0:	83 ec 0c             	sub    $0xc,%esp
f0115bf3:	6a 00                	push   $0x0
f0115bf5:	50                   	push   %eax
f0115bf6:	68 10 ad 13 f0       	push   $0xf013ad10
f0115bfb:	68 0d 07 00 00       	push   $0x70d
f0115c00:	68 de 8f 13 f0       	push   $0xf0138fde
f0115c05:	e8 09 a8 fe ff       	call   f0100413 <_warn>
f0115c0a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c0d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c11:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c17:	85 c0                	test   %eax,%eax
f0115c19:	74 27                	je     f0115c42 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c21:	83 ec 0c             	sub    $0xc,%esp
f0115c24:	6a 00                	push   $0x0
f0115c26:	50                   	push   %eax
f0115c27:	68 70 ad 13 f0       	push   $0xf013ad70
f0115c2c:	68 12 07 00 00       	push   $0x712
f0115c31:	68 de 8f 13 f0       	push   $0xf0138fde
f0115c36:	e8 d8 a7 fe ff       	call   f0100413 <_warn>
f0115c3b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c3e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c42:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c46:	74 04                	je     f0115c4c <test_calculate_allocated_space+0x677>
f0115c48:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c4c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115c50:	83 ec 0c             	sub    $0xc,%esp
f0115c53:	68 29 a7 13 f0       	push   $0xf013a729
f0115c58:	e8 b1 b0 fe ff       	call   f0100d0e <cprintf>
f0115c5d:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115c60:	83 ec 0c             	sub    $0xc,%esp
f0115c63:	68 30 ac 13 f0       	push   $0xf013ac30
f0115c68:	e8 a1 b0 fe ff       	call   f0100d0e <cprintf>
f0115c6d:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115c70:	83 ec 04             	sub    $0x4,%esp
f0115c73:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115c79:	50                   	push   %eax
f0115c7a:	68 e2 9a 13 f0       	push   $0xf0139ae2
f0115c7f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c85:	50                   	push   %eax
f0115c86:	e8 c0 bf 01 00       	call   f0131c4b <strcconcat>
f0115c8b:	83 c4 10             	add    $0x10,%esp
f0115c8e:	83 ec 0c             	sub    $0xc,%esp
f0115c91:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115c97:	50                   	push   %eax
f0115c98:	e8 d3 b0 fe ff       	call   f0100d70 <execute_command>
f0115c9d:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115ca0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ca7:	00 00 00 
		num_pages = 0;
f0115caa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115cb1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115cb4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115cb7:	c1 e0 03             	shl    $0x3,%eax
f0115cba:	89 c2                	mov    %eax,%edx
f0115cbc:	83 ec 0c             	sub    $0xc,%esp
f0115cbf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cc5:	50                   	push   %eax
f0115cc6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ccc:	50                   	push   %eax
f0115ccd:	52                   	push   %edx
f0115cce:	6a 00                	push   $0x0
f0115cd0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cd3:	e8 7a 32 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115cd8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115cdb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115ce2:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ce9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cef:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115cf2:	74 28                	je     f0115d1c <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115cf4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cfa:	83 ec 0c             	sub    $0xc,%esp
f0115cfd:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d00:	50                   	push   %eax
f0115d01:	68 10 ad 13 f0       	push   $0xf013ad10
f0115d06:	68 29 07 00 00       	push   $0x729
f0115d0b:	68 de 8f 13 f0       	push   $0xf0138fde
f0115d10:	e8 fe a6 fe ff       	call   f0100413 <_warn>
f0115d15:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d18:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115d1c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d22:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d25:	74 28                	je     f0115d4f <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115d27:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d2d:	83 ec 0c             	sub    $0xc,%esp
f0115d30:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115d33:	50                   	push   %eax
f0115d34:	68 70 ad 13 f0       	push   $0xf013ad70
f0115d39:	68 2e 07 00 00       	push   $0x72e
f0115d3e:	68 de 8f 13 f0       	push   $0xf0138fde
f0115d43:	e8 cb a6 fe ff       	call   f0100413 <_warn>
f0115d48:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d4f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d53:	74 04                	je     f0115d59 <test_calculate_allocated_space+0x784>
f0115d55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d59:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115d5d:	83 ec 04             	sub    $0x4,%esp
f0115d60:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115d66:	50                   	push   %eax
f0115d67:	68 ef 9a 13 f0       	push   $0xf0139aef
f0115d6c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d72:	50                   	push   %eax
f0115d73:	e8 d3 be 01 00       	call   f0131c4b <strcconcat>
f0115d78:	83 c4 10             	add    $0x10,%esp
f0115d7b:	83 ec 0c             	sub    $0xc,%esp
f0115d7e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115d84:	50                   	push   %eax
f0115d85:	e8 e6 af fe ff       	call   f0100d70 <execute_command>
f0115d8a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115d8d:	83 ec 04             	sub    $0x4,%esp
f0115d90:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115d96:	50                   	push   %eax
f0115d97:	68 64 ac 13 f0       	push   $0xf013ac64
f0115d9c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115da2:	50                   	push   %eax
f0115da3:	e8 a3 be 01 00       	call   f0131c4b <strcconcat>
f0115da8:	83 c4 10             	add    $0x10,%esp
f0115dab:	83 ec 0c             	sub    $0xc,%esp
f0115dae:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115db4:	50                   	push   %eax
f0115db5:	e8 b6 af fe ff       	call   f0100d70 <execute_command>
f0115dba:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115dbd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115dc4:	00 00 00 
		num_pages = 0;
f0115dc7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115dce:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115dd1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115dd4:	c1 e0 03             	shl    $0x3,%eax
f0115dd7:	89 c2                	mov    %eax,%edx
f0115dd9:	83 ec 0c             	sub    $0xc,%esp
f0115ddc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115de2:	50                   	push   %eax
f0115de3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115de9:	50                   	push   %eax
f0115dea:	52                   	push   %edx
f0115deb:	6a 00                	push   $0x0
f0115ded:	ff 75 d8             	pushl  -0x28(%ebp)
f0115df0:	e8 5d 31 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115df5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115df8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115dff:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115e06:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e0c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115e0f:	74 28                	je     f0115e39 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115e11:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e17:	83 ec 0c             	sub    $0xc,%esp
f0115e1a:	ff 75 c8             	pushl  -0x38(%ebp)
f0115e1d:	50                   	push   %eax
f0115e1e:	68 10 ad 13 f0       	push   $0xf013ad10
f0115e23:	68 3f 07 00 00       	push   $0x73f
f0115e28:	68 de 8f 13 f0       	push   $0xf0138fde
f0115e2d:	e8 e1 a5 fe ff       	call   f0100413 <_warn>
f0115e32:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115e39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e3f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e42:	74 28                	je     f0115e6c <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115e44:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e4a:	83 ec 0c             	sub    $0xc,%esp
f0115e4d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e50:	50                   	push   %eax
f0115e51:	68 70 ad 13 f0       	push   $0xf013ad70
f0115e56:	68 44 07 00 00       	push   $0x744
f0115e5b:	68 de 8f 13 f0       	push   $0xf0138fde
f0115e60:	e8 ae a5 fe ff       	call   f0100413 <_warn>
f0115e65:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e68:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e6c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e70:	74 04                	je     f0115e76 <test_calculate_allocated_space+0x8a1>
f0115e72:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e76:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115e7a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e81:	00 00 00 
		num_pages = 0;
f0115e84:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e8b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115e8e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e91:	c1 e0 0a             	shl    $0xa,%eax
f0115e94:	89 c2                	mov    %eax,%edx
f0115e96:	83 ec 0c             	sub    $0xc,%esp
f0115e99:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e9f:	50                   	push   %eax
f0115ea0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ea6:	50                   	push   %eax
f0115ea7:	52                   	push   %edx
f0115ea8:	6a 00                	push   $0x0
f0115eaa:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ead:	e8 a0 30 ff ff       	call   f0108f52 <calculate_allocated_space>
f0115eb2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115eb5:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115ebc:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ec3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ec9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115ecc:	74 28                	je     f0115ef6 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115ece:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ed4:	83 ec 0c             	sub    $0xc,%esp
f0115ed7:	ff 75 c8             	pushl  -0x38(%ebp)
f0115eda:	50                   	push   %eax
f0115edb:	68 10 ad 13 f0       	push   $0xf013ad10
f0115ee0:	68 52 07 00 00       	push   $0x752
f0115ee5:	68 de 8f 13 f0       	push   $0xf0138fde
f0115eea:	e8 24 a5 fe ff       	call   f0100413 <_warn>
f0115eef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ef2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115ef6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115efc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115eff:	74 28                	je     f0115f29 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115f01:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f07:	83 ec 0c             	sub    $0xc,%esp
f0115f0a:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115f0d:	50                   	push   %eax
f0115f0e:	68 70 ad 13 f0       	push   $0xf013ad70
f0115f13:	68 57 07 00 00       	push   $0x757
f0115f18:	68 de 8f 13 f0       	push   $0xf0138fde
f0115f1d:	e8 f1 a4 fe ff       	call   f0100413 <_warn>
f0115f22:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f25:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115f29:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f2d:	74 04                	je     f0115f33 <test_calculate_allocated_space+0x95e>
f0115f2f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115f33:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115f37:	83 ec 04             	sub    $0x4,%esp
f0115f3a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115f40:	50                   	push   %eax
f0115f41:	68 70 ac 13 f0       	push   $0xf013ac70
f0115f46:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f4c:	50                   	push   %eax
f0115f4d:	e8 f9 bc 01 00       	call   f0131c4b <strcconcat>
f0115f52:	83 c4 10             	add    $0x10,%esp
f0115f55:	83 ec 0c             	sub    $0xc,%esp
f0115f58:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115f5e:	50                   	push   %eax
f0115f5f:	e8 0c ae fe ff       	call   f0100d70 <execute_command>
f0115f64:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115f67:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f6e:	00 00 00 
		num_pages = 0;
f0115f71:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f78:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115f7b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115f7e:	89 c2                	mov    %eax,%edx
f0115f80:	01 d2                	add    %edx,%edx
f0115f82:	01 d0                	add    %edx,%eax
f0115f84:	05 00 18 00 00       	add    $0x1800,%eax
f0115f89:	89 c2                	mov    %eax,%edx
f0115f8b:	83 ec 0c             	sub    $0xc,%esp
f0115f8e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f94:	50                   	push   %eax
f0115f95:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f9b:	50                   	push   %eax
f0115f9c:	52                   	push   %edx
f0115f9d:	68 00 18 00 00       	push   $0x1800
f0115fa2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115fa5:	e8 a8 2f ff ff       	call   f0108f52 <calculate_allocated_space>
f0115faa:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115fad:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115fb4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115fbb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fc1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115fc4:	74 28                	je     f0115fee <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115fc6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fcc:	83 ec 0c             	sub    $0xc,%esp
f0115fcf:	ff 75 c8             	pushl  -0x38(%ebp)
f0115fd2:	50                   	push   %eax
f0115fd3:	68 10 ad 13 f0       	push   $0xf013ad10
f0115fd8:	68 68 07 00 00       	push   $0x768
f0115fdd:	68 de 8f 13 f0       	push   $0xf0138fde
f0115fe2:	e8 2c a4 fe ff       	call   f0100413 <_warn>
f0115fe7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115fee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ff4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ff7:	74 28                	je     f0116021 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ff9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fff:	83 ec 0c             	sub    $0xc,%esp
f0116002:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116005:	50                   	push   %eax
f0116006:	68 70 ad 13 f0       	push   $0xf013ad70
f011600b:	68 6d 07 00 00       	push   $0x76d
f0116010:	68 de 8f 13 f0       	push   $0xf0138fde
f0116015:	e8 f9 a3 fe ff       	call   f0100413 <_warn>
f011601a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011601d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116021:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116025:	74 04                	je     f011602b <test_calculate_allocated_space+0xa56>
f0116027:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011602b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011602f:	83 ec 04             	sub    $0x4,%esp
f0116032:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116038:	50                   	push   %eax
f0116039:	68 48 9d 13 f0       	push   $0xf0139d48
f011603e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116044:	50                   	push   %eax
f0116045:	e8 01 bc 01 00       	call   f0131c4b <strcconcat>
f011604a:	83 c4 10             	add    $0x10,%esp
f011604d:	83 ec 0c             	sub    $0xc,%esp
f0116050:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116056:	50                   	push   %eax
f0116057:	e8 14 ad fe ff       	call   f0100d70 <execute_command>
f011605c:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f011605f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116066:	00 00 00 
		num_pages = 0;
f0116069:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116070:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116073:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116076:	89 d0                	mov    %edx,%eax
f0116078:	c1 e0 02             	shl    $0x2,%eax
f011607b:	01 d0                	add    %edx,%eax
f011607d:	01 c0                	add    %eax,%eax
f011607f:	05 00 00 40 00       	add    $0x400000,%eax
f0116084:	89 c2                	mov    %eax,%edx
f0116086:	83 ec 0c             	sub    $0xc,%esp
f0116089:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011608f:	50                   	push   %eax
f0116090:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116096:	50                   	push   %eax
f0116097:	52                   	push   %edx
f0116098:	68 00 00 40 00       	push   $0x400000
f011609d:	ff 75 d8             	pushl  -0x28(%ebp)
f01160a0:	e8 ad 2e ff ff       	call   f0108f52 <calculate_allocated_space>
f01160a5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01160a8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01160af:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160b6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160bc:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01160bf:	74 28                	je     f01160e9 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01160c1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160c7:	83 ec 0c             	sub    $0xc,%esp
f01160ca:	ff 75 c8             	pushl  -0x38(%ebp)
f01160cd:	50                   	push   %eax
f01160ce:	68 10 ad 13 f0       	push   $0xf013ad10
f01160d3:	68 7d 07 00 00       	push   $0x77d
f01160d8:	68 de 8f 13 f0       	push   $0xf0138fde
f01160dd:	e8 31 a3 fe ff       	call   f0100413 <_warn>
f01160e2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160e5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01160e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160ef:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01160f2:	74 28                	je     f011611c <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01160f4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160fa:	83 ec 0c             	sub    $0xc,%esp
f01160fd:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116100:	50                   	push   %eax
f0116101:	68 70 ad 13 f0       	push   $0xf013ad70
f0116106:	68 82 07 00 00       	push   $0x782
f011610b:	68 de 8f 13 f0       	push   $0xf0138fde
f0116110:	e8 fe a2 fe ff       	call   f0100413 <_warn>
f0116115:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116118:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011611c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116120:	74 04                	je     f0116126 <test_calculate_allocated_space+0xb51>
f0116122:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116126:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011612a:	83 ec 04             	sub    $0x4,%esp
f011612d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116133:	50                   	push   %eax
f0116134:	68 52 9d 13 f0       	push   $0xf0139d52
f0116139:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011613f:	50                   	push   %eax
f0116140:	e8 06 bb 01 00       	call   f0131c4b <strcconcat>
f0116145:	83 c4 10             	add    $0x10,%esp
f0116148:	83 ec 0c             	sub    $0xc,%esp
f011614b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116151:	50                   	push   %eax
f0116152:	e8 19 ac fe ff       	call   f0100d70 <execute_command>
f0116157:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011615a:	83 ec 04             	sub    $0x4,%esp
f011615d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116163:	50                   	push   %eax
f0116164:	68 78 ac 13 f0       	push   $0xf013ac78
f0116169:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011616f:	50                   	push   %eax
f0116170:	e8 d6 ba 01 00       	call   f0131c4b <strcconcat>
f0116175:	83 c4 10             	add    $0x10,%esp
f0116178:	83 ec 0c             	sub    $0xc,%esp
f011617b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116181:	50                   	push   %eax
f0116182:	e8 e9 ab fe ff       	call   f0100d70 <execute_command>
f0116187:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011618a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116191:	00 00 00 
		num_pages = 0;
f0116194:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011619b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011619e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01161a1:	05 00 00 38 00       	add    $0x380000,%eax
f01161a6:	01 c0                	add    %eax,%eax
f01161a8:	89 c2                	mov    %eax,%edx
f01161aa:	83 ec 0c             	sub    $0xc,%esp
f01161ad:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161b3:	50                   	push   %eax
f01161b4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161ba:	50                   	push   %eax
f01161bb:	52                   	push   %edx
f01161bc:	68 00 00 70 00       	push   $0x700000
f01161c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01161c4:	e8 89 2d ff ff       	call   f0108f52 <calculate_allocated_space>
f01161c9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01161cc:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01161d3:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01161da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161e0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01161e3:	74 28                	je     f011620d <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01161e5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161eb:	83 ec 0c             	sub    $0xc,%esp
f01161ee:	ff 75 c8             	pushl  -0x38(%ebp)
f01161f1:	50                   	push   %eax
f01161f2:	68 10 ad 13 f0       	push   $0xf013ad10
f01161f7:	68 94 07 00 00       	push   $0x794
f01161fc:	68 de 8f 13 f0       	push   $0xf0138fde
f0116201:	e8 0d a2 fe ff       	call   f0100413 <_warn>
f0116206:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116209:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011620d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116213:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116216:	74 28                	je     f0116240 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116218:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011621e:	83 ec 0c             	sub    $0xc,%esp
f0116221:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116224:	50                   	push   %eax
f0116225:	68 70 ad 13 f0       	push   $0xf013ad70
f011622a:	68 99 07 00 00       	push   $0x799
f011622f:	68 de 8f 13 f0       	push   $0xf0138fde
f0116234:	e8 da a1 fe ff       	call   f0100413 <_warn>
f0116239:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011623c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116240:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116244:	74 04                	je     f011624a <test_calculate_allocated_space+0xc75>
f0116246:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011624a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011624e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116255:	00 00 00 
		num_pages = 0;
f0116258:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011625f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116262:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116265:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011626a:	89 c2                	mov    %eax,%edx
f011626c:	83 ec 0c             	sub    $0xc,%esp
f011626f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116275:	50                   	push   %eax
f0116276:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011627c:	50                   	push   %eax
f011627d:	52                   	push   %edx
f011627e:	68 ff ff 3f 00       	push   $0x3fffff
f0116283:	ff 75 d8             	pushl  -0x28(%ebp)
f0116286:	e8 c7 2c ff ff       	call   f0108f52 <calculate_allocated_space>
f011628b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011628e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116295:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011629c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162a2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162a5:	74 28                	je     f01162cf <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162ad:	83 ec 0c             	sub    $0xc,%esp
f01162b0:	ff 75 c8             	pushl  -0x38(%ebp)
f01162b3:	50                   	push   %eax
f01162b4:	68 10 ad 13 f0       	push   $0xf013ad10
f01162b9:	68 a7 07 00 00       	push   $0x7a7
f01162be:	68 de 8f 13 f0       	push   $0xf0138fde
f01162c3:	e8 4b a1 fe ff       	call   f0100413 <_warn>
f01162c8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162cb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162cf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162d5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01162d8:	74 28                	je     f0116302 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01162da:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162e0:	83 ec 0c             	sub    $0xc,%esp
f01162e3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162e6:	50                   	push   %eax
f01162e7:	68 70 ad 13 f0       	push   $0xf013ad70
f01162ec:	68 ac 07 00 00       	push   $0x7ac
f01162f1:	68 de 8f 13 f0       	push   $0xf0138fde
f01162f6:	e8 18 a1 fe ff       	call   f0100413 <_warn>
f01162fb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162fe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116302:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116306:	74 04                	je     f011630c <test_calculate_allocated_space+0xd37>
f0116308:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011630c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116310:	83 ec 0c             	sub    $0xc,%esp
f0116313:	68 03 9d 13 f0       	push   $0xf0139d03
f0116318:	e8 f1 a9 fe ff       	call   f0100d0e <cprintf>
f011631d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116320:	83 ec 08             	sub    $0x8,%esp
f0116323:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116326:	68 cc ad 13 f0       	push   $0xf013adcc
f011632b:	e8 de a9 fe ff       	call   f0100d0e <cprintf>
f0116330:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116333:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116337:	75 10                	jne    f0116349 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116339:	83 ec 0c             	sub    $0xc,%esp
f011633c:	68 0c ae 13 f0       	push   $0xf013ae0c
f0116341:	e8 c8 a9 fe ff       	call   f0100d0e <cprintf>
f0116346:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116349:	a1 ac ad 89 f0       	mov    0xf089adac,%eax
f011634e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116351:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116354:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116357:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011635c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011635f:	5b                   	pop    %ebx
f0116360:	5e                   	pop    %esi
f0116361:	5f                   	pop    %edi
f0116362:	5d                   	pop    %ebp
f0116363:	c3                   	ret    

f0116364 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116364:	55                   	push   %ebp
f0116365:	89 e5                	mov    %esp,%ebp
f0116367:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011636a:	8b 45 10             	mov    0x10(%ebp),%eax
f011636d:	ba 01 00 00 00       	mov    $0x1,%edx
f0116372:	88 c1                	mov    %al,%cl
f0116374:	d3 e2                	shl    %cl,%edx
f0116376:	89 d0                	mov    %edx,%eax
f0116378:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011637b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011637e:	c1 e8 16             	shr    $0x16,%eax
f0116381:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116388:	8b 45 08             	mov    0x8(%ebp),%eax
f011638b:	01 d0                	add    %edx,%eax
f011638d:	8b 00                	mov    (%eax),%eax
f011638f:	83 e0 01             	and    $0x1,%eax
f0116392:	85 c0                	test   %eax,%eax
f0116394:	75 07                	jne    f011639d <CB+0x39>
f0116396:	b8 00 00 00 00       	mov    $0x0,%eax
f011639b:	eb 76                	jmp    f0116413 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011639d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01163a0:	c1 e8 16             	shr    $0x16,%eax
f01163a3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01163aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01163ad:	01 d0                	add    %edx,%eax
f01163af:	8b 00                	mov    (%eax),%eax
f01163b1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01163b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01163b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01163bc:	c1 e8 0c             	shr    $0xc,%eax
f01163bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01163c2:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01163c7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01163ca:	72 17                	jb     f01163e3 <CB+0x7f>
f01163cc:	ff 75 f0             	pushl  -0x10(%ebp)
f01163cf:	68 58 ae 13 f0       	push   $0xf013ae58
f01163d4:	68 c7 07 00 00       	push   $0x7c7
f01163d9:	68 de 8f 13 f0       	push   $0xf0138fde
f01163de:	e8 22 9e fe ff       	call   f0100205 <_panic>
f01163e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01163e6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01163eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01163ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01163f1:	c1 e8 0c             	shr    $0xc,%eax
f01163f4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01163f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116400:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116403:	01 d0                	add    %edx,%eax
f0116405:	8b 00                	mov    (%eax),%eax
f0116407:	23 45 f4             	and    -0xc(%ebp),%eax
f011640a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011640d:	0f 94 c0             	sete   %al
f0116410:	0f b6 c0             	movzbl %al,%eax
}
f0116413:	c9                   	leave  
f0116414:	c3                   	ret    

f0116415 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116415:	55                   	push   %ebp
f0116416:	89 e5                	mov    %esp,%ebp
f0116418:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011641b:	68 87 ae 13 f0       	push   $0xf013ae87
f0116420:	68 96 ae 13 f0       	push   $0xf013ae96
f0116425:	68 cc 07 00 00       	push   $0x7cc
f011642a:	68 de 8f 13 f0       	push   $0xf0138fde
f011642f:	e8 d1 9d fe ff       	call   f0100205 <_panic>

f0116434 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116434:	55                   	push   %ebp
f0116435:	89 e5                	mov    %esp,%ebp
f0116437:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011643a:	68 87 ae 13 f0       	push   $0xf013ae87
f011643f:	68 96 ae 13 f0       	push   $0xf013ae96
f0116444:	68 d6 07 00 00       	push   $0x7d6
f0116449:	68 de 8f 13 f0       	push   $0xf0138fde
f011644e:	e8 b2 9d fe ff       	call   f0100205 <_panic>

f0116453 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0116453:	55                   	push   %ebp
f0116454:	89 e5                	mov    %esp,%ebp
f0116456:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116459:	68 87 ae 13 f0       	push   $0xf013ae87
f011645e:	68 96 ae 13 f0       	push   $0xf013ae96
f0116463:	68 e5 07 00 00       	push   $0x7e5
f0116468:	68 de 8f 13 f0       	push   $0xf0138fde
f011646d:	e8 93 9d fe ff       	call   f0100205 <_panic>

f0116472 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0116472:	55                   	push   %ebp
f0116473:	89 e5                	mov    %esp,%ebp
f0116475:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116478:	8b 45 0c             	mov    0xc(%ebp),%eax
f011647b:	c1 e8 16             	shr    $0x16,%eax
f011647e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116485:	8b 45 08             	mov    0x8(%ebp),%eax
f0116488:	01 d0                	add    %edx,%eax
f011648a:	8b 00                	mov    (%eax),%eax
f011648c:	83 e0 01             	and    $0x1,%eax
f011648f:	85 c0                	test   %eax,%eax
f0116491:	75 07                	jne    f011649a <CE+0x28>
f0116493:	b8 00 00 00 00       	mov    $0x0,%eax
f0116498:	eb 7a                	jmp    f0116514 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011649a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011649d:	c1 e8 16             	shr    $0x16,%eax
f01164a0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01164a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01164aa:	01 d0                	add    %edx,%eax
f01164ac:	8b 00                	mov    (%eax),%eax
f01164ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01164b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01164b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01164b9:	c1 e8 0c             	shr    $0xc,%eax
f01164bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01164bf:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f01164c4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01164c7:	72 17                	jb     f01164e0 <CE+0x6e>
f01164c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01164cc:	68 58 ae 13 f0       	push   $0xf013ae58
f01164d1:	68 ee 07 00 00       	push   $0x7ee
f01164d6:	68 de 8f 13 f0       	push   $0xf0138fde
f01164db:	e8 25 9d fe ff       	call   f0100205 <_panic>
f01164e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01164e3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01164e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01164eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01164ee:	c1 e8 0c             	shr    $0xc,%eax
f01164f1:	25 ff 03 00 00       	and    $0x3ff,%eax
f01164f6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01164fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116500:	01 d0                	add    %edx,%eax
f0116502:	8b 00                	mov    (%eax),%eax
f0116504:	85 c0                	test   %eax,%eax
f0116506:	74 07                	je     f011650f <CE+0x9d>
f0116508:	b8 00 00 00 00       	mov    $0x0,%eax
f011650d:	eb 05                	jmp    f0116514 <CE+0xa2>
	return 1;
f011650f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116514:	c9                   	leave  
f0116515:	c3                   	ret    

f0116516 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116516:	55                   	push   %ebp
f0116517:	89 e5                	mov    %esp,%ebp
f0116519:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011651c:	68 87 ae 13 f0       	push   $0xf013ae87
f0116521:	68 96 ae 13 f0       	push   $0xf013ae96
f0116526:	68 f5 07 00 00       	push   $0x7f5
f011652b:	68 de 8f 13 f0       	push   $0xf0138fde
f0116530:	e8 d0 9c fe ff       	call   f0100205 <_panic>

f0116535 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116535:	55                   	push   %ebp
f0116536:	89 e5                	mov    %esp,%ebp
f0116538:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011653b:	68 87 ae 13 f0       	push   $0xf013ae87
f0116540:	68 96 ae 13 f0       	push   $0xf013ae96
f0116545:	68 05 08 00 00       	push   $0x805
f011654a:	68 de 8f 13 f0       	push   $0xf0138fde
f011654f:	e8 b1 9c fe ff       	call   f0100205 <_panic>

f0116554 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0116554:	55                   	push   %ebp
f0116555:	89 e5                	mov    %esp,%ebp
f0116557:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011655a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116561:	eb 18                	jmp    f011657b <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116563:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116566:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011656d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116570:	01 d0                	add    %edx,%eax
f0116572:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116578:	ff 45 fc             	incl   -0x4(%ebp)
f011657b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011657e:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116583:	76 de                	jbe    f0116563 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116585:	90                   	nop
f0116586:	c9                   	leave  
f0116587:	c3                   	ret    

f0116588 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116588:	55                   	push   %ebp
f0116589:	89 e5                	mov    %esp,%ebp
f011658b:	83 ec 38             	sub    $0x38,%esp
f011658e:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116591:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116594:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116597:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011659c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011659f:	8b 45 10             	mov    0x10(%ebp),%eax
f01165a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01165a7:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01165aa:	e9 ea 01 00 00       	jmp    f0116799 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01165af:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01165b3:	74 44                	je     f01165f9 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01165b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01165b8:	83 ec 04             	sub    $0x4,%esp
f01165bb:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01165be:	52                   	push   %edx
f01165bf:	50                   	push   %eax
f01165c0:	ff 75 08             	pushl  0x8(%ebp)
f01165c3:	e8 3e 08 ff ff       	call   f0106e06 <get_frame_info>
f01165c8:	83 c4 10             	add    $0x10,%esp
f01165cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01165ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01165d1:	85 c0                	test   %eax,%eax
f01165d3:	75 24                	jne    f01165f9 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01165d5:	83 ec 04             	sub    $0x4,%esp
f01165d8:	68 ac ae 13 f0       	push   $0xf013aeac
f01165dd:	68 22 08 00 00       	push   $0x822
f01165e2:	68 de 8f 13 f0       	push   $0xf0138fde
f01165e7:	e8 27 9e fe ff       	call   f0100413 <_warn>
f01165ec:	83 c4 10             	add    $0x10,%esp
				return 0;
f01165ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01165f4:	e9 b6 01 00 00       	jmp    f01167af <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01165f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01165fc:	83 ec 04             	sub    $0x4,%esp
f01165ff:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116602:	52                   	push   %edx
f0116603:	50                   	push   %eax
f0116604:	ff 75 08             	pushl  0x8(%ebp)
f0116607:	e8 fa 07 ff ff       	call   f0106e06 <get_frame_info>
f011660c:	83 c4 10             	add    $0x10,%esp
f011660f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116612:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116615:	85 c0                	test   %eax,%eax
f0116617:	75 24                	jne    f011663d <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116619:	83 ec 04             	sub    $0x4,%esp
f011661c:	68 d8 ae 13 f0       	push   $0xf013aed8
f0116621:	68 29 08 00 00       	push   $0x829
f0116626:	68 de 8f 13 f0       	push   $0xf0138fde
f011662b:	e8 e3 9d fe ff       	call   f0100413 <_warn>
f0116630:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116633:	b8 00 00 00 00       	mov    $0x0,%eax
f0116638:	e9 72 01 00 00       	jmp    f01167af <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f011663d:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116641:	75 70                	jne    f01166b3 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116643:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116646:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116649:	c1 ea 0c             	shr    $0xc,%edx
f011664c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116652:	c1 e2 02             	shl    $0x2,%edx
f0116655:	01 d0                	add    %edx,%eax
f0116657:	8b 00                	mov    (%eax),%eax
f0116659:	c1 e8 0c             	shr    $0xc,%eax
f011665c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f011665f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116662:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116665:	c1 ea 0c             	shr    $0xc,%edx
f0116668:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011666e:	c1 e2 02             	shl    $0x2,%edx
f0116671:	01 d0                	add    %edx,%eax
f0116673:	8b 00                	mov    (%eax),%eax
f0116675:	c1 e8 0c             	shr    $0xc,%eax
f0116678:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011667b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011667e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116681:	74 30                	je     f01166b3 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116683:	83 ec 04             	sub    $0x4,%esp
f0116686:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116689:	ff 75 e8             	pushl  -0x18(%ebp)
f011668c:	ff 75 f0             	pushl  -0x10(%ebp)
f011668f:	ff 75 f4             	pushl  -0xc(%ebp)
f0116692:	68 04 af 13 f0       	push   $0xf013af04
f0116697:	68 33 08 00 00       	push   $0x833
f011669c:	68 de 8f 13 f0       	push   $0xf0138fde
f01166a1:	e8 6d 9d fe ff       	call   f0100413 <_warn>
f01166a6:	83 c4 20             	add    $0x20,%esp
				return 0;
f01166a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01166ae:	e9 fc 00 00 00       	jmp    f01167af <CCP+0x227>
			}
		}
		if (ref != -1)
f01166b3:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01166b7:	74 52                	je     f011670b <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01166b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01166bd:	74 0e                	je     f01166cd <CCP+0x145>
f01166bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01166c2:	8b 40 08             	mov    0x8(%eax),%eax
f01166c5:	0f b7 c0             	movzwl %ax,%eax
f01166c8:	3b 45 18             	cmp    0x18(%ebp),%eax
f01166cb:	74 3e                	je     f011670b <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01166cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01166d1:	74 0b                	je     f01166de <CCP+0x156>
f01166d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01166d6:	8b 40 08             	mov    0x8(%eax),%eax
f01166d9:	0f b7 c0             	movzwl %ax,%eax
f01166dc:	eb 05                	jmp    f01166e3 <CCP+0x15b>
f01166de:	b8 00 00 00 00       	mov    $0x0,%eax
f01166e3:	83 ec 0c             	sub    $0xc,%esp
f01166e6:	50                   	push   %eax
f01166e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01166ea:	68 60 af 13 f0       	push   $0xf013af60
f01166ef:	68 3b 08 00 00       	push   $0x83b
f01166f4:	68 de 8f 13 f0       	push   $0xf0138fde
f01166f9:	e8 15 9d fe ff       	call   f0100413 <_warn>
f01166fe:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116701:	b8 00 00 00 00       	mov    $0x0,%eax
f0116706:	e9 a4 00 00 00       	jmp    f01167af <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f011670b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011670e:	ff 75 20             	pushl  0x20(%ebp)
f0116711:	ff 75 1c             	pushl  0x1c(%ebp)
f0116714:	50                   	push   %eax
f0116715:	ff 75 08             	pushl  0x8(%ebp)
f0116718:	e8 17 fd ff ff       	call   f0116434 <CPs>
f011671d:	83 c4 10             	add    $0x10,%esp
f0116720:	85 c0                	test   %eax,%eax
f0116722:	7f 21                	jg     f0116745 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116724:	83 ec 04             	sub    $0x4,%esp
f0116727:	68 d0 af 13 f0       	push   $0xf013afd0
f011672c:	68 41 08 00 00       	push   $0x841
f0116731:	68 de 8f 13 f0       	push   $0xf0138fde
f0116736:	e8 d8 9c fe ff       	call   f0100413 <_warn>
f011673b:	83 c4 10             	add    $0x10,%esp
			return 0;
f011673e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116743:	eb 6a                	jmp    f01167af <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116745:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116749:	74 3a                	je     f0116785 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f011674b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011674e:	ff 75 28             	pushl  0x28(%ebp)
f0116751:	ff 75 24             	pushl  0x24(%ebp)
f0116754:	50                   	push   %eax
f0116755:	ff 75 08             	pushl  0x8(%ebp)
f0116758:	e8 d7 fc ff ff       	call   f0116434 <CPs>
f011675d:	83 c4 10             	add    $0x10,%esp
f0116760:	85 c0                	test   %eax,%eax
f0116762:	7f 21                	jg     f0116785 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116764:	83 ec 04             	sub    $0x4,%esp
f0116767:	68 18 b0 13 f0       	push   $0xf013b018
f011676c:	68 48 08 00 00       	push   $0x848
f0116771:	68 de 8f 13 f0       	push   $0xf0138fde
f0116776:	e8 98 9c fe ff       	call   f0100413 <_warn>
f011677b:	83 c4 10             	add    $0x10,%esp
				return 0;
f011677e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116783:	eb 2a                	jmp    f01167af <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116785:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116789:	74 07                	je     f0116792 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f011678b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116792:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116799:	8b 55 10             	mov    0x10(%ebp),%edx
f011679c:	8b 45 14             	mov    0x14(%ebp),%eax
f011679f:	01 d0                	add    %edx,%eax
f01167a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01167a4:	0f 87 05 fe ff ff    	ja     f01165af <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01167aa:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01167af:	c9                   	leave  
f01167b0:	c3                   	ret    

f01167b1 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01167b1:	55                   	push   %ebp
f01167b2:	89 e5                	mov    %esp,%ebp
f01167b4:	57                   	push   %edi
f01167b5:	56                   	push   %esi
f01167b6:	53                   	push   %ebx
f01167b7:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01167bd:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01167c2:	84 c0                	test   %al,%al
f01167c4:	0f 84 b4 09 00 00    	je     f011717e <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01167ca:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01167d1:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01167d7:	bb b8 b2 13 f0       	mov    $0xf013b2b8,%ebx
f01167dc:	ba 04 00 00 00       	mov    $0x4,%edx
f01167e1:	89 c7                	mov    %eax,%edi
f01167e3:	89 de                	mov    %ebx,%esi
f01167e5:	89 d1                	mov    %edx,%ecx
f01167e7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01167e9:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01167ef:	b9 15 00 00 00       	mov    $0x15,%ecx
f01167f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01167f9:	89 d7                	mov    %edx,%edi
f01167fb:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01167fd:	83 ec 0c             	sub    $0xc,%esp
f0116800:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116806:	50                   	push   %eax
f0116807:	e8 64 a5 fe ff       	call   f0100d70 <execute_command>
f011680c:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011680f:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116815:	bb 1c b3 13 f0       	mov    $0xf013b31c,%ebx
f011681a:	ba 0d 00 00 00       	mov    $0xd,%edx
f011681f:	89 c7                	mov    %eax,%edi
f0116821:	89 de                	mov    %ebx,%esi
f0116823:	89 d1                	mov    %edx,%ecx
f0116825:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116827:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011682d:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116832:	b0 00                	mov    $0x0,%al
f0116834:	89 d7                	mov    %edx,%edi
f0116836:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116838:	83 ec 0c             	sub    $0xc,%esp
f011683b:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116841:	50                   	push   %eax
f0116842:	e8 29 a5 fe ff       	call   f0100d70 <execute_command>
f0116847:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011684a:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116850:	bb 80 b3 13 f0       	mov    $0xf013b380,%ebx
f0116855:	ba 17 00 00 00       	mov    $0x17,%edx
f011685a:	89 c7                	mov    %eax,%edi
f011685c:	89 de                	mov    %ebx,%esi
f011685e:	89 d1                	mov    %edx,%ecx
f0116860:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116862:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116868:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011686d:	b0 00                	mov    $0x0,%al
f011686f:	89 d7                	mov    %edx,%edi
f0116871:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116873:	83 ec 0c             	sub    $0xc,%esp
f0116876:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011687c:	50                   	push   %eax
f011687d:	e8 ee a4 fe ff       	call   f0100d70 <execute_command>
f0116882:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116885:	83 ec 04             	sub    $0x4,%esp
f0116888:	6a 00                	push   $0x0
f011688a:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011688d:	50                   	push   %eax
f011688e:	68 00 10 00 00       	push   $0x1000
f0116893:	e8 87 36 ff ff       	call   f0109f1f <envid2env>
f0116898:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011689b:	83 ec 04             	sub    $0x4,%esp
f011689e:	6a 00                	push   $0x0
f01168a0:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01168a3:	50                   	push   %eax
f01168a4:	68 01 10 00 00       	push   $0x1001
f01168a9:	e8 71 36 ff ff       	call   f0109f1f <envid2env>
f01168ae:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01168b1:	83 ec 04             	sub    $0x4,%esp
f01168b4:	6a 00                	push   $0x0
f01168b6:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01168b9:	50                   	push   %eax
f01168ba:	68 02 10 00 00       	push   $0x1002
f01168bf:	e8 5b 36 ff ff       	call   f0109f1f <envid2env>
f01168c4:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01168c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01168ca:	85 c0                	test   %eax,%eax
f01168cc:	74 0e                	je     f01168dc <test_priority_normal_and_higher+0x12b>
f01168ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168d1:	85 c0                	test   %eax,%eax
f01168d3:	74 07                	je     f01168dc <test_priority_normal_and_higher+0x12b>
f01168d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168d8:	85 c0                	test   %eax,%eax
f01168da:	75 14                	jne    f01168f0 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01168dc:	83 ec 04             	sub    $0x4,%esp
f01168df:	68 58 b0 13 f0       	push   $0xf013b058
f01168e4:	6a 26                	push   $0x26
f01168e6:	68 71 b0 13 f0       	push   $0xf013b071
f01168eb:	e8 15 99 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01168f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01168f3:	8b 40 74             	mov    0x74(%eax),%eax
f01168f6:	83 f8 14             	cmp    $0x14,%eax
f01168f9:	75 16                	jne    f0116911 <test_priority_normal_and_higher+0x160>
f01168fb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168fe:	8b 40 74             	mov    0x74(%eax),%eax
f0116901:	83 f8 0f             	cmp    $0xf,%eax
f0116904:	75 0b                	jne    f0116911 <test_priority_normal_and_higher+0x160>
f0116906:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116909:	8b 40 74             	mov    0x74(%eax),%eax
f011690c:	83 f8 0a             	cmp    $0xa,%eax
f011690f:	74 14                	je     f0116925 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116911:	83 ec 04             	sub    $0x4,%esp
f0116914:	68 8c b0 13 f0       	push   $0xf013b08c
f0116919:	6a 29                	push   $0x29
f011691b:	68 71 b0 13 f0       	push   $0xf013b071
f0116920:	e8 e0 98 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116925:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011692c:	eb 44                	jmp    f0116972 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011692e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116931:	8b 48 78             	mov    0x78(%eax),%ecx
f0116934:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116937:	89 d0                	mov    %edx,%eax
f0116939:	01 c0                	add    %eax,%eax
f011693b:	01 d0                	add    %edx,%eax
f011693d:	c1 e0 03             	shl    $0x3,%eax
f0116940:	01 c8                	add    %ecx,%eax
f0116942:	8b 10                	mov    (%eax),%edx
f0116944:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116947:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011694e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116951:	8b 48 78             	mov    0x78(%eax),%ecx
f0116954:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116957:	89 d0                	mov    %edx,%eax
f0116959:	01 c0                	add    %eax,%eax
f011695b:	01 d0                	add    %edx,%eax
f011695d:	c1 e0 03             	shl    $0x3,%eax
f0116960:	01 c8                	add    %ecx,%eax
f0116962:	8b 50 08             	mov    0x8(%eax),%edx
f0116965:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116968:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011696f:	ff 45 e4             	incl   -0x1c(%ebp)
f0116972:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116976:	7e b6                	jle    f011692e <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116978:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011697f:	eb 44                	jmp    f01169c5 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116981:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116984:	8b 48 78             	mov    0x78(%eax),%ecx
f0116987:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011698a:	89 d0                	mov    %edx,%eax
f011698c:	01 c0                	add    %eax,%eax
f011698e:	01 d0                	add    %edx,%eax
f0116990:	c1 e0 03             	shl    $0x3,%eax
f0116993:	01 c8                	add    %ecx,%eax
f0116995:	8b 10                	mov    (%eax),%edx
f0116997:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011699a:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01169a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169a4:	8b 48 78             	mov    0x78(%eax),%ecx
f01169a7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01169aa:	89 d0                	mov    %edx,%eax
f01169ac:	01 c0                	add    %eax,%eax
f01169ae:	01 d0                	add    %edx,%eax
f01169b0:	c1 e0 03             	shl    $0x3,%eax
f01169b3:	01 c8                	add    %ecx,%eax
f01169b5:	8b 50 08             	mov    0x8(%eax),%edx
f01169b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01169bb:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01169c2:	ff 45 e0             	incl   -0x20(%ebp)
f01169c5:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01169c9:	7e b6                	jle    f0116981 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01169cb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01169d2:	eb 44                	jmp    f0116a18 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01169d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169d7:	8b 48 78             	mov    0x78(%eax),%ecx
f01169da:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01169dd:	89 d0                	mov    %edx,%eax
f01169df:	01 c0                	add    %eax,%eax
f01169e1:	01 d0                	add    %edx,%eax
f01169e3:	c1 e0 03             	shl    $0x3,%eax
f01169e6:	01 c8                	add    %ecx,%eax
f01169e8:	8b 10                	mov    (%eax),%edx
f01169ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01169ed:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01169f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169f7:	8b 48 78             	mov    0x78(%eax),%ecx
f01169fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01169fd:	89 d0                	mov    %edx,%eax
f01169ff:	01 c0                	add    %eax,%eax
f0116a01:	01 d0                	add    %edx,%eax
f0116a03:	c1 e0 03             	shl    $0x3,%eax
f0116a06:	01 c8                	add    %ecx,%eax
f0116a08:	8b 50 08             	mov    0x8(%eax),%edx
f0116a0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116a0e:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116a15:	ff 45 dc             	incl   -0x24(%ebp)
f0116a18:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116a1c:	7e b6                	jle    f01169d4 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116a1e:	e8 8e 65 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116a23:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116a26:	e8 9d d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a2b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116a2e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a31:	83 ec 08             	sub    $0x8,%esp
f0116a34:	6a 03                	push   $0x3
f0116a36:	50                   	push   %eax
f0116a37:	e8 c1 49 ff ff       	call   f010b3fd <set_program_priority>
f0116a3c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116a3f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a42:	83 ec 08             	sub    $0x8,%esp
f0116a45:	6a 03                	push   $0x3
f0116a47:	50                   	push   %eax
f0116a48:	e8 b0 49 ff ff       	call   f010b3fd <set_program_priority>
f0116a4d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116a50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a53:	83 ec 08             	sub    $0x8,%esp
f0116a56:	6a 03                	push   $0x3
f0116a58:	50                   	push   %eax
f0116a59:	e8 9f 49 ff ff       	call   f010b3fd <set_program_priority>
f0116a5e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a61:	e8 62 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a66:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116a69:	74 14                	je     f0116a7f <test_priority_normal_and_higher+0x2ce>
f0116a6b:	83 ec 04             	sub    $0x4,%esp
f0116a6e:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116a73:	6a 45                	push   $0x45
f0116a75:	68 71 b0 13 f0       	push   $0xf013b071
f0116a7a:	e8 86 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116a7f:	e8 2d 65 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116a84:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a87:	74 14                	je     f0116a9d <test_priority_normal_and_higher+0x2ec>
f0116a89:	83 ec 04             	sub    $0x4,%esp
f0116a8c:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116a91:	6a 46                	push   $0x46
f0116a93:	68 71 b0 13 f0       	push   $0xf013b071
f0116a98:	e8 68 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116a9d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116aa0:	8b 40 74             	mov    0x74(%eax),%eax
f0116aa3:	83 f8 14             	cmp    $0x14,%eax
f0116aa6:	75 16                	jne    f0116abe <test_priority_normal_and_higher+0x30d>
f0116aa8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116aab:	8b 40 74             	mov    0x74(%eax),%eax
f0116aae:	83 f8 0f             	cmp    $0xf,%eax
f0116ab1:	75 0b                	jne    f0116abe <test_priority_normal_and_higher+0x30d>
f0116ab3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ab6:	8b 40 74             	mov    0x74(%eax),%eax
f0116ab9:	83 f8 0a             	cmp    $0xa,%eax
f0116abc:	74 14                	je     f0116ad2 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116abe:	83 ec 04             	sub    $0x4,%esp
f0116ac1:	68 04 b1 13 f0       	push   $0xf013b104
f0116ac6:	6a 49                	push   $0x49
f0116ac8:	68 71 b0 13 f0       	push   $0xf013b071
f0116acd:	e8 33 97 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ad2:	e8 da 64 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116ad7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ada:	e8 e9 d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116adf:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116ae2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ae5:	83 ec 08             	sub    $0x8,%esp
f0116ae8:	6a 04                	push   $0x4
f0116aea:	50                   	push   %eax
f0116aeb:	e8 0d 49 ff ff       	call   f010b3fd <set_program_priority>
f0116af0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116af3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116af6:	83 ec 08             	sub    $0x8,%esp
f0116af9:	6a 04                	push   $0x4
f0116afb:	50                   	push   %eax
f0116afc:	e8 fc 48 ff ff       	call   f010b3fd <set_program_priority>
f0116b01:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116b04:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b07:	83 ec 08             	sub    $0x8,%esp
f0116b0a:	6a 04                	push   $0x4
f0116b0c:	50                   	push   %eax
f0116b0d:	e8 eb 48 ff ff       	call   f010b3fd <set_program_priority>
f0116b12:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b15:	e8 ae d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b1a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116b1d:	74 14                	je     f0116b33 <test_priority_normal_and_higher+0x382>
f0116b1f:	83 ec 04             	sub    $0x4,%esp
f0116b22:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116b27:	6a 53                	push   $0x53
f0116b29:	68 71 b0 13 f0       	push   $0xf013b071
f0116b2e:	e8 d2 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116b33:	e8 79 64 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116b38:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116b3b:	74 14                	je     f0116b51 <test_priority_normal_and_higher+0x3a0>
f0116b3d:	83 ec 04             	sub    $0x4,%esp
f0116b40:	68 58 b1 13 f0       	push   $0xf013b158
f0116b45:	6a 54                	push   $0x54
f0116b47:	68 71 b0 13 f0       	push   $0xf013b071
f0116b4c:	e8 b4 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116b51:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b54:	8b 40 74             	mov    0x74(%eax),%eax
f0116b57:	83 f8 14             	cmp    $0x14,%eax
f0116b5a:	75 16                	jne    f0116b72 <test_priority_normal_and_higher+0x3c1>
f0116b5c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b5f:	8b 40 74             	mov    0x74(%eax),%eax
f0116b62:	83 f8 0f             	cmp    $0xf,%eax
f0116b65:	75 0b                	jne    f0116b72 <test_priority_normal_and_higher+0x3c1>
f0116b67:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b6a:	8b 40 74             	mov    0x74(%eax),%eax
f0116b6d:	83 f8 14             	cmp    $0x14,%eax
f0116b70:	74 14                	je     f0116b86 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116b72:	83 ec 04             	sub    $0x4,%esp
f0116b75:	68 88 b1 13 f0       	push   $0xf013b188
f0116b7a:	6a 57                	push   $0x57
f0116b7c:	68 71 b0 13 f0       	push   $0xf013b071
f0116b81:	e8 7f 96 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116b86:	e8 26 64 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116b8b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b8e:	e8 35 d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b93:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116b96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b99:	83 ec 08             	sub    $0x8,%esp
f0116b9c:	6a 04                	push   $0x4
f0116b9e:	50                   	push   %eax
f0116b9f:	e8 59 48 ff ff       	call   f010b3fd <set_program_priority>
f0116ba4:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ba7:	e8 1c d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116bac:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116baf:	74 14                	je     f0116bc5 <test_priority_normal_and_higher+0x414>
f0116bb1:	83 ec 04             	sub    $0x4,%esp
f0116bb4:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116bb9:	6a 5f                	push   $0x5f
f0116bbb:	68 71 b0 13 f0       	push   $0xf013b071
f0116bc0:	e8 40 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116bc5:	e8 e7 63 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116bca:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116bcd:	74 14                	je     f0116be3 <test_priority_normal_and_higher+0x432>
f0116bcf:	83 ec 04             	sub    $0x4,%esp
f0116bd2:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116bd7:	6a 60                	push   $0x60
f0116bd9:	68 71 b0 13 f0       	push   $0xf013b071
f0116bde:	e8 22 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116be3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116be6:	8b 40 74             	mov    0x74(%eax),%eax
f0116be9:	83 f8 14             	cmp    $0x14,%eax
f0116bec:	75 16                	jne    f0116c04 <test_priority_normal_and_higher+0x453>
f0116bee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bf1:	8b 40 74             	mov    0x74(%eax),%eax
f0116bf4:	83 f8 0f             	cmp    $0xf,%eax
f0116bf7:	75 0b                	jne    f0116c04 <test_priority_normal_and_higher+0x453>
f0116bf9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116bfc:	8b 40 74             	mov    0x74(%eax),%eax
f0116bff:	83 f8 14             	cmp    $0x14,%eax
f0116c02:	74 14                	je     f0116c18 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116c04:	83 ec 04             	sub    $0x4,%esp
f0116c07:	68 d0 b1 13 f0       	push   $0xf013b1d0
f0116c0c:	6a 63                	push   $0x63
f0116c0e:	68 71 b0 13 f0       	push   $0xf013b071
f0116c13:	e8 ed 95 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116c18:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116c1f:	eb 1b                	jmp    f0116c3c <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116c21:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c24:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c27:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116c2a:	89 d0                	mov    %edx,%eax
f0116c2c:	01 c0                	add    %eax,%eax
f0116c2e:	01 d0                	add    %edx,%eax
f0116c30:	c1 e0 03             	shl    $0x3,%eax
f0116c33:	01 c8                	add    %ecx,%eax
f0116c35:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116c39:	ff 45 d8             	incl   -0x28(%ebp)
f0116c3c:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116c40:	7e df                	jle    f0116c21 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116c42:	e8 6a 63 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116c47:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c4a:	e8 79 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c4f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116c52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c55:	83 ec 08             	sub    $0x8,%esp
f0116c58:	6a 04                	push   $0x4
f0116c5a:	50                   	push   %eax
f0116c5b:	e8 9d 47 ff ff       	call   f010b3fd <set_program_priority>
f0116c60:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116c63:	e8 60 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c68:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116c6b:	74 14                	je     f0116c81 <test_priority_normal_and_higher+0x4d0>
f0116c6d:	83 ec 04             	sub    $0x4,%esp
f0116c70:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116c75:	6a 70                	push   $0x70
f0116c77:	68 71 b0 13 f0       	push   $0xf013b071
f0116c7c:	e8 84 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116c81:	e8 2b 63 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116c86:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116c89:	74 14                	je     f0116c9f <test_priority_normal_and_higher+0x4ee>
f0116c8b:	83 ec 04             	sub    $0x4,%esp
f0116c8e:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116c93:	6a 71                	push   $0x71
f0116c95:	68 71 b0 13 f0       	push   $0xf013b071
f0116c9a:	e8 66 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116c9f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ca2:	8b 40 74             	mov    0x74(%eax),%eax
f0116ca5:	83 f8 14             	cmp    $0x14,%eax
f0116ca8:	75 16                	jne    f0116cc0 <test_priority_normal_and_higher+0x50f>
f0116caa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cad:	8b 40 74             	mov    0x74(%eax),%eax
f0116cb0:	83 f8 0f             	cmp    $0xf,%eax
f0116cb3:	75 0b                	jne    f0116cc0 <test_priority_normal_and_higher+0x50f>
f0116cb5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cb8:	8b 40 74             	mov    0x74(%eax),%eax
f0116cbb:	83 f8 14             	cmp    $0x14,%eax
f0116cbe:	74 14                	je     f0116cd4 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116cc0:	83 ec 04             	sub    $0x4,%esp
f0116cc3:	68 d0 b1 13 f0       	push   $0xf013b1d0
f0116cc8:	6a 74                	push   $0x74
f0116cca:	68 71 b0 13 f0       	push   $0xf013b071
f0116ccf:	e8 31 95 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116cd4:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116cdb:	eb 1b                	jmp    f0116cf8 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116cdd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ce0:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ce3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116ce6:	89 d0                	mov    %edx,%eax
f0116ce8:	01 c0                	add    %eax,%eax
f0116cea:	01 d0                	add    %edx,%eax
f0116cec:	c1 e0 03             	shl    $0x3,%eax
f0116cef:	01 c8                	add    %ecx,%eax
f0116cf1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116cf5:	ff 45 d4             	incl   -0x2c(%ebp)
f0116cf8:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116cfc:	7e df                	jle    f0116cdd <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116cfe:	e8 ae 62 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116d03:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d06:	e8 bd d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116d0b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116d0e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d11:	83 ec 08             	sub    $0x8,%esp
f0116d14:	6a 05                	push   $0x5
f0116d16:	50                   	push   %eax
f0116d17:	e8 e1 46 ff ff       	call   f010b3fd <set_program_priority>
f0116d1c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116d1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d22:	83 ec 08             	sub    $0x8,%esp
f0116d25:	6a 05                	push   $0x5
f0116d27:	50                   	push   %eax
f0116d28:	e8 d0 46 ff ff       	call   f010b3fd <set_program_priority>
f0116d2d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d30:	e8 93 d0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116d35:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116d38:	74 14                	je     f0116d4e <test_priority_normal_and_higher+0x59d>
f0116d3a:	83 ec 04             	sub    $0x4,%esp
f0116d3d:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116d42:	6a 7f                	push   $0x7f
f0116d44:	68 71 b0 13 f0       	push   $0xf013b071
f0116d49:	e8 b7 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116d4e:	e8 5e 62 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116d53:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116d56:	74 17                	je     f0116d6f <test_priority_normal_and_higher+0x5be>
f0116d58:	83 ec 04             	sub    $0x4,%esp
f0116d5b:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116d60:	68 80 00 00 00       	push   $0x80
f0116d65:	68 71 b0 13 f0       	push   $0xf013b071
f0116d6a:	e8 96 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116d6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d72:	8b 40 74             	mov    0x74(%eax),%eax
f0116d75:	83 f8 14             	cmp    $0x14,%eax
f0116d78:	75 16                	jne    f0116d90 <test_priority_normal_and_higher+0x5df>
f0116d7a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d7d:	8b 40 74             	mov    0x74(%eax),%eax
f0116d80:	83 f8 1e             	cmp    $0x1e,%eax
f0116d83:	75 0b                	jne    f0116d90 <test_priority_normal_and_higher+0x5df>
f0116d85:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d88:	8b 40 74             	mov    0x74(%eax),%eax
f0116d8b:	83 f8 28             	cmp    $0x28,%eax
f0116d8e:	74 17                	je     f0116da7 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116d90:	83 ec 04             	sub    $0x4,%esp
f0116d93:	68 0c b2 13 f0       	push   $0xf013b20c
f0116d98:	68 83 00 00 00       	push   $0x83
f0116d9d:	68 71 b0 13 f0       	push   $0xf013b071
f0116da2:	e8 5e 94 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116da7:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116dae:	eb 1b                	jmp    f0116dcb <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116db0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116db3:	8b 48 78             	mov    0x78(%eax),%ecx
f0116db6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116db9:	89 d0                	mov    %edx,%eax
f0116dbb:	01 c0                	add    %eax,%eax
f0116dbd:	01 d0                	add    %edx,%eax
f0116dbf:	c1 e0 03             	shl    $0x3,%eax
f0116dc2:	01 c8                	add    %ecx,%eax
f0116dc4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116dc8:	ff 45 d0             	incl   -0x30(%ebp)
f0116dcb:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116dcf:	7e df                	jle    f0116db0 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116dd1:	e8 db 61 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116dd6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116dd9:	e8 ea cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116dde:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116de1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116de4:	83 ec 08             	sub    $0x8,%esp
f0116de7:	6a 05                	push   $0x5
f0116de9:	50                   	push   %eax
f0116dea:	e8 0e 46 ff ff       	call   f010b3fd <set_program_priority>
f0116def:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116df2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116df5:	83 ec 08             	sub    $0x8,%esp
f0116df8:	6a 04                	push   $0x4
f0116dfa:	50                   	push   %eax
f0116dfb:	e8 fd 45 ff ff       	call   f010b3fd <set_program_priority>
f0116e00:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e03:	e8 c0 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116e08:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e0b:	74 17                	je     f0116e24 <test_priority_normal_and_higher+0x673>
f0116e0d:	83 ec 04             	sub    $0x4,%esp
f0116e10:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116e15:	68 8e 00 00 00       	push   $0x8e
f0116e1a:	68 71 b0 13 f0       	push   $0xf013b071
f0116e1f:	e8 e1 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116e24:	e8 88 61 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116e29:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e2c:	74 17                	je     f0116e45 <test_priority_normal_and_higher+0x694>
f0116e2e:	83 ec 04             	sub    $0x4,%esp
f0116e31:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116e36:	68 8f 00 00 00       	push   $0x8f
f0116e3b:	68 71 b0 13 f0       	push   $0xf013b071
f0116e40:	e8 c0 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116e45:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e48:	8b 40 74             	mov    0x74(%eax),%eax
f0116e4b:	83 f8 14             	cmp    $0x14,%eax
f0116e4e:	75 16                	jne    f0116e66 <test_priority_normal_and_higher+0x6b5>
f0116e50:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e53:	8b 40 74             	mov    0x74(%eax),%eax
f0116e56:	83 f8 1e             	cmp    $0x1e,%eax
f0116e59:	75 0b                	jne    f0116e66 <test_priority_normal_and_higher+0x6b5>
f0116e5b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e5e:	8b 40 74             	mov    0x74(%eax),%eax
f0116e61:	83 f8 28             	cmp    $0x28,%eax
f0116e64:	74 17                	je     f0116e7d <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116e66:	83 ec 04             	sub    $0x4,%esp
f0116e69:	68 0c b2 13 f0       	push   $0xf013b20c
f0116e6e:	68 92 00 00 00       	push   $0x92
f0116e73:	68 71 b0 13 f0       	push   $0xf013b071
f0116e78:	e8 88 93 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0116e7d:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116e84:	eb 1b                	jmp    f0116ea1 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116e86:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e89:	8b 48 78             	mov    0x78(%eax),%ecx
f0116e8c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116e8f:	89 d0                	mov    %edx,%eax
f0116e91:	01 c0                	add    %eax,%eax
f0116e93:	01 d0                	add    %edx,%eax
f0116e95:	c1 e0 03             	shl    $0x3,%eax
f0116e98:	01 c8                	add    %ecx,%eax
f0116e9a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116e9e:	ff 45 cc             	incl   -0x34(%ebp)
f0116ea1:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116ea5:	7e df                	jle    f0116e86 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116ea7:	e8 05 61 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116eac:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116eaf:	e8 14 cf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116eb4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116eb7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116eba:	83 ec 08             	sub    $0x8,%esp
f0116ebd:	6a 05                	push   $0x5
f0116ebf:	50                   	push   %eax
f0116ec0:	e8 38 45 ff ff       	call   f010b3fd <set_program_priority>
f0116ec5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116ec8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ecb:	83 ec 08             	sub    $0x8,%esp
f0116ece:	6a 04                	push   $0x4
f0116ed0:	50                   	push   %eax
f0116ed1:	e8 27 45 ff ff       	call   f010b3fd <set_program_priority>
f0116ed6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ed9:	e8 ea ce fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116ede:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116ee1:	74 17                	je     f0116efa <test_priority_normal_and_higher+0x749>
f0116ee3:	83 ec 04             	sub    $0x4,%esp
f0116ee6:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116eeb:	68 9d 00 00 00       	push   $0x9d
f0116ef0:	68 71 b0 13 f0       	push   $0xf013b071
f0116ef5:	e8 0b 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116efa:	e8 b2 60 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0116eff:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116f02:	74 17                	je     f0116f1b <test_priority_normal_and_higher+0x76a>
f0116f04:	83 ec 04             	sub    $0x4,%esp
f0116f07:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0116f0c:	68 9e 00 00 00       	push   $0x9e
f0116f11:	68 71 b0 13 f0       	push   $0xf013b071
f0116f16:	e8 ea 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116f1b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f1e:	8b 40 74             	mov    0x74(%eax),%eax
f0116f21:	83 f8 14             	cmp    $0x14,%eax
f0116f24:	75 16                	jne    f0116f3c <test_priority_normal_and_higher+0x78b>
f0116f26:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f29:	8b 40 74             	mov    0x74(%eax),%eax
f0116f2c:	83 f8 3c             	cmp    $0x3c,%eax
f0116f2f:	75 0b                	jne    f0116f3c <test_priority_normal_and_higher+0x78b>
f0116f31:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f34:	8b 40 74             	mov    0x74(%eax),%eax
f0116f37:	83 f8 28             	cmp    $0x28,%eax
f0116f3a:	74 17                	je     f0116f53 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116f3c:	83 ec 04             	sub    $0x4,%esp
f0116f3f:	68 0c b2 13 f0       	push   $0xf013b20c
f0116f44:	68 a1 00 00 00       	push   $0xa1
f0116f49:	68 71 b0 13 f0       	push   $0xf013b071
f0116f4e:	e8 b2 92 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116f53:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116f5a:	eb 1b                	jmp    f0116f77 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116f5c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f5f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f62:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116f65:	89 d0                	mov    %edx,%eax
f0116f67:	01 c0                	add    %eax,%eax
f0116f69:	01 d0                	add    %edx,%eax
f0116f6b:	c1 e0 03             	shl    $0x3,%eax
f0116f6e:	01 c8                	add    %ecx,%eax
f0116f70:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116f74:	ff 45 c8             	incl   -0x38(%ebp)
f0116f77:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116f7b:	7e df                	jle    f0116f5c <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116f7d:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116f84:	eb 1b                	jmp    f0116fa1 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116f86:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f89:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f8c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116f8f:	89 d0                	mov    %edx,%eax
f0116f91:	01 c0                	add    %eax,%eax
f0116f93:	01 d0                	add    %edx,%eax
f0116f95:	c1 e0 03             	shl    $0x3,%eax
f0116f98:	01 c8                	add    %ecx,%eax
f0116f9a:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116f9e:	ff 45 c4             	incl   -0x3c(%ebp)
f0116fa1:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116fa5:	7e df                	jle    f0116f86 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116fa7:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116fae:	eb 7a                	jmp    f011702a <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116fb0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116fb3:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116fba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116fbd:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fc0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116fc3:	89 d0                	mov    %edx,%eax
f0116fc5:	01 c0                	add    %eax,%eax
f0116fc7:	01 d0                	add    %edx,%eax
f0116fc9:	c1 e0 03             	shl    $0x3,%eax
f0116fcc:	01 d8                	add    %ebx,%eax
f0116fce:	8b 00                	mov    (%eax),%eax
f0116fd0:	39 c1                	cmp    %eax,%ecx
f0116fd2:	74 17                	je     f0116feb <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116fd4:	83 ec 04             	sub    $0x4,%esp
f0116fd7:	68 48 b2 13 f0       	push   $0xf013b248
f0116fdc:	68 af 00 00 00       	push   $0xaf
f0116fe1:	68 71 b0 13 f0       	push   $0xf013b071
f0116fe6:	e8 1a 92 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116feb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116fee:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116ff5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ff8:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ffb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116ffe:	89 d0                	mov    %edx,%eax
f0117000:	01 c0                	add    %eax,%eax
f0117002:	01 d0                	add    %edx,%eax
f0117004:	c1 e0 03             	shl    $0x3,%eax
f0117007:	01 d8                	add    %ebx,%eax
f0117009:	8b 40 08             	mov    0x8(%eax),%eax
f011700c:	39 c1                	cmp    %eax,%ecx
f011700e:	74 17                	je     f0117027 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0117010:	83 ec 04             	sub    $0x4,%esp
f0117013:	68 48 b2 13 f0       	push   $0xf013b248
f0117018:	68 b2 00 00 00       	push   $0xb2
f011701d:	68 71 b0 13 f0       	push   $0xf013b071
f0117022:	e8 de 91 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117027:	ff 45 c0             	incl   -0x40(%ebp)
f011702a:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011702e:	7e 80                	jle    f0116fb0 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117030:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117037:	eb 7a                	jmp    f01170b3 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117039:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011703c:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117043:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117046:	8b 58 78             	mov    0x78(%eax),%ebx
f0117049:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011704c:	89 d0                	mov    %edx,%eax
f011704e:	01 c0                	add    %eax,%eax
f0117050:	01 d0                	add    %edx,%eax
f0117052:	c1 e0 03             	shl    $0x3,%eax
f0117055:	01 d8                	add    %ebx,%eax
f0117057:	8b 00                	mov    (%eax),%eax
f0117059:	39 c1                	cmp    %eax,%ecx
f011705b:	74 17                	je     f0117074 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f011705d:	83 ec 04             	sub    $0x4,%esp
f0117060:	68 48 b2 13 f0       	push   $0xf013b248
f0117065:	68 b8 00 00 00       	push   $0xb8
f011706a:	68 71 b0 13 f0       	push   $0xf013b071
f011706f:	e8 91 91 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117074:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117077:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f011707e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117081:	8b 58 78             	mov    0x78(%eax),%ebx
f0117084:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117087:	89 d0                	mov    %edx,%eax
f0117089:	01 c0                	add    %eax,%eax
f011708b:	01 d0                	add    %edx,%eax
f011708d:	c1 e0 03             	shl    $0x3,%eax
f0117090:	01 d8                	add    %ebx,%eax
f0117092:	8b 40 08             	mov    0x8(%eax),%eax
f0117095:	39 c1                	cmp    %eax,%ecx
f0117097:	74 17                	je     f01170b0 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0117099:	83 ec 04             	sub    $0x4,%esp
f011709c:	68 48 b2 13 f0       	push   $0xf013b248
f01170a1:	68 bb 00 00 00       	push   $0xbb
f01170a6:	68 71 b0 13 f0       	push   $0xf013b071
f01170ab:	e8 55 91 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01170b0:	ff 45 bc             	incl   -0x44(%ebp)
f01170b3:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01170b7:	7e 80                	jle    f0117039 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01170b9:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01170c0:	eb 7a                	jmp    f011713c <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01170c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170c5:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01170cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170cf:	8b 58 78             	mov    0x78(%eax),%ebx
f01170d2:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01170d5:	89 d0                	mov    %edx,%eax
f01170d7:	01 c0                	add    %eax,%eax
f01170d9:	01 d0                	add    %edx,%eax
f01170db:	c1 e0 03             	shl    $0x3,%eax
f01170de:	01 d8                	add    %ebx,%eax
f01170e0:	8b 00                	mov    (%eax),%eax
f01170e2:	39 c1                	cmp    %eax,%ecx
f01170e4:	74 17                	je     f01170fd <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f01170e6:	83 ec 04             	sub    $0x4,%esp
f01170e9:	68 48 b2 13 f0       	push   $0xf013b248
f01170ee:	68 c1 00 00 00       	push   $0xc1
f01170f3:	68 71 b0 13 f0       	push   $0xf013b071
f01170f8:	e8 08 91 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01170fd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117100:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117107:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011710a:	8b 58 78             	mov    0x78(%eax),%ebx
f011710d:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117110:	89 d0                	mov    %edx,%eax
f0117112:	01 c0                	add    %eax,%eax
f0117114:	01 d0                	add    %edx,%eax
f0117116:	c1 e0 03             	shl    $0x3,%eax
f0117119:	01 d8                	add    %ebx,%eax
f011711b:	8b 40 08             	mov    0x8(%eax),%eax
f011711e:	39 c1                	cmp    %eax,%ecx
f0117120:	74 17                	je     f0117139 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0117122:	83 ec 04             	sub    $0x4,%esp
f0117125:	68 48 b2 13 f0       	push   $0xf013b248
f011712a:	68 c4 00 00 00       	push   $0xc4
f011712f:	68 71 b0 13 f0       	push   $0xf013b071
f0117134:	e8 cc 90 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117139:	ff 45 b8             	incl   -0x48(%ebp)
f011713c:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117140:	7e 80                	jle    f01170c2 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117142:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117149:	75 6e 61 
f011714c:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117153:	6c 00 00 
f0117156:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011715c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117161:	b8 00 00 00 00       	mov    $0x0,%eax
f0117166:	89 d7                	mov    %edx,%edi
f0117168:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011716a:	83 ec 0c             	sub    $0xc,%esp
f011716d:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117173:	50                   	push   %eax
f0117174:	e8 f7 9b fe ff       	call   f0100d70 <execute_command>
f0117179:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011717c:	eb 10                	jmp    f011718e <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011717e:	83 ec 0c             	sub    $0xc,%esp
f0117181:	68 7c b2 13 f0       	push   $0xf013b27c
f0117186:	e8 83 9b fe ff       	call   f0100d0e <cprintf>
f011718b:	83 c4 10             	add    $0x10,%esp
	}
}
f011718e:	90                   	nop
f011718f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117192:	5b                   	pop    %ebx
f0117193:	5e                   	pop    %esi
f0117194:	5f                   	pop    %edi
f0117195:	5d                   	pop    %ebp
f0117196:	c3                   	ret    

f0117197 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117197:	55                   	push   %ebp
f0117198:	89 e5                	mov    %esp,%ebp
f011719a:	57                   	push   %edi
f011719b:	56                   	push   %esi
f011719c:	53                   	push   %ebx
f011719d:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01171a3:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01171a8:	84 c0                	test   %al,%al
f01171aa:	0f 84 be 09 00 00    	je     f0117b6e <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01171b0:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01171b7:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01171bd:	bb b8 b2 13 f0       	mov    $0xf013b2b8,%ebx
f01171c2:	ba 04 00 00 00       	mov    $0x4,%edx
f01171c7:	89 c7                	mov    %eax,%edi
f01171c9:	89 de                	mov    %ebx,%esi
f01171cb:	89 d1                	mov    %edx,%ecx
f01171cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01171cf:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01171d5:	b9 15 00 00 00       	mov    $0x15,%ecx
f01171da:	b8 00 00 00 00       	mov    $0x0,%eax
f01171df:	89 d7                	mov    %edx,%edi
f01171e1:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01171e3:	83 ec 0c             	sub    $0xc,%esp
f01171e6:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01171ec:	50                   	push   %eax
f01171ed:	e8 7e 9b fe ff       	call   f0100d70 <execute_command>
f01171f2:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01171f5:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01171fb:	bb 74 b5 13 f0       	mov    $0xf013b574,%ebx
f0117200:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117205:	89 c7                	mov    %eax,%edi
f0117207:	89 de                	mov    %ebx,%esi
f0117209:	89 d1                	mov    %edx,%ecx
f011720b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011720d:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117213:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117218:	b0 00                	mov    $0x0,%al
f011721a:	89 d7                	mov    %edx,%edi
f011721c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011721e:	83 ec 0c             	sub    $0xc,%esp
f0117221:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117227:	50                   	push   %eax
f0117228:	e8 43 9b fe ff       	call   f0100d70 <execute_command>
f011722d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117230:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117236:	bb d8 b5 13 f0       	mov    $0xf013b5d8,%ebx
f011723b:	ba 17 00 00 00       	mov    $0x17,%edx
f0117240:	89 c7                	mov    %eax,%edi
f0117242:	89 de                	mov    %ebx,%esi
f0117244:	89 d1                	mov    %edx,%ecx
f0117246:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117248:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011724e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117253:	b0 00                	mov    $0x0,%al
f0117255:	89 d7                	mov    %edx,%edi
f0117257:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117259:	83 ec 0c             	sub    $0xc,%esp
f011725c:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117262:	50                   	push   %eax
f0117263:	e8 08 9b fe ff       	call   f0100d70 <execute_command>
f0117268:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011726b:	83 ec 04             	sub    $0x4,%esp
f011726e:	6a 00                	push   $0x0
f0117270:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117273:	50                   	push   %eax
f0117274:	68 00 10 00 00       	push   $0x1000
f0117279:	e8 a1 2c ff ff       	call   f0109f1f <envid2env>
f011727e:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117281:	83 ec 04             	sub    $0x4,%esp
f0117284:	6a 00                	push   $0x0
f0117286:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117289:	50                   	push   %eax
f011728a:	68 01 10 00 00       	push   $0x1001
f011728f:	e8 8b 2c ff ff       	call   f0109f1f <envid2env>
f0117294:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117297:	83 ec 04             	sub    $0x4,%esp
f011729a:	6a 00                	push   $0x0
f011729c:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011729f:	50                   	push   %eax
f01172a0:	68 02 10 00 00       	push   $0x1002
f01172a5:	e8 75 2c ff ff       	call   f0109f1f <envid2env>
f01172aa:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01172ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172b0:	85 c0                	test   %eax,%eax
f01172b2:	74 0e                	je     f01172c2 <test_priority_normal_and_lower+0x12b>
f01172b4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172b7:	85 c0                	test   %eax,%eax
f01172b9:	74 07                	je     f01172c2 <test_priority_normal_and_lower+0x12b>
f01172bb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172be:	85 c0                	test   %eax,%eax
f01172c0:	75 17                	jne    f01172d9 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01172c2:	83 ec 04             	sub    $0x4,%esp
f01172c5:	68 58 b0 13 f0       	push   $0xf013b058
f01172ca:	68 eb 00 00 00       	push   $0xeb
f01172cf:	68 71 b0 13 f0       	push   $0xf013b071
f01172d4:	e8 2c 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01172d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172dc:	8b 40 74             	mov    0x74(%eax),%eax
f01172df:	83 f8 14             	cmp    $0x14,%eax
f01172e2:	75 16                	jne    f01172fa <test_priority_normal_and_lower+0x163>
f01172e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172e7:	8b 40 74             	mov    0x74(%eax),%eax
f01172ea:	83 f8 1e             	cmp    $0x1e,%eax
f01172ed:	75 0b                	jne    f01172fa <test_priority_normal_and_lower+0x163>
f01172ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172f2:	8b 40 74             	mov    0x74(%eax),%eax
f01172f5:	83 f8 28             	cmp    $0x28,%eax
f01172f8:	74 17                	je     f0117311 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01172fa:	83 ec 04             	sub    $0x4,%esp
f01172fd:	68 8c b0 13 f0       	push   $0xf013b08c
f0117302:	68 ee 00 00 00       	push   $0xee
f0117307:	68 71 b0 13 f0       	push   $0xf013b071
f011730c:	e8 f4 8e fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117311:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117318:	eb 44                	jmp    f011735e <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011731a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011731d:	8b 48 78             	mov    0x78(%eax),%ecx
f0117320:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117323:	89 d0                	mov    %edx,%eax
f0117325:	01 c0                	add    %eax,%eax
f0117327:	01 d0                	add    %edx,%eax
f0117329:	c1 e0 03             	shl    $0x3,%eax
f011732c:	01 c8                	add    %ecx,%eax
f011732e:	8b 10                	mov    (%eax),%edx
f0117330:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117333:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011733a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011733d:	8b 48 78             	mov    0x78(%eax),%ecx
f0117340:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117343:	89 d0                	mov    %edx,%eax
f0117345:	01 c0                	add    %eax,%eax
f0117347:	01 d0                	add    %edx,%eax
f0117349:	c1 e0 03             	shl    $0x3,%eax
f011734c:	01 c8                	add    %ecx,%eax
f011734e:	8b 50 08             	mov    0x8(%eax),%edx
f0117351:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117354:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011735b:	ff 45 e4             	incl   -0x1c(%ebp)
f011735e:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117362:	7e b6                	jle    f011731a <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117364:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011736b:	eb 44                	jmp    f01173b1 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011736d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117370:	8b 48 78             	mov    0x78(%eax),%ecx
f0117373:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117376:	89 d0                	mov    %edx,%eax
f0117378:	01 c0                	add    %eax,%eax
f011737a:	01 d0                	add    %edx,%eax
f011737c:	c1 e0 03             	shl    $0x3,%eax
f011737f:	01 c8                	add    %ecx,%eax
f0117381:	8b 10                	mov    (%eax),%edx
f0117383:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117386:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011738d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117390:	8b 48 78             	mov    0x78(%eax),%ecx
f0117393:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117396:	89 d0                	mov    %edx,%eax
f0117398:	01 c0                	add    %eax,%eax
f011739a:	01 d0                	add    %edx,%eax
f011739c:	c1 e0 03             	shl    $0x3,%eax
f011739f:	01 c8                	add    %ecx,%eax
f01173a1:	8b 50 08             	mov    0x8(%eax),%edx
f01173a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01173a7:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01173ae:	ff 45 e0             	incl   -0x20(%ebp)
f01173b1:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01173b5:	7e b6                	jle    f011736d <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01173b7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01173be:	eb 44                	jmp    f0117404 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01173c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01173c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01173c9:	89 d0                	mov    %edx,%eax
f01173cb:	01 c0                	add    %eax,%eax
f01173cd:	01 d0                	add    %edx,%eax
f01173cf:	c1 e0 03             	shl    $0x3,%eax
f01173d2:	01 c8                	add    %ecx,%eax
f01173d4:	8b 10                	mov    (%eax),%edx
f01173d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01173d9:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01173e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173e3:	8b 48 78             	mov    0x78(%eax),%ecx
f01173e6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01173e9:	89 d0                	mov    %edx,%eax
f01173eb:	01 c0                	add    %eax,%eax
f01173ed:	01 d0                	add    %edx,%eax
f01173ef:	c1 e0 03             	shl    $0x3,%eax
f01173f2:	01 c8                	add    %ecx,%eax
f01173f4:	8b 50 08             	mov    0x8(%eax),%edx
f01173f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01173fa:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117401:	ff 45 dc             	incl   -0x24(%ebp)
f0117404:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117408:	7e b6                	jle    f01173c0 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011740a:	e8 a2 5b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011740f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117412:	e8 b1 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117417:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011741a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011741d:	83 ec 08             	sub    $0x8,%esp
f0117420:	6a 03                	push   $0x3
f0117422:	50                   	push   %eax
f0117423:	e8 d5 3f ff ff       	call   f010b3fd <set_program_priority>
f0117428:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011742b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011742e:	83 ec 08             	sub    $0x8,%esp
f0117431:	6a 03                	push   $0x3
f0117433:	50                   	push   %eax
f0117434:	e8 c4 3f ff ff       	call   f010b3fd <set_program_priority>
f0117439:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011743c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011743f:	83 ec 08             	sub    $0x8,%esp
f0117442:	6a 03                	push   $0x3
f0117444:	50                   	push   %eax
f0117445:	e8 b3 3f ff ff       	call   f010b3fd <set_program_priority>
f011744a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011744d:	e8 76 c9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117452:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117455:	74 17                	je     f011746e <test_priority_normal_and_lower+0x2d7>
f0117457:	83 ec 04             	sub    $0x4,%esp
f011745a:	68 d8 b0 13 f0       	push   $0xf013b0d8
f011745f:	68 0a 01 00 00       	push   $0x10a
f0117464:	68 71 b0 13 f0       	push   $0xf013b071
f0117469:	e8 97 8d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011746e:	e8 3e 5b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117473:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117476:	74 17                	je     f011748f <test_priority_normal_and_lower+0x2f8>
f0117478:	83 ec 04             	sub    $0x4,%esp
f011747b:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0117480:	68 0b 01 00 00       	push   $0x10b
f0117485:	68 71 b0 13 f0       	push   $0xf013b071
f011748a:	e8 76 8d fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011748f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117492:	8b 40 74             	mov    0x74(%eax),%eax
f0117495:	83 f8 14             	cmp    $0x14,%eax
f0117498:	75 16                	jne    f01174b0 <test_priority_normal_and_lower+0x319>
f011749a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011749d:	8b 40 74             	mov    0x74(%eax),%eax
f01174a0:	83 f8 1e             	cmp    $0x1e,%eax
f01174a3:	75 0b                	jne    f01174b0 <test_priority_normal_and_lower+0x319>
f01174a5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01174a8:	8b 40 74             	mov    0x74(%eax),%eax
f01174ab:	83 f8 28             	cmp    $0x28,%eax
f01174ae:	74 17                	je     f01174c7 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01174b0:	83 ec 04             	sub    $0x4,%esp
f01174b3:	68 04 b1 13 f0       	push   $0xf013b104
f01174b8:	68 0e 01 00 00       	push   $0x10e
f01174bd:	68 71 b0 13 f0       	push   $0xf013b071
f01174c2:	e8 3e 8d fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01174c7:	e8 e5 5a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01174cc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174cf:	e8 f4 c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01174d4:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01174d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174da:	83 ec 08             	sub    $0x8,%esp
f01174dd:	6a 02                	push   $0x2
f01174df:	50                   	push   %eax
f01174e0:	e8 18 3f ff ff       	call   f010b3fd <set_program_priority>
f01174e5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01174e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174eb:	83 ec 08             	sub    $0x8,%esp
f01174ee:	6a 02                	push   $0x2
f01174f0:	50                   	push   %eax
f01174f1:	e8 07 3f ff ff       	call   f010b3fd <set_program_priority>
f01174f6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01174f9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01174fc:	83 ec 08             	sub    $0x8,%esp
f01174ff:	6a 02                	push   $0x2
f0117501:	50                   	push   %eax
f0117502:	e8 f6 3e ff ff       	call   f010b3fd <set_program_priority>
f0117507:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011750a:	e8 b9 c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011750f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117512:	74 17                	je     f011752b <test_priority_normal_and_lower+0x394>
f0117514:	83 ec 04             	sub    $0x4,%esp
f0117517:	68 d8 b0 13 f0       	push   $0xf013b0d8
f011751c:	68 18 01 00 00       	push   $0x118
f0117521:	68 71 b0 13 f0       	push   $0xf013b071
f0117526:	e8 da 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011752b:	e8 81 5a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117530:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117533:	74 21                	je     f0117556 <test_priority_normal_and_lower+0x3bf>
f0117535:	e8 77 5a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011753a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011753d:	29 c2                	sub    %eax,%edx
f011753f:	89 d0                	mov    %edx,%eax
f0117541:	50                   	push   %eax
f0117542:	68 58 b1 13 f0       	push   $0xf013b158
f0117547:	68 19 01 00 00       	push   $0x119
f011754c:	68 71 b0 13 f0       	push   $0xf013b071
f0117551:	e8 af 8c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117556:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117559:	8b 40 74             	mov    0x74(%eax),%eax
f011755c:	83 f8 0a             	cmp    $0xa,%eax
f011755f:	75 16                	jne    f0117577 <test_priority_normal_and_lower+0x3e0>
f0117561:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117564:	8b 40 74             	mov    0x74(%eax),%eax
f0117567:	83 f8 0f             	cmp    $0xf,%eax
f011756a:	75 0b                	jne    f0117577 <test_priority_normal_and_lower+0x3e0>
f011756c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011756f:	8b 40 74             	mov    0x74(%eax),%eax
f0117572:	83 f8 14             	cmp    $0x14,%eax
f0117575:	74 17                	je     f011758e <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117577:	83 ec 04             	sub    $0x4,%esp
f011757a:	68 88 b1 13 f0       	push   $0xf013b188
f011757f:	68 1c 01 00 00       	push   $0x11c
f0117584:	68 71 b0 13 f0       	push   $0xf013b071
f0117589:	e8 77 8c fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011758e:	e8 1e 5a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117593:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117596:	e8 2d c8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011759b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011759e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175a1:	83 ec 08             	sub    $0x8,%esp
f01175a4:	6a 02                	push   $0x2
f01175a6:	50                   	push   %eax
f01175a7:	e8 51 3e ff ff       	call   f010b3fd <set_program_priority>
f01175ac:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01175af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175b2:	83 ec 08             	sub    $0x8,%esp
f01175b5:	6a 02                	push   $0x2
f01175b7:	50                   	push   %eax
f01175b8:	e8 40 3e ff ff       	call   f010b3fd <set_program_priority>
f01175bd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01175c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01175c3:	83 ec 08             	sub    $0x8,%esp
f01175c6:	6a 02                	push   $0x2
f01175c8:	50                   	push   %eax
f01175c9:	e8 2f 3e ff ff       	call   f010b3fd <set_program_priority>
f01175ce:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01175d1:	e8 f2 c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01175d6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01175d9:	74 17                	je     f01175f2 <test_priority_normal_and_lower+0x45b>
f01175db:	83 ec 04             	sub    $0x4,%esp
f01175de:	68 d8 b0 13 f0       	push   $0xf013b0d8
f01175e3:	68 26 01 00 00       	push   $0x126
f01175e8:	68 71 b0 13 f0       	push   $0xf013b071
f01175ed:	e8 13 8c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01175f2:	e8 ba 59 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01175f7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01175fa:	74 21                	je     f011761d <test_priority_normal_and_lower+0x486>
f01175fc:	e8 b0 59 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117601:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117604:	29 c2                	sub    %eax,%edx
f0117606:	89 d0                	mov    %edx,%eax
f0117608:	50                   	push   %eax
f0117609:	68 58 b1 13 f0       	push   $0xf013b158
f011760e:	68 27 01 00 00       	push   $0x127
f0117613:	68 71 b0 13 f0       	push   $0xf013b071
f0117618:	e8 e8 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011761d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117620:	8b 40 74             	mov    0x74(%eax),%eax
f0117623:	83 f8 0a             	cmp    $0xa,%eax
f0117626:	75 16                	jne    f011763e <test_priority_normal_and_lower+0x4a7>
f0117628:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011762b:	8b 40 74             	mov    0x74(%eax),%eax
f011762e:	83 f8 0f             	cmp    $0xf,%eax
f0117631:	75 0b                	jne    f011763e <test_priority_normal_and_lower+0x4a7>
f0117633:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117636:	8b 40 74             	mov    0x74(%eax),%eax
f0117639:	83 f8 0a             	cmp    $0xa,%eax
f011763c:	74 17                	je     f0117655 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f011763e:	83 ec 04             	sub    $0x4,%esp
f0117641:	68 88 b1 13 f0       	push   $0xf013b188
f0117646:	68 2a 01 00 00       	push   $0x12a
f011764b:	68 71 b0 13 f0       	push   $0xf013b071
f0117650:	e8 b0 8b fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0117655:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011765c:	eb 7a                	jmp    f01176d8 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011765e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117661:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117668:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011766b:	8b 58 78             	mov    0x78(%eax),%ebx
f011766e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117671:	89 d0                	mov    %edx,%eax
f0117673:	01 c0                	add    %eax,%eax
f0117675:	01 d0                	add    %edx,%eax
f0117677:	c1 e0 03             	shl    $0x3,%eax
f011767a:	01 d8                	add    %ebx,%eax
f011767c:	8b 00                	mov    (%eax),%eax
f011767e:	39 c1                	cmp    %eax,%ecx
f0117680:	74 17                	je     f0117699 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0117682:	83 ec 04             	sub    $0x4,%esp
f0117685:	68 48 b2 13 f0       	push   $0xf013b248
f011768a:	68 2f 01 00 00       	push   $0x12f
f011768f:	68 71 b0 13 f0       	push   $0xf013b071
f0117694:	e8 6c 8b fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117699:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011769c:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01176a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176a6:	8b 58 78             	mov    0x78(%eax),%ebx
f01176a9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01176ac:	89 d0                	mov    %edx,%eax
f01176ae:	01 c0                	add    %eax,%eax
f01176b0:	01 d0                	add    %edx,%eax
f01176b2:	c1 e0 03             	shl    $0x3,%eax
f01176b5:	01 d8                	add    %ebx,%eax
f01176b7:	8b 40 08             	mov    0x8(%eax),%eax
f01176ba:	39 c1                	cmp    %eax,%ecx
f01176bc:	74 17                	je     f01176d5 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01176be:	83 ec 04             	sub    $0x4,%esp
f01176c1:	68 48 b2 13 f0       	push   $0xf013b248
f01176c6:	68 32 01 00 00       	push   $0x132
f01176cb:	68 71 b0 13 f0       	push   $0xf013b071
f01176d0:	e8 30 8b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01176d5:	ff 45 d8             	incl   -0x28(%ebp)
f01176d8:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01176dc:	7e 80                	jle    f011765e <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01176de:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01176e5:	eb 7a                	jmp    f0117761 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01176e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01176ea:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01176f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176f4:	8b 58 78             	mov    0x78(%eax),%ebx
f01176f7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01176fa:	89 d0                	mov    %edx,%eax
f01176fc:	01 c0                	add    %eax,%eax
f01176fe:	01 d0                	add    %edx,%eax
f0117700:	c1 e0 03             	shl    $0x3,%eax
f0117703:	01 d8                	add    %ebx,%eax
f0117705:	8b 00                	mov    (%eax),%eax
f0117707:	39 c1                	cmp    %eax,%ecx
f0117709:	74 17                	je     f0117722 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f011770b:	83 ec 04             	sub    $0x4,%esp
f011770e:	68 48 b2 13 f0       	push   $0xf013b248
f0117713:	68 38 01 00 00       	push   $0x138
f0117718:	68 71 b0 13 f0       	push   $0xf013b071
f011771d:	e8 e3 8a fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117722:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117725:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011772c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011772f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117732:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117735:	89 d0                	mov    %edx,%eax
f0117737:	01 c0                	add    %eax,%eax
f0117739:	01 d0                	add    %edx,%eax
f011773b:	c1 e0 03             	shl    $0x3,%eax
f011773e:	01 d8                	add    %ebx,%eax
f0117740:	8b 40 08             	mov    0x8(%eax),%eax
f0117743:	39 c1                	cmp    %eax,%ecx
f0117745:	74 17                	je     f011775e <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117747:	83 ec 04             	sub    $0x4,%esp
f011774a:	68 48 b2 13 f0       	push   $0xf013b248
f011774f:	68 3b 01 00 00       	push   $0x13b
f0117754:	68 71 b0 13 f0       	push   $0xf013b071
f0117759:	e8 a7 8a fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011775e:	ff 45 d4             	incl   -0x2c(%ebp)
f0117761:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117765:	7e 80                	jle    f01176e7 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117767:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011776e:	eb 7a                	jmp    f01177ea <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117770:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117773:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011777a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011777d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117780:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117783:	89 d0                	mov    %edx,%eax
f0117785:	01 c0                	add    %eax,%eax
f0117787:	01 d0                	add    %edx,%eax
f0117789:	c1 e0 03             	shl    $0x3,%eax
f011778c:	01 d8                	add    %ebx,%eax
f011778e:	8b 00                	mov    (%eax),%eax
f0117790:	39 c1                	cmp    %eax,%ecx
f0117792:	74 17                	je     f01177ab <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117794:	83 ec 04             	sub    $0x4,%esp
f0117797:	68 48 b2 13 f0       	push   $0xf013b248
f011779c:	68 41 01 00 00       	push   $0x141
f01177a1:	68 71 b0 13 f0       	push   $0xf013b071
f01177a6:	e8 5a 8a fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01177ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01177ae:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01177b5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177b8:	8b 58 78             	mov    0x78(%eax),%ebx
f01177bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01177be:	89 d0                	mov    %edx,%eax
f01177c0:	01 c0                	add    %eax,%eax
f01177c2:	01 d0                	add    %edx,%eax
f01177c4:	c1 e0 03             	shl    $0x3,%eax
f01177c7:	01 d8                	add    %ebx,%eax
f01177c9:	8b 40 08             	mov    0x8(%eax),%eax
f01177cc:	39 c1                	cmp    %eax,%ecx
f01177ce:	74 17                	je     f01177e7 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f01177d0:	83 ec 04             	sub    $0x4,%esp
f01177d3:	68 48 b2 13 f0       	push   $0xf013b248
f01177d8:	68 44 01 00 00       	push   $0x144
f01177dd:	68 71 b0 13 f0       	push   $0xf013b071
f01177e2:	e8 1e 8a fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01177e7:	ff 45 d0             	incl   -0x30(%ebp)
f01177ea:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01177ee:	7e 80                	jle    f0117770 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01177f0:	e8 bc 57 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01177f5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177f8:	e8 cb c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01177fd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117800:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117803:	83 ec 08             	sub    $0x8,%esp
f0117806:	6a 01                	push   $0x1
f0117808:	50                   	push   %eax
f0117809:	e8 ef 3b ff ff       	call   f010b3fd <set_program_priority>
f011780e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117811:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117814:	83 ec 08             	sub    $0x8,%esp
f0117817:	6a 01                	push   $0x1
f0117819:	50                   	push   %eax
f011781a:	e8 de 3b ff ff       	call   f010b3fd <set_program_priority>
f011781f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117822:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117825:	83 ec 08             	sub    $0x8,%esp
f0117828:	6a 01                	push   $0x1
f011782a:	50                   	push   %eax
f011782b:	e8 cd 3b ff ff       	call   f010b3fd <set_program_priority>
f0117830:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117833:	e8 90 c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117838:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011783b:	74 17                	je     f0117854 <test_priority_normal_and_lower+0x6bd>
f011783d:	83 ec 04             	sub    $0x4,%esp
f0117840:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0117845:	68 4d 01 00 00       	push   $0x14d
f011784a:	68 71 b0 13 f0       	push   $0xf013b071
f011784f:	e8 b1 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117854:	e8 58 57 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117859:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011785c:	83 f8 0d             	cmp    $0xd,%eax
f011785f:	74 17                	je     f0117878 <test_priority_normal_and_lower+0x6e1>
f0117861:	83 ec 04             	sub    $0x4,%esp
f0117864:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0117869:	68 4e 01 00 00       	push   $0x14e
f011786e:	68 71 b0 13 f0       	push   $0xf013b071
f0117873:	e8 8d 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117878:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011787b:	8b 40 74             	mov    0x74(%eax),%eax
f011787e:	83 f8 05             	cmp    $0x5,%eax
f0117881:	75 16                	jne    f0117899 <test_priority_normal_and_lower+0x702>
f0117883:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117886:	8b 40 74             	mov    0x74(%eax),%eax
f0117889:	83 f8 07             	cmp    $0x7,%eax
f011788c:	75 0b                	jne    f0117899 <test_priority_normal_and_lower+0x702>
f011788e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117891:	8b 40 74             	mov    0x74(%eax),%eax
f0117894:	83 f8 05             	cmp    $0x5,%eax
f0117897:	74 17                	je     f01178b0 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117899:	83 ec 04             	sub    $0x4,%esp
f011789c:	68 2c b4 13 f0       	push   $0xf013b42c
f01178a1:	68 51 01 00 00       	push   $0x151
f01178a6:	68 71 b0 13 f0       	push   $0xf013b071
f01178ab:	e8 55 89 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f01178b0:	e8 fc 56 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01178b5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178b8:	e8 0b c5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01178bd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01178c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178c3:	83 ec 08             	sub    $0x8,%esp
f01178c6:	6a 01                	push   $0x1
f01178c8:	50                   	push   %eax
f01178c9:	e8 2f 3b ff ff       	call   f010b3fd <set_program_priority>
f01178ce:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178d1:	e8 f2 c4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01178d6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01178d9:	74 17                	je     f01178f2 <test_priority_normal_and_lower+0x75b>
f01178db:	83 ec 04             	sub    $0x4,%esp
f01178de:	68 d8 b0 13 f0       	push   $0xf013b0d8
f01178e3:	68 57 01 00 00       	push   $0x157
f01178e8:	68 71 b0 13 f0       	push   $0xf013b071
f01178ed:	e8 13 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01178f2:	e8 ba 56 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01178f7:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01178fa:	83 f8 03             	cmp    $0x3,%eax
f01178fd:	74 17                	je     f0117916 <test_priority_normal_and_lower+0x77f>
f01178ff:	83 ec 04             	sub    $0x4,%esp
f0117902:	68 d8 b0 13 f0       	push   $0xf013b0d8
f0117907:	68 58 01 00 00       	push   $0x158
f011790c:	68 71 b0 13 f0       	push   $0xf013b071
f0117911:	e8 ef 88 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117916:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117919:	8b 40 74             	mov    0x74(%eax),%eax
f011791c:	83 f8 02             	cmp    $0x2,%eax
f011791f:	75 16                	jne    f0117937 <test_priority_normal_and_lower+0x7a0>
f0117921:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117924:	8b 40 74             	mov    0x74(%eax),%eax
f0117927:	83 f8 07             	cmp    $0x7,%eax
f011792a:	75 0b                	jne    f0117937 <test_priority_normal_and_lower+0x7a0>
f011792c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011792f:	8b 40 74             	mov    0x74(%eax),%eax
f0117932:	83 f8 05             	cmp    $0x5,%eax
f0117935:	74 17                	je     f011794e <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117937:	83 ec 04             	sub    $0x4,%esp
f011793a:	68 0c b2 13 f0       	push   $0xf013b20c
f011793f:	68 5b 01 00 00       	push   $0x15b
f0117944:	68 71 b0 13 f0       	push   $0xf013b071
f0117949:	e8 b7 88 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f011794e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117955:	e9 80 00 00 00       	jmp    f01179da <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011795a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011795d:	83 c0 08             	add    $0x8,%eax
f0117960:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117967:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011796a:	8b 58 78             	mov    0x78(%eax),%ebx
f011796d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117970:	89 d0                	mov    %edx,%eax
f0117972:	01 c0                	add    %eax,%eax
f0117974:	01 d0                	add    %edx,%eax
f0117976:	c1 e0 03             	shl    $0x3,%eax
f0117979:	01 d8                	add    %ebx,%eax
f011797b:	8b 00                	mov    (%eax),%eax
f011797d:	39 c1                	cmp    %eax,%ecx
f011797f:	74 17                	je     f0117998 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117981:	83 ec 04             	sub    $0x4,%esp
f0117984:	68 5c b4 13 f0       	push   $0xf013b45c
f0117989:	68 60 01 00 00       	push   $0x160
f011798e:	68 71 b0 13 f0       	push   $0xf013b071
f0117993:	e8 6d 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117998:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011799b:	83 c0 08             	add    $0x8,%eax
f011799e:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01179a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179a8:	8b 58 78             	mov    0x78(%eax),%ebx
f01179ab:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01179ae:	89 d0                	mov    %edx,%eax
f01179b0:	01 c0                	add    %eax,%eax
f01179b2:	01 d0                	add    %edx,%eax
f01179b4:	c1 e0 03             	shl    $0x3,%eax
f01179b7:	01 d8                	add    %ebx,%eax
f01179b9:	8b 40 08             	mov    0x8(%eax),%eax
f01179bc:	39 c1                	cmp    %eax,%ecx
f01179be:	74 17                	je     f01179d7 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01179c0:	83 ec 04             	sub    $0x4,%esp
f01179c3:	68 5c b4 13 f0       	push   $0xf013b45c
f01179c8:	68 63 01 00 00       	push   $0x163
f01179cd:	68 71 b0 13 f0       	push   $0xf013b071
f01179d2:	e8 2e 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01179d7:	ff 45 cc             	incl   -0x34(%ebp)
f01179da:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01179de:	0f 8e 76 ff ff ff    	jle    f011795a <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01179e4:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01179eb:	e9 80 00 00 00       	jmp    f0117a70 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01179f0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01179f3:	83 c0 03             	add    $0x3,%eax
f01179f6:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01179fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a00:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a03:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117a06:	89 d0                	mov    %edx,%eax
f0117a08:	01 c0                	add    %eax,%eax
f0117a0a:	01 d0                	add    %edx,%eax
f0117a0c:	c1 e0 03             	shl    $0x3,%eax
f0117a0f:	01 d8                	add    %ebx,%eax
f0117a11:	8b 00                	mov    (%eax),%eax
f0117a13:	39 c1                	cmp    %eax,%ecx
f0117a15:	74 17                	je     f0117a2e <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117a17:	ff 75 c8             	pushl  -0x38(%ebp)
f0117a1a:	68 c8 b4 13 f0       	push   $0xf013b4c8
f0117a1f:	68 69 01 00 00       	push   $0x169
f0117a24:	68 71 b0 13 f0       	push   $0xf013b071
f0117a29:	e8 d7 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117a31:	83 c0 03             	add    $0x3,%eax
f0117a34:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117a3b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a3e:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a41:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117a44:	89 d0                	mov    %edx,%eax
f0117a46:	01 c0                	add    %eax,%eax
f0117a48:	01 d0                	add    %edx,%eax
f0117a4a:	c1 e0 03             	shl    $0x3,%eax
f0117a4d:	01 d8                	add    %ebx,%eax
f0117a4f:	8b 40 08             	mov    0x8(%eax),%eax
f0117a52:	39 c1                	cmp    %eax,%ecx
f0117a54:	74 17                	je     f0117a6d <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117a56:	83 ec 04             	sub    $0x4,%esp
f0117a59:	68 5c b4 13 f0       	push   $0xf013b45c
f0117a5e:	68 6c 01 00 00       	push   $0x16c
f0117a63:	68 71 b0 13 f0       	push   $0xf013b071
f0117a68:	e8 98 87 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117a6d:	ff 45 c8             	incl   -0x38(%ebp)
f0117a70:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117a74:	0f 8e 76 ff ff ff    	jle    f01179f0 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117a7a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117a81:	e9 80 00 00 00       	jmp    f0117b06 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a86:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117a89:	83 c0 05             	add    $0x5,%eax
f0117a8c:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117a93:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117a96:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a99:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117a9c:	89 d0                	mov    %edx,%eax
f0117a9e:	01 c0                	add    %eax,%eax
f0117aa0:	01 d0                	add    %edx,%eax
f0117aa2:	c1 e0 03             	shl    $0x3,%eax
f0117aa5:	01 d8                	add    %ebx,%eax
f0117aa7:	8b 00                	mov    (%eax),%eax
f0117aa9:	39 c1                	cmp    %eax,%ecx
f0117aab:	74 17                	je     f0117ac4 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117aad:	83 ec 04             	sub    $0x4,%esp
f0117ab0:	68 5c b4 13 f0       	push   $0xf013b45c
f0117ab5:	68 72 01 00 00       	push   $0x172
f0117aba:	68 71 b0 13 f0       	push   $0xf013b071
f0117abf:	e8 41 87 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117ac4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117ac7:	83 c0 05             	add    $0x5,%eax
f0117aca:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117ad1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ad4:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ad7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117ada:	89 d0                	mov    %edx,%eax
f0117adc:	01 c0                	add    %eax,%eax
f0117ade:	01 d0                	add    %edx,%eax
f0117ae0:	c1 e0 03             	shl    $0x3,%eax
f0117ae3:	01 d8                	add    %ebx,%eax
f0117ae5:	8b 40 08             	mov    0x8(%eax),%eax
f0117ae8:	39 c1                	cmp    %eax,%ecx
f0117aea:	74 17                	je     f0117b03 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117aec:	83 ec 04             	sub    $0x4,%esp
f0117aef:	68 5c b4 13 f0       	push   $0xf013b45c
f0117af4:	68 75 01 00 00       	push   $0x175
f0117af9:	68 71 b0 13 f0       	push   $0xf013b071
f0117afe:	e8 02 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117b03:	ff 45 c4             	incl   -0x3c(%ebp)
f0117b06:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117b0a:	0f 8e 76 ff ff ff    	jle    f0117a86 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117b10:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b13:	83 ec 08             	sub    $0x8,%esp
f0117b16:	6a 05                	push   $0x5
f0117b18:	50                   	push   %eax
f0117b19:	e8 df 38 ff ff       	call   f010b3fd <set_program_priority>
f0117b1e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117b21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b24:	83 ec 08             	sub    $0x8,%esp
f0117b27:	6a 05                	push   $0x5
f0117b29:	50                   	push   %eax
f0117b2a:	e8 ce 38 ff ff       	call   f010b3fd <set_program_priority>
f0117b2f:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117b32:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117b39:	75 6e 61 
f0117b3c:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117b43:	6c 00 00 
f0117b46:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117b4c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117b51:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b56:	89 d7                	mov    %edx,%edi
f0117b58:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117b5a:	83 ec 0c             	sub    $0xc,%esp
f0117b5d:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117b63:	50                   	push   %eax
f0117b64:	e8 07 92 fe ff       	call   f0100d70 <execute_command>
f0117b69:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117b6c:	eb 10                	jmp    f0117b7e <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117b6e:	83 ec 0c             	sub    $0xc,%esp
f0117b71:	68 38 b5 13 f0       	push   $0xf013b538
f0117b76:	e8 93 91 fe ff       	call   f0100d0e <cprintf>
f0117b7b:	83 c4 10             	add    $0x10,%esp
	}
}
f0117b7e:	90                   	nop
f0117b7f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117b82:	5b                   	pop    %ebx
f0117b83:	5e                   	pop    %esi
f0117b84:	5f                   	pop    %edi
f0117b85:	5d                   	pop    %ebp
f0117b86:	c3                   	ret    

f0117b87 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117b87:	55                   	push   %ebp
f0117b88:	89 e5                	mov    %esp,%ebp
f0117b8a:	a1 5c ad 89 f0       	mov    0xf089ad5c,%eax
f0117b8f:	83 f8 03             	cmp    $0x3,%eax
f0117b92:	75 04                	jne    f0117b98 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117b94:	b0 01                	mov    $0x1,%al
f0117b96:	eb 02                	jmp    f0117b9a <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117b98:	b0 00                	mov    $0x0,%al
f0117b9a:	5d                   	pop    %ebp
f0117b9b:	c3                   	ret    

f0117b9c <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117b9c:	55                   	push   %ebp
f0117b9d:	89 e5                	mov    %esp,%ebp
f0117b9f:	57                   	push   %edi
f0117ba0:	53                   	push   %ebx
f0117ba1:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117ba7:	83 ec 0c             	sub    $0xc,%esp
f0117baa:	68 3c b6 13 f0       	push   $0xf013b63c
f0117baf:	e8 5a 91 fe ff       	call   f0100d0e <cprintf>
f0117bb4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117bb7:	83 ec 0c             	sub    $0xc,%esp
f0117bba:	68 6c b6 13 f0       	push   $0xf013b66c
f0117bbf:	e8 4a 91 fe ff       	call   f0100d0e <cprintf>
f0117bc4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117bc7:	83 ec 0c             	sub    $0xc,%esp
f0117bca:	68 3c b6 13 f0       	push   $0xf013b63c
f0117bcf:	e8 3a 91 fe ff       	call   f0100d0e <cprintf>
f0117bd4:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117bd7:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117bdb:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117bdf:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117be5:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117beb:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117bf2:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117bf9:	e8 b3 53 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117bfe:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117c01:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117c07:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117c0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0117c11:	89 d7                	mov    %edx,%edi
f0117c13:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117c15:	e8 97 53 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117c1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117c1d:	e8 a6 c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c22:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117c25:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117c2c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117c2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c34:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117c37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c3f:	f7 75 d4             	divl   -0x2c(%ebp)
f0117c42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c45:	29 d0                	sub    %edx,%eax
f0117c47:	89 c1                	mov    %eax,%ecx
f0117c49:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117c50:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117c55:	0f b6 d0             	movzbl %al,%edx
f0117c58:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117c5b:	01 d0                	add    %edx,%eax
f0117c5d:	48                   	dec    %eax
f0117c5e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117c61:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c69:	f7 75 cc             	divl   -0x34(%ebp)
f0117c6c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c6f:	29 d0                	sub    %edx,%eax
f0117c71:	01 c1                	add    %eax,%ecx
f0117c73:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117c7a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117c7f:	0f b6 c0             	movzbl %al,%eax
f0117c82:	c1 e0 04             	shl    $0x4,%eax
f0117c85:	89 c2                	mov    %eax,%edx
f0117c87:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117c8a:	01 d0                	add    %edx,%eax
f0117c8c:	48                   	dec    %eax
f0117c8d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117c90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117c93:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c98:	f7 75 c4             	divl   -0x3c(%ebp)
f0117c9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117c9e:	29 d0                	sub    %edx,%eax
f0117ca0:	01 c8                	add    %ecx,%eax
f0117ca2:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117ca7:	29 c2                	sub    %eax,%edx
f0117ca9:	89 d0                	mov    %edx,%eax
f0117cab:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117cae:	83 ec 0c             	sub    $0xc,%esp
f0117cb1:	ff 75 bc             	pushl  -0x44(%ebp)
f0117cb4:	e8 d3 fe fe ff       	call   f0107b8c <kmalloc>
f0117cb9:	83 c4 10             	add    $0x10,%esp
f0117cbc:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117cc2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117cc8:	85 c0                	test   %eax,%eax
f0117cca:	74 14                	je     f0117ce0 <test_kmalloc+0x144>
f0117ccc:	83 ec 04             	sub    $0x4,%esp
f0117ccf:	68 c8 b6 13 f0       	push   $0xf013b6c8
f0117cd4:	6a 40                	push   $0x40
f0117cd6:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117cdb:	e8 25 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ce0:	e8 e3 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117ce5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ce8:	74 14                	je     f0117cfe <test_kmalloc+0x162>
f0117cea:	83 ec 04             	sub    $0x4,%esp
f0117ced:	68 14 b7 13 f0       	push   $0xf013b714
f0117cf2:	6a 41                	push   $0x41
f0117cf4:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117cf9:	e8 07 85 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117cfe:	e8 ae 52 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117d03:	89 c2                	mov    %eax,%edx
f0117d05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117d08:	39 c2                	cmp    %eax,%edx
f0117d0a:	74 14                	je     f0117d20 <test_kmalloc+0x184>
f0117d0c:	83 ec 04             	sub    $0x4,%esp
f0117d0f:	68 7c b7 13 f0       	push   $0xf013b77c
f0117d14:	6a 42                	push   $0x42
f0117d16:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117d1b:	e8 e5 84 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117d20:	83 ec 0c             	sub    $0xc,%esp
f0117d23:	68 bc b7 13 f0       	push   $0xf013b7bc
f0117d28:	e8 e1 8f fe ff       	call   f0100d0e <cprintf>
f0117d2d:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d30:	e8 7c 52 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117d35:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d38:	e8 8b c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d3d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117d40:	83 ec 0c             	sub    $0xc,%esp
f0117d43:	68 00 fc 1f 00       	push   $0x1ffc00
f0117d48:	e8 3f fe fe ff       	call   f0107b8c <kmalloc>
f0117d4d:	83 c4 10             	add    $0x10,%esp
f0117d50:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117d56:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117d5c:	89 c1                	mov    %eax,%ecx
f0117d5e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117d65:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d6d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117d70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d73:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d78:	f7 75 b8             	divl   -0x48(%ebp)
f0117d7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d7e:	29 d0                	sub    %edx,%eax
f0117d80:	89 c3                	mov    %eax,%ebx
f0117d82:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117d89:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117d8e:	0f b6 d0             	movzbl %al,%edx
f0117d91:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d94:	01 d0                	add    %edx,%eax
f0117d96:	48                   	dec    %eax
f0117d97:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117d9a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117d9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117da2:	f7 75 b0             	divl   -0x50(%ebp)
f0117da5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117da8:	29 d0                	sub    %edx,%eax
f0117daa:	01 c3                	add    %eax,%ebx
f0117dac:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117db3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117db8:	0f b6 c0             	movzbl %al,%eax
f0117dbb:	c1 e0 04             	shl    $0x4,%eax
f0117dbe:	89 c2                	mov    %eax,%edx
f0117dc0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117dc3:	01 d0                	add    %edx,%eax
f0117dc5:	48                   	dec    %eax
f0117dc6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117dc9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117dcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dd1:	f7 75 a8             	divl   -0x58(%ebp)
f0117dd4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117dd7:	29 d0                	sub    %edx,%eax
f0117dd9:	01 d8                	add    %ebx,%eax
f0117ddb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117de0:	39 c1                	cmp    %eax,%ecx
f0117de2:	74 14                	je     f0117df8 <test_kmalloc+0x25c>
f0117de4:	83 ec 04             	sub    $0x4,%esp
f0117de7:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0117dec:	6a 49                	push   $0x49
f0117dee:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117df3:	e8 0d 84 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117df8:	e8 cb bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117dfd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117e00:	74 14                	je     f0117e16 <test_kmalloc+0x27a>
f0117e02:	83 ec 04             	sub    $0x4,%esp
f0117e05:	68 14 b7 13 f0       	push   $0xf013b714
f0117e0a:	6a 4a                	push   $0x4a
f0117e0c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117e11:	e8 ef 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e16:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e19:	e8 93 51 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117e1e:	29 c3                	sub    %eax,%ebx
f0117e20:	89 d8                	mov    %ebx,%eax
f0117e22:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117e27:	74 14                	je     f0117e3d <test_kmalloc+0x2a1>
f0117e29:	83 ec 04             	sub    $0x4,%esp
f0117e2c:	68 7c b7 13 f0       	push   $0xf013b77c
f0117e31:	6a 4b                	push   $0x4b
f0117e33:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117e38:	e8 c8 83 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117e3d:	e8 6f 51 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117e42:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e45:	e8 7e bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117e4d:	83 ec 0c             	sub    $0xc,%esp
f0117e50:	68 00 fc 1f 00       	push   $0x1ffc00
f0117e55:	e8 32 fd fe ff       	call   f0107b8c <kmalloc>
f0117e5a:	83 c4 10             	add    $0x10,%esp
f0117e5d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117e63:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117e69:	89 c1                	mov    %eax,%ecx
f0117e6b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117e72:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117e75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e7a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117e7d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117e80:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e85:	f7 75 a0             	divl   -0x60(%ebp)
f0117e88:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117e8b:	29 d0                	sub    %edx,%eax
f0117e8d:	89 c3                	mov    %eax,%ebx
f0117e8f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117e96:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117e9b:	0f b6 d0             	movzbl %al,%edx
f0117e9e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117ea1:	01 d0                	add    %edx,%eax
f0117ea3:	48                   	dec    %eax
f0117ea4:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117ea7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117eaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0117eaf:	f7 75 98             	divl   -0x68(%ebp)
f0117eb2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117eb5:	29 d0                	sub    %edx,%eax
f0117eb7:	01 c3                	add    %eax,%ebx
f0117eb9:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117ec0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117ec5:	0f b6 c0             	movzbl %al,%eax
f0117ec8:	c1 e0 04             	shl    $0x4,%eax
f0117ecb:	89 c2                	mov    %eax,%edx
f0117ecd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117ed0:	01 d0                	add    %edx,%eax
f0117ed2:	48                   	dec    %eax
f0117ed3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117ed6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117ed9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ede:	f7 75 90             	divl   -0x70(%ebp)
f0117ee1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117ee4:	29 d0                	sub    %edx,%eax
f0117ee6:	01 d8                	add    %ebx,%eax
f0117ee8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117eed:	39 c1                	cmp    %eax,%ecx
f0117eef:	74 14                	je     f0117f05 <test_kmalloc+0x369>
f0117ef1:	83 ec 04             	sub    $0x4,%esp
f0117ef4:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0117ef9:	6a 51                	push   $0x51
f0117efb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117f00:	e8 00 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f05:	e8 be be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f0d:	74 14                	je     f0117f23 <test_kmalloc+0x387>
f0117f0f:	83 ec 04             	sub    $0x4,%esp
f0117f12:	68 14 b7 13 f0       	push   $0xf013b714
f0117f17:	6a 52                	push   $0x52
f0117f19:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117f1e:	e8 e2 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117f23:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117f26:	e8 86 50 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117f2b:	29 c3                	sub    %eax,%ebx
f0117f2d:	89 d8                	mov    %ebx,%eax
f0117f2f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117f34:	74 14                	je     f0117f4a <test_kmalloc+0x3ae>
f0117f36:	83 ec 04             	sub    $0x4,%esp
f0117f39:	68 7c b7 13 f0       	push   $0xf013b77c
f0117f3e:	6a 53                	push   $0x53
f0117f40:	68 fa b6 13 f0       	push   $0xf013b6fa
f0117f45:	e8 bb 82 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117f4a:	e8 62 50 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0117f4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f52:	e8 71 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f57:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117f5a:	83 ec 0c             	sub    $0xc,%esp
f0117f5d:	68 00 08 00 00       	push   $0x800
f0117f62:	e8 25 fc fe ff       	call   f0107b8c <kmalloc>
f0117f67:	83 c4 10             	add    $0x10,%esp
f0117f6a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117f70:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117f76:	89 c1                	mov    %eax,%ecx
f0117f78:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117f7f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117f82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f87:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117f8a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117f8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f92:	f7 75 88             	divl   -0x78(%ebp)
f0117f95:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117f98:	29 d0                	sub    %edx,%eax
f0117f9a:	89 c3                	mov    %eax,%ebx
f0117f9c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117fa3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117fa8:	0f b6 d0             	movzbl %al,%edx
f0117fab:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117fae:	01 d0                	add    %edx,%eax
f0117fb0:	48                   	dec    %eax
f0117fb1:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117fb7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117fbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fc2:	f7 75 80             	divl   -0x80(%ebp)
f0117fc5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117fcb:	29 d0                	sub    %edx,%eax
f0117fcd:	01 c3                	add    %eax,%ebx
f0117fcf:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117fd6:	10 00 00 
f0117fd9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0117fde:	0f b6 c0             	movzbl %al,%eax
f0117fe1:	c1 e0 04             	shl    $0x4,%eax
f0117fe4:	89 c2                	mov    %eax,%edx
f0117fe6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117fec:	01 d0                	add    %edx,%eax
f0117fee:	48                   	dec    %eax
f0117fef:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117ff5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117ffb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118000:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118006:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011800c:	29 d0                	sub    %edx,%eax
f011800e:	01 d8                	add    %ebx,%eax
f0118010:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118015:	39 c1                	cmp    %eax,%ecx
f0118017:	74 14                	je     f011802d <test_kmalloc+0x491>
f0118019:	83 ec 04             	sub    $0x4,%esp
f011801c:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0118021:	6a 59                	push   $0x59
f0118023:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118028:	e8 d8 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011802d:	e8 96 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118032:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118035:	74 14                	je     f011804b <test_kmalloc+0x4af>
f0118037:	83 ec 04             	sub    $0x4,%esp
f011803a:	68 14 b7 13 f0       	push   $0xf013b714
f011803f:	6a 5a                	push   $0x5a
f0118041:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118046:	e8 ba 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011804b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011804e:	e8 5e 4f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118053:	29 c3                	sub    %eax,%ebx
f0118055:	89 d8                	mov    %ebx,%eax
f0118057:	83 f8 01             	cmp    $0x1,%eax
f011805a:	74 14                	je     f0118070 <test_kmalloc+0x4d4>
f011805c:	83 ec 04             	sub    $0x4,%esp
f011805f:	68 7c b7 13 f0       	push   $0xf013b77c
f0118064:	6a 5b                	push   $0x5b
f0118066:	68 fa b6 13 f0       	push   $0xf013b6fa
f011806b:	e8 95 81 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118070:	e8 3c 4f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118075:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118078:	e8 4b bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011807d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118080:	83 ec 0c             	sub    $0xc,%esp
f0118083:	68 00 08 00 00       	push   $0x800
f0118088:	e8 ff fa fe ff       	call   f0107b8c <kmalloc>
f011808d:	83 c4 10             	add    $0x10,%esp
f0118090:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118096:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011809c:	89 c1                	mov    %eax,%ecx
f011809e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01180a5:	10 00 00 
f01180a8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01180ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180b3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01180b9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01180bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01180c4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01180ca:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01180d0:	29 d0                	sub    %edx,%eax
f01180d2:	89 c3                	mov    %eax,%ebx
f01180d4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01180db:	10 00 00 
f01180de:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01180e3:	0f b6 d0             	movzbl %al,%edx
f01180e6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01180ec:	01 d0                	add    %edx,%eax
f01180ee:	48                   	dec    %eax
f01180ef:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01180f5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01180fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118100:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118106:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011810c:	29 d0                	sub    %edx,%eax
f011810e:	01 c3                	add    %eax,%ebx
f0118110:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118117:	10 00 00 
f011811a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011811f:	0f b6 c0             	movzbl %al,%eax
f0118122:	c1 e0 04             	shl    $0x4,%eax
f0118125:	89 c2                	mov    %eax,%edx
f0118127:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011812d:	01 d0                	add    %edx,%eax
f011812f:	48                   	dec    %eax
f0118130:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118136:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011813c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118141:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118147:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011814d:	29 d0                	sub    %edx,%eax
f011814f:	01 d8                	add    %ebx,%eax
f0118151:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118156:	39 c1                	cmp    %eax,%ecx
f0118158:	74 14                	je     f011816e <test_kmalloc+0x5d2>
f011815a:	83 ec 04             	sub    $0x4,%esp
f011815d:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0118162:	6a 61                	push   $0x61
f0118164:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118169:	e8 97 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011816e:	e8 55 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118173:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118176:	74 14                	je     f011818c <test_kmalloc+0x5f0>
f0118178:	83 ec 04             	sub    $0x4,%esp
f011817b:	68 14 b7 13 f0       	push   $0xf013b714
f0118180:	6a 62                	push   $0x62
f0118182:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118187:	e8 79 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011818c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011818f:	e8 1d 4e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118194:	29 c3                	sub    %eax,%ebx
f0118196:	89 d8                	mov    %ebx,%eax
f0118198:	83 f8 01             	cmp    $0x1,%eax
f011819b:	74 14                	je     f01181b1 <test_kmalloc+0x615>
f011819d:	83 ec 04             	sub    $0x4,%esp
f01181a0:	68 7c b7 13 f0       	push   $0xf013b77c
f01181a5:	6a 63                	push   $0x63
f01181a7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01181ac:	e8 54 80 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01181b1:	e8 fb 4d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01181b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181b9:	e8 0a bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01181be:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01181c1:	83 ec 0c             	sub    $0xc,%esp
f01181c4:	68 00 1c 00 00       	push   $0x1c00
f01181c9:	e8 be f9 fe ff       	call   f0107b8c <kmalloc>
f01181ce:	83 c4 10             	add    $0x10,%esp
f01181d1:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01181d7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01181dd:	89 c1                	mov    %eax,%ecx
f01181df:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01181e6:	10 00 00 
f01181e9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01181ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181f4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01181fa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118200:	ba 00 00 00 00       	mov    $0x0,%edx
f0118205:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011820b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118211:	29 d0                	sub    %edx,%eax
f0118213:	89 c3                	mov    %eax,%ebx
f0118215:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011821c:	10 00 00 
f011821f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118224:	0f b6 d0             	movzbl %al,%edx
f0118227:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011822d:	01 d0                	add    %edx,%eax
f011822f:	48                   	dec    %eax
f0118230:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118236:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011823c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118241:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118247:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011824d:	29 d0                	sub    %edx,%eax
f011824f:	01 c3                	add    %eax,%ebx
f0118251:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118258:	10 00 00 
f011825b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118260:	0f b6 c0             	movzbl %al,%eax
f0118263:	c1 e0 04             	shl    $0x4,%eax
f0118266:	89 c2                	mov    %eax,%edx
f0118268:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011826e:	01 d0                	add    %edx,%eax
f0118270:	48                   	dec    %eax
f0118271:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118277:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011827d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118282:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118288:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011828e:	29 d0                	sub    %edx,%eax
f0118290:	01 d8                	add    %ebx,%eax
f0118292:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118297:	39 c1                	cmp    %eax,%ecx
f0118299:	74 14                	je     f01182af <test_kmalloc+0x713>
f011829b:	83 ec 04             	sub    $0x4,%esp
f011829e:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01182a3:	6a 69                	push   $0x69
f01182a5:	68 fa b6 13 f0       	push   $0xf013b6fa
f01182aa:	e8 56 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182af:	e8 14 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01182b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01182b7:	74 14                	je     f01182cd <test_kmalloc+0x731>
f01182b9:	83 ec 04             	sub    $0x4,%esp
f01182bc:	68 14 b7 13 f0       	push   $0xf013b714
f01182c1:	6a 6a                	push   $0x6a
f01182c3:	68 fa b6 13 f0       	push   $0xf013b6fa
f01182c8:	e8 38 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01182cd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01182d0:	e8 dc 4c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01182d5:	29 c3                	sub    %eax,%ebx
f01182d7:	89 d8                	mov    %ebx,%eax
f01182d9:	83 f8 02             	cmp    $0x2,%eax
f01182dc:	74 14                	je     f01182f2 <test_kmalloc+0x756>
f01182de:	83 ec 04             	sub    $0x4,%esp
f01182e1:	68 7c b7 13 f0       	push   $0xf013b77c
f01182e6:	6a 6b                	push   $0x6b
f01182e8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01182ed:	e8 13 7f fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01182f2:	e8 ba 4c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01182f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01182fa:	e8 c9 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01182ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118302:	83 ec 0c             	sub    $0xc,%esp
f0118305:	68 00 fc 2f 00       	push   $0x2ffc00
f011830a:	e8 7d f8 fe ff       	call   f0107b8c <kmalloc>
f011830f:	83 c4 10             	add    $0x10,%esp
f0118312:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118318:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011831e:	89 c1                	mov    %eax,%ecx
f0118320:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118327:	10 00 00 
f011832a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118330:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118335:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011833b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118341:	ba 00 00 00 00       	mov    $0x0,%edx
f0118346:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011834c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118352:	29 d0                	sub    %edx,%eax
f0118354:	89 c3                	mov    %eax,%ebx
f0118356:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011835d:	10 00 00 
f0118360:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118365:	0f b6 d0             	movzbl %al,%edx
f0118368:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011836e:	01 d0                	add    %edx,%eax
f0118370:	48                   	dec    %eax
f0118371:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118377:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011837d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118382:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118388:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011838e:	29 d0                	sub    %edx,%eax
f0118390:	01 c3                	add    %eax,%ebx
f0118392:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118399:	10 00 00 
f011839c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01183a1:	0f b6 c0             	movzbl %al,%eax
f01183a4:	c1 e0 04             	shl    $0x4,%eax
f01183a7:	89 c2                	mov    %eax,%edx
f01183a9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01183af:	01 d0                	add    %edx,%eax
f01183b1:	48                   	dec    %eax
f01183b2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01183b8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01183be:	ba 00 00 00 00       	mov    $0x0,%edx
f01183c3:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01183c9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01183cf:	29 d0                	sub    %edx,%eax
f01183d1:	01 d8                	add    %ebx,%eax
f01183d3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01183d8:	39 c1                	cmp    %eax,%ecx
f01183da:	74 14                	je     f01183f0 <test_kmalloc+0x854>
f01183dc:	83 ec 04             	sub    $0x4,%esp
f01183df:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01183e4:	6a 71                	push   $0x71
f01183e6:	68 fa b6 13 f0       	push   $0xf013b6fa
f01183eb:	e8 15 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01183f0:	e8 d3 b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01183f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01183f8:	74 14                	je     f011840e <test_kmalloc+0x872>
f01183fa:	83 ec 04             	sub    $0x4,%esp
f01183fd:	68 14 b7 13 f0       	push   $0xf013b714
f0118402:	6a 72                	push   $0x72
f0118404:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118409:	e8 f7 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011840e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118411:	e8 9b 4b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118416:	29 c3                	sub    %eax,%ebx
f0118418:	89 d8                	mov    %ebx,%eax
f011841a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011841f:	74 14                	je     f0118435 <test_kmalloc+0x899>
f0118421:	83 ec 04             	sub    $0x4,%esp
f0118424:	68 7c b7 13 f0       	push   $0xf013b77c
f0118429:	6a 73                	push   $0x73
f011842b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118430:	e8 d0 7d fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118435:	e8 77 4b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011843a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011843d:	e8 86 b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118442:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118445:	83 ec 0c             	sub    $0xc,%esp
f0118448:	68 00 fc 5f 00       	push   $0x5ffc00
f011844d:	e8 3a f7 fe ff       	call   f0107b8c <kmalloc>
f0118452:	83 c4 10             	add    $0x10,%esp
f0118455:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011845b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118461:	89 c1                	mov    %eax,%ecx
f0118463:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011846a:	10 00 00 
f011846d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118473:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118478:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011847e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118484:	ba 00 00 00 00       	mov    $0x0,%edx
f0118489:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011848f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118495:	29 d0                	sub    %edx,%eax
f0118497:	89 c3                	mov    %eax,%ebx
f0118499:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01184a0:	10 00 00 
f01184a3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01184a8:	0f b6 d0             	movzbl %al,%edx
f01184ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01184b1:	01 d0                	add    %edx,%eax
f01184b3:	48                   	dec    %eax
f01184b4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01184ba:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01184c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01184c5:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01184cb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01184d1:	29 d0                	sub    %edx,%eax
f01184d3:	01 c3                	add    %eax,%ebx
f01184d5:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01184dc:	10 00 00 
f01184df:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01184e4:	0f b6 c0             	movzbl %al,%eax
f01184e7:	c1 e0 04             	shl    $0x4,%eax
f01184ea:	89 c2                	mov    %eax,%edx
f01184ec:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01184f2:	01 d0                	add    %edx,%eax
f01184f4:	48                   	dec    %eax
f01184f5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01184fb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118501:	ba 00 00 00 00       	mov    $0x0,%edx
f0118506:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011850c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118512:	29 d0                	sub    %edx,%eax
f0118514:	01 d8                	add    %ebx,%eax
f0118516:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011851b:	39 c1                	cmp    %eax,%ecx
f011851d:	74 14                	je     f0118533 <test_kmalloc+0x997>
f011851f:	83 ec 04             	sub    $0x4,%esp
f0118522:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0118527:	6a 79                	push   $0x79
f0118529:	68 fa b6 13 f0       	push   $0xf013b6fa
f011852e:	e8 d2 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118533:	e8 90 b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118538:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011853b:	74 14                	je     f0118551 <test_kmalloc+0x9b5>
f011853d:	83 ec 04             	sub    $0x4,%esp
f0118540:	68 14 b7 13 f0       	push   $0xf013b714
f0118545:	6a 7a                	push   $0x7a
f0118547:	68 fa b6 13 f0       	push   $0xf013b6fa
f011854c:	e8 b4 7c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118551:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118554:	e8 58 4a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118559:	29 c3                	sub    %eax,%ebx
f011855b:	89 d8                	mov    %ebx,%eax
f011855d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118562:	74 14                	je     f0118578 <test_kmalloc+0x9dc>
f0118564:	83 ec 04             	sub    $0x4,%esp
f0118567:	68 7c b7 13 f0       	push   $0xf013b77c
f011856c:	6a 7b                	push   $0x7b
f011856e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118573:	e8 8d 7c fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118578:	e8 34 4a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011857d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118580:	e8 43 b8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118585:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118588:	83 ec 0c             	sub    $0xc,%esp
f011858b:	68 00 38 00 00       	push   $0x3800
f0118590:	e8 f7 f5 fe ff       	call   f0107b8c <kmalloc>
f0118595:	83 c4 10             	add    $0x10,%esp
f0118598:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011859e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01185a4:	89 c1                	mov    %eax,%ecx
f01185a6:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01185ad:	10 00 00 
f01185b0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01185b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185bb:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01185c1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01185c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01185cc:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01185d2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01185d8:	29 d0                	sub    %edx,%eax
f01185da:	89 c3                	mov    %eax,%ebx
f01185dc:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01185e3:	10 00 00 
f01185e6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01185eb:	0f b6 d0             	movzbl %al,%edx
f01185ee:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01185f4:	01 d0                	add    %edx,%eax
f01185f6:	48                   	dec    %eax
f01185f7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01185fd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118603:	ba 00 00 00 00       	mov    $0x0,%edx
f0118608:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011860e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118614:	29 d0                	sub    %edx,%eax
f0118616:	01 c3                	add    %eax,%ebx
f0118618:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011861f:	10 00 00 
f0118622:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118627:	0f b6 c0             	movzbl %al,%eax
f011862a:	c1 e0 04             	shl    $0x4,%eax
f011862d:	89 c2                	mov    %eax,%edx
f011862f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118635:	01 d0                	add    %edx,%eax
f0118637:	48                   	dec    %eax
f0118638:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011863e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118644:	ba 00 00 00 00       	mov    $0x0,%edx
f0118649:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011864f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118655:	29 d0                	sub    %edx,%eax
f0118657:	01 d8                	add    %ebx,%eax
f0118659:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011865e:	39 c1                	cmp    %eax,%ecx
f0118660:	74 17                	je     f0118679 <test_kmalloc+0xadd>
f0118662:	83 ec 04             	sub    $0x4,%esp
f0118665:	68 e0 b7 13 f0       	push   $0xf013b7e0
f011866a:	68 81 00 00 00       	push   $0x81
f011866f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118674:	e8 8c 7b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118679:	e8 4a b7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011867e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118681:	74 17                	je     f011869a <test_kmalloc+0xafe>
f0118683:	83 ec 04             	sub    $0x4,%esp
f0118686:	68 14 b7 13 f0       	push   $0xf013b714
f011868b:	68 82 00 00 00       	push   $0x82
f0118690:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118695:	e8 6b 7b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011869a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011869d:	e8 0f 49 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01186a2:	29 c3                	sub    %eax,%ebx
f01186a4:	89 d8                	mov    %ebx,%eax
f01186a6:	83 f8 04             	cmp    $0x4,%eax
f01186a9:	74 17                	je     f01186c2 <test_kmalloc+0xb26>
f01186ab:	83 ec 04             	sub    $0x4,%esp
f01186ae:	68 7c b7 13 f0       	push   $0xf013b77c
f01186b3:	68 83 00 00 00       	push   $0x83
f01186b8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01186bd:	e8 43 7b fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01186c2:	83 ec 0c             	sub    $0xc,%esp
f01186c5:	68 46 b8 13 f0       	push   $0xf013b846
f01186ca:	e8 3f 86 fe ff       	call   f0100d0e <cprintf>
f01186cf:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01186d2:	e8 da 48 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01186d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01186da:	e8 e9 b6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01186df:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01186e2:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01186e9:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01186ec:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01186f2:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01186f8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01186fe:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118701:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118703:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118709:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011870f:	01 c2                	add    %eax,%edx
f0118711:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118714:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118716:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011871c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118722:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118729:	fd 0f 00 
			shortArr[0] = minShort;
f011872c:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118732:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118735:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118738:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011873e:	01 c0                	add    %eax,%eax
f0118740:	89 c2                	mov    %eax,%edx
f0118742:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118748:	01 c2                	add    %eax,%edx
f011874a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011874e:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118751:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118757:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f011875d:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118764:	01 00 00 
			intArr[0] = minInt;
f0118767:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011876d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118770:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118772:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118778:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011877f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118785:	01 c2                	add    %eax,%edx
f0118787:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011878a:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f011878c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118792:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118798:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f011879f:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01187a2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187a8:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01187ab:	88 10                	mov    %dl,(%eax)
f01187ad:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01187b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01187b6:	66 89 42 02          	mov    %ax,0x2(%edx)
f01187ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187c0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01187c3:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01187c6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01187cc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01187d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187d9:	01 c2                	add    %eax,%edx
f01187db:	8a 45 f2             	mov    -0xe(%ebp),%al
f01187de:	88 02                	mov    %al,(%edx)
f01187e0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01187e6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01187ed:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187f3:	01 c2                	add    %eax,%edx
f01187f5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01187f9:	66 89 42 02          	mov    %ax,0x2(%edx)
f01187fd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118803:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011880a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118810:	01 c2                	add    %eax,%edx
f0118812:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118815:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118818:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f011881f:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118822:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118828:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f011882e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118834:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118837:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118839:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011883f:	89 c2                	mov    %eax,%edx
f0118841:	c1 ea 1f             	shr    $0x1f,%edx
f0118844:	01 d0                	add    %edx,%eax
f0118846:	d1 f8                	sar    %eax
f0118848:	89 c2                	mov    %eax,%edx
f011884a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118850:	01 c2                	add    %eax,%edx
f0118852:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118855:	88 c1                	mov    %al,%cl
f0118857:	c0 e9 07             	shr    $0x7,%cl
f011885a:	01 c8                	add    %ecx,%eax
f011885c:	d0 f8                	sar    %al
f011885e:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118860:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118866:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011886c:	01 c2                	add    %eax,%edx
f011886e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118871:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118873:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118879:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011887f:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118886:	1b 00 00 
			shortArr2[0] = minShort;
f0118889:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011888f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118892:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118895:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011889b:	01 c0                	add    %eax,%eax
f011889d:	89 c2                	mov    %eax,%edx
f011889f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01188a5:	01 c2                	add    %eax,%edx
f01188a7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01188ab:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01188ae:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01188b4:	8a 00                	mov    (%eax),%al
f01188b6:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01188b9:	75 15                	jne    f01188d0 <test_kmalloc+0xd34>
f01188bb:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01188c1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01188c7:	01 d0                	add    %edx,%eax
f01188c9:	8a 00                	mov    (%eax),%al
f01188cb:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01188ce:	74 17                	je     f01188e7 <test_kmalloc+0xd4b>
f01188d0:	83 ec 04             	sub    $0x4,%esp
f01188d3:	68 50 b8 13 f0       	push   $0xf013b850
f01188d8:	68 b2 00 00 00       	push   $0xb2
f01188dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01188e2:	e8 1e 79 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01188e7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01188ed:	66 8b 00             	mov    (%eax),%ax
f01188f0:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01188f4:	75 1b                	jne    f0118911 <test_kmalloc+0xd75>
f01188f6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01188fc:	01 c0                	add    %eax,%eax
f01188fe:	89 c2                	mov    %eax,%edx
f0118900:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118906:	01 d0                	add    %edx,%eax
f0118908:	66 8b 00             	mov    (%eax),%ax
f011890b:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011890f:	74 17                	je     f0118928 <test_kmalloc+0xd8c>
f0118911:	83 ec 04             	sub    $0x4,%esp
f0118914:	68 50 b8 13 f0       	push   $0xf013b850
f0118919:	68 b3 00 00 00       	push   $0xb3
f011891e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118923:	e8 dd 78 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118928:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011892e:	8b 00                	mov    (%eax),%eax
f0118930:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118933:	75 1c                	jne    f0118951 <test_kmalloc+0xdb5>
f0118935:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011893b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118942:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118948:	01 d0                	add    %edx,%eax
f011894a:	8b 00                	mov    (%eax),%eax
f011894c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011894f:	74 17                	je     f0118968 <test_kmalloc+0xdcc>
f0118951:	83 ec 04             	sub    $0x4,%esp
f0118954:	68 50 b8 13 f0       	push   $0xf013b850
f0118959:	68 b4 00 00 00       	push   $0xb4
f011895e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118963:	e8 9d 78 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118968:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011896e:	8a 00                	mov    (%eax),%al
f0118970:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118973:	75 1c                	jne    f0118991 <test_kmalloc+0xdf5>
f0118975:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011897b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118982:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118988:	01 d0                	add    %edx,%eax
f011898a:	8a 00                	mov    (%eax),%al
f011898c:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011898f:	74 17                	je     f01189a8 <test_kmalloc+0xe0c>
f0118991:	83 ec 04             	sub    $0x4,%esp
f0118994:	68 50 b8 13 f0       	push   $0xf013b850
f0118999:	68 b6 00 00 00       	push   $0xb6
f011899e:	68 fa b6 13 f0       	push   $0xf013b6fa
f01189a3:	e8 5d 78 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01189a8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01189ae:	66 8b 40 02          	mov    0x2(%eax),%ax
f01189b2:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01189b6:	75 1f                	jne    f01189d7 <test_kmalloc+0xe3b>
f01189b8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01189be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01189c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01189cb:	01 d0                	add    %edx,%eax
f01189cd:	66 8b 40 02          	mov    0x2(%eax),%ax
f01189d1:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01189d5:	74 17                	je     f01189ee <test_kmalloc+0xe52>
f01189d7:	83 ec 04             	sub    $0x4,%esp
f01189da:	68 50 b8 13 f0       	push   $0xf013b850
f01189df:	68 b7 00 00 00       	push   $0xb7
f01189e4:	68 fa b6 13 f0       	push   $0xf013b6fa
f01189e9:	e8 17 78 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01189ee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01189f4:	8b 40 04             	mov    0x4(%eax),%eax
f01189f7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01189fa:	75 1d                	jne    f0118a19 <test_kmalloc+0xe7d>
f01189fc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118a02:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118a09:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118a0f:	01 d0                	add    %edx,%eax
f0118a11:	8b 40 04             	mov    0x4(%eax),%eax
f0118a14:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118a17:	74 17                	je     f0118a30 <test_kmalloc+0xe94>
f0118a19:	83 ec 04             	sub    $0x4,%esp
f0118a1c:	68 50 b8 13 f0       	push   $0xf013b850
f0118a21:	68 b8 00 00 00       	push   $0xb8
f0118a26:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118a2b:	e8 d5 77 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118a30:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118a36:	8a 00                	mov    (%eax),%al
f0118a38:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118a3b:	75 40                	jne    f0118a7d <test_kmalloc+0xee1>
f0118a3d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118a43:	89 c2                	mov    %eax,%edx
f0118a45:	c1 ea 1f             	shr    $0x1f,%edx
f0118a48:	01 d0                	add    %edx,%eax
f0118a4a:	d1 f8                	sar    %eax
f0118a4c:	89 c2                	mov    %eax,%edx
f0118a4e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118a54:	01 d0                	add    %edx,%eax
f0118a56:	8a 10                	mov    (%eax),%dl
f0118a58:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a5b:	88 c1                	mov    %al,%cl
f0118a5d:	c0 e9 07             	shr    $0x7,%cl
f0118a60:	01 c8                	add    %ecx,%eax
f0118a62:	d0 f8                	sar    %al
f0118a64:	38 c2                	cmp    %al,%dl
f0118a66:	75 15                	jne    f0118a7d <test_kmalloc+0xee1>
f0118a68:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118a6e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118a74:	01 d0                	add    %edx,%eax
f0118a76:	8a 00                	mov    (%eax),%al
f0118a78:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118a7b:	74 17                	je     f0118a94 <test_kmalloc+0xef8>
f0118a7d:	83 ec 04             	sub    $0x4,%esp
f0118a80:	68 50 b8 13 f0       	push   $0xf013b850
f0118a85:	68 ba 00 00 00       	push   $0xba
f0118a8a:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118a8f:	e8 71 77 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118a94:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118a9a:	66 8b 00             	mov    (%eax),%ax
f0118a9d:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118aa1:	75 1b                	jne    f0118abe <test_kmalloc+0xf22>
f0118aa3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118aa9:	01 c0                	add    %eax,%eax
f0118aab:	89 c2                	mov    %eax,%edx
f0118aad:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118ab3:	01 d0                	add    %edx,%eax
f0118ab5:	66 8b 00             	mov    (%eax),%ax
f0118ab8:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118abc:	74 17                	je     f0118ad5 <test_kmalloc+0xf39>
f0118abe:	83 ec 04             	sub    $0x4,%esp
f0118ac1:	68 50 b8 13 f0       	push   $0xf013b850
f0118ac6:	68 bb 00 00 00       	push   $0xbb
f0118acb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118ad0:	e8 30 77 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118ad5:	e8 d7 44 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118ada:	89 c2                	mov    %eax,%edx
f0118adc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118adf:	39 c2                	cmp    %eax,%edx
f0118ae1:	74 17                	je     f0118afa <test_kmalloc+0xf5e>
f0118ae3:	83 ec 04             	sub    $0x4,%esp
f0118ae6:	68 7c b7 13 f0       	push   $0xf013b77c
f0118aeb:	68 bd 00 00 00       	push   $0xbd
f0118af0:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118af5:	e8 0b 77 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118afa:	e8 c9 b2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118aff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b02:	74 17                	je     f0118b1b <test_kmalloc+0xf7f>
f0118b04:	83 ec 04             	sub    $0x4,%esp
f0118b07:	68 14 b7 13 f0       	push   $0xf013b714
f0118b0c:	68 be 00 00 00       	push   $0xbe
f0118b11:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118b16:	e8 ea 76 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118b1b:	83 ec 0c             	sub    $0xc,%esp
f0118b1e:	68 85 b8 13 f0       	push   $0xf013b885
f0118b23:	e8 e6 81 fe ff       	call   f0100d0e <cprintf>
f0118b28:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118b2b:	e8 81 44 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118b30:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b33:	e8 90 b2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118b38:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118b3b:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118b42:	10 00 00 
f0118b45:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118b4b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b50:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118b56:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118b5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b61:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118b67:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118b6d:	29 d0                	sub    %edx,%eax
f0118b6f:	89 c1                	mov    %eax,%ecx
f0118b71:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118b78:	10 00 00 
f0118b7b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118b80:	0f b6 d0             	movzbl %al,%edx
f0118b83:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118b89:	01 d0                	add    %edx,%eax
f0118b8b:	48                   	dec    %eax
f0118b8c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118b92:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118b98:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b9d:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118ba3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118ba9:	29 d0                	sub    %edx,%eax
f0118bab:	01 c1                	add    %eax,%ecx
f0118bad:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118bb4:	10 00 00 
f0118bb7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118bbc:	0f b6 c0             	movzbl %al,%eax
f0118bbf:	c1 e0 04             	shl    $0x4,%eax
f0118bc2:	89 c2                	mov    %eax,%edx
f0118bc4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118bca:	01 d0                	add    %edx,%eax
f0118bcc:	48                   	dec    %eax
f0118bcd:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118bd3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118bd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bde:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118be4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118bea:	29 d0                	sub    %edx,%eax
f0118bec:	01 c8                	add    %ecx,%eax
f0118bee:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118bf3:	29 c2                	sub    %eax,%edx
f0118bf5:	89 d0                	mov    %edx,%eax
f0118bf7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118bfd:	83 ec 0c             	sub    $0xc,%esp
f0118c00:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118c06:	e8 81 ef fe ff       	call   f0107b8c <kmalloc>
f0118c0b:	83 c4 10             	add    $0x10,%esp
f0118c0e:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118c14:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118c1a:	85 c0                	test   %eax,%eax
f0118c1c:	74 17                	je     f0118c35 <test_kmalloc+0x1099>
f0118c1e:	83 ec 04             	sub    $0x4,%esp
f0118c21:	68 c8 b6 13 f0       	push   $0xf013b6c8
f0118c26:	68 c8 00 00 00       	push   $0xc8
f0118c2b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118c30:	e8 d0 75 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c35:	e8 8e b1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118c3a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118c3d:	74 17                	je     f0118c56 <test_kmalloc+0x10ba>
f0118c3f:	83 ec 04             	sub    $0x4,%esp
f0118c42:	68 14 b7 13 f0       	push   $0xf013b714
f0118c47:	68 c9 00 00 00       	push   $0xc9
f0118c4c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118c51:	e8 af 75 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c56:	e8 56 43 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118c5b:	89 c2                	mov    %eax,%edx
f0118c5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118c60:	39 c2                	cmp    %eax,%edx
f0118c62:	74 17                	je     f0118c7b <test_kmalloc+0x10df>
f0118c64:	83 ec 04             	sub    $0x4,%esp
f0118c67:	68 7c b7 13 f0       	push   $0xf013b77c
f0118c6c:	68 ca 00 00 00       	push   $0xca
f0118c71:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118c76:	e8 8a 75 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118c7b:	83 ec 0c             	sub    $0xc,%esp
f0118c7e:	68 8c b8 13 f0       	push   $0xf013b88c
f0118c83:	e8 86 80 fe ff       	call   f0100d0e <cprintf>
f0118c88:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118c8b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118c91:	05 00 40 00 00       	add    $0x4000,%eax
f0118c96:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118c9c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118ca3:	10 00 00 
f0118ca6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118cac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118cb1:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118cb7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118cbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cc2:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118cc8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118cce:	29 d0                	sub    %edx,%eax
f0118cd0:	89 c1                	mov    %eax,%ecx
f0118cd2:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118cd9:	10 00 00 
f0118cdc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118ce1:	0f b6 d0             	movzbl %al,%edx
f0118ce4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118cea:	01 d0                	add    %edx,%eax
f0118cec:	48                   	dec    %eax
f0118ced:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118cf3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118cf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cfe:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118d04:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118d0a:	29 d0                	sub    %edx,%eax
f0118d0c:	01 c1                	add    %eax,%ecx
f0118d0e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118d15:	10 00 00 
f0118d18:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118d1d:	0f b6 c0             	movzbl %al,%eax
f0118d20:	c1 e0 04             	shl    $0x4,%eax
f0118d23:	89 c2                	mov    %eax,%edx
f0118d25:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118d2b:	01 d0                	add    %edx,%eax
f0118d2d:	48                   	dec    %eax
f0118d2e:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118d34:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118d3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d3f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118d45:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118d4b:	29 d0                	sub    %edx,%eax
f0118d4d:	01 c8                	add    %ecx,%eax
f0118d4f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118d54:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118d57:	eb 6a                	jmp    f0118dc3 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118d59:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0118d5e:	83 ec 04             	sub    $0x4,%esp
f0118d61:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118d67:	52                   	push   %edx
f0118d68:	ff 75 f4             	pushl  -0xc(%ebp)
f0118d6b:	50                   	push   %eax
f0118d6c:	e8 40 dd fe ff       	call   f0106ab1 <get_page_table>
f0118d71:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118d74:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118d7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118d7d:	c1 ea 0c             	shr    $0xc,%edx
f0118d80:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118d86:	c1 e2 02             	shl    $0x2,%edx
f0118d89:	01 d0                	add    %edx,%eax
f0118d8b:	8b 00                	mov    (%eax),%eax
f0118d8d:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118d92:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118d98:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118d9e:	83 e0 04             	and    $0x4,%eax
f0118da1:	85 c0                	test   %eax,%eax
f0118da3:	74 17                	je     f0118dbc <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118da5:	83 ec 04             	sub    $0x4,%esp
f0118da8:	68 94 b8 13 f0       	push   $0xf013b894
f0118dad:	68 d7 00 00 00       	push   $0xd7
f0118db2:	68 fa b6 13 f0       	push   $0xf013b6fa
f0118db7:	e8 49 74 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118dbc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118dc6:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118dcc:	72 8b                	jb     f0118d59 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118dce:	83 ec 0c             	sub    $0xc,%esp
f0118dd1:	68 de b8 13 f0       	push   $0xf013b8de
f0118dd6:	e8 33 7f fe ff       	call   f0100d0e <cprintf>
f0118ddb:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118dde:	83 ec 0c             	sub    $0xc,%esp
f0118de1:	68 e8 b8 13 f0       	push   $0xf013b8e8
f0118de6:	e8 23 7f fe ff       	call   f0100d0e <cprintf>
f0118deb:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118dee:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118df3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118df6:	5b                   	pop    %ebx
f0118df7:	5f                   	pop    %edi
f0118df8:	5d                   	pop    %ebp
f0118df9:	c3                   	ret    

f0118dfa <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118dfa:	55                   	push   %ebp
f0118dfb:	89 e5                	mov    %esp,%ebp
f0118dfd:	57                   	push   %edi
f0118dfe:	53                   	push   %ebx
f0118dff:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118e05:	83 ec 0c             	sub    $0xc,%esp
f0118e08:	68 3c b6 13 f0       	push   $0xf013b63c
f0118e0d:	e8 fc 7e fe ff       	call   f0100d0e <cprintf>
f0118e12:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118e15:	83 ec 0c             	sub    $0xc,%esp
f0118e18:	68 6c b6 13 f0       	push   $0xf013b66c
f0118e1d:	e8 ec 7e fe ff       	call   f0100d0e <cprintf>
f0118e22:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118e25:	83 ec 0c             	sub    $0xc,%esp
f0118e28:	68 3c b6 13 f0       	push   $0xf013b63c
f0118e2d:	e8 dc 7e fe ff       	call   f0100d0e <cprintf>
f0118e32:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118e35:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118e3b:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118e40:	b8 00 00 00 00       	mov    $0x0,%eax
f0118e45:	89 d7                	mov    %edx,%edi
f0118e47:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118e49:	83 ec 0c             	sub    $0xc,%esp
f0118e4c:	68 24 b9 13 f0       	push   $0xf013b924
f0118e51:	e8 b8 7e fe ff       	call   f0100d0e <cprintf>
f0118e56:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118e59:	e8 53 41 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0118e5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118e61:	e8 62 af fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118e66:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118e69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118e70:	eb 1f                	jmp    f0118e91 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118e72:	83 ec 0c             	sub    $0xc,%esp
f0118e75:	68 00 00 20 00       	push   $0x200000
f0118e7a:	e8 0d ed fe ff       	call   f0107b8c <kmalloc>
f0118e7f:	83 c4 10             	add    $0x10,%esp
f0118e82:	89 c2                	mov    %eax,%edx
f0118e84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118e87:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118e8e:	ff 45 f4             	incl   -0xc(%ebp)
f0118e91:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118e95:	7e db                	jle    f0118e72 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118e97:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118e9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118ea1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ea6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118ea9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118eac:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eb1:	f7 75 e8             	divl   -0x18(%ebp)
f0118eb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118eb7:	29 d0                	sub    %edx,%eax
f0118eb9:	89 c1                	mov    %eax,%ecx
f0118ebb:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118ec2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118ec7:	0f b6 d0             	movzbl %al,%edx
f0118eca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118ecd:	01 d0                	add    %edx,%eax
f0118ecf:	48                   	dec    %eax
f0118ed0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118ed3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118ed6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118edb:	f7 75 e0             	divl   -0x20(%ebp)
f0118ede:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118ee1:	29 d0                	sub    %edx,%eax
f0118ee3:	01 c1                	add    %eax,%ecx
f0118ee5:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118eec:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118ef1:	0f b6 c0             	movzbl %al,%eax
f0118ef4:	c1 e0 04             	shl    $0x4,%eax
f0118ef7:	89 c2                	mov    %eax,%edx
f0118ef9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118efc:	01 d0                	add    %edx,%eax
f0118efe:	48                   	dec    %eax
f0118eff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118f02:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118f05:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f0a:	f7 75 d8             	divl   -0x28(%ebp)
f0118f0d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118f10:	29 d0                	sub    %edx,%eax
f0118f12:	01 c8                	add    %ecx,%eax
f0118f14:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118f19:	29 c2                	sub    %eax,%edx
f0118f1b:	89 d0                	mov    %edx,%eax
f0118f1d:	83 ec 0c             	sub    $0xc,%esp
f0118f20:	50                   	push   %eax
f0118f21:	e8 66 ec fe ff       	call   f0107b8c <kmalloc>
f0118f26:	83 c4 10             	add    $0x10,%esp
f0118f29:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118f2f:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118f35:	89 c1                	mov    %eax,%ecx
f0118f37:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118f3e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118f41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f46:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118f49:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118f4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f51:	f7 75 d0             	divl   -0x30(%ebp)
f0118f54:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118f57:	29 d0                	sub    %edx,%eax
f0118f59:	89 c3                	mov    %eax,%ebx
f0118f5b:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118f62:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118f67:	0f b6 d0             	movzbl %al,%edx
f0118f6a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118f6d:	01 d0                	add    %edx,%eax
f0118f6f:	48                   	dec    %eax
f0118f70:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118f73:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118f76:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f7b:	f7 75 c8             	divl   -0x38(%ebp)
f0118f7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118f81:	29 d0                	sub    %edx,%eax
f0118f83:	01 c3                	add    %eax,%ebx
f0118f85:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118f8c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118f91:	0f b6 c0             	movzbl %al,%eax
f0118f94:	c1 e0 04             	shl    $0x4,%eax
f0118f97:	89 c2                	mov    %eax,%edx
f0118f99:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118f9c:	01 d0                	add    %edx,%eax
f0118f9e:	48                   	dec    %eax
f0118f9f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118fa2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118fa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118faa:	f7 75 c0             	divl   -0x40(%ebp)
f0118fad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118fb0:	29 d0                	sub    %edx,%eax
f0118fb2:	01 d8                	add    %ebx,%eax
f0118fb4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118fb9:	39 c1                	cmp    %eax,%ecx
f0118fbb:	0f 85 ed 04 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118fc1:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118fc7:	89 c1                	mov    %eax,%ecx
f0118fc9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118fd0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118fd3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118fd8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118fdb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118fde:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fe3:	f7 75 b8             	divl   -0x48(%ebp)
f0118fe6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118fe9:	29 d0                	sub    %edx,%eax
f0118feb:	89 c3                	mov    %eax,%ebx
f0118fed:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118ff4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0118ff9:	0f b6 d0             	movzbl %al,%edx
f0118ffc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118fff:	01 d0                	add    %edx,%eax
f0119001:	48                   	dec    %eax
f0119002:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119005:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119008:	ba 00 00 00 00       	mov    $0x0,%edx
f011900d:	f7 75 b0             	divl   -0x50(%ebp)
f0119010:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119013:	29 d0                	sub    %edx,%eax
f0119015:	01 c3                	add    %eax,%ebx
f0119017:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011901e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119023:	0f b6 c0             	movzbl %al,%eax
f0119026:	c1 e0 04             	shl    $0x4,%eax
f0119029:	89 c2                	mov    %eax,%edx
f011902b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011902e:	01 d0                	add    %edx,%eax
f0119030:	48                   	dec    %eax
f0119031:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0119034:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119037:	ba 00 00 00 00       	mov    $0x0,%edx
f011903c:	f7 75 a8             	divl   -0x58(%ebp)
f011903f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119042:	29 d0                	sub    %edx,%eax
f0119044:	01 d8                	add    %ebx,%eax
f0119046:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011904b:	39 c1                	cmp    %eax,%ecx
f011904d:	0f 85 5b 04 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119053:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0119059:	89 c1                	mov    %eax,%ecx
f011905b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119062:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119065:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011906a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011906d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119070:	ba 00 00 00 00       	mov    $0x0,%edx
f0119075:	f7 75 a0             	divl   -0x60(%ebp)
f0119078:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011907b:	29 d0                	sub    %edx,%eax
f011907d:	89 c3                	mov    %eax,%ebx
f011907f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0119086:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011908b:	0f b6 d0             	movzbl %al,%edx
f011908e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119091:	01 d0                	add    %edx,%eax
f0119093:	48                   	dec    %eax
f0119094:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0119097:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011909a:	ba 00 00 00 00       	mov    $0x0,%edx
f011909f:	f7 75 98             	divl   -0x68(%ebp)
f01190a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01190a5:	29 d0                	sub    %edx,%eax
f01190a7:	01 c3                	add    %eax,%ebx
f01190a9:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01190b0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01190b5:	0f b6 c0             	movzbl %al,%eax
f01190b8:	c1 e0 04             	shl    $0x4,%eax
f01190bb:	89 c2                	mov    %eax,%edx
f01190bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f01190c0:	01 d0                	add    %edx,%eax
f01190c2:	48                   	dec    %eax
f01190c3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01190c6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01190c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01190ce:	f7 75 90             	divl   -0x70(%ebp)
f01190d1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01190d4:	29 d0                	sub    %edx,%eax
f01190d6:	01 d8                	add    %ebx,%eax
f01190d8:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01190dd:	39 c1                	cmp    %eax,%ecx
f01190df:	0f 85 c9 03 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01190e5:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01190eb:	89 c1                	mov    %eax,%ecx
f01190ed:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01190f4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01190f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190fc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01190ff:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119102:	ba 00 00 00 00       	mov    $0x0,%edx
f0119107:	f7 75 88             	divl   -0x78(%ebp)
f011910a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011910d:	29 d0                	sub    %edx,%eax
f011910f:	89 c3                	mov    %eax,%ebx
f0119111:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119118:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011911d:	0f b6 d0             	movzbl %al,%edx
f0119120:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119123:	01 d0                	add    %edx,%eax
f0119125:	48                   	dec    %eax
f0119126:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011912c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119132:	ba 00 00 00 00       	mov    $0x0,%edx
f0119137:	f7 75 80             	divl   -0x80(%ebp)
f011913a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119140:	29 d0                	sub    %edx,%eax
f0119142:	01 c3                	add    %eax,%ebx
f0119144:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011914b:	10 00 00 
f011914e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119153:	0f b6 c0             	movzbl %al,%eax
f0119156:	c1 e0 04             	shl    $0x4,%eax
f0119159:	89 c2                	mov    %eax,%edx
f011915b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119161:	01 d0                	add    %edx,%eax
f0119163:	48                   	dec    %eax
f0119164:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011916a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119170:	ba 00 00 00 00       	mov    $0x0,%edx
f0119175:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011917b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119181:	29 d0                	sub    %edx,%eax
f0119183:	01 d8                	add    %ebx,%eax
f0119185:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011918a:	39 c1                	cmp    %eax,%ecx
f011918c:	0f 85 1c 03 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119192:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119198:	89 c1                	mov    %eax,%ecx
f011919a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01191a1:	10 00 00 
f01191a4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01191aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01191af:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01191b5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01191bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01191c0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01191c6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01191cc:	29 d0                	sub    %edx,%eax
f01191ce:	89 c3                	mov    %eax,%ebx
f01191d0:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01191d7:	10 00 00 
f01191da:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01191df:	0f b6 d0             	movzbl %al,%edx
f01191e2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01191e8:	01 d0                	add    %edx,%eax
f01191ea:	48                   	dec    %eax
f01191eb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01191f1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01191f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01191fc:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119202:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119208:	29 d0                	sub    %edx,%eax
f011920a:	01 c3                	add    %eax,%ebx
f011920c:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119213:	10 00 00 
f0119216:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011921b:	0f b6 c0             	movzbl %al,%eax
f011921e:	c1 e0 04             	shl    $0x4,%eax
f0119221:	89 c2                	mov    %eax,%edx
f0119223:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119229:	01 d0                	add    %edx,%eax
f011922b:	48                   	dec    %eax
f011922c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119232:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119238:	ba 00 00 00 00       	mov    $0x0,%edx
f011923d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119243:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119249:	29 d0                	sub    %edx,%eax
f011924b:	01 d8                	add    %ebx,%eax
f011924d:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119252:	39 c1                	cmp    %eax,%ecx
f0119254:	0f 85 54 02 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011925a:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119260:	89 c1                	mov    %eax,%ecx
f0119262:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119269:	10 00 00 
f011926c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119272:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119277:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011927d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119283:	ba 00 00 00 00       	mov    $0x0,%edx
f0119288:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011928e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119294:	29 d0                	sub    %edx,%eax
f0119296:	89 c3                	mov    %eax,%ebx
f0119298:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011929f:	10 00 00 
f01192a2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01192a7:	0f b6 d0             	movzbl %al,%edx
f01192aa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01192b0:	01 d0                	add    %edx,%eax
f01192b2:	48                   	dec    %eax
f01192b3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01192b9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01192bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01192c4:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01192ca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01192d0:	29 d0                	sub    %edx,%eax
f01192d2:	01 c3                	add    %eax,%ebx
f01192d4:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01192db:	10 00 00 
f01192de:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01192e3:	0f b6 c0             	movzbl %al,%eax
f01192e6:	c1 e0 04             	shl    $0x4,%eax
f01192e9:	89 c2                	mov    %eax,%edx
f01192eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01192f1:	01 d0                	add    %edx,%eax
f01192f3:	48                   	dec    %eax
f01192f4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01192fa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119300:	ba 00 00 00 00       	mov    $0x0,%edx
f0119305:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011930b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119311:	29 d0                	sub    %edx,%eax
f0119313:	01 d8                	add    %ebx,%eax
f0119315:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011931a:	39 c1                	cmp    %eax,%ecx
f011931c:	0f 85 8c 01 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119322:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119328:	89 c1                	mov    %eax,%ecx
f011932a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119331:	10 00 00 
f0119334:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011933a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011933f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119345:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011934b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119350:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119356:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011935c:	29 d0                	sub    %edx,%eax
f011935e:	89 c3                	mov    %eax,%ebx
f0119360:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0119367:	10 00 00 
f011936a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011936f:	0f b6 d0             	movzbl %al,%edx
f0119372:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119378:	01 d0                	add    %edx,%eax
f011937a:	48                   	dec    %eax
f011937b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0119381:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119387:	ba 00 00 00 00       	mov    $0x0,%edx
f011938c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0119392:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119398:	29 d0                	sub    %edx,%eax
f011939a:	01 c3                	add    %eax,%ebx
f011939c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01193a3:	10 00 00 
f01193a6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01193ab:	0f b6 c0             	movzbl %al,%eax
f01193ae:	c1 e0 04             	shl    $0x4,%eax
f01193b1:	89 c2                	mov    %eax,%edx
f01193b3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01193b9:	01 d0                	add    %edx,%eax
f01193bb:	48                   	dec    %eax
f01193bc:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01193c2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01193c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01193cd:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01193d3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01193d9:	29 d0                	sub    %edx,%eax
f01193db:	01 d8                	add    %ebx,%eax
f01193dd:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01193e2:	39 c1                	cmp    %eax,%ecx
f01193e4:	0f 85 c4 00 00 00    	jne    f01194ae <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01193ea:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01193f0:	89 c1                	mov    %eax,%ecx
f01193f2:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01193f9:	10 00 00 
f01193fc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119402:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119407:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011940d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119413:	ba 00 00 00 00       	mov    $0x0,%edx
f0119418:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011941e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119424:	29 d0                	sub    %edx,%eax
f0119426:	89 c3                	mov    %eax,%ebx
f0119428:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011942f:	10 00 00 
f0119432:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119437:	0f b6 d0             	movzbl %al,%edx
f011943a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119440:	01 d0                	add    %edx,%eax
f0119442:	48                   	dec    %eax
f0119443:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0119449:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011944f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119454:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011945a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119460:	29 d0                	sub    %edx,%eax
f0119462:	01 c3                	add    %eax,%ebx
f0119464:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011946b:	10 00 00 
f011946e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119473:	0f b6 c0             	movzbl %al,%eax
f0119476:	c1 e0 04             	shl    $0x4,%eax
f0119479:	89 c2                	mov    %eax,%edx
f011947b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119481:	01 d0                	add    %edx,%eax
f0119483:	48                   	dec    %eax
f0119484:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011948a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119490:	ba 00 00 00 00       	mov    $0x0,%edx
f0119495:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011949b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01194a1:	29 d0                	sub    %edx,%eax
f01194a3:	01 d8                	add    %ebx,%eax
f01194a5:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01194aa:	39 c1                	cmp    %eax,%ecx
f01194ac:	74 17                	je     f01194c5 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01194ae:	83 ec 04             	sub    $0x4,%esp
f01194b1:	68 74 b9 13 f0       	push   $0xf013b974
f01194b6:	68 03 01 00 00       	push   $0x103
f01194bb:	68 fa b6 13 f0       	push   $0xf013b6fa
f01194c0:	e8 40 6d fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01194c5:	e8 fe a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01194ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01194cd:	74 17                	je     f01194e6 <test_kmalloc_nextfit+0x6ec>
f01194cf:	83 ec 04             	sub    $0x4,%esp
f01194d2:	68 14 b7 13 f0       	push   $0xf013b714
f01194d7:	68 05 01 00 00       	push   $0x105
f01194dc:	68 fa b6 13 f0       	push   $0xf013b6fa
f01194e1:	e8 1f 6d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01194e6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194e9:	e8 c3 3a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01194ee:	29 c3                	sub    %eax,%ebx
f01194f0:	89 d9                	mov    %ebx,%ecx
f01194f2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01194f9:	10 00 00 
f01194fc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119502:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119507:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011950d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119513:	ba 00 00 00 00       	mov    $0x0,%edx
f0119518:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011951e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119524:	29 d0                	sub    %edx,%eax
f0119526:	89 c3                	mov    %eax,%ebx
f0119528:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011952f:	10 00 00 
f0119532:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119537:	0f b6 d0             	movzbl %al,%edx
f011953a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119540:	01 d0                	add    %edx,%eax
f0119542:	48                   	dec    %eax
f0119543:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119549:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011954f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119554:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011955a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119560:	29 d0                	sub    %edx,%eax
f0119562:	01 c3                	add    %eax,%ebx
f0119564:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011956b:	10 00 00 
f011956e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119573:	0f b6 c0             	movzbl %al,%eax
f0119576:	c1 e0 04             	shl    $0x4,%eax
f0119579:	89 c2                	mov    %eax,%edx
f011957b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119581:	01 d0                	add    %edx,%eax
f0119583:	48                   	dec    %eax
f0119584:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011958a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119590:	ba 00 00 00 00       	mov    $0x0,%edx
f0119595:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011959b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01195a1:	29 d0                	sub    %edx,%eax
f01195a3:	01 d8                	add    %ebx,%eax
f01195a5:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01195aa:	29 c2                	sub    %eax,%edx
f01195ac:	89 d0                	mov    %edx,%eax
f01195ae:	c1 e8 0c             	shr    $0xc,%eax
f01195b1:	39 c1                	cmp    %eax,%ecx
f01195b3:	74 17                	je     f01195cc <test_kmalloc_nextfit+0x7d2>
f01195b5:	83 ec 04             	sub    $0x4,%esp
f01195b8:	68 b7 b9 13 f0       	push   $0xf013b9b7
f01195bd:	68 06 01 00 00       	push   $0x106
f01195c2:	68 fa b6 13 f0       	push   $0xf013b6fa
f01195c7:	e8 39 6c fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01195cc:	e8 f7 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01195d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01195d4:	e8 d8 39 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01195d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01195dc:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01195e2:	83 ec 0c             	sub    $0xc,%esp
f01195e5:	50                   	push   %eax
f01195e6:	e8 6c e6 fe ff       	call   f0107c57 <kfree>
f01195eb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01195ee:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01195f4:	83 ec 0c             	sub    $0xc,%esp
f01195f7:	50                   	push   %eax
f01195f8:	e8 5a e6 fe ff       	call   f0107c57 <kfree>
f01195fd:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119600:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0119606:	83 ec 0c             	sub    $0xc,%esp
f0119609:	50                   	push   %eax
f011960a:	e8 48 e6 fe ff       	call   f0107c57 <kfree>
f011960f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119612:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0119618:	83 ec 0c             	sub    $0xc,%esp
f011961b:	50                   	push   %eax
f011961c:	e8 36 e6 fe ff       	call   f0107c57 <kfree>
f0119621:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119624:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011962a:	83 ec 0c             	sub    $0xc,%esp
f011962d:	50                   	push   %eax
f011962e:	e8 24 e6 fe ff       	call   f0107c57 <kfree>
f0119633:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119636:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f011963c:	83 ec 0c             	sub    $0xc,%esp
f011963f:	50                   	push   %eax
f0119640:	e8 12 e6 fe ff       	call   f0107c57 <kfree>
f0119645:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119648:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011964e:	83 ec 0c             	sub    $0xc,%esp
f0119651:	50                   	push   %eax
f0119652:	e8 00 e6 fe ff       	call   f0107c57 <kfree>
f0119657:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011965a:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119660:	83 ec 0c             	sub    $0xc,%esp
f0119663:	50                   	push   %eax
f0119664:	e8 ee e5 fe ff       	call   f0107c57 <kfree>
f0119669:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f011966c:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119672:	83 ec 0c             	sub    $0xc,%esp
f0119675:	50                   	push   %eax
f0119676:	e8 dc e5 fe ff       	call   f0107c57 <kfree>
f011967b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011967e:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119684:	83 ec 0c             	sub    $0xc,%esp
f0119687:	50                   	push   %eax
f0119688:	e8 ca e5 fe ff       	call   f0107c57 <kfree>
f011968d:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119690:	e8 33 a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119695:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119698:	74 17                	je     f01196b1 <test_kmalloc_nextfit+0x8b7>
f011969a:	83 ec 04             	sub    $0x4,%esp
f011969d:	68 14 b7 13 f0       	push   $0xf013b714
f01196a2:	68 17 01 00 00       	push   $0x117
f01196a7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01196ac:	e8 54 6b fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01196b1:	e8 fb 38 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01196b6:	89 c2                	mov    %eax,%edx
f01196b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01196bb:	89 d1                	mov    %edx,%ecx
f01196bd:	29 c1                	sub    %eax,%ecx
f01196bf:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01196c6:	10 00 00 
f01196c9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01196cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196d4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01196da:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01196e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e5:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01196eb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01196f1:	29 d0                	sub    %edx,%eax
f01196f3:	89 c3                	mov    %eax,%ebx
f01196f5:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01196fc:	10 00 00 
f01196ff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119704:	0f b6 d0             	movzbl %al,%edx
f0119707:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011970d:	01 d0                	add    %edx,%eax
f011970f:	48                   	dec    %eax
f0119710:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119716:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011971c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119721:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119727:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011972d:	29 d0                	sub    %edx,%eax
f011972f:	01 c3                	add    %eax,%ebx
f0119731:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119738:	10 00 00 
f011973b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119740:	0f b6 c0             	movzbl %al,%eax
f0119743:	c1 e0 04             	shl    $0x4,%eax
f0119746:	89 c2                	mov    %eax,%edx
f0119748:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011974e:	01 d0                	add    %edx,%eax
f0119750:	48                   	dec    %eax
f0119751:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119757:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011975d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119762:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119768:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011976e:	29 d0                	sub    %edx,%eax
f0119770:	01 d8                	add    %ebx,%eax
f0119772:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119777:	29 c2                	sub    %eax,%edx
f0119779:	89 d0                	mov    %edx,%eax
f011977b:	c1 e8 0c             	shr    $0xc,%eax
f011977e:	39 c1                	cmp    %eax,%ecx
f0119780:	74 17                	je     f0119799 <test_kmalloc_nextfit+0x99f>
f0119782:	83 ec 04             	sub    $0x4,%esp
f0119785:	68 c8 b9 13 f0       	push   $0xf013b9c8
f011978a:	68 18 01 00 00       	push   $0x118
f011978f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119794:	e8 6c 6a fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119799:	e8 2a a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011979e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197a1:	e8 0b 38 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01197a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01197a9:	83 ec 0c             	sub    $0xc,%esp
f01197ac:	68 00 fc 0f 00       	push   $0xffc00
f01197b1:	e8 d6 e3 fe ff       	call   f0107b8c <kmalloc>
f01197b6:	83 c4 10             	add    $0x10,%esp
f01197b9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f01197bf:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01197c6:	10 00 00 
f01197c9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01197cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01197d4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01197da:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01197e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01197e5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01197eb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01197f1:	29 d0                	sub    %edx,%eax
f01197f3:	89 c1                	mov    %eax,%ecx
f01197f5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01197fc:	10 00 00 
f01197ff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119804:	0f b6 d0             	movzbl %al,%edx
f0119807:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011980d:	01 d0                	add    %edx,%eax
f011980f:	48                   	dec    %eax
f0119810:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119816:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011981c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119821:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119827:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011982d:	29 d0                	sub    %edx,%eax
f011982f:	01 c1                	add    %eax,%ecx
f0119831:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119838:	10 00 00 
f011983b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119840:	0f b6 c0             	movzbl %al,%eax
f0119843:	c1 e0 04             	shl    $0x4,%eax
f0119846:	89 c2                	mov    %eax,%edx
f0119848:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011984e:	01 d0                	add    %edx,%eax
f0119850:	48                   	dec    %eax
f0119851:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119857:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011985d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119862:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119868:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011986e:	29 d0                	sub    %edx,%eax
f0119870:	01 c8                	add    %ecx,%eax
f0119872:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119878:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011987e:	39 c2                	cmp    %eax,%edx
f0119880:	74 17                	je     f0119899 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119882:	83 ec 04             	sub    $0x4,%esp
f0119885:	68 08 ba 13 f0       	push   $0xf013ba08
f011988a:	68 1f 01 00 00       	push   $0x11f
f011988f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119894:	e8 6c 69 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119899:	e8 2a a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011989e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01198a1:	74 17                	je     f01198ba <test_kmalloc_nextfit+0xac0>
f01198a3:	83 ec 04             	sub    $0x4,%esp
f01198a6:	68 14 b7 13 f0       	push   $0xf013b714
f01198ab:	68 20 01 00 00       	push   $0x120
f01198b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01198b5:	e8 4b 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01198ba:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198bd:	e8 ef 36 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01198c2:	29 c3                	sub    %eax,%ebx
f01198c4:	89 d8                	mov    %ebx,%eax
f01198c6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01198cb:	74 17                	je     f01198e4 <test_kmalloc_nextfit+0xaea>
f01198cd:	83 ec 04             	sub    $0x4,%esp
f01198d0:	68 b7 b9 13 f0       	push   $0xf013b9b7
f01198d5:	68 21 01 00 00       	push   $0x121
f01198da:	68 fa b6 13 f0       	push   $0xf013b6fa
f01198df:	e8 21 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01198e4:	e8 df a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01198e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01198ec:	e8 c0 36 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f01198f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01198f4:	83 ec 0c             	sub    $0xc,%esp
f01198f7:	68 00 04 00 00       	push   $0x400
f01198fc:	e8 8b e2 fe ff       	call   f0107b8c <kmalloc>
f0119901:	83 c4 10             	add    $0x10,%esp
f0119904:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f011990a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119911:	10 00 00 
f0119914:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011991a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011991f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119925:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011992b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119930:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119936:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011993c:	29 d0                	sub    %edx,%eax
f011993e:	89 c1                	mov    %eax,%ecx
f0119940:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119947:	10 00 00 
f011994a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011994f:	0f b6 d0             	movzbl %al,%edx
f0119952:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119958:	01 d0                	add    %edx,%eax
f011995a:	48                   	dec    %eax
f011995b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119961:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119967:	ba 00 00 00 00       	mov    $0x0,%edx
f011996c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119972:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119978:	29 d0                	sub    %edx,%eax
f011997a:	01 c1                	add    %eax,%ecx
f011997c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119983:	10 00 00 
f0119986:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011998b:	0f b6 c0             	movzbl %al,%eax
f011998e:	c1 e0 04             	shl    $0x4,%eax
f0119991:	89 c2                	mov    %eax,%edx
f0119993:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119999:	01 d0                	add    %edx,%eax
f011999b:	48                   	dec    %eax
f011999c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01199a2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01199a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01199ad:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01199b3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01199b9:	29 d0                	sub    %edx,%eax
f01199bb:	01 c8                	add    %ecx,%eax
f01199bd:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01199c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01199c9:	39 c2                	cmp    %eax,%edx
f01199cb:	74 17                	je     f01199e4 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01199cd:	83 ec 04             	sub    $0x4,%esp
f01199d0:	68 08 ba 13 f0       	push   $0xf013ba08
f01199d5:	68 27 01 00 00       	push   $0x127
f01199da:	68 fa b6 13 f0       	push   $0xf013b6fa
f01199df:	e8 21 68 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199e4:	e8 df a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01199e9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199ec:	74 17                	je     f0119a05 <test_kmalloc_nextfit+0xc0b>
f01199ee:	83 ec 04             	sub    $0x4,%esp
f01199f1:	68 14 b7 13 f0       	push   $0xf013b714
f01199f6:	68 28 01 00 00       	push   $0x128
f01199fb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119a00:	e8 00 68 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119a05:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a08:	e8 a4 35 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119a0d:	29 c3                	sub    %eax,%ebx
f0119a0f:	89 d8                	mov    %ebx,%eax
f0119a11:	83 f8 01             	cmp    $0x1,%eax
f0119a14:	74 17                	je     f0119a2d <test_kmalloc_nextfit+0xc33>
f0119a16:	83 ec 04             	sub    $0x4,%esp
f0119a19:	68 b7 b9 13 f0       	push   $0xf013b9b7
f0119a1e:	68 29 01 00 00       	push   $0x129
f0119a23:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119a28:	e8 d8 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119a2d:	e8 96 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a32:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a35:	e8 77 35 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119a3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119a3d:	83 ec 0c             	sub    $0xc,%esp
f0119a40:	68 00 00 50 00       	push   $0x500000
f0119a45:	e8 42 e1 fe ff       	call   f0107b8c <kmalloc>
f0119a4a:	83 c4 10             	add    $0x10,%esp
f0119a4d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119a53:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119a5a:	10 00 00 
f0119a5d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119a63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a68:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119a6e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119a74:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a79:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119a7f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119a85:	29 d0                	sub    %edx,%eax
f0119a87:	89 c1                	mov    %eax,%ecx
f0119a89:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119a90:	10 00 00 
f0119a93:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119a98:	0f b6 d0             	movzbl %al,%edx
f0119a9b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119aa1:	01 d0                	add    %edx,%eax
f0119aa3:	48                   	dec    %eax
f0119aa4:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119aaa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119ab0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ab5:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119abb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119ac1:	29 d0                	sub    %edx,%eax
f0119ac3:	01 c1                	add    %eax,%ecx
f0119ac5:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119acc:	10 00 00 
f0119acf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119ad4:	0f b6 c0             	movzbl %al,%eax
f0119ad7:	c1 e0 04             	shl    $0x4,%eax
f0119ada:	89 c2                	mov    %eax,%edx
f0119adc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119ae2:	01 d0                	add    %edx,%eax
f0119ae4:	48                   	dec    %eax
f0119ae5:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119aeb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119af6:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119afc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119b02:	29 d0                	sub    %edx,%eax
f0119b04:	01 c8                	add    %ecx,%eax
f0119b06:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119b0c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119b12:	39 c2                	cmp    %eax,%edx
f0119b14:	74 17                	je     f0119b2d <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119b16:	83 ec 04             	sub    $0x4,%esp
f0119b19:	68 08 ba 13 f0       	push   $0xf013ba08
f0119b1e:	68 2f 01 00 00       	push   $0x12f
f0119b23:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119b28:	e8 d8 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b2d:	e8 96 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b32:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119b35:	74 17                	je     f0119b4e <test_kmalloc_nextfit+0xd54>
f0119b37:	83 ec 04             	sub    $0x4,%esp
f0119b3a:	68 14 b7 13 f0       	push   $0xf013b714
f0119b3f:	68 30 01 00 00       	push   $0x130
f0119b44:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119b49:	e8 b7 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119b4e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119b51:	e8 5b 34 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119b56:	29 c3                	sub    %eax,%ebx
f0119b58:	89 d8                	mov    %ebx,%eax
f0119b5a:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119b5f:	74 17                	je     f0119b78 <test_kmalloc_nextfit+0xd7e>
f0119b61:	83 ec 04             	sub    $0x4,%esp
f0119b64:	68 b7 b9 13 f0       	push   $0xf013b9b7
f0119b69:	68 31 01 00 00       	push   $0x131
f0119b6e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119b73:	e8 8d 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119b78:	e8 4b a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b80:	e8 2c 34 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119b85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119b88:	83 ec 0c             	sub    $0xc,%esp
f0119b8b:	68 00 00 10 00       	push   $0x100000
f0119b90:	e8 f7 df fe ff       	call   f0107b8c <kmalloc>
f0119b95:	83 c4 10             	add    $0x10,%esp
f0119b98:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119b9e:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119ba5:	10 00 00 
f0119ba8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119bae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bb3:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119bb9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119bbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bc4:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119bca:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119bd0:	29 d0                	sub    %edx,%eax
f0119bd2:	89 c1                	mov    %eax,%ecx
f0119bd4:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119bdb:	10 00 00 
f0119bde:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119be3:	0f b6 d0             	movzbl %al,%edx
f0119be6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119bec:	01 d0                	add    %edx,%eax
f0119bee:	48                   	dec    %eax
f0119bef:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119bf5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119bfb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c00:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119c06:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119c0c:	29 d0                	sub    %edx,%eax
f0119c0e:	01 c1                	add    %eax,%ecx
f0119c10:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119c17:	10 00 00 
f0119c1a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119c1f:	0f b6 c0             	movzbl %al,%eax
f0119c22:	c1 e0 04             	shl    $0x4,%eax
f0119c25:	89 c2                	mov    %eax,%edx
f0119c27:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119c2d:	01 d0                	add    %edx,%eax
f0119c2f:	48                   	dec    %eax
f0119c30:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119c36:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119c3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c41:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119c47:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119c4d:	29 d0                	sub    %edx,%eax
f0119c4f:	01 c8                	add    %ecx,%eax
f0119c51:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119c57:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119c5d:	39 c2                	cmp    %eax,%edx
f0119c5f:	74 17                	je     f0119c78 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119c61:	83 ec 04             	sub    $0x4,%esp
f0119c64:	68 08 ba 13 f0       	push   $0xf013ba08
f0119c69:	68 37 01 00 00       	push   $0x137
f0119c6e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119c73:	e8 8d 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c78:	e8 4b a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c7d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c80:	74 17                	je     f0119c99 <test_kmalloc_nextfit+0xe9f>
f0119c82:	83 ec 04             	sub    $0x4,%esp
f0119c85:	68 14 b7 13 f0       	push   $0xf013b714
f0119c8a:	68 38 01 00 00       	push   $0x138
f0119c8f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119c94:	e8 6c 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c99:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c9c:	e8 10 33 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119ca1:	29 c3                	sub    %eax,%ebx
f0119ca3:	89 d8                	mov    %ebx,%eax
f0119ca5:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119caa:	74 17                	je     f0119cc3 <test_kmalloc_nextfit+0xec9>
f0119cac:	83 ec 04             	sub    $0x4,%esp
f0119caf:	68 b7 b9 13 f0       	push   $0xf013b9b7
f0119cb4:	68 39 01 00 00       	push   $0x139
f0119cb9:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119cbe:	e8 42 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119cc3:	e8 00 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119cc8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ccb:	e8 e1 32 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119cd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119cd3:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119cd9:	83 ec 0c             	sub    $0xc,%esp
f0119cdc:	50                   	push   %eax
f0119cdd:	e8 75 df fe ff       	call   f0107c57 <kfree>
f0119ce2:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ce5:	e8 de a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119cea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ced:	74 17                	je     f0119d06 <test_kmalloc_nextfit+0xf0c>
f0119cef:	83 ec 04             	sub    $0x4,%esp
f0119cf2:	68 14 b7 13 f0       	push   $0xf013b714
f0119cf7:	68 3e 01 00 00       	push   $0x13e
f0119cfc:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119d01:	e8 ff 64 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119d06:	e8 a6 32 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119d0b:	89 c2                	mov    %eax,%edx
f0119d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119d10:	29 c2                	sub    %eax,%edx
f0119d12:	89 d0                	mov    %edx,%eax
f0119d14:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119d19:	74 17                	je     f0119d32 <test_kmalloc_nextfit+0xf38>
f0119d1b:	83 ec 04             	sub    $0x4,%esp
f0119d1e:	68 c8 b9 13 f0       	push   $0xf013b9c8
f0119d23:	68 3f 01 00 00       	push   $0x13f
f0119d28:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119d2d:	e8 d3 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d32:	e8 91 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d37:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d3a:	e8 72 32 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119d3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119d42:	83 ec 0c             	sub    $0xc,%esp
f0119d45:	68 00 04 00 00       	push   $0x400
f0119d4a:	e8 3d de fe ff       	call   f0107b8c <kmalloc>
f0119d4f:	83 c4 10             	add    $0x10,%esp
f0119d52:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119d58:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119d5f:	10 00 00 
f0119d62:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119d68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d6d:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119d73:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d7e:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119d84:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119d8a:	29 d0                	sub    %edx,%eax
f0119d8c:	89 c1                	mov    %eax,%ecx
f0119d8e:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119d95:	10 00 00 
f0119d98:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119d9d:	0f b6 d0             	movzbl %al,%edx
f0119da0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119da6:	01 d0                	add    %edx,%eax
f0119da8:	48                   	dec    %eax
f0119da9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119daf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119db5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dba:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119dc0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119dc6:	29 d0                	sub    %edx,%eax
f0119dc8:	01 c1                	add    %eax,%ecx
f0119dca:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119dd1:	10 00 00 
f0119dd4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119dd9:	0f b6 c0             	movzbl %al,%eax
f0119ddc:	c1 e0 04             	shl    $0x4,%eax
f0119ddf:	89 c2                	mov    %eax,%edx
f0119de1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119de7:	01 d0                	add    %edx,%eax
f0119de9:	48                   	dec    %eax
f0119dea:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119df0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119df6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dfb:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119e01:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119e07:	29 d0                	sub    %edx,%eax
f0119e09:	01 c8                	add    %ecx,%eax
f0119e0b:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119e11:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e17:	39 c2                	cmp    %eax,%edx
f0119e19:	74 17                	je     f0119e32 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119e1b:	83 ec 04             	sub    $0x4,%esp
f0119e1e:	68 08 ba 13 f0       	push   $0xf013ba08
f0119e23:	68 45 01 00 00       	push   $0x145
f0119e28:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119e2d:	e8 d3 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e32:	e8 91 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e37:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e3a:	74 17                	je     f0119e53 <test_kmalloc_nextfit+0x1059>
f0119e3c:	83 ec 04             	sub    $0x4,%esp
f0119e3f:	68 14 b7 13 f0       	push   $0xf013b714
f0119e44:	68 46 01 00 00       	push   $0x146
f0119e49:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119e4e:	e8 b2 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119e53:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e56:	e8 56 31 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119e5b:	29 c3                	sub    %eax,%ebx
f0119e5d:	89 d8                	mov    %ebx,%eax
f0119e5f:	83 f8 01             	cmp    $0x1,%eax
f0119e62:	74 17                	je     f0119e7b <test_kmalloc_nextfit+0x1081>
f0119e64:	83 ec 04             	sub    $0x4,%esp
f0119e67:	68 b7 b9 13 f0       	push   $0xf013b9b7
f0119e6c:	68 47 01 00 00       	push   $0x147
f0119e71:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119e76:	e8 8a 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119e7b:	e8 48 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119e80:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119e83:	e8 29 31 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119e88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119e8b:	83 ec 0c             	sub    $0xc,%esp
f0119e8e:	68 00 e0 1f 00       	push   $0x1fe000
f0119e93:	e8 f4 dc fe ff       	call   f0107b8c <kmalloc>
f0119e98:	83 c4 10             	add    $0x10,%esp
f0119e9b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119ea1:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119ea8:	10 00 00 
f0119eab:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119eb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119eb6:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119ebc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119ec2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ec7:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119ecd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119ed3:	29 d0                	sub    %edx,%eax
f0119ed5:	89 c1                	mov    %eax,%ecx
f0119ed7:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119ede:	10 00 00 
f0119ee1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119ee6:	0f b6 d0             	movzbl %al,%edx
f0119ee9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119eef:	01 d0                	add    %edx,%eax
f0119ef1:	48                   	dec    %eax
f0119ef2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119ef8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119efe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f03:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119f09:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119f0f:	29 d0                	sub    %edx,%eax
f0119f11:	01 c1                	add    %eax,%ecx
f0119f13:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119f1a:	10 00 00 
f0119f1d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0119f22:	0f b6 c0             	movzbl %al,%eax
f0119f25:	c1 e0 04             	shl    $0x4,%eax
f0119f28:	89 c2                	mov    %eax,%edx
f0119f2a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119f30:	01 d0                	add    %edx,%eax
f0119f32:	48                   	dec    %eax
f0119f33:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119f39:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119f3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f44:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119f4a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119f50:	29 d0                	sub    %edx,%eax
f0119f52:	01 c8                	add    %ecx,%eax
f0119f54:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119f5a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119f60:	39 c2                	cmp    %eax,%edx
f0119f62:	74 17                	je     f0119f7b <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119f64:	83 ec 04             	sub    $0x4,%esp
f0119f67:	68 08 ba 13 f0       	push   $0xf013ba08
f0119f6c:	68 4d 01 00 00       	push   $0x14d
f0119f71:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119f76:	e8 8a 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f7b:	e8 48 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f80:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f83:	74 17                	je     f0119f9c <test_kmalloc_nextfit+0x11a2>
f0119f85:	83 ec 04             	sub    $0x4,%esp
f0119f88:	68 14 b7 13 f0       	push   $0xf013b714
f0119f8d:	68 4e 01 00 00       	push   $0x14e
f0119f92:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119f97:	e8 69 62 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119f9c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f9f:	e8 0d 30 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119fa4:	29 c3                	sub    %eax,%ebx
f0119fa6:	89 d8                	mov    %ebx,%eax
f0119fa8:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119fad:	74 17                	je     f0119fc6 <test_kmalloc_nextfit+0x11cc>
f0119faf:	83 ec 04             	sub    $0x4,%esp
f0119fb2:	68 b7 b9 13 f0       	push   $0xf013b9b7
f0119fb7:	68 50 01 00 00       	push   $0x150
f0119fbc:	68 fa b6 13 f0       	push   $0xf013b6fa
f0119fc1:	e8 3f 62 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119fc6:	e8 fd 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119fcb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119fce:	e8 de 2f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f0119fd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119fd6:	83 ec 0c             	sub    $0xc,%esp
f0119fd9:	68 00 00 08 00       	push   $0x80000
f0119fde:	e8 a9 db fe ff       	call   f0107b8c <kmalloc>
f0119fe3:	83 c4 10             	add    $0x10,%esp
f0119fe6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119fec:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119ff3:	10 00 00 
f0119ff6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119ffc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a001:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f011a007:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a00d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a012:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f011a018:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a01e:	29 d0                	sub    %edx,%eax
f011a020:	89 c1                	mov    %eax,%ecx
f011a022:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011a029:	10 00 00 
f011a02c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a031:	0f b6 d0             	movzbl %al,%edx
f011a034:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011a03a:	01 d0                	add    %edx,%eax
f011a03c:	48                   	dec    %eax
f011a03d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011a043:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a049:	ba 00 00 00 00       	mov    $0x0,%edx
f011a04e:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011a054:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a05a:	29 d0                	sub    %edx,%eax
f011a05c:	01 c1                	add    %eax,%ecx
f011a05e:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011a065:	10 00 00 
f011a068:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a06d:	0f b6 c0             	movzbl %al,%eax
f011a070:	c1 e0 04             	shl    $0x4,%eax
f011a073:	89 c2                	mov    %eax,%edx
f011a075:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011a07b:	01 d0                	add    %edx,%eax
f011a07d:	48                   	dec    %eax
f011a07e:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011a084:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a08a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a08f:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011a095:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a09b:	29 d0                	sub    %edx,%eax
f011a09d:	01 c8                	add    %ecx,%eax
f011a09f:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a0a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a0ab:	39 c2                	cmp    %eax,%edx
f011a0ad:	74 17                	je     f011a0c6 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a0af:	83 ec 04             	sub    $0x4,%esp
f011a0b2:	68 08 ba 13 f0       	push   $0xf013ba08
f011a0b7:	68 56 01 00 00       	push   $0x156
f011a0bc:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a0c1:	e8 3f 61 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a0c6:	e8 fd 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a0cb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a0ce:	74 17                	je     f011a0e7 <test_kmalloc_nextfit+0x12ed>
f011a0d0:	83 ec 04             	sub    $0x4,%esp
f011a0d3:	68 14 b7 13 f0       	push   $0xf013b714
f011a0d8:	68 57 01 00 00       	push   $0x157
f011a0dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a0e2:	e8 1e 61 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a0e7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a0ea:	e8 c2 2e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a0ef:	29 c3                	sub    %eax,%ebx
f011a0f1:	89 d8                	mov    %ebx,%eax
f011a0f3:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a0f8:	74 17                	je     f011a111 <test_kmalloc_nextfit+0x1317>
f011a0fa:	83 ec 04             	sub    $0x4,%esp
f011a0fd:	68 b7 b9 13 f0       	push   $0xf013b9b7
f011a102:	68 58 01 00 00       	push   $0x158
f011a107:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a10c:	e8 f4 60 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a111:	83 ec 0c             	sub    $0xc,%esp
f011a114:	68 28 ba 13 f0       	push   $0xf013ba28
f011a119:	e8 f0 6b fe ff       	call   f0100d0e <cprintf>
f011a11e:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a121:	e8 a2 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a126:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a129:	e8 83 2e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a12e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a131:	83 ec 0c             	sub    $0xc,%esp
f011a134:	68 00 00 38 00       	push   $0x380000
f011a139:	e8 4e da fe ff       	call   f0107b8c <kmalloc>
f011a13e:	83 c4 10             	add    $0x10,%esp
f011a141:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a147:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a14e:	10 00 00 
f011a151:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a157:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a15c:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a162:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a168:	ba 00 00 00 00       	mov    $0x0,%edx
f011a16d:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a173:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a179:	29 d0                	sub    %edx,%eax
f011a17b:	89 c1                	mov    %eax,%ecx
f011a17d:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a184:	10 00 00 
f011a187:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a18c:	0f b6 d0             	movzbl %al,%edx
f011a18f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a195:	01 d0                	add    %edx,%eax
f011a197:	48                   	dec    %eax
f011a198:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a19e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a1a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1a9:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a1af:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a1b5:	29 d0                	sub    %edx,%eax
f011a1b7:	01 c1                	add    %eax,%ecx
f011a1b9:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a1c0:	10 00 00 
f011a1c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a1c8:	0f b6 c0             	movzbl %al,%eax
f011a1cb:	c1 e0 04             	shl    $0x4,%eax
f011a1ce:	89 c2                	mov    %eax,%edx
f011a1d0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a1d6:	01 d0                	add    %edx,%eax
f011a1d8:	48                   	dec    %eax
f011a1d9:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a1df:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a1e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1ea:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a1f0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a1f6:	29 d0                	sub    %edx,%eax
f011a1f8:	01 c8                	add    %ecx,%eax
f011a1fa:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a200:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a206:	39 c2                	cmp    %eax,%edx
f011a208:	74 17                	je     f011a221 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a20a:	83 ec 04             	sub    $0x4,%esp
f011a20d:	68 08 ba 13 f0       	push   $0xf013ba08
f011a212:	68 62 01 00 00       	push   $0x162
f011a217:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a21c:	e8 e4 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a221:	e8 a2 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a226:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a229:	74 17                	je     f011a242 <test_kmalloc_nextfit+0x1448>
f011a22b:	83 ec 04             	sub    $0x4,%esp
f011a22e:	68 14 b7 13 f0       	push   $0xf013b714
f011a233:	68 63 01 00 00       	push   $0x163
f011a238:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a23d:	e8 c3 5f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a242:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a245:	e8 67 2d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a24a:	29 c3                	sub    %eax,%ebx
f011a24c:	89 d8                	mov    %ebx,%eax
f011a24e:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a253:	74 17                	je     f011a26c <test_kmalloc_nextfit+0x1472>
f011a255:	83 ec 04             	sub    $0x4,%esp
f011a258:	68 b7 b9 13 f0       	push   $0xf013b9b7
f011a25d:	68 64 01 00 00       	push   $0x164
f011a262:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a267:	e8 99 5f fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a26c:	e8 57 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a271:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a274:	e8 38 2d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a279:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a27c:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a282:	83 ec 0c             	sub    $0xc,%esp
f011a285:	50                   	push   %eax
f011a286:	e8 cc d9 fe ff       	call   f0107c57 <kfree>
f011a28b:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a28e:	e8 35 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a293:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a296:	74 17                	je     f011a2af <test_kmalloc_nextfit+0x14b5>
f011a298:	83 ec 04             	sub    $0x4,%esp
f011a29b:	68 14 b7 13 f0       	push   $0xf013b714
f011a2a0:	68 69 01 00 00       	push   $0x169
f011a2a5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a2aa:	e8 56 5f fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a2af:	e8 fd 2c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a2b4:	89 c2                	mov    %eax,%edx
f011a2b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a2b9:	29 c2                	sub    %eax,%edx
f011a2bb:	89 d0                	mov    %edx,%eax
f011a2bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a2c2:	74 17                	je     f011a2db <test_kmalloc_nextfit+0x14e1>
f011a2c4:	83 ec 04             	sub    $0x4,%esp
f011a2c7:	68 c8 b9 13 f0       	push   $0xf013b9c8
f011a2cc:	68 6a 01 00 00       	push   $0x16a
f011a2d1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a2d6:	e8 2a 5f fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a2db:	e8 e8 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a2e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a2e3:	e8 c9 2c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a2e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a2eb:	83 ec 0c             	sub    $0xc,%esp
f011a2ee:	68 00 fc 3f 00       	push   $0x3ffc00
f011a2f3:	e8 94 d8 fe ff       	call   f0107b8c <kmalloc>
f011a2f8:	83 c4 10             	add    $0x10,%esp
f011a2fb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a301:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a308:	10 00 00 
f011a30b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a311:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a316:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a31c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a322:	ba 00 00 00 00       	mov    $0x0,%edx
f011a327:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a32d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a333:	29 d0                	sub    %edx,%eax
f011a335:	89 c1                	mov    %eax,%ecx
f011a337:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a33e:	10 00 00 
f011a341:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a346:	0f b6 d0             	movzbl %al,%edx
f011a349:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a34f:	01 d0                	add    %edx,%eax
f011a351:	48                   	dec    %eax
f011a352:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a358:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a35e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a363:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a369:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a36f:	29 d0                	sub    %edx,%eax
f011a371:	01 c1                	add    %eax,%ecx
f011a373:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a37a:	10 00 00 
f011a37d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a382:	0f b6 c0             	movzbl %al,%eax
f011a385:	c1 e0 04             	shl    $0x4,%eax
f011a388:	89 c2                	mov    %eax,%edx
f011a38a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a390:	01 d0                	add    %edx,%eax
f011a392:	48                   	dec    %eax
f011a393:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a399:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a39f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3a4:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a3aa:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a3b0:	29 d0                	sub    %edx,%eax
f011a3b2:	01 c8                	add    %ecx,%eax
f011a3b4:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a3ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3c0:	39 c2                	cmp    %eax,%edx
f011a3c2:	74 17                	je     f011a3db <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a3c4:	83 ec 04             	sub    $0x4,%esp
f011a3c7:	68 08 ba 13 f0       	push   $0xf013ba08
f011a3cc:	68 70 01 00 00       	push   $0x170
f011a3d1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a3d6:	e8 2a 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3db:	e8 e8 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a3e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a3e3:	74 17                	je     f011a3fc <test_kmalloc_nextfit+0x1602>
f011a3e5:	83 ec 04             	sub    $0x4,%esp
f011a3e8:	68 14 b7 13 f0       	push   $0xf013b714
f011a3ed:	68 71 01 00 00       	push   $0x171
f011a3f2:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a3f7:	e8 09 5e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a3fc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a3ff:	e8 ad 2b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a404:	29 c3                	sub    %eax,%ebx
f011a406:	89 d8                	mov    %ebx,%eax
f011a408:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a40d:	74 17                	je     f011a426 <test_kmalloc_nextfit+0x162c>
f011a40f:	83 ec 04             	sub    $0x4,%esp
f011a412:	68 b7 b9 13 f0       	push   $0xf013b9b7
f011a417:	68 72 01 00 00       	push   $0x172
f011a41c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a421:	e8 df 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a426:	83 ec 0c             	sub    $0xc,%esp
f011a429:	68 64 ba 13 f0       	push   $0xf013ba64
f011a42e:	e8 db 68 fe ff       	call   f0100d0e <cprintf>
f011a433:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a436:	e8 8d 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a43b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a43e:	e8 6e 2b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a443:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a446:	83 ec 0c             	sub    $0xc,%esp
f011a449:	68 00 00 60 00       	push   $0x600000
f011a44e:	e8 39 d7 fe ff       	call   f0107b8c <kmalloc>
f011a453:	83 c4 10             	add    $0x10,%esp
f011a456:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a45c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a462:	85 c0                	test   %eax,%eax
f011a464:	74 17                	je     f011a47d <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a466:	83 ec 04             	sub    $0x4,%esp
f011a469:	68 08 ba 13 f0       	push   $0xf013ba08
f011a46e:	68 7c 01 00 00       	push   $0x17c
f011a473:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a478:	e8 88 5d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a47d:	e8 46 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a482:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a485:	74 17                	je     f011a49e <test_kmalloc_nextfit+0x16a4>
f011a487:	83 ec 04             	sub    $0x4,%esp
f011a48a:	68 14 b7 13 f0       	push   $0xf013b714
f011a48f:	68 7d 01 00 00       	push   $0x17d
f011a494:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a499:	e8 67 5d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a49e:	e8 0e 2b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a4a3:	89 c2                	mov    %eax,%edx
f011a4a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a4a8:	39 c2                	cmp    %eax,%edx
f011a4aa:	74 17                	je     f011a4c3 <test_kmalloc_nextfit+0x16c9>
f011a4ac:	83 ec 04             	sub    $0x4,%esp
f011a4af:	68 b7 b9 13 f0       	push   $0xf013b9b7
f011a4b4:	68 7e 01 00 00       	push   $0x17e
f011a4b9:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a4be:	e8 42 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a4c3:	83 ec 0c             	sub    $0xc,%esp
f011a4c6:	68 9c ba 13 f0       	push   $0xf013ba9c
f011a4cb:	e8 3e 68 fe ff       	call   f0100d0e <cprintf>
f011a4d0:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a4d3:	83 ec 0c             	sub    $0xc,%esp
f011a4d6:	68 d8 ba 13 f0       	push   $0xf013bad8
f011a4db:	e8 2e 68 fe ff       	call   f0100d0e <cprintf>
f011a4e0:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a4e3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a4e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a4eb:	5b                   	pop    %ebx
f011a4ec:	5f                   	pop    %edi
f011a4ed:	5d                   	pop    %ebp
f011a4ee:	c3                   	ret    

f011a4ef <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a4ef:	55                   	push   %ebp
f011a4f0:	89 e5                	mov    %esp,%ebp
f011a4f2:	57                   	push   %edi
f011a4f3:	53                   	push   %ebx
f011a4f4:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a4fa:	83 ec 0c             	sub    $0xc,%esp
f011a4fd:	68 3c b6 13 f0       	push   $0xf013b63c
f011a502:	e8 07 68 fe ff       	call   f0100d0e <cprintf>
f011a507:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a50a:	83 ec 0c             	sub    $0xc,%esp
f011a50d:	68 6c b6 13 f0       	push   $0xf013b66c
f011a512:	e8 f7 67 fe ff       	call   f0100d0e <cprintf>
f011a517:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a51a:	83 ec 0c             	sub    $0xc,%esp
f011a51d:	68 3c b6 13 f0       	push   $0xf013b63c
f011a522:	e8 e7 67 fe ff       	call   f0100d0e <cprintf>
f011a527:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a52a:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a530:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a535:	b8 00 00 00 00       	mov    $0x0,%eax
f011a53a:	89 d7                	mov    %edx,%edi
f011a53c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a53e:	e8 6e 2a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a543:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a546:	e8 7d 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a54b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a54e:	83 ec 0c             	sub    $0xc,%esp
f011a551:	68 00 fc 2f 00       	push   $0x2ffc00
f011a556:	e8 31 d6 fe ff       	call   f0107b8c <kmalloc>
f011a55b:	83 c4 10             	add    $0x10,%esp
f011a55e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a564:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a56a:	89 c1                	mov    %eax,%ecx
f011a56c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a573:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a576:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a57b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a57e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a581:	ba 00 00 00 00       	mov    $0x0,%edx
f011a586:	f7 75 ec             	divl   -0x14(%ebp)
f011a589:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a58c:	29 d0                	sub    %edx,%eax
f011a58e:	89 c3                	mov    %eax,%ebx
f011a590:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a597:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a59c:	0f b6 d0             	movzbl %al,%edx
f011a59f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a5a2:	01 d0                	add    %edx,%eax
f011a5a4:	48                   	dec    %eax
f011a5a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a5a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a5ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5b0:	f7 75 e4             	divl   -0x1c(%ebp)
f011a5b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a5b6:	29 d0                	sub    %edx,%eax
f011a5b8:	01 c3                	add    %eax,%ebx
f011a5ba:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a5c1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a5c6:	0f b6 c0             	movzbl %al,%eax
f011a5c9:	c1 e0 04             	shl    $0x4,%eax
f011a5cc:	89 c2                	mov    %eax,%edx
f011a5ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a5d1:	01 d0                	add    %edx,%eax
f011a5d3:	48                   	dec    %eax
f011a5d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a5d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a5da:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5df:	f7 75 dc             	divl   -0x24(%ebp)
f011a5e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a5e5:	29 d0                	sub    %edx,%eax
f011a5e7:	01 d8                	add    %ebx,%eax
f011a5e9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a5ee:	39 c1                	cmp    %eax,%ecx
f011a5f0:	74 17                	je     f011a609 <test_kmalloc_bestfit1+0x11a>
f011a5f2:	83 ec 04             	sub    $0x4,%esp
f011a5f5:	68 14 bb 13 f0       	push   $0xf013bb14
f011a5fa:	68 98 01 00 00       	push   $0x198
f011a5ff:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a604:	e8 fc 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a609:	e8 ba 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a60e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a611:	74 17                	je     f011a62a <test_kmalloc_bestfit1+0x13b>
f011a613:	83 ec 04             	sub    $0x4,%esp
f011a616:	68 14 b7 13 f0       	push   $0xf013b714
f011a61b:	68 99 01 00 00       	push   $0x199
f011a620:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a625:	e8 db 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a62a:	e8 82 29 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a62f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a632:	29 c2                	sub    %eax,%edx
f011a634:	89 d0                	mov    %edx,%eax
f011a636:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a63b:	74 17                	je     f011a654 <test_kmalloc_bestfit1+0x165>
f011a63d:	83 ec 04             	sub    $0x4,%esp
f011a640:	68 44 bb 13 f0       	push   $0xf013bb44
f011a645:	68 9a 01 00 00       	push   $0x19a
f011a64a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a64f:	e8 b1 5b fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a654:	e8 58 29 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a659:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a65c:	e8 67 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a661:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a664:	83 ec 0c             	sub    $0xc,%esp
f011a667:	68 00 fc 2f 00       	push   $0x2ffc00
f011a66c:	e8 1b d5 fe ff       	call   f0107b8c <kmalloc>
f011a671:	83 c4 10             	add    $0x10,%esp
f011a674:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a67a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a680:	89 c1                	mov    %eax,%ecx
f011a682:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a689:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a68c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a691:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a694:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a697:	ba 00 00 00 00       	mov    $0x0,%edx
f011a69c:	f7 75 d4             	divl   -0x2c(%ebp)
f011a69f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a6a2:	29 d0                	sub    %edx,%eax
f011a6a4:	89 c3                	mov    %eax,%ebx
f011a6a6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a6ad:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a6b2:	0f b6 d0             	movzbl %al,%edx
f011a6b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a6b8:	01 d0                	add    %edx,%eax
f011a6ba:	48                   	dec    %eax
f011a6bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a6be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a6c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6c6:	f7 75 cc             	divl   -0x34(%ebp)
f011a6c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a6cc:	29 d0                	sub    %edx,%eax
f011a6ce:	01 c3                	add    %eax,%ebx
f011a6d0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a6d7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a6dc:	0f b6 c0             	movzbl %al,%eax
f011a6df:	c1 e0 04             	shl    $0x4,%eax
f011a6e2:	89 c2                	mov    %eax,%edx
f011a6e4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a6e7:	01 d0                	add    %edx,%eax
f011a6e9:	48                   	dec    %eax
f011a6ea:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a6ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a6f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6f5:	f7 75 c4             	divl   -0x3c(%ebp)
f011a6f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a6fb:	29 d0                	sub    %edx,%eax
f011a6fd:	01 d8                	add    %ebx,%eax
f011a6ff:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a704:	39 c1                	cmp    %eax,%ecx
f011a706:	74 17                	je     f011a71f <test_kmalloc_bestfit1+0x230>
f011a708:	83 ec 04             	sub    $0x4,%esp
f011a70b:	68 14 bb 13 f0       	push   $0xf013bb14
f011a710:	68 a0 01 00 00       	push   $0x1a0
f011a715:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a71a:	e8 e6 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a71f:	e8 a4 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a724:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a727:	74 17                	je     f011a740 <test_kmalloc_bestfit1+0x251>
f011a729:	83 ec 04             	sub    $0x4,%esp
f011a72c:	68 14 b7 13 f0       	push   $0xf013b714
f011a731:	68 a1 01 00 00       	push   $0x1a1
f011a736:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a73b:	e8 c5 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a740:	e8 6c 28 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a745:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a748:	29 c2                	sub    %eax,%edx
f011a74a:	89 d0                	mov    %edx,%eax
f011a74c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a751:	74 17                	je     f011a76a <test_kmalloc_bestfit1+0x27b>
f011a753:	83 ec 04             	sub    $0x4,%esp
f011a756:	68 44 bb 13 f0       	push   $0xf013bb44
f011a75b:	68 a2 01 00 00       	push   $0x1a2
f011a760:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a765:	e8 9b 5a fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a76a:	e8 42 28 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a76f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a772:	e8 51 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a777:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a77a:	83 ec 0c             	sub    $0xc,%esp
f011a77d:	68 00 fc 1f 00       	push   $0x1ffc00
f011a782:	e8 05 d4 fe ff       	call   f0107b8c <kmalloc>
f011a787:	83 c4 10             	add    $0x10,%esp
f011a78a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a790:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a796:	89 c1                	mov    %eax,%ecx
f011a798:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a79f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a7a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7a7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a7aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a7ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7b2:	f7 75 bc             	divl   -0x44(%ebp)
f011a7b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a7b8:	29 d0                	sub    %edx,%eax
f011a7ba:	89 c3                	mov    %eax,%ebx
f011a7bc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a7c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a7c8:	0f b6 d0             	movzbl %al,%edx
f011a7cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a7ce:	01 d0                	add    %edx,%eax
f011a7d0:	48                   	dec    %eax
f011a7d1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a7d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a7d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7dc:	f7 75 b4             	divl   -0x4c(%ebp)
f011a7df:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a7e2:	29 d0                	sub    %edx,%eax
f011a7e4:	01 c3                	add    %eax,%ebx
f011a7e6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a7ed:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a7f2:	0f b6 c0             	movzbl %al,%eax
f011a7f5:	c1 e0 04             	shl    $0x4,%eax
f011a7f8:	89 c2                	mov    %eax,%edx
f011a7fa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a7fd:	01 d0                	add    %edx,%eax
f011a7ff:	48                   	dec    %eax
f011a800:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a803:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a806:	ba 00 00 00 00       	mov    $0x0,%edx
f011a80b:	f7 75 ac             	divl   -0x54(%ebp)
f011a80e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a811:	29 d0                	sub    %edx,%eax
f011a813:	01 d8                	add    %ebx,%eax
f011a815:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a81a:	39 c1                	cmp    %eax,%ecx
f011a81c:	74 17                	je     f011a835 <test_kmalloc_bestfit1+0x346>
f011a81e:	83 ec 04             	sub    $0x4,%esp
f011a821:	68 14 bb 13 f0       	push   $0xf013bb14
f011a826:	68 a8 01 00 00       	push   $0x1a8
f011a82b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a830:	e8 d0 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a835:	e8 8e 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a83a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a83d:	74 17                	je     f011a856 <test_kmalloc_bestfit1+0x367>
f011a83f:	83 ec 04             	sub    $0x4,%esp
f011a842:	68 14 b7 13 f0       	push   $0xf013b714
f011a847:	68 a9 01 00 00       	push   $0x1a9
f011a84c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a851:	e8 af 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a856:	e8 56 27 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a85b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a85e:	29 c2                	sub    %eax,%edx
f011a860:	89 d0                	mov    %edx,%eax
f011a862:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a867:	74 17                	je     f011a880 <test_kmalloc_bestfit1+0x391>
f011a869:	83 ec 04             	sub    $0x4,%esp
f011a86c:	68 44 bb 13 f0       	push   $0xf013bb44
f011a871:	68 aa 01 00 00       	push   $0x1aa
f011a876:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a87b:	e8 85 59 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a880:	e8 2c 27 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a885:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a888:	e8 3b 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a88d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a890:	83 ec 0c             	sub    $0xc,%esp
f011a893:	68 00 fc 1f 00       	push   $0x1ffc00
f011a898:	e8 ef d2 fe ff       	call   f0107b8c <kmalloc>
f011a89d:	83 c4 10             	add    $0x10,%esp
f011a8a0:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a8a6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a8ac:	89 c1                	mov    %eax,%ecx
f011a8ae:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a8b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a8b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8bd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a8c0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a8c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8c8:	f7 75 a4             	divl   -0x5c(%ebp)
f011a8cb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a8ce:	29 d0                	sub    %edx,%eax
f011a8d0:	89 c3                	mov    %eax,%ebx
f011a8d2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a8d9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a8de:	0f b6 d0             	movzbl %al,%edx
f011a8e1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a8e4:	01 d0                	add    %edx,%eax
f011a8e6:	48                   	dec    %eax
f011a8e7:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a8ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a8ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8f2:	f7 75 9c             	divl   -0x64(%ebp)
f011a8f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a8f8:	29 d0                	sub    %edx,%eax
f011a8fa:	01 c3                	add    %eax,%ebx
f011a8fc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a903:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a908:	0f b6 c0             	movzbl %al,%eax
f011a90b:	c1 e0 04             	shl    $0x4,%eax
f011a90e:	89 c2                	mov    %eax,%edx
f011a910:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a913:	01 d0                	add    %edx,%eax
f011a915:	48                   	dec    %eax
f011a916:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a919:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a91c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a921:	f7 75 94             	divl   -0x6c(%ebp)
f011a924:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a927:	29 d0                	sub    %edx,%eax
f011a929:	01 d8                	add    %ebx,%eax
f011a92b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a930:	39 c1                	cmp    %eax,%ecx
f011a932:	74 17                	je     f011a94b <test_kmalloc_bestfit1+0x45c>
f011a934:	83 ec 04             	sub    $0x4,%esp
f011a937:	68 14 bb 13 f0       	push   $0xf013bb14
f011a93c:	68 b0 01 00 00       	push   $0x1b0
f011a941:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a946:	e8 ba 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a94b:	e8 78 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a950:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a953:	74 17                	je     f011a96c <test_kmalloc_bestfit1+0x47d>
f011a955:	83 ec 04             	sub    $0x4,%esp
f011a958:	68 14 b7 13 f0       	push   $0xf013b714
f011a95d:	68 b1 01 00 00       	push   $0x1b1
f011a962:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a967:	e8 99 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a96c:	e8 40 26 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a971:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a974:	29 c2                	sub    %eax,%edx
f011a976:	89 d0                	mov    %edx,%eax
f011a978:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a97d:	74 17                	je     f011a996 <test_kmalloc_bestfit1+0x4a7>
f011a97f:	83 ec 04             	sub    $0x4,%esp
f011a982:	68 44 bb 13 f0       	push   $0xf013bb44
f011a987:	68 b2 01 00 00       	push   $0x1b2
f011a98c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011a991:	e8 6f 58 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a996:	e8 16 26 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011a99b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a99e:	e8 25 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a9a6:	83 ec 0c             	sub    $0xc,%esp
f011a9a9:	68 00 fc 0f 00       	push   $0xffc00
f011a9ae:	e8 d9 d1 fe ff       	call   f0107b8c <kmalloc>
f011a9b3:	83 c4 10             	add    $0x10,%esp
f011a9b6:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a9bc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a9c2:	89 c1                	mov    %eax,%ecx
f011a9c4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a9cb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a9ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9d3:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a9d6:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a9d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9de:	f7 75 8c             	divl   -0x74(%ebp)
f011a9e1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a9e4:	29 d0                	sub    %edx,%eax
f011a9e6:	89 c3                	mov    %eax,%ebx
f011a9e8:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a9ef:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011a9f4:	0f b6 d0             	movzbl %al,%edx
f011a9f7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a9fa:	01 d0                	add    %edx,%eax
f011a9fc:	48                   	dec    %eax
f011a9fd:	89 45 80             	mov    %eax,-0x80(%ebp)
f011aa00:	8b 45 80             	mov    -0x80(%ebp),%eax
f011aa03:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa08:	f7 75 84             	divl   -0x7c(%ebp)
f011aa0b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011aa0e:	29 d0                	sub    %edx,%eax
f011aa10:	01 c3                	add    %eax,%ebx
f011aa12:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011aa19:	10 00 00 
f011aa1c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011aa21:	0f b6 c0             	movzbl %al,%eax
f011aa24:	c1 e0 04             	shl    $0x4,%eax
f011aa27:	89 c2                	mov    %eax,%edx
f011aa29:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011aa2f:	01 d0                	add    %edx,%eax
f011aa31:	48                   	dec    %eax
f011aa32:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011aa38:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aa3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa43:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011aa49:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aa4f:	29 d0                	sub    %edx,%eax
f011aa51:	01 d8                	add    %ebx,%eax
f011aa53:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011aa58:	39 c1                	cmp    %eax,%ecx
f011aa5a:	74 17                	je     f011aa73 <test_kmalloc_bestfit1+0x584>
f011aa5c:	83 ec 04             	sub    $0x4,%esp
f011aa5f:	68 14 bb 13 f0       	push   $0xf013bb14
f011aa64:	68 b8 01 00 00       	push   $0x1b8
f011aa69:	68 fa b6 13 f0       	push   $0xf013b6fa
f011aa6e:	e8 92 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa73:	e8 50 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aa78:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa7b:	74 17                	je     f011aa94 <test_kmalloc_bestfit1+0x5a5>
f011aa7d:	83 ec 04             	sub    $0x4,%esp
f011aa80:	68 14 b7 13 f0       	push   $0xf013b714
f011aa85:	68 b9 01 00 00       	push   $0x1b9
f011aa8a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011aa8f:	e8 71 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011aa94:	e8 18 25 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011aa99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa9c:	29 c2                	sub    %eax,%edx
f011aa9e:	89 d0                	mov    %edx,%eax
f011aaa0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aaa5:	74 17                	je     f011aabe <test_kmalloc_bestfit1+0x5cf>
f011aaa7:	83 ec 04             	sub    $0x4,%esp
f011aaaa:	68 44 bb 13 f0       	push   $0xf013bb44
f011aaaf:	68 ba 01 00 00       	push   $0x1ba
f011aab4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011aab9:	e8 47 57 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011aabe:	e8 ee 24 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011aac3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aac6:	e8 fd 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aacb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011aace:	83 ec 0c             	sub    $0xc,%esp
f011aad1:	68 00 fc 0f 00       	push   $0xffc00
f011aad6:	e8 b1 d0 fe ff       	call   f0107b8c <kmalloc>
f011aadb:	83 c4 10             	add    $0x10,%esp
f011aade:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011aae4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011aaea:	89 c1                	mov    %eax,%ecx
f011aaec:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011aaf3:	10 00 00 
f011aaf6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aafc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab01:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ab07:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ab0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab12:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ab18:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ab1e:	29 d0                	sub    %edx,%eax
f011ab20:	89 c3                	mov    %eax,%ebx
f011ab22:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ab29:	10 00 00 
f011ab2c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ab31:	0f b6 d0             	movzbl %al,%edx
f011ab34:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ab3a:	01 d0                	add    %edx,%eax
f011ab3c:	48                   	dec    %eax
f011ab3d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ab43:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ab49:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab4e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ab54:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ab5a:	29 d0                	sub    %edx,%eax
f011ab5c:	01 c3                	add    %eax,%ebx
f011ab5e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ab65:	10 00 00 
f011ab68:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ab6d:	0f b6 c0             	movzbl %al,%eax
f011ab70:	c1 e0 04             	shl    $0x4,%eax
f011ab73:	89 c2                	mov    %eax,%edx
f011ab75:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ab7b:	01 d0                	add    %edx,%eax
f011ab7d:	48                   	dec    %eax
f011ab7e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ab84:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ab8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab8f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ab95:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ab9b:	29 d0                	sub    %edx,%eax
f011ab9d:	01 d8                	add    %ebx,%eax
f011ab9f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aba4:	39 c1                	cmp    %eax,%ecx
f011aba6:	74 17                	je     f011abbf <test_kmalloc_bestfit1+0x6d0>
f011aba8:	83 ec 04             	sub    $0x4,%esp
f011abab:	68 14 bb 13 f0       	push   $0xf013bb14
f011abb0:	68 c0 01 00 00       	push   $0x1c0
f011abb5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011abba:	e8 46 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abbf:	e8 04 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011abc4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abc7:	74 17                	je     f011abe0 <test_kmalloc_bestfit1+0x6f1>
f011abc9:	83 ec 04             	sub    $0x4,%esp
f011abcc:	68 14 b7 13 f0       	push   $0xf013b714
f011abd1:	68 c1 01 00 00       	push   $0x1c1
f011abd6:	68 fa b6 13 f0       	push   $0xf013b6fa
f011abdb:	e8 25 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011abe0:	e8 cc 23 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011abe5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abe8:	29 c2                	sub    %eax,%edx
f011abea:	89 d0                	mov    %edx,%eax
f011abec:	3d 00 01 00 00       	cmp    $0x100,%eax
f011abf1:	74 17                	je     f011ac0a <test_kmalloc_bestfit1+0x71b>
f011abf3:	83 ec 04             	sub    $0x4,%esp
f011abf6:	68 44 bb 13 f0       	push   $0xf013bb44
f011abfb:	68 c2 01 00 00       	push   $0x1c2
f011ac00:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ac05:	e8 fb 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac0a:	e8 a2 23 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ac0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac12:	e8 b1 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac17:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ac1a:	83 ec 0c             	sub    $0xc,%esp
f011ac1d:	68 00 fc 0f 00       	push   $0xffc00
f011ac22:	e8 65 cf fe ff       	call   f0107b8c <kmalloc>
f011ac27:	83 c4 10             	add    $0x10,%esp
f011ac2a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ac30:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ac36:	89 c1                	mov    %eax,%ecx
f011ac38:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ac3f:	10 00 00 
f011ac42:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ac48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac4d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ac53:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ac59:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac5e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ac64:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ac6a:	29 d0                	sub    %edx,%eax
f011ac6c:	89 c3                	mov    %eax,%ebx
f011ac6e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ac75:	10 00 00 
f011ac78:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ac7d:	0f b6 d0             	movzbl %al,%edx
f011ac80:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ac86:	01 d0                	add    %edx,%eax
f011ac88:	48                   	dec    %eax
f011ac89:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ac8f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ac95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac9a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011aca0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aca6:	29 d0                	sub    %edx,%eax
f011aca8:	01 c3                	add    %eax,%ebx
f011acaa:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011acb1:	10 00 00 
f011acb4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011acb9:	0f b6 c0             	movzbl %al,%eax
f011acbc:	c1 e0 04             	shl    $0x4,%eax
f011acbf:	89 c2                	mov    %eax,%edx
f011acc1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011acc7:	01 d0                	add    %edx,%eax
f011acc9:	48                   	dec    %eax
f011acca:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011acd0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011acd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011acdb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ace1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ace7:	29 d0                	sub    %edx,%eax
f011ace9:	01 d8                	add    %ebx,%eax
f011aceb:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011acf0:	39 c1                	cmp    %eax,%ecx
f011acf2:	74 17                	je     f011ad0b <test_kmalloc_bestfit1+0x81c>
f011acf4:	83 ec 04             	sub    $0x4,%esp
f011acf7:	68 14 bb 13 f0       	push   $0xf013bb14
f011acfc:	68 c8 01 00 00       	push   $0x1c8
f011ad01:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ad06:	e8 fa 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad0b:	e8 b8 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad10:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad13:	74 17                	je     f011ad2c <test_kmalloc_bestfit1+0x83d>
f011ad15:	83 ec 04             	sub    $0x4,%esp
f011ad18:	68 14 b7 13 f0       	push   $0xf013b714
f011ad1d:	68 c9 01 00 00       	push   $0x1c9
f011ad22:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ad27:	e8 d9 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ad2c:	e8 80 22 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ad31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad34:	29 c2                	sub    %eax,%edx
f011ad36:	89 d0                	mov    %edx,%eax
f011ad38:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ad3d:	74 17                	je     f011ad56 <test_kmalloc_bestfit1+0x867>
f011ad3f:	83 ec 04             	sub    $0x4,%esp
f011ad42:	68 44 bb 13 f0       	push   $0xf013bb44
f011ad47:	68 ca 01 00 00       	push   $0x1ca
f011ad4c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ad51:	e8 af 54 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad56:	e8 56 22 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ad5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad5e:	e8 65 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad63:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011ad66:	83 ec 0c             	sub    $0xc,%esp
f011ad69:	68 00 fc 0f 00       	push   $0xffc00
f011ad6e:	e8 19 ce fe ff       	call   f0107b8c <kmalloc>
f011ad73:	83 c4 10             	add    $0x10,%esp
f011ad76:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011ad7c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ad82:	89 c1                	mov    %eax,%ecx
f011ad84:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ad8b:	10 00 00 
f011ad8e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ad94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad99:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ad9f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ada5:	ba 00 00 00 00       	mov    $0x0,%edx
f011adaa:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011adb0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011adb6:	29 d0                	sub    %edx,%eax
f011adb8:	89 c3                	mov    %eax,%ebx
f011adba:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011adc1:	10 00 00 
f011adc4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011adc9:	0f b6 d0             	movzbl %al,%edx
f011adcc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011add2:	01 d0                	add    %edx,%eax
f011add4:	48                   	dec    %eax
f011add5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011addb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ade1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ade6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011adec:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011adf2:	29 d0                	sub    %edx,%eax
f011adf4:	01 c3                	add    %eax,%ebx
f011adf6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011adfd:	10 00 00 
f011ae00:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ae05:	0f b6 c0             	movzbl %al,%eax
f011ae08:	c1 e0 04             	shl    $0x4,%eax
f011ae0b:	89 c2                	mov    %eax,%edx
f011ae0d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ae13:	01 d0                	add    %edx,%eax
f011ae15:	48                   	dec    %eax
f011ae16:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ae1c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ae22:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae27:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ae2d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ae33:	29 d0                	sub    %edx,%eax
f011ae35:	01 d8                	add    %ebx,%eax
f011ae37:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ae3c:	39 c1                	cmp    %eax,%ecx
f011ae3e:	74 17                	je     f011ae57 <test_kmalloc_bestfit1+0x968>
f011ae40:	83 ec 04             	sub    $0x4,%esp
f011ae43:	68 14 bb 13 f0       	push   $0xf013bb14
f011ae48:	68 d0 01 00 00       	push   $0x1d0
f011ae4d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ae52:	e8 ae 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae57:	e8 6c 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ae5c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae5f:	74 17                	je     f011ae78 <test_kmalloc_bestfit1+0x989>
f011ae61:	83 ec 04             	sub    $0x4,%esp
f011ae64:	68 14 b7 13 f0       	push   $0xf013b714
f011ae69:	68 d1 01 00 00       	push   $0x1d1
f011ae6e:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ae73:	e8 8d 53 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae78:	e8 34 21 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ae7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae80:	29 c2                	sub    %eax,%edx
f011ae82:	89 d0                	mov    %edx,%eax
f011ae84:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae89:	74 17                	je     f011aea2 <test_kmalloc_bestfit1+0x9b3>
f011ae8b:	83 ec 04             	sub    $0x4,%esp
f011ae8e:	68 44 bb 13 f0       	push   $0xf013bb44
f011ae93:	68 d2 01 00 00       	push   $0x1d2
f011ae98:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ae9d:	e8 63 53 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aea2:	e8 0a 21 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011aea7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aeaa:	e8 19 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aeaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011aeb2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011aeb8:	83 ec 0c             	sub    $0xc,%esp
f011aebb:	50                   	push   %eax
f011aebc:	e8 96 cd fe ff       	call   f0107c57 <kfree>
f011aec1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aec4:	e8 ff 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aec9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aecc:	74 17                	je     f011aee5 <test_kmalloc_bestfit1+0x9f6>
f011aece:	83 ec 04             	sub    $0x4,%esp
f011aed1:	68 14 b7 13 f0       	push   $0xf013b714
f011aed6:	68 db 01 00 00       	push   $0x1db
f011aedb:	68 fa b6 13 f0       	push   $0xf013b6fa
f011aee0:	e8 20 53 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011aee5:	e8 c7 20 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011aeea:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aeed:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aef2:	74 17                	je     f011af0b <test_kmalloc_bestfit1+0xa1c>
f011aef4:	83 ec 04             	sub    $0x4,%esp
f011aef7:	68 57 bb 13 f0       	push   $0xf013bb57
f011aefc:	68 dc 01 00 00       	push   $0x1dc
f011af01:	68 fa b6 13 f0       	push   $0xf013b6fa
f011af06:	e8 fa 52 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af0b:	e8 a1 20 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011af10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af13:	e8 b0 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af18:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011af1b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011af21:	83 ec 0c             	sub    $0xc,%esp
f011af24:	50                   	push   %eax
f011af25:	e8 2d cd fe ff       	call   f0107c57 <kfree>
f011af2a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af2d:	e8 96 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af35:	74 17                	je     f011af4e <test_kmalloc_bestfit1+0xa5f>
f011af37:	83 ec 04             	sub    $0x4,%esp
f011af3a:	68 14 b7 13 f0       	push   $0xf013b714
f011af3f:	68 e2 01 00 00       	push   $0x1e2
f011af44:	68 fa b6 13 f0       	push   $0xf013b6fa
f011af49:	e8 b7 52 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011af4e:	e8 5e 20 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011af53:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af56:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af5b:	74 17                	je     f011af74 <test_kmalloc_bestfit1+0xa85>
f011af5d:	83 ec 04             	sub    $0x4,%esp
f011af60:	68 57 bb 13 f0       	push   $0xf013bb57
f011af65:	68 e3 01 00 00       	push   $0x1e3
f011af6a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011af6f:	e8 91 52 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af74:	e8 38 20 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011af79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af7c:	e8 47 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af81:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011af84:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011af8a:	83 ec 0c             	sub    $0xc,%esp
f011af8d:	50                   	push   %eax
f011af8e:	e8 c4 cc fe ff       	call   f0107c57 <kfree>
f011af93:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af96:	e8 2d 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af9e:	74 17                	je     f011afb7 <test_kmalloc_bestfit1+0xac8>
f011afa0:	83 ec 04             	sub    $0x4,%esp
f011afa3:	68 14 b7 13 f0       	push   $0xf013b714
f011afa8:	68 e9 01 00 00       	push   $0x1e9
f011afad:	68 fa b6 13 f0       	push   $0xf013b6fa
f011afb2:	e8 4e 52 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011afb7:	e8 f5 1f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011afbc:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011afbf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011afc4:	74 17                	je     f011afdd <test_kmalloc_bestfit1+0xaee>
f011afc6:	83 ec 04             	sub    $0x4,%esp
f011afc9:	68 57 bb 13 f0       	push   $0xf013bb57
f011afce:	68 ea 01 00 00       	push   $0x1ea
f011afd3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011afd8:	e8 28 52 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011afdd:	e8 cf 1f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011afe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afe5:	e8 de 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011afea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011afed:	83 ec 0c             	sub    $0xc,%esp
f011aff0:	68 00 00 08 00       	push   $0x80000
f011aff5:	e8 92 cb fe ff       	call   f0107b8c <kmalloc>
f011affa:	83 c4 10             	add    $0x10,%esp
f011affd:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b003:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b009:	89 c1                	mov    %eax,%ecx
f011b00b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b012:	10 00 00 
f011b015:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b01b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b020:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b026:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b02c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b031:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b037:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b03d:	29 d0                	sub    %edx,%eax
f011b03f:	89 c3                	mov    %eax,%ebx
f011b041:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b048:	10 00 00 
f011b04b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b050:	0f b6 d0             	movzbl %al,%edx
f011b053:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b059:	01 d0                	add    %edx,%eax
f011b05b:	48                   	dec    %eax
f011b05c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b062:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b068:	ba 00 00 00 00       	mov    $0x0,%edx
f011b06d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b073:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b079:	29 d0                	sub    %edx,%eax
f011b07b:	01 c3                	add    %eax,%ebx
f011b07d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b084:	10 00 00 
f011b087:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b08c:	0f b6 c0             	movzbl %al,%eax
f011b08f:	c1 e0 04             	shl    $0x4,%eax
f011b092:	89 c2                	mov    %eax,%edx
f011b094:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b09a:	01 d0                	add    %edx,%eax
f011b09c:	48                   	dec    %eax
f011b09d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b0a3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b0a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0ae:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b0b4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b0ba:	29 d0                	sub    %edx,%eax
f011b0bc:	01 d8                	add    %ebx,%eax
f011b0be:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b0c3:	39 c1                	cmp    %eax,%ecx
f011b0c5:	74 17                	je     f011b0de <test_kmalloc_bestfit1+0xbef>
f011b0c7:	83 ec 04             	sub    $0x4,%esp
f011b0ca:	68 14 bb 13 f0       	push   $0xf013bb14
f011b0cf:	68 f3 01 00 00       	push   $0x1f3
f011b0d4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b0d9:	e8 27 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0de:	e8 e5 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b0e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0e6:	74 17                	je     f011b0ff <test_kmalloc_bestfit1+0xc10>
f011b0e8:	83 ec 04             	sub    $0x4,%esp
f011b0eb:	68 14 b7 13 f0       	push   $0xf013b714
f011b0f0:	68 f4 01 00 00       	push   $0x1f4
f011b0f5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b0fa:	e8 06 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b0ff:	e8 ad 1e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b104:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b107:	29 c2                	sub    %eax,%edx
f011b109:	89 d0                	mov    %edx,%eax
f011b10b:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b110:	74 17                	je     f011b129 <test_kmalloc_bestfit1+0xc3a>
f011b112:	83 ec 04             	sub    $0x4,%esp
f011b115:	68 44 bb 13 f0       	push   $0xf013bb44
f011b11a:	68 f5 01 00 00       	push   $0x1f5
f011b11f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b124:	e8 dc 50 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b129:	e8 83 1e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b12e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b131:	e8 92 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b136:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b139:	83 ec 0c             	sub    $0xc,%esp
f011b13c:	68 00 fc 0f 00       	push   $0xffc00
f011b141:	e8 46 ca fe ff       	call   f0107b8c <kmalloc>
f011b146:	83 c4 10             	add    $0x10,%esp
f011b149:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b14f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b155:	89 c1                	mov    %eax,%ecx
f011b157:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b15e:	10 00 00 
f011b161:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b167:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b16c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b172:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b178:	ba 00 00 00 00       	mov    $0x0,%edx
f011b17d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b183:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b189:	29 d0                	sub    %edx,%eax
f011b18b:	89 c3                	mov    %eax,%ebx
f011b18d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b194:	10 00 00 
f011b197:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b19c:	0f b6 d0             	movzbl %al,%edx
f011b19f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b1a5:	01 d0                	add    %edx,%eax
f011b1a7:	48                   	dec    %eax
f011b1a8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b1ae:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b1b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1b9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b1bf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b1c5:	29 d0                	sub    %edx,%eax
f011b1c7:	01 c3                	add    %eax,%ebx
f011b1c9:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b1d0:	10 00 00 
f011b1d3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b1d8:	0f b6 c0             	movzbl %al,%eax
f011b1db:	c1 e0 04             	shl    $0x4,%eax
f011b1de:	89 c2                	mov    %eax,%edx
f011b1e0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b1e6:	01 d0                	add    %edx,%eax
f011b1e8:	48                   	dec    %eax
f011b1e9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b1ef:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b1f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1fa:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b200:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b206:	29 d0                	sub    %edx,%eax
f011b208:	01 d8                	add    %ebx,%eax
f011b20a:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b20f:	39 c1                	cmp    %eax,%ecx
f011b211:	74 17                	je     f011b22a <test_kmalloc_bestfit1+0xd3b>
f011b213:	83 ec 04             	sub    $0x4,%esp
f011b216:	68 14 bb 13 f0       	push   $0xf013bb14
f011b21b:	68 fb 01 00 00       	push   $0x1fb
f011b220:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b225:	e8 db 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b22a:	e8 99 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b22f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b232:	74 17                	je     f011b24b <test_kmalloc_bestfit1+0xd5c>
f011b234:	83 ec 04             	sub    $0x4,%esp
f011b237:	68 14 b7 13 f0       	push   $0xf013b714
f011b23c:	68 fc 01 00 00       	push   $0x1fc
f011b241:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b246:	e8 ba 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b24b:	e8 61 1d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b250:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b253:	29 c2                	sub    %eax,%edx
f011b255:	89 d0                	mov    %edx,%eax
f011b257:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b25c:	74 17                	je     f011b275 <test_kmalloc_bestfit1+0xd86>
f011b25e:	83 ec 04             	sub    $0x4,%esp
f011b261:	68 44 bb 13 f0       	push   $0xf013bb44
f011b266:	68 fd 01 00 00       	push   $0x1fd
f011b26b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b270:	e8 90 4f fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b275:	e8 37 1d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b27a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b27d:	e8 46 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b282:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b285:	83 ec 0c             	sub    $0xc,%esp
f011b288:	68 00 fc 03 00       	push   $0x3fc00
f011b28d:	e8 fa c8 fe ff       	call   f0107b8c <kmalloc>
f011b292:	83 c4 10             	add    $0x10,%esp
f011b295:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b29b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b2a1:	89 c1                	mov    %eax,%ecx
f011b2a3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b2aa:	10 00 00 
f011b2ad:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b2b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2b8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b2be:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b2c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2c9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b2cf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b2d5:	29 d0                	sub    %edx,%eax
f011b2d7:	89 c3                	mov    %eax,%ebx
f011b2d9:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b2e0:	10 00 00 
f011b2e3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b2e8:	0f b6 d0             	movzbl %al,%edx
f011b2eb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b2f1:	01 d0                	add    %edx,%eax
f011b2f3:	48                   	dec    %eax
f011b2f4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b2fa:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b300:	ba 00 00 00 00       	mov    $0x0,%edx
f011b305:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b30b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b311:	29 d0                	sub    %edx,%eax
f011b313:	01 c3                	add    %eax,%ebx
f011b315:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b31c:	10 00 00 
f011b31f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b324:	0f b6 c0             	movzbl %al,%eax
f011b327:	c1 e0 04             	shl    $0x4,%eax
f011b32a:	89 c2                	mov    %eax,%edx
f011b32c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b332:	01 d0                	add    %edx,%eax
f011b334:	48                   	dec    %eax
f011b335:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b33b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b341:	ba 00 00 00 00       	mov    $0x0,%edx
f011b346:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b34c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b352:	29 d0                	sub    %edx,%eax
f011b354:	01 d8                	add    %ebx,%eax
f011b356:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b35b:	39 c1                	cmp    %eax,%ecx
f011b35d:	74 17                	je     f011b376 <test_kmalloc_bestfit1+0xe87>
f011b35f:	83 ec 04             	sub    $0x4,%esp
f011b362:	68 14 bb 13 f0       	push   $0xf013bb14
f011b367:	68 03 02 00 00       	push   $0x203
f011b36c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b371:	e8 8f 4e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b376:	e8 4d 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b37b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b37e:	74 17                	je     f011b397 <test_kmalloc_bestfit1+0xea8>
f011b380:	83 ec 04             	sub    $0x4,%esp
f011b383:	68 14 b7 13 f0       	push   $0xf013b714
f011b388:	68 04 02 00 00       	push   $0x204
f011b38d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b392:	e8 6e 4e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b397:	e8 15 1c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b39c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b39f:	29 c2                	sub    %eax,%edx
f011b3a1:	89 d0                	mov    %edx,%eax
f011b3a3:	83 f8 40             	cmp    $0x40,%eax
f011b3a6:	74 17                	je     f011b3bf <test_kmalloc_bestfit1+0xed0>
f011b3a8:	83 ec 04             	sub    $0x4,%esp
f011b3ab:	68 44 bb 13 f0       	push   $0xf013bb44
f011b3b0:	68 05 02 00 00       	push   $0x205
f011b3b5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b3ba:	e8 46 4e fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b3bf:	e8 ed 1b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b3c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3c7:	e8 fc 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b3cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b3cf:	83 ec 0c             	sub    $0xc,%esp
f011b3d2:	68 00 fc 3f 00       	push   $0x3ffc00
f011b3d7:	e8 b0 c7 fe ff       	call   f0107b8c <kmalloc>
f011b3dc:	83 c4 10             	add    $0x10,%esp
f011b3df:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b3e5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b3eb:	89 c1                	mov    %eax,%ecx
f011b3ed:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b3f4:	10 00 00 
f011b3f7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b3fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b402:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b408:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b40e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b413:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b419:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b41f:	29 d0                	sub    %edx,%eax
f011b421:	89 c3                	mov    %eax,%ebx
f011b423:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b42a:	10 00 00 
f011b42d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b432:	0f b6 d0             	movzbl %al,%edx
f011b435:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b43b:	01 d0                	add    %edx,%eax
f011b43d:	48                   	dec    %eax
f011b43e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b444:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b44a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b44f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b455:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b45b:	29 d0                	sub    %edx,%eax
f011b45d:	01 c3                	add    %eax,%ebx
f011b45f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b466:	10 00 00 
f011b469:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b46e:	0f b6 c0             	movzbl %al,%eax
f011b471:	c1 e0 04             	shl    $0x4,%eax
f011b474:	89 c2                	mov    %eax,%edx
f011b476:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b47c:	01 d0                	add    %edx,%eax
f011b47e:	48                   	dec    %eax
f011b47f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b485:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b48b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b490:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b496:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b49c:	29 d0                	sub    %edx,%eax
f011b49e:	01 d8                	add    %ebx,%eax
f011b4a0:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b4a5:	39 c1                	cmp    %eax,%ecx
f011b4a7:	74 17                	je     f011b4c0 <test_kmalloc_bestfit1+0xfd1>
f011b4a9:	83 ec 04             	sub    $0x4,%esp
f011b4ac:	68 14 bb 13 f0       	push   $0xf013bb14
f011b4b1:	68 0b 02 00 00       	push   $0x20b
f011b4b6:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b4bb:	e8 45 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4c0:	e8 03 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4c5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4c8:	74 17                	je     f011b4e1 <test_kmalloc_bestfit1+0xff2>
f011b4ca:	83 ec 04             	sub    $0x4,%esp
f011b4cd:	68 14 b7 13 f0       	push   $0xf013b714
f011b4d2:	68 0c 02 00 00       	push   $0x20c
f011b4d7:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b4dc:	e8 24 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b4e1:	e8 cb 1a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b4e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b4e9:	29 c2                	sub    %eax,%edx
f011b4eb:	89 d0                	mov    %edx,%eax
f011b4ed:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b4f2:	74 17                	je     f011b50b <test_kmalloc_bestfit1+0x101c>
f011b4f4:	83 ec 04             	sub    $0x4,%esp
f011b4f7:	68 44 bb 13 f0       	push   $0xf013bb44
f011b4fc:	68 0d 02 00 00       	push   $0x20d
f011b501:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b506:	e8 fa 4c fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b50b:	e8 a1 1a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b510:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b513:	e8 b0 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b518:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b51b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b521:	83 ec 0c             	sub    $0xc,%esp
f011b524:	50                   	push   %eax
f011b525:	e8 2d c7 fe ff       	call   f0107c57 <kfree>
f011b52a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b52d:	e8 96 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b532:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b535:	74 17                	je     f011b54e <test_kmalloc_bestfit1+0x105f>
f011b537:	83 ec 04             	sub    $0x4,%esp
f011b53a:	68 14 b7 13 f0       	push   $0xf013b714
f011b53f:	68 16 02 00 00       	push   $0x216
f011b544:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b549:	e8 b7 4c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b54e:	e8 5e 1a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b553:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b556:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b55b:	74 17                	je     f011b574 <test_kmalloc_bestfit1+0x1085>
f011b55d:	83 ec 04             	sub    $0x4,%esp
f011b560:	68 57 bb 13 f0       	push   $0xf013bb57
f011b565:	68 17 02 00 00       	push   $0x217
f011b56a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b56f:	e8 91 4c fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b574:	e8 38 1a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b579:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b57c:	e8 47 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b581:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b584:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b58a:	83 ec 0c             	sub    $0xc,%esp
f011b58d:	50                   	push   %eax
f011b58e:	e8 c4 c6 fe ff       	call   f0107c57 <kfree>
f011b593:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b596:	e8 2d 88 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b59b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b59e:	74 17                	je     f011b5b7 <test_kmalloc_bestfit1+0x10c8>
f011b5a0:	83 ec 04             	sub    $0x4,%esp
f011b5a3:	68 14 b7 13 f0       	push   $0xf013b714
f011b5a8:	68 1d 02 00 00       	push   $0x21d
f011b5ad:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b5b2:	e8 4e 4c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b5b7:	e8 f5 19 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b5bc:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b5bf:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b5c4:	74 17                	je     f011b5dd <test_kmalloc_bestfit1+0x10ee>
f011b5c6:	83 ec 04             	sub    $0x4,%esp
f011b5c9:	68 57 bb 13 f0       	push   $0xf013bb57
f011b5ce:	68 1e 02 00 00       	push   $0x21e
f011b5d3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b5d8:	e8 28 4c fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b5dd:	e8 cf 19 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b5e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5e5:	e8 de 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b5ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b5ed:	83 ec 0c             	sub    $0xc,%esp
f011b5f0:	68 00 fc 1f 00       	push   $0x1ffc00
f011b5f5:	e8 92 c5 fe ff       	call   f0107b8c <kmalloc>
f011b5fa:	83 c4 10             	add    $0x10,%esp
f011b5fd:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b603:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b609:	89 c1                	mov    %eax,%ecx
f011b60b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b612:	10 00 00 
f011b615:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b61b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b620:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b626:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b62c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b631:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b637:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b63d:	29 d0                	sub    %edx,%eax
f011b63f:	89 c3                	mov    %eax,%ebx
f011b641:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b648:	10 00 00 
f011b64b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b650:	0f b6 d0             	movzbl %al,%edx
f011b653:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b659:	01 d0                	add    %edx,%eax
f011b65b:	48                   	dec    %eax
f011b65c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b662:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b668:	ba 00 00 00 00       	mov    $0x0,%edx
f011b66d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b673:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b679:	29 d0                	sub    %edx,%eax
f011b67b:	01 c3                	add    %eax,%ebx
f011b67d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b684:	10 00 00 
f011b687:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b68c:	0f b6 c0             	movzbl %al,%eax
f011b68f:	c1 e0 04             	shl    $0x4,%eax
f011b692:	89 c2                	mov    %eax,%edx
f011b694:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b69a:	01 d0                	add    %edx,%eax
f011b69c:	48                   	dec    %eax
f011b69d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b6a3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b6a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ae:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b6b4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b6ba:	29 d0                	sub    %edx,%eax
f011b6bc:	01 d8                	add    %ebx,%eax
f011b6be:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b6c3:	39 c1                	cmp    %eax,%ecx
f011b6c5:	74 17                	je     f011b6de <test_kmalloc_bestfit1+0x11ef>
f011b6c7:	83 ec 04             	sub    $0x4,%esp
f011b6ca:	68 14 bb 13 f0       	push   $0xf013bb14
f011b6cf:	68 27 02 00 00       	push   $0x227
f011b6d4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b6d9:	e8 27 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6de:	e8 e5 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6e6:	74 17                	je     f011b6ff <test_kmalloc_bestfit1+0x1210>
f011b6e8:	83 ec 04             	sub    $0x4,%esp
f011b6eb:	68 14 b7 13 f0       	push   $0xf013b714
f011b6f0:	68 28 02 00 00       	push   $0x228
f011b6f5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b6fa:	e8 06 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b6ff:	e8 ad 18 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b704:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b707:	29 c2                	sub    %eax,%edx
f011b709:	89 d0                	mov    %edx,%eax
f011b70b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b710:	74 17                	je     f011b729 <test_kmalloc_bestfit1+0x123a>
f011b712:	83 ec 04             	sub    $0x4,%esp
f011b715:	68 44 bb 13 f0       	push   $0xf013bb44
f011b71a:	68 29 02 00 00       	push   $0x229
f011b71f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b724:	e8 dc 4a fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b729:	83 ec 0c             	sub    $0xc,%esp
f011b72c:	68 64 bb 13 f0       	push   $0xf013bb64
f011b731:	e8 d8 55 fe ff       	call   f0100d0e <cprintf>
f011b736:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b739:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b73e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b741:	5b                   	pop    %ebx
f011b742:	5f                   	pop    %edi
f011b743:	5d                   	pop    %ebp
f011b744:	c3                   	ret    

f011b745 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b745:	55                   	push   %ebp
f011b746:	89 e5                	mov    %esp,%ebp
f011b748:	57                   	push   %edi
f011b749:	53                   	push   %ebx
f011b74a:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b750:	83 ec 0c             	sub    $0xc,%esp
f011b753:	68 3c b6 13 f0       	push   $0xf013b63c
f011b758:	e8 b1 55 fe ff       	call   f0100d0e <cprintf>
f011b75d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b760:	83 ec 0c             	sub    $0xc,%esp
f011b763:	68 6c b6 13 f0       	push   $0xf013b66c
f011b768:	e8 a1 55 fe ff       	call   f0100d0e <cprintf>
f011b76d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b770:	83 ec 0c             	sub    $0xc,%esp
f011b773:	68 3c b6 13 f0       	push   $0xf013b63c
f011b778:	e8 91 55 fe ff       	call   f0100d0e <cprintf>
f011b77d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b780:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b786:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b78b:	b8 00 00 00 00       	mov    $0x0,%eax
f011b790:	89 d7                	mov    %edx,%edi
f011b792:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b794:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b79b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b79e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b7a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7ae:	f7 75 f4             	divl   -0xc(%ebp)
f011b7b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b7b4:	29 d0                	sub    %edx,%eax
f011b7b6:	89 c1                	mov    %eax,%ecx
f011b7b8:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b7bf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b7c4:	0f b6 d0             	movzbl %al,%edx
f011b7c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b7ca:	01 d0                	add    %edx,%eax
f011b7cc:	48                   	dec    %eax
f011b7cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b7d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b7d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7d8:	f7 75 ec             	divl   -0x14(%ebp)
f011b7db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b7de:	29 d0                	sub    %edx,%eax
f011b7e0:	01 c1                	add    %eax,%ecx
f011b7e2:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b7e9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b7ee:	0f b6 c0             	movzbl %al,%eax
f011b7f1:	c1 e0 04             	shl    $0x4,%eax
f011b7f4:	89 c2                	mov    %eax,%edx
f011b7f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b7f9:	01 d0                	add    %edx,%eax
f011b7fb:	48                   	dec    %eax
f011b7fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b7ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b802:	ba 00 00 00 00       	mov    $0x0,%edx
f011b807:	f7 75 e4             	divl   -0x1c(%ebp)
f011b80a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b80d:	29 d0                	sub    %edx,%eax
f011b80f:	01 c8                	add    %ecx,%eax
f011b811:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b816:	29 c2                	sub    %eax,%edx
f011b818:	89 d0                	mov    %edx,%eax
f011b81a:	83 ec 0c             	sub    $0xc,%esp
f011b81d:	50                   	push   %eax
f011b81e:	e8 69 c3 fe ff       	call   f0107b8c <kmalloc>
f011b823:	83 c4 10             	add    $0x10,%esp
f011b826:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b82c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b832:	85 c0                	test   %eax,%eax
f011b834:	74 17                	je     f011b84d <test_kmalloc_bestfit2+0x108>
f011b836:	83 ec 04             	sub    $0x4,%esp
f011b839:	68 ac bb 13 f0       	push   $0xf013bbac
f011b83e:	68 3f 02 00 00       	push   $0x23f
f011b843:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b848:	e8 b8 49 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b84d:	e8 5f 17 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b852:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b855:	e8 6e 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b85a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b85d:	83 ec 0c             	sub    $0xc,%esp
f011b860:	68 00 fc 1f 00       	push   $0x1ffc00
f011b865:	e8 22 c3 fe ff       	call   f0107b8c <kmalloc>
f011b86a:	83 c4 10             	add    $0x10,%esp
f011b86d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b873:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b879:	89 c1                	mov    %eax,%ecx
f011b87b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b882:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b885:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b88a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b88d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b890:	ba 00 00 00 00       	mov    $0x0,%edx
f011b895:	f7 75 d4             	divl   -0x2c(%ebp)
f011b898:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b89b:	29 d0                	sub    %edx,%eax
f011b89d:	89 c3                	mov    %eax,%ebx
f011b89f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b8a6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b8ab:	0f b6 d0             	movzbl %al,%edx
f011b8ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b8b1:	01 d0                	add    %edx,%eax
f011b8b3:	48                   	dec    %eax
f011b8b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b8b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8bf:	f7 75 cc             	divl   -0x34(%ebp)
f011b8c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8c5:	29 d0                	sub    %edx,%eax
f011b8c7:	01 c3                	add    %eax,%ebx
f011b8c9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b8d0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b8d5:	0f b6 c0             	movzbl %al,%eax
f011b8d8:	c1 e0 04             	shl    $0x4,%eax
f011b8db:	89 c2                	mov    %eax,%edx
f011b8dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b8e0:	01 d0                	add    %edx,%eax
f011b8e2:	48                   	dec    %eax
f011b8e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b8e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8ee:	f7 75 c4             	divl   -0x3c(%ebp)
f011b8f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8f4:	29 d0                	sub    %edx,%eax
f011b8f6:	01 d8                	add    %ebx,%eax
f011b8f8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b8fd:	39 c1                	cmp    %eax,%ecx
f011b8ff:	74 17                	je     f011b918 <test_kmalloc_bestfit2+0x1d3>
f011b901:	83 ec 04             	sub    $0x4,%esp
f011b904:	68 14 bb 13 f0       	push   $0xf013bb14
f011b909:	68 49 02 00 00       	push   $0x249
f011b90e:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b913:	e8 ed 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b918:	e8 ab 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b91d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b920:	74 17                	je     f011b939 <test_kmalloc_bestfit2+0x1f4>
f011b922:	83 ec 04             	sub    $0x4,%esp
f011b925:	68 14 b7 13 f0       	push   $0xf013b714
f011b92a:	68 4a 02 00 00       	push   $0x24a
f011b92f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b934:	e8 cc 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b939:	e8 73 16 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b93e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b941:	29 c2                	sub    %eax,%edx
f011b943:	89 d0                	mov    %edx,%eax
f011b945:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b94a:	74 17                	je     f011b963 <test_kmalloc_bestfit2+0x21e>
f011b94c:	83 ec 04             	sub    $0x4,%esp
f011b94f:	68 44 bb 13 f0       	push   $0xf013bb44
f011b954:	68 4b 02 00 00       	push   $0x24b
f011b959:	68 fa b6 13 f0       	push   $0xf013b6fa
f011b95e:	e8 a2 48 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b963:	e8 49 16 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011b968:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b96b:	e8 58 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b970:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b973:	83 ec 0c             	sub    $0xc,%esp
f011b976:	68 00 fc 1f 00       	push   $0x1ffc00
f011b97b:	e8 0c c2 fe ff       	call   f0107b8c <kmalloc>
f011b980:	83 c4 10             	add    $0x10,%esp
f011b983:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b989:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b98f:	89 c1                	mov    %eax,%ecx
f011b991:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b998:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b99b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b9a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b9a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9ab:	f7 75 bc             	divl   -0x44(%ebp)
f011b9ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b9b1:	29 d0                	sub    %edx,%eax
f011b9b3:	89 c3                	mov    %eax,%ebx
f011b9b5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b9bc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b9c1:	0f b6 d0             	movzbl %al,%edx
f011b9c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b9c7:	01 d0                	add    %edx,%eax
f011b9c9:	48                   	dec    %eax
f011b9ca:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b9cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b9d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9d5:	f7 75 b4             	divl   -0x4c(%ebp)
f011b9d8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b9db:	29 d0                	sub    %edx,%eax
f011b9dd:	01 c3                	add    %eax,%ebx
f011b9df:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b9e6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011b9eb:	0f b6 c0             	movzbl %al,%eax
f011b9ee:	c1 e0 04             	shl    $0x4,%eax
f011b9f1:	89 c2                	mov    %eax,%edx
f011b9f3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b9f6:	01 d0                	add    %edx,%eax
f011b9f8:	48                   	dec    %eax
f011b9f9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b9fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b9ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba04:	f7 75 ac             	divl   -0x54(%ebp)
f011ba07:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba0a:	29 d0                	sub    %edx,%eax
f011ba0c:	01 d8                	add    %ebx,%eax
f011ba0e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011ba13:	39 c1                	cmp    %eax,%ecx
f011ba15:	74 17                	je     f011ba2e <test_kmalloc_bestfit2+0x2e9>
f011ba17:	83 ec 04             	sub    $0x4,%esp
f011ba1a:	68 14 bb 13 f0       	push   $0xf013bb14
f011ba1f:	68 51 02 00 00       	push   $0x251
f011ba24:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ba29:	e8 d7 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba2e:	e8 95 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba33:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba36:	74 17                	je     f011ba4f <test_kmalloc_bestfit2+0x30a>
f011ba38:	83 ec 04             	sub    $0x4,%esp
f011ba3b:	68 14 b7 13 f0       	push   $0xf013b714
f011ba40:	68 52 02 00 00       	push   $0x252
f011ba45:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ba4a:	e8 b6 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011ba4f:	e8 5d 15 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ba54:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba57:	29 c2                	sub    %eax,%edx
f011ba59:	89 d0                	mov    %edx,%eax
f011ba5b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba60:	74 17                	je     f011ba79 <test_kmalloc_bestfit2+0x334>
f011ba62:	83 ec 04             	sub    $0x4,%esp
f011ba65:	68 44 bb 13 f0       	push   $0xf013bb44
f011ba6a:	68 53 02 00 00       	push   $0x253
f011ba6f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ba74:	e8 8c 47 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba79:	e8 33 15 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ba7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba81:	e8 42 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba86:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011ba89:	83 ec 0c             	sub    $0xc,%esp
f011ba8c:	68 00 08 00 00       	push   $0x800
f011ba91:	e8 f6 c0 fe ff       	call   f0107b8c <kmalloc>
f011ba96:	83 c4 10             	add    $0x10,%esp
f011ba99:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ba9f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011baa5:	89 c1                	mov    %eax,%ecx
f011baa7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011baae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bab1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bab6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bab9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011babc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bac1:	f7 75 a4             	divl   -0x5c(%ebp)
f011bac4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bac7:	29 d0                	sub    %edx,%eax
f011bac9:	89 c3                	mov    %eax,%ebx
f011bacb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bad2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bad7:	0f b6 d0             	movzbl %al,%edx
f011bada:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011badd:	01 d0                	add    %edx,%eax
f011badf:	48                   	dec    %eax
f011bae0:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bae3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bae6:	ba 00 00 00 00       	mov    $0x0,%edx
f011baeb:	f7 75 9c             	divl   -0x64(%ebp)
f011baee:	8b 45 98             	mov    -0x68(%ebp),%eax
f011baf1:	29 d0                	sub    %edx,%eax
f011baf3:	01 c3                	add    %eax,%ebx
f011baf5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bafc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bb01:	0f b6 c0             	movzbl %al,%eax
f011bb04:	c1 e0 04             	shl    $0x4,%eax
f011bb07:	89 c2                	mov    %eax,%edx
f011bb09:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bb0c:	01 d0                	add    %edx,%eax
f011bb0e:	48                   	dec    %eax
f011bb0f:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bb12:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bb15:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb1a:	f7 75 94             	divl   -0x6c(%ebp)
f011bb1d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bb20:	29 d0                	sub    %edx,%eax
f011bb22:	01 d8                	add    %ebx,%eax
f011bb24:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bb29:	39 c1                	cmp    %eax,%ecx
f011bb2b:	74 17                	je     f011bb44 <test_kmalloc_bestfit2+0x3ff>
f011bb2d:	83 ec 04             	sub    $0x4,%esp
f011bb30:	68 14 bb 13 f0       	push   $0xf013bb14
f011bb35:	68 59 02 00 00       	push   $0x259
f011bb3a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bb3f:	e8 c1 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb44:	e8 7f 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb49:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb4c:	74 17                	je     f011bb65 <test_kmalloc_bestfit2+0x420>
f011bb4e:	83 ec 04             	sub    $0x4,%esp
f011bb51:	68 14 b7 13 f0       	push   $0xf013b714
f011bb56:	68 5a 02 00 00       	push   $0x25a
f011bb5b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bb60:	e8 a0 46 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bb65:	e8 47 14 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bb6a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb6d:	29 c2                	sub    %eax,%edx
f011bb6f:	89 d0                	mov    %edx,%eax
f011bb71:	83 f8 01             	cmp    $0x1,%eax
f011bb74:	74 17                	je     f011bb8d <test_kmalloc_bestfit2+0x448>
f011bb76:	83 ec 04             	sub    $0x4,%esp
f011bb79:	68 44 bb 13 f0       	push   $0xf013bb44
f011bb7e:	68 5b 02 00 00       	push   $0x25b
f011bb83:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bb88:	e8 78 46 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bb8d:	e8 1f 14 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bb92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb95:	e8 2e 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb9a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bb9d:	83 ec 0c             	sub    $0xc,%esp
f011bba0:	68 00 08 00 00       	push   $0x800
f011bba5:	e8 e2 bf fe ff       	call   f0107b8c <kmalloc>
f011bbaa:	83 c4 10             	add    $0x10,%esp
f011bbad:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bbb3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bbb9:	89 c1                	mov    %eax,%ecx
f011bbbb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bbc2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bbc5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbca:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bbcd:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bbd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbd5:	f7 75 8c             	divl   -0x74(%ebp)
f011bbd8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bbdb:	29 d0                	sub    %edx,%eax
f011bbdd:	89 c3                	mov    %eax,%ebx
f011bbdf:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bbe6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bbeb:	0f b6 d0             	movzbl %al,%edx
f011bbee:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bbf1:	01 d0                	add    %edx,%eax
f011bbf3:	48                   	dec    %eax
f011bbf4:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bbf7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bbfa:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbff:	f7 75 84             	divl   -0x7c(%ebp)
f011bc02:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bc05:	29 d0                	sub    %edx,%eax
f011bc07:	01 c3                	add    %eax,%ebx
f011bc09:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bc10:	10 00 00 
f011bc13:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bc18:	0f b6 c0             	movzbl %al,%eax
f011bc1b:	c1 e0 04             	shl    $0x4,%eax
f011bc1e:	89 c2                	mov    %eax,%edx
f011bc20:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bc26:	01 d0                	add    %edx,%eax
f011bc28:	48                   	dec    %eax
f011bc29:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bc2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc3a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bc40:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bc46:	29 d0                	sub    %edx,%eax
f011bc48:	01 d8                	add    %ebx,%eax
f011bc4a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bc4f:	39 c1                	cmp    %eax,%ecx
f011bc51:	74 17                	je     f011bc6a <test_kmalloc_bestfit2+0x525>
f011bc53:	83 ec 04             	sub    $0x4,%esp
f011bc56:	68 14 bb 13 f0       	push   $0xf013bb14
f011bc5b:	68 61 02 00 00       	push   $0x261
f011bc60:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bc65:	e8 9b 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc6a:	e8 59 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc6f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc72:	74 17                	je     f011bc8b <test_kmalloc_bestfit2+0x546>
f011bc74:	83 ec 04             	sub    $0x4,%esp
f011bc77:	68 14 b7 13 f0       	push   $0xf013b714
f011bc7c:	68 62 02 00 00       	push   $0x262
f011bc81:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bc86:	e8 7a 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bc8b:	e8 21 13 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bc90:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc93:	29 c2                	sub    %eax,%edx
f011bc95:	89 d0                	mov    %edx,%eax
f011bc97:	83 f8 01             	cmp    $0x1,%eax
f011bc9a:	74 17                	je     f011bcb3 <test_kmalloc_bestfit2+0x56e>
f011bc9c:	83 ec 04             	sub    $0x4,%esp
f011bc9f:	68 44 bb 13 f0       	push   $0xf013bb44
f011bca4:	68 63 02 00 00       	push   $0x263
f011bca9:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bcae:	e8 52 45 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bcb3:	e8 f9 12 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bcb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcbb:	e8 08 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcc0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011bcc3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bcc9:	83 ec 0c             	sub    $0xc,%esp
f011bccc:	50                   	push   %eax
f011bccd:	e8 85 bf fe ff       	call   f0107c57 <kfree>
f011bcd2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcd5:	e8 ee 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcda:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcdd:	74 17                	je     f011bcf6 <test_kmalloc_bestfit2+0x5b1>
f011bcdf:	83 ec 04             	sub    $0x4,%esp
f011bce2:	68 14 b7 13 f0       	push   $0xf013b714
f011bce7:	68 69 02 00 00       	push   $0x269
f011bcec:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bcf1:	e8 0f 45 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bcf6:	e8 b6 12 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bcfb:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bcfe:	83 f8 01             	cmp    $0x1,%eax
f011bd01:	74 17                	je     f011bd1a <test_kmalloc_bestfit2+0x5d5>
f011bd03:	83 ec 04             	sub    $0x4,%esp
f011bd06:	68 44 bb 13 f0       	push   $0xf013bb44
f011bd0b:	68 6a 02 00 00       	push   $0x26a
f011bd10:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bd15:	e8 eb 44 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bd1a:	e8 92 12 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bd1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd22:	e8 a1 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bd27:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bd2a:	83 ec 0c             	sub    $0xc,%esp
f011bd2d:	68 00 1c 00 00       	push   $0x1c00
f011bd32:	e8 55 be fe ff       	call   f0107b8c <kmalloc>
f011bd37:	83 c4 10             	add    $0x10,%esp
f011bd3a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bd40:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bd46:	89 c1                	mov    %eax,%ecx
f011bd48:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bd4f:	10 00 00 
f011bd52:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bd58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd5d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bd63:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bd69:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd6e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bd74:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bd7a:	29 d0                	sub    %edx,%eax
f011bd7c:	89 c3                	mov    %eax,%ebx
f011bd7e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bd85:	10 00 00 
f011bd88:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bd8d:	0f b6 d0             	movzbl %al,%edx
f011bd90:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bd96:	01 d0                	add    %edx,%eax
f011bd98:	48                   	dec    %eax
f011bd99:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bd9f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bda5:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdaa:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bdb0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bdb6:	29 d0                	sub    %edx,%eax
f011bdb8:	01 c3                	add    %eax,%ebx
f011bdba:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bdc1:	10 00 00 
f011bdc4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bdc9:	0f b6 c0             	movzbl %al,%eax
f011bdcc:	c1 e0 04             	shl    $0x4,%eax
f011bdcf:	89 c2                	mov    %eax,%edx
f011bdd1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bdd7:	01 d0                	add    %edx,%eax
f011bdd9:	48                   	dec    %eax
f011bdda:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bde0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bde6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdeb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bdf1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bdf7:	29 d0                	sub    %edx,%eax
f011bdf9:	01 d8                	add    %ebx,%eax
f011bdfb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011be00:	39 c1                	cmp    %eax,%ecx
f011be02:	74 17                	je     f011be1b <test_kmalloc_bestfit2+0x6d6>
f011be04:	83 ec 04             	sub    $0x4,%esp
f011be07:	68 14 bb 13 f0       	push   $0xf013bb14
f011be0c:	68 70 02 00 00       	push   $0x270
f011be11:	68 fa b6 13 f0       	push   $0xf013b6fa
f011be16:	e8 ea 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be1b:	e8 a8 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be20:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be23:	74 17                	je     f011be3c <test_kmalloc_bestfit2+0x6f7>
f011be25:	83 ec 04             	sub    $0x4,%esp
f011be28:	68 14 b7 13 f0       	push   $0xf013b714
f011be2d:	68 71 02 00 00       	push   $0x271
f011be32:	68 fa b6 13 f0       	push   $0xf013b6fa
f011be37:	e8 c9 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011be3c:	e8 70 11 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011be41:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be44:	29 c2                	sub    %eax,%edx
f011be46:	89 d0                	mov    %edx,%eax
f011be48:	83 f8 02             	cmp    $0x2,%eax
f011be4b:	74 17                	je     f011be64 <test_kmalloc_bestfit2+0x71f>
f011be4d:	83 ec 04             	sub    $0x4,%esp
f011be50:	68 44 bb 13 f0       	push   $0xf013bb44
f011be55:	68 72 02 00 00       	push   $0x272
f011be5a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011be5f:	e8 a1 43 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011be64:	e8 48 11 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011be69:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be6c:	e8 57 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be71:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011be74:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011be7a:	83 ec 0c             	sub    $0xc,%esp
f011be7d:	50                   	push   %eax
f011be7e:	e8 d4 bd fe ff       	call   f0107c57 <kfree>
f011be83:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be86:	e8 3d 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be8b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be8e:	74 17                	je     f011bea7 <test_kmalloc_bestfit2+0x762>
f011be90:	83 ec 04             	sub    $0x4,%esp
f011be93:	68 14 b7 13 f0       	push   $0xf013b714
f011be98:	68 78 02 00 00       	push   $0x278
f011be9d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bea2:	e8 5e 43 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bea7:	e8 05 11 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011beac:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011beaf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011beb4:	74 17                	je     f011becd <test_kmalloc_bestfit2+0x788>
f011beb6:	83 ec 04             	sub    $0x4,%esp
f011beb9:	68 c8 b9 13 f0       	push   $0xf013b9c8
f011bebe:	68 79 02 00 00       	push   $0x279
f011bec3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bec8:	e8 38 43 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011becd:	e8 df 10 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bed2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bed5:	e8 ee 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011beda:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bedd:	83 ec 0c             	sub    $0xc,%esp
f011bee0:	68 00 fc 2f 00       	push   $0x2ffc00
f011bee5:	e8 a2 bc fe ff       	call   f0107b8c <kmalloc>
f011beea:	83 c4 10             	add    $0x10,%esp
f011beed:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bef3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bef9:	89 c1                	mov    %eax,%ecx
f011befb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bf02:	10 00 00 
f011bf05:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011bf0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf10:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bf16:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bf1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf21:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bf27:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bf2d:	29 d0                	sub    %edx,%eax
f011bf2f:	89 c3                	mov    %eax,%ebx
f011bf31:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bf38:	10 00 00 
f011bf3b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bf40:	0f b6 d0             	movzbl %al,%edx
f011bf43:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bf49:	01 d0                	add    %edx,%eax
f011bf4b:	48                   	dec    %eax
f011bf4c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bf52:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bf58:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf5d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bf63:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bf69:	29 d0                	sub    %edx,%eax
f011bf6b:	01 c3                	add    %eax,%ebx
f011bf6d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bf74:	10 00 00 
f011bf77:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011bf7c:	0f b6 c0             	movzbl %al,%eax
f011bf7f:	c1 e0 04             	shl    $0x4,%eax
f011bf82:	89 c2                	mov    %eax,%edx
f011bf84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011bf8a:	01 d0                	add    %edx,%eax
f011bf8c:	48                   	dec    %eax
f011bf8d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011bf93:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bf99:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf9e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bfa4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bfaa:	29 d0                	sub    %edx,%eax
f011bfac:	01 d8                	add    %ebx,%eax
f011bfae:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bfb3:	39 c1                	cmp    %eax,%ecx
f011bfb5:	74 17                	je     f011bfce <test_kmalloc_bestfit2+0x889>
f011bfb7:	83 ec 04             	sub    $0x4,%esp
f011bfba:	68 14 bb 13 f0       	push   $0xf013bb14
f011bfbf:	68 7f 02 00 00       	push   $0x27f
f011bfc4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bfc9:	e8 37 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfce:	e8 f5 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bfd3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bfd6:	74 17                	je     f011bfef <test_kmalloc_bestfit2+0x8aa>
f011bfd8:	83 ec 04             	sub    $0x4,%esp
f011bfdb:	68 14 b7 13 f0       	push   $0xf013b714
f011bfe0:	68 80 02 00 00       	push   $0x280
f011bfe5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011bfea:	e8 16 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bfef:	e8 bd 0f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011bff4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bff7:	29 c2                	sub    %eax,%edx
f011bff9:	89 d0                	mov    %edx,%eax
f011bffb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c000:	74 17                	je     f011c019 <test_kmalloc_bestfit2+0x8d4>
f011c002:	83 ec 04             	sub    $0x4,%esp
f011c005:	68 44 bb 13 f0       	push   $0xf013bb44
f011c00a:	68 81 02 00 00       	push   $0x281
f011c00f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c014:	e8 ec 41 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c019:	e8 93 0f ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c01e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c021:	e8 a2 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c026:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c029:	83 ec 0c             	sub    $0xc,%esp
f011c02c:	68 00 18 20 00       	push   $0x201800
f011c031:	e8 56 bb fe ff       	call   f0107b8c <kmalloc>
f011c036:	83 c4 10             	add    $0x10,%esp
f011c039:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c03f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c045:	89 c1                	mov    %eax,%ecx
f011c047:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c04e:	10 00 00 
f011c051:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c057:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c05c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c062:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c068:	ba 00 00 00 00       	mov    $0x0,%edx
f011c06d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c073:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c079:	29 d0                	sub    %edx,%eax
f011c07b:	89 c3                	mov    %eax,%ebx
f011c07d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c084:	10 00 00 
f011c087:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c08c:	0f b6 d0             	movzbl %al,%edx
f011c08f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c095:	01 d0                	add    %edx,%eax
f011c097:	48                   	dec    %eax
f011c098:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c09e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c0a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0a9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c0af:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c0b5:	29 d0                	sub    %edx,%eax
f011c0b7:	01 c3                	add    %eax,%ebx
f011c0b9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c0c0:	10 00 00 
f011c0c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c0c8:	0f b6 c0             	movzbl %al,%eax
f011c0cb:	c1 e0 04             	shl    $0x4,%eax
f011c0ce:	89 c2                	mov    %eax,%edx
f011c0d0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c0d6:	01 d0                	add    %edx,%eax
f011c0d8:	48                   	dec    %eax
f011c0d9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c0df:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c0e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0ea:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c0f0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c0f6:	29 d0                	sub    %edx,%eax
f011c0f8:	01 d8                	add    %ebx,%eax
f011c0fa:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c0ff:	39 c1                	cmp    %eax,%ecx
f011c101:	74 17                	je     f011c11a <test_kmalloc_bestfit2+0x9d5>
f011c103:	83 ec 04             	sub    $0x4,%esp
f011c106:	68 14 bb 13 f0       	push   $0xf013bb14
f011c10b:	68 87 02 00 00       	push   $0x287
f011c110:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c115:	e8 eb 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c11a:	e8 a9 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c11f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c122:	74 17                	je     f011c13b <test_kmalloc_bestfit2+0x9f6>
f011c124:	83 ec 04             	sub    $0x4,%esp
f011c127:	68 14 b7 13 f0       	push   $0xf013b714
f011c12c:	68 88 02 00 00       	push   $0x288
f011c131:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c136:	e8 ca 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c13b:	e8 71 0e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c140:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c143:	29 c2                	sub    %eax,%edx
f011c145:	89 d0                	mov    %edx,%eax
f011c147:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c14c:	74 17                	je     f011c165 <test_kmalloc_bestfit2+0xa20>
f011c14e:	83 ec 04             	sub    $0x4,%esp
f011c151:	68 44 bb 13 f0       	push   $0xf013bb44
f011c156:	68 89 02 00 00       	push   $0x289
f011c15b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c160:	e8 a0 40 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c165:	e8 47 0e ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c16a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c16d:	e8 56 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c172:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c175:	83 ec 0c             	sub    $0xc,%esp
f011c178:	68 00 fc 4f 00       	push   $0x4ffc00
f011c17d:	e8 0a ba fe ff       	call   f0107b8c <kmalloc>
f011c182:	83 c4 10             	add    $0x10,%esp
f011c185:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c18b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c191:	89 c1                	mov    %eax,%ecx
f011c193:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c19a:	10 00 00 
f011c19d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c1a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c1a8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c1ae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c1b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1b9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c1bf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c1c5:	29 d0                	sub    %edx,%eax
f011c1c7:	89 c3                	mov    %eax,%ebx
f011c1c9:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c1d0:	10 00 00 
f011c1d3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c1d8:	0f b6 d0             	movzbl %al,%edx
f011c1db:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c1e1:	01 d0                	add    %edx,%eax
f011c1e3:	48                   	dec    %eax
f011c1e4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c1ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c1f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1f5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c1fb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c201:	29 d0                	sub    %edx,%eax
f011c203:	01 c3                	add    %eax,%ebx
f011c205:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c20c:	10 00 00 
f011c20f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c214:	0f b6 c0             	movzbl %al,%eax
f011c217:	c1 e0 04             	shl    $0x4,%eax
f011c21a:	89 c2                	mov    %eax,%edx
f011c21c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c222:	01 d0                	add    %edx,%eax
f011c224:	48                   	dec    %eax
f011c225:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c22b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c231:	ba 00 00 00 00       	mov    $0x0,%edx
f011c236:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c23c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c242:	29 d0                	sub    %edx,%eax
f011c244:	01 d8                	add    %ebx,%eax
f011c246:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c24b:	39 c1                	cmp    %eax,%ecx
f011c24d:	74 17                	je     f011c266 <test_kmalloc_bestfit2+0xb21>
f011c24f:	83 ec 04             	sub    $0x4,%esp
f011c252:	68 14 bb 13 f0       	push   $0xf013bb14
f011c257:	68 8f 02 00 00       	push   $0x28f
f011c25c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c261:	e8 9f 3f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c266:	e8 5d 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c26b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c26e:	74 17                	je     f011c287 <test_kmalloc_bestfit2+0xb42>
f011c270:	83 ec 04             	sub    $0x4,%esp
f011c273:	68 14 b7 13 f0       	push   $0xf013b714
f011c278:	68 90 02 00 00       	push   $0x290
f011c27d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c282:	e8 7e 3f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c287:	e8 25 0d ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c28c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c28f:	29 c2                	sub    %eax,%edx
f011c291:	89 d0                	mov    %edx,%eax
f011c293:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c298:	74 17                	je     f011c2b1 <test_kmalloc_bestfit2+0xb6c>
f011c29a:	83 ec 04             	sub    $0x4,%esp
f011c29d:	68 44 bb 13 f0       	push   $0xf013bb44
f011c2a2:	68 91 02 00 00       	push   $0x291
f011c2a7:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c2ac:	e8 54 3f fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c2b1:	e8 fb 0c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c2b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c2b9:	e8 0a 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c2be:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c2c1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c2c7:	83 ec 0c             	sub    $0xc,%esp
f011c2ca:	50                   	push   %eax
f011c2cb:	e8 87 b9 fe ff       	call   f0107c57 <kfree>
f011c2d0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2d3:	e8 f0 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c2d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c2db:	74 17                	je     f011c2f4 <test_kmalloc_bestfit2+0xbaf>
f011c2dd:	83 ec 04             	sub    $0x4,%esp
f011c2e0:	68 14 b7 13 f0       	push   $0xf013b714
f011c2e5:	68 97 02 00 00       	push   $0x297
f011c2ea:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c2ef:	e8 11 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c2f4:	e8 b8 0c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c2f9:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c2fc:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c301:	74 17                	je     f011c31a <test_kmalloc_bestfit2+0xbd5>
f011c303:	83 ec 04             	sub    $0x4,%esp
f011c306:	68 c8 b9 13 f0       	push   $0xf013b9c8
f011c30b:	68 98 02 00 00       	push   $0x298
f011c310:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c315:	e8 eb 3e fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c31a:	e8 92 0c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c31f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c322:	e8 a1 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c327:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c32a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c330:	83 ec 0c             	sub    $0xc,%esp
f011c333:	50                   	push   %eax
f011c334:	e8 1e b9 fe ff       	call   f0107c57 <kfree>
f011c339:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c33c:	e8 87 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c341:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c344:	74 17                	je     f011c35d <test_kmalloc_bestfit2+0xc18>
f011c346:	83 ec 04             	sub    $0x4,%esp
f011c349:	68 14 b7 13 f0       	push   $0xf013b714
f011c34e:	68 9e 02 00 00       	push   $0x29e
f011c353:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c358:	e8 a8 3e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c35d:	e8 4f 0c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c362:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c365:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c36a:	74 17                	je     f011c383 <test_kmalloc_bestfit2+0xc3e>
f011c36c:	83 ec 04             	sub    $0x4,%esp
f011c36f:	68 f4 bb 13 f0       	push   $0xf013bbf4
f011c374:	68 9f 02 00 00       	push   $0x29f
f011c379:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c37e:	e8 82 3e fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c383:	e8 29 0c ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c388:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c38b:	e8 38 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c390:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c393:	83 ec 0c             	sub    $0xc,%esp
f011c396:	68 00 fc 1f 00       	push   $0x1ffc00
f011c39b:	e8 ec b7 fe ff       	call   f0107b8c <kmalloc>
f011c3a0:	83 c4 10             	add    $0x10,%esp
f011c3a3:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3a9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c3af:	89 c1                	mov    %eax,%ecx
f011c3b1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c3b8:	10 00 00 
f011c3bb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c3c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3c6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c3cc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c3d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3d7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c3dd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c3e3:	29 d0                	sub    %edx,%eax
f011c3e5:	89 c3                	mov    %eax,%ebx
f011c3e7:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c3ee:	10 00 00 
f011c3f1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c3f6:	0f b6 d0             	movzbl %al,%edx
f011c3f9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c3ff:	01 d0                	add    %edx,%eax
f011c401:	48                   	dec    %eax
f011c402:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c408:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c40e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c413:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c419:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c41f:	29 d0                	sub    %edx,%eax
f011c421:	01 c3                	add    %eax,%ebx
f011c423:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c42a:	10 00 00 
f011c42d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c432:	0f b6 c0             	movzbl %al,%eax
f011c435:	c1 e0 04             	shl    $0x4,%eax
f011c438:	89 c2                	mov    %eax,%edx
f011c43a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c440:	01 d0                	add    %edx,%eax
f011c442:	48                   	dec    %eax
f011c443:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c449:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c44f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c454:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c45a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c460:	29 d0                	sub    %edx,%eax
f011c462:	01 d8                	add    %ebx,%eax
f011c464:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c469:	39 c1                	cmp    %eax,%ecx
f011c46b:	74 17                	je     f011c484 <test_kmalloc_bestfit2+0xd3f>
f011c46d:	83 ec 04             	sub    $0x4,%esp
f011c470:	68 14 bb 13 f0       	push   $0xf013bb14
f011c475:	68 a5 02 00 00       	push   $0x2a5
f011c47a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c47f:	e8 81 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c484:	e8 3f 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c489:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c48c:	74 17                	je     f011c4a5 <test_kmalloc_bestfit2+0xd60>
f011c48e:	83 ec 04             	sub    $0x4,%esp
f011c491:	68 14 b7 13 f0       	push   $0xf013b714
f011c496:	68 a6 02 00 00       	push   $0x2a6
f011c49b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c4a0:	e8 60 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c4a5:	e8 07 0b ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c4aa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c4ad:	29 c2                	sub    %eax,%edx
f011c4af:	89 d0                	mov    %edx,%eax
f011c4b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c4b6:	74 17                	je     f011c4cf <test_kmalloc_bestfit2+0xd8a>
f011c4b8:	83 ec 04             	sub    $0x4,%esp
f011c4bb:	68 32 bc 13 f0       	push   $0xf013bc32
f011c4c0:	68 a7 02 00 00       	push   $0x2a7
f011c4c5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c4ca:	e8 36 3d fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c4cf:	e8 dd 0a ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c4d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c4d7:	e8 ec 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c4dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c4df:	83 ec 0c             	sub    $0xc,%esp
f011c4e2:	68 00 18 00 00       	push   $0x1800
f011c4e7:	e8 a0 b6 fe ff       	call   f0107b8c <kmalloc>
f011c4ec:	83 c4 10             	add    $0x10,%esp
f011c4ef:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c4f5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c4fb:	89 c1                	mov    %eax,%ecx
f011c4fd:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c504:	10 00 00 
f011c507:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c50d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c512:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c518:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c51e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c523:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c529:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c52f:	29 d0                	sub    %edx,%eax
f011c531:	89 c3                	mov    %eax,%ebx
f011c533:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c53a:	10 00 00 
f011c53d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c542:	0f b6 d0             	movzbl %al,%edx
f011c545:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c54b:	01 d0                	add    %edx,%eax
f011c54d:	48                   	dec    %eax
f011c54e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c554:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c55a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c55f:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c565:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c56b:	29 d0                	sub    %edx,%eax
f011c56d:	01 c3                	add    %eax,%ebx
f011c56f:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c576:	10 00 00 
f011c579:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c57e:	0f b6 c0             	movzbl %al,%eax
f011c581:	c1 e0 04             	shl    $0x4,%eax
f011c584:	89 c2                	mov    %eax,%edx
f011c586:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c58c:	01 d0                	add    %edx,%eax
f011c58e:	48                   	dec    %eax
f011c58f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c595:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c59b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5a0:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c5a6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c5ac:	29 d0                	sub    %edx,%eax
f011c5ae:	01 d8                	add    %ebx,%eax
f011c5b0:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c5b5:	39 c1                	cmp    %eax,%ecx
f011c5b7:	74 17                	je     f011c5d0 <test_kmalloc_bestfit2+0xe8b>
f011c5b9:	83 ec 04             	sub    $0x4,%esp
f011c5bc:	68 14 bb 13 f0       	push   $0xf013bb14
f011c5c1:	68 ad 02 00 00       	push   $0x2ad
f011c5c6:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c5cb:	e8 35 3c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5d0:	e8 f3 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c5d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c5d8:	74 17                	je     f011c5f1 <test_kmalloc_bestfit2+0xeac>
f011c5da:	83 ec 04             	sub    $0x4,%esp
f011c5dd:	68 14 b7 13 f0       	push   $0xf013b714
f011c5e2:	68 ae 02 00 00       	push   $0x2ae
f011c5e7:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c5ec:	e8 14 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c5f1:	e8 bb 09 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c5f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c5f9:	29 c2                	sub    %eax,%edx
f011c5fb:	89 d0                	mov    %edx,%eax
f011c5fd:	83 f8 02             	cmp    $0x2,%eax
f011c600:	74 17                	je     f011c619 <test_kmalloc_bestfit2+0xed4>
f011c602:	83 ec 04             	sub    $0x4,%esp
f011c605:	68 32 bc 13 f0       	push   $0xf013bc32
f011c60a:	68 af 02 00 00       	push   $0x2af
f011c60f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c614:	e8 ec 3b fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c619:	e8 93 09 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c61e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c621:	e8 a2 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c626:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c629:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c62f:	83 ec 0c             	sub    $0xc,%esp
f011c632:	50                   	push   %eax
f011c633:	e8 1f b6 fe ff       	call   f0107c57 <kfree>
f011c638:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c63b:	e8 88 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c640:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c643:	74 17                	je     f011c65c <test_kmalloc_bestfit2+0xf17>
f011c645:	83 ec 04             	sub    $0x4,%esp
f011c648:	68 14 b7 13 f0       	push   $0xf013b714
f011c64d:	68 b5 02 00 00       	push   $0x2b5
f011c652:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c657:	e8 a9 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c65c:	e8 50 09 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c661:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c664:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c669:	74 17                	je     f011c682 <test_kmalloc_bestfit2+0xf3d>
f011c66b:	83 ec 04             	sub    $0x4,%esp
f011c66e:	68 f4 bb 13 f0       	push   $0xf013bbf4
f011c673:	68 b6 02 00 00       	push   $0x2b6
f011c678:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c67d:	e8 83 3b fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c682:	e8 2a 09 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c687:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c68a:	e8 39 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c68f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c692:	83 ec 0c             	sub    $0xc,%esp
f011c695:	68 00 fc 2f 00       	push   $0x2ffc00
f011c69a:	e8 ed b4 fe ff       	call   f0107b8c <kmalloc>
f011c69f:	83 c4 10             	add    $0x10,%esp
f011c6a2:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c6a8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c6ae:	89 c1                	mov    %eax,%ecx
f011c6b0:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c6b7:	10 00 00 
f011c6ba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c6c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c6c5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c6cb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c6d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6d6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c6dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c6e2:	29 d0                	sub    %edx,%eax
f011c6e4:	89 c3                	mov    %eax,%ebx
f011c6e6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c6ed:	10 00 00 
f011c6f0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c6f5:	0f b6 d0             	movzbl %al,%edx
f011c6f8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c6fe:	01 d0                	add    %edx,%eax
f011c700:	48                   	dec    %eax
f011c701:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c707:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c70d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c712:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c718:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c71e:	29 d0                	sub    %edx,%eax
f011c720:	01 c3                	add    %eax,%ebx
f011c722:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c729:	10 00 00 
f011c72c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c731:	0f b6 c0             	movzbl %al,%eax
f011c734:	c1 e0 04             	shl    $0x4,%eax
f011c737:	89 c2                	mov    %eax,%edx
f011c739:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c73f:	01 d0                	add    %edx,%eax
f011c741:	48                   	dec    %eax
f011c742:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c748:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c74e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c753:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c759:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c75f:	29 d0                	sub    %edx,%eax
f011c761:	01 d8                	add    %ebx,%eax
f011c763:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c768:	39 c1                	cmp    %eax,%ecx
f011c76a:	74 17                	je     f011c783 <test_kmalloc_bestfit2+0x103e>
f011c76c:	83 ec 04             	sub    $0x4,%esp
f011c76f:	68 14 bb 13 f0       	push   $0xf013bb14
f011c774:	68 bc 02 00 00       	push   $0x2bc
f011c779:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c77e:	e8 82 3a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c783:	e8 40 76 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c788:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c78b:	74 17                	je     f011c7a4 <test_kmalloc_bestfit2+0x105f>
f011c78d:	83 ec 04             	sub    $0x4,%esp
f011c790:	68 14 b7 13 f0       	push   $0xf013b714
f011c795:	68 bd 02 00 00       	push   $0x2bd
f011c79a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c79f:	e8 61 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c7a4:	e8 08 08 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c7a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c7ac:	29 c2                	sub    %eax,%edx
f011c7ae:	89 d0                	mov    %edx,%eax
f011c7b0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c7b5:	74 17                	je     f011c7ce <test_kmalloc_bestfit2+0x1089>
f011c7b7:	83 ec 04             	sub    $0x4,%esp
f011c7ba:	68 f4 bb 13 f0       	push   $0xf013bbf4
f011c7bf:	68 be 02 00 00       	push   $0x2be
f011c7c4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c7c9:	e8 37 3a fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7ce:	e8 de 07 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c7d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c7d6:	e8 ed 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c7db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c7de:	83 ec 0c             	sub    $0xc,%esp
f011c7e1:	68 00 fc 3f 00       	push   $0x3ffc00
f011c7e6:	e8 a1 b3 fe ff       	call   f0107b8c <kmalloc>
f011c7eb:	83 c4 10             	add    $0x10,%esp
f011c7ee:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c7f4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c7fa:	89 c1                	mov    %eax,%ecx
f011c7fc:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c803:	10 00 00 
f011c806:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c80c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c811:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c817:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c81d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c822:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c828:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c82e:	29 d0                	sub    %edx,%eax
f011c830:	89 c3                	mov    %eax,%ebx
f011c832:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c839:	10 00 00 
f011c83c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c841:	0f b6 d0             	movzbl %al,%edx
f011c844:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c84a:	01 d0                	add    %edx,%eax
f011c84c:	48                   	dec    %eax
f011c84d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c853:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c859:	ba 00 00 00 00       	mov    $0x0,%edx
f011c85e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c864:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c86a:	29 d0                	sub    %edx,%eax
f011c86c:	01 c3                	add    %eax,%ebx
f011c86e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c875:	10 00 00 
f011c878:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c87d:	0f b6 c0             	movzbl %al,%eax
f011c880:	c1 e0 04             	shl    $0x4,%eax
f011c883:	89 c2                	mov    %eax,%edx
f011c885:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c88b:	01 d0                	add    %edx,%eax
f011c88d:	48                   	dec    %eax
f011c88e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c894:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c89a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c89f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c8a5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c8ab:	29 d0                	sub    %edx,%eax
f011c8ad:	01 d8                	add    %ebx,%eax
f011c8af:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c8b4:	39 c1                	cmp    %eax,%ecx
f011c8b6:	74 17                	je     f011c8cf <test_kmalloc_bestfit2+0x118a>
f011c8b8:	83 ec 04             	sub    $0x4,%esp
f011c8bb:	68 14 bb 13 f0       	push   $0xf013bb14
f011c8c0:	68 c4 02 00 00       	push   $0x2c4
f011c8c5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c8ca:	e8 36 39 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8cf:	e8 f4 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c8d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c8d7:	74 17                	je     f011c8f0 <test_kmalloc_bestfit2+0x11ab>
f011c8d9:	83 ec 04             	sub    $0x4,%esp
f011c8dc:	68 14 b7 13 f0       	push   $0xf013b714
f011c8e1:	68 c5 02 00 00       	push   $0x2c5
f011c8e6:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c8eb:	e8 15 39 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c8f0:	e8 bc 06 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011c8f5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c8f8:	29 c2                	sub    %eax,%edx
f011c8fa:	89 d0                	mov    %edx,%eax
f011c8fc:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c901:	74 17                	je     f011c91a <test_kmalloc_bestfit2+0x11d5>
f011c903:	83 ec 04             	sub    $0x4,%esp
f011c906:	68 f4 bb 13 f0       	push   $0xf013bbf4
f011c90b:	68 c6 02 00 00       	push   $0x2c6
f011c910:	68 fa b6 13 f0       	push   $0xf013b6fa
f011c915:	e8 eb 38 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c91a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c921:	10 00 00 
f011c924:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c92a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c92f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c935:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c93b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c940:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c946:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c94c:	29 d0                	sub    %edx,%eax
f011c94e:	89 c1                	mov    %eax,%ecx
f011c950:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c957:	10 00 00 
f011c95a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c95f:	0f b6 d0             	movzbl %al,%edx
f011c962:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c968:	01 d0                	add    %edx,%eax
f011c96a:	48                   	dec    %eax
f011c96b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c971:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c977:	ba 00 00 00 00       	mov    $0x0,%edx
f011c97c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c982:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c988:	29 d0                	sub    %edx,%eax
f011c98a:	01 c1                	add    %eax,%ecx
f011c98c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c993:	10 00 00 
f011c996:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011c99b:	0f b6 c0             	movzbl %al,%eax
f011c99e:	c1 e0 04             	shl    $0x4,%eax
f011c9a1:	89 c2                	mov    %eax,%edx
f011c9a3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c9a9:	01 d0                	add    %edx,%eax
f011c9ab:	48                   	dec    %eax
f011c9ac:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c9b2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c9b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9bd:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c9c3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c9c9:	29 d0                	sub    %edx,%eax
f011c9cb:	01 c8                	add    %ecx,%eax
f011c9cd:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c9d2:	29 c2                	sub    %eax,%edx
f011c9d4:	89 d0                	mov    %edx,%eax
f011c9d6:	83 ec 0c             	sub    $0xc,%esp
f011c9d9:	50                   	push   %eax
f011c9da:	e8 ad b1 fe ff       	call   f0107b8c <kmalloc>
f011c9df:	83 c4 10             	add    $0x10,%esp
f011c9e2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c9e8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c9ee:	85 c0                	test   %eax,%eax
f011c9f0:	74 17                	je     f011ca09 <test_kmalloc_bestfit2+0x12c4>
f011c9f2:	83 ec 04             	sub    $0x4,%esp
f011c9f5:	68 44 bc 13 f0       	push   $0xf013bc44
f011c9fa:	68 ce 02 00 00       	push   $0x2ce
f011c9ff:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ca04:	e8 fc 37 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011ca09:	83 ec 0c             	sub    $0xc,%esp
f011ca0c:	68 a8 bc 13 f0       	push   $0xf013bca8
f011ca11:	e8 f8 42 fe ff       	call   f0100d0e <cprintf>
f011ca16:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ca19:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ca1e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ca21:	5b                   	pop    %ebx
f011ca22:	5f                   	pop    %edi
f011ca23:	5d                   	pop    %ebp
f011ca24:	c3                   	ret    

f011ca25 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011ca25:	55                   	push   %ebp
f011ca26:	89 e5                	mov    %esp,%ebp
f011ca28:	57                   	push   %edi
f011ca29:	53                   	push   %ebx
f011ca2a:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ca30:	83 ec 0c             	sub    $0xc,%esp
f011ca33:	68 3c b6 13 f0       	push   $0xf013b63c
f011ca38:	e8 d1 42 fe ff       	call   f0100d0e <cprintf>
f011ca3d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ca40:	83 ec 0c             	sub    $0xc,%esp
f011ca43:	68 6c b6 13 f0       	push   $0xf013b66c
f011ca48:	e8 c1 42 fe ff       	call   f0100d0e <cprintf>
f011ca4d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ca50:	83 ec 0c             	sub    $0xc,%esp
f011ca53:	68 3c b6 13 f0       	push   $0xf013b63c
f011ca58:	e8 b1 42 fe ff       	call   f0100d0e <cprintf>
f011ca5d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ca60:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011ca66:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ca6b:	b8 00 00 00 00       	mov    $0x0,%eax
f011ca70:	89 d7                	mov    %edx,%edi
f011ca72:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca74:	e8 38 05 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ca79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca7c:	e8 47 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca81:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ca84:	83 ec 0c             	sub    $0xc,%esp
f011ca87:	68 00 fc 0f 00       	push   $0xffc00
f011ca8c:	e8 fb b0 fe ff       	call   f0107b8c <kmalloc>
f011ca91:	83 c4 10             	add    $0x10,%esp
f011ca94:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ca9a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011caa0:	89 c1                	mov    %eax,%ecx
f011caa2:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011caa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011caac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cab1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011cab4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cab7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cabc:	f7 75 ec             	divl   -0x14(%ebp)
f011cabf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cac2:	29 d0                	sub    %edx,%eax
f011cac4:	89 c3                	mov    %eax,%ebx
f011cac6:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011cacd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cad2:	0f b6 d0             	movzbl %al,%edx
f011cad5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011cad8:	01 d0                	add    %edx,%eax
f011cada:	48                   	dec    %eax
f011cadb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011cade:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cae1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cae6:	f7 75 e4             	divl   -0x1c(%ebp)
f011cae9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011caec:	29 d0                	sub    %edx,%eax
f011caee:	01 c3                	add    %eax,%ebx
f011caf0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011caf7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cafc:	0f b6 c0             	movzbl %al,%eax
f011caff:	c1 e0 04             	shl    $0x4,%eax
f011cb02:	89 c2                	mov    %eax,%edx
f011cb04:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011cb07:	01 d0                	add    %edx,%eax
f011cb09:	48                   	dec    %eax
f011cb0a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011cb0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011cb10:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb15:	f7 75 dc             	divl   -0x24(%ebp)
f011cb18:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011cb1b:	29 d0                	sub    %edx,%eax
f011cb1d:	01 d8                	add    %ebx,%eax
f011cb1f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cb24:	39 c1                	cmp    %eax,%ecx
f011cb26:	74 17                	je     f011cb3f <test_kmalloc_firstfit1+0x11a>
f011cb28:	83 ec 04             	sub    $0x4,%esp
f011cb2b:	68 14 bb 13 f0       	push   $0xf013bb14
f011cb30:	68 e6 02 00 00       	push   $0x2e6
f011cb35:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cb3a:	e8 c6 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb3f:	e8 84 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb44:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb47:	74 17                	je     f011cb60 <test_kmalloc_firstfit1+0x13b>
f011cb49:	83 ec 04             	sub    $0x4,%esp
f011cb4c:	68 14 b7 13 f0       	push   $0xf013b714
f011cb51:	68 e7 02 00 00       	push   $0x2e7
f011cb56:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cb5b:	e8 a5 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb60:	e8 4c 04 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cb65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb68:	29 c2                	sub    %eax,%edx
f011cb6a:	89 d0                	mov    %edx,%eax
f011cb6c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb71:	74 17                	je     f011cb8a <test_kmalloc_firstfit1+0x165>
f011cb73:	83 ec 04             	sub    $0x4,%esp
f011cb76:	68 44 bb 13 f0       	push   $0xf013bb44
f011cb7b:	68 e8 02 00 00       	push   $0x2e8
f011cb80:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cb85:	e8 7b 36 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb8a:	e8 22 04 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cb8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb92:	e8 31 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb97:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011cb9a:	83 ec 0c             	sub    $0xc,%esp
f011cb9d:	68 00 fc 0f 00       	push   $0xffc00
f011cba2:	e8 e5 af fe ff       	call   f0107b8c <kmalloc>
f011cba7:	83 c4 10             	add    $0x10,%esp
f011cbaa:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cbb0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cbb6:	89 c1                	mov    %eax,%ecx
f011cbb8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cbbf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cbc2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cbca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cbcd:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbd2:	f7 75 d4             	divl   -0x2c(%ebp)
f011cbd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cbd8:	29 d0                	sub    %edx,%eax
f011cbda:	89 c3                	mov    %eax,%ebx
f011cbdc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cbe3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cbe8:	0f b6 d0             	movzbl %al,%edx
f011cbeb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cbee:	01 d0                	add    %edx,%eax
f011cbf0:	48                   	dec    %eax
f011cbf1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cbf4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cbf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbfc:	f7 75 cc             	divl   -0x34(%ebp)
f011cbff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cc02:	29 d0                	sub    %edx,%eax
f011cc04:	01 c3                	add    %eax,%ebx
f011cc06:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cc0d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cc12:	0f b6 c0             	movzbl %al,%eax
f011cc15:	c1 e0 04             	shl    $0x4,%eax
f011cc18:	89 c2                	mov    %eax,%edx
f011cc1a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cc1d:	01 d0                	add    %edx,%eax
f011cc1f:	48                   	dec    %eax
f011cc20:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cc23:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cc26:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc2b:	f7 75 c4             	divl   -0x3c(%ebp)
f011cc2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cc31:	29 d0                	sub    %edx,%eax
f011cc33:	01 d8                	add    %ebx,%eax
f011cc35:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cc3a:	39 c1                	cmp    %eax,%ecx
f011cc3c:	74 17                	je     f011cc55 <test_kmalloc_firstfit1+0x230>
f011cc3e:	83 ec 04             	sub    $0x4,%esp
f011cc41:	68 14 bb 13 f0       	push   $0xf013bb14
f011cc46:	68 ee 02 00 00       	push   $0x2ee
f011cc4b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cc50:	e8 b0 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc55:	e8 6e 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc5a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc5d:	74 17                	je     f011cc76 <test_kmalloc_firstfit1+0x251>
f011cc5f:	83 ec 04             	sub    $0x4,%esp
f011cc62:	68 14 b7 13 f0       	push   $0xf013b714
f011cc67:	68 ef 02 00 00       	push   $0x2ef
f011cc6c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cc71:	e8 8f 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cc76:	e8 36 03 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cc7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc7e:	29 c2                	sub    %eax,%edx
f011cc80:	89 d0                	mov    %edx,%eax
f011cc82:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc87:	74 17                	je     f011cca0 <test_kmalloc_firstfit1+0x27b>
f011cc89:	83 ec 04             	sub    $0x4,%esp
f011cc8c:	68 44 bb 13 f0       	push   $0xf013bb44
f011cc91:	68 f0 02 00 00       	push   $0x2f0
f011cc96:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cc9b:	e8 65 35 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cca0:	e8 0c 03 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cca5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cca8:	e8 1b 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011ccb0:	83 ec 0c             	sub    $0xc,%esp
f011ccb3:	68 00 fc 0f 00       	push   $0xffc00
f011ccb8:	e8 cf ae fe ff       	call   f0107b8c <kmalloc>
f011ccbd:	83 c4 10             	add    $0x10,%esp
f011ccc0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011ccc6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cccc:	89 c1                	mov    %eax,%ecx
f011ccce:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ccd5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ccd8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ccdd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cce0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cce3:	ba 00 00 00 00       	mov    $0x0,%edx
f011cce8:	f7 75 bc             	divl   -0x44(%ebp)
f011cceb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ccee:	29 d0                	sub    %edx,%eax
f011ccf0:	89 c3                	mov    %eax,%ebx
f011ccf2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ccf9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ccfe:	0f b6 d0             	movzbl %al,%edx
f011cd01:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cd04:	01 d0                	add    %edx,%eax
f011cd06:	48                   	dec    %eax
f011cd07:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cd0a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cd0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd12:	f7 75 b4             	divl   -0x4c(%ebp)
f011cd15:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cd18:	29 d0                	sub    %edx,%eax
f011cd1a:	01 c3                	add    %eax,%ebx
f011cd1c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cd23:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cd28:	0f b6 c0             	movzbl %al,%eax
f011cd2b:	c1 e0 04             	shl    $0x4,%eax
f011cd2e:	89 c2                	mov    %eax,%edx
f011cd30:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cd33:	01 d0                	add    %edx,%eax
f011cd35:	48                   	dec    %eax
f011cd36:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cd39:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cd3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd41:	f7 75 ac             	divl   -0x54(%ebp)
f011cd44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cd47:	29 d0                	sub    %edx,%eax
f011cd49:	01 d8                	add    %ebx,%eax
f011cd4b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cd50:	39 c1                	cmp    %eax,%ecx
f011cd52:	74 17                	je     f011cd6b <test_kmalloc_firstfit1+0x346>
f011cd54:	83 ec 04             	sub    $0x4,%esp
f011cd57:	68 14 bb 13 f0       	push   $0xf013bb14
f011cd5c:	68 f6 02 00 00       	push   $0x2f6
f011cd61:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cd66:	e8 9a 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd6b:	e8 58 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd73:	74 17                	je     f011cd8c <test_kmalloc_firstfit1+0x367>
f011cd75:	83 ec 04             	sub    $0x4,%esp
f011cd78:	68 14 b7 13 f0       	push   $0xf013b714
f011cd7d:	68 f7 02 00 00       	push   $0x2f7
f011cd82:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cd87:	e8 79 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cd8c:	e8 20 02 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cd91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd94:	29 c2                	sub    %eax,%edx
f011cd96:	89 d0                	mov    %edx,%eax
f011cd98:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cd9d:	74 17                	je     f011cdb6 <test_kmalloc_firstfit1+0x391>
f011cd9f:	83 ec 04             	sub    $0x4,%esp
f011cda2:	68 44 bb 13 f0       	push   $0xf013bb44
f011cda7:	68 f8 02 00 00       	push   $0x2f8
f011cdac:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cdb1:	e8 4f 34 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdb6:	e8 f6 01 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cdbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdbe:	e8 05 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cdc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011cdc6:	83 ec 0c             	sub    $0xc,%esp
f011cdc9:	68 00 fc 0f 00       	push   $0xffc00
f011cdce:	e8 b9 ad fe ff       	call   f0107b8c <kmalloc>
f011cdd3:	83 c4 10             	add    $0x10,%esp
f011cdd6:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011cddc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cde2:	89 c1                	mov    %eax,%ecx
f011cde4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cdeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cdee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdf3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cdf6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cdf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdfe:	f7 75 a4             	divl   -0x5c(%ebp)
f011ce01:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ce04:	29 d0                	sub    %edx,%eax
f011ce06:	89 c3                	mov    %eax,%ebx
f011ce08:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ce0f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ce14:	0f b6 d0             	movzbl %al,%edx
f011ce17:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ce1a:	01 d0                	add    %edx,%eax
f011ce1c:	48                   	dec    %eax
f011ce1d:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ce20:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ce23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce28:	f7 75 9c             	divl   -0x64(%ebp)
f011ce2b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ce2e:	29 d0                	sub    %edx,%eax
f011ce30:	01 c3                	add    %eax,%ebx
f011ce32:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ce39:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ce3e:	0f b6 c0             	movzbl %al,%eax
f011ce41:	c1 e0 04             	shl    $0x4,%eax
f011ce44:	89 c2                	mov    %eax,%edx
f011ce46:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ce49:	01 d0                	add    %edx,%eax
f011ce4b:	48                   	dec    %eax
f011ce4c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ce4f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ce52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce57:	f7 75 94             	divl   -0x6c(%ebp)
f011ce5a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ce5d:	29 d0                	sub    %edx,%eax
f011ce5f:	01 d8                	add    %ebx,%eax
f011ce61:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ce66:	39 c1                	cmp    %eax,%ecx
f011ce68:	74 17                	je     f011ce81 <test_kmalloc_firstfit1+0x45c>
f011ce6a:	83 ec 04             	sub    $0x4,%esp
f011ce6d:	68 14 bb 13 f0       	push   $0xf013bb14
f011ce72:	68 fe 02 00 00       	push   $0x2fe
f011ce77:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ce7c:	e8 84 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce81:	e8 42 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ce86:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce89:	74 17                	je     f011cea2 <test_kmalloc_firstfit1+0x47d>
f011ce8b:	83 ec 04             	sub    $0x4,%esp
f011ce8e:	68 14 b7 13 f0       	push   $0xf013b714
f011ce93:	68 ff 02 00 00       	push   $0x2ff
f011ce98:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ce9d:	e8 63 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cea2:	e8 0a 01 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cea7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ceaa:	29 c2                	sub    %eax,%edx
f011ceac:	89 d0                	mov    %edx,%eax
f011ceae:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ceb3:	74 17                	je     f011cecc <test_kmalloc_firstfit1+0x4a7>
f011ceb5:	83 ec 04             	sub    $0x4,%esp
f011ceb8:	68 44 bb 13 f0       	push   $0xf013bb44
f011cebd:	68 00 03 00 00       	push   $0x300
f011cec2:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cec7:	e8 39 33 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cecc:	e8 e0 00 ff ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ced1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ced4:	e8 ef 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ced9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cedc:	83 ec 0c             	sub    $0xc,%esp
f011cedf:	68 00 fc 1f 00       	push   $0x1ffc00
f011cee4:	e8 a3 ac fe ff       	call   f0107b8c <kmalloc>
f011cee9:	83 c4 10             	add    $0x10,%esp
f011ceec:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cef2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011cef8:	89 c1                	mov    %eax,%ecx
f011cefa:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cf01:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cf04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf09:	89 45 88             	mov    %eax,-0x78(%ebp)
f011cf0c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cf0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf14:	f7 75 8c             	divl   -0x74(%ebp)
f011cf17:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cf1a:	29 d0                	sub    %edx,%eax
f011cf1c:	89 c3                	mov    %eax,%ebx
f011cf1e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011cf25:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cf2a:	0f b6 d0             	movzbl %al,%edx
f011cf2d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cf30:	01 d0                	add    %edx,%eax
f011cf32:	48                   	dec    %eax
f011cf33:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cf36:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cf39:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf3e:	f7 75 84             	divl   -0x7c(%ebp)
f011cf41:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cf44:	29 d0                	sub    %edx,%eax
f011cf46:	01 c3                	add    %eax,%ebx
f011cf48:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cf4f:	10 00 00 
f011cf52:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011cf57:	0f b6 c0             	movzbl %al,%eax
f011cf5a:	c1 e0 04             	shl    $0x4,%eax
f011cf5d:	89 c2                	mov    %eax,%edx
f011cf5f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cf65:	01 d0                	add    %edx,%eax
f011cf67:	48                   	dec    %eax
f011cf68:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cf6e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cf74:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf79:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cf7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cf85:	29 d0                	sub    %edx,%eax
f011cf87:	01 d8                	add    %ebx,%eax
f011cf89:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cf8e:	39 c1                	cmp    %eax,%ecx
f011cf90:	74 17                	je     f011cfa9 <test_kmalloc_firstfit1+0x584>
f011cf92:	83 ec 04             	sub    $0x4,%esp
f011cf95:	68 14 bb 13 f0       	push   $0xf013bb14
f011cf9a:	68 06 03 00 00       	push   $0x306
f011cf9f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cfa4:	e8 5c 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfa9:	e8 1a 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cfae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfb1:	74 17                	je     f011cfca <test_kmalloc_firstfit1+0x5a5>
f011cfb3:	83 ec 04             	sub    $0x4,%esp
f011cfb6:	68 14 b7 13 f0       	push   $0xf013b714
f011cfbb:	68 07 03 00 00       	push   $0x307
f011cfc0:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cfc5:	e8 3b 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cfca:	e8 e2 ff fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cfcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfd2:	29 c2                	sub    %eax,%edx
f011cfd4:	89 d0                	mov    %edx,%eax
f011cfd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cfdb:	74 17                	je     f011cff4 <test_kmalloc_firstfit1+0x5cf>
f011cfdd:	83 ec 04             	sub    $0x4,%esp
f011cfe0:	68 44 bb 13 f0       	push   $0xf013bb44
f011cfe5:	68 08 03 00 00       	push   $0x308
f011cfea:	68 fa b6 13 f0       	push   $0xf013b6fa
f011cfef:	e8 11 32 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cff4:	e8 b8 ff fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011cff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cffc:	e8 c7 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d001:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d004:	83 ec 0c             	sub    $0xc,%esp
f011d007:	68 00 fc 1f 00       	push   $0x1ffc00
f011d00c:	e8 7b ab fe ff       	call   f0107b8c <kmalloc>
f011d011:	83 c4 10             	add    $0x10,%esp
f011d014:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d01a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d020:	89 c1                	mov    %eax,%ecx
f011d022:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d029:	10 00 00 
f011d02c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d032:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d037:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d03d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d043:	ba 00 00 00 00       	mov    $0x0,%edx
f011d048:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d04e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d054:	29 d0                	sub    %edx,%eax
f011d056:	89 c3                	mov    %eax,%ebx
f011d058:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d05f:	10 00 00 
f011d062:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d067:	0f b6 d0             	movzbl %al,%edx
f011d06a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d070:	01 d0                	add    %edx,%eax
f011d072:	48                   	dec    %eax
f011d073:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d079:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d07f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d084:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d08a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d090:	29 d0                	sub    %edx,%eax
f011d092:	01 c3                	add    %eax,%ebx
f011d094:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d09b:	10 00 00 
f011d09e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d0a3:	0f b6 c0             	movzbl %al,%eax
f011d0a6:	c1 e0 04             	shl    $0x4,%eax
f011d0a9:	89 c2                	mov    %eax,%edx
f011d0ab:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d0b1:	01 d0                	add    %edx,%eax
f011d0b3:	48                   	dec    %eax
f011d0b4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d0ba:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d0c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0c5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d0cb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d0d1:	29 d0                	sub    %edx,%eax
f011d0d3:	01 d8                	add    %ebx,%eax
f011d0d5:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d0da:	39 c1                	cmp    %eax,%ecx
f011d0dc:	74 17                	je     f011d0f5 <test_kmalloc_firstfit1+0x6d0>
f011d0de:	83 ec 04             	sub    $0x4,%esp
f011d0e1:	68 14 bb 13 f0       	push   $0xf013bb14
f011d0e6:	68 0e 03 00 00       	push   $0x30e
f011d0eb:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d0f0:	e8 10 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0f5:	e8 ce 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d0fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0fd:	74 17                	je     f011d116 <test_kmalloc_firstfit1+0x6f1>
f011d0ff:	83 ec 04             	sub    $0x4,%esp
f011d102:	68 14 b7 13 f0       	push   $0xf013b714
f011d107:	68 0f 03 00 00       	push   $0x30f
f011d10c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d111:	e8 ef 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d116:	e8 96 fe fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d11b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d11e:	29 c2                	sub    %eax,%edx
f011d120:	89 d0                	mov    %edx,%eax
f011d122:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d127:	74 17                	je     f011d140 <test_kmalloc_firstfit1+0x71b>
f011d129:	83 ec 04             	sub    $0x4,%esp
f011d12c:	68 44 bb 13 f0       	push   $0xf013bb44
f011d131:	68 10 03 00 00       	push   $0x310
f011d136:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d13b:	e8 c5 30 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d140:	e8 6c fe fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d145:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d148:	e8 7b 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d14d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d150:	83 ec 0c             	sub    $0xc,%esp
f011d153:	68 00 fc 2f 00       	push   $0x2ffc00
f011d158:	e8 2f aa fe ff       	call   f0107b8c <kmalloc>
f011d15d:	83 c4 10             	add    $0x10,%esp
f011d160:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d166:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d16c:	89 c1                	mov    %eax,%ecx
f011d16e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d175:	10 00 00 
f011d178:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d17e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d183:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d189:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d18f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d194:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d19a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d1a0:	29 d0                	sub    %edx,%eax
f011d1a2:	89 c3                	mov    %eax,%ebx
f011d1a4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d1ab:	10 00 00 
f011d1ae:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d1b3:	0f b6 d0             	movzbl %al,%edx
f011d1b6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d1bc:	01 d0                	add    %edx,%eax
f011d1be:	48                   	dec    %eax
f011d1bf:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d1c5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1d0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d1d6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1dc:	29 d0                	sub    %edx,%eax
f011d1de:	01 c3                	add    %eax,%ebx
f011d1e0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d1e7:	10 00 00 
f011d1ea:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d1ef:	0f b6 c0             	movzbl %al,%eax
f011d1f2:	c1 e0 04             	shl    $0x4,%eax
f011d1f5:	89 c2                	mov    %eax,%edx
f011d1f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d1fd:	01 d0                	add    %edx,%eax
f011d1ff:	48                   	dec    %eax
f011d200:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d206:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d20c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d211:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d217:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d21d:	29 d0                	sub    %edx,%eax
f011d21f:	01 d8                	add    %ebx,%eax
f011d221:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d226:	39 c1                	cmp    %eax,%ecx
f011d228:	74 17                	je     f011d241 <test_kmalloc_firstfit1+0x81c>
f011d22a:	83 ec 04             	sub    $0x4,%esp
f011d22d:	68 14 bb 13 f0       	push   $0xf013bb14
f011d232:	68 16 03 00 00       	push   $0x316
f011d237:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d23c:	e8 c4 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d241:	e8 82 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d246:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d249:	74 17                	je     f011d262 <test_kmalloc_firstfit1+0x83d>
f011d24b:	83 ec 04             	sub    $0x4,%esp
f011d24e:	68 14 b7 13 f0       	push   $0xf013b714
f011d253:	68 17 03 00 00       	push   $0x317
f011d258:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d25d:	e8 a3 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d262:	e8 4a fd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d267:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d26a:	29 c2                	sub    %eax,%edx
f011d26c:	89 d0                	mov    %edx,%eax
f011d26e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d273:	74 17                	je     f011d28c <test_kmalloc_firstfit1+0x867>
f011d275:	83 ec 04             	sub    $0x4,%esp
f011d278:	68 44 bb 13 f0       	push   $0xf013bb44
f011d27d:	68 18 03 00 00       	push   $0x318
f011d282:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d287:	e8 79 2f fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d28c:	e8 20 fd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d291:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d294:	e8 2f 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d299:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d29c:	83 ec 0c             	sub    $0xc,%esp
f011d29f:	68 00 fc 2f 00       	push   $0x2ffc00
f011d2a4:	e8 e3 a8 fe ff       	call   f0107b8c <kmalloc>
f011d2a9:	83 c4 10             	add    $0x10,%esp
f011d2ac:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d2b2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d2b8:	89 c1                	mov    %eax,%ecx
f011d2ba:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d2c1:	10 00 00 
f011d2c4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d2ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2cf:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d2d5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2db:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2e0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d2e6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2ec:	29 d0                	sub    %edx,%eax
f011d2ee:	89 c3                	mov    %eax,%ebx
f011d2f0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d2f7:	10 00 00 
f011d2fa:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d2ff:	0f b6 d0             	movzbl %al,%edx
f011d302:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d308:	01 d0                	add    %edx,%eax
f011d30a:	48                   	dec    %eax
f011d30b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d311:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d317:	ba 00 00 00 00       	mov    $0x0,%edx
f011d31c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d322:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d328:	29 d0                	sub    %edx,%eax
f011d32a:	01 c3                	add    %eax,%ebx
f011d32c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d333:	10 00 00 
f011d336:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d33b:	0f b6 c0             	movzbl %al,%eax
f011d33e:	c1 e0 04             	shl    $0x4,%eax
f011d341:	89 c2                	mov    %eax,%edx
f011d343:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d349:	01 d0                	add    %edx,%eax
f011d34b:	48                   	dec    %eax
f011d34c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d352:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d358:	ba 00 00 00 00       	mov    $0x0,%edx
f011d35d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d363:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d369:	29 d0                	sub    %edx,%eax
f011d36b:	01 d8                	add    %ebx,%eax
f011d36d:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d372:	39 c1                	cmp    %eax,%ecx
f011d374:	74 17                	je     f011d38d <test_kmalloc_firstfit1+0x968>
f011d376:	83 ec 04             	sub    $0x4,%esp
f011d379:	68 14 bb 13 f0       	push   $0xf013bb14
f011d37e:	68 1e 03 00 00       	push   $0x31e
f011d383:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d388:	e8 78 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d38d:	e8 36 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d392:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d395:	74 17                	je     f011d3ae <test_kmalloc_firstfit1+0x989>
f011d397:	83 ec 04             	sub    $0x4,%esp
f011d39a:	68 14 b7 13 f0       	push   $0xf013b714
f011d39f:	68 1f 03 00 00       	push   $0x31f
f011d3a4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d3a9:	e8 57 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d3ae:	e8 fe fb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d3b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3b6:	29 c2                	sub    %eax,%edx
f011d3b8:	89 d0                	mov    %edx,%eax
f011d3ba:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d3bf:	74 17                	je     f011d3d8 <test_kmalloc_firstfit1+0x9b3>
f011d3c1:	83 ec 04             	sub    $0x4,%esp
f011d3c4:	68 44 bb 13 f0       	push   $0xf013bb44
f011d3c9:	68 20 03 00 00       	push   $0x320
f011d3ce:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d3d3:	e8 2d 2e fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d3d8:	e8 d4 fb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d3dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3e0:	e8 e3 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d3e8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d3ee:	83 ec 0c             	sub    $0xc,%esp
f011d3f1:	50                   	push   %eax
f011d3f2:	e8 60 a8 fe ff       	call   f0107c57 <kfree>
f011d3f7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3fa:	e8 c9 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d402:	74 17                	je     f011d41b <test_kmalloc_firstfit1+0x9f6>
f011d404:	83 ec 04             	sub    $0x4,%esp
f011d407:	68 14 b7 13 f0       	push   $0xf013b714
f011d40c:	68 29 03 00 00       	push   $0x329
f011d411:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d416:	e8 ea 2d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d41b:	e8 91 fb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d420:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d423:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d428:	74 17                	je     f011d441 <test_kmalloc_firstfit1+0xa1c>
f011d42a:	83 ec 04             	sub    $0x4,%esp
f011d42d:	68 57 bb 13 f0       	push   $0xf013bb57
f011d432:	68 2a 03 00 00       	push   $0x32a
f011d437:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d43c:	e8 c4 2d fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d441:	e8 6b fb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d446:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d449:	e8 7a 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d44e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d451:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d457:	83 ec 0c             	sub    $0xc,%esp
f011d45a:	50                   	push   %eax
f011d45b:	e8 f7 a7 fe ff       	call   f0107c57 <kfree>
f011d460:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d463:	e8 60 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d468:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d46b:	74 17                	je     f011d484 <test_kmalloc_firstfit1+0xa5f>
f011d46d:	83 ec 04             	sub    $0x4,%esp
f011d470:	68 14 b7 13 f0       	push   $0xf013b714
f011d475:	68 30 03 00 00       	push   $0x330
f011d47a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d47f:	e8 81 2d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d484:	e8 28 fb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d489:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d48c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d491:	74 17                	je     f011d4aa <test_kmalloc_firstfit1+0xa85>
f011d493:	83 ec 04             	sub    $0x4,%esp
f011d496:	68 57 bb 13 f0       	push   $0xf013bb57
f011d49b:	68 31 03 00 00       	push   $0x331
f011d4a0:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d4a5:	e8 5b 2d fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d4aa:	e8 02 fb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d4af:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4b2:	e8 11 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d4b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d4ba:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d4c0:	83 ec 0c             	sub    $0xc,%esp
f011d4c3:	50                   	push   %eax
f011d4c4:	e8 8e a7 fe ff       	call   f0107c57 <kfree>
f011d4c9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4cc:	e8 f7 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d4d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4d4:	74 17                	je     f011d4ed <test_kmalloc_firstfit1+0xac8>
f011d4d6:	83 ec 04             	sub    $0x4,%esp
f011d4d9:	68 14 b7 13 f0       	push   $0xf013b714
f011d4de:	68 37 03 00 00       	push   $0x337
f011d4e3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d4e8:	e8 18 2d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d4ed:	e8 bf fa fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d4f2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d4f5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d4fa:	74 17                	je     f011d513 <test_kmalloc_firstfit1+0xaee>
f011d4fc:	83 ec 04             	sub    $0x4,%esp
f011d4ff:	68 57 bb 13 f0       	push   $0xf013bb57
f011d504:	68 38 03 00 00       	push   $0x338
f011d509:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d50e:	e8 f2 2c fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d513:	e8 99 fa fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d518:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d51b:	e8 a8 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d520:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d523:	83 ec 0c             	sub    $0xc,%esp
f011d526:	68 00 fc 07 00       	push   $0x7fc00
f011d52b:	e8 5c a6 fe ff       	call   f0107b8c <kmalloc>
f011d530:	83 c4 10             	add    $0x10,%esp
f011d533:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d539:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d53f:	89 c1                	mov    %eax,%ecx
f011d541:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d548:	10 00 00 
f011d54b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d551:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d556:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d55c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d562:	ba 00 00 00 00       	mov    $0x0,%edx
f011d567:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d56d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d573:	29 d0                	sub    %edx,%eax
f011d575:	89 c3                	mov    %eax,%ebx
f011d577:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d57e:	10 00 00 
f011d581:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d586:	0f b6 d0             	movzbl %al,%edx
f011d589:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d58f:	01 d0                	add    %edx,%eax
f011d591:	48                   	dec    %eax
f011d592:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d598:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d59e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5a3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d5a9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d5af:	29 d0                	sub    %edx,%eax
f011d5b1:	01 c3                	add    %eax,%ebx
f011d5b3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d5ba:	10 00 00 
f011d5bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d5c2:	0f b6 c0             	movzbl %al,%eax
f011d5c5:	c1 e0 04             	shl    $0x4,%eax
f011d5c8:	89 c2                	mov    %eax,%edx
f011d5ca:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d5d0:	01 d0                	add    %edx,%eax
f011d5d2:	48                   	dec    %eax
f011d5d3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d5d9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d5df:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5e4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d5ea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d5f0:	29 d0                	sub    %edx,%eax
f011d5f2:	01 d8                	add    %ebx,%eax
f011d5f4:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d5f9:	39 c1                	cmp    %eax,%ecx
f011d5fb:	74 17                	je     f011d614 <test_kmalloc_firstfit1+0xbef>
f011d5fd:	83 ec 04             	sub    $0x4,%esp
f011d600:	68 14 bb 13 f0       	push   $0xf013bb14
f011d605:	68 41 03 00 00       	push   $0x341
f011d60a:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d60f:	e8 f1 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d614:	e8 af 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d619:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d61c:	74 17                	je     f011d635 <test_kmalloc_firstfit1+0xc10>
f011d61e:	83 ec 04             	sub    $0x4,%esp
f011d621:	68 14 b7 13 f0       	push   $0xf013b714
f011d626:	68 42 03 00 00       	push   $0x342
f011d62b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d630:	e8 d0 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d635:	e8 77 f9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d63a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d63d:	29 c2                	sub    %eax,%edx
f011d63f:	89 d0                	mov    %edx,%eax
f011d641:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d646:	74 17                	je     f011d65f <test_kmalloc_firstfit1+0xc3a>
f011d648:	83 ec 04             	sub    $0x4,%esp
f011d64b:	68 44 bb 13 f0       	push   $0xf013bb44
f011d650:	68 43 03 00 00       	push   $0x343
f011d655:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d65a:	e8 a6 2b fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d65f:	e8 4d f9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d664:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d667:	e8 5c 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d66c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d66f:	83 ec 0c             	sub    $0xc,%esp
f011d672:	68 00 fc 0f 00       	push   $0xffc00
f011d677:	e8 10 a5 fe ff       	call   f0107b8c <kmalloc>
f011d67c:	83 c4 10             	add    $0x10,%esp
f011d67f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d685:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d68b:	89 c1                	mov    %eax,%ecx
f011d68d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d694:	10 00 00 
f011d697:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d69d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d6a2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d6a8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d6ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6b3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d6b9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d6bf:	29 d0                	sub    %edx,%eax
f011d6c1:	89 c3                	mov    %eax,%ebx
f011d6c3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d6ca:	10 00 00 
f011d6cd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d6d2:	0f b6 d0             	movzbl %al,%edx
f011d6d5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d6db:	01 d0                	add    %edx,%eax
f011d6dd:	48                   	dec    %eax
f011d6de:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d6e4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d6ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6ef:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d6f5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d6fb:	29 d0                	sub    %edx,%eax
f011d6fd:	01 c3                	add    %eax,%ebx
f011d6ff:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d706:	10 00 00 
f011d709:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d70e:	0f b6 c0             	movzbl %al,%eax
f011d711:	c1 e0 04             	shl    $0x4,%eax
f011d714:	89 c2                	mov    %eax,%edx
f011d716:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d71c:	01 d0                	add    %edx,%eax
f011d71e:	48                   	dec    %eax
f011d71f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d725:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d72b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d730:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d736:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d73c:	29 d0                	sub    %edx,%eax
f011d73e:	01 d8                	add    %ebx,%eax
f011d740:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d745:	39 c1                	cmp    %eax,%ecx
f011d747:	74 17                	je     f011d760 <test_kmalloc_firstfit1+0xd3b>
f011d749:	83 ec 04             	sub    $0x4,%esp
f011d74c:	68 14 bb 13 f0       	push   $0xf013bb14
f011d751:	68 49 03 00 00       	push   $0x349
f011d756:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d75b:	e8 a5 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d760:	e8 63 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d765:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d768:	74 17                	je     f011d781 <test_kmalloc_firstfit1+0xd5c>
f011d76a:	83 ec 04             	sub    $0x4,%esp
f011d76d:	68 14 b7 13 f0       	push   $0xf013b714
f011d772:	68 4a 03 00 00       	push   $0x34a
f011d777:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d77c:	e8 84 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d781:	e8 2b f8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d786:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d789:	29 c2                	sub    %eax,%edx
f011d78b:	89 d0                	mov    %edx,%eax
f011d78d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d792:	74 17                	je     f011d7ab <test_kmalloc_firstfit1+0xd86>
f011d794:	83 ec 04             	sub    $0x4,%esp
f011d797:	68 44 bb 13 f0       	push   $0xf013bb44
f011d79c:	68 4b 03 00 00       	push   $0x34b
f011d7a1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d7a6:	e8 5a 2a fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d7ab:	e8 01 f8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d7b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7b3:	e8 10 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d7b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d7bb:	83 ec 0c             	sub    $0xc,%esp
f011d7be:	68 00 fc 03 00       	push   $0x3fc00
f011d7c3:	e8 c4 a3 fe ff       	call   f0107b8c <kmalloc>
f011d7c8:	83 c4 10             	add    $0x10,%esp
f011d7cb:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d7d1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d7d7:	89 c1                	mov    %eax,%ecx
f011d7d9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d7e0:	10 00 00 
f011d7e3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d7e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d7ee:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d7f4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d7fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7ff:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d805:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d80b:	29 d0                	sub    %edx,%eax
f011d80d:	89 c3                	mov    %eax,%ebx
f011d80f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d816:	10 00 00 
f011d819:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d81e:	0f b6 d0             	movzbl %al,%edx
f011d821:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d827:	01 d0                	add    %edx,%eax
f011d829:	48                   	dec    %eax
f011d82a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d830:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d836:	ba 00 00 00 00       	mov    $0x0,%edx
f011d83b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d841:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d847:	29 d0                	sub    %edx,%eax
f011d849:	01 c3                	add    %eax,%ebx
f011d84b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d852:	10 00 00 
f011d855:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d85a:	0f b6 c0             	movzbl %al,%eax
f011d85d:	c1 e0 04             	shl    $0x4,%eax
f011d860:	89 c2                	mov    %eax,%edx
f011d862:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d868:	01 d0                	add    %edx,%eax
f011d86a:	48                   	dec    %eax
f011d86b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d871:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d877:	ba 00 00 00 00       	mov    $0x0,%edx
f011d87c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d882:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d888:	29 d0                	sub    %edx,%eax
f011d88a:	01 d8                	add    %ebx,%eax
f011d88c:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d891:	39 c1                	cmp    %eax,%ecx
f011d893:	74 17                	je     f011d8ac <test_kmalloc_firstfit1+0xe87>
f011d895:	83 ec 04             	sub    $0x4,%esp
f011d898:	68 14 bb 13 f0       	push   $0xf013bb14
f011d89d:	68 52 03 00 00       	push   $0x352
f011d8a2:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d8a7:	e8 59 29 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8ac:	e8 17 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d8b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d8b4:	74 17                	je     f011d8cd <test_kmalloc_firstfit1+0xea8>
f011d8b6:	83 ec 04             	sub    $0x4,%esp
f011d8b9:	68 14 b7 13 f0       	push   $0xf013b714
f011d8be:	68 53 03 00 00       	push   $0x353
f011d8c3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d8c8:	e8 38 29 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d8cd:	e8 df f6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d8d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d8d5:	29 c2                	sub    %eax,%edx
f011d8d7:	89 d0                	mov    %edx,%eax
f011d8d9:	83 f8 40             	cmp    $0x40,%eax
f011d8dc:	74 17                	je     f011d8f5 <test_kmalloc_firstfit1+0xed0>
f011d8de:	83 ec 04             	sub    $0x4,%esp
f011d8e1:	68 44 bb 13 f0       	push   $0xf013bb44
f011d8e6:	68 54 03 00 00       	push   $0x354
f011d8eb:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d8f0:	e8 10 29 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d8f5:	e8 b7 f6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d8fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8fd:	e8 c6 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d902:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d905:	83 ec 0c             	sub    $0xc,%esp
f011d908:	68 00 00 20 00       	push   $0x200000
f011d90d:	e8 7a a2 fe ff       	call   f0107b8c <kmalloc>
f011d912:	83 c4 10             	add    $0x10,%esp
f011d915:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d91b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d921:	89 c1                	mov    %eax,%ecx
f011d923:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d92a:	10 00 00 
f011d92d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d933:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d938:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d93e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d944:	ba 00 00 00 00       	mov    $0x0,%edx
f011d949:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d94f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d955:	29 d0                	sub    %edx,%eax
f011d957:	89 c3                	mov    %eax,%ebx
f011d959:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d960:	10 00 00 
f011d963:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d968:	0f b6 d0             	movzbl %al,%edx
f011d96b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d971:	01 d0                	add    %edx,%eax
f011d973:	48                   	dec    %eax
f011d974:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d97a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d980:	ba 00 00 00 00       	mov    $0x0,%edx
f011d985:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d98b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d991:	29 d0                	sub    %edx,%eax
f011d993:	01 c3                	add    %eax,%ebx
f011d995:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d99c:	10 00 00 
f011d99f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011d9a4:	0f b6 c0             	movzbl %al,%eax
f011d9a7:	c1 e0 04             	shl    $0x4,%eax
f011d9aa:	89 c2                	mov    %eax,%edx
f011d9ac:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d9b2:	01 d0                	add    %edx,%eax
f011d9b4:	48                   	dec    %eax
f011d9b5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d9bb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d9c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9c6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d9cc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d9d2:	29 d0                	sub    %edx,%eax
f011d9d4:	01 d8                	add    %ebx,%eax
f011d9d6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d9db:	39 c1                	cmp    %eax,%ecx
f011d9dd:	74 17                	je     f011d9f6 <test_kmalloc_firstfit1+0xfd1>
f011d9df:	83 ec 04             	sub    $0x4,%esp
f011d9e2:	68 14 bb 13 f0       	push   $0xf013bb14
f011d9e7:	68 5a 03 00 00       	push   $0x35a
f011d9ec:	68 fa b6 13 f0       	push   $0xf013b6fa
f011d9f1:	e8 0f 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d9f6:	e8 b6 f5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011d9fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d9fe:	29 c2                	sub    %eax,%edx
f011da00:	89 d0                	mov    %edx,%eax
f011da02:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da07:	74 17                	je     f011da20 <test_kmalloc_firstfit1+0xffb>
f011da09:	83 ec 04             	sub    $0x4,%esp
f011da0c:	68 44 bb 13 f0       	push   $0xf013bb44
f011da11:	68 5b 03 00 00       	push   $0x35b
f011da16:	68 fa b6 13 f0       	push   $0xf013b6fa
f011da1b:	e8 e5 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da20:	e8 a3 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011da28:	74 17                	je     f011da41 <test_kmalloc_firstfit1+0x101c>
f011da2a:	83 ec 04             	sub    $0x4,%esp
f011da2d:	68 14 b7 13 f0       	push   $0xf013b714
f011da32:	68 5c 03 00 00       	push   $0x35c
f011da37:	68 fa b6 13 f0       	push   $0xf013b6fa
f011da3c:	e8 c4 27 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011da41:	e8 6b f5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011da46:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da49:	e8 7a 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011da51:	83 ec 0c             	sub    $0xc,%esp
f011da54:	68 00 fc 3f 00       	push   $0x3ffc00
f011da59:	e8 2e a1 fe ff       	call   f0107b8c <kmalloc>
f011da5e:	83 c4 10             	add    $0x10,%esp
f011da61:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011da67:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011da6d:	89 c1                	mov    %eax,%ecx
f011da6f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011da76:	10 00 00 
f011da79:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011da7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da84:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011da8a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011da90:	ba 00 00 00 00       	mov    $0x0,%edx
f011da95:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011da9b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011daa1:	29 d0                	sub    %edx,%eax
f011daa3:	89 c3                	mov    %eax,%ebx
f011daa5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011daac:	10 00 00 
f011daaf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011dab4:	0f b6 d0             	movzbl %al,%edx
f011dab7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011dabd:	01 d0                	add    %edx,%eax
f011dabf:	48                   	dec    %eax
f011dac0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011dac6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011dacc:	ba 00 00 00 00       	mov    $0x0,%edx
f011dad1:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011dad7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011dadd:	29 d0                	sub    %edx,%eax
f011dadf:	01 c3                	add    %eax,%ebx
f011dae1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011dae8:	10 00 00 
f011daeb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011daf0:	0f b6 c0             	movzbl %al,%eax
f011daf3:	c1 e0 04             	shl    $0x4,%eax
f011daf6:	89 c2                	mov    %eax,%edx
f011daf8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011dafe:	01 d0                	add    %edx,%eax
f011db00:	48                   	dec    %eax
f011db01:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011db07:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011db0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011db12:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011db18:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011db1e:	29 d0                	sub    %edx,%eax
f011db20:	01 d8                	add    %ebx,%eax
f011db22:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011db27:	39 c1                	cmp    %eax,%ecx
f011db29:	74 17                	je     f011db42 <test_kmalloc_firstfit1+0x111d>
f011db2b:	83 ec 04             	sub    $0x4,%esp
f011db2e:	68 14 bb 13 f0       	push   $0xf013bb14
f011db33:	68 63 03 00 00       	push   $0x363
f011db38:	68 fa b6 13 f0       	push   $0xf013b6fa
f011db3d:	e8 c3 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db42:	e8 81 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db47:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db4a:	74 17                	je     f011db63 <test_kmalloc_firstfit1+0x113e>
f011db4c:	83 ec 04             	sub    $0x4,%esp
f011db4f:	68 14 b7 13 f0       	push   $0xf013b714
f011db54:	68 64 03 00 00       	push   $0x364
f011db59:	68 fa b6 13 f0       	push   $0xf013b6fa
f011db5e:	e8 a2 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011db63:	e8 49 f4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011db68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011db6b:	29 c2                	sub    %eax,%edx
f011db6d:	89 d0                	mov    %edx,%eax
f011db6f:	3d 00 04 00 00       	cmp    $0x400,%eax
f011db74:	74 17                	je     f011db8d <test_kmalloc_firstfit1+0x1168>
f011db76:	83 ec 04             	sub    $0x4,%esp
f011db79:	68 44 bb 13 f0       	push   $0xf013bb44
f011db7e:	68 65 03 00 00       	push   $0x365
f011db83:	68 fa b6 13 f0       	push   $0xf013b6fa
f011db88:	e8 78 26 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011db8d:	e8 1f f4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011db92:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db95:	e8 2e 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011db9d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011dba3:	83 ec 0c             	sub    $0xc,%esp
f011dba6:	50                   	push   %eax
f011dba7:	e8 ab a0 fe ff       	call   f0107c57 <kfree>
f011dbac:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbaf:	e8 14 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dbb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dbb7:	74 17                	je     f011dbd0 <test_kmalloc_firstfit1+0x11ab>
f011dbb9:	83 ec 04             	sub    $0x4,%esp
f011dbbc:	68 14 b7 13 f0       	push   $0xf013b714
f011dbc1:	68 6e 03 00 00       	push   $0x36e
f011dbc6:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dbcb:	e8 35 26 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dbd0:	e8 dc f3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dbd5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dbd8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dbdd:	74 17                	je     f011dbf6 <test_kmalloc_firstfit1+0x11d1>
f011dbdf:	83 ec 04             	sub    $0x4,%esp
f011dbe2:	68 57 bb 13 f0       	push   $0xf013bb57
f011dbe7:	68 6f 03 00 00       	push   $0x36f
f011dbec:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dbf1:	e8 0f 26 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011dbf6:	e8 b6 f3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dbfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbfe:	e8 c5 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc03:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011dc06:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011dc0c:	83 ec 0c             	sub    $0xc,%esp
f011dc0f:	50                   	push   %eax
f011dc10:	e8 42 a0 fe ff       	call   f0107c57 <kfree>
f011dc15:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc18:	e8 ab 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc1d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc20:	74 17                	je     f011dc39 <test_kmalloc_firstfit1+0x1214>
f011dc22:	83 ec 04             	sub    $0x4,%esp
f011dc25:	68 14 b7 13 f0       	push   $0xf013b714
f011dc2a:	68 75 03 00 00       	push   $0x375
f011dc2f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dc34:	e8 cc 25 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dc39:	e8 73 f3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dc3e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dc41:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dc46:	74 17                	je     f011dc5f <test_kmalloc_firstfit1+0x123a>
f011dc48:	83 ec 04             	sub    $0x4,%esp
f011dc4b:	68 57 bb 13 f0       	push   $0xf013bb57
f011dc50:	68 76 03 00 00       	push   $0x376
f011dc55:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dc5a:	e8 a6 25 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011dc5f:	e8 4d f3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dc64:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc67:	e8 5c 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dc6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011dc6f:	83 ec 0c             	sub    $0xc,%esp
f011dc72:	68 00 00 10 00       	push   $0x100000
f011dc77:	e8 10 9f fe ff       	call   f0107b8c <kmalloc>
f011dc7c:	83 c4 10             	add    $0x10,%esp
f011dc7f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011dc85:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011dc8b:	89 c1                	mov    %eax,%ecx
f011dc8d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011dc94:	10 00 00 
f011dc97:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dc9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dca2:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011dca8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dcae:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcb3:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011dcb9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dcbf:	29 d0                	sub    %edx,%eax
f011dcc1:	89 c3                	mov    %eax,%ebx
f011dcc3:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011dcca:	10 00 00 
f011dccd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011dcd2:	0f b6 d0             	movzbl %al,%edx
f011dcd5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dcdb:	01 d0                	add    %edx,%eax
f011dcdd:	48                   	dec    %eax
f011dcde:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011dce4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dcea:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcef:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011dcf5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dcfb:	29 d0                	sub    %edx,%eax
f011dcfd:	01 c3                	add    %eax,%ebx
f011dcff:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011dd06:	10 00 00 
f011dd09:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011dd0e:	0f b6 c0             	movzbl %al,%eax
f011dd11:	c1 e0 04             	shl    $0x4,%eax
f011dd14:	89 c2                	mov    %eax,%edx
f011dd16:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dd1c:	01 d0                	add    %edx,%eax
f011dd1e:	48                   	dec    %eax
f011dd1f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011dd25:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dd2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd30:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011dd36:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011dd3c:	29 d0                	sub    %edx,%eax
f011dd3e:	01 d8                	add    %ebx,%eax
f011dd40:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011dd45:	39 c1                	cmp    %eax,%ecx
f011dd47:	74 17                	je     f011dd60 <test_kmalloc_firstfit1+0x133b>
f011dd49:	83 ec 04             	sub    $0x4,%esp
f011dd4c:	68 14 bb 13 f0       	push   $0xf013bb14
f011dd51:	68 80 03 00 00       	push   $0x380
f011dd56:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dd5b:	e8 a5 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd60:	e8 63 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd68:	74 17                	je     f011dd81 <test_kmalloc_firstfit1+0x135c>
f011dd6a:	83 ec 04             	sub    $0x4,%esp
f011dd6d:	68 14 b7 13 f0       	push   $0xf013b714
f011dd72:	68 81 03 00 00       	push   $0x381
f011dd77:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dd7c:	e8 84 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dd81:	e8 2b f2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dd86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dd89:	29 c2                	sub    %eax,%edx
f011dd8b:	89 d0                	mov    %edx,%eax
f011dd8d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dd92:	74 17                	je     f011ddab <test_kmalloc_firstfit1+0x1386>
f011dd94:	83 ec 04             	sub    $0x4,%esp
f011dd97:	68 44 bb 13 f0       	push   $0xf013bb44
f011dd9c:	68 82 03 00 00       	push   $0x382
f011dda1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dda6:	e8 5a 24 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011ddab:	83 ec 0c             	sub    $0xc,%esp
f011ddae:	68 f0 bc 13 f0       	push   $0xf013bcf0
f011ddb3:	e8 56 2f fe ff       	call   f0100d0e <cprintf>
f011ddb8:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ddbb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ddc0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ddc3:	5b                   	pop    %ebx
f011ddc4:	5f                   	pop    %edi
f011ddc5:	5d                   	pop    %ebp
f011ddc6:	c3                   	ret    

f011ddc7 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011ddc7:	55                   	push   %ebp
f011ddc8:	89 e5                	mov    %esp,%ebp
f011ddca:	57                   	push   %edi
f011ddcb:	53                   	push   %ebx
f011ddcc:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011ddd2:	83 ec 0c             	sub    $0xc,%esp
f011ddd5:	68 3c b6 13 f0       	push   $0xf013b63c
f011ddda:	e8 2f 2f fe ff       	call   f0100d0e <cprintf>
f011dddf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dde2:	83 ec 0c             	sub    $0xc,%esp
f011dde5:	68 6c b6 13 f0       	push   $0xf013b66c
f011ddea:	e8 1f 2f fe ff       	call   f0100d0e <cprintf>
f011ddef:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ddf2:	83 ec 0c             	sub    $0xc,%esp
f011ddf5:	68 3c b6 13 f0       	push   $0xf013b63c
f011ddfa:	e8 0f 2f fe ff       	call   f0100d0e <cprintf>
f011ddff:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011de02:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011de08:	b9 14 00 00 00       	mov    $0x14,%ecx
f011de0d:	b8 00 00 00 00       	mov    $0x0,%eax
f011de12:	89 d7                	mov    %edx,%edi
f011de14:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011de16:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011de1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011de20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de25:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011de28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011de2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011de30:	f7 75 f4             	divl   -0xc(%ebp)
f011de33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011de36:	29 d0                	sub    %edx,%eax
f011de38:	89 c1                	mov    %eax,%ecx
f011de3a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011de41:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011de46:	0f b6 d0             	movzbl %al,%edx
f011de49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011de4c:	01 d0                	add    %edx,%eax
f011de4e:	48                   	dec    %eax
f011de4f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011de52:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de55:	ba 00 00 00 00       	mov    $0x0,%edx
f011de5a:	f7 75 ec             	divl   -0x14(%ebp)
f011de5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de60:	29 d0                	sub    %edx,%eax
f011de62:	01 c1                	add    %eax,%ecx
f011de64:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011de6b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011de70:	0f b6 c0             	movzbl %al,%eax
f011de73:	c1 e0 04             	shl    $0x4,%eax
f011de76:	89 c2                	mov    %eax,%edx
f011de78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011de7b:	01 d0                	add    %edx,%eax
f011de7d:	48                   	dec    %eax
f011de7e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011de81:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011de84:	ba 00 00 00 00       	mov    $0x0,%edx
f011de89:	f7 75 e4             	divl   -0x1c(%ebp)
f011de8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011de8f:	29 d0                	sub    %edx,%eax
f011de91:	01 c8                	add    %ecx,%eax
f011de93:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011de98:	29 c2                	sub    %eax,%edx
f011de9a:	89 d0                	mov    %edx,%eax
f011de9c:	83 ec 0c             	sub    $0xc,%esp
f011de9f:	50                   	push   %eax
f011dea0:	e8 e7 9c fe ff       	call   f0107b8c <kmalloc>
f011dea5:	83 c4 10             	add    $0x10,%esp
f011dea8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011deae:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011deb4:	85 c0                	test   %eax,%eax
f011deb6:	74 17                	je     f011decf <test_kmalloc_firstfit2+0x108>
f011deb8:	83 ec 04             	sub    $0x4,%esp
f011debb:	68 3c bd 13 f0       	push   $0xf013bd3c
f011dec0:	68 97 03 00 00       	push   $0x397
f011dec5:	68 fa b6 13 f0       	push   $0xf013b6fa
f011deca:	e8 36 23 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011decf:	e8 dd f0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ded4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ded7:	e8 ec 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dedc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011dedf:	83 ec 0c             	sub    $0xc,%esp
f011dee2:	68 00 fc 1f 00       	push   $0x1ffc00
f011dee7:	e8 a0 9c fe ff       	call   f0107b8c <kmalloc>
f011deec:	83 c4 10             	add    $0x10,%esp
f011deef:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011def5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011defb:	89 c1                	mov    %eax,%ecx
f011defd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011df04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011df07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011df0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011df12:	ba 00 00 00 00       	mov    $0x0,%edx
f011df17:	f7 75 d4             	divl   -0x2c(%ebp)
f011df1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011df1d:	29 d0                	sub    %edx,%eax
f011df1f:	89 c3                	mov    %eax,%ebx
f011df21:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011df28:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011df2d:	0f b6 d0             	movzbl %al,%edx
f011df30:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011df33:	01 d0                	add    %edx,%eax
f011df35:	48                   	dec    %eax
f011df36:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011df39:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011df3c:	ba 00 00 00 00       	mov    $0x0,%edx
f011df41:	f7 75 cc             	divl   -0x34(%ebp)
f011df44:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011df47:	29 d0                	sub    %edx,%eax
f011df49:	01 c3                	add    %eax,%ebx
f011df4b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011df52:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011df57:	0f b6 c0             	movzbl %al,%eax
f011df5a:	c1 e0 04             	shl    $0x4,%eax
f011df5d:	89 c2                	mov    %eax,%edx
f011df5f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011df62:	01 d0                	add    %edx,%eax
f011df64:	48                   	dec    %eax
f011df65:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011df68:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011df6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011df70:	f7 75 c4             	divl   -0x3c(%ebp)
f011df73:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011df76:	29 d0                	sub    %edx,%eax
f011df78:	01 d8                	add    %ebx,%eax
f011df7a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011df7f:	39 c1                	cmp    %eax,%ecx
f011df81:	74 17                	je     f011df9a <test_kmalloc_firstfit2+0x1d3>
f011df83:	83 ec 04             	sub    $0x4,%esp
f011df86:	68 14 bb 13 f0       	push   $0xf013bb14
f011df8b:	68 a1 03 00 00       	push   $0x3a1
f011df90:	68 fa b6 13 f0       	push   $0xf013b6fa
f011df95:	e8 6b 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df9a:	e8 29 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011df9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfa2:	74 17                	je     f011dfbb <test_kmalloc_firstfit2+0x1f4>
f011dfa4:	83 ec 04             	sub    $0x4,%esp
f011dfa7:	68 14 b7 13 f0       	push   $0xf013b714
f011dfac:	68 a2 03 00 00       	push   $0x3a2
f011dfb1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dfb6:	e8 4a 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dfbb:	e8 f1 ef fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dfc0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dfc3:	29 c2                	sub    %eax,%edx
f011dfc5:	89 d0                	mov    %edx,%eax
f011dfc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dfcc:	74 17                	je     f011dfe5 <test_kmalloc_firstfit2+0x21e>
f011dfce:	83 ec 04             	sub    $0x4,%esp
f011dfd1:	68 44 bb 13 f0       	push   $0xf013bb44
f011dfd6:	68 a3 03 00 00       	push   $0x3a3
f011dfdb:	68 fa b6 13 f0       	push   $0xf013b6fa
f011dfe0:	e8 20 22 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dfe5:	e8 c7 ef fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011dfea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfed:	e8 d6 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dff2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011dff5:	83 ec 0c             	sub    $0xc,%esp
f011dff8:	68 00 fc 1f 00       	push   $0x1ffc00
f011dffd:	e8 8a 9b fe ff       	call   f0107b8c <kmalloc>
f011e002:	83 c4 10             	add    $0x10,%esp
f011e005:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011e00b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e011:	89 c1                	mov    %eax,%ecx
f011e013:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e01a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e01d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e022:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e025:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e028:	ba 00 00 00 00       	mov    $0x0,%edx
f011e02d:	f7 75 bc             	divl   -0x44(%ebp)
f011e030:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e033:	29 d0                	sub    %edx,%eax
f011e035:	89 c3                	mov    %eax,%ebx
f011e037:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e03e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e043:	0f b6 d0             	movzbl %al,%edx
f011e046:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e049:	01 d0                	add    %edx,%eax
f011e04b:	48                   	dec    %eax
f011e04c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e04f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e052:	ba 00 00 00 00       	mov    $0x0,%edx
f011e057:	f7 75 b4             	divl   -0x4c(%ebp)
f011e05a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e05d:	29 d0                	sub    %edx,%eax
f011e05f:	01 c3                	add    %eax,%ebx
f011e061:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e068:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e06d:	0f b6 c0             	movzbl %al,%eax
f011e070:	c1 e0 04             	shl    $0x4,%eax
f011e073:	89 c2                	mov    %eax,%edx
f011e075:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e078:	01 d0                	add    %edx,%eax
f011e07a:	48                   	dec    %eax
f011e07b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e07e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e081:	ba 00 00 00 00       	mov    $0x0,%edx
f011e086:	f7 75 ac             	divl   -0x54(%ebp)
f011e089:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e08c:	29 d0                	sub    %edx,%eax
f011e08e:	01 d8                	add    %ebx,%eax
f011e090:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011e095:	39 c1                	cmp    %eax,%ecx
f011e097:	74 17                	je     f011e0b0 <test_kmalloc_firstfit2+0x2e9>
f011e099:	83 ec 04             	sub    $0x4,%esp
f011e09c:	68 14 bb 13 f0       	push   $0xf013bb14
f011e0a1:	68 a9 03 00 00       	push   $0x3a9
f011e0a6:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e0ab:	e8 55 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0b0:	e8 13 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0b8:	74 17                	je     f011e0d1 <test_kmalloc_firstfit2+0x30a>
f011e0ba:	83 ec 04             	sub    $0x4,%esp
f011e0bd:	68 14 b7 13 f0       	push   $0xf013b714
f011e0c2:	68 aa 03 00 00       	push   $0x3aa
f011e0c7:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e0cc:	e8 34 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e0d1:	e8 db ee fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e0d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0d9:	29 c2                	sub    %eax,%edx
f011e0db:	89 d0                	mov    %edx,%eax
f011e0dd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e0e2:	74 17                	je     f011e0fb <test_kmalloc_firstfit2+0x334>
f011e0e4:	83 ec 04             	sub    $0x4,%esp
f011e0e7:	68 44 bb 13 f0       	push   $0xf013bb44
f011e0ec:	68 ab 03 00 00       	push   $0x3ab
f011e0f1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e0f6:	e8 0a 21 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e0fb:	e8 b1 ee fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e100:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e103:	e8 c0 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e108:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e10b:	83 ec 0c             	sub    $0xc,%esp
f011e10e:	68 00 08 00 00       	push   $0x800
f011e113:	e8 74 9a fe ff       	call   f0107b8c <kmalloc>
f011e118:	83 c4 10             	add    $0x10,%esp
f011e11b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e121:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e127:	89 c1                	mov    %eax,%ecx
f011e129:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e130:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e133:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e138:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e13b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e13e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e143:	f7 75 a4             	divl   -0x5c(%ebp)
f011e146:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e149:	29 d0                	sub    %edx,%eax
f011e14b:	89 c3                	mov    %eax,%ebx
f011e14d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e154:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e159:	0f b6 d0             	movzbl %al,%edx
f011e15c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e15f:	01 d0                	add    %edx,%eax
f011e161:	48                   	dec    %eax
f011e162:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e165:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e168:	ba 00 00 00 00       	mov    $0x0,%edx
f011e16d:	f7 75 9c             	divl   -0x64(%ebp)
f011e170:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e173:	29 d0                	sub    %edx,%eax
f011e175:	01 c3                	add    %eax,%ebx
f011e177:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e17e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e183:	0f b6 c0             	movzbl %al,%eax
f011e186:	c1 e0 04             	shl    $0x4,%eax
f011e189:	89 c2                	mov    %eax,%edx
f011e18b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e18e:	01 d0                	add    %edx,%eax
f011e190:	48                   	dec    %eax
f011e191:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e194:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e197:	ba 00 00 00 00       	mov    $0x0,%edx
f011e19c:	f7 75 94             	divl   -0x6c(%ebp)
f011e19f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e1a2:	29 d0                	sub    %edx,%eax
f011e1a4:	01 d8                	add    %ebx,%eax
f011e1a6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e1ab:	39 c1                	cmp    %eax,%ecx
f011e1ad:	73 17                	jae    f011e1c6 <test_kmalloc_firstfit2+0x3ff>
f011e1af:	83 ec 04             	sub    $0x4,%esp
f011e1b2:	68 14 bb 13 f0       	push   $0xf013bb14
f011e1b7:	68 b1 03 00 00       	push   $0x3b1
f011e1bc:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e1c1:	e8 3f 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1c6:	e8 fd 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e1cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e1ce:	74 17                	je     f011e1e7 <test_kmalloc_firstfit2+0x420>
f011e1d0:	83 ec 04             	sub    $0x4,%esp
f011e1d3:	68 14 b7 13 f0       	push   $0xf013b714
f011e1d8:	68 b2 03 00 00       	push   $0x3b2
f011e1dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e1e2:	e8 1e 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e1e7:	e8 c5 ed fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e1ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e1ef:	29 c2                	sub    %eax,%edx
f011e1f1:	89 d0                	mov    %edx,%eax
f011e1f3:	83 f8 01             	cmp    $0x1,%eax
f011e1f6:	74 17                	je     f011e20f <test_kmalloc_firstfit2+0x448>
f011e1f8:	83 ec 04             	sub    $0x4,%esp
f011e1fb:	68 44 bb 13 f0       	push   $0xf013bb44
f011e200:	68 b3 03 00 00       	push   $0x3b3
f011e205:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e20a:	e8 f6 1f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e20f:	e8 9d ed fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e214:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e217:	e8 ac 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e21c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e21f:	83 ec 0c             	sub    $0xc,%esp
f011e222:	68 00 08 00 00       	push   $0x800
f011e227:	e8 60 99 fe ff       	call   f0107b8c <kmalloc>
f011e22c:	83 c4 10             	add    $0x10,%esp
f011e22f:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e235:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e23b:	89 c1                	mov    %eax,%ecx
f011e23d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e244:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e247:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e24c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e24f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e252:	ba 00 00 00 00       	mov    $0x0,%edx
f011e257:	f7 75 8c             	divl   -0x74(%ebp)
f011e25a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e25d:	29 d0                	sub    %edx,%eax
f011e25f:	89 c3                	mov    %eax,%ebx
f011e261:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e268:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e26d:	0f b6 d0             	movzbl %al,%edx
f011e270:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e273:	01 d0                	add    %edx,%eax
f011e275:	48                   	dec    %eax
f011e276:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e279:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e27c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e281:	f7 75 84             	divl   -0x7c(%ebp)
f011e284:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e287:	29 d0                	sub    %edx,%eax
f011e289:	01 c3                	add    %eax,%ebx
f011e28b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e292:	10 00 00 
f011e295:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e29a:	0f b6 c0             	movzbl %al,%eax
f011e29d:	c1 e0 04             	shl    $0x4,%eax
f011e2a0:	89 c2                	mov    %eax,%edx
f011e2a2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e2a8:	01 d0                	add    %edx,%eax
f011e2aa:	48                   	dec    %eax
f011e2ab:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e2b1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e2b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2bc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e2c2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e2c8:	29 d0                	sub    %edx,%eax
f011e2ca:	01 d8                	add    %ebx,%eax
f011e2cc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e2d1:	39 c1                	cmp    %eax,%ecx
f011e2d3:	74 17                	je     f011e2ec <test_kmalloc_firstfit2+0x525>
f011e2d5:	83 ec 04             	sub    $0x4,%esp
f011e2d8:	68 14 bb 13 f0       	push   $0xf013bb14
f011e2dd:	68 b9 03 00 00       	push   $0x3b9
f011e2e2:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e2e7:	e8 19 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2ec:	e8 d7 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2f1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2f4:	74 17                	je     f011e30d <test_kmalloc_firstfit2+0x546>
f011e2f6:	83 ec 04             	sub    $0x4,%esp
f011e2f9:	68 14 b7 13 f0       	push   $0xf013b714
f011e2fe:	68 ba 03 00 00       	push   $0x3ba
f011e303:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e308:	e8 f8 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e30d:	e8 9f ec fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e312:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e315:	29 c2                	sub    %eax,%edx
f011e317:	89 d0                	mov    %edx,%eax
f011e319:	83 f8 01             	cmp    $0x1,%eax
f011e31c:	74 17                	je     f011e335 <test_kmalloc_firstfit2+0x56e>
f011e31e:	83 ec 04             	sub    $0x4,%esp
f011e321:	68 44 bb 13 f0       	push   $0xf013bb44
f011e326:	68 bb 03 00 00       	push   $0x3bb
f011e32b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e330:	e8 d0 1e fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e335:	e8 77 ec fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e33a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e33d:	e8 86 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e342:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e345:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e34b:	83 ec 0c             	sub    $0xc,%esp
f011e34e:	50                   	push   %eax
f011e34f:	e8 03 99 fe ff       	call   f0107c57 <kfree>
f011e354:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e357:	e8 6c 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e35c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e35f:	74 17                	je     f011e378 <test_kmalloc_firstfit2+0x5b1>
f011e361:	83 ec 04             	sub    $0x4,%esp
f011e364:	68 14 b7 13 f0       	push   $0xf013b714
f011e369:	68 c1 03 00 00       	push   $0x3c1
f011e36e:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e373:	e8 8d 1e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e378:	e8 34 ec fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e37d:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e380:	83 f8 01             	cmp    $0x1,%eax
f011e383:	74 17                	je     f011e39c <test_kmalloc_firstfit2+0x5d5>
f011e385:	83 ec 04             	sub    $0x4,%esp
f011e388:	68 57 bb 13 f0       	push   $0xf013bb57
f011e38d:	68 c2 03 00 00       	push   $0x3c2
f011e392:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e397:	e8 69 1e fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e39c:	e8 10 ec fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e3a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e3a4:	e8 1f 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e3a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e3ac:	83 ec 0c             	sub    $0xc,%esp
f011e3af:	68 00 1c 00 00       	push   $0x1c00
f011e3b4:	e8 d3 97 fe ff       	call   f0107b8c <kmalloc>
f011e3b9:	83 c4 10             	add    $0x10,%esp
f011e3bc:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e3c2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e3c8:	89 c1                	mov    %eax,%ecx
f011e3ca:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e3d1:	10 00 00 
f011e3d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e3da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e3df:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e3e5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3f0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e3f6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3fc:	29 d0                	sub    %edx,%eax
f011e3fe:	89 c3                	mov    %eax,%ebx
f011e400:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e407:	10 00 00 
f011e40a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e40f:	0f b6 d0             	movzbl %al,%edx
f011e412:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e418:	01 d0                	add    %edx,%eax
f011e41a:	48                   	dec    %eax
f011e41b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e421:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e427:	ba 00 00 00 00       	mov    $0x0,%edx
f011e42c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e432:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e438:	29 d0                	sub    %edx,%eax
f011e43a:	01 c3                	add    %eax,%ebx
f011e43c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e443:	10 00 00 
f011e446:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e44b:	0f b6 c0             	movzbl %al,%eax
f011e44e:	c1 e0 04             	shl    $0x4,%eax
f011e451:	89 c2                	mov    %eax,%edx
f011e453:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e459:	01 d0                	add    %edx,%eax
f011e45b:	48                   	dec    %eax
f011e45c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e462:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e468:	ba 00 00 00 00       	mov    $0x0,%edx
f011e46d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e473:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e479:	29 d0                	sub    %edx,%eax
f011e47b:	01 d8                	add    %ebx,%eax
f011e47d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e482:	39 c1                	cmp    %eax,%ecx
f011e484:	74 17                	je     f011e49d <test_kmalloc_firstfit2+0x6d6>
f011e486:	83 ec 04             	sub    $0x4,%esp
f011e489:	68 14 bb 13 f0       	push   $0xf013bb14
f011e48e:	68 c8 03 00 00       	push   $0x3c8
f011e493:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e498:	e8 68 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e49d:	e8 26 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e4a2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e4a5:	74 17                	je     f011e4be <test_kmalloc_firstfit2+0x6f7>
f011e4a7:	83 ec 04             	sub    $0x4,%esp
f011e4aa:	68 14 b7 13 f0       	push   $0xf013b714
f011e4af:	68 c9 03 00 00       	push   $0x3c9
f011e4b4:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e4b9:	e8 47 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e4be:	e8 ee ea fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e4c3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e4c6:	29 c2                	sub    %eax,%edx
f011e4c8:	89 d0                	mov    %edx,%eax
f011e4ca:	83 f8 02             	cmp    $0x2,%eax
f011e4cd:	74 17                	je     f011e4e6 <test_kmalloc_firstfit2+0x71f>
f011e4cf:	83 ec 04             	sub    $0x4,%esp
f011e4d2:	68 44 bb 13 f0       	push   $0xf013bb44
f011e4d7:	68 ca 03 00 00       	push   $0x3ca
f011e4dc:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e4e1:	e8 1f 1d fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e4e6:	e8 c6 ea fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e4eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4ee:	e8 d5 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e4f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e4f6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e4fc:	83 ec 0c             	sub    $0xc,%esp
f011e4ff:	50                   	push   %eax
f011e500:	e8 52 97 fe ff       	call   f0107c57 <kfree>
f011e505:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e508:	e8 bb 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e50d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e510:	74 17                	je     f011e529 <test_kmalloc_firstfit2+0x762>
f011e512:	83 ec 04             	sub    $0x4,%esp
f011e515:	68 14 b7 13 f0       	push   $0xf013b714
f011e51a:	68 d0 03 00 00       	push   $0x3d0
f011e51f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e524:	e8 dc 1c fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e529:	e8 83 ea fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e52e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e531:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e536:	74 17                	je     f011e54f <test_kmalloc_firstfit2+0x788>
f011e538:	83 ec 04             	sub    $0x4,%esp
f011e53b:	68 57 bb 13 f0       	push   $0xf013bb57
f011e540:	68 d1 03 00 00       	push   $0x3d1
f011e545:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e54a:	e8 b6 1c fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e54f:	e8 5d ea fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e554:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e557:	e8 6c 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e55c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e55f:	83 ec 0c             	sub    $0xc,%esp
f011e562:	68 00 fc 2f 00       	push   $0x2ffc00
f011e567:	e8 20 96 fe ff       	call   f0107b8c <kmalloc>
f011e56c:	83 c4 10             	add    $0x10,%esp
f011e56f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e575:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e57b:	89 c1                	mov    %eax,%ecx
f011e57d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e584:	10 00 00 
f011e587:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e58d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e592:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e598:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e59e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5a3:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e5a9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e5af:	29 d0                	sub    %edx,%eax
f011e5b1:	89 c3                	mov    %eax,%ebx
f011e5b3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e5ba:	10 00 00 
f011e5bd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e5c2:	0f b6 d0             	movzbl %al,%edx
f011e5c5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e5cb:	01 d0                	add    %edx,%eax
f011e5cd:	48                   	dec    %eax
f011e5ce:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e5d4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e5da:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5df:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e5e5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e5eb:	29 d0                	sub    %edx,%eax
f011e5ed:	01 c3                	add    %eax,%ebx
f011e5ef:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e5f6:	10 00 00 
f011e5f9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e5fe:	0f b6 c0             	movzbl %al,%eax
f011e601:	c1 e0 04             	shl    $0x4,%eax
f011e604:	89 c2                	mov    %eax,%edx
f011e606:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e60c:	01 d0                	add    %edx,%eax
f011e60e:	48                   	dec    %eax
f011e60f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e615:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e61b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e620:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e626:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e62c:	29 d0                	sub    %edx,%eax
f011e62e:	01 d8                	add    %ebx,%eax
f011e630:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e635:	39 c1                	cmp    %eax,%ecx
f011e637:	74 17                	je     f011e650 <test_kmalloc_firstfit2+0x889>
f011e639:	83 ec 04             	sub    $0x4,%esp
f011e63c:	68 14 bb 13 f0       	push   $0xf013bb14
f011e641:	68 d7 03 00 00       	push   $0x3d7
f011e646:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e64b:	e8 b5 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e650:	e8 73 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e655:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e658:	74 17                	je     f011e671 <test_kmalloc_firstfit2+0x8aa>
f011e65a:	83 ec 04             	sub    $0x4,%esp
f011e65d:	68 14 b7 13 f0       	push   $0xf013b714
f011e662:	68 d8 03 00 00       	push   $0x3d8
f011e667:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e66c:	e8 94 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e671:	e8 3b e9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e676:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e679:	29 c2                	sub    %eax,%edx
f011e67b:	89 d0                	mov    %edx,%eax
f011e67d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e682:	74 17                	je     f011e69b <test_kmalloc_firstfit2+0x8d4>
f011e684:	83 ec 04             	sub    $0x4,%esp
f011e687:	68 44 bb 13 f0       	push   $0xf013bb44
f011e68c:	68 d9 03 00 00       	push   $0x3d9
f011e691:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e696:	e8 6a 1b fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e69b:	e8 11 e9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e6a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6a3:	e8 20 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e6ab:	83 ec 0c             	sub    $0xc,%esp
f011e6ae:	68 00 18 20 00       	push   $0x201800
f011e6b3:	e8 d4 94 fe ff       	call   f0107b8c <kmalloc>
f011e6b8:	83 c4 10             	add    $0x10,%esp
f011e6bb:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e6c1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e6c7:	89 c1                	mov    %eax,%ecx
f011e6c9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e6d0:	10 00 00 
f011e6d3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e6d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e6e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e6ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6ef:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e6f5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e6fb:	29 d0                	sub    %edx,%eax
f011e6fd:	89 c3                	mov    %eax,%ebx
f011e6ff:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e706:	10 00 00 
f011e709:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e70e:	0f b6 d0             	movzbl %al,%edx
f011e711:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e717:	01 d0                	add    %edx,%eax
f011e719:	48                   	dec    %eax
f011e71a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e720:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e726:	ba 00 00 00 00       	mov    $0x0,%edx
f011e72b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e731:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e737:	29 d0                	sub    %edx,%eax
f011e739:	01 c3                	add    %eax,%ebx
f011e73b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e742:	10 00 00 
f011e745:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e74a:	0f b6 c0             	movzbl %al,%eax
f011e74d:	c1 e0 04             	shl    $0x4,%eax
f011e750:	89 c2                	mov    %eax,%edx
f011e752:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e758:	01 d0                	add    %edx,%eax
f011e75a:	48                   	dec    %eax
f011e75b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e761:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e767:	ba 00 00 00 00       	mov    $0x0,%edx
f011e76c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e772:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e778:	29 d0                	sub    %edx,%eax
f011e77a:	01 d8                	add    %ebx,%eax
f011e77c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e781:	39 c1                	cmp    %eax,%ecx
f011e783:	74 17                	je     f011e79c <test_kmalloc_firstfit2+0x9d5>
f011e785:	83 ec 04             	sub    $0x4,%esp
f011e788:	68 14 bb 13 f0       	push   $0xf013bb14
f011e78d:	68 df 03 00 00       	push   $0x3df
f011e792:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e797:	e8 69 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e79c:	e8 27 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e7a1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7a4:	74 17                	je     f011e7bd <test_kmalloc_firstfit2+0x9f6>
f011e7a6:	83 ec 04             	sub    $0x4,%esp
f011e7a9:	68 14 b7 13 f0       	push   $0xf013b714
f011e7ae:	68 e0 03 00 00       	push   $0x3e0
f011e7b3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e7b8:	e8 48 1a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e7bd:	e8 ef e7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e7c2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e7c5:	29 c2                	sub    %eax,%edx
f011e7c7:	89 d0                	mov    %edx,%eax
f011e7c9:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e7ce:	74 17                	je     f011e7e7 <test_kmalloc_firstfit2+0xa20>
f011e7d0:	83 ec 04             	sub    $0x4,%esp
f011e7d3:	68 44 bb 13 f0       	push   $0xf013bb44
f011e7d8:	68 e1 03 00 00       	push   $0x3e1
f011e7dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e7e2:	e8 1e 1a fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e7e7:	e8 c5 e7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e7ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7ef:	e8 d4 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e7f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e7f7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e7fd:	83 ec 0c             	sub    $0xc,%esp
f011e800:	50                   	push   %eax
f011e801:	e8 51 94 fe ff       	call   f0107c57 <kfree>
f011e806:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e809:	e8 ba 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e80e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e811:	74 17                	je     f011e82a <test_kmalloc_firstfit2+0xa63>
f011e813:	83 ec 04             	sub    $0x4,%esp
f011e816:	68 14 b7 13 f0       	push   $0xf013b714
f011e81b:	68 e7 03 00 00       	push   $0x3e7
f011e820:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e825:	e8 db 19 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e82a:	e8 82 e7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e82f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e832:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e837:	74 17                	je     f011e850 <test_kmalloc_firstfit2+0xa89>
f011e839:	83 ec 04             	sub    $0x4,%esp
f011e83c:	68 57 bb 13 f0       	push   $0xf013bb57
f011e841:	68 e8 03 00 00       	push   $0x3e8
f011e846:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e84b:	e8 b5 19 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e850:	e8 5c e7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e855:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e858:	e8 6b 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e85d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e860:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e866:	83 ec 0c             	sub    $0xc,%esp
f011e869:	50                   	push   %eax
f011e86a:	e8 e8 93 fe ff       	call   f0107c57 <kfree>
f011e86f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e872:	e8 3a e7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e877:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e87a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e87f:	74 17                	je     f011e898 <test_kmalloc_firstfit2+0xad1>
f011e881:	83 ec 04             	sub    $0x4,%esp
f011e884:	68 57 bb 13 f0       	push   $0xf013bb57
f011e889:	68 ee 03 00 00       	push   $0x3ee
f011e88e:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e893:	e8 6d 19 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e898:	e8 2b 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e89d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e8a0:	74 17                	je     f011e8b9 <test_kmalloc_firstfit2+0xaf2>
f011e8a2:	83 ec 04             	sub    $0x4,%esp
f011e8a5:	68 14 b7 13 f0       	push   $0xf013b714
f011e8aa:	68 ef 03 00 00       	push   $0x3ef
f011e8af:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e8b4:	e8 4c 19 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e8b9:	e8 f3 e6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e8be:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e8c1:	e8 02 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e8c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e8c9:	83 ec 0c             	sub    $0xc,%esp
f011e8cc:	68 00 fc 4f 00       	push   $0x4ffc00
f011e8d1:	e8 b6 92 fe ff       	call   f0107b8c <kmalloc>
f011e8d6:	83 c4 10             	add    $0x10,%esp
f011e8d9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e8df:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e8e5:	89 c1                	mov    %eax,%ecx
f011e8e7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e8ee:	10 00 00 
f011e8f1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e8f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8fc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e902:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e908:	ba 00 00 00 00       	mov    $0x0,%edx
f011e90d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e913:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e919:	29 d0                	sub    %edx,%eax
f011e91b:	89 c3                	mov    %eax,%ebx
f011e91d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e924:	10 00 00 
f011e927:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e92c:	0f b6 d0             	movzbl %al,%edx
f011e92f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e935:	01 d0                	add    %edx,%eax
f011e937:	48                   	dec    %eax
f011e938:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e93e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e944:	ba 00 00 00 00       	mov    $0x0,%edx
f011e949:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e94f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e955:	29 d0                	sub    %edx,%eax
f011e957:	01 c3                	add    %eax,%ebx
f011e959:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e960:	10 00 00 
f011e963:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011e968:	0f b6 c0             	movzbl %al,%eax
f011e96b:	c1 e0 04             	shl    $0x4,%eax
f011e96e:	89 c2                	mov    %eax,%edx
f011e970:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e976:	01 d0                	add    %edx,%eax
f011e978:	48                   	dec    %eax
f011e979:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e97f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e985:	ba 00 00 00 00       	mov    $0x0,%edx
f011e98a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e990:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e996:	29 d0                	sub    %edx,%eax
f011e998:	01 d8                	add    %ebx,%eax
f011e99a:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e99f:	39 c1                	cmp    %eax,%ecx
f011e9a1:	74 17                	je     f011e9ba <test_kmalloc_firstfit2+0xbf3>
f011e9a3:	83 ec 04             	sub    $0x4,%esp
f011e9a6:	68 14 bb 13 f0       	push   $0xf013bb14
f011e9ab:	68 f5 03 00 00       	push   $0x3f5
f011e9b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e9b5:	e8 4b 18 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9ba:	e8 09 54 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e9bf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e9c2:	74 17                	je     f011e9db <test_kmalloc_firstfit2+0xc14>
f011e9c4:	83 ec 04             	sub    $0x4,%esp
f011e9c7:	68 14 b7 13 f0       	push   $0xf013b714
f011e9cc:	68 f6 03 00 00       	push   $0x3f6
f011e9d1:	68 fa b6 13 f0       	push   $0xf013b6fa
f011e9d6:	e8 2a 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e9db:	e8 d1 e5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011e9e0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e9e3:	29 c2                	sub    %eax,%edx
f011e9e5:	89 d0                	mov    %edx,%eax
f011e9e7:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e9ec:	74 17                	je     f011ea05 <test_kmalloc_firstfit2+0xc3e>
f011e9ee:	83 ec 04             	sub    $0x4,%esp
f011e9f1:	68 44 bb 13 f0       	push   $0xf013bb44
f011e9f6:	68 f7 03 00 00       	push   $0x3f7
f011e9fb:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ea00:	e8 00 18 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ea05:	e8 a7 e5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ea0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ea0d:	e8 b6 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea12:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ea15:	83 ec 0c             	sub    $0xc,%esp
f011ea18:	68 00 fc 2f 00       	push   $0x2ffc00
f011ea1d:	e8 6a 91 fe ff       	call   f0107b8c <kmalloc>
f011ea22:	83 c4 10             	add    $0x10,%esp
f011ea25:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ea2b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ea31:	89 c1                	mov    %eax,%ecx
f011ea33:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ea3a:	10 00 00 
f011ea3d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ea43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea48:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ea4e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ea54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea59:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ea5f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ea65:	29 d0                	sub    %edx,%eax
f011ea67:	89 c3                	mov    %eax,%ebx
f011ea69:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ea70:	10 00 00 
f011ea73:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ea78:	0f b6 d0             	movzbl %al,%edx
f011ea7b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ea81:	01 d0                	add    %edx,%eax
f011ea83:	48                   	dec    %eax
f011ea84:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ea8a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ea90:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea95:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011ea9b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011eaa1:	29 d0                	sub    %edx,%eax
f011eaa3:	01 c3                	add    %eax,%ebx
f011eaa5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011eaac:	10 00 00 
f011eaaf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011eab4:	0f b6 c0             	movzbl %al,%eax
f011eab7:	c1 e0 04             	shl    $0x4,%eax
f011eaba:	89 c2                	mov    %eax,%edx
f011eabc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eac2:	01 d0                	add    %edx,%eax
f011eac4:	48                   	dec    %eax
f011eac5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011eacb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ead1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ead6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011eadc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011eae2:	29 d0                	sub    %edx,%eax
f011eae4:	01 d8                	add    %ebx,%eax
f011eae6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011eaeb:	39 c1                	cmp    %eax,%ecx
f011eaed:	74 17                	je     f011eb06 <test_kmalloc_firstfit2+0xd3f>
f011eaef:	83 ec 04             	sub    $0x4,%esp
f011eaf2:	68 14 bb 13 f0       	push   $0xf013bb14
f011eaf7:	68 05 04 00 00       	push   $0x405
f011eafc:	68 fa b6 13 f0       	push   $0xf013b6fa
f011eb01:	e8 ff 16 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb06:	e8 bd 52 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011eb0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eb0e:	74 17                	je     f011eb27 <test_kmalloc_firstfit2+0xd60>
f011eb10:	83 ec 04             	sub    $0x4,%esp
f011eb13:	68 14 b7 13 f0       	push   $0xf013b714
f011eb18:	68 06 04 00 00       	push   $0x406
f011eb1d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011eb22:	e8 de 16 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011eb27:	e8 85 e4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011eb2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eb2f:	29 c2                	sub    %eax,%edx
f011eb31:	89 d0                	mov    %edx,%eax
f011eb33:	3d 00 03 00 00       	cmp    $0x300,%eax
f011eb38:	74 17                	je     f011eb51 <test_kmalloc_firstfit2+0xd8a>
f011eb3a:	83 ec 04             	sub    $0x4,%esp
f011eb3d:	68 44 bb 13 f0       	push   $0xf013bb44
f011eb42:	68 07 04 00 00       	push   $0x407
f011eb47:	68 fa b6 13 f0       	push   $0xf013b6fa
f011eb4c:	e8 b4 16 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011eb51:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011eb58:	10 00 00 
f011eb5b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eb61:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb66:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011eb6c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eb72:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb77:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011eb7d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eb83:	29 d0                	sub    %edx,%eax
f011eb85:	89 c1                	mov    %eax,%ecx
f011eb87:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011eb8e:	10 00 00 
f011eb91:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011eb96:	0f b6 d0             	movzbl %al,%edx
f011eb99:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eb9f:	01 d0                	add    %edx,%eax
f011eba1:	48                   	dec    %eax
f011eba2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011eba8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ebae:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebb3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ebb9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ebbf:	29 d0                	sub    %edx,%eax
f011ebc1:	01 c1                	add    %eax,%ecx
f011ebc3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ebca:	10 00 00 
f011ebcd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ebd2:	0f b6 c0             	movzbl %al,%eax
f011ebd5:	c1 e0 04             	shl    $0x4,%eax
f011ebd8:	89 c2                	mov    %eax,%edx
f011ebda:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ebe0:	01 d0                	add    %edx,%eax
f011ebe2:	48                   	dec    %eax
f011ebe3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ebe9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ebef:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebf4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ebfa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ec00:	29 d0                	sub    %edx,%eax
f011ec02:	01 c8                	add    %ecx,%eax
f011ec04:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011ec09:	29 c2                	sub    %eax,%edx
f011ec0b:	89 d0                	mov    %edx,%eax
f011ec0d:	83 ec 0c             	sub    $0xc,%esp
f011ec10:	50                   	push   %eax
f011ec11:	e8 76 8f fe ff       	call   f0107b8c <kmalloc>
f011ec16:	83 c4 10             	add    $0x10,%esp
f011ec19:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011ec1f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ec25:	85 c0                	test   %eax,%eax
f011ec27:	74 17                	je     f011ec40 <test_kmalloc_firstfit2+0xe79>
f011ec29:	83 ec 04             	sub    $0x4,%esp
f011ec2c:	68 44 bc 13 f0       	push   $0xf013bc44
f011ec31:	68 0d 04 00 00       	push   $0x40d
f011ec36:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ec3b:	e8 c5 15 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011ec40:	83 ec 0c             	sub    $0xc,%esp
f011ec43:	68 84 bd 13 f0       	push   $0xf013bd84
f011ec48:	e8 c1 20 fe ff       	call   f0100d0e <cprintf>
f011ec4d:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ec50:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ec55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ec58:	5b                   	pop    %ebx
f011ec59:	5f                   	pop    %edi
f011ec5a:	5d                   	pop    %ebp
f011ec5b:	c3                   	ret    

f011ec5c <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011ec5c:	55                   	push   %ebp
f011ec5d:	89 e5                	mov    %esp,%ebp
f011ec5f:	57                   	push   %edi
f011ec60:	53                   	push   %ebx
f011ec61:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011ec67:	83 ec 0c             	sub    $0xc,%esp
f011ec6a:	68 3c b6 13 f0       	push   $0xf013b63c
f011ec6f:	e8 9a 20 fe ff       	call   f0100d0e <cprintf>
f011ec74:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ec77:	83 ec 0c             	sub    $0xc,%esp
f011ec7a:	68 6c b6 13 f0       	push   $0xf013b66c
f011ec7f:	e8 8a 20 fe ff       	call   f0100d0e <cprintf>
f011ec84:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ec87:	83 ec 0c             	sub    $0xc,%esp
f011ec8a:	68 3c b6 13 f0       	push   $0xf013b63c
f011ec8f:	e8 7a 20 fe ff       	call   f0100d0e <cprintf>
f011ec94:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011ec97:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011ec9d:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011eca2:	b8 00 00 00 00       	mov    $0x0,%eax
f011eca7:	89 d7                	mov    %edx,%edi
f011eca9:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011ecab:	e8 01 e3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ecb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011ecb3:	e8 10 51 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ecb8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011ecbb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011ecc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ecc9:	eb 1f                	jmp    f011ecea <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011eccb:	83 ec 0c             	sub    $0xc,%esp
f011ecce:	68 00 00 20 00       	push   $0x200000
f011ecd3:	e8 b4 8e fe ff       	call   f0107b8c <kmalloc>
f011ecd8:	83 c4 10             	add    $0x10,%esp
f011ecdb:	89 c2                	mov    %eax,%edx
f011ecdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ece0:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011ece7:	ff 45 f4             	incl   -0xc(%ebp)
f011ecea:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011ecee:	7e db                	jle    f011eccb <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ecf0:	83 ec 0c             	sub    $0xc,%esp
f011ecf3:	68 00 b0 1f 00       	push   $0x1fb000
f011ecf8:	e8 8f 8e fe ff       	call   f0107b8c <kmalloc>
f011ecfd:	83 c4 10             	add    $0x10,%esp
f011ed00:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ed06:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011ed0c:	89 c1                	mov    %eax,%ecx
f011ed0e:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ed15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ed18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ed20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ed23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed28:	f7 75 e4             	divl   -0x1c(%ebp)
f011ed2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ed2e:	29 d0                	sub    %edx,%eax
f011ed30:	89 c3                	mov    %eax,%ebx
f011ed32:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ed39:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ed3e:	0f b6 d0             	movzbl %al,%edx
f011ed41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ed44:	01 d0                	add    %edx,%eax
f011ed46:	48                   	dec    %eax
f011ed47:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ed4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ed4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed52:	f7 75 dc             	divl   -0x24(%ebp)
f011ed55:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ed58:	29 d0                	sub    %edx,%eax
f011ed5a:	01 c3                	add    %eax,%ebx
f011ed5c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ed63:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ed68:	0f b6 c0             	movzbl %al,%eax
f011ed6b:	c1 e0 04             	shl    $0x4,%eax
f011ed6e:	89 c2                	mov    %eax,%edx
f011ed70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ed73:	01 d0                	add    %edx,%eax
f011ed75:	48                   	dec    %eax
f011ed76:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ed79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ed7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed81:	f7 75 d4             	divl   -0x2c(%ebp)
f011ed84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ed87:	29 d0                	sub    %edx,%eax
f011ed89:	01 d8                	add    %ebx,%eax
f011ed8b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ed90:	39 c1                	cmp    %eax,%ecx
f011ed92:	0f 85 c0 04 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ed98:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011ed9e:	89 c1                	mov    %eax,%ecx
f011eda0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011eda7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011edaa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edaf:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011edb2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011edb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011edba:	f7 75 cc             	divl   -0x34(%ebp)
f011edbd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011edc0:	29 d0                	sub    %edx,%eax
f011edc2:	89 c3                	mov    %eax,%ebx
f011edc4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011edcb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011edd0:	0f b6 d0             	movzbl %al,%edx
f011edd3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011edd6:	01 d0                	add    %edx,%eax
f011edd8:	48                   	dec    %eax
f011edd9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011eddc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011eddf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ede4:	f7 75 c4             	divl   -0x3c(%ebp)
f011ede7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011edea:	29 d0                	sub    %edx,%eax
f011edec:	01 c3                	add    %eax,%ebx
f011edee:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011edf5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011edfa:	0f b6 c0             	movzbl %al,%eax
f011edfd:	c1 e0 04             	shl    $0x4,%eax
f011ee00:	89 c2                	mov    %eax,%edx
f011ee02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ee05:	01 d0                	add    %edx,%eax
f011ee07:	48                   	dec    %eax
f011ee08:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ee0b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ee0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee13:	f7 75 bc             	divl   -0x44(%ebp)
f011ee16:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ee19:	29 d0                	sub    %edx,%eax
f011ee1b:	01 d8                	add    %ebx,%eax
f011ee1d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ee22:	39 c1                	cmp    %eax,%ecx
f011ee24:	0f 85 2e 04 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ee2a:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ee30:	89 c1                	mov    %eax,%ecx
f011ee32:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ee39:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ee3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee41:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ee44:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ee47:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee4c:	f7 75 b4             	divl   -0x4c(%ebp)
f011ee4f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ee52:	29 d0                	sub    %edx,%eax
f011ee54:	89 c3                	mov    %eax,%ebx
f011ee56:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ee5d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ee62:	0f b6 d0             	movzbl %al,%edx
f011ee65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ee68:	01 d0                	add    %edx,%eax
f011ee6a:	48                   	dec    %eax
f011ee6b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ee6e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ee71:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee76:	f7 75 ac             	divl   -0x54(%ebp)
f011ee79:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ee7c:	29 d0                	sub    %edx,%eax
f011ee7e:	01 c3                	add    %eax,%ebx
f011ee80:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ee87:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ee8c:	0f b6 c0             	movzbl %al,%eax
f011ee8f:	c1 e0 04             	shl    $0x4,%eax
f011ee92:	89 c2                	mov    %eax,%edx
f011ee94:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ee97:	01 d0                	add    %edx,%eax
f011ee99:	48                   	dec    %eax
f011ee9a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ee9d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eea0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eea5:	f7 75 a4             	divl   -0x5c(%ebp)
f011eea8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eeab:	29 d0                	sub    %edx,%eax
f011eead:	01 d8                	add    %ebx,%eax
f011eeaf:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011eeb4:	39 c1                	cmp    %eax,%ecx
f011eeb6:	0f 85 9c 03 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eebc:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011eec2:	89 c1                	mov    %eax,%ecx
f011eec4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011eecb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011eece:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eed3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011eed6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011eed9:	ba 00 00 00 00       	mov    $0x0,%edx
f011eede:	f7 75 9c             	divl   -0x64(%ebp)
f011eee1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011eee4:	29 d0                	sub    %edx,%eax
f011eee6:	89 c3                	mov    %eax,%ebx
f011eee8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011eeef:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011eef4:	0f b6 d0             	movzbl %al,%edx
f011eef7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011eefa:	01 d0                	add    %edx,%eax
f011eefc:	48                   	dec    %eax
f011eefd:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ef00:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ef03:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef08:	f7 75 94             	divl   -0x6c(%ebp)
f011ef0b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ef0e:	29 d0                	sub    %edx,%eax
f011ef10:	01 c3                	add    %eax,%ebx
f011ef12:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ef19:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ef1e:	0f b6 c0             	movzbl %al,%eax
f011ef21:	c1 e0 04             	shl    $0x4,%eax
f011ef24:	89 c2                	mov    %eax,%edx
f011ef26:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ef29:	01 d0                	add    %edx,%eax
f011ef2b:	48                   	dec    %eax
f011ef2c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ef2f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ef32:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef37:	f7 75 8c             	divl   -0x74(%ebp)
f011ef3a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ef3d:	29 d0                	sub    %edx,%eax
f011ef3f:	01 d8                	add    %ebx,%eax
f011ef41:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ef46:	39 c1                	cmp    %eax,%ecx
f011ef48:	0f 85 0a 03 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ef4e:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011ef54:	89 c1                	mov    %eax,%ecx
f011ef56:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ef5d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ef60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef65:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ef68:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ef6b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef70:	f7 75 84             	divl   -0x7c(%ebp)
f011ef73:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ef76:	29 d0                	sub    %edx,%eax
f011ef78:	89 c3                	mov    %eax,%ebx
f011ef7a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ef81:	10 00 00 
f011ef84:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ef89:	0f b6 d0             	movzbl %al,%edx
f011ef8c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ef92:	01 d0                	add    %edx,%eax
f011ef94:	48                   	dec    %eax
f011ef95:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ef9b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011efa1:	ba 00 00 00 00       	mov    $0x0,%edx
f011efa6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011efac:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011efb2:	29 d0                	sub    %edx,%eax
f011efb4:	01 c3                	add    %eax,%ebx
f011efb6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011efbd:	10 00 00 
f011efc0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011efc5:	0f b6 c0             	movzbl %al,%eax
f011efc8:	c1 e0 04             	shl    $0x4,%eax
f011efcb:	89 c2                	mov    %eax,%edx
f011efcd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011efd3:	01 d0                	add    %edx,%eax
f011efd5:	48                   	dec    %eax
f011efd6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011efdc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011efe2:	ba 00 00 00 00       	mov    $0x0,%edx
f011efe7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011efed:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eff3:	29 d0                	sub    %edx,%eax
f011eff5:	01 d8                	add    %ebx,%eax
f011eff7:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011effc:	39 c1                	cmp    %eax,%ecx
f011effe:	0f 85 54 02 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f004:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011f00a:	89 c1                	mov    %eax,%ecx
f011f00c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f013:	10 00 00 
f011f016:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f01c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f021:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f027:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f02d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f032:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f038:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f03e:	29 d0                	sub    %edx,%eax
f011f040:	89 c3                	mov    %eax,%ebx
f011f042:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f049:	10 00 00 
f011f04c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f051:	0f b6 d0             	movzbl %al,%edx
f011f054:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f05a:	01 d0                	add    %edx,%eax
f011f05c:	48                   	dec    %eax
f011f05d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f063:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f069:	ba 00 00 00 00       	mov    $0x0,%edx
f011f06e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f074:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f07a:	29 d0                	sub    %edx,%eax
f011f07c:	01 c3                	add    %eax,%ebx
f011f07e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f085:	10 00 00 
f011f088:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f08d:	0f b6 c0             	movzbl %al,%eax
f011f090:	c1 e0 04             	shl    $0x4,%eax
f011f093:	89 c2                	mov    %eax,%edx
f011f095:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f09b:	01 d0                	add    %edx,%eax
f011f09d:	48                   	dec    %eax
f011f09e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f0a4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f0aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0af:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f0b5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f0bb:	29 d0                	sub    %edx,%eax
f011f0bd:	01 d8                	add    %ebx,%eax
f011f0bf:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f0c4:	39 c1                	cmp    %eax,%ecx
f011f0c6:	0f 85 8c 01 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f0cc:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f0d2:	89 c1                	mov    %eax,%ecx
f011f0d4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f0db:	10 00 00 
f011f0de:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f0e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0e9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f0ef:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f0f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0fa:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f100:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f106:	29 d0                	sub    %edx,%eax
f011f108:	89 c3                	mov    %eax,%ebx
f011f10a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f111:	10 00 00 
f011f114:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f119:	0f b6 d0             	movzbl %al,%edx
f011f11c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f122:	01 d0                	add    %edx,%eax
f011f124:	48                   	dec    %eax
f011f125:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f12b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f131:	ba 00 00 00 00       	mov    $0x0,%edx
f011f136:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f13c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f142:	29 d0                	sub    %edx,%eax
f011f144:	01 c3                	add    %eax,%ebx
f011f146:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f14d:	10 00 00 
f011f150:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f155:	0f b6 c0             	movzbl %al,%eax
f011f158:	c1 e0 04             	shl    $0x4,%eax
f011f15b:	89 c2                	mov    %eax,%edx
f011f15d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f163:	01 d0                	add    %edx,%eax
f011f165:	48                   	dec    %eax
f011f166:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f16c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f172:	ba 00 00 00 00       	mov    $0x0,%edx
f011f177:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f17d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f183:	29 d0                	sub    %edx,%eax
f011f185:	01 d8                	add    %ebx,%eax
f011f187:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f18c:	39 c1                	cmp    %eax,%ecx
f011f18e:	0f 85 c4 00 00 00    	jne    f011f258 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f194:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f19a:	89 c1                	mov    %eax,%ecx
f011f19c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f1a3:	10 00 00 
f011f1a6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f1ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1b1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f1b7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f1bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1c2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f1c8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f1ce:	29 d0                	sub    %edx,%eax
f011f1d0:	89 c3                	mov    %eax,%ebx
f011f1d2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f1d9:	10 00 00 
f011f1dc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f1e1:	0f b6 d0             	movzbl %al,%edx
f011f1e4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f1ea:	01 d0                	add    %edx,%eax
f011f1ec:	48                   	dec    %eax
f011f1ed:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f1f3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f1f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1fe:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f204:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f20a:	29 d0                	sub    %edx,%eax
f011f20c:	01 c3                	add    %eax,%ebx
f011f20e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f215:	10 00 00 
f011f218:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f21d:	0f b6 c0             	movzbl %al,%eax
f011f220:	c1 e0 04             	shl    $0x4,%eax
f011f223:	89 c2                	mov    %eax,%edx
f011f225:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f22b:	01 d0                	add    %edx,%eax
f011f22d:	48                   	dec    %eax
f011f22e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f234:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f23a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f23f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f245:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f24b:	29 d0                	sub    %edx,%eax
f011f24d:	01 d8                	add    %ebx,%eax
f011f24f:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f254:	39 c1                	cmp    %eax,%ecx
f011f256:	74 17                	je     f011f26f <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f258:	83 ec 04             	sub    $0x4,%esp
f011f25b:	68 d0 bd 13 f0       	push   $0xf013bdd0
f011f260:	68 31 04 00 00       	push   $0x431
f011f265:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f26a:	e8 96 0f fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f26f:	e8 54 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f274:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f277:	74 17                	je     f011f290 <test_kmalloc_worstfit+0x634>
f011f279:	83 ec 04             	sub    $0x4,%esp
f011f27c:	68 14 b7 13 f0       	push   $0xf013b714
f011f281:	68 33 04 00 00       	push   $0x433
f011f286:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f28b:	e8 75 0f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f290:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f293:	e8 19 dd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f298:	29 c3                	sub    %eax,%ebx
f011f29a:	89 d8                	mov    %ebx,%eax
f011f29c:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f2a1:	74 17                	je     f011f2ba <test_kmalloc_worstfit+0x65e>
f011f2a3:	83 ec 04             	sub    $0x4,%esp
f011f2a6:	68 b7 b9 13 f0       	push   $0xf013b9b7
f011f2ab:	68 34 04 00 00       	push   $0x434
f011f2b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f2b5:	e8 4b 0f fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f2ba:	e8 f2 dc fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f2bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f2c2:	e8 01 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f2c7:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f2ca:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f2d0:	83 ec 0c             	sub    $0xc,%esp
f011f2d3:	50                   	push   %eax
f011f2d4:	e8 7e 89 fe ff       	call   f0107c57 <kfree>
f011f2d9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f2dc:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f2e2:	83 ec 0c             	sub    $0xc,%esp
f011f2e5:	50                   	push   %eax
f011f2e6:	e8 6c 89 fe ff       	call   f0107c57 <kfree>
f011f2eb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f2ee:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f2f4:	83 ec 0c             	sub    $0xc,%esp
f011f2f7:	50                   	push   %eax
f011f2f8:	e8 5a 89 fe ff       	call   f0107c57 <kfree>
f011f2fd:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f300:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f306:	83 ec 0c             	sub    $0xc,%esp
f011f309:	50                   	push   %eax
f011f30a:	e8 48 89 fe ff       	call   f0107c57 <kfree>
f011f30f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f312:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f318:	83 ec 0c             	sub    $0xc,%esp
f011f31b:	50                   	push   %eax
f011f31c:	e8 36 89 fe ff       	call   f0107c57 <kfree>
f011f321:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f324:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f32a:	83 ec 0c             	sub    $0xc,%esp
f011f32d:	50                   	push   %eax
f011f32e:	e8 24 89 fe ff       	call   f0107c57 <kfree>
f011f333:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f336:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f33c:	83 ec 0c             	sub    $0xc,%esp
f011f33f:	50                   	push   %eax
f011f340:	e8 12 89 fe ff       	call   f0107c57 <kfree>
f011f345:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f348:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f34e:	83 ec 0c             	sub    $0xc,%esp
f011f351:	50                   	push   %eax
f011f352:	e8 00 89 fe ff       	call   f0107c57 <kfree>
f011f357:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f35a:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f360:	83 ec 0c             	sub    $0xc,%esp
f011f363:	50                   	push   %eax
f011f364:	e8 ee 88 fe ff       	call   f0107c57 <kfree>
f011f369:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f36c:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f372:	83 ec 0c             	sub    $0xc,%esp
f011f375:	50                   	push   %eax
f011f376:	e8 dc 88 fe ff       	call   f0107c57 <kfree>
f011f37b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f37e:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f384:	83 ec 0c             	sub    $0xc,%esp
f011f387:	50                   	push   %eax
f011f388:	e8 ca 88 fe ff       	call   f0107c57 <kfree>
f011f38d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f390:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f396:	83 ec 0c             	sub    $0xc,%esp
f011f399:	50                   	push   %eax
f011f39a:	e8 b8 88 fe ff       	call   f0107c57 <kfree>
f011f39f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f3a2:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f3a8:	83 ec 0c             	sub    $0xc,%esp
f011f3ab:	50                   	push   %eax
f011f3ac:	e8 a6 88 fe ff       	call   f0107c57 <kfree>
f011f3b1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f3b4:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f3ba:	83 ec 0c             	sub    $0xc,%esp
f011f3bd:	50                   	push   %eax
f011f3be:	e8 94 88 fe ff       	call   f0107c57 <kfree>
f011f3c3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f3c6:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f3cc:	83 ec 0c             	sub    $0xc,%esp
f011f3cf:	50                   	push   %eax
f011f3d0:	e8 82 88 fe ff       	call   f0107c57 <kfree>
f011f3d5:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3d8:	e8 eb 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f3dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3e0:	74 17                	je     f011f3f9 <test_kmalloc_worstfit+0x79d>
f011f3e2:	83 ec 04             	sub    $0x4,%esp
f011f3e5:	68 14 b7 13 f0       	push   $0xf013b714
f011f3ea:	68 4a 04 00 00       	push   $0x44a
f011f3ef:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f3f4:	e8 0c 0e fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f3f9:	e8 b3 db fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f3fe:	89 c2                	mov    %eax,%edx
f011f400:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f403:	29 c2                	sub    %eax,%edx
f011f405:	89 d0                	mov    %edx,%eax
f011f407:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f40c:	74 17                	je     f011f425 <test_kmalloc_worstfit+0x7c9>
f011f40e:	83 ec 04             	sub    $0x4,%esp
f011f411:	68 c8 b9 13 f0       	push   $0xf013b9c8
f011f416:	68 4b 04 00 00       	push   $0x44b
f011f41b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f420:	e8 e0 0d fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f425:	e8 87 db fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f42a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f42d:	e8 96 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f432:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f435:	83 ec 0c             	sub    $0xc,%esp
f011f438:	68 00 00 10 00       	push   $0x100000
f011f43d:	e8 4a 87 fe ff       	call   f0107b8c <kmalloc>
f011f442:	83 c4 10             	add    $0x10,%esp
f011f445:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f44b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f452:	10 00 00 
f011f455:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f45b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f460:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f466:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f46c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f471:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f477:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f47d:	29 d0                	sub    %edx,%eax
f011f47f:	89 c1                	mov    %eax,%ecx
f011f481:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f488:	10 00 00 
f011f48b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f490:	0f b6 d0             	movzbl %al,%edx
f011f493:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f499:	01 d0                	add    %edx,%eax
f011f49b:	48                   	dec    %eax
f011f49c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f4a2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f4a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ad:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f4b3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f4b9:	29 d0                	sub    %edx,%eax
f011f4bb:	01 c1                	add    %eax,%ecx
f011f4bd:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f4c4:	10 00 00 
f011f4c7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f4cc:	0f b6 c0             	movzbl %al,%eax
f011f4cf:	c1 e0 04             	shl    $0x4,%eax
f011f4d2:	89 c2                	mov    %eax,%edx
f011f4d4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f4da:	01 d0                	add    %edx,%eax
f011f4dc:	48                   	dec    %eax
f011f4dd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f4e3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f4e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ee:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f4f4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f4fa:	29 d0                	sub    %edx,%eax
f011f4fc:	01 c8                	add    %ecx,%eax
f011f4fe:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f504:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f50a:	39 c2                	cmp    %eax,%edx
f011f50c:	74 17                	je     f011f525 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f50e:	83 ec 04             	sub    $0x4,%esp
f011f511:	68 14 be 13 f0       	push   $0xf013be14
f011f516:	68 52 04 00 00       	push   $0x452
f011f51b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f520:	e8 e0 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f525:	e8 9e 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f52a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f52d:	74 17                	je     f011f546 <test_kmalloc_worstfit+0x8ea>
f011f52f:	83 ec 04             	sub    $0x4,%esp
f011f532:	68 14 b7 13 f0       	push   $0xf013b714
f011f537:	68 53 04 00 00       	push   $0x453
f011f53c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f541:	e8 bf 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f546:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f549:	e8 63 da fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f54e:	29 c3                	sub    %eax,%ebx
f011f550:	89 d8                	mov    %ebx,%eax
f011f552:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f557:	74 17                	je     f011f570 <test_kmalloc_worstfit+0x914>
f011f559:	83 ec 04             	sub    $0x4,%esp
f011f55c:	68 32 bc 13 f0       	push   $0xf013bc32
f011f561:	68 54 04 00 00       	push   $0x454
f011f566:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f56b:	e8 95 0c fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f570:	ff 45 e8             	incl   -0x18(%ebp)
f011f573:	83 ec 08             	sub    $0x8,%esp
f011f576:	ff 75 e8             	pushl  -0x18(%ebp)
f011f579:	68 34 be 13 f0       	push   $0xf013be34
f011f57e:	e8 8b 17 fe ff       	call   f0100d0e <cprintf>
f011f583:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f586:	e8 26 da fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f58b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f58e:	e8 35 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f593:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f596:	83 ec 0c             	sub    $0xc,%esp
f011f599:	68 00 00 40 00       	push   $0x400000
f011f59e:	e8 e9 85 fe ff       	call   f0107b8c <kmalloc>
f011f5a3:	83 c4 10             	add    $0x10,%esp
f011f5a6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f5ac:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f5b3:	10 00 00 
f011f5b6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f5bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f5c1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f5c7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f5cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5d2:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f5d8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f5de:	29 d0                	sub    %edx,%eax
f011f5e0:	89 c1                	mov    %eax,%ecx
f011f5e2:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f5e9:	10 00 00 
f011f5ec:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f5f1:	0f b6 d0             	movzbl %al,%edx
f011f5f4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f5fa:	01 d0                	add    %edx,%eax
f011f5fc:	48                   	dec    %eax
f011f5fd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f603:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f609:	ba 00 00 00 00       	mov    $0x0,%edx
f011f60e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f614:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f61a:	29 d0                	sub    %edx,%eax
f011f61c:	01 c1                	add    %eax,%ecx
f011f61e:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f625:	10 00 00 
f011f628:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f62d:	0f b6 c0             	movzbl %al,%eax
f011f630:	c1 e0 04             	shl    $0x4,%eax
f011f633:	89 c2                	mov    %eax,%edx
f011f635:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f63b:	01 d0                	add    %edx,%eax
f011f63d:	48                   	dec    %eax
f011f63e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f644:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f64a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f64f:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f655:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f65b:	29 d0                	sub    %edx,%eax
f011f65d:	01 c8                	add    %ecx,%eax
f011f65f:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f665:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f66b:	39 c2                	cmp    %eax,%edx
f011f66d:	74 17                	je     f011f686 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f66f:	83 ec 04             	sub    $0x4,%esp
f011f672:	68 14 be 13 f0       	push   $0xf013be14
f011f677:	68 5b 04 00 00       	push   $0x45b
f011f67c:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f681:	e8 7f 0b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f686:	e8 3d 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f68b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f68e:	74 17                	je     f011f6a7 <test_kmalloc_worstfit+0xa4b>
f011f690:	83 ec 04             	sub    $0x4,%esp
f011f693:	68 14 b7 13 f0       	push   $0xf013b714
f011f698:	68 5c 04 00 00       	push   $0x45c
f011f69d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f6a2:	e8 5e 0b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f6a7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f6aa:	e8 02 d9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f6af:	29 c3                	sub    %eax,%ebx
f011f6b1:	89 d8                	mov    %ebx,%eax
f011f6b3:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f6b8:	74 17                	je     f011f6d1 <test_kmalloc_worstfit+0xa75>
f011f6ba:	83 ec 04             	sub    $0x4,%esp
f011f6bd:	68 32 bc 13 f0       	push   $0xf013bc32
f011f6c2:	68 5d 04 00 00       	push   $0x45d
f011f6c7:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f6cc:	e8 34 0b fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f6d1:	ff 45 e8             	incl   -0x18(%ebp)
f011f6d4:	83 ec 08             	sub    $0x8,%esp
f011f6d7:	ff 75 e8             	pushl  -0x18(%ebp)
f011f6da:	68 34 be 13 f0       	push   $0xf013be34
f011f6df:	e8 2a 16 fe ff       	call   f0100d0e <cprintf>
f011f6e4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f6e7:	e8 c5 d8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f6ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f6ef:	e8 d4 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f6f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f6f7:	83 ec 0c             	sub    $0xc,%esp
f011f6fa:	68 00 00 60 00       	push   $0x600000
f011f6ff:	e8 88 84 fe ff       	call   f0107b8c <kmalloc>
f011f704:	83 c4 10             	add    $0x10,%esp
f011f707:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f70d:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f714:	10 00 00 
f011f717:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f71d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f722:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f728:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f72e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f733:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f739:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f73f:	29 d0                	sub    %edx,%eax
f011f741:	89 c1                	mov    %eax,%ecx
f011f743:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f74a:	10 00 00 
f011f74d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f752:	0f b6 d0             	movzbl %al,%edx
f011f755:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f75b:	01 d0                	add    %edx,%eax
f011f75d:	48                   	dec    %eax
f011f75e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f764:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f76a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f76f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f775:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f77b:	29 d0                	sub    %edx,%eax
f011f77d:	01 c1                	add    %eax,%ecx
f011f77f:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f786:	10 00 00 
f011f789:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f78e:	0f b6 c0             	movzbl %al,%eax
f011f791:	c1 e0 04             	shl    $0x4,%eax
f011f794:	89 c2                	mov    %eax,%edx
f011f796:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f79c:	01 d0                	add    %edx,%eax
f011f79e:	48                   	dec    %eax
f011f79f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f7a5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f7ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7b0:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f7b6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f7bc:	29 d0                	sub    %edx,%eax
f011f7be:	01 c8                	add    %ecx,%eax
f011f7c0:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f7c6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f7cc:	39 c2                	cmp    %eax,%edx
f011f7ce:	74 17                	je     f011f7e7 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f7d0:	83 ec 04             	sub    $0x4,%esp
f011f7d3:	68 14 be 13 f0       	push   $0xf013be14
f011f7d8:	68 64 04 00 00       	push   $0x464
f011f7dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f7e2:	e8 1e 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7e7:	e8 dc 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f7ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f7ef:	74 17                	je     f011f808 <test_kmalloc_worstfit+0xbac>
f011f7f1:	83 ec 04             	sub    $0x4,%esp
f011f7f4:	68 14 b7 13 f0       	push   $0xf013b714
f011f7f9:	68 65 04 00 00       	push   $0x465
f011f7fe:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f803:	e8 fd 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f808:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f80b:	e8 a1 d7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f810:	29 c3                	sub    %eax,%ebx
f011f812:	89 d8                	mov    %ebx,%eax
f011f814:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f819:	74 17                	je     f011f832 <test_kmalloc_worstfit+0xbd6>
f011f81b:	83 ec 04             	sub    $0x4,%esp
f011f81e:	68 32 bc 13 f0       	push   $0xf013bc32
f011f823:	68 66 04 00 00       	push   $0x466
f011f828:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f82d:	e8 d3 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f832:	ff 45 e8             	incl   -0x18(%ebp)
f011f835:	83 ec 08             	sub    $0x8,%esp
f011f838:	ff 75 e8             	pushl  -0x18(%ebp)
f011f83b:	68 34 be 13 f0       	push   $0xf013be34
f011f840:	e8 c9 14 fe ff       	call   f0100d0e <cprintf>
f011f845:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f848:	e8 64 d7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f84d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f850:	e8 73 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f855:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f858:	83 ec 0c             	sub    $0xc,%esp
f011f85b:	68 00 00 50 00       	push   $0x500000
f011f860:	e8 27 83 fe ff       	call   f0107b8c <kmalloc>
f011f865:	83 c4 10             	add    $0x10,%esp
f011f868:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f86e:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f875:	10 00 00 
f011f878:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f87e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f883:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f889:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f88f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f894:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f89a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f8a0:	29 d0                	sub    %edx,%eax
f011f8a2:	89 c1                	mov    %eax,%ecx
f011f8a4:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f8ab:	10 00 00 
f011f8ae:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f8b3:	0f b6 d0             	movzbl %al,%edx
f011f8b6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f8bc:	01 d0                	add    %edx,%eax
f011f8be:	48                   	dec    %eax
f011f8bf:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f8c5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f8cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8d0:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f8d6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f8dc:	29 d0                	sub    %edx,%eax
f011f8de:	01 c1                	add    %eax,%ecx
f011f8e0:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f8e7:	10 00 00 
f011f8ea:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011f8ef:	0f b6 c0             	movzbl %al,%eax
f011f8f2:	c1 e0 04             	shl    $0x4,%eax
f011f8f5:	89 c2                	mov    %eax,%edx
f011f8f7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f8fd:	01 d0                	add    %edx,%eax
f011f8ff:	48                   	dec    %eax
f011f900:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f906:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f90c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f911:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f917:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f91d:	29 d0                	sub    %edx,%eax
f011f91f:	01 c8                	add    %ecx,%eax
f011f921:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f927:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f92d:	39 c2                	cmp    %eax,%edx
f011f92f:	74 17                	je     f011f948 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f931:	83 ec 04             	sub    $0x4,%esp
f011f934:	68 14 be 13 f0       	push   $0xf013be14
f011f939:	68 6d 04 00 00       	push   $0x46d
f011f93e:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f943:	e8 bd 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f948:	e8 7b 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f94d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f950:	74 17                	je     f011f969 <test_kmalloc_worstfit+0xd0d>
f011f952:	83 ec 04             	sub    $0x4,%esp
f011f955:	68 14 b7 13 f0       	push   $0xf013b714
f011f95a:	68 6e 04 00 00       	push   $0x46e
f011f95f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f964:	e8 9c 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f969:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f96c:	e8 40 d6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f971:	29 c3                	sub    %eax,%ebx
f011f973:	89 d8                	mov    %ebx,%eax
f011f975:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f97a:	74 17                	je     f011f993 <test_kmalloc_worstfit+0xd37>
f011f97c:	83 ec 04             	sub    $0x4,%esp
f011f97f:	68 32 bc 13 f0       	push   $0xf013bc32
f011f984:	68 6f 04 00 00       	push   $0x46f
f011f989:	68 fa b6 13 f0       	push   $0xf013b6fa
f011f98e:	e8 72 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f993:	ff 45 e8             	incl   -0x18(%ebp)
f011f996:	83 ec 08             	sub    $0x8,%esp
f011f999:	ff 75 e8             	pushl  -0x18(%ebp)
f011f99c:	68 34 be 13 f0       	push   $0xf013be34
f011f9a1:	e8 68 13 fe ff       	call   f0100d0e <cprintf>
f011f9a6:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f9a9:	e8 03 d6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011f9ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f9b1:	e8 12 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f9b9:	83 ec 0c             	sub    $0xc,%esp
f011f9bc:	68 00 00 40 00       	push   $0x400000
f011f9c1:	e8 c6 81 fe ff       	call   f0107b8c <kmalloc>
f011f9c6:	83 c4 10             	add    $0x10,%esp
f011f9c9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f9cf:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f9d6:	10 00 00 
f011f9d9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f9df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9e4:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f9ea:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f9f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9f5:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f9fb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fa01:	29 d0                	sub    %edx,%eax
f011fa03:	89 c1                	mov    %eax,%ecx
f011fa05:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011fa0c:	10 00 00 
f011fa0f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fa14:	0f b6 d0             	movzbl %al,%edx
f011fa17:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fa1d:	01 d0                	add    %edx,%eax
f011fa1f:	48                   	dec    %eax
f011fa20:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011fa26:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fa2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa31:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011fa37:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fa3d:	29 d0                	sub    %edx,%eax
f011fa3f:	01 c1                	add    %eax,%ecx
f011fa41:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011fa48:	10 00 00 
f011fa4b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fa50:	0f b6 c0             	movzbl %al,%eax
f011fa53:	c1 e0 04             	shl    $0x4,%eax
f011fa56:	89 c2                	mov    %eax,%edx
f011fa58:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011fa5e:	01 d0                	add    %edx,%eax
f011fa60:	48                   	dec    %eax
f011fa61:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011fa67:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fa6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa72:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011fa78:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fa7e:	29 d0                	sub    %edx,%eax
f011fa80:	01 c8                	add    %ecx,%eax
f011fa82:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011fa88:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa8e:	39 c2                	cmp    %eax,%edx
f011fa90:	74 17                	je     f011faa9 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011fa92:	83 ec 04             	sub    $0x4,%esp
f011fa95:	68 14 be 13 f0       	push   $0xf013be14
f011fa9a:	68 76 04 00 00       	push   $0x476
f011fa9f:	68 fa b6 13 f0       	push   $0xf013b6fa
f011faa4:	e8 5c 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011faa9:	e8 1a 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011faae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fab1:	74 17                	je     f011faca <test_kmalloc_worstfit+0xe6e>
f011fab3:	83 ec 04             	sub    $0x4,%esp
f011fab6:	68 14 b7 13 f0       	push   $0xf013b714
f011fabb:	68 77 04 00 00       	push   $0x477
f011fac0:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fac5:	e8 3b 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011faca:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011facd:	e8 df d4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fad2:	29 c3                	sub    %eax,%ebx
f011fad4:	89 d8                	mov    %ebx,%eax
f011fad6:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fadb:	74 17                	je     f011faf4 <test_kmalloc_worstfit+0xe98>
f011fadd:	83 ec 04             	sub    $0x4,%esp
f011fae0:	68 32 bc 13 f0       	push   $0xf013bc32
f011fae5:	68 78 04 00 00       	push   $0x478
f011faea:	68 fa b6 13 f0       	push   $0xf013b6fa
f011faef:	e8 11 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011faf4:	ff 45 e8             	incl   -0x18(%ebp)
f011faf7:	83 ec 08             	sub    $0x8,%esp
f011fafa:	ff 75 e8             	pushl  -0x18(%ebp)
f011fafd:	68 34 be 13 f0       	push   $0xf013be34
f011fb02:	e8 07 12 fe ff       	call   f0100d0e <cprintf>
f011fb07:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fb0a:	e8 a2 d4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fb0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb12:	e8 b1 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb17:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fb1a:	83 ec 0c             	sub    $0xc,%esp
f011fb1d:	68 00 00 20 00       	push   $0x200000
f011fb22:	e8 65 80 fe ff       	call   f0107b8c <kmalloc>
f011fb27:	83 c4 10             	add    $0x10,%esp
f011fb2a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fb30:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fb37:	10 00 00 
f011fb3a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fb40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb45:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fb4b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fb51:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb56:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fb5c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fb62:	29 d0                	sub    %edx,%eax
f011fb64:	89 c1                	mov    %eax,%ecx
f011fb66:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fb6d:	10 00 00 
f011fb70:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fb75:	0f b6 d0             	movzbl %al,%edx
f011fb78:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fb7e:	01 d0                	add    %edx,%eax
f011fb80:	48                   	dec    %eax
f011fb81:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011fb87:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fb8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb92:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fb98:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fb9e:	29 d0                	sub    %edx,%eax
f011fba0:	01 c1                	add    %eax,%ecx
f011fba2:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011fba9:	10 00 00 
f011fbac:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fbb1:	0f b6 c0             	movzbl %al,%eax
f011fbb4:	c1 e0 04             	shl    $0x4,%eax
f011fbb7:	89 c2                	mov    %eax,%edx
f011fbb9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011fbbf:	01 d0                	add    %edx,%eax
f011fbc1:	48                   	dec    %eax
f011fbc2:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011fbc8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fbce:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbd3:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011fbd9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fbdf:	29 d0                	sub    %edx,%eax
f011fbe1:	01 c8                	add    %ecx,%eax
f011fbe3:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011fbe9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fbef:	39 c2                	cmp    %eax,%edx
f011fbf1:	74 17                	je     f011fc0a <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011fbf3:	83 ec 04             	sub    $0x4,%esp
f011fbf6:	68 14 be 13 f0       	push   $0xf013be14
f011fbfb:	68 7f 04 00 00       	push   $0x47f
f011fc00:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fc05:	e8 fb 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc0a:	e8 b9 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc0f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc12:	74 17                	je     f011fc2b <test_kmalloc_worstfit+0xfcf>
f011fc14:	83 ec 04             	sub    $0x4,%esp
f011fc17:	68 14 b7 13 f0       	push   $0xf013b714
f011fc1c:	68 80 04 00 00       	push   $0x480
f011fc21:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fc26:	e8 da 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fc2b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fc2e:	e8 7e d3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fc33:	29 c3                	sub    %eax,%ebx
f011fc35:	89 d8                	mov    %ebx,%eax
f011fc37:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fc3c:	74 17                	je     f011fc55 <test_kmalloc_worstfit+0xff9>
f011fc3e:	83 ec 04             	sub    $0x4,%esp
f011fc41:	68 32 bc 13 f0       	push   $0xf013bc32
f011fc46:	68 81 04 00 00       	push   $0x481
f011fc4b:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fc50:	e8 b0 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fc55:	ff 45 e8             	incl   -0x18(%ebp)
f011fc58:	83 ec 08             	sub    $0x8,%esp
f011fc5b:	ff 75 e8             	pushl  -0x18(%ebp)
f011fc5e:	68 34 be 13 f0       	push   $0xf013be34
f011fc63:	e8 a6 10 fe ff       	call   f0100d0e <cprintf>
f011fc68:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fc6b:	e8 41 d3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fc70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fc73:	e8 50 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fc78:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011fc7b:	83 ec 0c             	sub    $0xc,%esp
f011fc7e:	68 00 00 18 00       	push   $0x180000
f011fc83:	e8 04 7f fe ff       	call   f0107b8c <kmalloc>
f011fc88:	83 c4 10             	add    $0x10,%esp
f011fc8b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011fc91:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fc98:	10 00 00 
f011fc9b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fca1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fca6:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011fcac:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fcb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcb7:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011fcbd:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fcc3:	29 d0                	sub    %edx,%eax
f011fcc5:	89 c1                	mov    %eax,%ecx
f011fcc7:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011fcce:	10 00 00 
f011fcd1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fcd6:	0f b6 d0             	movzbl %al,%edx
f011fcd9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011fcdf:	01 d0                	add    %edx,%eax
f011fce1:	48                   	dec    %eax
f011fce2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011fce8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fcee:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcf3:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011fcf9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fcff:	29 d0                	sub    %edx,%eax
f011fd01:	01 c1                	add    %eax,%ecx
f011fd03:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011fd0a:	10 00 00 
f011fd0d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fd12:	0f b6 c0             	movzbl %al,%eax
f011fd15:	c1 e0 04             	shl    $0x4,%eax
f011fd18:	89 c2                	mov    %eax,%edx
f011fd1a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011fd20:	01 d0                	add    %edx,%eax
f011fd22:	48                   	dec    %eax
f011fd23:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011fd29:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fd2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd34:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011fd3a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fd40:	29 d0                	sub    %edx,%eax
f011fd42:	01 c8                	add    %ecx,%eax
f011fd44:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011fd4a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fd50:	39 c2                	cmp    %eax,%edx
f011fd52:	74 17                	je     f011fd6b <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011fd54:	83 ec 04             	sub    $0x4,%esp
f011fd57:	68 14 be 13 f0       	push   $0xf013be14
f011fd5c:	68 88 04 00 00       	push   $0x488
f011fd61:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fd66:	e8 9a 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd6b:	e8 58 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd70:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd73:	74 17                	je     f011fd8c <test_kmalloc_worstfit+0x1130>
f011fd75:	83 ec 04             	sub    $0x4,%esp
f011fd78:	68 14 b7 13 f0       	push   $0xf013b714
f011fd7d:	68 89 04 00 00       	push   $0x489
f011fd82:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fd87:	e8 79 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fd8c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fd8f:	e8 1d d2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fd94:	29 c3                	sub    %eax,%ebx
f011fd96:	89 d8                	mov    %ebx,%eax
f011fd98:	3d 80 01 00 00       	cmp    $0x180,%eax
f011fd9d:	74 17                	je     f011fdb6 <test_kmalloc_worstfit+0x115a>
f011fd9f:	83 ec 04             	sub    $0x4,%esp
f011fda2:	68 32 bc 13 f0       	push   $0xf013bc32
f011fda7:	68 8a 04 00 00       	push   $0x48a
f011fdac:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fdb1:	e8 4f 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fdb6:	ff 45 e8             	incl   -0x18(%ebp)
f011fdb9:	83 ec 08             	sub    $0x8,%esp
f011fdbc:	ff 75 e8             	pushl  -0x18(%ebp)
f011fdbf:	68 34 be 13 f0       	push   $0xf013be34
f011fdc4:	e8 45 0f fe ff       	call   f0100d0e <cprintf>
f011fdc9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fdcc:	e8 e0 d1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fdd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fdd4:	e8 ef 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fdd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011fddc:	83 ec 0c             	sub    $0xc,%esp
f011fddf:	68 00 00 08 00       	push   $0x80000
f011fde4:	e8 a3 7d fe ff       	call   f0107b8c <kmalloc>
f011fde9:	83 c4 10             	add    $0x10,%esp
f011fdec:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011fdf2:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011fdf9:	10 00 00 
f011fdfc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fe02:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe07:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011fe0d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fe13:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe18:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011fe1e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fe24:	29 d0                	sub    %edx,%eax
f011fe26:	89 c1                	mov    %eax,%ecx
f011fe28:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011fe2f:	10 00 00 
f011fe32:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fe37:	0f b6 d0             	movzbl %al,%edx
f011fe3a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fe40:	01 d0                	add    %edx,%eax
f011fe42:	48                   	dec    %eax
f011fe43:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011fe49:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fe4f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe54:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011fe5a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fe60:	29 d0                	sub    %edx,%eax
f011fe62:	01 c1                	add    %eax,%ecx
f011fe64:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011fe6b:	10 00 00 
f011fe6e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011fe73:	0f b6 c0             	movzbl %al,%eax
f011fe76:	c1 e0 04             	shl    $0x4,%eax
f011fe79:	89 c2                	mov    %eax,%edx
f011fe7b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011fe81:	01 d0                	add    %edx,%eax
f011fe83:	48                   	dec    %eax
f011fe84:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011fe8a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fe90:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe95:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011fe9b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fea1:	29 d0                	sub    %edx,%eax
f011fea3:	01 c8                	add    %ecx,%eax
f011fea5:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011feab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011feb1:	39 c2                	cmp    %eax,%edx
f011feb3:	74 17                	je     f011fecc <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011feb5:	83 ec 04             	sub    $0x4,%esp
f011feb8:	68 14 be 13 f0       	push   $0xf013be14
f011febd:	68 91 04 00 00       	push   $0x491
f011fec2:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fec7:	e8 39 03 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fecc:	e8 f7 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fed1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fed4:	74 17                	je     f011feed <test_kmalloc_worstfit+0x1291>
f011fed6:	83 ec 04             	sub    $0x4,%esp
f011fed9:	68 14 b7 13 f0       	push   $0xf013b714
f011fede:	68 92 04 00 00       	push   $0x492
f011fee3:	68 fa b6 13 f0       	push   $0xf013b6fa
f011fee8:	e8 18 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011feed:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fef0:	e8 bc d0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011fef5:	29 c3                	sub    %eax,%ebx
f011fef7:	89 d8                	mov    %ebx,%eax
f011fef9:	3d 80 00 00 00       	cmp    $0x80,%eax
f011fefe:	74 17                	je     f011ff17 <test_kmalloc_worstfit+0x12bb>
f011ff00:	83 ec 04             	sub    $0x4,%esp
f011ff03:	68 32 bc 13 f0       	push   $0xf013bc32
f011ff08:	68 93 04 00 00       	push   $0x493
f011ff0d:	68 fa b6 13 f0       	push   $0xf013b6fa
f011ff12:	e8 ee 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ff17:	ff 45 e8             	incl   -0x18(%ebp)
f011ff1a:	83 ec 08             	sub    $0x8,%esp
f011ff1d:	ff 75 e8             	pushl  -0x18(%ebp)
f011ff20:	68 34 be 13 f0       	push   $0xf013be34
f011ff25:	e8 e4 0d fe ff       	call   f0100d0e <cprintf>
f011ff2a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ff2d:	e8 7f d0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f011ff32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ff35:	e8 8e 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011ff3d:	83 ec 0c             	sub    $0xc,%esp
f011ff40:	68 00 04 00 00       	push   $0x400
f011ff45:	e8 42 7c fe ff       	call   f0107b8c <kmalloc>
f011ff4a:	83 c4 10             	add    $0x10,%esp
f011ff4d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011ff53:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011ff5a:	10 00 00 
f011ff5d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011ff63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff68:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011ff6e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ff74:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff79:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011ff7f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ff85:	29 d0                	sub    %edx,%eax
f011ff87:	89 c1                	mov    %eax,%ecx
f011ff89:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011ff90:	10 00 00 
f011ff93:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ff98:	0f b6 d0             	movzbl %al,%edx
f011ff9b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ffa1:	01 d0                	add    %edx,%eax
f011ffa3:	48                   	dec    %eax
f011ffa4:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011ffaa:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ffb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffb5:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011ffbb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ffc1:	29 d0                	sub    %edx,%eax
f011ffc3:	01 c1                	add    %eax,%ecx
f011ffc5:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011ffcc:	10 00 00 
f011ffcf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f011ffd4:	0f b6 c0             	movzbl %al,%eax
f011ffd7:	c1 e0 04             	shl    $0x4,%eax
f011ffda:	89 c2                	mov    %eax,%edx
f011ffdc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ffe2:	01 d0                	add    %edx,%eax
f011ffe4:	48                   	dec    %eax
f011ffe5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011ffeb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fff1:	ba 00 00 00 00       	mov    $0x0,%edx
f011fff6:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fffc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120002:	29 d0                	sub    %edx,%eax
f0120004:	01 c8                	add    %ecx,%eax
f0120006:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f012000c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120012:	39 c2                	cmp    %eax,%edx
f0120014:	74 17                	je     f012002d <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f0120016:	83 ec 04             	sub    $0x4,%esp
f0120019:	68 14 be 13 f0       	push   $0xf013be14
f012001e:	68 9a 04 00 00       	push   $0x49a
f0120023:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120028:	e8 d8 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012002d:	e8 96 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120032:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120035:	74 17                	je     f012004e <test_kmalloc_worstfit+0x13f2>
f0120037:	83 ec 04             	sub    $0x4,%esp
f012003a:	68 14 b7 13 f0       	push   $0xf013b714
f012003f:	68 9b 04 00 00       	push   $0x49b
f0120044:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120049:	e8 b7 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f012004e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120051:	e8 5b cf fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120056:	29 c3                	sub    %eax,%ebx
f0120058:	89 d8                	mov    %ebx,%eax
f012005a:	83 f8 01             	cmp    $0x1,%eax
f012005d:	74 17                	je     f0120076 <test_kmalloc_worstfit+0x141a>
f012005f:	83 ec 04             	sub    $0x4,%esp
f0120062:	68 32 bc 13 f0       	push   $0xf013bc32
f0120067:	68 9c 04 00 00       	push   $0x49c
f012006c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120071:	e8 8f 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120076:	ff 45 e8             	incl   -0x18(%ebp)
f0120079:	83 ec 08             	sub    $0x8,%esp
f012007c:	ff 75 e8             	pushl  -0x18(%ebp)
f012007f:	68 34 be 13 f0       	push   $0xf013be34
f0120084:	e8 85 0c fe ff       	call   f0100d0e <cprintf>
f0120089:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f012008c:	e8 20 cf fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120091:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0120094:	e8 2f 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120099:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f012009c:	83 ec 0c             	sub    $0xc,%esp
f012009f:	68 00 f0 1f 00       	push   $0x1ff000
f01200a4:	e8 e3 7a fe ff       	call   f0107b8c <kmalloc>
f01200a9:	83 c4 10             	add    $0x10,%esp
f01200ac:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f01200b2:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01200b9:	10 00 00 
f01200bc:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01200c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200c7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01200cd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01200d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01200d8:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f01200de:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01200e4:	29 d0                	sub    %edx,%eax
f01200e6:	89 c1                	mov    %eax,%ecx
f01200e8:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01200ef:	10 00 00 
f01200f2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01200f7:	0f b6 d0             	movzbl %al,%edx
f01200fa:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120100:	01 d0                	add    %edx,%eax
f0120102:	48                   	dec    %eax
f0120103:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120109:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012010f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120114:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012011a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120120:	29 d0                	sub    %edx,%eax
f0120122:	01 c1                	add    %eax,%ecx
f0120124:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012012b:	10 00 00 
f012012e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120133:	0f b6 c0             	movzbl %al,%eax
f0120136:	c1 e0 04             	shl    $0x4,%eax
f0120139:	89 c2                	mov    %eax,%edx
f012013b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120141:	01 d0                	add    %edx,%eax
f0120143:	48                   	dec    %eax
f0120144:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012014a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120150:	ba 00 00 00 00       	mov    $0x0,%edx
f0120155:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f012015b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120161:	29 d0                	sub    %edx,%eax
f0120163:	01 c8                	add    %ecx,%eax
f0120165:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f012016b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120171:	39 c2                	cmp    %eax,%edx
f0120173:	74 17                	je     f012018c <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f0120175:	83 ec 04             	sub    $0x4,%esp
f0120178:	68 14 be 13 f0       	push   $0xf013be14
f012017d:	68 a3 04 00 00       	push   $0x4a3
f0120182:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120187:	e8 79 00 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012018c:	e8 37 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120191:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120194:	74 17                	je     f01201ad <test_kmalloc_worstfit+0x1551>
f0120196:	83 ec 04             	sub    $0x4,%esp
f0120199:	68 14 b7 13 f0       	push   $0xf013b714
f012019e:	68 a4 04 00 00       	push   $0x4a4
f01201a3:	68 fa b6 13 f0       	push   $0xf013b6fa
f01201a8:	e8 58 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01201ad:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01201b0:	e8 fc cd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01201b5:	29 c3                	sub    %eax,%ebx
f01201b7:	89 d8                	mov    %ebx,%eax
f01201b9:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01201be:	74 17                	je     f01201d7 <test_kmalloc_worstfit+0x157b>
f01201c0:	83 ec 04             	sub    $0x4,%esp
f01201c3:	68 32 bc 13 f0       	push   $0xf013bc32
f01201c8:	68 a5 04 00 00       	push   $0x4a5
f01201cd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01201d2:	e8 2e 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01201d7:	ff 45 e8             	incl   -0x18(%ebp)
f01201da:	83 ec 08             	sub    $0x8,%esp
f01201dd:	ff 75 e8             	pushl  -0x18(%ebp)
f01201e0:	68 34 be 13 f0       	push   $0xf013be34
f01201e5:	e8 24 0b fe ff       	call   f0100d0e <cprintf>
f01201ea:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f01201ed:	e8 bf cd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01201f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01201f5:	e8 ce 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01201fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f01201fd:	83 ec 0c             	sub    $0xc,%esp
f0120200:	68 00 00 40 00       	push   $0x400000
f0120205:	e8 82 79 fe ff       	call   f0107b8c <kmalloc>
f012020a:	83 c4 10             	add    $0x10,%esp
f012020d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f0120213:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120219:	85 c0                	test   %eax,%eax
f012021b:	74 17                	je     f0120234 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f012021d:	83 ec 04             	sub    $0x4,%esp
f0120220:	68 14 be 13 f0       	push   $0xf013be14
f0120225:	68 ad 04 00 00       	push   $0x4ad
f012022a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012022f:	e8 d1 ff fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120234:	e8 8f 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120239:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012023c:	74 17                	je     f0120255 <test_kmalloc_worstfit+0x15f9>
f012023e:	83 ec 04             	sub    $0x4,%esp
f0120241:	68 14 b7 13 f0       	push   $0xf013b714
f0120246:	68 ae 04 00 00       	push   $0x4ae
f012024b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120250:	e8 b0 ff fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f0120255:	e8 57 cd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012025a:	89 c2                	mov    %eax,%edx
f012025c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012025f:	39 c2                	cmp    %eax,%edx
f0120261:	74 17                	je     f012027a <test_kmalloc_worstfit+0x161e>
f0120263:	83 ec 04             	sub    $0x4,%esp
f0120266:	68 32 bc 13 f0       	push   $0xf013bc32
f012026b:	68 af 04 00 00       	push   $0x4af
f0120270:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120275:	e8 8b ff fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012027a:	ff 45 e8             	incl   -0x18(%ebp)
f012027d:	83 ec 08             	sub    $0x8,%esp
f0120280:	ff 75 e8             	pushl  -0x18(%ebp)
f0120283:	68 34 be 13 f0       	push   $0xf013be34
f0120288:	e8 81 0a fe ff       	call   f0100d0e <cprintf>
f012028d:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0120290:	83 ec 0c             	sub    $0xc,%esp
f0120293:	68 48 be 13 f0       	push   $0xf013be48
f0120298:	e8 71 0a fe ff       	call   f0100d0e <cprintf>
f012029d:	83 c4 10             	add    $0x10,%esp


	return 1;
f01202a0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01202a5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01202a8:	5b                   	pop    %ebx
f01202a9:	5f                   	pop    %edi
f01202aa:	5d                   	pop    %ebp
f01202ab:	c3                   	ret    

f01202ac <test_kfree>:

int test_kfree()
{
f01202ac:	55                   	push   %ebp
f01202ad:	89 e5                	mov    %esp,%ebp
f01202af:	57                   	push   %edi
f01202b0:	53                   	push   %ebx
f01202b1:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f01202b7:	83 ec 0c             	sub    $0xc,%esp
f01202ba:	68 3c b6 13 f0       	push   $0xf013b63c
f01202bf:	e8 4a 0a fe ff       	call   f0100d0e <cprintf>
f01202c4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01202c7:	83 ec 0c             	sub    $0xc,%esp
f01202ca:	68 6c b6 13 f0       	push   $0xf013b66c
f01202cf:	e8 3a 0a fe ff       	call   f0100d0e <cprintf>
f01202d4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01202d7:	83 ec 0c             	sub    $0xc,%esp
f01202da:	68 3c b6 13 f0       	push   $0xf013b63c
f01202df:	e8 2a 0a fe ff       	call   f0100d0e <cprintf>
f01202e4:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01202e7:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01202eb:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01202ef:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01202f5:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01202fb:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0120302:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0120309:	e8 a3 cc fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012030e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120311:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f0120317:	b9 14 00 00 00       	mov    $0x14,%ecx
f012031c:	b8 00 00 00 00       	mov    $0x0,%eax
f0120321:	89 d7                	mov    %edx,%edi
f0120323:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0120325:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f012032b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120330:	b8 00 00 00 00       	mov    $0x0,%eax
f0120335:	89 d7                	mov    %edx,%edi
f0120337:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0120339:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f012033f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120344:	b8 00 00 00 00       	mov    $0x0,%eax
f0120349:	89 d7                	mov    %edx,%edi
f012034b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012034d:	e8 5f cc fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120352:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120355:	e8 6e 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012035a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012035d:	83 ec 0c             	sub    $0xc,%esp
f0120360:	68 00 fc 1f 00       	push   $0x1ffc00
f0120365:	e8 22 78 fe ff       	call   f0107b8c <kmalloc>
f012036a:	83 c4 10             	add    $0x10,%esp
f012036d:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120373:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120379:	89 c1                	mov    %eax,%ecx
f012037b:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0120382:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0120385:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012038a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012038d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120390:	ba 00 00 00 00       	mov    $0x0,%edx
f0120395:	f7 75 c8             	divl   -0x38(%ebp)
f0120398:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012039b:	29 d0                	sub    %edx,%eax
f012039d:	89 c3                	mov    %eax,%ebx
f012039f:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01203a6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01203ab:	0f b6 d0             	movzbl %al,%edx
f01203ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01203b1:	01 d0                	add    %edx,%eax
f01203b3:	48                   	dec    %eax
f01203b4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01203b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01203ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01203bf:	f7 75 c0             	divl   -0x40(%ebp)
f01203c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01203c5:	29 d0                	sub    %edx,%eax
f01203c7:	01 c3                	add    %eax,%ebx
f01203c9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01203d0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01203d5:	0f b6 c0             	movzbl %al,%eax
f01203d8:	c1 e0 04             	shl    $0x4,%eax
f01203db:	89 c2                	mov    %eax,%edx
f01203dd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01203e0:	01 d0                	add    %edx,%eax
f01203e2:	48                   	dec    %eax
f01203e3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01203e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01203e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01203ee:	f7 75 b8             	divl   -0x48(%ebp)
f01203f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01203f4:	29 d0                	sub    %edx,%eax
f01203f6:	01 d8                	add    %ebx,%eax
f01203f8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01203fd:	39 c1                	cmp    %eax,%ecx
f01203ff:	74 17                	je     f0120418 <test_kfree+0x16c>
f0120401:	83 ec 04             	sub    $0x4,%esp
f0120404:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120409:	68 d7 04 00 00       	push   $0x4d7
f012040e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120413:	e8 ed fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120418:	e8 ab 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012041d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120420:	74 17                	je     f0120439 <test_kfree+0x18d>
f0120422:	83 ec 04             	sub    $0x4,%esp
f0120425:	68 14 b7 13 f0       	push   $0xf013b714
f012042a:	68 d8 04 00 00       	push   $0x4d8
f012042f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120434:	e8 cc fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120439:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012043c:	e8 70 cb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120441:	29 c3                	sub    %eax,%ebx
f0120443:	89 d8                	mov    %ebx,%eax
f0120445:	3d 00 02 00 00       	cmp    $0x200,%eax
f012044a:	74 17                	je     f0120463 <test_kfree+0x1b7>
f012044c:	83 ec 04             	sub    $0x4,%esp
f012044f:	68 7c b7 13 f0       	push   $0xf013b77c
f0120454:	68 d9 04 00 00       	push   $0x4d9
f0120459:	68 fa b6 13 f0       	push   $0xf013b6fa
f012045e:	e8 a2 fd fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0120463:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f012046a:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012046d:	e8 3f cb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120472:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120475:	e8 4e 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012047a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012047d:	83 ec 0c             	sub    $0xc,%esp
f0120480:	68 00 fc 1f 00       	push   $0x1ffc00
f0120485:	e8 02 77 fe ff       	call   f0107b8c <kmalloc>
f012048a:	83 c4 10             	add    $0x10,%esp
f012048d:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120493:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120499:	89 c1                	mov    %eax,%ecx
f012049b:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01204a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01204a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204aa:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01204ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01204b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01204b5:	f7 75 b0             	divl   -0x50(%ebp)
f01204b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01204bb:	29 d0                	sub    %edx,%eax
f01204bd:	89 c3                	mov    %eax,%ebx
f01204bf:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01204c6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01204cb:	0f b6 d0             	movzbl %al,%edx
f01204ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01204d1:	01 d0                	add    %edx,%eax
f01204d3:	48                   	dec    %eax
f01204d4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01204d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01204da:	ba 00 00 00 00       	mov    $0x0,%edx
f01204df:	f7 75 a8             	divl   -0x58(%ebp)
f01204e2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01204e5:	29 d0                	sub    %edx,%eax
f01204e7:	01 c3                	add    %eax,%ebx
f01204e9:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01204f0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01204f5:	0f b6 c0             	movzbl %al,%eax
f01204f8:	c1 e0 04             	shl    $0x4,%eax
f01204fb:	89 c2                	mov    %eax,%edx
f01204fd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120500:	01 d0                	add    %edx,%eax
f0120502:	48                   	dec    %eax
f0120503:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0120506:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120509:	ba 00 00 00 00       	mov    $0x0,%edx
f012050e:	f7 75 a0             	divl   -0x60(%ebp)
f0120511:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120514:	29 d0                	sub    %edx,%eax
f0120516:	01 d8                	add    %ebx,%eax
f0120518:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012051d:	39 c1                	cmp    %eax,%ecx
f012051f:	74 17                	je     f0120538 <test_kfree+0x28c>
f0120521:	83 ec 04             	sub    $0x4,%esp
f0120524:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120529:	68 e0 04 00 00       	push   $0x4e0
f012052e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120533:	e8 cd fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120538:	e8 8b 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012053d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120540:	74 17                	je     f0120559 <test_kfree+0x2ad>
f0120542:	83 ec 04             	sub    $0x4,%esp
f0120545:	68 14 b7 13 f0       	push   $0xf013b714
f012054a:	68 e1 04 00 00       	push   $0x4e1
f012054f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120554:	e8 ac fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120559:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012055c:	e8 50 ca fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120561:	29 c3                	sub    %eax,%ebx
f0120563:	89 d8                	mov    %ebx,%eax
f0120565:	3d 00 02 00 00       	cmp    $0x200,%eax
f012056a:	74 17                	je     f0120583 <test_kfree+0x2d7>
f012056c:	83 ec 04             	sub    $0x4,%esp
f012056f:	68 7c b7 13 f0       	push   $0xf013b77c
f0120574:	68 e2 04 00 00       	push   $0x4e2
f0120579:	68 fa b6 13 f0       	push   $0xf013b6fa
f012057e:	e8 82 fc fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0120583:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f012058a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012058d:	e8 1f ca fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120592:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120595:	e8 2e 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012059a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012059d:	83 ec 0c             	sub    $0xc,%esp
f01205a0:	68 00 08 00 00       	push   $0x800
f01205a5:	e8 e2 75 fe ff       	call   f0107b8c <kmalloc>
f01205aa:	83 c4 10             	add    $0x10,%esp
f01205ad:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01205b3:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01205b9:	89 c1                	mov    %eax,%ecx
f01205bb:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01205c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01205c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01205ca:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01205cd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01205d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01205d5:	f7 75 98             	divl   -0x68(%ebp)
f01205d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01205db:	29 d0                	sub    %edx,%eax
f01205dd:	89 c3                	mov    %eax,%ebx
f01205df:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01205e6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01205eb:	0f b6 d0             	movzbl %al,%edx
f01205ee:	8b 45 90             	mov    -0x70(%ebp),%eax
f01205f1:	01 d0                	add    %edx,%eax
f01205f3:	48                   	dec    %eax
f01205f4:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01205f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01205fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01205ff:	f7 75 90             	divl   -0x70(%ebp)
f0120602:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120605:	29 d0                	sub    %edx,%eax
f0120607:	01 c3                	add    %eax,%ebx
f0120609:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120610:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120615:	0f b6 c0             	movzbl %al,%eax
f0120618:	c1 e0 04             	shl    $0x4,%eax
f012061b:	89 c2                	mov    %eax,%edx
f012061d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120620:	01 d0                	add    %edx,%eax
f0120622:	48                   	dec    %eax
f0120623:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120626:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120629:	ba 00 00 00 00       	mov    $0x0,%edx
f012062e:	f7 75 88             	divl   -0x78(%ebp)
f0120631:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120634:	29 d0                	sub    %edx,%eax
f0120636:	01 d8                	add    %ebx,%eax
f0120638:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012063d:	39 c1                	cmp    %eax,%ecx
f012063f:	74 17                	je     f0120658 <test_kfree+0x3ac>
f0120641:	83 ec 04             	sub    $0x4,%esp
f0120644:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120649:	68 e9 04 00 00       	push   $0x4e9
f012064e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120653:	e8 ad fb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120658:	e8 6b 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012065d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120660:	74 17                	je     f0120679 <test_kfree+0x3cd>
f0120662:	83 ec 04             	sub    $0x4,%esp
f0120665:	68 14 b7 13 f0       	push   $0xf013b714
f012066a:	68 ea 04 00 00       	push   $0x4ea
f012066f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120674:	e8 8c fb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120679:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012067c:	e8 30 c9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120681:	29 c3                	sub    %eax,%ebx
f0120683:	89 d8                	mov    %ebx,%eax
f0120685:	83 f8 01             	cmp    $0x1,%eax
f0120688:	74 17                	je     f01206a1 <test_kfree+0x3f5>
f012068a:	83 ec 04             	sub    $0x4,%esp
f012068d:	68 7c b7 13 f0       	push   $0xf013b77c
f0120692:	68 eb 04 00 00       	push   $0x4eb
f0120697:	68 fa b6 13 f0       	push   $0xf013b6fa
f012069c:	e8 64 fb fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01206a1:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f01206a8:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01206ab:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01206b1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01206b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01206bb:	eb 0e                	jmp    f01206cb <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f01206bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01206c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01206c3:	01 d0                	add    %edx,%eax
f01206c5:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01206c8:	ff 45 f4             	incl   -0xc(%ebp)
f01206cb:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01206d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01206d4:	7f e7                	jg     f01206bd <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01206d6:	e8 d6 c8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01206db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206de:	e8 e5 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01206e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01206e6:	83 ec 0c             	sub    $0xc,%esp
f01206e9:	68 00 08 00 00       	push   $0x800
f01206ee:	e8 99 74 fe ff       	call   f0107b8c <kmalloc>
f01206f3:	83 c4 10             	add    $0x10,%esp
f01206f6:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206fc:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120702:	89 c1                	mov    %eax,%ecx
f0120704:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012070b:	10 00 00 
f012070e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120714:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120719:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012071f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120725:	ba 00 00 00 00       	mov    $0x0,%edx
f012072a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120730:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120736:	29 d0                	sub    %edx,%eax
f0120738:	89 c3                	mov    %eax,%ebx
f012073a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120741:	10 00 00 
f0120744:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120749:	0f b6 d0             	movzbl %al,%edx
f012074c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120752:	01 d0                	add    %edx,%eax
f0120754:	48                   	dec    %eax
f0120755:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012075b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120761:	ba 00 00 00 00       	mov    $0x0,%edx
f0120766:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012076c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120772:	29 d0                	sub    %edx,%eax
f0120774:	01 c3                	add    %eax,%ebx
f0120776:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012077d:	10 00 00 
f0120780:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120785:	0f b6 c0             	movzbl %al,%eax
f0120788:	c1 e0 04             	shl    $0x4,%eax
f012078b:	89 c2                	mov    %eax,%edx
f012078d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120793:	01 d0                	add    %edx,%eax
f0120795:	48                   	dec    %eax
f0120796:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012079c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01207a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01207a7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01207ad:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01207b3:	29 d0                	sub    %edx,%eax
f01207b5:	01 d8                	add    %ebx,%eax
f01207b7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01207bc:	39 c1                	cmp    %eax,%ecx
f01207be:	74 17                	je     f01207d7 <test_kfree+0x52b>
f01207c0:	83 ec 04             	sub    $0x4,%esp
f01207c3:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01207c8:	68 f7 04 00 00       	push   $0x4f7
f01207cd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01207d2:	e8 2e fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207d7:	e8 ec 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207df:	74 17                	je     f01207f8 <test_kfree+0x54c>
f01207e1:	83 ec 04             	sub    $0x4,%esp
f01207e4:	68 14 b7 13 f0       	push   $0xf013b714
f01207e9:	68 f8 04 00 00       	push   $0x4f8
f01207ee:	68 fa b6 13 f0       	push   $0xf013b6fa
f01207f3:	e8 0d fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207f8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207fb:	e8 b1 c7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120800:	29 c3                	sub    %eax,%ebx
f0120802:	89 d8                	mov    %ebx,%eax
f0120804:	83 f8 01             	cmp    $0x1,%eax
f0120807:	74 17                	je     f0120820 <test_kfree+0x574>
f0120809:	83 ec 04             	sub    $0x4,%esp
f012080c:	68 7c b7 13 f0       	push   $0xf013b77c
f0120811:	68 f9 04 00 00       	push   $0x4f9
f0120816:	68 fa b6 13 f0       	push   $0xf013b6fa
f012081b:	e8 e5 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120820:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120827:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012082a:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120830:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120833:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012083a:	eb 0e                	jmp    f012084a <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f012083c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012083f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120842:	01 d0                	add    %edx,%eax
f0120844:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120847:	ff 45 f4             	incl   -0xc(%ebp)
f012084a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120850:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120853:	7f e7                	jg     f012083c <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120855:	e8 57 c7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012085a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012085d:	e8 66 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120862:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120865:	83 ec 0c             	sub    $0xc,%esp
f0120868:	68 00 1c 00 00       	push   $0x1c00
f012086d:	e8 1a 73 fe ff       	call   f0107b8c <kmalloc>
f0120872:	83 c4 10             	add    $0x10,%esp
f0120875:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012087b:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120881:	89 c1                	mov    %eax,%ecx
f0120883:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012088a:	10 00 00 
f012088d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120893:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120898:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012089e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01208a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01208a9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01208af:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01208b5:	29 d0                	sub    %edx,%eax
f01208b7:	89 c3                	mov    %eax,%ebx
f01208b9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01208c0:	10 00 00 
f01208c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01208c8:	0f b6 d0             	movzbl %al,%edx
f01208cb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01208d1:	01 d0                	add    %edx,%eax
f01208d3:	48                   	dec    %eax
f01208d4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01208da:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01208e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01208e5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01208eb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01208f1:	29 d0                	sub    %edx,%eax
f01208f3:	01 c3                	add    %eax,%ebx
f01208f5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01208fc:	10 00 00 
f01208ff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120904:	0f b6 c0             	movzbl %al,%eax
f0120907:	c1 e0 04             	shl    $0x4,%eax
f012090a:	89 c2                	mov    %eax,%edx
f012090c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120912:	01 d0                	add    %edx,%eax
f0120914:	48                   	dec    %eax
f0120915:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012091b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120921:	ba 00 00 00 00       	mov    $0x0,%edx
f0120926:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012092c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120932:	29 d0                	sub    %edx,%eax
f0120934:	01 d8                	add    %ebx,%eax
f0120936:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012093b:	39 c1                	cmp    %eax,%ecx
f012093d:	74 17                	je     f0120956 <test_kfree+0x6aa>
f012093f:	83 ec 04             	sub    $0x4,%esp
f0120942:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120947:	68 05 05 00 00       	push   $0x505
f012094c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120951:	e8 af f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120956:	e8 6d 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012095b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012095e:	74 17                	je     f0120977 <test_kfree+0x6cb>
f0120960:	83 ec 04             	sub    $0x4,%esp
f0120963:	68 14 b7 13 f0       	push   $0xf013b714
f0120968:	68 06 05 00 00       	push   $0x506
f012096d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120972:	e8 8e f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120977:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012097a:	e8 32 c6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012097f:	29 c3                	sub    %eax,%ebx
f0120981:	89 d8                	mov    %ebx,%eax
f0120983:	83 f8 02             	cmp    $0x2,%eax
f0120986:	74 17                	je     f012099f <test_kfree+0x6f3>
f0120988:	83 ec 04             	sub    $0x4,%esp
f012098b:	68 7c b7 13 f0       	push   $0xf013b77c
f0120990:	68 07 05 00 00       	push   $0x507
f0120995:	68 fa b6 13 f0       	push   $0xf013b6fa
f012099a:	e8 66 f8 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012099f:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f01209a6:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01209a9:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01209af:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01209b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209b9:	eb 0e                	jmp    f01209c9 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f01209bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01209be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01209c1:	01 d0                	add    %edx,%eax
f01209c3:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01209c6:	ff 45 f4             	incl   -0xc(%ebp)
f01209c9:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01209cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01209d2:	7f e7                	jg     f01209bb <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01209d4:	e8 d8 c5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01209d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01209dc:	e8 e7 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01209e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01209e4:	83 ec 0c             	sub    $0xc,%esp
f01209e7:	68 00 fc 2f 00       	push   $0x2ffc00
f01209ec:	e8 9b 71 fe ff       	call   f0107b8c <kmalloc>
f01209f1:	83 c4 10             	add    $0x10,%esp
f01209f4:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01209fa:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120a00:	89 c1                	mov    %eax,%ecx
f0120a02:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120a09:	10 00 00 
f0120a0c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120a12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a17:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120a1d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120a23:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a28:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120a2e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120a34:	29 d0                	sub    %edx,%eax
f0120a36:	89 c3                	mov    %eax,%ebx
f0120a38:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120a3f:	10 00 00 
f0120a42:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120a47:	0f b6 d0             	movzbl %al,%edx
f0120a4a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120a50:	01 d0                	add    %edx,%eax
f0120a52:	48                   	dec    %eax
f0120a53:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120a59:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120a5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a64:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120a6a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120a70:	29 d0                	sub    %edx,%eax
f0120a72:	01 c3                	add    %eax,%ebx
f0120a74:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120a7b:	10 00 00 
f0120a7e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120a83:	0f b6 c0             	movzbl %al,%eax
f0120a86:	c1 e0 04             	shl    $0x4,%eax
f0120a89:	89 c2                	mov    %eax,%edx
f0120a8b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120a91:	01 d0                	add    %edx,%eax
f0120a93:	48                   	dec    %eax
f0120a94:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120a9a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120aa0:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aa5:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120aab:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120ab1:	29 d0                	sub    %edx,%eax
f0120ab3:	01 d8                	add    %ebx,%eax
f0120ab5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120aba:	39 c1                	cmp    %eax,%ecx
f0120abc:	74 17                	je     f0120ad5 <test_kfree+0x829>
f0120abe:	83 ec 04             	sub    $0x4,%esp
f0120ac1:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120ac6:	68 13 05 00 00       	push   $0x513
f0120acb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120ad0:	e8 30 f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ad5:	e8 ee 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ada:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120add:	74 17                	je     f0120af6 <test_kfree+0x84a>
f0120adf:	83 ec 04             	sub    $0x4,%esp
f0120ae2:	68 14 b7 13 f0       	push   $0xf013b714
f0120ae7:	68 14 05 00 00       	push   $0x514
f0120aec:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120af1:	e8 0f f7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120af6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120af9:	e8 b3 c4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120afe:	29 c3                	sub    %eax,%ebx
f0120b00:	89 d8                	mov    %ebx,%eax
f0120b02:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120b07:	74 17                	je     f0120b20 <test_kfree+0x874>
f0120b09:	83 ec 04             	sub    $0x4,%esp
f0120b0c:	68 7c b7 13 f0       	push   $0xf013b77c
f0120b11:	68 15 05 00 00       	push   $0x515
f0120b16:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120b1b:	e8 e5 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120b20:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120b27:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120b2a:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120b30:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120b33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b3a:	eb 0e                	jmp    f0120b4a <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120b3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b3f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b42:	01 d0                	add    %edx,%eax
f0120b44:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120b47:	ff 45 f4             	incl   -0xc(%ebp)
f0120b4a:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120b50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b53:	7f e7                	jg     f0120b3c <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120b55:	e8 57 c4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120b5a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b5d:	e8 66 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b62:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120b65:	83 ec 0c             	sub    $0xc,%esp
f0120b68:	68 00 fc 5f 00       	push   $0x5ffc00
f0120b6d:	e8 1a 70 fe ff       	call   f0107b8c <kmalloc>
f0120b72:	83 c4 10             	add    $0x10,%esp
f0120b75:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b7b:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120b81:	89 c1                	mov    %eax,%ecx
f0120b83:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120b8a:	10 00 00 
f0120b8d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120b93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120b98:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120b9e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120ba4:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ba9:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120baf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120bb5:	29 d0                	sub    %edx,%eax
f0120bb7:	89 c3                	mov    %eax,%ebx
f0120bb9:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120bc0:	10 00 00 
f0120bc3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120bc8:	0f b6 d0             	movzbl %al,%edx
f0120bcb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120bd1:	01 d0                	add    %edx,%eax
f0120bd3:	48                   	dec    %eax
f0120bd4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120bda:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120be0:	ba 00 00 00 00       	mov    $0x0,%edx
f0120be5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120beb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120bf1:	29 d0                	sub    %edx,%eax
f0120bf3:	01 c3                	add    %eax,%ebx
f0120bf5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120bfc:	10 00 00 
f0120bff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120c04:	0f b6 c0             	movzbl %al,%eax
f0120c07:	c1 e0 04             	shl    $0x4,%eax
f0120c0a:	89 c2                	mov    %eax,%edx
f0120c0c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120c12:	01 d0                	add    %edx,%eax
f0120c14:	48                   	dec    %eax
f0120c15:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120c1b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120c21:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c26:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120c2c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120c32:	29 d0                	sub    %edx,%eax
f0120c34:	01 d8                	add    %ebx,%eax
f0120c36:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120c3b:	39 c1                	cmp    %eax,%ecx
f0120c3d:	74 17                	je     f0120c56 <test_kfree+0x9aa>
f0120c3f:	83 ec 04             	sub    $0x4,%esp
f0120c42:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120c47:	68 21 05 00 00       	push   $0x521
f0120c4c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120c51:	e8 af f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c56:	e8 6d 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c5b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c5e:	74 17                	je     f0120c77 <test_kfree+0x9cb>
f0120c60:	83 ec 04             	sub    $0x4,%esp
f0120c63:	68 14 b7 13 f0       	push   $0xf013b714
f0120c68:	68 22 05 00 00       	push   $0x522
f0120c6d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120c72:	e8 8e f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c77:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c7a:	e8 32 c3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120c7f:	29 c3                	sub    %eax,%ebx
f0120c81:	89 d8                	mov    %ebx,%eax
f0120c83:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120c88:	74 17                	je     f0120ca1 <test_kfree+0x9f5>
f0120c8a:	83 ec 04             	sub    $0x4,%esp
f0120c8d:	68 7c b7 13 f0       	push   $0xf013b77c
f0120c92:	68 23 05 00 00       	push   $0x523
f0120c97:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120c9c:	e8 64 f5 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120ca1:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120ca8:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120cab:	e8 01 c3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120cb0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120cb3:	e8 10 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120cb8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120cbb:	83 ec 0c             	sub    $0xc,%esp
f0120cbe:	68 00 38 00 00       	push   $0x3800
f0120cc3:	e8 c4 6e fe ff       	call   f0107b8c <kmalloc>
f0120cc8:	83 c4 10             	add    $0x10,%esp
f0120ccb:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120cd1:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120cd7:	89 c1                	mov    %eax,%ecx
f0120cd9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120ce0:	10 00 00 
f0120ce3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120ce9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120cee:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120cf4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120cfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cff:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120d05:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120d0b:	29 d0                	sub    %edx,%eax
f0120d0d:	89 c3                	mov    %eax,%ebx
f0120d0f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120d16:	10 00 00 
f0120d19:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120d1e:	0f b6 d0             	movzbl %al,%edx
f0120d21:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120d27:	01 d0                	add    %edx,%eax
f0120d29:	48                   	dec    %eax
f0120d2a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120d30:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120d36:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d3b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120d41:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120d47:	29 d0                	sub    %edx,%eax
f0120d49:	01 c3                	add    %eax,%ebx
f0120d4b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120d52:	10 00 00 
f0120d55:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0120d5a:	0f b6 c0             	movzbl %al,%eax
f0120d5d:	c1 e0 04             	shl    $0x4,%eax
f0120d60:	89 c2                	mov    %eax,%edx
f0120d62:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120d68:	01 d0                	add    %edx,%eax
f0120d6a:	48                   	dec    %eax
f0120d6b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120d71:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d7c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120d82:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120d88:	29 d0                	sub    %edx,%eax
f0120d8a:	01 d8                	add    %ebx,%eax
f0120d8c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120d91:	39 c1                	cmp    %eax,%ecx
f0120d93:	74 17                	je     f0120dac <test_kfree+0xb00>
f0120d95:	83 ec 04             	sub    $0x4,%esp
f0120d98:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0120d9d:	68 2a 05 00 00       	push   $0x52a
f0120da2:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120da7:	e8 59 f4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dac:	e8 17 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120db1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120db4:	74 17                	je     f0120dcd <test_kfree+0xb21>
f0120db6:	83 ec 04             	sub    $0x4,%esp
f0120db9:	68 14 b7 13 f0       	push   $0xf013b714
f0120dbe:	68 2b 05 00 00       	push   $0x52b
f0120dc3:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120dc8:	e8 38 f4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120dcd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120dd0:	e8 dc c1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120dd5:	29 c3                	sub    %eax,%ebx
f0120dd7:	89 d8                	mov    %ebx,%eax
f0120dd9:	83 f8 04             	cmp    $0x4,%eax
f0120ddc:	74 17                	je     f0120df5 <test_kfree+0xb49>
f0120dde:	83 ec 04             	sub    $0x4,%esp
f0120de1:	68 7c b7 13 f0       	push   $0xf013b77c
f0120de6:	68 2c 05 00 00       	push   $0x52c
f0120deb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120df0:	e8 10 f4 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120df5:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120dfc:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120dff:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120e05:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120e08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e0f:	eb 0e                	jmp    f0120e1f <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e14:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e17:	01 d0                	add    %edx,%eax
f0120e19:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120e1c:	ff 45 f4             	incl   -0xc(%ebp)
f0120e1f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120e25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e28:	7f e7                	jg     f0120e11 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120e2a:	e8 82 c1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120e2f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120e35:	e8 8e 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e3a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120e40:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120e46:	83 ec 0c             	sub    $0xc,%esp
f0120e49:	50                   	push   %eax
f0120e4a:	e8 08 6e fe ff       	call   f0107c57 <kfree>
f0120e4f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e52:	e8 71 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120e57:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120e5d:	74 17                	je     f0120e76 <test_kfree+0xbca>
f0120e5f:	83 ec 04             	sub    $0x4,%esp
f0120e62:	68 14 b7 13 f0       	push   $0xf013b714
f0120e67:	68 3b 05 00 00       	push   $0x53b
f0120e6c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120e71:	e8 8f f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e76:	e8 36 c1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120e7b:	89 c2                	mov    %eax,%edx
f0120e7d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120e83:	29 c2                	sub    %eax,%edx
f0120e85:	89 d0                	mov    %edx,%eax
f0120e87:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120e8c:	74 17                	je     f0120ea5 <test_kfree+0xbf9>
f0120e8e:	83 ec 04             	sub    $0x4,%esp
f0120e91:	68 84 be 13 f0       	push   $0xf013be84
f0120e96:	68 3c 05 00 00       	push   $0x53c
f0120e9b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120ea0:	e8 60 f3 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ea5:	e8 07 c1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120eaa:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120eb0:	e8 13 2f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120eb5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120ebb:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120ec1:	83 ec 0c             	sub    $0xc,%esp
f0120ec4:	50                   	push   %eax
f0120ec5:	e8 8d 6d fe ff       	call   f0107c57 <kfree>
f0120eca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ecd:	e8 f6 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120ed2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120ed8:	74 17                	je     f0120ef1 <test_kfree+0xc45>
f0120eda:	83 ec 04             	sub    $0x4,%esp
f0120edd:	68 14 b7 13 f0       	push   $0xf013b714
f0120ee2:	68 42 05 00 00       	push   $0x542
f0120ee7:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120eec:	e8 14 f3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ef1:	e8 bb c0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120ef6:	89 c2                	mov    %eax,%edx
f0120ef8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120efe:	29 c2                	sub    %eax,%edx
f0120f00:	89 d0                	mov    %edx,%eax
f0120f02:	83 f8 01             	cmp    $0x1,%eax
f0120f05:	74 17                	je     f0120f1e <test_kfree+0xc72>
f0120f07:	83 ec 04             	sub    $0x4,%esp
f0120f0a:	68 84 be 13 f0       	push   $0xf013be84
f0120f0f:	68 43 05 00 00       	push   $0x543
f0120f14:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120f19:	e8 e7 f2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120f1e:	e8 8e c0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120f23:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f29:	e8 9a 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120f2e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120f34:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120f3a:	83 ec 0c             	sub    $0xc,%esp
f0120f3d:	50                   	push   %eax
f0120f3e:	e8 14 6d fe ff       	call   f0107c57 <kfree>
f0120f43:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f46:	e8 7d 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120f4b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120f51:	74 17                	je     f0120f6a <test_kfree+0xcbe>
f0120f53:	83 ec 04             	sub    $0x4,%esp
f0120f56:	68 14 b7 13 f0       	push   $0xf013b714
f0120f5b:	68 49 05 00 00       	push   $0x549
f0120f60:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120f65:	e8 9b f2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f6a:	e8 42 c0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120f6f:	89 c2                	mov    %eax,%edx
f0120f71:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120f77:	29 c2                	sub    %eax,%edx
f0120f79:	89 d0                	mov    %edx,%eax
f0120f7b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120f80:	74 17                	je     f0120f99 <test_kfree+0xced>
f0120f82:	83 ec 04             	sub    $0x4,%esp
f0120f85:	68 84 be 13 f0       	push   $0xf013be84
f0120f8a:	68 4a 05 00 00       	push   $0x54a
f0120f8f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120f94:	e8 6c f2 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120f99:	e8 13 c0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120f9e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120fa4:	e8 1f 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120fa9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120faf:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120fb5:	83 ec 0c             	sub    $0xc,%esp
f0120fb8:	50                   	push   %eax
f0120fb9:	e8 99 6c fe ff       	call   f0107c57 <kfree>
f0120fbe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fc1:	e8 02 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120fc6:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120fcc:	74 17                	je     f0120fe5 <test_kfree+0xd39>
f0120fce:	83 ec 04             	sub    $0x4,%esp
f0120fd1:	68 14 b7 13 f0       	push   $0xf013b714
f0120fd6:	68 50 05 00 00       	push   $0x550
f0120fdb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0120fe0:	e8 20 f2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fe5:	e8 c7 bf fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0120fea:	89 c2                	mov    %eax,%edx
f0120fec:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120ff2:	29 c2                	sub    %eax,%edx
f0120ff4:	89 d0                	mov    %edx,%eax
f0120ff6:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120ffb:	74 17                	je     f0121014 <test_kfree+0xd68>
f0120ffd:	83 ec 04             	sub    $0x4,%esp
f0121000:	68 84 be 13 f0       	push   $0xf013be84
f0121005:	68 51 05 00 00       	push   $0x551
f012100a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012100f:	e8 f1 f1 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121014:	83 ec 0c             	sub    $0xc,%esp
f0121017:	68 bc be 13 f0       	push   $0xf013bebc
f012101c:	e8 ed fc fd ff       	call   f0100d0e <cprintf>
f0121021:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121024:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012102a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012102d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121034:	eb 1e                	jmp    f0121054 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0121036:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012103c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012103f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121042:	01 c8                	add    %ecx,%eax
f0121044:	8a 00                	mov    (%eax),%al
f0121046:	0f be c0             	movsbl %al,%eax
f0121049:	01 d0                	add    %edx,%eax
f012104b:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121051:	ff 45 f4             	incl   -0xc(%ebp)
f0121054:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012105a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012105d:	7f d7                	jg     f0121036 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012105f:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0121065:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012106b:	89 c1                	mov    %eax,%ecx
f012106d:	01 c9                	add    %ecx,%ecx
f012106f:	01 c8                	add    %ecx,%eax
f0121071:	39 c2                	cmp    %eax,%edx
f0121073:	74 17                	je     f012108c <test_kfree+0xde0>
f0121075:	83 ec 04             	sub    $0x4,%esp
f0121078:	68 e0 be 13 f0       	push   $0xf013bee0
f012107d:	68 5e 05 00 00       	push   $0x55e
f0121082:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121087:	e8 79 f1 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012108c:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121092:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121095:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012109c:	eb 1e                	jmp    f01210bc <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f012109e:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01210a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01210a7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210aa:	01 c8                	add    %ecx,%eax
f01210ac:	8a 00                	mov    (%eax),%al
f01210ae:	0f be c0             	movsbl %al,%eax
f01210b1:	01 d0                	add    %edx,%eax
f01210b3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01210b9:	ff 45 f4             	incl   -0xc(%ebp)
f01210bc:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01210c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210c5:	7f d7                	jg     f012109e <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01210c7:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01210cd:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f01210d3:	c1 e2 02             	shl    $0x2,%edx
f01210d6:	39 d0                	cmp    %edx,%eax
f01210d8:	74 17                	je     f01210f1 <test_kfree+0xe45>
f01210da:	83 ec 04             	sub    $0x4,%esp
f01210dd:	68 e0 be 13 f0       	push   $0xf013bee0
f01210e2:	68 66 05 00 00       	push   $0x566
f01210e7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01210ec:	e8 14 f1 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01210f1:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01210f7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01210fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121101:	eb 1e                	jmp    f0121121 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0121103:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0121109:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012110c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012110f:	01 c8                	add    %ecx,%eax
f0121111:	8a 00                	mov    (%eax),%al
f0121113:	0f be c0             	movsbl %al,%eax
f0121116:	01 d0                	add    %edx,%eax
f0121118:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012111e:	ff 45 f4             	incl   -0xc(%ebp)
f0121121:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121127:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012112a:	7f d7                	jg     f0121103 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012112c:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0121132:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0121138:	89 d0                	mov    %edx,%eax
f012113a:	c1 e0 02             	shl    $0x2,%eax
f012113d:	01 d0                	add    %edx,%eax
f012113f:	39 c1                	cmp    %eax,%ecx
f0121141:	74 17                	je     f012115a <test_kfree+0xeae>
f0121143:	83 ec 04             	sub    $0x4,%esp
f0121146:	68 e0 be 13 f0       	push   $0xf013bee0
f012114b:	68 6e 05 00 00       	push   $0x56e
f0121150:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121155:	e8 ab f0 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012115a:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121160:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121163:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012116a:	eb 1e                	jmp    f012118a <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f012116c:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0121172:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121175:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121178:	01 c8                	add    %ecx,%eax
f012117a:	8a 00                	mov    (%eax),%al
f012117c:	0f be c0             	movsbl %al,%eax
f012117f:	01 d0                	add    %edx,%eax
f0121181:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121187:	ff 45 f4             	incl   -0xc(%ebp)
f012118a:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0121190:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121193:	7f d7                	jg     f012116c <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0121195:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012119b:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01211a1:	89 d0                	mov    %edx,%eax
f01211a3:	01 c0                	add    %eax,%eax
f01211a5:	01 d0                	add    %edx,%eax
f01211a7:	01 c0                	add    %eax,%eax
f01211a9:	01 d0                	add    %edx,%eax
f01211ab:	39 c1                	cmp    %eax,%ecx
f01211ad:	74 17                	je     f01211c6 <test_kfree+0xf1a>
f01211af:	83 ec 04             	sub    $0x4,%esp
f01211b2:	68 e0 be 13 f0       	push   $0xf013bee0
f01211b7:	68 76 05 00 00       	push   $0x576
f01211bc:	68 fa b6 13 f0       	push   $0xf013b6fa
f01211c1:	e8 3f f0 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01211c6:	83 ec 0c             	sub    $0xc,%esp
f01211c9:	68 13 bf 13 f0       	push   $0xf013bf13
f01211ce:	e8 3b fb fd ff       	call   f0100d0e <cprintf>
f01211d3:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01211d6:	e8 d6 bd fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01211db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211de:	e8 e5 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01211e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01211e6:	83 ec 0c             	sub    $0xc,%esp
f01211e9:	68 00 50 00 00       	push   $0x5000
f01211ee:	e8 99 69 fe ff       	call   f0107b8c <kmalloc>
f01211f3:	83 c4 10             	add    $0x10,%esp
f01211f6:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211fc:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121202:	89 c1                	mov    %eax,%ecx
f0121204:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012120b:	10 00 00 
f012120e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121214:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121219:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012121f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121225:	ba 00 00 00 00       	mov    $0x0,%edx
f012122a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121230:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121236:	29 d0                	sub    %edx,%eax
f0121238:	89 c3                	mov    %eax,%ebx
f012123a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121241:	10 00 00 
f0121244:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121249:	0f b6 d0             	movzbl %al,%edx
f012124c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121252:	01 d0                	add    %edx,%eax
f0121254:	48                   	dec    %eax
f0121255:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012125b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121261:	ba 00 00 00 00       	mov    $0x0,%edx
f0121266:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012126c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121272:	29 d0                	sub    %edx,%eax
f0121274:	01 c3                	add    %eax,%ebx
f0121276:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012127d:	10 00 00 
f0121280:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121285:	0f b6 c0             	movzbl %al,%eax
f0121288:	c1 e0 04             	shl    $0x4,%eax
f012128b:	89 c2                	mov    %eax,%edx
f012128d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0121293:	01 d0                	add    %edx,%eax
f0121295:	48                   	dec    %eax
f0121296:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012129c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01212a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01212a7:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01212ad:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01212b3:	29 d0                	sub    %edx,%eax
f01212b5:	01 d8                	add    %ebx,%eax
f01212b7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01212bc:	39 c1                	cmp    %eax,%ecx
f01212be:	74 17                	je     f01212d7 <test_kfree+0x102b>
f01212c0:	83 ec 04             	sub    $0x4,%esp
f01212c3:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01212c8:	68 80 05 00 00       	push   $0x580
f01212cd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01212d2:	e8 2e ef fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212d7:	e8 ec 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01212dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212df:	74 17                	je     f01212f8 <test_kfree+0x104c>
f01212e1:	83 ec 04             	sub    $0x4,%esp
f01212e4:	68 14 b7 13 f0       	push   $0xf013b714
f01212e9:	68 81 05 00 00       	push   $0x581
f01212ee:	68 fa b6 13 f0       	push   $0xf013b6fa
f01212f3:	e8 0d ef fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01212f8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01212fb:	e8 b1 bc fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121300:	29 c3                	sub    %eax,%ebx
f0121302:	89 d8                	mov    %ebx,%eax
f0121304:	83 f8 05             	cmp    $0x5,%eax
f0121307:	74 17                	je     f0121320 <test_kfree+0x1074>
f0121309:	83 ec 04             	sub    $0x4,%esp
f012130c:	68 7c b7 13 f0       	push   $0xf013b77c
f0121311:	68 82 05 00 00       	push   $0x582
f0121316:	68 fa b6 13 f0       	push   $0xf013b6fa
f012131b:	e8 e5 ee fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121320:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0121327:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012132a:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121330:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121333:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012133a:	eb 0e                	jmp    f012134a <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f012133c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012133f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121342:	01 d0                	add    %edx,%eax
f0121344:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0121347:	ff 45 f4             	incl   -0xc(%ebp)
f012134a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121350:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121353:	7f e7                	jg     f012133c <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121355:	e8 57 bc fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012135a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012135d:	e8 66 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121362:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0121365:	83 ec 0c             	sub    $0xc,%esp
f0121368:	68 00 00 10 00       	push   $0x100000
f012136d:	e8 1a 68 fe ff       	call   f0107b8c <kmalloc>
f0121372:	83 c4 10             	add    $0x10,%esp
f0121375:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012137b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121381:	89 c1                	mov    %eax,%ecx
f0121383:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012138a:	10 00 00 
f012138d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0121393:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121398:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012139e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01213a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01213a9:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01213af:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01213b5:	29 d0                	sub    %edx,%eax
f01213b7:	89 c3                	mov    %eax,%ebx
f01213b9:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01213c0:	10 00 00 
f01213c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01213c8:	0f b6 d0             	movzbl %al,%edx
f01213cb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01213d1:	01 d0                	add    %edx,%eax
f01213d3:	48                   	dec    %eax
f01213d4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01213da:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01213e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01213e5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01213eb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01213f1:	29 d0                	sub    %edx,%eax
f01213f3:	01 c3                	add    %eax,%ebx
f01213f5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01213fc:	10 00 00 
f01213ff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121404:	0f b6 c0             	movzbl %al,%eax
f0121407:	c1 e0 04             	shl    $0x4,%eax
f012140a:	89 c2                	mov    %eax,%edx
f012140c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121412:	01 d0                	add    %edx,%eax
f0121414:	48                   	dec    %eax
f0121415:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012141b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121421:	ba 00 00 00 00       	mov    $0x0,%edx
f0121426:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012142c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121432:	29 d0                	sub    %edx,%eax
f0121434:	01 d8                	add    %ebx,%eax
f0121436:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012143b:	39 c1                	cmp    %eax,%ecx
f012143d:	74 17                	je     f0121456 <test_kfree+0x11aa>
f012143f:	83 ec 04             	sub    $0x4,%esp
f0121442:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0121447:	68 8e 05 00 00       	push   $0x58e
f012144c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121451:	e8 af ed fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121456:	e8 6d 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012145b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012145e:	74 17                	je     f0121477 <test_kfree+0x11cb>
f0121460:	83 ec 04             	sub    $0x4,%esp
f0121463:	68 14 b7 13 f0       	push   $0xf013b714
f0121468:	68 8f 05 00 00       	push   $0x58f
f012146d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121472:	e8 8e ed fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121477:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012147a:	e8 32 bb fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012147f:	29 c3                	sub    %eax,%ebx
f0121481:	89 d8                	mov    %ebx,%eax
f0121483:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121488:	74 17                	je     f01214a1 <test_kfree+0x11f5>
f012148a:	83 ec 04             	sub    $0x4,%esp
f012148d:	68 7c b7 13 f0       	push   $0xf013b77c
f0121492:	68 90 05 00 00       	push   $0x590
f0121497:	68 fa b6 13 f0       	push   $0xf013b6fa
f012149c:	e8 64 ed fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01214a1:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01214a8:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01214ab:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01214b1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01214b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01214bb:	eb 0e                	jmp    f01214cb <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01214bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01214c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214c3:	01 d0                	add    %edx,%eax
f01214c5:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01214c8:	ff 45 f4             	incl   -0xc(%ebp)
f01214cb:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01214d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01214d4:	7f e7                	jg     f01214bd <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01214d6:	e8 ac 66 ff ff       	call   f0117b87 <isKHeapPlacementStrategyNEXTFIT>
f01214db:	84 c0                	test   %al,%al
f01214dd:	0f 84 ac 06 00 00    	je     f0121b8f <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01214e3:	e8 c9 ba fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01214e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01214eb:	e8 d8 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01214f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01214f3:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01214fa:	10 00 00 
f01214fd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121503:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121508:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012150e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121514:	ba 00 00 00 00       	mov    $0x0,%edx
f0121519:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012151f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121525:	29 d0                	sub    %edx,%eax
f0121527:	89 c1                	mov    %eax,%ecx
f0121529:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121530:	10 00 00 
f0121533:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121538:	0f b6 d0             	movzbl %al,%edx
f012153b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121541:	01 d0                	add    %edx,%eax
f0121543:	48                   	dec    %eax
f0121544:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012154a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121550:	ba 00 00 00 00       	mov    $0x0,%edx
f0121555:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012155b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121561:	29 d0                	sub    %edx,%eax
f0121563:	01 c1                	add    %eax,%ecx
f0121565:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012156c:	10 00 00 
f012156f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121574:	0f b6 c0             	movzbl %al,%eax
f0121577:	c1 e0 04             	shl    $0x4,%eax
f012157a:	89 c2                	mov    %eax,%edx
f012157c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121582:	01 d0                	add    %edx,%eax
f0121584:	48                   	dec    %eax
f0121585:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012158b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121591:	ba 00 00 00 00       	mov    $0x0,%edx
f0121596:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012159c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01215a2:	29 d0                	sub    %edx,%eax
f01215a4:	01 c8                	add    %ecx,%eax
f01215a6:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01215ab:	29 c2                	sub    %eax,%edx
f01215ad:	89 d0                	mov    %edx,%eax
f01215af:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01215b5:	83 ec 0c             	sub    $0xc,%esp
f01215b8:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01215be:	e8 c9 65 fe ff       	call   f0107b8c <kmalloc>
f01215c3:	83 c4 10             	add    $0x10,%esp
f01215c6:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215cc:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01215d2:	89 c1                	mov    %eax,%ecx
f01215d4:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01215db:	10 00 00 
f01215de:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01215e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01215e9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01215ef:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01215f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01215fa:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121600:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121606:	29 d0                	sub    %edx,%eax
f0121608:	89 c3                	mov    %eax,%ebx
f012160a:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121611:	10 00 00 
f0121614:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121619:	0f b6 d0             	movzbl %al,%edx
f012161c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121622:	01 d0                	add    %edx,%eax
f0121624:	48                   	dec    %eax
f0121625:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012162b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121631:	ba 00 00 00 00       	mov    $0x0,%edx
f0121636:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012163c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121642:	29 d0                	sub    %edx,%eax
f0121644:	01 c3                	add    %eax,%ebx
f0121646:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012164d:	10 00 00 
f0121650:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121655:	0f b6 c0             	movzbl %al,%eax
f0121658:	c1 e0 04             	shl    $0x4,%eax
f012165b:	89 c2                	mov    %eax,%edx
f012165d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0121663:	01 d0                	add    %edx,%eax
f0121665:	48                   	dec    %eax
f0121666:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012166c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121672:	ba 00 00 00 00       	mov    $0x0,%edx
f0121677:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012167d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121683:	29 d0                	sub    %edx,%eax
f0121685:	01 d8                	add    %ebx,%eax
f0121687:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f012168c:	39 c1                	cmp    %eax,%ecx
f012168e:	74 17                	je     f01216a7 <test_kfree+0x13fb>
f0121690:	83 ec 04             	sub    $0x4,%esp
f0121693:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0121698:	68 9f 05 00 00       	push   $0x59f
f012169d:	68 fa b6 13 f0       	push   $0xf013b6fa
f01216a2:	e8 5e eb fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216a7:	e8 1c 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01216ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216af:	74 17                	je     f01216c8 <test_kfree+0x141c>
f01216b1:	83 ec 04             	sub    $0x4,%esp
f01216b4:	68 14 b7 13 f0       	push   $0xf013b714
f01216b9:	68 a0 05 00 00       	push   $0x5a0
f01216be:	68 fa b6 13 f0       	push   $0xf013b6fa
f01216c3:	e8 3d eb fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01216c8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01216cb:	e8 e1 b8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01216d0:	29 c3                	sub    %eax,%ebx
f01216d2:	89 da                	mov    %ebx,%edx
f01216d4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01216da:	c1 e8 0c             	shr    $0xc,%eax
f01216dd:	39 c2                	cmp    %eax,%edx
f01216df:	74 17                	je     f01216f8 <test_kfree+0x144c>
f01216e1:	83 ec 04             	sub    $0x4,%esp
f01216e4:	68 7c b7 13 f0       	push   $0xf013b77c
f01216e9:	68 a1 05 00 00       	push   $0x5a1
f01216ee:	68 fa b6 13 f0       	push   $0xf013b6fa
f01216f3:	e8 0d eb fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01216f8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01216fe:	48                   	dec    %eax
f01216ff:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121705:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012170b:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f012170e:	e8 9e b8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121713:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121716:	e8 ad 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012171b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f012171e:	83 ec 0c             	sub    $0xc,%esp
f0121721:	68 00 00 30 00       	push   $0x300000
f0121726:	e8 61 64 fe ff       	call   f0107b8c <kmalloc>
f012172b:	83 c4 10             	add    $0x10,%esp
f012172e:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121734:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012173a:	89 c1                	mov    %eax,%ecx
f012173c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121743:	10 00 00 
f0121746:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012174c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121751:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121757:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012175d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121762:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121768:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012176e:	29 d0                	sub    %edx,%eax
f0121770:	89 c3                	mov    %eax,%ebx
f0121772:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121779:	10 00 00 
f012177c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121781:	0f b6 d0             	movzbl %al,%edx
f0121784:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012178a:	01 d0                	add    %edx,%eax
f012178c:	48                   	dec    %eax
f012178d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121793:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121799:	ba 00 00 00 00       	mov    $0x0,%edx
f012179e:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f01217a4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01217aa:	29 d0                	sub    %edx,%eax
f01217ac:	01 c3                	add    %eax,%ebx
f01217ae:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01217b5:	10 00 00 
f01217b8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01217bd:	0f b6 c0             	movzbl %al,%eax
f01217c0:	c1 e0 04             	shl    $0x4,%eax
f01217c3:	89 c2                	mov    %eax,%edx
f01217c5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01217cb:	01 d0                	add    %edx,%eax
f01217cd:	48                   	dec    %eax
f01217ce:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01217d4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01217da:	ba 00 00 00 00       	mov    $0x0,%edx
f01217df:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01217e5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01217eb:	29 d0                	sub    %edx,%eax
f01217ed:	01 d8                	add    %ebx,%eax
f01217ef:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01217f4:	39 c1                	cmp    %eax,%ecx
f01217f6:	74 17                	je     f012180f <test_kfree+0x1563>
f01217f8:	83 ec 04             	sub    $0x4,%esp
f01217fb:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0121800:	68 ae 05 00 00       	push   $0x5ae
f0121805:	68 fa b6 13 f0       	push   $0xf013b6fa
f012180a:	e8 f6 e9 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012180f:	e8 b4 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121814:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121817:	74 17                	je     f0121830 <test_kfree+0x1584>
f0121819:	83 ec 04             	sub    $0x4,%esp
f012181c:	68 14 b7 13 f0       	push   $0xf013b714
f0121821:	68 af 05 00 00       	push   $0x5af
f0121826:	68 fa b6 13 f0       	push   $0xf013b6fa
f012182b:	e8 d5 e9 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121830:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121833:	e8 79 b7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121838:	29 c3                	sub    %eax,%ebx
f012183a:	89 d8                	mov    %ebx,%eax
f012183c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121841:	74 17                	je     f012185a <test_kfree+0x15ae>
f0121843:	83 ec 04             	sub    $0x4,%esp
f0121846:	68 7c b7 13 f0       	push   $0xf013b77c
f012184b:	68 b0 05 00 00       	push   $0x5b0
f0121850:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121855:	e8 ab e9 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012185a:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121861:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121864:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012186a:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012186d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121874:	eb 0e                	jmp    f0121884 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121876:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121879:	8b 45 80             	mov    -0x80(%ebp),%eax
f012187c:	01 d0                	add    %edx,%eax
f012187e:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121881:	ff 45 f4             	incl   -0xc(%ebp)
f0121884:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012188a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012188d:	7f e7                	jg     f0121876 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012188f:	e8 1d b7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121894:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121897:	e8 2c 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012189c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012189f:	83 ec 0c             	sub    $0xc,%esp
f01218a2:	68 00 08 00 00       	push   $0x800
f01218a7:	e8 e0 62 fe ff       	call   f0107b8c <kmalloc>
f01218ac:	83 c4 10             	add    $0x10,%esp
f01218af:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218b5:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01218bb:	89 c1                	mov    %eax,%ecx
f01218bd:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01218c4:	10 00 00 
f01218c7:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01218cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01218d2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01218d8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01218de:	ba 00 00 00 00       	mov    $0x0,%edx
f01218e3:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01218e9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01218ef:	29 d0                	sub    %edx,%eax
f01218f1:	89 c3                	mov    %eax,%ebx
f01218f3:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01218fa:	10 00 00 
f01218fd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121902:	0f b6 d0             	movzbl %al,%edx
f0121905:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012190b:	01 d0                	add    %edx,%eax
f012190d:	48                   	dec    %eax
f012190e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121914:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012191a:	ba 00 00 00 00       	mov    $0x0,%edx
f012191f:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121925:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012192b:	29 d0                	sub    %edx,%eax
f012192d:	01 c3                	add    %eax,%ebx
f012192f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121936:	10 00 00 
f0121939:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012193e:	0f b6 c0             	movzbl %al,%eax
f0121941:	c1 e0 04             	shl    $0x4,%eax
f0121944:	89 c2                	mov    %eax,%edx
f0121946:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012194c:	01 d0                	add    %edx,%eax
f012194e:	48                   	dec    %eax
f012194f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121955:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012195b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121960:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121966:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012196c:	29 d0                	sub    %edx,%eax
f012196e:	01 d8                	add    %ebx,%eax
f0121970:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121975:	39 c1                	cmp    %eax,%ecx
f0121977:	74 17                	je     f0121990 <test_kfree+0x16e4>
f0121979:	83 ec 04             	sub    $0x4,%esp
f012197c:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0121981:	68 bc 05 00 00       	push   $0x5bc
f0121986:	68 fa b6 13 f0       	push   $0xf013b6fa
f012198b:	e8 75 e8 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121990:	e8 33 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121995:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121998:	74 17                	je     f01219b1 <test_kfree+0x1705>
f012199a:	83 ec 04             	sub    $0x4,%esp
f012199d:	68 14 b7 13 f0       	push   $0xf013b714
f01219a2:	68 bd 05 00 00       	push   $0x5bd
f01219a7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01219ac:	e8 54 e8 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219b1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219b4:	e8 f8 b5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01219b9:	29 c3                	sub    %eax,%ebx
f01219bb:	89 d8                	mov    %ebx,%eax
f01219bd:	83 f8 01             	cmp    $0x1,%eax
f01219c0:	74 17                	je     f01219d9 <test_kfree+0x172d>
f01219c2:	83 ec 04             	sub    $0x4,%esp
f01219c5:	68 7c b7 13 f0       	push   $0xf013b77c
f01219ca:	68 be 05 00 00       	push   $0x5be
f01219cf:	68 fa b6 13 f0       	push   $0xf013b6fa
f01219d4:	e8 2c e8 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01219d9:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01219e0:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01219e3:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01219e9:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01219ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01219f3:	eb 0e                	jmp    f0121a03 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01219f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01219f8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01219fb:	01 d0                	add    %edx,%eax
f01219fd:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121a00:	ff 45 f4             	incl   -0xc(%ebp)
f0121a03:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121a09:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a0c:	7f e7                	jg     f01219f5 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121a0e:	e8 9e b5 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121a13:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121a16:	e8 ad 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121a1e:	83 ec 0c             	sub    $0xc,%esp
f0121a21:	68 00 00 10 00       	push   $0x100000
f0121a26:	e8 61 61 fe ff       	call   f0107b8c <kmalloc>
f0121a2b:	83 c4 10             	add    $0x10,%esp
f0121a2e:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a34:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121a3a:	89 c1                	mov    %eax,%ecx
f0121a3c:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121a43:	10 00 00 
f0121a46:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121a4c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a51:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121a57:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a62:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121a68:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121a6e:	29 d0                	sub    %edx,%eax
f0121a70:	89 c3                	mov    %eax,%ebx
f0121a72:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121a79:	10 00 00 
f0121a7c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121a81:	0f b6 d0             	movzbl %al,%edx
f0121a84:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121a8a:	01 d0                	add    %edx,%eax
f0121a8c:	48                   	dec    %eax
f0121a8d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121a93:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121a99:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a9e:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121aa4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121aaa:	29 d0                	sub    %edx,%eax
f0121aac:	01 c3                	add    %eax,%ebx
f0121aae:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121ab5:	10 00 00 
f0121ab8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121abd:	0f b6 c0             	movzbl %al,%eax
f0121ac0:	c1 e0 04             	shl    $0x4,%eax
f0121ac3:	89 c2                	mov    %eax,%edx
f0121ac5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121acb:	01 d0                	add    %edx,%eax
f0121acd:	48                   	dec    %eax
f0121ace:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121ad4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0121adf:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121ae5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121aeb:	29 d0                	sub    %edx,%eax
f0121aed:	01 d8                	add    %ebx,%eax
f0121aef:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121af4:	39 c1                	cmp    %eax,%ecx
f0121af6:	74 17                	je     f0121b0f <test_kfree+0x1863>
f0121af8:	83 ec 04             	sub    $0x4,%esp
f0121afb:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0121b00:	68 ca 05 00 00       	push   $0x5ca
f0121b05:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121b0a:	e8 f6 e6 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b0f:	e8 b4 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b14:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b17:	74 17                	je     f0121b30 <test_kfree+0x1884>
f0121b19:	83 ec 04             	sub    $0x4,%esp
f0121b1c:	68 14 b7 13 f0       	push   $0xf013b714
f0121b21:	68 cb 05 00 00       	push   $0x5cb
f0121b26:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121b2b:	e8 d5 e6 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b30:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b33:	e8 79 b4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121b38:	29 c3                	sub    %eax,%ebx
f0121b3a:	89 d8                	mov    %ebx,%eax
f0121b3c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121b41:	74 17                	je     f0121b5a <test_kfree+0x18ae>
f0121b43:	83 ec 04             	sub    $0x4,%esp
f0121b46:	68 7c b7 13 f0       	push   $0xf013b77c
f0121b4b:	68 cc 05 00 00       	push   $0x5cc
f0121b50:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121b55:	e8 ab e6 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121b5a:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121b61:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121b64:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121b6a:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121b6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b74:	eb 0e                	jmp    f0121b84 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121b76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b79:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b7c:	01 d0                	add    %edx,%eax
f0121b7e:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121b81:	ff 45 f4             	incl   -0xc(%ebp)
f0121b84:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121b8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b8d:	7f e7                	jg     f0121b76 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121b8f:	83 ec 0c             	sub    $0xc,%esp
f0121b92:	68 1a bf 13 f0       	push   $0xf013bf1a
f0121b97:	e8 72 f1 fd ff       	call   f0100d0e <cprintf>
f0121b9c:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121b9f:	e8 0d b4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121ba4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ba7:	e8 1c 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121baf:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121bb5:	83 ec 0c             	sub    $0xc,%esp
f0121bb8:	50                   	push   %eax
f0121bb9:	e8 99 60 fe ff       	call   f0107c57 <kfree>
f0121bbe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bc1:	e8 02 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bc6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bc9:	74 17                	je     f0121be2 <test_kfree+0x1936>
f0121bcb:	83 ec 04             	sub    $0x4,%esp
f0121bce:	68 14 b7 13 f0       	push   $0xf013b714
f0121bd3:	68 dd 05 00 00       	push   $0x5dd
f0121bd8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121bdd:	e8 23 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121be2:	e8 ca b3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121be7:	89 c2                	mov    %eax,%edx
f0121be9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121bec:	29 c2                	sub    %eax,%edx
f0121bee:	89 d0                	mov    %edx,%eax
f0121bf0:	83 f8 02             	cmp    $0x2,%eax
f0121bf3:	74 17                	je     f0121c0c <test_kfree+0x1960>
f0121bf5:	83 ec 04             	sub    $0x4,%esp
f0121bf8:	68 84 be 13 f0       	push   $0xf013be84
f0121bfd:	68 de 05 00 00       	push   $0x5de
f0121c02:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121c07:	e8 f9 e5 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c0c:	e8 a0 b3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121c11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c14:	e8 af 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121c1c:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121c22:	83 ec 0c             	sub    $0xc,%esp
f0121c25:	50                   	push   %eax
f0121c26:	e8 2c 60 fe ff       	call   f0107c57 <kfree>
f0121c2b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c2e:	e8 95 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c33:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c36:	74 17                	je     f0121c4f <test_kfree+0x19a3>
f0121c38:	83 ec 04             	sub    $0x4,%esp
f0121c3b:	68 14 b7 13 f0       	push   $0xf013b714
f0121c40:	68 e4 05 00 00       	push   $0x5e4
f0121c45:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121c4a:	e8 b6 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c4f:	e8 5d b3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121c54:	89 c2                	mov    %eax,%edx
f0121c56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121c59:	29 c2                	sub    %eax,%edx
f0121c5b:	89 d0                	mov    %edx,%eax
f0121c5d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121c62:	74 17                	je     f0121c7b <test_kfree+0x19cf>
f0121c64:	83 ec 04             	sub    $0x4,%esp
f0121c67:	68 84 be 13 f0       	push   $0xf013be84
f0121c6c:	68 e5 05 00 00       	push   $0x5e5
f0121c71:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121c76:	e8 8a e5 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c7b:	e8 31 b3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121c80:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c83:	e8 40 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c88:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121c8b:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121c91:	83 ec 0c             	sub    $0xc,%esp
f0121c94:	50                   	push   %eax
f0121c95:	e8 bd 5f fe ff       	call   f0107c57 <kfree>
f0121c9a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c9d:	e8 26 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ca2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ca5:	74 17                	je     f0121cbe <test_kfree+0x1a12>
f0121ca7:	83 ec 04             	sub    $0x4,%esp
f0121caa:	68 14 b7 13 f0       	push   $0xf013b714
f0121caf:	68 eb 05 00 00       	push   $0x5eb
f0121cb4:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121cb9:	e8 47 e5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121cbe:	e8 ee b2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121cc3:	89 c2                	mov    %eax,%edx
f0121cc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121cc8:	29 c2                	sub    %eax,%edx
f0121cca:	89 d0                	mov    %edx,%eax
f0121ccc:	83 f8 01             	cmp    $0x1,%eax
f0121ccf:	74 17                	je     f0121ce8 <test_kfree+0x1a3c>
f0121cd1:	83 ec 04             	sub    $0x4,%esp
f0121cd4:	68 84 be 13 f0       	push   $0xf013be84
f0121cd9:	68 ec 05 00 00       	push   $0x5ec
f0121cde:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121ce3:	e8 1d e5 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ce8:	e8 c4 b2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121ced:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cf0:	e8 d3 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121cf5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121cf8:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121cfe:	83 ec 0c             	sub    $0xc,%esp
f0121d01:	50                   	push   %eax
f0121d02:	e8 50 5f fe ff       	call   f0107c57 <kfree>
f0121d07:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d0a:	e8 b9 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d0f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d12:	74 17                	je     f0121d2b <test_kfree+0x1a7f>
f0121d14:	83 ec 04             	sub    $0x4,%esp
f0121d17:	68 14 b7 13 f0       	push   $0xf013b714
f0121d1c:	68 f2 05 00 00       	push   $0x5f2
f0121d21:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121d26:	e8 da e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d2b:	e8 81 b2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121d30:	89 c2                	mov    %eax,%edx
f0121d32:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d35:	29 c2                	sub    %eax,%edx
f0121d37:	89 d0                	mov    %edx,%eax
f0121d39:	83 f8 04             	cmp    $0x4,%eax
f0121d3c:	74 17                	je     f0121d55 <test_kfree+0x1aa9>
f0121d3e:	83 ec 04             	sub    $0x4,%esp
f0121d41:	68 84 be 13 f0       	push   $0xf013be84
f0121d46:	68 f3 05 00 00       	push   $0x5f3
f0121d4b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121d50:	e8 b0 e4 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121d55:	e8 57 b2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121d5a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d5d:	e8 66 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d62:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121d65:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121d6b:	83 ec 0c             	sub    $0xc,%esp
f0121d6e:	50                   	push   %eax
f0121d6f:	e8 e3 5e fe ff       	call   f0107c57 <kfree>
f0121d74:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d77:	e8 4c 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d7c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d7f:	74 17                	je     f0121d98 <test_kfree+0x1aec>
f0121d81:	83 ec 04             	sub    $0x4,%esp
f0121d84:	68 14 b7 13 f0       	push   $0xf013b714
f0121d89:	68 f9 05 00 00       	push   $0x5f9
f0121d8e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121d93:	e8 6d e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d98:	e8 14 b2 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121d9d:	89 c2                	mov    %eax,%edx
f0121d9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121da2:	29 c2                	sub    %eax,%edx
f0121da4:	89 d0                	mov    %edx,%eax
f0121da6:	83 f8 05             	cmp    $0x5,%eax
f0121da9:	74 17                	je     f0121dc2 <test_kfree+0x1b16>
f0121dab:	83 ec 04             	sub    $0x4,%esp
f0121dae:	68 84 be 13 f0       	push   $0xf013be84
f0121db3:	68 fa 05 00 00       	push   $0x5fa
f0121db8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121dbd:	e8 43 e4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121dc2:	e8 ea b1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121dc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121dca:	e8 f9 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121dcf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121dd2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121dd8:	83 ec 0c             	sub    $0xc,%esp
f0121ddb:	50                   	push   %eax
f0121ddc:	e8 76 5e fe ff       	call   f0107c57 <kfree>
f0121de1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121de4:	e8 df 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121de9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121dec:	74 17                	je     f0121e05 <test_kfree+0x1b59>
f0121dee:	83 ec 04             	sub    $0x4,%esp
f0121df1:	68 14 b7 13 f0       	push   $0xf013b714
f0121df6:	68 00 06 00 00       	push   $0x600
f0121dfb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121e00:	e8 00 e4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e05:	e8 a7 b1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121e0a:	89 c2                	mov    %eax,%edx
f0121e0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e0f:	29 c2                	sub    %eax,%edx
f0121e11:	89 d0                	mov    %edx,%eax
f0121e13:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121e18:	74 17                	je     f0121e31 <test_kfree+0x1b85>
f0121e1a:	83 ec 04             	sub    $0x4,%esp
f0121e1d:	68 84 be 13 f0       	push   $0xf013be84
f0121e22:	68 01 06 00 00       	push   $0x601
f0121e27:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121e2c:	e8 d4 e3 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121e31:	e8 51 5d ff ff       	call   f0117b87 <isKHeapPlacementStrategyNEXTFIT>
f0121e36:	84 c0                	test   %al,%al
f0121e38:	0f 84 80 02 00 00    	je     f01220be <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121e3e:	e8 6e b1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121e43:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121e46:	e8 7d 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e4b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121e4e:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121e54:	83 ec 0c             	sub    $0xc,%esp
f0121e57:	50                   	push   %eax
f0121e58:	e8 fa 5d fe ff       	call   f0107c57 <kfree>
f0121e5d:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121e60:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121e67:	10 00 00 
f0121e6a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121e70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121e75:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121e7b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121e81:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e86:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121e8c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121e92:	29 d0                	sub    %edx,%eax
f0121e94:	89 c1                	mov    %eax,%ecx
f0121e96:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121e9d:	10 00 00 
f0121ea0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121ea5:	0f b6 d0             	movzbl %al,%edx
f0121ea8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121eae:	01 d0                	add    %edx,%eax
f0121eb0:	48                   	dec    %eax
f0121eb1:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121eb7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121ebd:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ec2:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121ec8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121ece:	29 d0                	sub    %edx,%eax
f0121ed0:	01 c1                	add    %eax,%ecx
f0121ed2:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121ed9:	10 00 00 
f0121edc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0121ee1:	0f b6 c0             	movzbl %al,%eax
f0121ee4:	c1 e0 04             	shl    $0x4,%eax
f0121ee7:	89 c2                	mov    %eax,%edx
f0121ee9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121eef:	01 d0                	add    %edx,%eax
f0121ef1:	48                   	dec    %eax
f0121ef2:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121ef8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121efe:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f03:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121f09:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121f0f:	29 d0                	sub    %edx,%eax
f0121f11:	01 c8                	add    %ecx,%eax
f0121f13:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121f18:	29 c2                	sub    %eax,%edx
f0121f1a:	89 d0                	mov    %edx,%eax
f0121f1c:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f22:	e8 a1 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f27:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f2a:	74 17                	je     f0121f43 <test_kfree+0x1c97>
f0121f2c:	83 ec 04             	sub    $0x4,%esp
f0121f2f:	68 14 b7 13 f0       	push   $0xf013b714
f0121f34:	68 0b 06 00 00       	push   $0x60b
f0121f39:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121f3e:	e8 c2 e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f43:	e8 69 b0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121f48:	89 c2                	mov    %eax,%edx
f0121f4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f4d:	29 c2                	sub    %eax,%edx
f0121f4f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121f55:	c1 e8 0c             	shr    $0xc,%eax
f0121f58:	39 c2                	cmp    %eax,%edx
f0121f5a:	74 17                	je     f0121f73 <test_kfree+0x1cc7>
f0121f5c:	83 ec 04             	sub    $0x4,%esp
f0121f5f:	68 84 be 13 f0       	push   $0xf013be84
f0121f64:	68 0c 06 00 00       	push   $0x60c
f0121f69:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121f6e:	e8 92 e2 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121f73:	e8 39 b0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121f78:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121f7b:	e8 48 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f80:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121f83:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121f89:	83 ec 0c             	sub    $0xc,%esp
f0121f8c:	50                   	push   %eax
f0121f8d:	e8 c5 5c fe ff       	call   f0107c57 <kfree>
f0121f92:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f95:	e8 2e 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121f9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f9d:	74 17                	je     f0121fb6 <test_kfree+0x1d0a>
f0121f9f:	83 ec 04             	sub    $0x4,%esp
f0121fa2:	68 14 b7 13 f0       	push   $0xf013b714
f0121fa7:	68 12 06 00 00       	push   $0x612
f0121fac:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121fb1:	e8 4f e2 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fb6:	e8 f6 af fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121fbb:	89 c2                	mov    %eax,%edx
f0121fbd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121fc0:	29 c2                	sub    %eax,%edx
f0121fc2:	89 d0                	mov    %edx,%eax
f0121fc4:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121fc9:	74 17                	je     f0121fe2 <test_kfree+0x1d36>
f0121fcb:	83 ec 04             	sub    $0x4,%esp
f0121fce:	68 84 be 13 f0       	push   $0xf013be84
f0121fd3:	68 13 06 00 00       	push   $0x613
f0121fd8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0121fdd:	e8 23 e2 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121fe2:	e8 ca af fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0121fe7:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121fea:	e8 d9 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121fef:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121ff2:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121ff8:	83 ec 0c             	sub    $0xc,%esp
f0121ffb:	50                   	push   %eax
f0121ffc:	e8 56 5c fe ff       	call   f0107c57 <kfree>
f0122001:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122004:	e8 bf 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122009:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012200c:	74 17                	je     f0122025 <test_kfree+0x1d79>
f012200e:	83 ec 04             	sub    $0x4,%esp
f0122011:	68 14 b7 13 f0       	push   $0xf013b714
f0122016:	68 19 06 00 00       	push   $0x619
f012201b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122020:	e8 e0 e1 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122025:	e8 87 af fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012202a:	89 c2                	mov    %eax,%edx
f012202c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012202f:	29 c2                	sub    %eax,%edx
f0122031:	89 d0                	mov    %edx,%eax
f0122033:	83 f8 01             	cmp    $0x1,%eax
f0122036:	74 17                	je     f012204f <test_kfree+0x1da3>
f0122038:	83 ec 04             	sub    $0x4,%esp
f012203b:	68 84 be 13 f0       	push   $0xf013be84
f0122040:	68 1a 06 00 00       	push   $0x61a
f0122045:	68 fa b6 13 f0       	push   $0xf013b6fa
f012204a:	e8 b6 e1 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012204f:	e8 5d af fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122054:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122057:	e8 6c 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012205c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012205f:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0122065:	83 ec 0c             	sub    $0xc,%esp
f0122068:	50                   	push   %eax
f0122069:	e8 e9 5b fe ff       	call   f0107c57 <kfree>
f012206e:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122071:	e8 52 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122076:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122079:	74 17                	je     f0122092 <test_kfree+0x1de6>
f012207b:	83 ec 04             	sub    $0x4,%esp
f012207e:	68 14 b7 13 f0       	push   $0xf013b714
f0122083:	68 20 06 00 00       	push   $0x620
f0122088:	68 fa b6 13 f0       	push   $0xf013b6fa
f012208d:	e8 73 e1 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122092:	e8 1a af fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122097:	89 c2                	mov    %eax,%edx
f0122099:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012209c:	29 c2                	sub    %eax,%edx
f012209e:	89 d0                	mov    %edx,%eax
f01220a0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01220a5:	74 17                	je     f01220be <test_kfree+0x1e12>
f01220a7:	83 ec 04             	sub    $0x4,%esp
f01220aa:	68 84 be 13 f0       	push   $0xf013be84
f01220af:	68 21 06 00 00       	push   $0x621
f01220b4:	68 fa b6 13 f0       	push   $0xf013b6fa
f01220b9:	e8 47 e1 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01220be:	e8 ee ae fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01220c3:	89 c2                	mov    %eax,%edx
f01220c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01220c8:	39 c2                	cmp    %eax,%edx
f01220ca:	74 17                	je     f01220e3 <test_kfree+0x1e37>
f01220cc:	83 ec 04             	sub    $0x4,%esp
f01220cf:	68 24 bf 13 f0       	push   $0xf013bf24
f01220d4:	68 24 06 00 00       	push   $0x624
f01220d9:	68 fa b6 13 f0       	push   $0xf013b6fa
f01220de:	e8 22 e1 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f01220e3:	83 ec 0c             	sub    $0xc,%esp
f01220e6:	68 58 bf 13 f0       	push   $0xf013bf58
f01220eb:	e8 1e ec fd ff       	call   f0100d0e <cprintf>
f01220f0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01220f3:	83 ec 0c             	sub    $0xc,%esp
f01220f6:	6a 03                	push   $0x3
f01220f8:	e8 54 b3 fe ff       	call   f010d451 <sys_bypassPageFault>
f01220fd:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122100:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122107:	e9 82 00 00 00       	jmp    f012218e <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f012210c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012210f:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0122116:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122119:	8b 45 80             	mov    -0x80(%ebp),%eax
f012211c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012211f:	e8 1b b3 fe ff       	call   f010d43f <sys_rcr2>
f0122124:	89 c2                	mov    %eax,%edx
f0122126:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122129:	39 c2                	cmp    %eax,%edx
f012212b:	74 17                	je     f0122144 <test_kfree+0x1e98>
f012212d:	83 ec 04             	sub    $0x4,%esp
f0122130:	68 60 bf 13 f0       	push   $0xf013bf60
f0122135:	68 33 06 00 00       	push   $0x633
f012213a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012213f:	e8 c1 e0 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0122144:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122147:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012214e:	89 c2                	mov    %eax,%edx
f0122150:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122153:	01 d0                	add    %edx,%eax
f0122155:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122158:	e8 e2 b2 fe ff       	call   f010d43f <sys_rcr2>
f012215d:	89 c2                	mov    %eax,%edx
f012215f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122162:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122169:	89 c1                	mov    %eax,%ecx
f012216b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012216e:	01 c8                	add    %ecx,%eax
f0122170:	39 c2                	cmp    %eax,%edx
f0122172:	74 17                	je     f012218b <test_kfree+0x1edf>
f0122174:	83 ec 04             	sub    $0x4,%esp
f0122177:	68 60 bf 13 f0       	push   $0xf013bf60
f012217c:	68 35 06 00 00       	push   $0x635
f0122181:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122186:	e8 7a e0 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012218b:	ff 45 f4             	incl   -0xc(%ebp)
f012218e:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122192:	0f 8e 74 ff ff ff    	jle    f012210c <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122198:	83 ec 0c             	sub    $0xc,%esp
f012219b:	6a 00                	push   $0x0
f012219d:	e8 af b2 fe ff       	call   f010d451 <sys_bypassPageFault>
f01221a2:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01221a5:	83 ec 0c             	sub    $0xc,%esp
f01221a8:	68 a5 bf 13 f0       	push   $0xf013bfa5
f01221ad:	e8 5c eb fd ff       	call   f0100d0e <cprintf>
f01221b2:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01221b5:	e8 f7 ad fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01221ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221bd:	e8 06 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01221c5:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01221cb:	83 ec 0c             	sub    $0xc,%esp
f01221ce:	50                   	push   %eax
f01221cf:	e8 83 5a fe ff       	call   f0107c57 <kfree>
f01221d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01221d7:	e8 ec 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01221dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221df:	74 17                	je     f01221f8 <test_kfree+0x1f4c>
f01221e1:	83 ec 04             	sub    $0x4,%esp
f01221e4:	68 14 b7 13 f0       	push   $0xf013b714
f01221e9:	68 43 06 00 00       	push   $0x643
f01221ee:	68 fa b6 13 f0       	push   $0xf013b6fa
f01221f3:	e8 0d e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01221f8:	e8 b4 ad fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01221fd:	89 c2                	mov    %eax,%edx
f01221ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122202:	39 c2                	cmp    %eax,%edx
f0122204:	74 17                	je     f012221d <test_kfree+0x1f71>
f0122206:	83 ec 04             	sub    $0x4,%esp
f0122209:	68 ac bf 13 f0       	push   $0xf013bfac
f012220e:	68 44 06 00 00       	push   $0x644
f0122213:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122218:	e8 e8 df fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012221d:	e8 8f ad fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122222:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122225:	e8 9e 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012222a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012222d:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0122233:	83 ec 0c             	sub    $0xc,%esp
f0122236:	50                   	push   %eax
f0122237:	e8 1b 5a fe ff       	call   f0107c57 <kfree>
f012223c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012223f:	e8 84 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122244:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122247:	74 17                	je     f0122260 <test_kfree+0x1fb4>
f0122249:	83 ec 04             	sub    $0x4,%esp
f012224c:	68 14 b7 13 f0       	push   $0xf013b714
f0122251:	68 4a 06 00 00       	push   $0x64a
f0122256:	68 fa b6 13 f0       	push   $0xf013b6fa
f012225b:	e8 a5 df fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122260:	e8 4c ad fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122265:	89 c2                	mov    %eax,%edx
f0122267:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012226a:	39 c2                	cmp    %eax,%edx
f012226c:	74 17                	je     f0122285 <test_kfree+0x1fd9>
f012226e:	83 ec 04             	sub    $0x4,%esp
f0122271:	68 ac bf 13 f0       	push   $0xf013bfac
f0122276:	68 4b 06 00 00       	push   $0x64b
f012227b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122280:	e8 80 df fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122285:	e8 27 ad fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012228a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012228d:	e8 36 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122292:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122295:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012229b:	83 ec 0c             	sub    $0xc,%esp
f012229e:	50                   	push   %eax
f012229f:	e8 b3 59 fe ff       	call   f0107c57 <kfree>
f01222a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222a7:	e8 1c 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222af:	74 17                	je     f01222c8 <test_kfree+0x201c>
f01222b1:	83 ec 04             	sub    $0x4,%esp
f01222b4:	68 14 b7 13 f0       	push   $0xf013b714
f01222b9:	68 51 06 00 00       	push   $0x651
f01222be:	68 fa b6 13 f0       	push   $0xf013b6fa
f01222c3:	e8 3d df fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01222c8:	e8 e4 ac fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01222cd:	89 c2                	mov    %eax,%edx
f01222cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01222d2:	39 c2                	cmp    %eax,%edx
f01222d4:	74 17                	je     f01222ed <test_kfree+0x2041>
f01222d6:	83 ec 04             	sub    $0x4,%esp
f01222d9:	68 ac bf 13 f0       	push   $0xf013bfac
f01222de:	68 52 06 00 00       	push   $0x652
f01222e3:	68 fa b6 13 f0       	push   $0xf013b6fa
f01222e8:	e8 18 df fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01222ed:	e8 bf ac fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01222f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222f5:	e8 ce 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01222fa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01222fd:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122303:	83 ec 0c             	sub    $0xc,%esp
f0122306:	50                   	push   %eax
f0122307:	e8 4b 59 fe ff       	call   f0107c57 <kfree>
f012230c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012230f:	e8 b4 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122314:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122317:	74 17                	je     f0122330 <test_kfree+0x2084>
f0122319:	83 ec 04             	sub    $0x4,%esp
f012231c:	68 14 b7 13 f0       	push   $0xf013b714
f0122321:	68 58 06 00 00       	push   $0x658
f0122326:	68 fa b6 13 f0       	push   $0xf013b6fa
f012232b:	e8 d5 de fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122330:	e8 7c ac fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122335:	89 c2                	mov    %eax,%edx
f0122337:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012233a:	39 c2                	cmp    %eax,%edx
f012233c:	74 17                	je     f0122355 <test_kfree+0x20a9>
f012233e:	83 ec 04             	sub    $0x4,%esp
f0122341:	68 ac bf 13 f0       	push   $0xf013bfac
f0122346:	68 59 06 00 00       	push   $0x659
f012234b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122350:	e8 b0 de fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0122355:	83 ec 0c             	sub    $0xc,%esp
f0122358:	68 f3 bf 13 f0       	push   $0xf013bff3
f012235d:	e8 ac e9 fd ff       	call   f0100d0e <cprintf>
f0122362:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122365:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012236c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122373:	eb 48                	jmp    f01223bd <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122375:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122378:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012237d:	83 ec 04             	sub    $0x4,%esp
f0122380:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0122386:	51                   	push   %ecx
f0122387:	52                   	push   %edx
f0122388:	50                   	push   %eax
f0122389:	e8 23 47 fe ff       	call   f0106ab1 <get_page_table>
f012238e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122391:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0122397:	85 c0                	test   %eax,%eax
f0122399:	75 17                	jne    f01223b2 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012239b:	83 ec 04             	sub    $0x4,%esp
f012239e:	68 fc bf 13 f0       	push   $0xf013bffc
f01223a3:	68 67 06 00 00       	push   $0x667
f01223a8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01223ad:	e8 53 de fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01223b2:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01223b9:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01223bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01223c1:	78 b2                	js     f0122375 <test_kfree+0x20c9>
f01223c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01223c7:	7f 09                	jg     f01223d2 <test_kfree+0x2126>
f01223c9:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01223d0:	76 a3                	jbe    f0122375 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01223d2:	83 ec 0c             	sub    $0xc,%esp
f01223d5:	68 de b8 13 f0       	push   $0xf013b8de
f01223da:	e8 2f e9 fd ff       	call   f0100d0e <cprintf>
f01223df:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01223e2:	83 ec 0c             	sub    $0xc,%esp
f01223e5:	68 64 c0 13 f0       	push   $0xf013c064
f01223ea:	e8 1f e9 fd ff       	call   f0100d0e <cprintf>
f01223ef:	83 c4 10             	add    $0x10,%esp

	return 1;
f01223f2:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01223f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01223fa:	5b                   	pop    %ebx
f01223fb:	5f                   	pop    %edi
f01223fc:	5d                   	pop    %ebp
f01223fd:	c3                   	ret    

f01223fe <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01223fe:	55                   	push   %ebp
f01223ff:	89 e5                	mov    %esp,%ebp
f0122401:	57                   	push   %edi
f0122402:	53                   	push   %ebx
f0122403:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0122409:	83 ec 0c             	sub    $0xc,%esp
f012240c:	68 3c b6 13 f0       	push   $0xf013b63c
f0122411:	e8 f8 e8 fd ff       	call   f0100d0e <cprintf>
f0122416:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122419:	83 ec 0c             	sub    $0xc,%esp
f012241c:	68 6c b6 13 f0       	push   $0xf013b66c
f0122421:	e8 e8 e8 fd ff       	call   f0100d0e <cprintf>
f0122426:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122429:	83 ec 0c             	sub    $0xc,%esp
f012242c:	68 3c b6 13 f0       	push   $0xf013b63c
f0122431:	e8 d8 e8 fd ff       	call   f0100d0e <cprintf>
f0122436:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122439:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012243d:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122441:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0122447:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012244d:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122454:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012245b:	e8 51 ab fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122460:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122463:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0122469:	b9 14 00 00 00       	mov    $0x14,%ecx
f012246e:	b8 00 00 00 00       	mov    $0x0,%eax
f0122473:	89 d7                	mov    %edx,%edi
f0122475:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122477:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012247d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122482:	b8 00 00 00 00       	mov    $0x0,%eax
f0122487:	89 d7                	mov    %edx,%edi
f0122489:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012248b:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0122491:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122496:	b8 00 00 00 00       	mov    $0x0,%eax
f012249b:	89 d7                	mov    %edx,%edi
f012249d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012249f:	e8 0d ab fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01224a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224a7:	e8 1c 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01224af:	83 ec 0c             	sub    $0xc,%esp
f01224b2:	68 00 fc 1f 00       	push   $0x1ffc00
f01224b7:	e8 d0 56 fe ff       	call   f0107b8c <kmalloc>
f01224bc:	83 c4 10             	add    $0x10,%esp
f01224bf:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224c5:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01224cb:	89 c1                	mov    %eax,%ecx
f01224cd:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01224d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01224d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01224dc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01224df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01224e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01224e7:	f7 75 c8             	divl   -0x38(%ebp)
f01224ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01224ed:	29 d0                	sub    %edx,%eax
f01224ef:	89 c3                	mov    %eax,%ebx
f01224f1:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01224f8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01224fd:	0f b6 d0             	movzbl %al,%edx
f0122500:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0122503:	01 d0                	add    %edx,%eax
f0122505:	48                   	dec    %eax
f0122506:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0122509:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012250c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122511:	f7 75 c0             	divl   -0x40(%ebp)
f0122514:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122517:	29 d0                	sub    %edx,%eax
f0122519:	01 c3                	add    %eax,%ebx
f012251b:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122522:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122527:	0f b6 c0             	movzbl %al,%eax
f012252a:	c1 e0 04             	shl    $0x4,%eax
f012252d:	89 c2                	mov    %eax,%edx
f012252f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122532:	01 d0                	add    %edx,%eax
f0122534:	48                   	dec    %eax
f0122535:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0122538:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012253b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122540:	f7 75 b8             	divl   -0x48(%ebp)
f0122543:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122546:	29 d0                	sub    %edx,%eax
f0122548:	01 d8                	add    %ebx,%eax
f012254a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012254f:	39 c1                	cmp    %eax,%ecx
f0122551:	74 17                	je     f012256a <test_kfree_bestfirstfit+0x16c>
f0122553:	83 ec 04             	sub    $0x4,%esp
f0122556:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012255b:	68 95 06 00 00       	push   $0x695
f0122560:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122565:	e8 9b dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012256a:	e8 59 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012256f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122572:	74 17                	je     f012258b <test_kfree_bestfirstfit+0x18d>
f0122574:	83 ec 04             	sub    $0x4,%esp
f0122577:	68 14 b7 13 f0       	push   $0xf013b714
f012257c:	68 96 06 00 00       	push   $0x696
f0122581:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122586:	e8 7a dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012258b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012258e:	e8 1e aa fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122593:	29 c3                	sub    %eax,%ebx
f0122595:	89 d8                	mov    %ebx,%eax
f0122597:	3d 00 02 00 00       	cmp    $0x200,%eax
f012259c:	74 17                	je     f01225b5 <test_kfree_bestfirstfit+0x1b7>
f012259e:	83 ec 04             	sub    $0x4,%esp
f01225a1:	68 7c b7 13 f0       	push   $0xf013b77c
f01225a6:	68 97 06 00 00       	push   $0x697
f01225ab:	68 fa b6 13 f0       	push   $0xf013b6fa
f01225b0:	e8 50 dc fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01225b5:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01225bc:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01225bf:	e8 ed a9 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01225c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225c7:	e8 fc 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01225cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01225cf:	83 ec 0c             	sub    $0xc,%esp
f01225d2:	68 00 fc 1f 00       	push   $0x1ffc00
f01225d7:	e8 b0 55 fe ff       	call   f0107b8c <kmalloc>
f01225dc:	83 c4 10             	add    $0x10,%esp
f01225df:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225e5:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01225eb:	89 c1                	mov    %eax,%ecx
f01225ed:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01225f4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01225f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01225fc:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01225ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122602:	ba 00 00 00 00       	mov    $0x0,%edx
f0122607:	f7 75 b0             	divl   -0x50(%ebp)
f012260a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012260d:	29 d0                	sub    %edx,%eax
f012260f:	89 c3                	mov    %eax,%ebx
f0122611:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0122618:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012261d:	0f b6 d0             	movzbl %al,%edx
f0122620:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122623:	01 d0                	add    %edx,%eax
f0122625:	48                   	dec    %eax
f0122626:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122629:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012262c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122631:	f7 75 a8             	divl   -0x58(%ebp)
f0122634:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122637:	29 d0                	sub    %edx,%eax
f0122639:	01 c3                	add    %eax,%ebx
f012263b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122642:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122647:	0f b6 c0             	movzbl %al,%eax
f012264a:	c1 e0 04             	shl    $0x4,%eax
f012264d:	89 c2                	mov    %eax,%edx
f012264f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122652:	01 d0                	add    %edx,%eax
f0122654:	48                   	dec    %eax
f0122655:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122658:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012265b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122660:	f7 75 a0             	divl   -0x60(%ebp)
f0122663:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122666:	29 d0                	sub    %edx,%eax
f0122668:	01 d8                	add    %ebx,%eax
f012266a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012266f:	39 c1                	cmp    %eax,%ecx
f0122671:	74 17                	je     f012268a <test_kfree_bestfirstfit+0x28c>
f0122673:	83 ec 04             	sub    $0x4,%esp
f0122676:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012267b:	68 9e 06 00 00       	push   $0x69e
f0122680:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122685:	e8 7b db fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012268a:	e8 39 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012268f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122692:	74 17                	je     f01226ab <test_kfree_bestfirstfit+0x2ad>
f0122694:	83 ec 04             	sub    $0x4,%esp
f0122697:	68 14 b7 13 f0       	push   $0xf013b714
f012269c:	68 9f 06 00 00       	push   $0x69f
f01226a1:	68 fa b6 13 f0       	push   $0xf013b6fa
f01226a6:	e8 5a db fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226ab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226ae:	e8 fe a8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01226b3:	29 c3                	sub    %eax,%ebx
f01226b5:	89 d8                	mov    %ebx,%eax
f01226b7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01226bc:	74 17                	je     f01226d5 <test_kfree_bestfirstfit+0x2d7>
f01226be:	83 ec 04             	sub    $0x4,%esp
f01226c1:	68 7c b7 13 f0       	push   $0xf013b77c
f01226c6:	68 a0 06 00 00       	push   $0x6a0
f01226cb:	68 fa b6 13 f0       	push   $0xf013b6fa
f01226d0:	e8 30 db fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01226d5:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01226dc:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01226df:	e8 cd a8 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01226e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226e7:	e8 dc 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01226ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01226ef:	83 ec 0c             	sub    $0xc,%esp
f01226f2:	68 00 08 00 00       	push   $0x800
f01226f7:	e8 90 54 fe ff       	call   f0107b8c <kmalloc>
f01226fc:	83 c4 10             	add    $0x10,%esp
f01226ff:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122705:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012270b:	89 c1                	mov    %eax,%ecx
f012270d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122714:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122717:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012271c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012271f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122722:	ba 00 00 00 00       	mov    $0x0,%edx
f0122727:	f7 75 98             	divl   -0x68(%ebp)
f012272a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012272d:	29 d0                	sub    %edx,%eax
f012272f:	89 c3                	mov    %eax,%ebx
f0122731:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122738:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012273d:	0f b6 d0             	movzbl %al,%edx
f0122740:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122743:	01 d0                	add    %edx,%eax
f0122745:	48                   	dec    %eax
f0122746:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122749:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012274c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122751:	f7 75 90             	divl   -0x70(%ebp)
f0122754:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122757:	29 d0                	sub    %edx,%eax
f0122759:	01 c3                	add    %eax,%ebx
f012275b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122762:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122767:	0f b6 c0             	movzbl %al,%eax
f012276a:	c1 e0 04             	shl    $0x4,%eax
f012276d:	89 c2                	mov    %eax,%edx
f012276f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122772:	01 d0                	add    %edx,%eax
f0122774:	48                   	dec    %eax
f0122775:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122778:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012277b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122780:	f7 75 88             	divl   -0x78(%ebp)
f0122783:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122786:	29 d0                	sub    %edx,%eax
f0122788:	01 d8                	add    %ebx,%eax
f012278a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012278f:	39 c1                	cmp    %eax,%ecx
f0122791:	74 17                	je     f01227aa <test_kfree_bestfirstfit+0x3ac>
f0122793:	83 ec 04             	sub    $0x4,%esp
f0122796:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012279b:	68 a7 06 00 00       	push   $0x6a7
f01227a0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01227a5:	e8 5b da fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227aa:	e8 19 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01227af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227b2:	74 17                	je     f01227cb <test_kfree_bestfirstfit+0x3cd>
f01227b4:	83 ec 04             	sub    $0x4,%esp
f01227b7:	68 14 b7 13 f0       	push   $0xf013b714
f01227bc:	68 a8 06 00 00       	push   $0x6a8
f01227c1:	68 fa b6 13 f0       	push   $0xf013b6fa
f01227c6:	e8 3a da fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01227cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01227ce:	e8 de a7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01227d3:	29 c3                	sub    %eax,%ebx
f01227d5:	89 d8                	mov    %ebx,%eax
f01227d7:	83 f8 01             	cmp    $0x1,%eax
f01227da:	74 17                	je     f01227f3 <test_kfree_bestfirstfit+0x3f5>
f01227dc:	83 ec 04             	sub    $0x4,%esp
f01227df:	68 7c b7 13 f0       	push   $0xf013b77c
f01227e4:	68 a9 06 00 00       	push   $0x6a9
f01227e9:	68 fa b6 13 f0       	push   $0xf013b6fa
f01227ee:	e8 12 da fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01227f3:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01227fa:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01227fd:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122803:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122806:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012280d:	eb 0e                	jmp    f012281d <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f012280f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122812:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122815:	01 d0                	add    %edx,%eax
f0122817:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012281a:	ff 45 f4             	incl   -0xc(%ebp)
f012281d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122823:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122826:	7f e7                	jg     f012280f <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122828:	e8 84 a7 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012282d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122830:	e8 93 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122835:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122838:	83 ec 0c             	sub    $0xc,%esp
f012283b:	68 00 08 00 00       	push   $0x800
f0122840:	e8 47 53 fe ff       	call   f0107b8c <kmalloc>
f0122845:	83 c4 10             	add    $0x10,%esp
f0122848:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012284e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122854:	89 c1                	mov    %eax,%ecx
f0122856:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012285d:	10 00 00 
f0122860:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122866:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012286b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122871:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122877:	ba 00 00 00 00       	mov    $0x0,%edx
f012287c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122882:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122888:	29 d0                	sub    %edx,%eax
f012288a:	89 c3                	mov    %eax,%ebx
f012288c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122893:	10 00 00 
f0122896:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012289b:	0f b6 d0             	movzbl %al,%edx
f012289e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01228a4:	01 d0                	add    %edx,%eax
f01228a6:	48                   	dec    %eax
f01228a7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01228ad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01228b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01228b8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01228be:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01228c4:	29 d0                	sub    %edx,%eax
f01228c6:	01 c3                	add    %eax,%ebx
f01228c8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01228cf:	10 00 00 
f01228d2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01228d7:	0f b6 c0             	movzbl %al,%eax
f01228da:	c1 e0 04             	shl    $0x4,%eax
f01228dd:	89 c2                	mov    %eax,%edx
f01228df:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01228e5:	01 d0                	add    %edx,%eax
f01228e7:	48                   	dec    %eax
f01228e8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01228ee:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01228f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01228f9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01228ff:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122905:	29 d0                	sub    %edx,%eax
f0122907:	01 d8                	add    %ebx,%eax
f0122909:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012290e:	39 c1                	cmp    %eax,%ecx
f0122910:	74 17                	je     f0122929 <test_kfree_bestfirstfit+0x52b>
f0122912:	83 ec 04             	sub    $0x4,%esp
f0122915:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012291a:	68 b5 06 00 00       	push   $0x6b5
f012291f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122924:	e8 dc d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122929:	e8 9a 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012292e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122931:	74 17                	je     f012294a <test_kfree_bestfirstfit+0x54c>
f0122933:	83 ec 04             	sub    $0x4,%esp
f0122936:	68 14 b7 13 f0       	push   $0xf013b714
f012293b:	68 b6 06 00 00       	push   $0x6b6
f0122940:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122945:	e8 bb d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012294a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012294d:	e8 5f a6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122952:	29 c3                	sub    %eax,%ebx
f0122954:	89 d8                	mov    %ebx,%eax
f0122956:	83 f8 01             	cmp    $0x1,%eax
f0122959:	74 17                	je     f0122972 <test_kfree_bestfirstfit+0x574>
f012295b:	83 ec 04             	sub    $0x4,%esp
f012295e:	68 7c b7 13 f0       	push   $0xf013b77c
f0122963:	68 b7 06 00 00       	push   $0x6b7
f0122968:	68 fa b6 13 f0       	push   $0xf013b6fa
f012296d:	e8 93 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122972:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122979:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012297c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122982:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122985:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012298c:	eb 0e                	jmp    f012299c <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f012298e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122991:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122994:	01 d0                	add    %edx,%eax
f0122996:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122999:	ff 45 f4             	incl   -0xc(%ebp)
f012299c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01229a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229a5:	7f e7                	jg     f012298e <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01229a7:	e8 05 a6 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01229ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229af:	e8 14 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01229b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01229b7:	83 ec 0c             	sub    $0xc,%esp
f01229ba:	68 00 1c 00 00       	push   $0x1c00
f01229bf:	e8 c8 51 fe ff       	call   f0107b8c <kmalloc>
f01229c4:	83 c4 10             	add    $0x10,%esp
f01229c7:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01229cd:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01229d3:	89 c1                	mov    %eax,%ecx
f01229d5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01229dc:	10 00 00 
f01229df:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01229e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01229ea:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01229f0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01229f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01229fb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122a01:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122a07:	29 d0                	sub    %edx,%eax
f0122a09:	89 c3                	mov    %eax,%ebx
f0122a0b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122a12:	10 00 00 
f0122a15:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122a1a:	0f b6 d0             	movzbl %al,%edx
f0122a1d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122a23:	01 d0                	add    %edx,%eax
f0122a25:	48                   	dec    %eax
f0122a26:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122a2c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122a32:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a37:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122a3d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122a43:	29 d0                	sub    %edx,%eax
f0122a45:	01 c3                	add    %eax,%ebx
f0122a47:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122a4e:	10 00 00 
f0122a51:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122a56:	0f b6 c0             	movzbl %al,%eax
f0122a59:	c1 e0 04             	shl    $0x4,%eax
f0122a5c:	89 c2                	mov    %eax,%edx
f0122a5e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122a64:	01 d0                	add    %edx,%eax
f0122a66:	48                   	dec    %eax
f0122a67:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122a6d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122a73:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a78:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122a7e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122a84:	29 d0                	sub    %edx,%eax
f0122a86:	01 d8                	add    %ebx,%eax
f0122a88:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122a8d:	39 c1                	cmp    %eax,%ecx
f0122a8f:	74 17                	je     f0122aa8 <test_kfree_bestfirstfit+0x6aa>
f0122a91:	83 ec 04             	sub    $0x4,%esp
f0122a94:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0122a99:	68 c3 06 00 00       	push   $0x6c3
f0122a9e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122aa3:	e8 5d d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122aa8:	e8 1b 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122aad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ab0:	74 17                	je     f0122ac9 <test_kfree_bestfirstfit+0x6cb>
f0122ab2:	83 ec 04             	sub    $0x4,%esp
f0122ab5:	68 14 b7 13 f0       	push   $0xf013b714
f0122aba:	68 c4 06 00 00       	push   $0x6c4
f0122abf:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122ac4:	e8 3c d7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ac9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122acc:	e8 e0 a4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122ad1:	29 c3                	sub    %eax,%ebx
f0122ad3:	89 d8                	mov    %ebx,%eax
f0122ad5:	83 f8 02             	cmp    $0x2,%eax
f0122ad8:	74 17                	je     f0122af1 <test_kfree_bestfirstfit+0x6f3>
f0122ada:	83 ec 04             	sub    $0x4,%esp
f0122add:	68 7c b7 13 f0       	push   $0xf013b77c
f0122ae2:	68 c5 06 00 00       	push   $0x6c5
f0122ae7:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122aec:	e8 14 d7 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122af1:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122af8:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122afb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122b01:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122b04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b0b:	eb 0e                	jmp    f0122b1b <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122b0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b10:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b13:	01 d0                	add    %edx,%eax
f0122b15:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122b18:	ff 45 f4             	incl   -0xc(%ebp)
f0122b1b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122b21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b24:	7f e7                	jg     f0122b0d <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b26:	e8 86 a4 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122b2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b2e:	e8 95 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b33:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122b36:	83 ec 0c             	sub    $0xc,%esp
f0122b39:	68 00 fc 2f 00       	push   $0x2ffc00
f0122b3e:	e8 49 50 fe ff       	call   f0107b8c <kmalloc>
f0122b43:	83 c4 10             	add    $0x10,%esp
f0122b46:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b4c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122b52:	89 c1                	mov    %eax,%ecx
f0122b54:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122b5b:	10 00 00 
f0122b5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122b64:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122b69:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122b6f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122b75:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b7a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122b80:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122b86:	29 d0                	sub    %edx,%eax
f0122b88:	89 c3                	mov    %eax,%ebx
f0122b8a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122b91:	10 00 00 
f0122b94:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122b99:	0f b6 d0             	movzbl %al,%edx
f0122b9c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122ba2:	01 d0                	add    %edx,%eax
f0122ba4:	48                   	dec    %eax
f0122ba5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122bab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122bb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bb6:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122bbc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122bc2:	29 d0                	sub    %edx,%eax
f0122bc4:	01 c3                	add    %eax,%ebx
f0122bc6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122bcd:	10 00 00 
f0122bd0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122bd5:	0f b6 c0             	movzbl %al,%eax
f0122bd8:	c1 e0 04             	shl    $0x4,%eax
f0122bdb:	89 c2                	mov    %eax,%edx
f0122bdd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122be3:	01 d0                	add    %edx,%eax
f0122be5:	48                   	dec    %eax
f0122be6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122bec:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122bf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bf7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122bfd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122c03:	29 d0                	sub    %edx,%eax
f0122c05:	01 d8                	add    %ebx,%eax
f0122c07:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122c0c:	39 c1                	cmp    %eax,%ecx
f0122c0e:	74 17                	je     f0122c27 <test_kfree_bestfirstfit+0x829>
f0122c10:	83 ec 04             	sub    $0x4,%esp
f0122c13:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0122c18:	68 d1 06 00 00       	push   $0x6d1
f0122c1d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122c22:	e8 de d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c27:	e8 9c 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122c2c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c2f:	74 17                	je     f0122c48 <test_kfree_bestfirstfit+0x84a>
f0122c31:	83 ec 04             	sub    $0x4,%esp
f0122c34:	68 14 b7 13 f0       	push   $0xf013b714
f0122c39:	68 d2 06 00 00       	push   $0x6d2
f0122c3e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122c43:	e8 bd d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c48:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122c4b:	e8 61 a3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122c50:	29 c3                	sub    %eax,%ebx
f0122c52:	89 d8                	mov    %ebx,%eax
f0122c54:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122c59:	74 17                	je     f0122c72 <test_kfree_bestfirstfit+0x874>
f0122c5b:	83 ec 04             	sub    $0x4,%esp
f0122c5e:	68 7c b7 13 f0       	push   $0xf013b77c
f0122c63:	68 d3 06 00 00       	push   $0x6d3
f0122c68:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122c6d:	e8 93 d5 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122c72:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122c79:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122c7c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122c82:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122c85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122c8c:	eb 0e                	jmp    f0122c9c <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122c8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122c91:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122c94:	01 d0                	add    %edx,%eax
f0122c96:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122c99:	ff 45 f4             	incl   -0xc(%ebp)
f0122c9c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122ca2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ca5:	7f e7                	jg     f0122c8e <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ca7:	e8 05 a3 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122cac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122caf:	e8 14 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122cb4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122cb7:	83 ec 0c             	sub    $0xc,%esp
f0122cba:	68 00 fc 5f 00       	push   $0x5ffc00
f0122cbf:	e8 c8 4e fe ff       	call   f0107b8c <kmalloc>
f0122cc4:	83 c4 10             	add    $0x10,%esp
f0122cc7:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ccd:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122cd3:	89 c1                	mov    %eax,%ecx
f0122cd5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122cdc:	10 00 00 
f0122cdf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122ce5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122cea:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122cf0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122cf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cfb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122d01:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122d07:	29 d0                	sub    %edx,%eax
f0122d09:	89 c3                	mov    %eax,%ebx
f0122d0b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122d12:	10 00 00 
f0122d15:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122d1a:	0f b6 d0             	movzbl %al,%edx
f0122d1d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122d23:	01 d0                	add    %edx,%eax
f0122d25:	48                   	dec    %eax
f0122d26:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122d2c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122d32:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d37:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122d3d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122d43:	29 d0                	sub    %edx,%eax
f0122d45:	01 c3                	add    %eax,%ebx
f0122d47:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122d4e:	10 00 00 
f0122d51:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122d56:	0f b6 c0             	movzbl %al,%eax
f0122d59:	c1 e0 04             	shl    $0x4,%eax
f0122d5c:	89 c2                	mov    %eax,%edx
f0122d5e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122d64:	01 d0                	add    %edx,%eax
f0122d66:	48                   	dec    %eax
f0122d67:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122d6d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122d73:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d78:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122d7e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122d84:	29 d0                	sub    %edx,%eax
f0122d86:	01 d8                	add    %ebx,%eax
f0122d88:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122d8d:	39 c1                	cmp    %eax,%ecx
f0122d8f:	74 17                	je     f0122da8 <test_kfree_bestfirstfit+0x9aa>
f0122d91:	83 ec 04             	sub    $0x4,%esp
f0122d94:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0122d99:	68 df 06 00 00       	push   $0x6df
f0122d9e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122da3:	e8 5d d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122da8:	e8 1b 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122dad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122db0:	74 17                	je     f0122dc9 <test_kfree_bestfirstfit+0x9cb>
f0122db2:	83 ec 04             	sub    $0x4,%esp
f0122db5:	68 14 b7 13 f0       	push   $0xf013b714
f0122dba:	68 e0 06 00 00       	push   $0x6e0
f0122dbf:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122dc4:	e8 3c d4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122dc9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122dcc:	e8 e0 a1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122dd1:	29 c3                	sub    %eax,%ebx
f0122dd3:	89 d8                	mov    %ebx,%eax
f0122dd5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122dda:	74 17                	je     f0122df3 <test_kfree_bestfirstfit+0x9f5>
f0122ddc:	83 ec 04             	sub    $0x4,%esp
f0122ddf:	68 7c b7 13 f0       	push   $0xf013b77c
f0122de4:	68 e1 06 00 00       	push   $0x6e1
f0122de9:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122dee:	e8 12 d4 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122df3:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122dfa:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122dfd:	e8 af a1 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122e02:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e05:	e8 be 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e0a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122e0d:	83 ec 0c             	sub    $0xc,%esp
f0122e10:	68 00 38 00 00       	push   $0x3800
f0122e15:	e8 72 4d fe ff       	call   f0107b8c <kmalloc>
f0122e1a:	83 c4 10             	add    $0x10,%esp
f0122e1d:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e23:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122e29:	89 c1                	mov    %eax,%ecx
f0122e2b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122e32:	10 00 00 
f0122e35:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122e3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e40:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122e46:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e51:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122e57:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122e5d:	29 d0                	sub    %edx,%eax
f0122e5f:	89 c3                	mov    %eax,%ebx
f0122e61:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122e68:	10 00 00 
f0122e6b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122e70:	0f b6 d0             	movzbl %al,%edx
f0122e73:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122e79:	01 d0                	add    %edx,%eax
f0122e7b:	48                   	dec    %eax
f0122e7c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122e82:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122e88:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e8d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122e93:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122e99:	29 d0                	sub    %edx,%eax
f0122e9b:	01 c3                	add    %eax,%ebx
f0122e9d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122ea4:	10 00 00 
f0122ea7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0122eac:	0f b6 c0             	movzbl %al,%eax
f0122eaf:	c1 e0 04             	shl    $0x4,%eax
f0122eb2:	89 c2                	mov    %eax,%edx
f0122eb4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122eba:	01 d0                	add    %edx,%eax
f0122ebc:	48                   	dec    %eax
f0122ebd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122ec3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122ec9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ece:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122ed4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122eda:	29 d0                	sub    %edx,%eax
f0122edc:	01 d8                	add    %ebx,%eax
f0122ede:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122ee3:	39 c1                	cmp    %eax,%ecx
f0122ee5:	74 17                	je     f0122efe <test_kfree_bestfirstfit+0xb00>
f0122ee7:	83 ec 04             	sub    $0x4,%esp
f0122eea:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0122eef:	68 e8 06 00 00       	push   $0x6e8
f0122ef4:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122ef9:	e8 07 d3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122efe:	e8 c5 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f03:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f06:	74 17                	je     f0122f1f <test_kfree_bestfirstfit+0xb21>
f0122f08:	83 ec 04             	sub    $0x4,%esp
f0122f0b:	68 14 b7 13 f0       	push   $0xf013b714
f0122f10:	68 e9 06 00 00       	push   $0x6e9
f0122f15:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122f1a:	e8 e6 d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f1f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122f22:	e8 8a a0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122f27:	29 c3                	sub    %eax,%ebx
f0122f29:	89 d8                	mov    %ebx,%eax
f0122f2b:	83 f8 04             	cmp    $0x4,%eax
f0122f2e:	74 17                	je     f0122f47 <test_kfree_bestfirstfit+0xb49>
f0122f30:	83 ec 04             	sub    $0x4,%esp
f0122f33:	68 7c b7 13 f0       	push   $0xf013b77c
f0122f38:	68 ea 06 00 00       	push   $0x6ea
f0122f3d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122f42:	e8 be d2 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122f47:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122f4e:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122f51:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122f57:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122f5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122f61:	eb 0e                	jmp    f0122f71 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122f63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122f66:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122f69:	01 d0                	add    %edx,%eax
f0122f6b:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122f6e:	ff 45 f4             	incl   -0xc(%ebp)
f0122f71:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122f77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122f7a:	7f e7                	jg     f0122f63 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122f7c:	e8 30 a0 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122f81:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122f87:	e8 3c 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122f8c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122f92:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122f98:	83 ec 0c             	sub    $0xc,%esp
f0122f9b:	50                   	push   %eax
f0122f9c:	e8 b6 4c fe ff       	call   f0107c57 <kfree>
f0122fa1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fa4:	e8 1f 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122fa9:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122faf:	74 17                	je     f0122fc8 <test_kfree_bestfirstfit+0xbca>
f0122fb1:	83 ec 04             	sub    $0x4,%esp
f0122fb4:	68 14 b7 13 f0       	push   $0xf013b714
f0122fb9:	68 f9 06 00 00       	push   $0x6f9
f0122fbe:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122fc3:	e8 3d d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122fc8:	e8 e4 9f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122fcd:	89 c2                	mov    %eax,%edx
f0122fcf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122fd5:	29 c2                	sub    %eax,%edx
f0122fd7:	89 d0                	mov    %edx,%eax
f0122fd9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122fde:	74 17                	je     f0122ff7 <test_kfree_bestfirstfit+0xbf9>
f0122fe0:	83 ec 04             	sub    $0x4,%esp
f0122fe3:	68 84 be 13 f0       	push   $0xf013be84
f0122fe8:	68 fa 06 00 00       	push   $0x6fa
f0122fed:	68 fa b6 13 f0       	push   $0xf013b6fa
f0122ff2:	e8 0e d2 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ff7:	e8 b5 9f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0122ffc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123002:	e8 c1 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123007:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f012300d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123013:	83 ec 0c             	sub    $0xc,%esp
f0123016:	50                   	push   %eax
f0123017:	e8 3b 4c fe ff       	call   f0107c57 <kfree>
f012301c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012301f:	e8 a4 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123024:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012302a:	74 17                	je     f0123043 <test_kfree_bestfirstfit+0xc45>
f012302c:	83 ec 04             	sub    $0x4,%esp
f012302f:	68 14 b7 13 f0       	push   $0xf013b714
f0123034:	68 00 07 00 00       	push   $0x700
f0123039:	68 fa b6 13 f0       	push   $0xf013b6fa
f012303e:	e8 c2 d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123043:	e8 69 9f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123048:	89 c2                	mov    %eax,%edx
f012304a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123050:	29 c2                	sub    %eax,%edx
f0123052:	89 d0                	mov    %edx,%eax
f0123054:	83 f8 01             	cmp    $0x1,%eax
f0123057:	74 17                	je     f0123070 <test_kfree_bestfirstfit+0xc72>
f0123059:	83 ec 04             	sub    $0x4,%esp
f012305c:	68 84 be 13 f0       	push   $0xf013be84
f0123061:	68 01 07 00 00       	push   $0x701
f0123066:	68 fa b6 13 f0       	push   $0xf013b6fa
f012306b:	e8 95 d1 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123070:	e8 3c 9f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123075:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012307b:	e8 48 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123080:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0123086:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012308c:	83 ec 0c             	sub    $0xc,%esp
f012308f:	50                   	push   %eax
f0123090:	e8 c2 4b fe ff       	call   f0107c57 <kfree>
f0123095:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123098:	e8 2b 0d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012309d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01230a3:	74 17                	je     f01230bc <test_kfree_bestfirstfit+0xcbe>
f01230a5:	83 ec 04             	sub    $0x4,%esp
f01230a8:	68 14 b7 13 f0       	push   $0xf013b714
f01230ad:	68 07 07 00 00       	push   $0x707
f01230b2:	68 fa b6 13 f0       	push   $0xf013b6fa
f01230b7:	e8 49 d1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01230bc:	e8 f0 9e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01230c1:	89 c2                	mov    %eax,%edx
f01230c3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01230c9:	29 c2                	sub    %eax,%edx
f01230cb:	89 d0                	mov    %edx,%eax
f01230cd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01230d2:	74 17                	je     f01230eb <test_kfree_bestfirstfit+0xced>
f01230d4:	83 ec 04             	sub    $0x4,%esp
f01230d7:	68 84 be 13 f0       	push   $0xf013be84
f01230dc:	68 08 07 00 00       	push   $0x708
f01230e1:	68 fa b6 13 f0       	push   $0xf013b6fa
f01230e6:	e8 1a d1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01230eb:	e8 c1 9e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01230f0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230f6:	e8 cd 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01230fb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0123101:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0123107:	83 ec 0c             	sub    $0xc,%esp
f012310a:	50                   	push   %eax
f012310b:	e8 47 4b fe ff       	call   f0107c57 <kfree>
f0123110:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123113:	e8 b0 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123118:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012311e:	74 17                	je     f0123137 <test_kfree_bestfirstfit+0xd39>
f0123120:	83 ec 04             	sub    $0x4,%esp
f0123123:	68 14 b7 13 f0       	push   $0xf013b714
f0123128:	68 0e 07 00 00       	push   $0x70e
f012312d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123132:	e8 ce d0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123137:	e8 75 9e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012313c:	89 c2                	mov    %eax,%edx
f012313e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123144:	29 c2                	sub    %eax,%edx
f0123146:	89 d0                	mov    %edx,%eax
f0123148:	3d 00 06 00 00       	cmp    $0x600,%eax
f012314d:	74 17                	je     f0123166 <test_kfree_bestfirstfit+0xd68>
f012314f:	83 ec 04             	sub    $0x4,%esp
f0123152:	68 84 be 13 f0       	push   $0xf013be84
f0123157:	68 0f 07 00 00       	push   $0x70f
f012315c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123161:	e8 9f d0 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0123166:	83 ec 0c             	sub    $0xc,%esp
f0123169:	68 bc be 13 f0       	push   $0xf013bebc
f012316e:	e8 9b db fd ff       	call   f0100d0e <cprintf>
f0123173:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0123176:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012317c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012317f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123186:	eb 1e                	jmp    f01231a6 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0123188:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012318e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123191:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123194:	01 c8                	add    %ecx,%eax
f0123196:	8a 00                	mov    (%eax),%al
f0123198:	0f be c0             	movsbl %al,%eax
f012319b:	01 d0                	add    %edx,%eax
f012319d:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01231a3:	ff 45 f4             	incl   -0xc(%ebp)
f01231a6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01231ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01231af:	7f d7                	jg     f0123188 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01231b1:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01231b7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01231bd:	89 c1                	mov    %eax,%ecx
f01231bf:	01 c9                	add    %ecx,%ecx
f01231c1:	01 c8                	add    %ecx,%eax
f01231c3:	39 c2                	cmp    %eax,%edx
f01231c5:	74 17                	je     f01231de <test_kfree_bestfirstfit+0xde0>
f01231c7:	83 ec 04             	sub    $0x4,%esp
f01231ca:	68 e0 be 13 f0       	push   $0xf013bee0
f01231cf:	68 1c 07 00 00       	push   $0x71c
f01231d4:	68 fa b6 13 f0       	push   $0xf013b6fa
f01231d9:	e8 27 d0 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01231de:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01231e4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01231e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01231ee:	eb 1e                	jmp    f012320e <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01231f0:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01231f6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01231f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01231fc:	01 c8                	add    %ecx,%eax
f01231fe:	8a 00                	mov    (%eax),%al
f0123200:	0f be c0             	movsbl %al,%eax
f0123203:	01 d0                	add    %edx,%eax
f0123205:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012320b:	ff 45 f4             	incl   -0xc(%ebp)
f012320e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0123214:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123217:	7f d7                	jg     f01231f0 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0123219:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012321f:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0123225:	c1 e2 02             	shl    $0x2,%edx
f0123228:	39 d0                	cmp    %edx,%eax
f012322a:	74 17                	je     f0123243 <test_kfree_bestfirstfit+0xe45>
f012322c:	83 ec 04             	sub    $0x4,%esp
f012322f:	68 e0 be 13 f0       	push   $0xf013bee0
f0123234:	68 24 07 00 00       	push   $0x724
f0123239:	68 fa b6 13 f0       	push   $0xf013b6fa
f012323e:	e8 c2 cf fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0123243:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123249:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012324c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123253:	eb 1e                	jmp    f0123273 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0123255:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012325b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012325e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123261:	01 c8                	add    %ecx,%eax
f0123263:	8a 00                	mov    (%eax),%al
f0123265:	0f be c0             	movsbl %al,%eax
f0123268:	01 d0                	add    %edx,%eax
f012326a:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0123270:	ff 45 f4             	incl   -0xc(%ebp)
f0123273:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123279:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012327c:	7f d7                	jg     f0123255 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012327e:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0123284:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012328a:	89 d0                	mov    %edx,%eax
f012328c:	c1 e0 02             	shl    $0x2,%eax
f012328f:	01 d0                	add    %edx,%eax
f0123291:	39 c1                	cmp    %eax,%ecx
f0123293:	74 17                	je     f01232ac <test_kfree_bestfirstfit+0xeae>
f0123295:	83 ec 04             	sub    $0x4,%esp
f0123298:	68 e0 be 13 f0       	push   $0xf013bee0
f012329d:	68 2c 07 00 00       	push   $0x72c
f01232a2:	68 fa b6 13 f0       	push   $0xf013b6fa
f01232a7:	e8 59 cf fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01232ac:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01232b2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01232b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01232bc:	eb 1e                	jmp    f01232dc <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f01232be:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01232c4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01232c7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01232ca:	01 c8                	add    %ecx,%eax
f01232cc:	8a 00                	mov    (%eax),%al
f01232ce:	0f be c0             	movsbl %al,%eax
f01232d1:	01 d0                	add    %edx,%eax
f01232d3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01232d9:	ff 45 f4             	incl   -0xc(%ebp)
f01232dc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01232e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01232e5:	7f d7                	jg     f01232be <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01232e7:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01232ed:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01232f3:	89 d0                	mov    %edx,%eax
f01232f5:	01 c0                	add    %eax,%eax
f01232f7:	01 d0                	add    %edx,%eax
f01232f9:	01 c0                	add    %eax,%eax
f01232fb:	01 d0                	add    %edx,%eax
f01232fd:	39 c1                	cmp    %eax,%ecx
f01232ff:	74 17                	je     f0123318 <test_kfree_bestfirstfit+0xf1a>
f0123301:	83 ec 04             	sub    $0x4,%esp
f0123304:	68 e0 be 13 f0       	push   $0xf013bee0
f0123309:	68 34 07 00 00       	push   $0x734
f012330e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123313:	e8 ed ce fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0123318:	83 ec 0c             	sub    $0xc,%esp
f012331b:	68 13 bf 13 f0       	push   $0xf013bf13
f0123320:	e8 e9 d9 fd ff       	call   f0100d0e <cprintf>
f0123325:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123328:	e8 84 9c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012332d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123330:	e8 93 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123335:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0123338:	83 ec 0c             	sub    $0xc,%esp
f012333b:	68 00 00 30 00       	push   $0x300000
f0123340:	e8 47 48 fe ff       	call   f0107b8c <kmalloc>
f0123345:	83 c4 10             	add    $0x10,%esp
f0123348:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012334e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123354:	89 c1                	mov    %eax,%ecx
f0123356:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012335d:	10 00 00 
f0123360:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123366:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012336b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0123371:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123377:	ba 00 00 00 00       	mov    $0x0,%edx
f012337c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0123382:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123388:	29 d0                	sub    %edx,%eax
f012338a:	89 c3                	mov    %eax,%ebx
f012338c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0123393:	10 00 00 
f0123396:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012339b:	0f b6 d0             	movzbl %al,%edx
f012339e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01233a4:	01 d0                	add    %edx,%eax
f01233a6:	48                   	dec    %eax
f01233a7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01233ad:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01233b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01233b8:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01233be:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01233c4:	29 d0                	sub    %edx,%eax
f01233c6:	01 c3                	add    %eax,%ebx
f01233c8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01233cf:	10 00 00 
f01233d2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01233d7:	0f b6 c0             	movzbl %al,%eax
f01233da:	c1 e0 04             	shl    $0x4,%eax
f01233dd:	89 c2                	mov    %eax,%edx
f01233df:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01233e5:	01 d0                	add    %edx,%eax
f01233e7:	48                   	dec    %eax
f01233e8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01233ee:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01233f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01233f9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01233ff:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123405:	29 d0                	sub    %edx,%eax
f0123407:	01 d8                	add    %ebx,%eax
f0123409:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012340e:	39 c1                	cmp    %eax,%ecx
f0123410:	74 17                	je     f0123429 <test_kfree_bestfirstfit+0x102b>
f0123412:	83 ec 04             	sub    $0x4,%esp
f0123415:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012341a:	68 3f 07 00 00       	push   $0x73f
f012341f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123424:	e8 dc cd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123429:	e8 9a 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012342e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123431:	74 17                	je     f012344a <test_kfree_bestfirstfit+0x104c>
f0123433:	83 ec 04             	sub    $0x4,%esp
f0123436:	68 14 b7 13 f0       	push   $0xf013b714
f012343b:	68 40 07 00 00       	push   $0x740
f0123440:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123445:	e8 bb cd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012344a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012344d:	e8 5f 9b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123452:	29 c3                	sub    %eax,%ebx
f0123454:	89 d8                	mov    %ebx,%eax
f0123456:	3d 00 03 00 00       	cmp    $0x300,%eax
f012345b:	74 17                	je     f0123474 <test_kfree_bestfirstfit+0x1076>
f012345d:	83 ec 04             	sub    $0x4,%esp
f0123460:	68 7c b7 13 f0       	push   $0xf013b77c
f0123465:	68 41 07 00 00       	push   $0x741
f012346a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012346f:	e8 91 cd fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0123474:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f012347b:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f012347e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123484:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0123487:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012348e:	eb 0e                	jmp    f012349e <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0123490:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123493:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123496:	01 d0                	add    %edx,%eax
f0123498:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012349b:	ff 45 f4             	incl   -0xc(%ebp)
f012349e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01234a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01234a7:	7f e7                	jg     f0123490 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01234a9:	e8 03 9b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01234ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234b1:	e8 12 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01234b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01234b9:	83 ec 0c             	sub    $0xc,%esp
f01234bc:	68 00 08 00 00       	push   $0x800
f01234c1:	e8 c6 46 fe ff       	call   f0107b8c <kmalloc>
f01234c6:	83 c4 10             	add    $0x10,%esp
f01234c9:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01234cf:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01234d5:	89 c1                	mov    %eax,%ecx
f01234d7:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01234de:	10 00 00 
f01234e1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01234e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01234ec:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01234f2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01234f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01234fd:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0123503:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123509:	29 d0                	sub    %edx,%eax
f012350b:	89 c3                	mov    %eax,%ebx
f012350d:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0123514:	10 00 00 
f0123517:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012351c:	0f b6 d0             	movzbl %al,%edx
f012351f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123525:	01 d0                	add    %edx,%eax
f0123527:	48                   	dec    %eax
f0123528:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012352e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123534:	ba 00 00 00 00       	mov    $0x0,%edx
f0123539:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012353f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123545:	29 d0                	sub    %edx,%eax
f0123547:	01 c3                	add    %eax,%ebx
f0123549:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123550:	10 00 00 
f0123553:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0123558:	0f b6 c0             	movzbl %al,%eax
f012355b:	c1 e0 04             	shl    $0x4,%eax
f012355e:	89 c2                	mov    %eax,%edx
f0123560:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123566:	01 d0                	add    %edx,%eax
f0123568:	48                   	dec    %eax
f0123569:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012356f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123575:	ba 00 00 00 00       	mov    $0x0,%edx
f012357a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123580:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123586:	29 d0                	sub    %edx,%eax
f0123588:	01 d8                	add    %ebx,%eax
f012358a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012358f:	39 c1                	cmp    %eax,%ecx
f0123591:	74 17                	je     f01235aa <test_kfree_bestfirstfit+0x11ac>
f0123593:	83 ec 04             	sub    $0x4,%esp
f0123596:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012359b:	68 4d 07 00 00       	push   $0x74d
f01235a0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01235a5:	e8 5b cc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235aa:	e8 19 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01235af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01235b2:	74 17                	je     f01235cb <test_kfree_bestfirstfit+0x11cd>
f01235b4:	83 ec 04             	sub    $0x4,%esp
f01235b7:	68 14 b7 13 f0       	push   $0xf013b714
f01235bc:	68 4e 07 00 00       	push   $0x74e
f01235c1:	68 fa b6 13 f0       	push   $0xf013b6fa
f01235c6:	e8 3a cc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01235cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01235ce:	e8 de 99 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01235d3:	29 c3                	sub    %eax,%ebx
f01235d5:	89 d8                	mov    %ebx,%eax
f01235d7:	83 f8 01             	cmp    $0x1,%eax
f01235da:	74 17                	je     f01235f3 <test_kfree_bestfirstfit+0x11f5>
f01235dc:	83 ec 04             	sub    $0x4,%esp
f01235df:	68 7c b7 13 f0       	push   $0xf013b77c
f01235e4:	68 4f 07 00 00       	push   $0x74f
f01235e9:	68 fa b6 13 f0       	push   $0xf013b6fa
f01235ee:	e8 12 cc fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01235f3:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01235fa:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01235fd:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123603:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0123606:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012360d:	eb 0e                	jmp    f012361d <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f012360f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123612:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123615:	01 d0                	add    %edx,%eax
f0123617:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012361a:	ff 45 f4             	incl   -0xc(%ebp)
f012361d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123623:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123626:	7f e7                	jg     f012360f <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123628:	e8 84 99 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012362d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123630:	e8 93 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123635:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0123638:	83 ec 0c             	sub    $0xc,%esp
f012363b:	68 00 00 10 00       	push   $0x100000
f0123640:	e8 47 45 fe ff       	call   f0107b8c <kmalloc>
f0123645:	83 c4 10             	add    $0x10,%esp
f0123648:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012364e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123654:	89 c1                	mov    %eax,%ecx
f0123656:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012365d:	10 00 00 
f0123660:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123666:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012366b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123671:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123677:	ba 00 00 00 00       	mov    $0x0,%edx
f012367c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123682:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123688:	29 d0                	sub    %edx,%eax
f012368a:	89 c3                	mov    %eax,%ebx
f012368c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123693:	10 00 00 
f0123696:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012369b:	0f b6 d0             	movzbl %al,%edx
f012369e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01236a4:	01 d0                	add    %edx,%eax
f01236a6:	48                   	dec    %eax
f01236a7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01236ad:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01236b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01236b8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01236be:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01236c4:	29 d0                	sub    %edx,%eax
f01236c6:	01 c3                	add    %eax,%ebx
f01236c8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01236cf:	10 00 00 
f01236d2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01236d7:	0f b6 c0             	movzbl %al,%eax
f01236da:	c1 e0 04             	shl    $0x4,%eax
f01236dd:	89 c2                	mov    %eax,%edx
f01236df:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01236e5:	01 d0                	add    %edx,%eax
f01236e7:	48                   	dec    %eax
f01236e8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01236ee:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01236f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01236f9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01236ff:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123705:	29 d0                	sub    %edx,%eax
f0123707:	01 d8                	add    %ebx,%eax
f0123709:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012370e:	39 c1                	cmp    %eax,%ecx
f0123710:	74 17                	je     f0123729 <test_kfree_bestfirstfit+0x132b>
f0123712:	83 ec 04             	sub    $0x4,%esp
f0123715:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012371a:	68 5b 07 00 00       	push   $0x75b
f012371f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123724:	e8 dc ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123729:	e8 9a 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012372e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123731:	74 17                	je     f012374a <test_kfree_bestfirstfit+0x134c>
f0123733:	83 ec 04             	sub    $0x4,%esp
f0123736:	68 14 b7 13 f0       	push   $0xf013b714
f012373b:	68 5c 07 00 00       	push   $0x75c
f0123740:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123745:	e8 bb ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012374a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012374d:	e8 5f 98 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123752:	29 c3                	sub    %eax,%ebx
f0123754:	89 d8                	mov    %ebx,%eax
f0123756:	3d 00 01 00 00       	cmp    $0x100,%eax
f012375b:	74 17                	je     f0123774 <test_kfree_bestfirstfit+0x1376>
f012375d:	83 ec 04             	sub    $0x4,%esp
f0123760:	68 7c b7 13 f0       	push   $0xf013b77c
f0123765:	68 5d 07 00 00       	push   $0x75d
f012376a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012376f:	e8 91 ca fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123774:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f012377b:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012377e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123784:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123787:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012378e:	eb 0e                	jmp    f012379e <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123793:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123796:	01 d0                	add    %edx,%eax
f0123798:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012379b:	ff 45 f4             	incl   -0xc(%ebp)
f012379e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01237a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01237a7:	7f e7                	jg     f0123790 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f01237a9:	83 ec 0c             	sub    $0xc,%esp
f01237ac:	68 1a bf 13 f0       	push   $0xf013bf1a
f01237b1:	e8 58 d5 fd ff       	call   f0100d0e <cprintf>
f01237b6:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01237b9:	e8 f3 97 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01237be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237c1:	e8 02 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01237c9:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01237cf:	83 ec 0c             	sub    $0xc,%esp
f01237d2:	50                   	push   %eax
f01237d3:	e8 7f 44 fe ff       	call   f0107c57 <kfree>
f01237d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237db:	e8 e8 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237e3:	74 17                	je     f01237fc <test_kfree_bestfirstfit+0x13fe>
f01237e5:	83 ec 04             	sub    $0x4,%esp
f01237e8:	68 14 b7 13 f0       	push   $0xf013b714
f01237ed:	68 6d 07 00 00       	push   $0x76d
f01237f2:	68 fa b6 13 f0       	push   $0xf013b6fa
f01237f7:	e8 09 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01237fc:	e8 b0 97 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123801:	89 c2                	mov    %eax,%edx
f0123803:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123806:	29 c2                	sub    %eax,%edx
f0123808:	89 d0                	mov    %edx,%eax
f012380a:	83 f8 02             	cmp    $0x2,%eax
f012380d:	74 17                	je     f0123826 <test_kfree_bestfirstfit+0x1428>
f012380f:	83 ec 04             	sub    $0x4,%esp
f0123812:	68 84 be 13 f0       	push   $0xf013be84
f0123817:	68 6e 07 00 00       	push   $0x76e
f012381c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123821:	e8 df c9 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123826:	e8 86 97 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012382b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012382e:	e8 95 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123833:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123836:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012383c:	83 ec 0c             	sub    $0xc,%esp
f012383f:	50                   	push   %eax
f0123840:	e8 12 44 fe ff       	call   f0107c57 <kfree>
f0123845:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123848:	e8 7b 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012384d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123850:	74 17                	je     f0123869 <test_kfree_bestfirstfit+0x146b>
f0123852:	83 ec 04             	sub    $0x4,%esp
f0123855:	68 14 b7 13 f0       	push   $0xf013b714
f012385a:	68 74 07 00 00       	push   $0x774
f012385f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123864:	e8 9c c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123869:	e8 43 97 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012386e:	89 c2                	mov    %eax,%edx
f0123870:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123873:	29 c2                	sub    %eax,%edx
f0123875:	89 d0                	mov    %edx,%eax
f0123877:	3d 00 03 00 00       	cmp    $0x300,%eax
f012387c:	74 17                	je     f0123895 <test_kfree_bestfirstfit+0x1497>
f012387e:	83 ec 04             	sub    $0x4,%esp
f0123881:	68 84 be 13 f0       	push   $0xf013be84
f0123886:	68 75 07 00 00       	push   $0x775
f012388b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123890:	e8 70 c9 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123895:	e8 17 97 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012389a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012389d:	e8 26 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01238a5:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01238ab:	83 ec 0c             	sub    $0xc,%esp
f01238ae:	50                   	push   %eax
f01238af:	e8 a3 43 fe ff       	call   f0107c57 <kfree>
f01238b4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238b7:	e8 0c 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01238bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01238bf:	74 17                	je     f01238d8 <test_kfree_bestfirstfit+0x14da>
f01238c1:	83 ec 04             	sub    $0x4,%esp
f01238c4:	68 14 b7 13 f0       	push   $0xf013b714
f01238c9:	68 7b 07 00 00       	push   $0x77b
f01238ce:	68 fa b6 13 f0       	push   $0xf013b6fa
f01238d3:	e8 2d c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01238d8:	e8 d4 96 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01238dd:	89 c2                	mov    %eax,%edx
f01238df:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01238e2:	29 c2                	sub    %eax,%edx
f01238e4:	89 d0                	mov    %edx,%eax
f01238e6:	83 f8 01             	cmp    $0x1,%eax
f01238e9:	74 17                	je     f0123902 <test_kfree_bestfirstfit+0x1504>
f01238eb:	83 ec 04             	sub    $0x4,%esp
f01238ee:	68 84 be 13 f0       	push   $0xf013be84
f01238f3:	68 7c 07 00 00       	push   $0x77c
f01238f8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01238fd:	e8 03 c9 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123902:	e8 aa 96 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123907:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012390a:	e8 b9 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012390f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123912:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123918:	83 ec 0c             	sub    $0xc,%esp
f012391b:	50                   	push   %eax
f012391c:	e8 36 43 fe ff       	call   f0107c57 <kfree>
f0123921:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123924:	e8 9f 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123929:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012392c:	74 17                	je     f0123945 <test_kfree_bestfirstfit+0x1547>
f012392e:	83 ec 04             	sub    $0x4,%esp
f0123931:	68 14 b7 13 f0       	push   $0xf013b714
f0123936:	68 82 07 00 00       	push   $0x782
f012393b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123940:	e8 c0 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123945:	e8 67 96 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012394a:	89 c2                	mov    %eax,%edx
f012394c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012394f:	29 c2                	sub    %eax,%edx
f0123951:	89 d0                	mov    %edx,%eax
f0123953:	83 f8 04             	cmp    $0x4,%eax
f0123956:	74 17                	je     f012396f <test_kfree_bestfirstfit+0x1571>
f0123958:	83 ec 04             	sub    $0x4,%esp
f012395b:	68 84 be 13 f0       	push   $0xf013be84
f0123960:	68 83 07 00 00       	push   $0x783
f0123965:	68 fa b6 13 f0       	push   $0xf013b6fa
f012396a:	e8 96 c8 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012396f:	e8 3d 96 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123974:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123977:	e8 4c 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012397c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012397f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123985:	83 ec 0c             	sub    $0xc,%esp
f0123988:	50                   	push   %eax
f0123989:	e8 c9 42 fe ff       	call   f0107c57 <kfree>
f012398e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123991:	e8 32 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123996:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123999:	74 17                	je     f01239b2 <test_kfree_bestfirstfit+0x15b4>
f012399b:	83 ec 04             	sub    $0x4,%esp
f012399e:	68 14 b7 13 f0       	push   $0xf013b714
f01239a3:	68 89 07 00 00       	push   $0x789
f01239a8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01239ad:	e8 53 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01239b2:	e8 fa 95 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01239b7:	89 c2                	mov    %eax,%edx
f01239b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01239bc:	29 c2                	sub    %eax,%edx
f01239be:	89 d0                	mov    %edx,%eax
f01239c0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01239c5:	74 17                	je     f01239de <test_kfree_bestfirstfit+0x15e0>
f01239c7:	83 ec 04             	sub    $0x4,%esp
f01239ca:	68 84 be 13 f0       	push   $0xf013be84
f01239cf:	68 8a 07 00 00       	push   $0x78a
f01239d4:	68 fa b6 13 f0       	push   $0xf013b6fa
f01239d9:	e8 27 c8 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01239de:	e8 ce 95 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01239e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239e6:	e8 dd 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01239eb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01239ee:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01239f4:	83 ec 0c             	sub    $0xc,%esp
f01239f7:	50                   	push   %eax
f01239f8:	e8 5a 42 fe ff       	call   f0107c57 <kfree>
f01239fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a00:	e8 c3 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a08:	74 17                	je     f0123a21 <test_kfree_bestfirstfit+0x1623>
f0123a0a:	83 ec 04             	sub    $0x4,%esp
f0123a0d:	68 14 b7 13 f0       	push   $0xf013b714
f0123a12:	68 90 07 00 00       	push   $0x790
f0123a17:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123a1c:	e8 e4 c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123a21:	e8 8b 95 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123a26:	89 c2                	mov    %eax,%edx
f0123a28:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123a2b:	29 c2                	sub    %eax,%edx
f0123a2d:	89 d0                	mov    %edx,%eax
f0123a2f:	83 f8 01             	cmp    $0x1,%eax
f0123a32:	74 17                	je     f0123a4b <test_kfree_bestfirstfit+0x164d>
f0123a34:	83 ec 04             	sub    $0x4,%esp
f0123a37:	68 84 be 13 f0       	push   $0xf013be84
f0123a3c:	68 91 07 00 00       	push   $0x791
f0123a41:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123a46:	e8 ba c7 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a4b:	e8 61 95 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123a50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a53:	e8 70 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a58:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123a5b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123a61:	83 ec 0c             	sub    $0xc,%esp
f0123a64:	50                   	push   %eax
f0123a65:	e8 ed 41 fe ff       	call   f0107c57 <kfree>
f0123a6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a6d:	e8 56 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a75:	74 17                	je     f0123a8e <test_kfree_bestfirstfit+0x1690>
f0123a77:	83 ec 04             	sub    $0x4,%esp
f0123a7a:	68 14 b7 13 f0       	push   $0xf013b714
f0123a7f:	68 97 07 00 00       	push   $0x797
f0123a84:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123a89:	e8 77 c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123a8e:	e8 1e 95 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123a93:	89 c2                	mov    %eax,%edx
f0123a95:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123a98:	29 c2                	sub    %eax,%edx
f0123a9a:	89 d0                	mov    %edx,%eax
f0123a9c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123aa1:	74 17                	je     f0123aba <test_kfree_bestfirstfit+0x16bc>
f0123aa3:	83 ec 04             	sub    $0x4,%esp
f0123aa6:	68 84 be 13 f0       	push   $0xf013be84
f0123aab:	68 98 07 00 00       	push   $0x798
f0123ab0:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123ab5:	e8 4b c7 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123aba:	e8 f2 94 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123abf:	89 c2                	mov    %eax,%edx
f0123ac1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123ac4:	39 c2                	cmp    %eax,%edx
f0123ac6:	74 17                	je     f0123adf <test_kfree_bestfirstfit+0x16e1>
f0123ac8:	83 ec 04             	sub    $0x4,%esp
f0123acb:	68 24 bf 13 f0       	push   $0xf013bf24
f0123ad0:	68 9a 07 00 00       	push   $0x79a
f0123ad5:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123ada:	e8 26 c7 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123adf:	83 ec 0c             	sub    $0xc,%esp
f0123ae2:	68 58 bf 13 f0       	push   $0xf013bf58
f0123ae7:	e8 22 d2 fd ff       	call   f0100d0e <cprintf>
f0123aec:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123aef:	83 ec 0c             	sub    $0xc,%esp
f0123af2:	6a 03                	push   $0x3
f0123af4:	e8 58 99 fe ff       	call   f010d451 <sys_bypassPageFault>
f0123af9:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123afc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123b03:	e9 82 00 00 00       	jmp    f0123b8a <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123b0b:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123b12:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123b15:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123b18:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123b1b:	e8 1f 99 fe ff       	call   f010d43f <sys_rcr2>
f0123b20:	89 c2                	mov    %eax,%edx
f0123b22:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123b25:	39 c2                	cmp    %eax,%edx
f0123b27:	74 17                	je     f0123b40 <test_kfree_bestfirstfit+0x1742>
f0123b29:	83 ec 04             	sub    $0x4,%esp
f0123b2c:	68 60 bf 13 f0       	push   $0xf013bf60
f0123b31:	68 a9 07 00 00       	push   $0x7a9
f0123b36:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123b3b:	e8 c5 c6 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123b43:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123b4a:	89 c2                	mov    %eax,%edx
f0123b4c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123b4f:	01 d0                	add    %edx,%eax
f0123b51:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123b54:	e8 e6 98 fe ff       	call   f010d43f <sys_rcr2>
f0123b59:	89 c2                	mov    %eax,%edx
f0123b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123b5e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123b65:	89 c1                	mov    %eax,%ecx
f0123b67:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123b6a:	01 c8                	add    %ecx,%eax
f0123b6c:	39 c2                	cmp    %eax,%edx
f0123b6e:	74 17                	je     f0123b87 <test_kfree_bestfirstfit+0x1789>
f0123b70:	83 ec 04             	sub    $0x4,%esp
f0123b73:	68 60 bf 13 f0       	push   $0xf013bf60
f0123b78:	68 ab 07 00 00       	push   $0x7ab
f0123b7d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123b82:	e8 7e c6 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123b87:	ff 45 f4             	incl   -0xc(%ebp)
f0123b8a:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123b8e:	0f 8e 74 ff ff ff    	jle    f0123b08 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123b94:	83 ec 0c             	sub    $0xc,%esp
f0123b97:	6a 00                	push   $0x0
f0123b99:	e8 b3 98 fe ff       	call   f010d451 <sys_bypassPageFault>
f0123b9e:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123ba1:	83 ec 0c             	sub    $0xc,%esp
f0123ba4:	68 a5 bf 13 f0       	push   $0xf013bfa5
f0123ba9:	e8 60 d1 fd ff       	call   f0100d0e <cprintf>
f0123bae:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123bb1:	e8 fb 93 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123bb6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123bb9:	e8 0a 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bbe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123bc1:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123bc7:	83 ec 0c             	sub    $0xc,%esp
f0123bca:	50                   	push   %eax
f0123bcb:	e8 87 40 fe ff       	call   f0107c57 <kfree>
f0123bd0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bd3:	e8 f0 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123bd8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123bdb:	74 17                	je     f0123bf4 <test_kfree_bestfirstfit+0x17f6>
f0123bdd:	83 ec 04             	sub    $0x4,%esp
f0123be0:	68 14 b7 13 f0       	push   $0xf013b714
f0123be5:	68 b9 07 00 00       	push   $0x7b9
f0123bea:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123bef:	e8 11 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123bf4:	e8 b8 93 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123bf9:	89 c2                	mov    %eax,%edx
f0123bfb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bfe:	39 c2                	cmp    %eax,%edx
f0123c00:	74 17                	je     f0123c19 <test_kfree_bestfirstfit+0x181b>
f0123c02:	83 ec 04             	sub    $0x4,%esp
f0123c05:	68 ac bf 13 f0       	push   $0xf013bfac
f0123c0a:	68 ba 07 00 00       	push   $0x7ba
f0123c0f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123c14:	e8 ec c5 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c19:	e8 93 93 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123c1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c21:	e8 a2 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c26:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123c29:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123c2f:	83 ec 0c             	sub    $0xc,%esp
f0123c32:	50                   	push   %eax
f0123c33:	e8 1f 40 fe ff       	call   f0107c57 <kfree>
f0123c38:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c3b:	e8 88 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c43:	74 17                	je     f0123c5c <test_kfree_bestfirstfit+0x185e>
f0123c45:	83 ec 04             	sub    $0x4,%esp
f0123c48:	68 14 b7 13 f0       	push   $0xf013b714
f0123c4d:	68 c0 07 00 00       	push   $0x7c0
f0123c52:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123c57:	e8 a9 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123c5c:	e8 50 93 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123c61:	89 c2                	mov    %eax,%edx
f0123c63:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c66:	39 c2                	cmp    %eax,%edx
f0123c68:	74 17                	je     f0123c81 <test_kfree_bestfirstfit+0x1883>
f0123c6a:	83 ec 04             	sub    $0x4,%esp
f0123c6d:	68 ac bf 13 f0       	push   $0xf013bfac
f0123c72:	68 c1 07 00 00       	push   $0x7c1
f0123c77:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123c7c:	e8 84 c5 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c81:	e8 2b 93 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123c86:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c89:	e8 3a 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c8e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123c91:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123c97:	83 ec 0c             	sub    $0xc,%esp
f0123c9a:	50                   	push   %eax
f0123c9b:	e8 b7 3f fe ff       	call   f0107c57 <kfree>
f0123ca0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ca3:	e8 20 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ca8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123cab:	74 17                	je     f0123cc4 <test_kfree_bestfirstfit+0x18c6>
f0123cad:	83 ec 04             	sub    $0x4,%esp
f0123cb0:	68 14 b7 13 f0       	push   $0xf013b714
f0123cb5:	68 c7 07 00 00       	push   $0x7c7
f0123cba:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123cbf:	e8 41 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123cc4:	e8 e8 92 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123cc9:	89 c2                	mov    %eax,%edx
f0123ccb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123cce:	39 c2                	cmp    %eax,%edx
f0123cd0:	74 17                	je     f0123ce9 <test_kfree_bestfirstfit+0x18eb>
f0123cd2:	83 ec 04             	sub    $0x4,%esp
f0123cd5:	68 ac bf 13 f0       	push   $0xf013bfac
f0123cda:	68 c8 07 00 00       	push   $0x7c8
f0123cdf:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123ce4:	e8 1c c5 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ce9:	e8 c3 92 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123cee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cf1:	e8 d2 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123cf6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123cf9:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123cff:	83 ec 0c             	sub    $0xc,%esp
f0123d02:	50                   	push   %eax
f0123d03:	e8 4f 3f fe ff       	call   f0107c57 <kfree>
f0123d08:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d0b:	e8 b8 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123d10:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123d13:	74 17                	je     f0123d2c <test_kfree_bestfirstfit+0x192e>
f0123d15:	83 ec 04             	sub    $0x4,%esp
f0123d18:	68 14 b7 13 f0       	push   $0xf013b714
f0123d1d:	68 ce 07 00 00       	push   $0x7ce
f0123d22:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123d27:	e8 d9 c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123d2c:	e8 80 92 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123d31:	89 c2                	mov    %eax,%edx
f0123d33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d36:	39 c2                	cmp    %eax,%edx
f0123d38:	74 17                	je     f0123d51 <test_kfree_bestfirstfit+0x1953>
f0123d3a:	83 ec 04             	sub    $0x4,%esp
f0123d3d:	68 ac bf 13 f0       	push   $0xf013bfac
f0123d42:	68 cf 07 00 00       	push   $0x7cf
f0123d47:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123d4c:	e8 b4 c4 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123d51:	83 ec 0c             	sub    $0xc,%esp
f0123d54:	68 f3 bf 13 f0       	push   $0xf013bff3
f0123d59:	e8 b0 cf fd ff       	call   f0100d0e <cprintf>
f0123d5e:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123d61:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123d68:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123d6f:	eb 48                	jmp    f0123db9 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123d71:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123d74:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0123d79:	83 ec 04             	sub    $0x4,%esp
f0123d7c:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123d82:	51                   	push   %ecx
f0123d83:	52                   	push   %edx
f0123d84:	50                   	push   %eax
f0123d85:	e8 27 2d fe ff       	call   f0106ab1 <get_page_table>
f0123d8a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123d8d:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123d93:	85 c0                	test   %eax,%eax
f0123d95:	75 17                	jne    f0123dae <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123d97:	83 ec 04             	sub    $0x4,%esp
f0123d9a:	68 fc bf 13 f0       	push   $0xf013bffc
f0123d9f:	68 dd 07 00 00       	push   $0x7dd
f0123da4:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123da9:	e8 57 c4 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123dae:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123db5:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123db9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123dbd:	78 b2                	js     f0123d71 <test_kfree_bestfirstfit+0x1973>
f0123dbf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123dc3:	7f 09                	jg     f0123dce <test_kfree_bestfirstfit+0x19d0>
f0123dc5:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123dcc:	76 a3                	jbe    f0123d71 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123dce:	83 ec 0c             	sub    $0xc,%esp
f0123dd1:	68 de b8 13 f0       	push   $0xf013b8de
f0123dd6:	e8 33 cf fd ff       	call   f0100d0e <cprintf>
f0123ddb:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123dde:	83 ec 0c             	sub    $0xc,%esp
f0123de1:	68 64 c0 13 f0       	push   $0xf013c064
f0123de6:	e8 23 cf fd ff       	call   f0100d0e <cprintf>
f0123deb:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123dee:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123df3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123df6:	5b                   	pop    %ebx
f0123df7:	5f                   	pop    %edi
f0123df8:	5d                   	pop    %ebp
f0123df9:	c3                   	ret    

f0123dfa <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123dfa:	55                   	push   %ebp
f0123dfb:	89 e5                	mov    %esp,%ebp
f0123dfd:	57                   	push   %edi
f0123dfe:	56                   	push   %esi
f0123dff:	53                   	push   %ebx
f0123e00:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123e06:	83 ec 0c             	sub    $0xc,%esp
f0123e09:	68 3c b6 13 f0       	push   $0xf013b63c
f0123e0e:	e8 fb ce fd ff       	call   f0100d0e <cprintf>
f0123e13:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123e16:	83 ec 0c             	sub    $0xc,%esp
f0123e19:	68 6c b6 13 f0       	push   $0xf013b66c
f0123e1e:	e8 eb ce fd ff       	call   f0100d0e <cprintf>
f0123e23:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123e26:	83 ec 0c             	sub    $0xc,%esp
f0123e29:	68 3c b6 13 f0       	push   $0xf013b63c
f0123e2e:	e8 db ce fd ff       	call   f0100d0e <cprintf>
f0123e33:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123e36:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123e3a:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123e3e:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123e44:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123e4a:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123e51:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123e58:	e8 54 91 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123e5d:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123e60:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123e66:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123e6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0123e70:	89 d7                	mov    %edx,%edi
f0123e72:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123e74:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123e7a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123e7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0123e84:	89 d7                	mov    %edx,%edi
f0123e86:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123e88:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123e8e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123e93:	b8 00 00 00 00       	mov    $0x0,%eax
f0123e98:	89 d7                	mov    %edx,%edi
f0123e9a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e9c:	e8 10 91 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123ea1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ea4:	e8 1f ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ea9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123eac:	83 ec 0c             	sub    $0xc,%esp
f0123eaf:	68 00 fc 1f 00       	push   $0x1ffc00
f0123eb4:	e8 d3 3c fe ff       	call   f0107b8c <kmalloc>
f0123eb9:	83 c4 10             	add    $0x10,%esp
f0123ebc:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ec2:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123ec8:	89 c1                	mov    %eax,%ecx
f0123eca:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123ed1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123ed4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ed9:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123edc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123edf:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ee4:	f7 75 a0             	divl   -0x60(%ebp)
f0123ee7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123eea:	29 d0                	sub    %edx,%eax
f0123eec:	89 c3                	mov    %eax,%ebx
f0123eee:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123ef5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0123efa:	0f b6 d0             	movzbl %al,%edx
f0123efd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123f00:	01 d0                	add    %edx,%eax
f0123f02:	48                   	dec    %eax
f0123f03:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123f06:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123f09:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f0e:	f7 75 98             	divl   -0x68(%ebp)
f0123f11:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123f14:	29 d0                	sub    %edx,%eax
f0123f16:	01 c3                	add    %eax,%ebx
f0123f18:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123f1f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0123f24:	0f b6 c0             	movzbl %al,%eax
f0123f27:	c1 e0 04             	shl    $0x4,%eax
f0123f2a:	89 c2                	mov    %eax,%edx
f0123f2c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123f2f:	01 d0                	add    %edx,%eax
f0123f31:	48                   	dec    %eax
f0123f32:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123f35:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f3d:	f7 75 90             	divl   -0x70(%ebp)
f0123f40:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123f43:	29 d0                	sub    %edx,%eax
f0123f45:	01 d8                	add    %ebx,%eax
f0123f47:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123f4c:	39 c1                	cmp    %eax,%ecx
f0123f4e:	74 17                	je     f0123f67 <test_kheap_phys_addr+0x16d>
f0123f50:	83 ec 04             	sub    $0x4,%esp
f0123f53:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0123f58:	68 0a 08 00 00       	push   $0x80a
f0123f5d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123f62:	e8 9e c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f67:	e8 5c fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123f6c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123f6f:	74 17                	je     f0123f88 <test_kheap_phys_addr+0x18e>
f0123f71:	83 ec 04             	sub    $0x4,%esp
f0123f74:	68 14 b7 13 f0       	push   $0xf013b714
f0123f79:	68 0b 08 00 00       	push   $0x80b
f0123f7e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123f83:	e8 7d c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f88:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123f8b:	e8 21 90 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123f90:	29 c3                	sub    %eax,%ebx
f0123f92:	89 d8                	mov    %ebx,%eax
f0123f94:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123f99:	74 17                	je     f0123fb2 <test_kheap_phys_addr+0x1b8>
f0123f9b:	83 ec 04             	sub    $0x4,%esp
f0123f9e:	68 7c b7 13 f0       	push   $0xf013b77c
f0123fa3:	68 0c 08 00 00       	push   $0x80c
f0123fa8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0123fad:	e8 53 c2 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123fb2:	e8 fa 8f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0123fb7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fba:	e8 09 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123fbf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123fc2:	83 ec 0c             	sub    $0xc,%esp
f0123fc5:	68 00 fc 1f 00       	push   $0x1ffc00
f0123fca:	e8 bd 3b fe ff       	call   f0107b8c <kmalloc>
f0123fcf:	83 c4 10             	add    $0x10,%esp
f0123fd2:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123fd8:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123fde:	89 c1                	mov    %eax,%ecx
f0123fe0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123fe7:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123fea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123fef:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123ff2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123ff5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ffa:	f7 75 88             	divl   -0x78(%ebp)
f0123ffd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124000:	29 d0                	sub    %edx,%eax
f0124002:	89 c3                	mov    %eax,%ebx
f0124004:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012400b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124010:	0f b6 d0             	movzbl %al,%edx
f0124013:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124016:	01 d0                	add    %edx,%eax
f0124018:	48                   	dec    %eax
f0124019:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012401f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124025:	ba 00 00 00 00       	mov    $0x0,%edx
f012402a:	f7 75 80             	divl   -0x80(%ebp)
f012402d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124033:	29 d0                	sub    %edx,%eax
f0124035:	01 c3                	add    %eax,%ebx
f0124037:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012403e:	10 00 00 
f0124041:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124046:	0f b6 c0             	movzbl %al,%eax
f0124049:	c1 e0 04             	shl    $0x4,%eax
f012404c:	89 c2                	mov    %eax,%edx
f012404e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124054:	01 d0                	add    %edx,%eax
f0124056:	48                   	dec    %eax
f0124057:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012405d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124063:	ba 00 00 00 00       	mov    $0x0,%edx
f0124068:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012406e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124074:	29 d0                	sub    %edx,%eax
f0124076:	01 d8                	add    %ebx,%eax
f0124078:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012407d:	39 c1                	cmp    %eax,%ecx
f012407f:	74 17                	je     f0124098 <test_kheap_phys_addr+0x29e>
f0124081:	83 ec 04             	sub    $0x4,%esp
f0124084:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0124089:	68 12 08 00 00       	push   $0x812
f012408e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124093:	e8 6d c1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124098:	e8 2b fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012409d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01240a0:	74 17                	je     f01240b9 <test_kheap_phys_addr+0x2bf>
f01240a2:	83 ec 04             	sub    $0x4,%esp
f01240a5:	68 14 b7 13 f0       	push   $0xf013b714
f01240aa:	68 13 08 00 00       	push   $0x813
f01240af:	68 fa b6 13 f0       	push   $0xf013b6fa
f01240b4:	e8 4c c1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01240b9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01240bc:	e8 f0 8e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01240c1:	29 c3                	sub    %eax,%ebx
f01240c3:	89 d8                	mov    %ebx,%eax
f01240c5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01240ca:	74 17                	je     f01240e3 <test_kheap_phys_addr+0x2e9>
f01240cc:	83 ec 04             	sub    $0x4,%esp
f01240cf:	68 7c b7 13 f0       	push   $0xf013b77c
f01240d4:	68 14 08 00 00       	push   $0x814
f01240d9:	68 fa b6 13 f0       	push   $0xf013b6fa
f01240de:	e8 22 c1 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01240e3:	e8 c9 8e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01240e8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240eb:	e8 d8 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01240f0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01240f3:	83 ec 0c             	sub    $0xc,%esp
f01240f6:	68 00 08 00 00       	push   $0x800
f01240fb:	e8 8c 3a fe ff       	call   f0107b8c <kmalloc>
f0124100:	83 c4 10             	add    $0x10,%esp
f0124103:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124109:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012410f:	89 c1                	mov    %eax,%ecx
f0124111:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0124118:	10 00 00 
f012411b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124121:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124126:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012412c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124132:	ba 00 00 00 00       	mov    $0x0,%edx
f0124137:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012413d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124143:	29 d0                	sub    %edx,%eax
f0124145:	89 c3                	mov    %eax,%ebx
f0124147:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012414e:	10 00 00 
f0124151:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124156:	0f b6 d0             	movzbl %al,%edx
f0124159:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012415f:	01 d0                	add    %edx,%eax
f0124161:	48                   	dec    %eax
f0124162:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0124168:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012416e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124173:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0124179:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012417f:	29 d0                	sub    %edx,%eax
f0124181:	01 c3                	add    %eax,%ebx
f0124183:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012418a:	10 00 00 
f012418d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124192:	0f b6 c0             	movzbl %al,%eax
f0124195:	c1 e0 04             	shl    $0x4,%eax
f0124198:	89 c2                	mov    %eax,%edx
f012419a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01241a0:	01 d0                	add    %edx,%eax
f01241a2:	48                   	dec    %eax
f01241a3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01241a9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01241af:	ba 00 00 00 00       	mov    $0x0,%edx
f01241b4:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01241ba:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01241c0:	29 d0                	sub    %edx,%eax
f01241c2:	01 d8                	add    %ebx,%eax
f01241c4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01241c9:	39 c1                	cmp    %eax,%ecx
f01241cb:	74 17                	je     f01241e4 <test_kheap_phys_addr+0x3ea>
f01241cd:	83 ec 04             	sub    $0x4,%esp
f01241d0:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01241d5:	68 1a 08 00 00       	push   $0x81a
f01241da:	68 fa b6 13 f0       	push   $0xf013b6fa
f01241df:	e8 21 c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241e4:	e8 df fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01241e9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01241ec:	74 17                	je     f0124205 <test_kheap_phys_addr+0x40b>
f01241ee:	83 ec 04             	sub    $0x4,%esp
f01241f1:	68 14 b7 13 f0       	push   $0xf013b714
f01241f6:	68 1b 08 00 00       	push   $0x81b
f01241fb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124200:	e8 00 c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124205:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124208:	e8 a4 8d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012420d:	29 c3                	sub    %eax,%ebx
f012420f:	89 d8                	mov    %ebx,%eax
f0124211:	83 f8 01             	cmp    $0x1,%eax
f0124214:	74 17                	je     f012422d <test_kheap_phys_addr+0x433>
f0124216:	83 ec 04             	sub    $0x4,%esp
f0124219:	68 7c b7 13 f0       	push   $0xf013b77c
f012421e:	68 1c 08 00 00       	push   $0x81c
f0124223:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124228:	e8 d8 bf fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012422d:	e8 7f 8d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124232:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124235:	e8 8e fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012423a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012423d:	83 ec 0c             	sub    $0xc,%esp
f0124240:	68 00 08 00 00       	push   $0x800
f0124245:	e8 42 39 fe ff       	call   f0107b8c <kmalloc>
f012424a:	83 c4 10             	add    $0x10,%esp
f012424d:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124253:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124259:	89 c1                	mov    %eax,%ecx
f012425b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0124262:	10 00 00 
f0124265:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012426b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124270:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0124276:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012427c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124281:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0124287:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012428d:	29 d0                	sub    %edx,%eax
f012428f:	89 c3                	mov    %eax,%ebx
f0124291:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0124298:	10 00 00 
f012429b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01242a0:	0f b6 d0             	movzbl %al,%edx
f01242a3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01242a9:	01 d0                	add    %edx,%eax
f01242ab:	48                   	dec    %eax
f01242ac:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01242b2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01242b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01242bd:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01242c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01242c9:	29 d0                	sub    %edx,%eax
f01242cb:	01 c3                	add    %eax,%ebx
f01242cd:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01242d4:	10 00 00 
f01242d7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01242dc:	0f b6 c0             	movzbl %al,%eax
f01242df:	c1 e0 04             	shl    $0x4,%eax
f01242e2:	89 c2                	mov    %eax,%edx
f01242e4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01242ea:	01 d0                	add    %edx,%eax
f01242ec:	48                   	dec    %eax
f01242ed:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01242f3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01242f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01242fe:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0124304:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012430a:	29 d0                	sub    %edx,%eax
f012430c:	01 d8                	add    %ebx,%eax
f012430e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124313:	39 c1                	cmp    %eax,%ecx
f0124315:	74 17                	je     f012432e <test_kheap_phys_addr+0x534>
f0124317:	83 ec 04             	sub    $0x4,%esp
f012431a:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012431f:	68 22 08 00 00       	push   $0x822
f0124324:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124329:	e8 d7 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012432e:	e8 95 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124333:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124336:	74 17                	je     f012434f <test_kheap_phys_addr+0x555>
f0124338:	83 ec 04             	sub    $0x4,%esp
f012433b:	68 14 b7 13 f0       	push   $0xf013b714
f0124340:	68 23 08 00 00       	push   $0x823
f0124345:	68 fa b6 13 f0       	push   $0xf013b6fa
f012434a:	e8 b6 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012434f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124352:	e8 5a 8c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124357:	29 c3                	sub    %eax,%ebx
f0124359:	89 d8                	mov    %ebx,%eax
f012435b:	83 f8 01             	cmp    $0x1,%eax
f012435e:	74 17                	je     f0124377 <test_kheap_phys_addr+0x57d>
f0124360:	83 ec 04             	sub    $0x4,%esp
f0124363:	68 7c b7 13 f0       	push   $0xf013b77c
f0124368:	68 24 08 00 00       	push   $0x824
f012436d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124372:	e8 8e be fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124377:	e8 35 8c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012437c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012437f:	e8 44 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124384:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124387:	83 ec 0c             	sub    $0xc,%esp
f012438a:	68 00 1c 00 00       	push   $0x1c00
f012438f:	e8 f8 37 fe ff       	call   f0107b8c <kmalloc>
f0124394:	83 c4 10             	add    $0x10,%esp
f0124397:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012439d:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01243a3:	89 c1                	mov    %eax,%ecx
f01243a5:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01243ac:	10 00 00 
f01243af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01243b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01243ba:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01243c0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01243c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01243cb:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01243d1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01243d7:	29 d0                	sub    %edx,%eax
f01243d9:	89 c3                	mov    %eax,%ebx
f01243db:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01243e2:	10 00 00 
f01243e5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01243ea:	0f b6 d0             	movzbl %al,%edx
f01243ed:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01243f3:	01 d0                	add    %edx,%eax
f01243f5:	48                   	dec    %eax
f01243f6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01243fc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124402:	ba 00 00 00 00       	mov    $0x0,%edx
f0124407:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012440d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124413:	29 d0                	sub    %edx,%eax
f0124415:	01 c3                	add    %eax,%ebx
f0124417:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012441e:	10 00 00 
f0124421:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124426:	0f b6 c0             	movzbl %al,%eax
f0124429:	c1 e0 04             	shl    $0x4,%eax
f012442c:	89 c2                	mov    %eax,%edx
f012442e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124434:	01 d0                	add    %edx,%eax
f0124436:	48                   	dec    %eax
f0124437:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012443d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124443:	ba 00 00 00 00       	mov    $0x0,%edx
f0124448:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012444e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124454:	29 d0                	sub    %edx,%eax
f0124456:	01 d8                	add    %ebx,%eax
f0124458:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012445d:	39 c1                	cmp    %eax,%ecx
f012445f:	74 17                	je     f0124478 <test_kheap_phys_addr+0x67e>
f0124461:	83 ec 04             	sub    $0x4,%esp
f0124464:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0124469:	68 2a 08 00 00       	push   $0x82a
f012446e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124473:	e8 8d bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124478:	e8 4b f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012447d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124480:	74 17                	je     f0124499 <test_kheap_phys_addr+0x69f>
f0124482:	83 ec 04             	sub    $0x4,%esp
f0124485:	68 14 b7 13 f0       	push   $0xf013b714
f012448a:	68 2b 08 00 00       	push   $0x82b
f012448f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124494:	e8 6c bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124499:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012449c:	e8 10 8b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01244a1:	29 c3                	sub    %eax,%ebx
f01244a3:	89 d8                	mov    %ebx,%eax
f01244a5:	83 f8 02             	cmp    $0x2,%eax
f01244a8:	74 17                	je     f01244c1 <test_kheap_phys_addr+0x6c7>
f01244aa:	83 ec 04             	sub    $0x4,%esp
f01244ad:	68 7c b7 13 f0       	push   $0xf013b77c
f01244b2:	68 2c 08 00 00       	push   $0x82c
f01244b7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01244bc:	e8 44 bd fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01244c1:	e8 eb 8a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01244c6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01244c9:	e8 fa f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01244ce:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01244d1:	83 ec 0c             	sub    $0xc,%esp
f01244d4:	68 00 fc 2f 00       	push   $0x2ffc00
f01244d9:	e8 ae 36 fe ff       	call   f0107b8c <kmalloc>
f01244de:	83 c4 10             	add    $0x10,%esp
f01244e1:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01244e7:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01244ed:	89 c1                	mov    %eax,%ecx
f01244ef:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01244f6:	10 00 00 
f01244f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01244ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124504:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012450a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124510:	ba 00 00 00 00       	mov    $0x0,%edx
f0124515:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012451b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124521:	29 d0                	sub    %edx,%eax
f0124523:	89 c3                	mov    %eax,%ebx
f0124525:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012452c:	10 00 00 
f012452f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124534:	0f b6 d0             	movzbl %al,%edx
f0124537:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012453d:	01 d0                	add    %edx,%eax
f012453f:	48                   	dec    %eax
f0124540:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0124546:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012454c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124551:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0124557:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012455d:	29 d0                	sub    %edx,%eax
f012455f:	01 c3                	add    %eax,%ebx
f0124561:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0124568:	10 00 00 
f012456b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124570:	0f b6 c0             	movzbl %al,%eax
f0124573:	c1 e0 04             	shl    $0x4,%eax
f0124576:	89 c2                	mov    %eax,%edx
f0124578:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012457e:	01 d0                	add    %edx,%eax
f0124580:	48                   	dec    %eax
f0124581:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0124587:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012458d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124592:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0124598:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012459e:	29 d0                	sub    %edx,%eax
f01245a0:	01 d8                	add    %ebx,%eax
f01245a2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01245a7:	39 c1                	cmp    %eax,%ecx
f01245a9:	74 17                	je     f01245c2 <test_kheap_phys_addr+0x7c8>
f01245ab:	83 ec 04             	sub    $0x4,%esp
f01245ae:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01245b3:	68 32 08 00 00       	push   $0x832
f01245b8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01245bd:	e8 43 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01245c2:	e8 01 f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01245c7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01245ca:	74 17                	je     f01245e3 <test_kheap_phys_addr+0x7e9>
f01245cc:	83 ec 04             	sub    $0x4,%esp
f01245cf:	68 14 b7 13 f0       	push   $0xf013b714
f01245d4:	68 33 08 00 00       	push   $0x833
f01245d9:	68 fa b6 13 f0       	push   $0xf013b6fa
f01245de:	e8 22 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01245e3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01245e6:	e8 c6 89 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01245eb:	29 c3                	sub    %eax,%ebx
f01245ed:	89 d8                	mov    %ebx,%eax
f01245ef:	3d 00 03 00 00       	cmp    $0x300,%eax
f01245f4:	74 17                	je     f012460d <test_kheap_phys_addr+0x813>
f01245f6:	83 ec 04             	sub    $0x4,%esp
f01245f9:	68 7c b7 13 f0       	push   $0xf013b77c
f01245fe:	68 34 08 00 00       	push   $0x834
f0124603:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124608:	e8 f8 bb fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012460d:	e8 9f 89 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124612:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124615:	e8 ae f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012461a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012461d:	83 ec 0c             	sub    $0xc,%esp
f0124620:	68 00 fc 5f 00       	push   $0x5ffc00
f0124625:	e8 62 35 fe ff       	call   f0107b8c <kmalloc>
f012462a:	83 c4 10             	add    $0x10,%esp
f012462d:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124633:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124639:	89 c1                	mov    %eax,%ecx
f012463b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124642:	10 00 00 
f0124645:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012464b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124650:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0124656:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012465c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124661:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0124667:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012466d:	29 d0                	sub    %edx,%eax
f012466f:	89 c3                	mov    %eax,%ebx
f0124671:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124678:	10 00 00 
f012467b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124680:	0f b6 d0             	movzbl %al,%edx
f0124683:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124689:	01 d0                	add    %edx,%eax
f012468b:	48                   	dec    %eax
f012468c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124692:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124698:	ba 00 00 00 00       	mov    $0x0,%edx
f012469d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01246a3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01246a9:	29 d0                	sub    %edx,%eax
f01246ab:	01 c3                	add    %eax,%ebx
f01246ad:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01246b4:	10 00 00 
f01246b7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01246bc:	0f b6 c0             	movzbl %al,%eax
f01246bf:	c1 e0 04             	shl    $0x4,%eax
f01246c2:	89 c2                	mov    %eax,%edx
f01246c4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01246ca:	01 d0                	add    %edx,%eax
f01246cc:	48                   	dec    %eax
f01246cd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01246d3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01246d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01246de:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01246e4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01246ea:	29 d0                	sub    %edx,%eax
f01246ec:	01 d8                	add    %ebx,%eax
f01246ee:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01246f3:	39 c1                	cmp    %eax,%ecx
f01246f5:	74 17                	je     f012470e <test_kheap_phys_addr+0x914>
f01246f7:	83 ec 04             	sub    $0x4,%esp
f01246fa:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01246ff:	68 3a 08 00 00       	push   $0x83a
f0124704:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124709:	e8 f7 ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012470e:	e8 b5 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124713:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124716:	74 17                	je     f012472f <test_kheap_phys_addr+0x935>
f0124718:	83 ec 04             	sub    $0x4,%esp
f012471b:	68 14 b7 13 f0       	push   $0xf013b714
f0124720:	68 3b 08 00 00       	push   $0x83b
f0124725:	68 fa b6 13 f0       	push   $0xf013b6fa
f012472a:	e8 d6 ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012472f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124732:	e8 7a 88 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124737:	29 c3                	sub    %eax,%ebx
f0124739:	89 d8                	mov    %ebx,%eax
f012473b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124740:	74 17                	je     f0124759 <test_kheap_phys_addr+0x95f>
f0124742:	83 ec 04             	sub    $0x4,%esp
f0124745:	68 7c b7 13 f0       	push   $0xf013b77c
f012474a:	68 3c 08 00 00       	push   $0x83c
f012474f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124754:	e8 ac ba fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124759:	e8 53 88 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012475e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124761:	e8 62 f6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124766:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124769:	83 ec 0c             	sub    $0xc,%esp
f012476c:	68 00 38 00 00       	push   $0x3800
f0124771:	e8 16 34 fe ff       	call   f0107b8c <kmalloc>
f0124776:	83 c4 10             	add    $0x10,%esp
f0124779:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012477f:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124785:	89 c1                	mov    %eax,%ecx
f0124787:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012478e:	10 00 00 
f0124791:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124797:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012479c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01247a2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01247a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01247ad:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01247b3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01247b9:	29 d0                	sub    %edx,%eax
f01247bb:	89 c3                	mov    %eax,%ebx
f01247bd:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01247c4:	10 00 00 
f01247c7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01247cc:	0f b6 d0             	movzbl %al,%edx
f01247cf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01247d5:	01 d0                	add    %edx,%eax
f01247d7:	48                   	dec    %eax
f01247d8:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01247de:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01247e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01247e9:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01247ef:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01247f5:	29 d0                	sub    %edx,%eax
f01247f7:	01 c3                	add    %eax,%ebx
f01247f9:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124800:	10 00 00 
f0124803:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124808:	0f b6 c0             	movzbl %al,%eax
f012480b:	c1 e0 04             	shl    $0x4,%eax
f012480e:	89 c2                	mov    %eax,%edx
f0124810:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124816:	01 d0                	add    %edx,%eax
f0124818:	48                   	dec    %eax
f0124819:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012481f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124825:	ba 00 00 00 00       	mov    $0x0,%edx
f012482a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124830:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124836:	29 d0                	sub    %edx,%eax
f0124838:	01 d8                	add    %ebx,%eax
f012483a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012483f:	39 c1                	cmp    %eax,%ecx
f0124841:	74 17                	je     f012485a <test_kheap_phys_addr+0xa60>
f0124843:	83 ec 04             	sub    $0x4,%esp
f0124846:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012484b:	68 42 08 00 00       	push   $0x842
f0124850:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124855:	e8 ab b9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012485a:	e8 69 f5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012485f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124862:	74 17                	je     f012487b <test_kheap_phys_addr+0xa81>
f0124864:	83 ec 04             	sub    $0x4,%esp
f0124867:	68 14 b7 13 f0       	push   $0xf013b714
f012486c:	68 43 08 00 00       	push   $0x843
f0124871:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124876:	e8 8a b9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012487b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012487e:	e8 2e 87 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124883:	29 c3                	sub    %eax,%ebx
f0124885:	89 d8                	mov    %ebx,%eax
f0124887:	83 f8 04             	cmp    $0x4,%eax
f012488a:	74 17                	je     f01248a3 <test_kheap_phys_addr+0xaa9>
f012488c:	83 ec 04             	sub    $0x4,%esp
f012488f:	68 7c b7 13 f0       	push   $0xf013b77c
f0124894:	68 44 08 00 00       	push   $0x844
f0124899:	68 fa b6 13 f0       	push   $0xf013b6fa
f012489e:	e8 62 b9 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01248a3:	89 e0                	mov    %esp,%eax
f01248a5:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01248a7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01248ae:	10 00 00 
f01248b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01248b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248bc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01248c2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01248c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01248cd:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01248d3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01248d9:	29 d0                	sub    %edx,%eax
f01248db:	89 c1                	mov    %eax,%ecx
f01248dd:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01248e4:	10 00 00 
f01248e7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01248ec:	0f b6 d0             	movzbl %al,%edx
f01248ef:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01248f5:	01 d0                	add    %edx,%eax
f01248f7:	48                   	dec    %eax
f01248f8:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01248fe:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124904:	ba 00 00 00 00       	mov    $0x0,%edx
f0124909:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012490f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124915:	29 d0                	sub    %edx,%eax
f0124917:	01 c1                	add    %eax,%ecx
f0124919:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124920:	10 00 00 
f0124923:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124928:	0f b6 c0             	movzbl %al,%eax
f012492b:	c1 e0 04             	shl    $0x4,%eax
f012492e:	89 c2                	mov    %eax,%edx
f0124930:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124936:	01 d0                	add    %edx,%eax
f0124938:	48                   	dec    %eax
f0124939:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012493f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124945:	ba 00 00 00 00       	mov    $0x0,%edx
f012494a:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124950:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124956:	29 d0                	sub    %edx,%eax
f0124958:	01 c8                	add    %ecx,%eax
f012495a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012495f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124965:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012496c:	10 00 00 
f012496f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124975:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012497a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124980:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124986:	ba 00 00 00 00       	mov    $0x0,%edx
f012498b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124991:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124997:	29 d0                	sub    %edx,%eax
f0124999:	89 c1                	mov    %eax,%ecx
f012499b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01249a2:	10 00 00 
f01249a5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01249aa:	0f b6 d0             	movzbl %al,%edx
f01249ad:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01249b3:	01 d0                	add    %edx,%eax
f01249b5:	48                   	dec    %eax
f01249b6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01249bc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01249c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01249c7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01249cd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01249d3:	29 d0                	sub    %edx,%eax
f01249d5:	01 c1                	add    %eax,%ecx
f01249d7:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01249de:	10 00 00 
f01249e1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01249e6:	0f b6 c0             	movzbl %al,%eax
f01249e9:	c1 e0 04             	shl    $0x4,%eax
f01249ec:	89 c2                	mov    %eax,%edx
f01249ee:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01249f4:	01 d0                	add    %edx,%eax
f01249f6:	48                   	dec    %eax
f01249f7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01249fd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124a03:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a08:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124a0e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124a14:	29 d0                	sub    %edx,%eax
f0124a16:	01 c8                	add    %ecx,%eax
f0124a18:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124a1d:	c1 e8 0c             	shr    $0xc,%eax
f0124a20:	89 c2                	mov    %eax,%edx
f0124a22:	4a                   	dec    %edx
f0124a23:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124a29:	c1 e0 02             	shl    $0x2,%eax
f0124a2c:	8d 50 03             	lea    0x3(%eax),%edx
f0124a2f:	b8 10 00 00 00       	mov    $0x10,%eax
f0124a34:	48                   	dec    %eax
f0124a35:	01 d0                	add    %edx,%eax
f0124a37:	bf 10 00 00 00       	mov    $0x10,%edi
f0124a3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a41:	f7 f7                	div    %edi
f0124a43:	6b c0 10             	imul   $0x10,%eax,%eax
f0124a46:	29 c4                	sub    %eax,%esp
f0124a48:	89 e0                	mov    %esp,%eax
f0124a4a:	83 c0 03             	add    $0x3,%eax
f0124a4d:	c1 e8 02             	shr    $0x2,%eax
f0124a50:	c1 e0 02             	shl    $0x2,%eax
f0124a53:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124a59:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124a60:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124a67:	10 00 00 
f0124a6a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124a70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a75:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124a7b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124a81:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a86:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124a8c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124a92:	29 d0                	sub    %edx,%eax
f0124a94:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124a99:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124a9c:	eb 29                	jmp    f0124ac7 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124a9e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124aa1:	8d 43 01             	lea    0x1(%ebx),%eax
f0124aa4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124aa7:	83 ec 0c             	sub    $0xc,%esp
f0124aaa:	ff 75 e0             	pushl  -0x20(%ebp)
f0124aad:	e8 f8 32 fe ff       	call   f0107daa <kheap_physical_address>
f0124ab2:	83 c4 10             	add    $0x10,%esp
f0124ab5:	89 c2                	mov    %eax,%edx
f0124ab7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124abd:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124ac0:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124ac7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124aca:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124ad0:	72 cc                	jb     f0124a9e <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124ad2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124ad5:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124adb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124ae2:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124ae9:	10 00 00 
f0124aec:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124af2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124af7:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124afd:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124b03:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b08:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124b0e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124b14:	29 d0                	sub    %edx,%eax
f0124b16:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124b1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124b1e:	e9 ab 00 00 00       	jmp    f0124bce <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124b23:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0124b28:	83 ec 04             	sub    $0x4,%esp
f0124b2b:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124b31:	52                   	push   %edx
f0124b32:	ff 75 e0             	pushl  -0x20(%ebp)
f0124b35:	50                   	push   %eax
f0124b36:	e8 76 1f fe ff       	call   f0106ab1 <get_page_table>
f0124b3b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124b3e:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124b44:	85 c0                	test   %eax,%eax
f0124b46:	75 17                	jne    f0124b5f <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124b48:	83 ec 04             	sub    $0x4,%esp
f0124b4b:	68 9c c0 13 f0       	push   $0xf013c09c
f0124b50:	68 59 08 00 00       	push   $0x859
f0124b55:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124b5a:	e8 a6 b6 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124b62:	c1 e8 0c             	shr    $0xc,%eax
f0124b65:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124b6a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124b6d:	eb 4b                	jmp    f0124bba <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124b6f:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124b75:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124b78:	c1 e2 02             	shl    $0x2,%edx
f0124b7b:	01 d0                	add    %edx,%eax
f0124b7d:	8b 00                	mov    (%eax),%eax
f0124b7f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124b84:	89 c1                	mov    %eax,%ecx
f0124b86:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124b8c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124b8f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b92:	39 c1                	cmp    %eax,%ecx
f0124b94:	74 17                	je     f0124bad <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124b96:	83 ec 04             	sub    $0x4,%esp
f0124b99:	68 f5 c0 13 f0       	push   $0xf013c0f5
f0124b9e:	68 60 08 00 00       	push   $0x860
f0124ba3:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124ba8:	e8 58 b6 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124bad:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124bb4:	ff 45 dc             	incl   -0x24(%ebp)
f0124bb7:	ff 45 e4             	incl   -0x1c(%ebp)
f0124bba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124bbd:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124bc3:	7d 09                	jge    f0124bce <test_kheap_phys_addr+0xdd4>
f0124bc5:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124bcc:	7e a1                	jle    f0124b6f <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124bce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124bd1:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124bd7:	0f 82 46 ff ff ff    	jb     f0124b23 <test_kheap_phys_addr+0xd29>
f0124bdd:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124bdf:	83 ec 0c             	sub    $0xc,%esp
f0124be2:	68 14 c1 13 f0       	push   $0xf013c114
f0124be7:	e8 22 c1 fd ff       	call   f0100d0e <cprintf>
f0124bec:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124bef:	e8 bd 83 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124bf4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124bfa:	e8 c9 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124bff:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124c05:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124c0b:	83 ec 0c             	sub    $0xc,%esp
f0124c0e:	50                   	push   %eax
f0124c0f:	e8 43 30 fe ff       	call   f0107c57 <kfree>
f0124c14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c17:	e8 ac f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124c1c:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124c22:	74 17                	je     f0124c3b <test_kheap_phys_addr+0xe41>
f0124c24:	83 ec 04             	sub    $0x4,%esp
f0124c27:	68 14 b7 13 f0       	push   $0xf013b714
f0124c2c:	68 6e 08 00 00       	push   $0x86e
f0124c31:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124c36:	e8 ca b5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124c3b:	e8 71 83 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124c40:	89 c2                	mov    %eax,%edx
f0124c42:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124c48:	29 c2                	sub    %eax,%edx
f0124c4a:	89 d0                	mov    %edx,%eax
f0124c4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124c51:	74 17                	je     f0124c6a <test_kheap_phys_addr+0xe70>
f0124c53:	83 ec 04             	sub    $0x4,%esp
f0124c56:	68 84 be 13 f0       	push   $0xf013be84
f0124c5b:	68 6f 08 00 00       	push   $0x86f
f0124c60:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124c65:	e8 9b b5 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124c6a:	e8 42 83 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124c6f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c75:	e8 4e f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124c7a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124c80:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124c86:	83 ec 0c             	sub    $0xc,%esp
f0124c89:	50                   	push   %eax
f0124c8a:	e8 c8 2f fe ff       	call   f0107c57 <kfree>
f0124c8f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c92:	e8 31 f1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124c97:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124c9d:	74 17                	je     f0124cb6 <test_kheap_phys_addr+0xebc>
f0124c9f:	83 ec 04             	sub    $0x4,%esp
f0124ca2:	68 14 b7 13 f0       	push   $0xf013b714
f0124ca7:	68 75 08 00 00       	push   $0x875
f0124cac:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124cb1:	e8 4f b5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124cb6:	e8 f6 82 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124cbb:	89 c2                	mov    %eax,%edx
f0124cbd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124cc3:	29 c2                	sub    %eax,%edx
f0124cc5:	89 d0                	mov    %edx,%eax
f0124cc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124ccc:	74 17                	je     f0124ce5 <test_kheap_phys_addr+0xeeb>
f0124cce:	83 ec 04             	sub    $0x4,%esp
f0124cd1:	68 84 be 13 f0       	push   $0xf013be84
f0124cd6:	68 76 08 00 00       	push   $0x876
f0124cdb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124ce0:	e8 20 b5 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ce5:	e8 c7 82 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124cea:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124cf0:	e8 d3 f0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124cf5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124cfb:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124d01:	83 ec 0c             	sub    $0xc,%esp
f0124d04:	50                   	push   %eax
f0124d05:	e8 4d 2f fe ff       	call   f0107c57 <kfree>
f0124d0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d0d:	e8 b6 f0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124d12:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124d18:	74 17                	je     f0124d31 <test_kheap_phys_addr+0xf37>
f0124d1a:	83 ec 04             	sub    $0x4,%esp
f0124d1d:	68 14 b7 13 f0       	push   $0xf013b714
f0124d22:	68 7c 08 00 00       	push   $0x87c
f0124d27:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124d2c:	e8 d4 b4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124d31:	e8 7b 82 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0124d36:	89 c2                	mov    %eax,%edx
f0124d38:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124d3e:	29 c2                	sub    %eax,%edx
f0124d40:	89 d0                	mov    %edx,%eax
f0124d42:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124d47:	74 17                	je     f0124d60 <test_kheap_phys_addr+0xf66>
f0124d49:	83 ec 04             	sub    $0x4,%esp
f0124d4c:	68 84 be 13 f0       	push   $0xf013be84
f0124d51:	68 7d 08 00 00       	push   $0x87d
f0124d56:	68 fa b6 13 f0       	push   $0xf013b6fa
f0124d5b:	e8 a5 b4 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124d60:	89 e0                	mov    %esp,%eax
f0124d62:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124d64:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124d6b:	10 00 00 
f0124d6e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124d74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d79:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124d7f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d8a:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124d90:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124d96:	29 d0                	sub    %edx,%eax
f0124d98:	89 c1                	mov    %eax,%ecx
f0124d9a:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124da1:	10 00 00 
f0124da4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124da9:	0f b6 d0             	movzbl %al,%edx
f0124dac:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124db2:	01 d0                	add    %edx,%eax
f0124db4:	48                   	dec    %eax
f0124db5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124dbb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124dc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc6:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124dcc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124dd2:	29 d0                	sub    %edx,%eax
f0124dd4:	01 c1                	add    %eax,%ecx
f0124dd6:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124ddd:	10 00 00 
f0124de0:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124de5:	0f b6 c0             	movzbl %al,%eax
f0124de8:	c1 e0 04             	shl    $0x4,%eax
f0124deb:	89 c2                	mov    %eax,%edx
f0124ded:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124df3:	01 d0                	add    %edx,%eax
f0124df5:	48                   	dec    %eax
f0124df6:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124dfc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124e02:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e07:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124e0d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124e13:	29 d0                	sub    %edx,%eax
f0124e15:	01 c8                	add    %ecx,%eax
f0124e17:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124e1c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124e22:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124e29:	10 00 00 
f0124e2c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124e32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e37:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124e3d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124e43:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e48:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124e4e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124e54:	29 d0                	sub    %edx,%eax
f0124e56:	89 c1                	mov    %eax,%ecx
f0124e58:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124e5f:	10 00 00 
f0124e62:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124e67:	0f b6 d0             	movzbl %al,%edx
f0124e6a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124e70:	01 d0                	add    %edx,%eax
f0124e72:	48                   	dec    %eax
f0124e73:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124e79:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124e7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e84:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124e8a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124e90:	29 d0                	sub    %edx,%eax
f0124e92:	01 c1                	add    %eax,%ecx
f0124e94:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124e9b:	10 00 00 
f0124e9e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0124ea3:	0f b6 c0             	movzbl %al,%eax
f0124ea6:	c1 e0 04             	shl    $0x4,%eax
f0124ea9:	89 c2                	mov    %eax,%edx
f0124eab:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124eb1:	01 d0                	add    %edx,%eax
f0124eb3:	48                   	dec    %eax
f0124eb4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124eba:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124ec0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ec5:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124ecb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124ed1:	29 d0                	sub    %edx,%eax
f0124ed3:	01 c8                	add    %ecx,%eax
f0124ed5:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124eda:	c1 e8 0c             	shr    $0xc,%eax
f0124edd:	89 c2                	mov    %eax,%edx
f0124edf:	4a                   	dec    %edx
f0124ee0:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124ee6:	c1 e0 02             	shl    $0x2,%eax
f0124ee9:	8d 50 03             	lea    0x3(%eax),%edx
f0124eec:	b8 10 00 00 00       	mov    $0x10,%eax
f0124ef1:	48                   	dec    %eax
f0124ef2:	01 d0                	add    %edx,%eax
f0124ef4:	bf 10 00 00 00       	mov    $0x10,%edi
f0124ef9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124efe:	f7 f7                	div    %edi
f0124f00:	6b c0 10             	imul   $0x10,%eax,%eax
f0124f03:	29 c4                	sub    %eax,%esp
f0124f05:	89 e0                	mov    %esp,%eax
f0124f07:	83 c0 03             	add    $0x3,%eax
f0124f0a:	c1 e8 02             	shr    $0x2,%eax
f0124f0d:	c1 e0 02             	shl    $0x2,%eax
f0124f10:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124f16:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124f1d:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124f24:	10 00 00 
f0124f27:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124f2d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f32:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124f38:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124f3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f43:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124f49:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124f4f:	29 d0                	sub    %edx,%eax
f0124f51:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124f56:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124f59:	eb 29                	jmp    f0124f84 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124f5b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124f5e:	8d 43 01             	lea    0x1(%ebx),%eax
f0124f61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124f64:	83 ec 0c             	sub    $0xc,%esp
f0124f67:	ff 75 d8             	pushl  -0x28(%ebp)
f0124f6a:	e8 3b 2e fe ff       	call   f0107daa <kheap_physical_address>
f0124f6f:	83 c4 10             	add    $0x10,%esp
f0124f72:	89 c2                	mov    %eax,%edx
f0124f74:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124f7a:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124f7d:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124f84:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124f87:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124f8d:	72 cc                	jb     f0124f5b <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124f8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f92:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124f98:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f9f:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124fa6:	10 00 00 
f0124fa9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124faf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124fb4:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124fba:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124fc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fc5:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124fcb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124fd1:	29 d0                	sub    %edx,%eax
f0124fd3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124fd8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124fdb:	e9 ab 00 00 00       	jmp    f012508b <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124fe0:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0124fe5:	83 ec 04             	sub    $0x4,%esp
f0124fe8:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124fee:	52                   	push   %edx
f0124fef:	ff 75 d8             	pushl  -0x28(%ebp)
f0124ff2:	50                   	push   %eax
f0124ff3:	e8 b9 1a fe ff       	call   f0106ab1 <get_page_table>
f0124ff8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124ffb:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125001:	85 c0                	test   %eax,%eax
f0125003:	75 17                	jne    f012501c <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125005:	83 ec 04             	sub    $0x4,%esp
f0125008:	68 9c c0 13 f0       	push   $0xf013c09c
f012500d:	68 93 08 00 00       	push   $0x893
f0125012:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125017:	e8 e9 b1 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012501c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012501f:	c1 e8 0c             	shr    $0xc,%eax
f0125022:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125027:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f012502a:	eb 4b                	jmp    f0125077 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012502c:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125032:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0125035:	c1 e2 02             	shl    $0x2,%edx
f0125038:	01 d0                	add    %edx,%eax
f012503a:	8b 00                	mov    (%eax),%eax
f012503c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125041:	89 c1                	mov    %eax,%ecx
f0125043:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125049:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012504c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012504f:	39 c1                	cmp    %eax,%ecx
f0125051:	74 17                	je     f012506a <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125053:	83 ec 04             	sub    $0x4,%esp
f0125056:	68 f5 c0 13 f0       	push   $0xf013c0f5
f012505b:	68 9a 08 00 00       	push   $0x89a
f0125060:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125065:	e8 9b b1 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f012506a:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0125071:	ff 45 d4             	incl   -0x2c(%ebp)
f0125074:	ff 45 e4             	incl   -0x1c(%ebp)
f0125077:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012507a:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0125080:	7d 09                	jge    f012508b <test_kheap_phys_addr+0x1291>
f0125082:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0125089:	7e a1                	jle    f012502c <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012508b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012508e:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0125094:	0f 82 46 ff ff ff    	jb     f0124fe0 <test_kheap_phys_addr+0x11e6>
f012509a:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f012509c:	83 ec 0c             	sub    $0xc,%esp
f012509f:	68 85 b8 13 f0       	push   $0xf013b885
f01250a4:	e8 65 bc fd ff       	call   f0100d0e <cprintf>
f01250a9:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01250ac:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01250b3:	10 00 00 
f01250b6:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01250bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250c1:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01250c7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01250cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01250d2:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f01250d8:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01250de:	29 d0                	sub    %edx,%eax
f01250e0:	89 c1                	mov    %eax,%ecx
f01250e2:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01250e9:	10 00 00 
f01250ec:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01250f1:	0f b6 d0             	movzbl %al,%edx
f01250f4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01250fa:	01 d0                	add    %edx,%eax
f01250fc:	48                   	dec    %eax
f01250fd:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125103:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125109:	ba 00 00 00 00       	mov    $0x0,%edx
f012510e:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125114:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012511a:	29 d0                	sub    %edx,%eax
f012511c:	01 c1                	add    %eax,%ecx
f012511e:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0125125:	10 00 00 
f0125128:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012512d:	0f b6 c0             	movzbl %al,%eax
f0125130:	c1 e0 04             	shl    $0x4,%eax
f0125133:	89 c2                	mov    %eax,%edx
f0125135:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012513b:	01 d0                	add    %edx,%eax
f012513d:	48                   	dec    %eax
f012513e:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0125144:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012514a:	ba 00 00 00 00       	mov    $0x0,%edx
f012514f:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0125155:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012515b:	29 d0                	sub    %edx,%eax
f012515d:	01 c8                	add    %ecx,%eax
f012515f:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0125164:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f012516a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125171:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125177:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012517a:	eb 0a                	jmp    f0125186 <test_kheap_phys_addr+0x138c>
		{
			i++;
f012517c:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012517f:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0125186:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012518d:	76 ed                	jbe    f012517c <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f012518f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125192:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0125198:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012519f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01251a5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01251a8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01251af:	e9 cc 00 00 00       	jmp    f0125280 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01251b4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01251b7:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01251bc:	83 ec 04             	sub    $0x4,%esp
f01251bf:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01251c5:	51                   	push   %ecx
f01251c6:	52                   	push   %edx
f01251c7:	50                   	push   %eax
f01251c8:	e8 e4 18 fe ff       	call   f0106ab1 <get_page_table>
f01251cd:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01251d0:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01251d6:	85 c0                	test   %eax,%eax
f01251d8:	75 17                	jne    f01251f1 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01251da:	83 ec 04             	sub    $0x4,%esp
f01251dd:	68 9c c0 13 f0       	push   $0xf013c09c
f01251e2:	68 b6 08 00 00       	push   $0x8b6
f01251e7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01251ec:	e8 14 b0 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01251f1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01251f8:	eb 67                	jmp    f0125261 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01251fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01251fd:	c1 e0 0c             	shl    $0xc,%eax
f0125200:	89 c2                	mov    %eax,%edx
f0125202:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125208:	01 d0                	add    %edx,%eax
f012520a:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125210:	83 ec 0c             	sub    $0xc,%esp
f0125213:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125219:	e8 8c 2b fe ff       	call   f0107daa <kheap_physical_address>
f012521e:	83 c4 10             	add    $0x10,%esp
f0125221:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0125227:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012522d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125230:	c1 e2 02             	shl    $0x2,%edx
f0125233:	01 d0                	add    %edx,%eax
f0125235:	8b 00                	mov    (%eax),%eax
f0125237:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012523c:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0125242:	74 17                	je     f012525b <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125244:	83 ec 04             	sub    $0x4,%esp
f0125247:	68 f5 c0 13 f0       	push   $0xf013c0f5
f012524c:	68 c0 08 00 00       	push   $0x8c0
f0125251:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125256:	e8 aa af fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012525b:	ff 45 cc             	incl   -0x34(%ebp)
f012525e:	ff 45 e4             	incl   -0x1c(%ebp)
f0125261:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125264:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f012526a:	7d 09                	jge    f0125275 <test_kheap_phys_addr+0x147b>
f012526c:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0125273:	7e 85                	jle    f01251fa <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0125275:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f012527c:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0125280:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0125284:	0f 88 2a ff ff ff    	js     f01251b4 <test_kheap_phys_addr+0x13ba>
f012528a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012528e:	7f 0d                	jg     f012529d <test_kheap_phys_addr+0x14a3>
f0125290:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0125297:	0f 86 17 ff ff ff    	jbe    f01251b4 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012529d:	83 ec 0c             	sub    $0xc,%esp
f01252a0:	68 de b8 13 f0       	push   $0xf013b8de
f01252a5:	e8 64 ba fd ff       	call   f0100d0e <cprintf>
f01252aa:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01252ad:	83 ec 0c             	sub    $0xc,%esp
f01252b0:	68 48 c1 13 f0       	push   $0xf013c148
f01252b5:	e8 54 ba fd ff       	call   f0100d0e <cprintf>
f01252ba:	83 c4 10             	add    $0x10,%esp

	return 1;
f01252bd:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01252c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01252c5:	5b                   	pop    %ebx
f01252c6:	5e                   	pop    %esi
f01252c7:	5f                   	pop    %edi
f01252c8:	5d                   	pop    %ebp
f01252c9:	c3                   	ret    

f01252ca <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01252ca:	55                   	push   %ebp
f01252cb:	89 e5                	mov    %esp,%ebp
f01252cd:	57                   	push   %edi
f01252ce:	56                   	push   %esi
f01252cf:	53                   	push   %ebx
f01252d0:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01252d6:	89 e0                	mov    %esp,%eax
f01252d8:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01252da:	83 ec 0c             	sub    $0xc,%esp
f01252dd:	68 3c b6 13 f0       	push   $0xf013b63c
f01252e2:	e8 27 ba fd ff       	call   f0100d0e <cprintf>
f01252e7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01252ea:	83 ec 0c             	sub    $0xc,%esp
f01252ed:	68 6c b6 13 f0       	push   $0xf013b66c
f01252f2:	e8 17 ba fd ff       	call   f0100d0e <cprintf>
f01252f7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01252fa:	83 ec 0c             	sub    $0xc,%esp
f01252fd:	68 3c b6 13 f0       	push   $0xf013b63c
f0125302:	e8 07 ba fd ff       	call   f0100d0e <cprintf>
f0125307:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012530a:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f012530e:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0125312:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0125318:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f012531e:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125325:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012532c:	e8 80 7c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125331:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125334:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012533a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012533f:	b8 00 00 00 00       	mov    $0x0,%eax
f0125344:	89 d7                	mov    %edx,%edi
f0125346:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125348:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f012534e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125353:	b8 00 00 00 00       	mov    $0x0,%eax
f0125358:	89 d7                	mov    %edx,%edi
f012535a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012535c:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0125362:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125367:	b8 00 00 00 00       	mov    $0x0,%eax
f012536c:	89 d7                	mov    %edx,%edi
f012536e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125370:	e8 3c 7c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125375:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125378:	e8 4b ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012537d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125380:	83 ec 0c             	sub    $0xc,%esp
f0125383:	68 00 fc 1f 00       	push   $0x1ffc00
f0125388:	e8 ff 27 fe ff       	call   f0107b8c <kmalloc>
f012538d:	83 c4 10             	add    $0x10,%esp
f0125390:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125396:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012539c:	89 c1                	mov    %eax,%ecx
f012539e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01253a5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01253a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253ad:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01253b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01253b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01253b8:	f7 75 b4             	divl   -0x4c(%ebp)
f01253bb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01253be:	29 d0                	sub    %edx,%eax
f01253c0:	89 c3                	mov    %eax,%ebx
f01253c2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01253c9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01253ce:	0f b6 d0             	movzbl %al,%edx
f01253d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01253d4:	01 d0                	add    %edx,%eax
f01253d6:	48                   	dec    %eax
f01253d7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01253da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01253dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01253e2:	f7 75 ac             	divl   -0x54(%ebp)
f01253e5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01253e8:	29 d0                	sub    %edx,%eax
f01253ea:	01 c3                	add    %eax,%ebx
f01253ec:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01253f3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01253f8:	0f b6 c0             	movzbl %al,%eax
f01253fb:	c1 e0 04             	shl    $0x4,%eax
f01253fe:	89 c2                	mov    %eax,%edx
f0125400:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125403:	01 d0                	add    %edx,%eax
f0125405:	48                   	dec    %eax
f0125406:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0125409:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012540c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125411:	f7 75 a4             	divl   -0x5c(%ebp)
f0125414:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125417:	29 d0                	sub    %edx,%eax
f0125419:	01 d8                	add    %ebx,%eax
f012541b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125420:	39 c1                	cmp    %eax,%ecx
f0125422:	74 17                	je     f012543b <test_kheap_virt_addr+0x171>
f0125424:	83 ec 04             	sub    $0x4,%esp
f0125427:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012542c:	68 ed 08 00 00       	push   $0x8ed
f0125431:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125436:	e8 ca ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012543b:	e8 88 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125440:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125443:	74 17                	je     f012545c <test_kheap_virt_addr+0x192>
f0125445:	83 ec 04             	sub    $0x4,%esp
f0125448:	68 14 b7 13 f0       	push   $0xf013b714
f012544d:	68 ee 08 00 00       	push   $0x8ee
f0125452:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125457:	e8 a9 ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012545c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012545f:	e8 4d 7b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125464:	29 c3                	sub    %eax,%ebx
f0125466:	89 d8                	mov    %ebx,%eax
f0125468:	3d 00 02 00 00       	cmp    $0x200,%eax
f012546d:	74 17                	je     f0125486 <test_kheap_virt_addr+0x1bc>
f012546f:	83 ec 04             	sub    $0x4,%esp
f0125472:	68 7c b7 13 f0       	push   $0xf013b77c
f0125477:	68 ef 08 00 00       	push   $0x8ef
f012547c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125481:	e8 7f ad fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125486:	e8 26 7b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012548b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012548e:	e8 35 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125493:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125496:	83 ec 0c             	sub    $0xc,%esp
f0125499:	68 00 fc 1f 00       	push   $0x1ffc00
f012549e:	e8 e9 26 fe ff       	call   f0107b8c <kmalloc>
f01254a3:	83 c4 10             	add    $0x10,%esp
f01254a6:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254ac:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01254b2:	89 c1                	mov    %eax,%ecx
f01254b4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01254bb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01254be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254c3:	89 45 98             	mov    %eax,-0x68(%ebp)
f01254c6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01254c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01254ce:	f7 75 9c             	divl   -0x64(%ebp)
f01254d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01254d4:	29 d0                	sub    %edx,%eax
f01254d6:	89 c3                	mov    %eax,%ebx
f01254d8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01254df:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01254e4:	0f b6 d0             	movzbl %al,%edx
f01254e7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01254ea:	01 d0                	add    %edx,%eax
f01254ec:	48                   	dec    %eax
f01254ed:	89 45 90             	mov    %eax,-0x70(%ebp)
f01254f0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01254f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01254f8:	f7 75 94             	divl   -0x6c(%ebp)
f01254fb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01254fe:	29 d0                	sub    %edx,%eax
f0125500:	01 c3                	add    %eax,%ebx
f0125502:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125509:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012550e:	0f b6 c0             	movzbl %al,%eax
f0125511:	c1 e0 04             	shl    $0x4,%eax
f0125514:	89 c2                	mov    %eax,%edx
f0125516:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125519:	01 d0                	add    %edx,%eax
f012551b:	48                   	dec    %eax
f012551c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012551f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125522:	ba 00 00 00 00       	mov    $0x0,%edx
f0125527:	f7 75 8c             	divl   -0x74(%ebp)
f012552a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012552d:	29 d0                	sub    %edx,%eax
f012552f:	01 d8                	add    %ebx,%eax
f0125531:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125536:	39 c1                	cmp    %eax,%ecx
f0125538:	74 17                	je     f0125551 <test_kheap_virt_addr+0x287>
f012553a:	83 ec 04             	sub    $0x4,%esp
f012553d:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0125542:	68 f5 08 00 00       	push   $0x8f5
f0125547:	68 fa b6 13 f0       	push   $0xf013b6fa
f012554c:	e8 b4 ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125551:	e8 72 e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125556:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125559:	74 17                	je     f0125572 <test_kheap_virt_addr+0x2a8>
f012555b:	83 ec 04             	sub    $0x4,%esp
f012555e:	68 14 b7 13 f0       	push   $0xf013b714
f0125563:	68 f6 08 00 00       	push   $0x8f6
f0125568:	68 fa b6 13 f0       	push   $0xf013b6fa
f012556d:	e8 93 ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125572:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125575:	e8 37 7a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012557a:	29 c3                	sub    %eax,%ebx
f012557c:	89 d8                	mov    %ebx,%eax
f012557e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125583:	74 17                	je     f012559c <test_kheap_virt_addr+0x2d2>
f0125585:	83 ec 04             	sub    $0x4,%esp
f0125588:	68 7c b7 13 f0       	push   $0xf013b77c
f012558d:	68 f7 08 00 00       	push   $0x8f7
f0125592:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125597:	e8 69 ac fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012559c:	e8 10 7a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01255a1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01255a4:	e8 1f e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01255a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01255ac:	83 ec 0c             	sub    $0xc,%esp
f01255af:	68 00 08 00 00       	push   $0x800
f01255b4:	e8 d3 25 fe ff       	call   f0107b8c <kmalloc>
f01255b9:	83 c4 10             	add    $0x10,%esp
f01255bc:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255c2:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01255c8:	89 c1                	mov    %eax,%ecx
f01255ca:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01255d1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01255d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01255d9:	89 45 80             	mov    %eax,-0x80(%ebp)
f01255dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01255df:	ba 00 00 00 00       	mov    $0x0,%edx
f01255e4:	f7 75 84             	divl   -0x7c(%ebp)
f01255e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01255ea:	29 d0                	sub    %edx,%eax
f01255ec:	89 c3                	mov    %eax,%ebx
f01255ee:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01255f5:	10 00 00 
f01255f8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01255fd:	0f b6 d0             	movzbl %al,%edx
f0125600:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125606:	01 d0                	add    %edx,%eax
f0125608:	48                   	dec    %eax
f0125609:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012560f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125615:	ba 00 00 00 00       	mov    $0x0,%edx
f012561a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125620:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125626:	29 d0                	sub    %edx,%eax
f0125628:	01 c3                	add    %eax,%ebx
f012562a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125631:	10 00 00 
f0125634:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125639:	0f b6 c0             	movzbl %al,%eax
f012563c:	c1 e0 04             	shl    $0x4,%eax
f012563f:	89 c2                	mov    %eax,%edx
f0125641:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125647:	01 d0                	add    %edx,%eax
f0125649:	48                   	dec    %eax
f012564a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125650:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125656:	ba 00 00 00 00       	mov    $0x0,%edx
f012565b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125661:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125667:	29 d0                	sub    %edx,%eax
f0125669:	01 d8                	add    %ebx,%eax
f012566b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125670:	39 c1                	cmp    %eax,%ecx
f0125672:	74 17                	je     f012568b <test_kheap_virt_addr+0x3c1>
f0125674:	83 ec 04             	sub    $0x4,%esp
f0125677:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012567c:	68 fd 08 00 00       	push   $0x8fd
f0125681:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125686:	e8 7a ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012568b:	e8 38 e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125690:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125693:	74 17                	je     f01256ac <test_kheap_virt_addr+0x3e2>
f0125695:	83 ec 04             	sub    $0x4,%esp
f0125698:	68 14 b7 13 f0       	push   $0xf013b714
f012569d:	68 fe 08 00 00       	push   $0x8fe
f01256a2:	68 fa b6 13 f0       	push   $0xf013b6fa
f01256a7:	e8 59 ab fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01256ac:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01256af:	e8 fd 78 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01256b4:	29 c3                	sub    %eax,%ebx
f01256b6:	89 d8                	mov    %ebx,%eax
f01256b8:	83 f8 01             	cmp    $0x1,%eax
f01256bb:	74 17                	je     f01256d4 <test_kheap_virt_addr+0x40a>
f01256bd:	83 ec 04             	sub    $0x4,%esp
f01256c0:	68 7c b7 13 f0       	push   $0xf013b77c
f01256c5:	68 ff 08 00 00       	push   $0x8ff
f01256ca:	68 fa b6 13 f0       	push   $0xf013b6fa
f01256cf:	e8 31 ab fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01256d4:	e8 d8 78 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01256d9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256dc:	e8 e7 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01256e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01256e4:	83 ec 0c             	sub    $0xc,%esp
f01256e7:	68 00 08 00 00       	push   $0x800
f01256ec:	e8 9b 24 fe ff       	call   f0107b8c <kmalloc>
f01256f1:	83 c4 10             	add    $0x10,%esp
f01256f4:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256fa:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125700:	89 c1                	mov    %eax,%ecx
f0125702:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125709:	10 00 00 
f012570c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125712:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125717:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012571d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125723:	ba 00 00 00 00       	mov    $0x0,%edx
f0125728:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012572e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125734:	29 d0                	sub    %edx,%eax
f0125736:	89 c3                	mov    %eax,%ebx
f0125738:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012573f:	10 00 00 
f0125742:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125747:	0f b6 d0             	movzbl %al,%edx
f012574a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125750:	01 d0                	add    %edx,%eax
f0125752:	48                   	dec    %eax
f0125753:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125759:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012575f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125764:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012576a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125770:	29 d0                	sub    %edx,%eax
f0125772:	01 c3                	add    %eax,%ebx
f0125774:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012577b:	10 00 00 
f012577e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125783:	0f b6 c0             	movzbl %al,%eax
f0125786:	c1 e0 04             	shl    $0x4,%eax
f0125789:	89 c2                	mov    %eax,%edx
f012578b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125791:	01 d0                	add    %edx,%eax
f0125793:	48                   	dec    %eax
f0125794:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012579a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01257a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01257a5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01257ab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01257b1:	29 d0                	sub    %edx,%eax
f01257b3:	01 d8                	add    %ebx,%eax
f01257b5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01257ba:	39 c1                	cmp    %eax,%ecx
f01257bc:	74 17                	je     f01257d5 <test_kheap_virt_addr+0x50b>
f01257be:	83 ec 04             	sub    $0x4,%esp
f01257c1:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01257c6:	68 05 09 00 00       	push   $0x905
f01257cb:	68 fa b6 13 f0       	push   $0xf013b6fa
f01257d0:	e8 30 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257d5:	e8 ee e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01257da:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01257dd:	74 17                	je     f01257f6 <test_kheap_virt_addr+0x52c>
f01257df:	83 ec 04             	sub    $0x4,%esp
f01257e2:	68 14 b7 13 f0       	push   $0xf013b714
f01257e7:	68 06 09 00 00       	push   $0x906
f01257ec:	68 fa b6 13 f0       	push   $0xf013b6fa
f01257f1:	e8 0f aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257f6:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01257f9:	e8 b3 77 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01257fe:	29 c3                	sub    %eax,%ebx
f0125800:	89 d8                	mov    %ebx,%eax
f0125802:	83 f8 01             	cmp    $0x1,%eax
f0125805:	74 17                	je     f012581e <test_kheap_virt_addr+0x554>
f0125807:	83 ec 04             	sub    $0x4,%esp
f012580a:	68 7c b7 13 f0       	push   $0xf013b77c
f012580f:	68 07 09 00 00       	push   $0x907
f0125814:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125819:	e8 e7 a9 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012581e:	e8 8e 77 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125823:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125826:	e8 9d e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012582b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012582e:	83 ec 0c             	sub    $0xc,%esp
f0125831:	68 00 1c 00 00       	push   $0x1c00
f0125836:	e8 51 23 fe ff       	call   f0107b8c <kmalloc>
f012583b:	83 c4 10             	add    $0x10,%esp
f012583e:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125844:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012584a:	89 c1                	mov    %eax,%ecx
f012584c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125853:	10 00 00 
f0125856:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012585c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125861:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125867:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012586d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125872:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125878:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012587e:	29 d0                	sub    %edx,%eax
f0125880:	89 c3                	mov    %eax,%ebx
f0125882:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125889:	10 00 00 
f012588c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125891:	0f b6 d0             	movzbl %al,%edx
f0125894:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012589a:	01 d0                	add    %edx,%eax
f012589c:	48                   	dec    %eax
f012589d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01258a3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01258a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01258ae:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01258b4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01258ba:	29 d0                	sub    %edx,%eax
f01258bc:	01 c3                	add    %eax,%ebx
f01258be:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01258c5:	10 00 00 
f01258c8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01258cd:	0f b6 c0             	movzbl %al,%eax
f01258d0:	c1 e0 04             	shl    $0x4,%eax
f01258d3:	89 c2                	mov    %eax,%edx
f01258d5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01258db:	01 d0                	add    %edx,%eax
f01258dd:	48                   	dec    %eax
f01258de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01258e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01258ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01258ef:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01258f5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01258fb:	29 d0                	sub    %edx,%eax
f01258fd:	01 d8                	add    %ebx,%eax
f01258ff:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125904:	39 c1                	cmp    %eax,%ecx
f0125906:	74 17                	je     f012591f <test_kheap_virt_addr+0x655>
f0125908:	83 ec 04             	sub    $0x4,%esp
f012590b:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0125910:	68 0d 09 00 00       	push   $0x90d
f0125915:	68 fa b6 13 f0       	push   $0xf013b6fa
f012591a:	e8 e6 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012591f:	e8 a4 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125924:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125927:	74 17                	je     f0125940 <test_kheap_virt_addr+0x676>
f0125929:	83 ec 04             	sub    $0x4,%esp
f012592c:	68 14 b7 13 f0       	push   $0xf013b714
f0125931:	68 0e 09 00 00       	push   $0x90e
f0125936:	68 fa b6 13 f0       	push   $0xf013b6fa
f012593b:	e8 c5 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125940:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125943:	e8 69 76 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125948:	29 c3                	sub    %eax,%ebx
f012594a:	89 d8                	mov    %ebx,%eax
f012594c:	83 f8 02             	cmp    $0x2,%eax
f012594f:	74 17                	je     f0125968 <test_kheap_virt_addr+0x69e>
f0125951:	83 ec 04             	sub    $0x4,%esp
f0125954:	68 7c b7 13 f0       	push   $0xf013b77c
f0125959:	68 0f 09 00 00       	push   $0x90f
f012595e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125963:	e8 9d a8 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125968:	e8 44 76 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012596d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125970:	e8 53 e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125975:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125978:	83 ec 0c             	sub    $0xc,%esp
f012597b:	68 00 fc 2f 00       	push   $0x2ffc00
f0125980:	e8 07 22 fe ff       	call   f0107b8c <kmalloc>
f0125985:	83 c4 10             	add    $0x10,%esp
f0125988:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012598e:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125994:	89 c1                	mov    %eax,%ecx
f0125996:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012599d:	10 00 00 
f01259a0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01259a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259ab:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01259b1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01259b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01259bc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01259c2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01259c8:	29 d0                	sub    %edx,%eax
f01259ca:	89 c3                	mov    %eax,%ebx
f01259cc:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01259d3:	10 00 00 
f01259d6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01259db:	0f b6 d0             	movzbl %al,%edx
f01259de:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01259e4:	01 d0                	add    %edx,%eax
f01259e6:	48                   	dec    %eax
f01259e7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01259ed:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01259f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01259f8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01259fe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125a04:	29 d0                	sub    %edx,%eax
f0125a06:	01 c3                	add    %eax,%ebx
f0125a08:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125a0f:	10 00 00 
f0125a12:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125a17:	0f b6 c0             	movzbl %al,%eax
f0125a1a:	c1 e0 04             	shl    $0x4,%eax
f0125a1d:	89 c2                	mov    %eax,%edx
f0125a1f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125a25:	01 d0                	add    %edx,%eax
f0125a27:	48                   	dec    %eax
f0125a28:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125a2e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125a34:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a39:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125a3f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125a45:	29 d0                	sub    %edx,%eax
f0125a47:	01 d8                	add    %ebx,%eax
f0125a49:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125a4e:	39 c1                	cmp    %eax,%ecx
f0125a50:	74 17                	je     f0125a69 <test_kheap_virt_addr+0x79f>
f0125a52:	83 ec 04             	sub    $0x4,%esp
f0125a55:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0125a5a:	68 15 09 00 00       	push   $0x915
f0125a5f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125a64:	e8 9c a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a69:	e8 5a e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125a6e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125a71:	74 17                	je     f0125a8a <test_kheap_virt_addr+0x7c0>
f0125a73:	83 ec 04             	sub    $0x4,%esp
f0125a76:	68 14 b7 13 f0       	push   $0xf013b714
f0125a7b:	68 16 09 00 00       	push   $0x916
f0125a80:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125a85:	e8 7b a7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a8a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125a8d:	e8 1f 75 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125a92:	29 c3                	sub    %eax,%ebx
f0125a94:	89 d8                	mov    %ebx,%eax
f0125a96:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125a9b:	74 17                	je     f0125ab4 <test_kheap_virt_addr+0x7ea>
f0125a9d:	83 ec 04             	sub    $0x4,%esp
f0125aa0:	68 7c b7 13 f0       	push   $0xf013b77c
f0125aa5:	68 17 09 00 00       	push   $0x917
f0125aaa:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125aaf:	e8 51 a7 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125ab4:	e8 f8 74 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125ab9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125abc:	e8 07 e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ac1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125ac4:	83 ec 0c             	sub    $0xc,%esp
f0125ac7:	68 00 fc 5f 00       	push   $0x5ffc00
f0125acc:	e8 bb 20 fe ff       	call   f0107b8c <kmalloc>
f0125ad1:	83 c4 10             	add    $0x10,%esp
f0125ad4:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125ada:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125ae0:	89 c1                	mov    %eax,%ecx
f0125ae2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125ae9:	10 00 00 
f0125aec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125af2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125af7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125afd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125b03:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b08:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125b0e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125b14:	29 d0                	sub    %edx,%eax
f0125b16:	89 c3                	mov    %eax,%ebx
f0125b18:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125b1f:	10 00 00 
f0125b22:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125b27:	0f b6 d0             	movzbl %al,%edx
f0125b2a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125b30:	01 d0                	add    %edx,%eax
f0125b32:	48                   	dec    %eax
f0125b33:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125b39:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125b3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b44:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125b4a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125b50:	29 d0                	sub    %edx,%eax
f0125b52:	01 c3                	add    %eax,%ebx
f0125b54:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125b5b:	10 00 00 
f0125b5e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125b63:	0f b6 c0             	movzbl %al,%eax
f0125b66:	c1 e0 04             	shl    $0x4,%eax
f0125b69:	89 c2                	mov    %eax,%edx
f0125b6b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125b71:	01 d0                	add    %edx,%eax
f0125b73:	48                   	dec    %eax
f0125b74:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125b7a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125b80:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b85:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125b8b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125b91:	29 d0                	sub    %edx,%eax
f0125b93:	01 d8                	add    %ebx,%eax
f0125b95:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125b9a:	39 c1                	cmp    %eax,%ecx
f0125b9c:	74 17                	je     f0125bb5 <test_kheap_virt_addr+0x8eb>
f0125b9e:	83 ec 04             	sub    $0x4,%esp
f0125ba1:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0125ba6:	68 1d 09 00 00       	push   $0x91d
f0125bab:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125bb0:	e8 50 a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125bb5:	e8 0e e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125bba:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125bbd:	74 17                	je     f0125bd6 <test_kheap_virt_addr+0x90c>
f0125bbf:	83 ec 04             	sub    $0x4,%esp
f0125bc2:	68 14 b7 13 f0       	push   $0xf013b714
f0125bc7:	68 1e 09 00 00       	push   $0x91e
f0125bcc:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125bd1:	e8 2f a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125bd6:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125bd9:	e8 d3 73 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125bde:	29 c3                	sub    %eax,%ebx
f0125be0:	89 d8                	mov    %ebx,%eax
f0125be2:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125be7:	74 17                	je     f0125c00 <test_kheap_virt_addr+0x936>
f0125be9:	83 ec 04             	sub    $0x4,%esp
f0125bec:	68 7c b7 13 f0       	push   $0xf013b77c
f0125bf1:	68 1f 09 00 00       	push   $0x91f
f0125bf6:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125bfb:	e8 05 a6 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125c00:	e8 ac 73 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125c05:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c08:	e8 bb e1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125c0d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125c10:	83 ec 0c             	sub    $0xc,%esp
f0125c13:	68 00 38 00 00       	push   $0x3800
f0125c18:	e8 6f 1f fe ff       	call   f0107b8c <kmalloc>
f0125c1d:	83 c4 10             	add    $0x10,%esp
f0125c20:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125c26:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125c2c:	89 c1                	mov    %eax,%ecx
f0125c2e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125c35:	10 00 00 
f0125c38:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125c3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c43:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125c49:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c54:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125c5a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125c60:	29 d0                	sub    %edx,%eax
f0125c62:	89 c3                	mov    %eax,%ebx
f0125c64:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125c6b:	10 00 00 
f0125c6e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125c73:	0f b6 d0             	movzbl %al,%edx
f0125c76:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125c7c:	01 d0                	add    %edx,%eax
f0125c7e:	48                   	dec    %eax
f0125c7f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125c85:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125c8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c90:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125c96:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125c9c:	29 d0                	sub    %edx,%eax
f0125c9e:	01 c3                	add    %eax,%ebx
f0125ca0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125ca7:	10 00 00 
f0125caa:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125caf:	0f b6 c0             	movzbl %al,%eax
f0125cb2:	c1 e0 04             	shl    $0x4,%eax
f0125cb5:	89 c2                	mov    %eax,%edx
f0125cb7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125cbd:	01 d0                	add    %edx,%eax
f0125cbf:	48                   	dec    %eax
f0125cc0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125cc6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125ccc:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cd1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125cd7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125cdd:	29 d0                	sub    %edx,%eax
f0125cdf:	01 d8                	add    %ebx,%eax
f0125ce1:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125ce6:	39 c1                	cmp    %eax,%ecx
f0125ce8:	74 17                	je     f0125d01 <test_kheap_virt_addr+0xa37>
f0125cea:	83 ec 04             	sub    $0x4,%esp
f0125ced:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0125cf2:	68 25 09 00 00       	push   $0x925
f0125cf7:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125cfc:	e8 04 a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d01:	e8 c2 e0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125d06:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125d09:	74 17                	je     f0125d22 <test_kheap_virt_addr+0xa58>
f0125d0b:	83 ec 04             	sub    $0x4,%esp
f0125d0e:	68 14 b7 13 f0       	push   $0xf013b714
f0125d13:	68 26 09 00 00       	push   $0x926
f0125d18:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125d1d:	e8 e3 a4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125d22:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125d25:	e8 87 72 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0125d2a:	29 c3                	sub    %eax,%ebx
f0125d2c:	89 d8                	mov    %ebx,%eax
f0125d2e:	83 f8 04             	cmp    $0x4,%eax
f0125d31:	74 17                	je     f0125d4a <test_kheap_virt_addr+0xa80>
f0125d33:	83 ec 04             	sub    $0x4,%esp
f0125d36:	68 7c b7 13 f0       	push   $0xf013b77c
f0125d3b:	68 27 09 00 00       	push   $0x927
f0125d40:	68 fa b6 13 f0       	push   $0xf013b6fa
f0125d45:	e8 bb a4 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125d4a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125d51:	10 00 00 
f0125d54:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125d5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d5f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125d65:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125d6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d70:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125d76:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125d7c:	29 d0                	sub    %edx,%eax
f0125d7e:	89 c1                	mov    %eax,%ecx
f0125d80:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125d87:	10 00 00 
f0125d8a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125d8f:	0f b6 d0             	movzbl %al,%edx
f0125d92:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125d98:	01 d0                	add    %edx,%eax
f0125d9a:	48                   	dec    %eax
f0125d9b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125da1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125da7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125dac:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125db2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125db8:	29 d0                	sub    %edx,%eax
f0125dba:	01 c1                	add    %eax,%ecx
f0125dbc:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125dc3:	10 00 00 
f0125dc6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125dcb:	0f b6 c0             	movzbl %al,%eax
f0125dce:	c1 e0 04             	shl    $0x4,%eax
f0125dd1:	89 c2                	mov    %eax,%edx
f0125dd3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125dd9:	01 d0                	add    %edx,%eax
f0125ddb:	48                   	dec    %eax
f0125ddc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125de2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125de8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ded:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125df3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125df9:	29 d0                	sub    %edx,%eax
f0125dfb:	01 c1                	add    %eax,%ecx
f0125dfd:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125e04:	10 00 00 
f0125e07:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125e0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e12:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125e18:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125e1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e23:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125e29:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125e2f:	29 d0                	sub    %edx,%eax
f0125e31:	29 c1                	sub    %eax,%ecx
f0125e33:	89 c8                	mov    %ecx,%eax
f0125e35:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125e3a:	c1 e8 0c             	shr    $0xc,%eax
f0125e3d:	89 c2                	mov    %eax,%edx
f0125e3f:	4a                   	dec    %edx
f0125e40:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125e46:	c1 e0 02             	shl    $0x2,%eax
f0125e49:	8d 50 03             	lea    0x3(%eax),%edx
f0125e4c:	b8 10 00 00 00       	mov    $0x10,%eax
f0125e51:	48                   	dec    %eax
f0125e52:	01 d0                	add    %edx,%eax
f0125e54:	bf 10 00 00 00       	mov    $0x10,%edi
f0125e59:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e5e:	f7 f7                	div    %edi
f0125e60:	6b c0 10             	imul   $0x10,%eax,%eax
f0125e63:	29 c4                	sub    %eax,%esp
f0125e65:	89 e0                	mov    %esp,%eax
f0125e67:	83 c0 03             	add    $0x3,%eax
f0125e6a:	c1 e8 02             	shr    $0x2,%eax
f0125e6d:	c1 e0 02             	shl    $0x2,%eax
f0125e70:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125e76:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125e7d:	10 00 00 
f0125e80:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125e86:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e8b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125e91:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125e97:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e9c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125ea2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125ea8:	29 d0                	sub    %edx,%eax
f0125eaa:	89 c1                	mov    %eax,%ecx
f0125eac:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125eb3:	10 00 00 
f0125eb6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125ebb:	0f b6 d0             	movzbl %al,%edx
f0125ebe:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125ec4:	01 d0                	add    %edx,%eax
f0125ec6:	48                   	dec    %eax
f0125ec7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125ecd:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125ed3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ed8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125ede:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125ee4:	29 d0                	sub    %edx,%eax
f0125ee6:	01 c1                	add    %eax,%ecx
f0125ee8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125eef:	10 00 00 
f0125ef2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125ef7:	0f b6 c0             	movzbl %al,%eax
f0125efa:	c1 e0 04             	shl    $0x4,%eax
f0125efd:	89 c2                	mov    %eax,%edx
f0125eff:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125f05:	01 d0                	add    %edx,%eax
f0125f07:	48                   	dec    %eax
f0125f08:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125f0e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125f14:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f19:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125f1f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125f25:	29 d0                	sub    %edx,%eax
f0125f27:	01 c1                	add    %eax,%ecx
f0125f29:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125f30:	10 00 00 
f0125f33:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125f39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f3e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125f44:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125f4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f4f:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125f55:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125f5b:	29 d0                	sub    %edx,%eax
f0125f5d:	29 c1                	sub    %eax,%ecx
f0125f5f:	89 c8                	mov    %ecx,%eax
f0125f61:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125f66:	c1 e8 0c             	shr    $0xc,%eax
f0125f69:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125f6f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125f76:	10 00 00 
f0125f79:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125f7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f84:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125f8a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125f90:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f95:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125f9b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125fa1:	29 d0                	sub    %edx,%eax
f0125fa3:	89 c1                	mov    %eax,%ecx
f0125fa5:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125fac:	10 00 00 
f0125faf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125fb4:	0f b6 d0             	movzbl %al,%edx
f0125fb7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125fbd:	01 d0                	add    %edx,%eax
f0125fbf:	48                   	dec    %eax
f0125fc0:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125fc6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125fcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fd1:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125fd7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125fdd:	29 d0                	sub    %edx,%eax
f0125fdf:	01 c1                	add    %eax,%ecx
f0125fe1:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125fe8:	10 00 00 
f0125feb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0125ff0:	0f b6 c0             	movzbl %al,%eax
f0125ff3:	c1 e0 04             	shl    $0x4,%eax
f0125ff6:	89 c2                	mov    %eax,%edx
f0125ff8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125ffe:	01 d0                	add    %edx,%eax
f0126000:	48                   	dec    %eax
f0126001:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0126007:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012600d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126012:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0126018:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012601e:	29 d0                	sub    %edx,%eax
f0126020:	01 c8                	add    %ecx,%eax
f0126022:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126027:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f012602d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0126034:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f012603b:	10 00 00 
f012603e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126044:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126049:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f012604f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126055:	ba 00 00 00 00       	mov    $0x0,%edx
f012605a:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0126060:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126066:	29 d0                	sub    %edx,%eax
f0126068:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012606d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0126070:	e9 21 01 00 00       	jmp    f0126196 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0126075:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012607a:	83 ec 04             	sub    $0x4,%esp
f012607d:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0126083:	52                   	push   %edx
f0126084:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126087:	50                   	push   %eax
f0126088:	e8 24 0a fe ff       	call   f0106ab1 <get_page_table>
f012608d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126090:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0126096:	85 c0                	test   %eax,%eax
f0126098:	75 17                	jne    f01260b1 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012609a:	83 ec 04             	sub    $0x4,%esp
f012609d:	68 9c c0 13 f0       	push   $0xf013c09c
f01260a2:	68 38 09 00 00       	push   $0x938
f01260a7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01260ac:	e8 54 a1 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01260b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01260b4:	c1 e8 0c             	shr    $0xc,%eax
f01260b7:	25 ff 03 00 00       	and    $0x3ff,%eax
f01260bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01260bf:	e9 ba 00 00 00       	jmp    f012617e <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01260c4:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01260ca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01260cd:	c1 e2 02             	shl    $0x2,%edx
f01260d0:	01 d0                	add    %edx,%eax
f01260d2:	8b 00                	mov    (%eax),%eax
f01260d4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01260d9:	89 c1                	mov    %eax,%ecx
f01260db:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01260e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01260e4:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01260e7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01260ed:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01260f0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01260f3:	83 ec 0c             	sub    $0xc,%esp
f01260f6:	50                   	push   %eax
f01260f7:	e8 82 1c fe ff       	call   f0107d7e <kheap_virtual_address>
f01260fc:	83 c4 10             	add    $0x10,%esp
f01260ff:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0126105:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012610b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012610e:	74 61                	je     f0126171 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126110:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126116:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126119:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012611c:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0126122:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0126125:	c1 e1 02             	shl    $0x2,%ecx
f0126128:	01 ca                	add    %ecx,%edx
f012612a:	8b 12                	mov    (%edx),%edx
f012612c:	89 d1                	mov    %edx,%ecx
f012612e:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0126134:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126137:	c1 e2 0c             	shl    $0xc,%edx
f012613a:	89 d3                	mov    %edx,%ebx
f012613c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012613f:	01 da                	add    %ebx,%edx
f0126141:	83 ec 0c             	sub    $0xc,%esp
f0126144:	50                   	push   %eax
f0126145:	51                   	push   %ecx
f0126146:	52                   	push   %edx
f0126147:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f012614d:	68 90 c1 13 f0       	push   $0xf013c190
f0126152:	e8 b7 ab fd ff       	call   f0100d0e <cprintf>
f0126157:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012615a:	83 ec 04             	sub    $0x4,%esp
f012615d:	68 d3 c1 13 f0       	push   $0xf013c1d3
f0126162:	68 42 09 00 00       	push   $0x942
f0126167:	68 fa b6 13 f0       	push   $0xf013b6fa
f012616c:	e8 94 a0 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0126171:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0126178:	ff 45 dc             	incl   -0x24(%ebp)
f012617b:	ff 45 e0             	incl   -0x20(%ebp)
f012617e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126181:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0126187:	7d 0d                	jge    f0126196 <test_kheap_virt_addr+0xecc>
f0126189:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0126190:	0f 8e 2e ff ff ff    	jle    f01260c4 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0126196:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126199:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f012619f:	0f 82 d0 fe ff ff    	jb     f0126075 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01261a5:	83 ec 0c             	sub    $0xc,%esp
f01261a8:	68 f0 c1 13 f0       	push   $0xf013c1f0
f01261ad:	e8 5c ab fd ff       	call   f0100d0e <cprintf>
f01261b2:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01261b5:	e8 f7 6d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01261ba:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01261c0:	e8 03 dc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01261c5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f01261cb:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01261d1:	83 ec 0c             	sub    $0xc,%esp
f01261d4:	50                   	push   %eax
f01261d5:	e8 7d 1a fe ff       	call   f0107c57 <kfree>
f01261da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261dd:	e8 e6 db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01261e2:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01261e8:	74 17                	je     f0126201 <test_kheap_virt_addr+0xf37>
f01261ea:	83 ec 04             	sub    $0x4,%esp
f01261ed:	68 14 b7 13 f0       	push   $0xf013b714
f01261f2:	68 50 09 00 00       	push   $0x950
f01261f7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01261fc:	e8 04 a0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126201:	e8 ab 6d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126206:	89 c2                	mov    %eax,%edx
f0126208:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012620e:	29 c2                	sub    %eax,%edx
f0126210:	89 d0                	mov    %edx,%eax
f0126212:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126217:	74 17                	je     f0126230 <test_kheap_virt_addr+0xf66>
f0126219:	83 ec 04             	sub    $0x4,%esp
f012621c:	68 84 be 13 f0       	push   $0xf013be84
f0126221:	68 51 09 00 00       	push   $0x951
f0126226:	68 fa b6 13 f0       	push   $0xf013b6fa
f012622b:	e8 d5 9f fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126230:	e8 7c 6d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126235:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012623b:	e8 88 db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126240:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0126246:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012624c:	83 ec 0c             	sub    $0xc,%esp
f012624f:	50                   	push   %eax
f0126250:	e8 02 1a fe ff       	call   f0107c57 <kfree>
f0126255:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126258:	e8 6b db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012625d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126263:	74 17                	je     f012627c <test_kheap_virt_addr+0xfb2>
f0126265:	83 ec 04             	sub    $0x4,%esp
f0126268:	68 14 b7 13 f0       	push   $0xf013b714
f012626d:	68 57 09 00 00       	push   $0x957
f0126272:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126277:	e8 89 9f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012627c:	e8 30 6d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126281:	89 c2                	mov    %eax,%edx
f0126283:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126289:	29 c2                	sub    %eax,%edx
f012628b:	89 d0                	mov    %edx,%eax
f012628d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126292:	74 17                	je     f01262ab <test_kheap_virt_addr+0xfe1>
f0126294:	83 ec 04             	sub    $0x4,%esp
f0126297:	68 84 be 13 f0       	push   $0xf013be84
f012629c:	68 58 09 00 00       	push   $0x958
f01262a1:	68 fa b6 13 f0       	push   $0xf013b6fa
f01262a6:	e8 5a 9f fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01262ab:	e8 01 6d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01262b0:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262b6:	e8 0d db fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01262bb:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f01262c1:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01262c7:	83 ec 0c             	sub    $0xc,%esp
f01262ca:	50                   	push   %eax
f01262cb:	e8 87 19 fe ff       	call   f0107c57 <kfree>
f01262d0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262d3:	e8 f0 da fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01262d8:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01262de:	74 17                	je     f01262f7 <test_kheap_virt_addr+0x102d>
f01262e0:	83 ec 04             	sub    $0x4,%esp
f01262e3:	68 14 b7 13 f0       	push   $0xf013b714
f01262e8:	68 5e 09 00 00       	push   $0x95e
f01262ed:	68 fa b6 13 f0       	push   $0xf013b6fa
f01262f2:	e8 0e 9f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01262f7:	e8 b5 6c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01262fc:	89 c2                	mov    %eax,%edx
f01262fe:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126304:	29 c2                	sub    %eax,%edx
f0126306:	89 d0                	mov    %edx,%eax
f0126308:	3d 00 06 00 00       	cmp    $0x600,%eax
f012630d:	74 17                	je     f0126326 <test_kheap_virt_addr+0x105c>
f012630f:	83 ec 04             	sub    $0x4,%esp
f0126312:	68 84 be 13 f0       	push   $0xf013be84
f0126317:	68 5f 09 00 00       	push   $0x95f
f012631c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126321:	e8 df 9e fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126326:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012632d:	10 00 00 
f0126330:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126336:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012633b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126341:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126347:	ba 00 00 00 00       	mov    $0x0,%edx
f012634c:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0126352:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126358:	29 d0                	sub    %edx,%eax
f012635a:	89 c1                	mov    %eax,%ecx
f012635c:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0126363:	10 00 00 
f0126366:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012636b:	0f b6 d0             	movzbl %al,%edx
f012636e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126374:	01 d0                	add    %edx,%eax
f0126376:	48                   	dec    %eax
f0126377:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012637d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126383:	ba 00 00 00 00       	mov    $0x0,%edx
f0126388:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012638e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126394:	29 d0                	sub    %edx,%eax
f0126396:	01 c1                	add    %eax,%ecx
f0126398:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012639f:	10 00 00 
f01263a2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01263a7:	0f b6 c0             	movzbl %al,%eax
f01263aa:	c1 e0 04             	shl    $0x4,%eax
f01263ad:	89 c2                	mov    %eax,%edx
f01263af:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01263b5:	01 d0                	add    %edx,%eax
f01263b7:	48                   	dec    %eax
f01263b8:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01263be:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01263c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01263c9:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01263cf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01263d5:	29 d0                	sub    %edx,%eax
f01263d7:	01 c8                	add    %ecx,%eax
f01263d9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01263de:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f01263e4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01263eb:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01263f2:	10 00 00 
f01263f5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01263fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126400:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0126406:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012640c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126411:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0126417:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012641d:	29 d0                	sub    %edx,%eax
f012641f:	89 c1                	mov    %eax,%ecx
f0126421:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0126428:	10 00 00 
f012642b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126430:	0f b6 d0             	movzbl %al,%edx
f0126433:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126439:	01 d0                	add    %edx,%eax
f012643b:	48                   	dec    %eax
f012643c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0126442:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126448:	ba 00 00 00 00       	mov    $0x0,%edx
f012644d:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0126453:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126459:	29 d0                	sub    %edx,%eax
f012645b:	01 c1                	add    %eax,%ecx
f012645d:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0126464:	10 00 00 
f0126467:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012646c:	0f b6 c0             	movzbl %al,%eax
f012646f:	c1 e0 04             	shl    $0x4,%eax
f0126472:	89 c2                	mov    %eax,%edx
f0126474:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012647a:	01 d0                	add    %edx,%eax
f012647c:	48                   	dec    %eax
f012647d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0126483:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126489:	ba 00 00 00 00       	mov    $0x0,%edx
f012648e:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0126494:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012649a:	29 d0                	sub    %edx,%eax
f012649c:	01 c1                	add    %eax,%ecx
f012649e:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01264a5:	10 00 00 
f01264a8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01264ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264b3:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01264b9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01264bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01264c4:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01264ca:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01264d0:	29 d0                	sub    %edx,%eax
f01264d2:	29 c1                	sub    %eax,%ecx
f01264d4:	89 c8                	mov    %ecx,%eax
f01264d6:	05 00 40 00 00       	add    $0x4000,%eax
f01264db:	c1 e8 0c             	shr    $0xc,%eax
f01264de:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01264e4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01264ed:	eb 41                	jmp    f0126530 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01264ef:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01264f5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01264f8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01264fb:	83 ec 0c             	sub    $0xc,%esp
f01264fe:	50                   	push   %eax
f01264ff:	e8 7a 18 fe ff       	call   f0107d7e <kheap_virtual_address>
f0126504:	83 c4 10             	add    $0x10,%esp
f0126507:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f012650d:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0126514:	74 17                	je     f012652d <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0126516:	83 ec 04             	sub    $0x4,%esp
f0126519:	68 d3 c1 13 f0       	push   $0xf013c1d3
f012651e:	68 70 09 00 00       	push   $0x970
f0126523:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126528:	e8 d8 9c fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012652d:	ff 45 d8             	incl   -0x28(%ebp)
f0126530:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126536:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f012653c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012653f:	39 c2                	cmp    %eax,%edx
f0126541:	77 ac                	ja     f01264ef <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126543:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126549:	05 00 04 00 00       	add    $0x400,%eax
f012654e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126551:	e9 83 00 00 00       	jmp    f01265d9 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126556:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012655c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012655f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126562:	83 ec 0c             	sub    $0xc,%esp
f0126565:	50                   	push   %eax
f0126566:	e8 13 18 fe ff       	call   f0107d7e <kheap_virtual_address>
f012656b:	83 c4 10             	add    $0x10,%esp
f012656e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126574:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012657b:	10 00 00 
f012657e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0126584:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126589:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012658f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126595:	ba 00 00 00 00       	mov    $0x0,%edx
f012659a:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01265a0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01265a6:	29 d0                	sub    %edx,%eax
f01265a8:	89 c2                	mov    %eax,%edx
f01265aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265ad:	c1 e0 0c             	shl    $0xc,%eax
f01265b0:	01 d0                	add    %edx,%eax
f01265b2:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01265b7:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01265bd:	74 17                	je     f01265d6 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01265bf:	83 ec 04             	sub    $0x4,%esp
f01265c2:	68 d3 c1 13 f0       	push   $0xf013c1d3
f01265c7:	68 7a 09 00 00       	push   $0x97a
f01265cc:	68 fa b6 13 f0       	push   $0xf013b6fa
f01265d1:	e8 2f 9c fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01265d6:	ff 45 d8             	incl   -0x28(%ebp)
f01265d9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01265df:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01265e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01265e8:	39 c2                	cmp    %eax,%edx
f01265ea:	0f 87 66 ff ff ff    	ja     f0126556 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01265f0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01265f6:	05 04 07 00 00       	add    $0x704,%eax
f01265fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01265fe:	eb 41                	jmp    f0126641 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126600:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126606:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126609:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012660c:	83 ec 0c             	sub    $0xc,%esp
f012660f:	50                   	push   %eax
f0126610:	e8 69 17 fe ff       	call   f0107d7e <kheap_virtual_address>
f0126615:	83 c4 10             	add    $0x10,%esp
f0126618:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f012661e:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126625:	74 17                	je     f012663e <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0126627:	83 ec 04             	sub    $0x4,%esp
f012662a:	68 d3 c1 13 f0       	push   $0xf013c1d3
f012662f:	68 83 09 00 00       	push   $0x983
f0126634:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126639:	e8 c7 9b fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012663e:	ff 45 d8             	incl   -0x28(%ebp)
f0126641:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126647:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f012664d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126650:	39 c2                	cmp    %eax,%edx
f0126652:	77 ac                	ja     f0126600 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126654:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012665a:	05 04 0d 00 00       	add    $0xd04,%eax
f012665f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126662:	e9 83 00 00 00       	jmp    f01266ea <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126667:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012666d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126670:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126673:	83 ec 0c             	sub    $0xc,%esp
f0126676:	50                   	push   %eax
f0126677:	e8 02 17 fe ff       	call   f0107d7e <kheap_virtual_address>
f012667c:	83 c4 10             	add    $0x10,%esp
f012667f:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126685:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f012668c:	10 00 00 
f012668f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0126695:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012669a:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01266a0:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01266a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01266ab:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01266b1:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01266b7:	29 d0                	sub    %edx,%eax
f01266b9:	89 c2                	mov    %eax,%edx
f01266bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01266be:	c1 e0 0c             	shl    $0xc,%eax
f01266c1:	01 d0                	add    %edx,%eax
f01266c3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01266c8:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01266ce:	74 17                	je     f01266e7 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01266d0:	83 ec 04             	sub    $0x4,%esp
f01266d3:	68 d3 c1 13 f0       	push   $0xf013c1d3
f01266d8:	68 8c 09 00 00       	push   $0x98c
f01266dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01266e2:	e8 1e 9b fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01266e7:	ff 45 d8             	incl   -0x28(%ebp)
f01266ea:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01266f0:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01266f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01266f9:	39 c2                	cmp    %eax,%edx
f01266fb:	0f 87 66 ff ff ff    	ja     f0126667 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126701:	83 ec 0c             	sub    $0xc,%esp
f0126704:	68 85 b8 13 f0       	push   $0xf013b885
f0126709:	e8 00 a6 fd ff       	call   f0100d0e <cprintf>
f012670e:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126711:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126718:	eb 54                	jmp    f012676e <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f012671a:	83 ec 0c             	sub    $0xc,%esp
f012671d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126720:	e8 59 16 fe ff       	call   f0107d7e <kheap_virtual_address>
f0126725:	83 c4 10             	add    $0x10,%esp
f0126728:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f012672e:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126735:	74 30                	je     f0126767 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126737:	83 ec 04             	sub    $0x4,%esp
f012673a:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126740:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126743:	68 21 c2 13 f0       	push   $0xf013c221
f0126748:	e8 c1 a5 fd ff       	call   f0100d0e <cprintf>
f012674d:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126750:	83 ec 04             	sub    $0x4,%esp
f0126753:	68 d3 c1 13 f0       	push   $0xf013c1d3
f0126758:	68 9c 09 00 00       	push   $0x99c
f012675d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126762:	e8 9e 9a fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126767:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f012676e:	b8 bc ae 89 00       	mov    $0x89aebc,%eax
f0126773:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126776:	72 a2                	jb     f012671a <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126778:	83 ec 0c             	sub    $0xc,%esp
f012677b:	68 de b8 13 f0       	push   $0xf013b8de
f0126780:	e8 89 a5 fd ff       	call   f0100d0e <cprintf>
f0126785:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126788:	83 ec 0c             	sub    $0xc,%esp
f012678b:	68 40 c2 13 f0       	push   $0xf013c240
f0126790:	e8 79 a5 fd ff       	call   f0100d0e <cprintf>
f0126795:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126798:	b8 01 00 00 00       	mov    $0x1,%eax
f012679d:	89 f4                	mov    %esi,%esp

}
f012679f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01267a2:	5b                   	pop    %ebx
f01267a3:	5e                   	pop    %esi
f01267a4:	5f                   	pop    %edi
f01267a5:	5d                   	pop    %ebp
f01267a6:	c3                   	ret    

f01267a7 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f01267a7:	55                   	push   %ebp
f01267a8:	89 e5                	mov    %esp,%ebp
f01267aa:	57                   	push   %edi
f01267ab:	56                   	push   %esi
f01267ac:	53                   	push   %ebx
f01267ad:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f01267b3:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f01267b8:	84 c0                	test   %al,%al
f01267ba:	74 56                	je     f0126812 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f01267bc:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f01267c3:	e8 e9 67 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01267c8:	a3 b8 ae 89 f0       	mov    %eax,0xf089aeb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01267cd:	e8 f6 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01267d2:	a3 b4 ae 89 f0       	mov    %eax,0xf089aeb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01267d7:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01267dd:	bb 9d c3 13 f0       	mov    $0xf013c39d,%ebx
f01267e2:	ba 11 00 00 00       	mov    $0x11,%edx
f01267e7:	89 c7                	mov    %eax,%edi
f01267e9:	89 de                	mov    %ebx,%esi
f01267eb:	89 d1                	mov    %edx,%ecx
f01267ed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01267ef:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01267f5:	b9 53 00 00 00       	mov    $0x53,%ecx
f01267fa:	b0 00                	mov    $0x0,%al
f01267fc:	89 d7                	mov    %edx,%edi
f01267fe:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126800:	83 ec 0c             	sub    $0xc,%esp
f0126803:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126809:	50                   	push   %eax
f012680a:	e8 61 a5 fd ff       	call   f0100d70 <execute_command>
f012680f:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126812:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126819:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126820:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f0126825:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126828:	eb 2d                	jmp    f0126857 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f012682a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012682d:	05 5c 05 00 00       	add    $0x55c,%eax
f0126832:	83 ec 08             	sub    $0x8,%esp
f0126835:	68 87 c2 13 f0       	push   $0xf013c287
f012683a:	50                   	push   %eax
f012683b:	e8 79 af 00 00       	call   f01317b9 <strcmp>
f0126840:	83 c4 10             	add    $0x10,%esp
f0126843:	85 c0                	test   %eax,%eax
f0126845:	75 08                	jne    f012684f <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126847:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012684a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f012684d:	eb 2f                	jmp    f012687e <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012684f:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0126854:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126857:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012685b:	74 08                	je     f0126865 <test_three_creation_functions+0xbe>
f012685d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126860:	8b 40 44             	mov    0x44(%eax),%eax
f0126863:	eb 05                	jmp    f012686a <test_three_creation_functions+0xc3>
f0126865:	b8 00 00 00 00       	mov    $0x0,%eax
f012686a:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f012686f:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f0126874:	85 c0                	test   %eax,%eax
f0126876:	75 b2                	jne    f012682a <test_three_creation_functions+0x83>
f0126878:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012687c:	75 ac                	jne    f012682a <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012687e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126881:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126887:	85 c0                	test   %eax,%eax
f0126889:	74 17                	je     f01268a2 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f012688b:	83 ec 04             	sub    $0x4,%esp
f012688e:	68 90 c2 13 f0       	push   $0xf013c290
f0126893:	68 c6 09 00 00       	push   $0x9c6
f0126898:	68 fa b6 13 f0       	push   $0xf013b6fa
f012689d:	e8 63 99 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01268a2:	83 ec 0c             	sub    $0xc,%esp
f01268a5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01268a8:	e8 70 18 fe ff       	call   f010811d <env_page_ws_get_size>
f01268ad:	83 c4 10             	add    $0x10,%esp
f01268b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f01268b3:	e8 f9 66 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01268b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f01268bb:	e8 08 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01268c0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268c3:	a1 b4 ae 89 f0       	mov    0xf089aeb4,%eax
f01268c8:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01268cb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01268ce:	74 17                	je     f01268e7 <test_three_creation_functions+0x140>
f01268d0:	83 ec 04             	sub    $0x4,%esp
f01268d3:	68 14 b7 13 f0       	push   $0xf013b714
f01268d8:	68 cc 09 00 00       	push   $0x9cc
f01268dd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01268e2:	e8 1e 99 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268e7:	a1 b8 ae 89 f0       	mov    0xf089aeb8,%eax
f01268ec:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01268ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01268f2:	83 c2 15             	add    $0x15,%edx
f01268f5:	39 d0                	cmp    %edx,%eax
f01268f7:	74 17                	je     f0126910 <test_three_creation_functions+0x169>
f01268f9:	83 ec 04             	sub    $0x4,%esp
f01268fc:	68 7c b7 13 f0       	push   $0xf013b77c
f0126901:	68 ce 09 00 00       	push   $0x9ce
f0126906:	68 fa b6 13 f0       	push   $0xf013b6fa
f012690b:	e8 f5 98 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126910:	83 ec 0c             	sub    $0xc,%esp
f0126913:	68 00 10 00 00       	push   $0x1000
f0126918:	e8 6f 12 fe ff       	call   f0107b8c <kmalloc>
f012691d:	83 c4 10             	add    $0x10,%esp
f0126920:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126923:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012692a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012692d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126932:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126935:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126938:	ba 00 00 00 00       	mov    $0x0,%edx
f012693d:	f7 75 cc             	divl   -0x34(%ebp)
f0126940:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126943:	29 d0                	sub    %edx,%eax
f0126945:	89 c1                	mov    %eax,%ecx
f0126947:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012694e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126953:	0f b6 d0             	movzbl %al,%edx
f0126956:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126959:	01 d0                	add    %edx,%eax
f012695b:	48                   	dec    %eax
f012695c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012695f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126962:	ba 00 00 00 00       	mov    $0x0,%edx
f0126967:	f7 75 c4             	divl   -0x3c(%ebp)
f012696a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012696d:	29 d0                	sub    %edx,%eax
f012696f:	01 c1                	add    %eax,%ecx
f0126971:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126978:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012697d:	0f b6 c0             	movzbl %al,%eax
f0126980:	c1 e0 04             	shl    $0x4,%eax
f0126983:	89 c2                	mov    %eax,%edx
f0126985:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126988:	01 d0                	add    %edx,%eax
f012698a:	48                   	dec    %eax
f012698b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012698e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126991:	ba 00 00 00 00       	mov    $0x0,%edx
f0126996:	f7 75 bc             	divl   -0x44(%ebp)
f0126999:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012699c:	29 d0                	sub    %edx,%eax
f012699e:	01 c8                	add    %ecx,%eax
f01269a0:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01269a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01269a9:	39 c2                	cmp    %eax,%edx
f01269ab:	74 17                	je     f01269c4 <test_three_creation_functions+0x21d>
f01269ad:	83 ec 04             	sub    $0x4,%esp
f01269b0:	68 e0 c2 13 f0       	push   $0xf013c2e0
f01269b5:	68 d2 09 00 00       	push   $0x9d2
f01269ba:	68 fa b6 13 f0       	push   $0xf013b6fa
f01269bf:	e8 41 98 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01269c4:	83 ec 0c             	sub    $0xc,%esp
f01269c7:	68 50 c3 13 f0       	push   $0xf013c350
f01269cc:	e8 3d a3 fd ff       	call   f0100d0e <cprintf>
f01269d1:	83 c4 10             	add    $0x10,%esp

	return 1;
f01269d4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01269d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01269dc:	5b                   	pop    %ebx
f01269dd:	5e                   	pop    %esi
f01269de:	5f                   	pop    %edi
f01269df:	5d                   	pop    %ebp
f01269e0:	c3                   	ret    

f01269e1 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01269e1:	55                   	push   %ebp
f01269e2:	89 e5                	mov    %esp,%ebp
f01269e4:	57                   	push   %edi
f01269e5:	53                   	push   %ebx
f01269e6:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01269ec:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01269f0:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01269f4:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01269fa:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126a00:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126a07:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126a0e:	e8 9e 65 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126a13:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126a16:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126a1c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126a21:	b8 00 00 00 00       	mov    $0x0,%eax
f0126a26:	89 d7                	mov    %edx,%edi
f0126a28:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126a2a:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126a30:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126a35:	b8 00 00 00 00       	mov    $0x0,%eax
f0126a3a:	89 d7                	mov    %edx,%edi
f0126a3c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126a3e:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126a44:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126a49:	b8 00 00 00 00       	mov    $0x0,%eax
f0126a4e:	89 d7                	mov    %edx,%edi
f0126a50:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a52:	e8 5a 65 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126a57:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a5a:	e8 69 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a5f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126a62:	83 ec 0c             	sub    $0xc,%esp
f0126a65:	68 00 fc 1f 00       	push   $0x1ffc00
f0126a6a:	e8 1d 11 fe ff       	call   f0107b8c <kmalloc>
f0126a6f:	83 c4 10             	add    $0x10,%esp
f0126a72:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a78:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126a7e:	89 c1                	mov    %eax,%ecx
f0126a80:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126a87:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126a8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126a8f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126a92:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126a95:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a9a:	f7 75 c8             	divl   -0x38(%ebp)
f0126a9d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126aa0:	29 d0                	sub    %edx,%eax
f0126aa2:	89 c3                	mov    %eax,%ebx
f0126aa4:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126aab:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126ab0:	0f b6 d0             	movzbl %al,%edx
f0126ab3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126ab6:	01 d0                	add    %edx,%eax
f0126ab8:	48                   	dec    %eax
f0126ab9:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126abc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ac4:	f7 75 c0             	divl   -0x40(%ebp)
f0126ac7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126aca:	29 d0                	sub    %edx,%eax
f0126acc:	01 c3                	add    %eax,%ebx
f0126ace:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126ad5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126ada:	0f b6 c0             	movzbl %al,%eax
f0126add:	c1 e0 04             	shl    $0x4,%eax
f0126ae0:	89 c2                	mov    %eax,%edx
f0126ae2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126ae5:	01 d0                	add    %edx,%eax
f0126ae7:	48                   	dec    %eax
f0126ae8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126aeb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126aee:	ba 00 00 00 00       	mov    $0x0,%edx
f0126af3:	f7 75 b8             	divl   -0x48(%ebp)
f0126af6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126af9:	29 d0                	sub    %edx,%eax
f0126afb:	01 d8                	add    %ebx,%eax
f0126afd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126b02:	39 c1                	cmp    %eax,%ecx
f0126b04:	74 17                	je     f0126b1d <test_kfreeall+0x13c>
f0126b06:	83 ec 04             	sub    $0x4,%esp
f0126b09:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0126b0e:	68 f9 09 00 00       	push   $0x9f9
f0126b13:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126b18:	e8 e8 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b1d:	e8 a6 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b22:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b25:	74 17                	je     f0126b3e <test_kfreeall+0x15d>
f0126b27:	83 ec 04             	sub    $0x4,%esp
f0126b2a:	68 14 b7 13 f0       	push   $0xf013b714
f0126b2f:	68 fa 09 00 00       	push   $0x9fa
f0126b34:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126b39:	e8 c7 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b3e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126b41:	e8 6b 64 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126b46:	29 c3                	sub    %eax,%ebx
f0126b48:	89 d8                	mov    %ebx,%eax
f0126b4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b4f:	74 17                	je     f0126b68 <test_kfreeall+0x187>
f0126b51:	83 ec 04             	sub    $0x4,%esp
f0126b54:	68 7c b7 13 f0       	push   $0xf013b77c
f0126b59:	68 fb 09 00 00       	push   $0x9fb
f0126b5e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126b63:	e8 9d 96 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126b68:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126b6f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b72:	e8 3a 64 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126b77:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b7a:	e8 49 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b7f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126b82:	83 ec 0c             	sub    $0xc,%esp
f0126b85:	68 00 fc 1f 00       	push   $0x1ffc00
f0126b8a:	e8 fd 0f fe ff       	call   f0107b8c <kmalloc>
f0126b8f:	83 c4 10             	add    $0x10,%esp
f0126b92:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b98:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126b9e:	89 c1                	mov    %eax,%ecx
f0126ba0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126ba7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126baa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126baf:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126bb2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126bb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bba:	f7 75 b0             	divl   -0x50(%ebp)
f0126bbd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126bc0:	29 d0                	sub    %edx,%eax
f0126bc2:	89 c3                	mov    %eax,%ebx
f0126bc4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126bcb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126bd0:	0f b6 d0             	movzbl %al,%edx
f0126bd3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126bd6:	01 d0                	add    %edx,%eax
f0126bd8:	48                   	dec    %eax
f0126bd9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126bdc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126bdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0126be4:	f7 75 a8             	divl   -0x58(%ebp)
f0126be7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126bea:	29 d0                	sub    %edx,%eax
f0126bec:	01 c3                	add    %eax,%ebx
f0126bee:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126bf5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126bfa:	0f b6 c0             	movzbl %al,%eax
f0126bfd:	c1 e0 04             	shl    $0x4,%eax
f0126c00:	89 c2                	mov    %eax,%edx
f0126c02:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126c05:	01 d0                	add    %edx,%eax
f0126c07:	48                   	dec    %eax
f0126c08:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126c0b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126c0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c13:	f7 75 a0             	divl   -0x60(%ebp)
f0126c16:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126c19:	29 d0                	sub    %edx,%eax
f0126c1b:	01 d8                	add    %ebx,%eax
f0126c1d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126c22:	39 c1                	cmp    %eax,%ecx
f0126c24:	74 17                	je     f0126c3d <test_kfreeall+0x25c>
f0126c26:	83 ec 04             	sub    $0x4,%esp
f0126c29:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0126c2e:	68 02 0a 00 00       	push   $0xa02
f0126c33:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126c38:	e8 c8 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c3d:	e8 86 d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c42:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126c45:	74 17                	je     f0126c5e <test_kfreeall+0x27d>
f0126c47:	83 ec 04             	sub    $0x4,%esp
f0126c4a:	68 14 b7 13 f0       	push   $0xf013b714
f0126c4f:	68 03 0a 00 00       	push   $0xa03
f0126c54:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126c59:	e8 a7 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c5e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126c61:	e8 4b 63 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126c66:	29 c3                	sub    %eax,%ebx
f0126c68:	89 d8                	mov    %ebx,%eax
f0126c6a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126c6f:	74 17                	je     f0126c88 <test_kfreeall+0x2a7>
f0126c71:	83 ec 04             	sub    $0x4,%esp
f0126c74:	68 7c b7 13 f0       	push   $0xf013b77c
f0126c79:	68 04 0a 00 00       	push   $0xa04
f0126c7e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126c83:	e8 7d 95 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126c88:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126c8f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126c92:	e8 1a 63 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126c97:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c9a:	e8 29 d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126c9f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126ca2:	83 ec 0c             	sub    $0xc,%esp
f0126ca5:	68 00 08 00 00       	push   $0x800
f0126caa:	e8 dd 0e fe ff       	call   f0107b8c <kmalloc>
f0126caf:	83 c4 10             	add    $0x10,%esp
f0126cb2:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126cb8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126cbe:	89 c1                	mov    %eax,%ecx
f0126cc0:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126cc7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126cca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ccf:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126cd2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126cd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cda:	f7 75 98             	divl   -0x68(%ebp)
f0126cdd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ce0:	29 d0                	sub    %edx,%eax
f0126ce2:	89 c3                	mov    %eax,%ebx
f0126ce4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126ceb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126cf0:	0f b6 d0             	movzbl %al,%edx
f0126cf3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126cf6:	01 d0                	add    %edx,%eax
f0126cf8:	48                   	dec    %eax
f0126cf9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126cfc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126cff:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d04:	f7 75 90             	divl   -0x70(%ebp)
f0126d07:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126d0a:	29 d0                	sub    %edx,%eax
f0126d0c:	01 c3                	add    %eax,%ebx
f0126d0e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126d15:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126d1a:	0f b6 c0             	movzbl %al,%eax
f0126d1d:	c1 e0 04             	shl    $0x4,%eax
f0126d20:	89 c2                	mov    %eax,%edx
f0126d22:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126d25:	01 d0                	add    %edx,%eax
f0126d27:	48                   	dec    %eax
f0126d28:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126d2b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126d2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d33:	f7 75 88             	divl   -0x78(%ebp)
f0126d36:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126d39:	29 d0                	sub    %edx,%eax
f0126d3b:	01 d8                	add    %ebx,%eax
f0126d3d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126d42:	39 c1                	cmp    %eax,%ecx
f0126d44:	74 17                	je     f0126d5d <test_kfreeall+0x37c>
f0126d46:	83 ec 04             	sub    $0x4,%esp
f0126d49:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0126d4e:	68 0b 0a 00 00       	push   $0xa0b
f0126d53:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126d58:	e8 a8 94 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d5d:	e8 66 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126d62:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126d65:	74 17                	je     f0126d7e <test_kfreeall+0x39d>
f0126d67:	83 ec 04             	sub    $0x4,%esp
f0126d6a:	68 14 b7 13 f0       	push   $0xf013b714
f0126d6f:	68 0c 0a 00 00       	push   $0xa0c
f0126d74:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126d79:	e8 87 94 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d7e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126d81:	e8 2b 62 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126d86:	29 c3                	sub    %eax,%ebx
f0126d88:	89 d8                	mov    %ebx,%eax
f0126d8a:	83 f8 01             	cmp    $0x1,%eax
f0126d8d:	74 17                	je     f0126da6 <test_kfreeall+0x3c5>
f0126d8f:	83 ec 04             	sub    $0x4,%esp
f0126d92:	68 7c b7 13 f0       	push   $0xf013b77c
f0126d97:	68 0d 0a 00 00       	push   $0xa0d
f0126d9c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126da1:	e8 5f 94 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126da6:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126dad:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126db0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126db6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126db9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126dc0:	eb 0e                	jmp    f0126dd0 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126dc2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126dc5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126dc8:	01 d0                	add    %edx,%eax
f0126dca:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126dcd:	ff 45 f4             	incl   -0xc(%ebp)
f0126dd0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126dd6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126dd9:	7f e7                	jg     f0126dc2 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126ddb:	e8 d1 61 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126de0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126de3:	e8 e0 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126de8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126deb:	83 ec 0c             	sub    $0xc,%esp
f0126dee:	68 00 08 00 00       	push   $0x800
f0126df3:	e8 94 0d fe ff       	call   f0107b8c <kmalloc>
f0126df8:	83 c4 10             	add    $0x10,%esp
f0126dfb:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e01:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126e07:	89 c1                	mov    %eax,%ecx
f0126e09:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126e10:	10 00 00 
f0126e13:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126e19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e1e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126e24:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126e2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e2f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126e35:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126e3b:	29 d0                	sub    %edx,%eax
f0126e3d:	89 c3                	mov    %eax,%ebx
f0126e3f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126e46:	10 00 00 
f0126e49:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126e4e:	0f b6 d0             	movzbl %al,%edx
f0126e51:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126e57:	01 d0                	add    %edx,%eax
f0126e59:	48                   	dec    %eax
f0126e5a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126e60:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126e66:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e6b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126e71:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126e77:	29 d0                	sub    %edx,%eax
f0126e79:	01 c3                	add    %eax,%ebx
f0126e7b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126e82:	10 00 00 
f0126e85:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126e8a:	0f b6 c0             	movzbl %al,%eax
f0126e8d:	c1 e0 04             	shl    $0x4,%eax
f0126e90:	89 c2                	mov    %eax,%edx
f0126e92:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126e98:	01 d0                	add    %edx,%eax
f0126e9a:	48                   	dec    %eax
f0126e9b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126ea1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eac:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126eb2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126eb8:	29 d0                	sub    %edx,%eax
f0126eba:	01 d8                	add    %ebx,%eax
f0126ebc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126ec1:	39 c1                	cmp    %eax,%ecx
f0126ec3:	74 17                	je     f0126edc <test_kfreeall+0x4fb>
f0126ec5:	83 ec 04             	sub    $0x4,%esp
f0126ec8:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0126ecd:	68 19 0a 00 00       	push   $0xa19
f0126ed2:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126ed7:	e8 29 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126edc:	e8 e7 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ee1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ee4:	74 17                	je     f0126efd <test_kfreeall+0x51c>
f0126ee6:	83 ec 04             	sub    $0x4,%esp
f0126ee9:	68 14 b7 13 f0       	push   $0xf013b714
f0126eee:	68 1a 0a 00 00       	push   $0xa1a
f0126ef3:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126ef8:	e8 08 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126efd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f00:	e8 ac 60 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126f05:	29 c3                	sub    %eax,%ebx
f0126f07:	89 d8                	mov    %ebx,%eax
f0126f09:	83 f8 01             	cmp    $0x1,%eax
f0126f0c:	74 17                	je     f0126f25 <test_kfreeall+0x544>
f0126f0e:	83 ec 04             	sub    $0x4,%esp
f0126f11:	68 7c b7 13 f0       	push   $0xf013b77c
f0126f16:	68 1b 0a 00 00       	push   $0xa1b
f0126f1b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0126f20:	e8 e0 92 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126f25:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126f2c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126f2f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126f35:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126f38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f3f:	eb 0e                	jmp    f0126f4f <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126f41:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126f44:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f47:	01 d0                	add    %edx,%eax
f0126f49:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126f4c:	ff 45 f4             	incl   -0xc(%ebp)
f0126f4f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126f55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f58:	7f e7                	jg     f0126f41 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f5a:	e8 52 60 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0126f5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f62:	e8 61 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126f67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126f6a:	83 ec 0c             	sub    $0xc,%esp
f0126f6d:	68 00 1c 00 00       	push   $0x1c00
f0126f72:	e8 15 0c fe ff       	call   f0107b8c <kmalloc>
f0126f77:	83 c4 10             	add    $0x10,%esp
f0126f7a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f80:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126f86:	89 c1                	mov    %eax,%ecx
f0126f88:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126f8f:	10 00 00 
f0126f92:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126f98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126f9d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126fa3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126fa9:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fae:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126fb4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126fba:	29 d0                	sub    %edx,%eax
f0126fbc:	89 c3                	mov    %eax,%ebx
f0126fbe:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126fc5:	10 00 00 
f0126fc8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0126fcd:	0f b6 d0             	movzbl %al,%edx
f0126fd0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126fd6:	01 d0                	add    %edx,%eax
f0126fd8:	48                   	dec    %eax
f0126fd9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126fdf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126fe5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fea:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126ff0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126ff6:	29 d0                	sub    %edx,%eax
f0126ff8:	01 c3                	add    %eax,%ebx
f0126ffa:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0127001:	10 00 00 
f0127004:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127009:	0f b6 c0             	movzbl %al,%eax
f012700c:	c1 e0 04             	shl    $0x4,%eax
f012700f:	89 c2                	mov    %eax,%edx
f0127011:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127017:	01 d0                	add    %edx,%eax
f0127019:	48                   	dec    %eax
f012701a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0127020:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127026:	ba 00 00 00 00       	mov    $0x0,%edx
f012702b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0127031:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127037:	29 d0                	sub    %edx,%eax
f0127039:	01 d8                	add    %ebx,%eax
f012703b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127040:	39 c1                	cmp    %eax,%ecx
f0127042:	74 17                	je     f012705b <test_kfreeall+0x67a>
f0127044:	83 ec 04             	sub    $0x4,%esp
f0127047:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012704c:	68 27 0a 00 00       	push   $0xa27
f0127051:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127056:	e8 aa 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012705b:	e8 68 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127060:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127063:	74 17                	je     f012707c <test_kfreeall+0x69b>
f0127065:	83 ec 04             	sub    $0x4,%esp
f0127068:	68 14 b7 13 f0       	push   $0xf013b714
f012706d:	68 28 0a 00 00       	push   $0xa28
f0127072:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127077:	e8 89 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012707c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012707f:	e8 2d 5f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127084:	29 c3                	sub    %eax,%ebx
f0127086:	89 d8                	mov    %ebx,%eax
f0127088:	83 f8 02             	cmp    $0x2,%eax
f012708b:	74 17                	je     f01270a4 <test_kfreeall+0x6c3>
f012708d:	83 ec 04             	sub    $0x4,%esp
f0127090:	68 7c b7 13 f0       	push   $0xf013b77c
f0127095:	68 29 0a 00 00       	push   $0xa29
f012709a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012709f:	e8 61 91 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01270a4:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01270ab:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01270ae:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01270b4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01270b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01270be:	eb 0e                	jmp    f01270ce <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f01270c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270c3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270c6:	01 d0                	add    %edx,%eax
f01270c8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01270cb:	ff 45 f4             	incl   -0xc(%ebp)
f01270ce:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01270d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01270d7:	7f e7                	jg     f01270c0 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01270d9:	e8 d3 5e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01270de:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270e1:	e8 e2 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01270e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01270e9:	83 ec 0c             	sub    $0xc,%esp
f01270ec:	68 00 fc 2f 00       	push   $0x2ffc00
f01270f1:	e8 96 0a fe ff       	call   f0107b8c <kmalloc>
f01270f6:	83 c4 10             	add    $0x10,%esp
f01270f9:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270ff:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127105:	89 c1                	mov    %eax,%ecx
f0127107:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012710e:	10 00 00 
f0127111:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127117:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012711c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0127122:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127128:	ba 00 00 00 00       	mov    $0x0,%edx
f012712d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0127133:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127139:	29 d0                	sub    %edx,%eax
f012713b:	89 c3                	mov    %eax,%ebx
f012713d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0127144:	10 00 00 
f0127147:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012714c:	0f b6 d0             	movzbl %al,%edx
f012714f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127155:	01 d0                	add    %edx,%eax
f0127157:	48                   	dec    %eax
f0127158:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012715e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127164:	ba 00 00 00 00       	mov    $0x0,%edx
f0127169:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012716f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127175:	29 d0                	sub    %edx,%eax
f0127177:	01 c3                	add    %eax,%ebx
f0127179:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0127180:	10 00 00 
f0127183:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127188:	0f b6 c0             	movzbl %al,%eax
f012718b:	c1 e0 04             	shl    $0x4,%eax
f012718e:	89 c2                	mov    %eax,%edx
f0127190:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127196:	01 d0                	add    %edx,%eax
f0127198:	48                   	dec    %eax
f0127199:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012719f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01271a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01271aa:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01271b0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01271b6:	29 d0                	sub    %edx,%eax
f01271b8:	01 d8                	add    %ebx,%eax
f01271ba:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01271bf:	39 c1                	cmp    %eax,%ecx
f01271c1:	74 17                	je     f01271da <test_kfreeall+0x7f9>
f01271c3:	83 ec 04             	sub    $0x4,%esp
f01271c6:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01271cb:	68 35 0a 00 00       	push   $0xa35
f01271d0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01271d5:	e8 2b 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271da:	e8 e9 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01271df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01271e2:	74 17                	je     f01271fb <test_kfreeall+0x81a>
f01271e4:	83 ec 04             	sub    $0x4,%esp
f01271e7:	68 14 b7 13 f0       	push   $0xf013b714
f01271ec:	68 36 0a 00 00       	push   $0xa36
f01271f1:	68 fa b6 13 f0       	push   $0xf013b6fa
f01271f6:	e8 0a 90 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271fb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01271fe:	e8 ae 5d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127203:	29 c3                	sub    %eax,%ebx
f0127205:	89 d8                	mov    %ebx,%eax
f0127207:	3d 00 03 00 00       	cmp    $0x300,%eax
f012720c:	74 17                	je     f0127225 <test_kfreeall+0x844>
f012720e:	83 ec 04             	sub    $0x4,%esp
f0127211:	68 7c b7 13 f0       	push   $0xf013b77c
f0127216:	68 37 0a 00 00       	push   $0xa37
f012721b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127220:	e8 e0 8f fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127225:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012722c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012722f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127235:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127238:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012723f:	eb 0e                	jmp    f012724f <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127241:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127244:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127247:	01 d0                	add    %edx,%eax
f0127249:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012724c:	ff 45 f4             	incl   -0xc(%ebp)
f012724f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127255:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127258:	7f e7                	jg     f0127241 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012725a:	e8 52 5d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012725f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127262:	e8 61 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127267:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012726a:	83 ec 0c             	sub    $0xc,%esp
f012726d:	68 00 fc 5f 00       	push   $0x5ffc00
f0127272:	e8 15 09 fe ff       	call   f0107b8c <kmalloc>
f0127277:	83 c4 10             	add    $0x10,%esp
f012727a:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127280:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127286:	89 c1                	mov    %eax,%ecx
f0127288:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012728f:	10 00 00 
f0127292:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127298:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012729d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01272a3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01272a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ae:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01272b4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01272ba:	29 d0                	sub    %edx,%eax
f01272bc:	89 c3                	mov    %eax,%ebx
f01272be:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01272c5:	10 00 00 
f01272c8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01272cd:	0f b6 d0             	movzbl %al,%edx
f01272d0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01272d6:	01 d0                	add    %edx,%eax
f01272d8:	48                   	dec    %eax
f01272d9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01272df:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01272e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01272ea:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01272f0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01272f6:	29 d0                	sub    %edx,%eax
f01272f8:	01 c3                	add    %eax,%ebx
f01272fa:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0127301:	10 00 00 
f0127304:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127309:	0f b6 c0             	movzbl %al,%eax
f012730c:	c1 e0 04             	shl    $0x4,%eax
f012730f:	89 c2                	mov    %eax,%edx
f0127311:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0127317:	01 d0                	add    %edx,%eax
f0127319:	48                   	dec    %eax
f012731a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127320:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127326:	ba 00 00 00 00       	mov    $0x0,%edx
f012732b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127331:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127337:	29 d0                	sub    %edx,%eax
f0127339:	01 d8                	add    %ebx,%eax
f012733b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127340:	39 c1                	cmp    %eax,%ecx
f0127342:	74 17                	je     f012735b <test_kfreeall+0x97a>
f0127344:	83 ec 04             	sub    $0x4,%esp
f0127347:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012734c:	68 43 0a 00 00       	push   $0xa43
f0127351:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127356:	e8 aa 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012735b:	e8 68 ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127360:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127363:	74 17                	je     f012737c <test_kfreeall+0x99b>
f0127365:	83 ec 04             	sub    $0x4,%esp
f0127368:	68 14 b7 13 f0       	push   $0xf013b714
f012736d:	68 44 0a 00 00       	push   $0xa44
f0127372:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127377:	e8 89 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012737c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012737f:	e8 2d 5c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127384:	29 c3                	sub    %eax,%ebx
f0127386:	89 d8                	mov    %ebx,%eax
f0127388:	3d 00 06 00 00       	cmp    $0x600,%eax
f012738d:	74 17                	je     f01273a6 <test_kfreeall+0x9c5>
f012738f:	83 ec 04             	sub    $0x4,%esp
f0127392:	68 7c b7 13 f0       	push   $0xf013b77c
f0127397:	68 45 0a 00 00       	push   $0xa45
f012739c:	68 fa b6 13 f0       	push   $0xf013b6fa
f01273a1:	e8 5f 8e fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01273a6:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01273ad:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01273b0:	e8 fc 5b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01273b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273b8:	e8 0b ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01273c0:	83 ec 0c             	sub    $0xc,%esp
f01273c3:	68 00 38 00 00       	push   $0x3800
f01273c8:	e8 bf 07 fe ff       	call   f0107b8c <kmalloc>
f01273cd:	83 c4 10             	add    $0x10,%esp
f01273d0:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01273d6:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01273dc:	89 c1                	mov    %eax,%ecx
f01273de:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01273e5:	10 00 00 
f01273e8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01273ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01273f3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01273f9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01273ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0127404:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012740a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127410:	29 d0                	sub    %edx,%eax
f0127412:	89 c3                	mov    %eax,%ebx
f0127414:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012741b:	10 00 00 
f012741e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127423:	0f b6 d0             	movzbl %al,%edx
f0127426:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012742c:	01 d0                	add    %edx,%eax
f012742e:	48                   	dec    %eax
f012742f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0127435:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012743b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127440:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0127446:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012744c:	29 d0                	sub    %edx,%eax
f012744e:	01 c3                	add    %eax,%ebx
f0127450:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0127457:	10 00 00 
f012745a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012745f:	0f b6 c0             	movzbl %al,%eax
f0127462:	c1 e0 04             	shl    $0x4,%eax
f0127465:	89 c2                	mov    %eax,%edx
f0127467:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012746d:	01 d0                	add    %edx,%eax
f012746f:	48                   	dec    %eax
f0127470:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0127476:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012747c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127481:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0127487:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012748d:	29 d0                	sub    %edx,%eax
f012748f:	01 d8                	add    %ebx,%eax
f0127491:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0127496:	39 c1                	cmp    %eax,%ecx
f0127498:	74 17                	je     f01274b1 <test_kfreeall+0xad0>
f012749a:	83 ec 04             	sub    $0x4,%esp
f012749d:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01274a2:	68 4c 0a 00 00       	push   $0xa4c
f01274a7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01274ac:	e8 54 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274b1:	e8 12 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01274b6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01274b9:	74 17                	je     f01274d2 <test_kfreeall+0xaf1>
f01274bb:	83 ec 04             	sub    $0x4,%esp
f01274be:	68 14 b7 13 f0       	push   $0xf013b714
f01274c3:	68 4d 0a 00 00       	push   $0xa4d
f01274c8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01274cd:	e8 33 8d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01274d2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01274d5:	e8 d7 5a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01274da:	29 c3                	sub    %eax,%ebx
f01274dc:	89 d8                	mov    %ebx,%eax
f01274de:	83 f8 04             	cmp    $0x4,%eax
f01274e1:	74 17                	je     f01274fa <test_kfreeall+0xb19>
f01274e3:	83 ec 04             	sub    $0x4,%esp
f01274e6:	68 7c b7 13 f0       	push   $0xf013b77c
f01274eb:	68 4e 0a 00 00       	push   $0xa4e
f01274f0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01274f5:	e8 0b 8d fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01274fa:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127501:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0127504:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012750a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012750d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127514:	eb 0e                	jmp    f0127524 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0127516:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127519:	8b 45 80             	mov    -0x80(%ebp),%eax
f012751c:	01 d0                	add    %edx,%eax
f012751e:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127521:	ff 45 f4             	incl   -0xc(%ebp)
f0127524:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012752a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012752d:	7f e7                	jg     f0127516 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012752f:	e8 7d 5a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127534:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012753a:	e8 89 c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012753f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0127545:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012754b:	83 ec 0c             	sub    $0xc,%esp
f012754e:	50                   	push   %eax
f012754f:	e8 03 07 fe ff       	call   f0107c57 <kfree>
f0127554:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127557:	e8 6c c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012755c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127562:	74 17                	je     f012757b <test_kfreeall+0xb9a>
f0127564:	83 ec 04             	sub    $0x4,%esp
f0127567:	68 14 b7 13 f0       	push   $0xf013b714
f012756c:	68 5d 0a 00 00       	push   $0xa5d
f0127571:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127576:	e8 8a 8c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012757b:	e8 31 5a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127580:	89 c2                	mov    %eax,%edx
f0127582:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127588:	29 c2                	sub    %eax,%edx
f012758a:	89 d0                	mov    %edx,%eax
f012758c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127591:	74 17                	je     f01275aa <test_kfreeall+0xbc9>
f0127593:	83 ec 04             	sub    $0x4,%esp
f0127596:	68 84 be 13 f0       	push   $0xf013be84
f012759b:	68 5e 0a 00 00       	push   $0xa5e
f01275a0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01275a5:	e8 5b 8c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01275aa:	e8 02 5a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01275af:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275b5:	e8 0e c8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01275ba:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01275c0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01275c6:	83 ec 0c             	sub    $0xc,%esp
f01275c9:	50                   	push   %eax
f01275ca:	e8 88 06 fe ff       	call   f0107c57 <kfree>
f01275cf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275d2:	e8 f1 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01275d7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01275dd:	74 17                	je     f01275f6 <test_kfreeall+0xc15>
f01275df:	83 ec 04             	sub    $0x4,%esp
f01275e2:	68 14 b7 13 f0       	push   $0xf013b714
f01275e7:	68 64 0a 00 00       	push   $0xa64
f01275ec:	68 fa b6 13 f0       	push   $0xf013b6fa
f01275f1:	e8 0f 8c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01275f6:	e8 b6 59 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01275fb:	89 c2                	mov    %eax,%edx
f01275fd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127603:	29 c2                	sub    %eax,%edx
f0127605:	89 d0                	mov    %edx,%eax
f0127607:	3d 00 02 00 00       	cmp    $0x200,%eax
f012760c:	74 17                	je     f0127625 <test_kfreeall+0xc44>
f012760e:	83 ec 04             	sub    $0x4,%esp
f0127611:	68 84 be 13 f0       	push   $0xf013be84
f0127616:	68 65 0a 00 00       	push   $0xa65
f012761b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127620:	e8 e0 8b fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127625:	e8 87 59 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012762a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127630:	e8 93 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127635:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012763b:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127641:	83 ec 0c             	sub    $0xc,%esp
f0127644:	50                   	push   %eax
f0127645:	e8 0d 06 fe ff       	call   f0107c57 <kfree>
f012764a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012764d:	e8 76 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127652:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127658:	74 17                	je     f0127671 <test_kfreeall+0xc90>
f012765a:	83 ec 04             	sub    $0x4,%esp
f012765d:	68 14 b7 13 f0       	push   $0xf013b714
f0127662:	68 6b 0a 00 00       	push   $0xa6b
f0127667:	68 fa b6 13 f0       	push   $0xf013b6fa
f012766c:	e8 94 8b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0127671:	e8 3b 59 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127676:	89 c2                	mov    %eax,%edx
f0127678:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012767e:	29 c2                	sub    %eax,%edx
f0127680:	89 d0                	mov    %edx,%eax
f0127682:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127687:	74 17                	je     f01276a0 <test_kfreeall+0xcbf>
f0127689:	83 ec 04             	sub    $0x4,%esp
f012768c:	68 84 be 13 f0       	push   $0xf013be84
f0127691:	68 6c 0a 00 00       	push   $0xa6c
f0127696:	68 fa b6 13 f0       	push   $0xf013b6fa
f012769b:	e8 65 8b fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01276a0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01276a6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01276a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01276b0:	eb 1e                	jmp    f01276d0 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01276b2:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01276b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01276bb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01276be:	01 c8                	add    %ecx,%eax
f01276c0:	8a 00                	mov    (%eax),%al
f01276c2:	0f be c0             	movsbl %al,%eax
f01276c5:	01 d0                	add    %edx,%eax
f01276c7:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01276cd:	ff 45 f4             	incl   -0xc(%ebp)
f01276d0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01276d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01276d9:	7f d7                	jg     f01276b2 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01276db:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01276e1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01276e7:	01 c0                	add    %eax,%eax
f01276e9:	39 c2                	cmp    %eax,%edx
f01276eb:	74 17                	je     f0127704 <test_kfreeall+0xd23>
f01276ed:	83 ec 04             	sub    $0x4,%esp
f01276f0:	68 e0 be 13 f0       	push   $0xf013bee0
f01276f5:	68 78 0a 00 00       	push   $0xa78
f01276fa:	68 fa b6 13 f0       	push   $0xf013b6fa
f01276ff:	e8 01 8b fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127704:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012770a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012770d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127714:	eb 1e                	jmp    f0127734 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127716:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012771c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012771f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127722:	01 c8                	add    %ecx,%eax
f0127724:	8a 00                	mov    (%eax),%al
f0127726:	0f be c0             	movsbl %al,%eax
f0127729:	01 d0                	add    %edx,%eax
f012772b:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127731:	ff 45 f4             	incl   -0xc(%ebp)
f0127734:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012773a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012773d:	7f d7                	jg     f0127716 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012773f:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127745:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012774b:	89 c1                	mov    %eax,%ecx
f012774d:	01 c9                	add    %ecx,%ecx
f012774f:	01 c8                	add    %ecx,%eax
f0127751:	39 c2                	cmp    %eax,%edx
f0127753:	74 17                	je     f012776c <test_kfreeall+0xd8b>
f0127755:	83 ec 04             	sub    $0x4,%esp
f0127758:	68 e0 be 13 f0       	push   $0xf013bee0
f012775d:	68 80 0a 00 00       	push   $0xa80
f0127762:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127767:	e8 99 8a fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012776c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127772:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127775:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012777c:	eb 1e                	jmp    f012779c <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f012777e:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127784:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127787:	8b 45 80             	mov    -0x80(%ebp),%eax
f012778a:	01 c8                	add    %ecx,%eax
f012778c:	8a 00                	mov    (%eax),%al
f012778e:	0f be c0             	movsbl %al,%eax
f0127791:	01 d0                	add    %edx,%eax
f0127793:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127799:	ff 45 f4             	incl   -0xc(%ebp)
f012779c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01277a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01277a5:	7f d7                	jg     f012777e <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01277a7:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01277ad:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01277b3:	c1 e2 02             	shl    $0x2,%edx
f01277b6:	39 d0                	cmp    %edx,%eax
f01277b8:	74 17                	je     f01277d1 <test_kfreeall+0xdf0>
f01277ba:	83 ec 04             	sub    $0x4,%esp
f01277bd:	68 e0 be 13 f0       	push   $0xf013bee0
f01277c2:	68 88 0a 00 00       	push   $0xa88
f01277c7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01277cc:	e8 34 8a fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01277d1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01277d7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01277da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01277e1:	eb 1e                	jmp    f0127801 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01277e3:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01277e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01277ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01277ef:	01 c8                	add    %ecx,%eax
f01277f1:	8a 00                	mov    (%eax),%al
f01277f3:	0f be c0             	movsbl %al,%eax
f01277f6:	01 d0                	add    %edx,%eax
f01277f8:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01277fe:	ff 45 f4             	incl   -0xc(%ebp)
f0127801:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127807:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012780a:	7f d7                	jg     f01277e3 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012780c:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127812:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127818:	89 d0                	mov    %edx,%eax
f012781a:	c1 e0 02             	shl    $0x2,%eax
f012781d:	01 d0                	add    %edx,%eax
f012781f:	39 c1                	cmp    %eax,%ecx
f0127821:	74 17                	je     f012783a <test_kfreeall+0xe59>
f0127823:	83 ec 04             	sub    $0x4,%esp
f0127826:	68 e0 be 13 f0       	push   $0xf013bee0
f012782b:	68 90 0a 00 00       	push   $0xa90
f0127830:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127835:	e8 cb 89 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012783a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127840:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127843:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012784a:	eb 1e                	jmp    f012786a <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f012784c:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127852:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127855:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127858:	01 c8                	add    %ecx,%eax
f012785a:	8a 00                	mov    (%eax),%al
f012785c:	0f be c0             	movsbl %al,%eax
f012785f:	01 d0                	add    %edx,%eax
f0127861:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127867:	ff 45 f4             	incl   -0xc(%ebp)
f012786a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127870:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127873:	7f d7                	jg     f012784c <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127875:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012787b:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127881:	89 d0                	mov    %edx,%eax
f0127883:	01 c0                	add    %eax,%eax
f0127885:	01 d0                	add    %edx,%eax
f0127887:	01 c0                	add    %eax,%eax
f0127889:	01 d0                	add    %edx,%eax
f012788b:	39 c1                	cmp    %eax,%ecx
f012788d:	74 17                	je     f01278a6 <test_kfreeall+0xec5>
f012788f:	83 ec 04             	sub    $0x4,%esp
f0127892:	68 e0 be 13 f0       	push   $0xf013bee0
f0127897:	68 98 0a 00 00       	push   $0xa98
f012789c:	68 fa b6 13 f0       	push   $0xf013b6fa
f01278a1:	e8 5f 89 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01278a6:	e8 06 57 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01278ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278ae:	e8 15 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01278b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01278b6:	83 ec 0c             	sub    $0xc,%esp
f01278b9:	68 00 50 00 00       	push   $0x5000
f01278be:	e8 c9 02 fe ff       	call   f0107b8c <kmalloc>
f01278c3:	83 c4 10             	add    $0x10,%esp
f01278c6:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278cc:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01278d2:	89 c1                	mov    %eax,%ecx
f01278d4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01278db:	10 00 00 
f01278de:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01278e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01278e9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01278ef:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01278f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01278fa:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127900:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127906:	29 d0                	sub    %edx,%eax
f0127908:	89 c3                	mov    %eax,%ebx
f012790a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127911:	10 00 00 
f0127914:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127919:	0f b6 d0             	movzbl %al,%edx
f012791c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127922:	01 d0                	add    %edx,%eax
f0127924:	48                   	dec    %eax
f0127925:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012792b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127931:	ba 00 00 00 00       	mov    $0x0,%edx
f0127936:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012793c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127942:	29 d0                	sub    %edx,%eax
f0127944:	01 c3                	add    %eax,%ebx
f0127946:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012794d:	10 00 00 
f0127950:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127955:	0f b6 c0             	movzbl %al,%eax
f0127958:	c1 e0 04             	shl    $0x4,%eax
f012795b:	89 c2                	mov    %eax,%edx
f012795d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127963:	01 d0                	add    %edx,%eax
f0127965:	48                   	dec    %eax
f0127966:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012796c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127972:	ba 00 00 00 00       	mov    $0x0,%edx
f0127977:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012797d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127983:	29 d0                	sub    %edx,%eax
f0127985:	01 d8                	add    %ebx,%eax
f0127987:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012798c:	39 c1                	cmp    %eax,%ecx
f012798e:	74 17                	je     f01279a7 <test_kfreeall+0xfc6>
f0127990:	83 ec 04             	sub    $0x4,%esp
f0127993:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0127998:	68 a1 0a 00 00       	push   $0xaa1
f012799d:	68 fa b6 13 f0       	push   $0xf013b6fa
f01279a2:	e8 5e 88 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279a7:	e8 1c c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01279af:	74 17                	je     f01279c8 <test_kfreeall+0xfe7>
f01279b1:	83 ec 04             	sub    $0x4,%esp
f01279b4:	68 14 b7 13 f0       	push   $0xf013b714
f01279b9:	68 a2 0a 00 00       	push   $0xaa2
f01279be:	68 fa b6 13 f0       	push   $0xf013b6fa
f01279c3:	e8 3d 88 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279c8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01279cb:	e8 e1 55 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01279d0:	29 c3                	sub    %eax,%ebx
f01279d2:	89 d8                	mov    %ebx,%eax
f01279d4:	83 f8 05             	cmp    $0x5,%eax
f01279d7:	74 17                	je     f01279f0 <test_kfreeall+0x100f>
f01279d9:	83 ec 04             	sub    $0x4,%esp
f01279dc:	68 7c b7 13 f0       	push   $0xf013b77c
f01279e1:	68 a3 0a 00 00       	push   $0xaa3
f01279e6:	68 fa b6 13 f0       	push   $0xf013b6fa
f01279eb:	e8 15 88 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01279f0:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01279f7:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01279fa:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127a00:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127a03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a0a:	eb 0e                	jmp    f0127a1a <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127a0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127a0f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a12:	01 d0                	add    %edx,%eax
f0127a14:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127a17:	ff 45 f4             	incl   -0xc(%ebp)
f0127a1a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127a20:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a23:	7f e7                	jg     f0127a0c <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a25:	e8 87 55 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127a2a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a2d:	e8 96 c3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127a32:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127a35:	83 ec 0c             	sub    $0xc,%esp
f0127a38:	68 00 00 10 00       	push   $0x100000
f0127a3d:	e8 4a 01 fe ff       	call   f0107b8c <kmalloc>
f0127a42:	83 c4 10             	add    $0x10,%esp
f0127a45:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a4b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127a51:	89 c1                	mov    %eax,%ecx
f0127a53:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127a5a:	10 00 00 
f0127a5d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127a63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127a68:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127a6e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127a74:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a79:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127a7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127a85:	29 d0                	sub    %edx,%eax
f0127a87:	89 c3                	mov    %eax,%ebx
f0127a89:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127a90:	10 00 00 
f0127a93:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127a98:	0f b6 d0             	movzbl %al,%edx
f0127a9b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127aa1:	01 d0                	add    %edx,%eax
f0127aa3:	48                   	dec    %eax
f0127aa4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127aaa:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127ab0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ab5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127abb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127ac1:	29 d0                	sub    %edx,%eax
f0127ac3:	01 c3                	add    %eax,%ebx
f0127ac5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127acc:	10 00 00 
f0127acf:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127ad4:	0f b6 c0             	movzbl %al,%eax
f0127ad7:	c1 e0 04             	shl    $0x4,%eax
f0127ada:	89 c2                	mov    %eax,%edx
f0127adc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127ae2:	01 d0                	add    %edx,%eax
f0127ae4:	48                   	dec    %eax
f0127ae5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127aeb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127af6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127afc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127b02:	29 d0                	sub    %edx,%eax
f0127b04:	01 d8                	add    %ebx,%eax
f0127b06:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127b0b:	39 c1                	cmp    %eax,%ecx
f0127b0d:	74 17                	je     f0127b26 <test_kfreeall+0x1145>
f0127b0f:	83 ec 04             	sub    $0x4,%esp
f0127b12:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0127b17:	68 af 0a 00 00       	push   $0xaaf
f0127b1c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127b21:	e8 df 86 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b26:	e8 9d c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b2b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127b2e:	74 17                	je     f0127b47 <test_kfreeall+0x1166>
f0127b30:	83 ec 04             	sub    $0x4,%esp
f0127b33:	68 14 b7 13 f0       	push   $0xf013b714
f0127b38:	68 b0 0a 00 00       	push   $0xab0
f0127b3d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127b42:	e8 be 86 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b47:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127b4a:	e8 62 54 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127b4f:	29 c3                	sub    %eax,%ebx
f0127b51:	89 d8                	mov    %ebx,%eax
f0127b53:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127b58:	74 17                	je     f0127b71 <test_kfreeall+0x1190>
f0127b5a:	83 ec 04             	sub    $0x4,%esp
f0127b5d:	68 7c b7 13 f0       	push   $0xf013b77c
f0127b62:	68 b1 0a 00 00       	push   $0xab1
f0127b67:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127b6c:	e8 94 86 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127b71:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127b78:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127b7b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127b81:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127b84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b8b:	eb 0e                	jmp    f0127b9b <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127b8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b90:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b93:	01 d0                	add    %edx,%eax
f0127b95:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127b98:	ff 45 f4             	incl   -0xc(%ebp)
f0127b9b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127ba1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ba4:	7f e7                	jg     f0127b8d <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ba6:	e8 06 54 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127bab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bae:	e8 15 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127bb3:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127bb6:	e8 3a 02 fe ff       	call   f0107df5 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bbb:	e8 08 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127bc0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127bc3:	74 17                	je     f0127bdc <test_kfreeall+0x11fb>
f0127bc5:	83 ec 04             	sub    $0x4,%esp
f0127bc8:	68 14 b7 13 f0       	push   $0xf013b714
f0127bcd:	68 c1 0a 00 00       	push   $0xac1
f0127bd2:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127bd7:	e8 29 86 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127bdc:	e8 d0 53 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127be1:	89 c2                	mov    %eax,%edx
f0127be3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127be6:	89 d1                	mov    %edx,%ecx
f0127be8:	29 c1                	sub    %eax,%ecx
f0127bea:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127bf1:	10 00 00 
f0127bf4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127bfa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bff:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127c05:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127c0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c10:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127c16:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127c1c:	29 d0                	sub    %edx,%eax
f0127c1e:	89 c3                	mov    %eax,%ebx
f0127c20:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127c27:	10 00 00 
f0127c2a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127c2f:	0f b6 d0             	movzbl %al,%edx
f0127c32:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127c38:	01 d0                	add    %edx,%eax
f0127c3a:	48                   	dec    %eax
f0127c3b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127c41:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127c47:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c4c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127c52:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127c58:	29 d0                	sub    %edx,%eax
f0127c5a:	01 c3                	add    %eax,%ebx
f0127c5c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127c63:	10 00 00 
f0127c66:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0127c6b:	0f b6 c0             	movzbl %al,%eax
f0127c6e:	c1 e0 04             	shl    $0x4,%eax
f0127c71:	89 c2                	mov    %eax,%edx
f0127c73:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127c79:	01 d0                	add    %edx,%eax
f0127c7b:	48                   	dec    %eax
f0127c7c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127c82:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127c88:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c8d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127c93:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127c99:	29 d0                	sub    %edx,%eax
f0127c9b:	01 d8                	add    %ebx,%eax
f0127c9d:	05 00 40 00 00       	add    $0x4000,%eax
f0127ca2:	c1 e8 0c             	shr    $0xc,%eax
f0127ca5:	05 0d 04 00 00       	add    $0x40d,%eax
f0127caa:	39 c1                	cmp    %eax,%ecx
f0127cac:	74 17                	je     f0127cc5 <test_kfreeall+0x12e4>
f0127cae:	83 ec 04             	sub    $0x4,%esp
f0127cb1:	68 84 be 13 f0       	push   $0xf013be84
f0127cb6:	68 c2 0a 00 00       	push   $0xac2
f0127cbb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127cc0:	e8 40 85 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127cc5:	83 ec 0c             	sub    $0xc,%esp
f0127cc8:	6a 03                	push   $0x3
f0127cca:	e8 82 57 fe ff       	call   f010d451 <sys_bypassPageFault>
f0127ccf:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127cd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127cd9:	e9 82 00 00 00       	jmp    f0127d60 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ce1:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127ce8:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127ceb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127cee:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127cf1:	e8 49 57 fe ff       	call   f010d43f <sys_rcr2>
f0127cf6:	89 c2                	mov    %eax,%edx
f0127cf8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127cfb:	39 c2                	cmp    %eax,%edx
f0127cfd:	74 17                	je     f0127d16 <test_kfreeall+0x1335>
f0127cff:	83 ec 04             	sub    $0x4,%esp
f0127d02:	68 60 bf 13 f0       	push   $0xf013bf60
f0127d07:	68 d0 0a 00 00       	push   $0xad0
f0127d0c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127d11:	e8 ef 84 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127d19:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127d20:	89 c2                	mov    %eax,%edx
f0127d22:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127d25:	01 d0                	add    %edx,%eax
f0127d27:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127d2a:	e8 10 57 fe ff       	call   f010d43f <sys_rcr2>
f0127d2f:	89 c2                	mov    %eax,%edx
f0127d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127d34:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127d3b:	89 c1                	mov    %eax,%ecx
f0127d3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127d40:	01 c8                	add    %ecx,%eax
f0127d42:	39 c2                	cmp    %eax,%edx
f0127d44:	74 17                	je     f0127d5d <test_kfreeall+0x137c>
f0127d46:	83 ec 04             	sub    $0x4,%esp
f0127d49:	68 60 bf 13 f0       	push   $0xf013bf60
f0127d4e:	68 d2 0a 00 00       	push   $0xad2
f0127d53:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127d58:	e8 a8 84 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127d5d:	ff 45 f4             	incl   -0xc(%ebp)
f0127d60:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127d64:	0f 8e 74 ff ff ff    	jle    f0127cde <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127d6a:	83 ec 0c             	sub    $0xc,%esp
f0127d6d:	6a 00                	push   $0x0
f0127d6f:	e8 dd 56 fe ff       	call   f010d451 <sys_bypassPageFault>
f0127d74:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d77:	e8 35 52 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127d7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d7f:	e8 44 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127d87:	83 ec 0c             	sub    $0xc,%esp
f0127d8a:	68 00 00 40 00       	push   $0x400000
f0127d8f:	e8 f8 fd fd ff       	call   f0107b8c <kmalloc>
f0127d94:	83 c4 10             	add    $0x10,%esp
f0127d97:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127d9d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127da3:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127da8:	74 17                	je     f0127dc1 <test_kfreeall+0x13e0>
f0127daa:	83 ec 04             	sub    $0x4,%esp
f0127dad:	68 04 c4 13 f0       	push   $0xf013c404
f0127db2:	68 de 0a 00 00       	push   $0xade
f0127db7:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127dbc:	e8 44 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dc1:	e8 02 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127dc6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127dc9:	74 17                	je     f0127de2 <test_kfreeall+0x1401>
f0127dcb:	83 ec 04             	sub    $0x4,%esp
f0127dce:	68 14 b7 13 f0       	push   $0xf013b714
f0127dd3:	68 df 0a 00 00       	push   $0xadf
f0127dd8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127ddd:	e8 23 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127de2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127de5:	e8 c7 51 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127dea:	29 c3                	sub    %eax,%ebx
f0127dec:	89 d8                	mov    %ebx,%eax
f0127dee:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127df3:	74 17                	je     f0127e0c <test_kfreeall+0x142b>
f0127df5:	83 ec 04             	sub    $0x4,%esp
f0127df8:	68 7c b7 13 f0       	push   $0xf013b77c
f0127dfd:	68 e0 0a 00 00       	push   $0xae0
f0127e02:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127e07:	e8 f9 83 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e0c:	e8 a0 51 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127e11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e14:	e8 af bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127e1c:	83 ec 0c             	sub    $0xc,%esp
f0127e1f:	68 00 30 00 00       	push   $0x3000
f0127e24:	e8 63 fd fd ff       	call   f0107b8c <kmalloc>
f0127e29:	83 c4 10             	add    $0x10,%esp
f0127e2c:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127e32:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127e38:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127e3d:	74 17                	je     f0127e56 <test_kfreeall+0x1475>
f0127e3f:	83 ec 04             	sub    $0x4,%esp
f0127e42:	68 04 c4 13 f0       	push   $0xf013c404
f0127e47:	68 e6 0a 00 00       	push   $0xae6
f0127e4c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127e51:	e8 af 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e56:	e8 6d bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127e5b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e5e:	74 17                	je     f0127e77 <test_kfreeall+0x1496>
f0127e60:	83 ec 04             	sub    $0x4,%esp
f0127e63:	68 14 b7 13 f0       	push   $0xf013b714
f0127e68:	68 e7 0a 00 00       	push   $0xae7
f0127e6d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127e72:	e8 8e 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e77:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127e7a:	e8 32 51 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127e7f:	29 c3                	sub    %eax,%ebx
f0127e81:	89 d8                	mov    %ebx,%eax
f0127e83:	83 f8 03             	cmp    $0x3,%eax
f0127e86:	74 17                	je     f0127e9f <test_kfreeall+0x14be>
f0127e88:	83 ec 04             	sub    $0x4,%esp
f0127e8b:	68 7c b7 13 f0       	push   $0xf013b77c
f0127e90:	68 e8 0a 00 00       	push   $0xae8
f0127e95:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127e9a:	e8 66 83 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e9f:	e8 0d 51 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127ea4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ea7:	e8 1c bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127eac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127eaf:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127eb5:	83 ec 0c             	sub    $0xc,%esp
f0127eb8:	50                   	push   %eax
f0127eb9:	e8 99 fd fd ff       	call   f0107c57 <kfree>
f0127ebe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ec1:	e8 02 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ec6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ec9:	74 17                	je     f0127ee2 <test_kfreeall+0x1501>
f0127ecb:	83 ec 04             	sub    $0x4,%esp
f0127ece:	68 14 b7 13 f0       	push   $0xf013b714
f0127ed3:	68 f2 0a 00 00       	push   $0xaf2
f0127ed8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127edd:	e8 23 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127ee2:	e8 ca 50 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127ee7:	89 c2                	mov    %eax,%edx
f0127ee9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127eec:	29 c2                	sub    %eax,%edx
f0127eee:	89 d0                	mov    %edx,%eax
f0127ef0:	83 f8 03             	cmp    $0x3,%eax
f0127ef3:	74 17                	je     f0127f0c <test_kfreeall+0x152b>
f0127ef5:	83 ec 04             	sub    $0x4,%esp
f0127ef8:	68 ac bf 13 f0       	push   $0xf013bfac
f0127efd:	68 f3 0a 00 00       	push   $0xaf3
f0127f02:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127f07:	e8 f9 82 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f0c:	e8 a0 50 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127f11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f14:	e8 af be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127f1c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127f22:	83 ec 0c             	sub    $0xc,%esp
f0127f25:	50                   	push   %eax
f0127f26:	e8 2c fd fd ff       	call   f0107c57 <kfree>
f0127f2b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f2e:	e8 95 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f33:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f36:	74 17                	je     f0127f4f <test_kfreeall+0x156e>
f0127f38:	83 ec 04             	sub    $0x4,%esp
f0127f3b:	68 14 b7 13 f0       	push   $0xf013b714
f0127f40:	68 fc 0a 00 00       	push   $0xafc
f0127f45:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127f4a:	e8 b6 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127f4f:	e8 5d 50 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127f54:	89 c2                	mov    %eax,%edx
f0127f56:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f59:	39 c2                	cmp    %eax,%edx
f0127f5b:	74 17                	je     f0127f74 <test_kfreeall+0x1593>
f0127f5d:	83 ec 04             	sub    $0x4,%esp
f0127f60:	68 ac bf 13 f0       	push   $0xf013bfac
f0127f65:	68 fd 0a 00 00       	push   $0xafd
f0127f6a:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127f6f:	e8 91 82 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f74:	e8 38 50 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127f79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f7c:	e8 47 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127f84:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127f8a:	83 ec 0c             	sub    $0xc,%esp
f0127f8d:	50                   	push   %eax
f0127f8e:	e8 c4 fc fd ff       	call   f0107c57 <kfree>
f0127f93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f96:	e8 2d be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f9b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f9e:	74 17                	je     f0127fb7 <test_kfreeall+0x15d6>
f0127fa0:	83 ec 04             	sub    $0x4,%esp
f0127fa3:	68 14 b7 13 f0       	push   $0xf013b714
f0127fa8:	68 03 0b 00 00       	push   $0xb03
f0127fad:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127fb2:	e8 4e 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127fb7:	e8 f5 4f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127fbc:	89 c2                	mov    %eax,%edx
f0127fbe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127fc1:	39 c2                	cmp    %eax,%edx
f0127fc3:	74 17                	je     f0127fdc <test_kfreeall+0x15fb>
f0127fc5:	83 ec 04             	sub    $0x4,%esp
f0127fc8:	68 ac bf 13 f0       	push   $0xf013bfac
f0127fcd:	68 04 0b 00 00       	push   $0xb04
f0127fd2:	68 fa b6 13 f0       	push   $0xf013b6fa
f0127fd7:	e8 29 82 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127fdc:	e8 d0 4f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0127fe1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127fe4:	e8 df bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127fe9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127fec:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127ff2:	83 ec 0c             	sub    $0xc,%esp
f0127ff5:	50                   	push   %eax
f0127ff6:	e8 5c fc fd ff       	call   f0107c57 <kfree>
f0127ffb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ffe:	e8 c5 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128003:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128006:	74 17                	je     f012801f <test_kfreeall+0x163e>
f0128008:	83 ec 04             	sub    $0x4,%esp
f012800b:	68 14 b7 13 f0       	push   $0xf013b714
f0128010:	68 0a 0b 00 00       	push   $0xb0a
f0128015:	68 fa b6 13 f0       	push   $0xf013b6fa
f012801a:	e8 e6 81 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012801f:	e8 8d 4f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128024:	89 c2                	mov    %eax,%edx
f0128026:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128029:	39 c2                	cmp    %eax,%edx
f012802b:	74 17                	je     f0128044 <test_kfreeall+0x1663>
f012802d:	83 ec 04             	sub    $0x4,%esp
f0128030:	68 ac bf 13 f0       	push   $0xf013bfac
f0128035:	68 0b 0b 00 00       	push   $0xb0b
f012803a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012803f:	e8 c1 81 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0128044:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012804b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0128052:	eb 48                	jmp    f012809c <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0128054:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0128057:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012805c:	83 ec 04             	sub    $0x4,%esp
f012805f:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0128065:	51                   	push   %ecx
f0128066:	52                   	push   %edx
f0128067:	50                   	push   %eax
f0128068:	e8 44 ea fd ff       	call   f0106ab1 <get_page_table>
f012806d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0128070:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0128076:	85 c0                	test   %eax,%eax
f0128078:	75 17                	jne    f0128091 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012807a:	83 ec 04             	sub    $0x4,%esp
f012807d:	68 fc bf 13 f0       	push   $0xf013bffc
f0128082:	68 18 0b 00 00       	push   $0xb18
f0128087:	68 fa b6 13 f0       	push   $0xf013b6fa
f012808c:	e8 74 81 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0128091:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0128098:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012809c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01280a0:	78 b2                	js     f0128054 <test_kfreeall+0x1673>
f01280a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01280a6:	7f 09                	jg     f01280b1 <test_kfreeall+0x16d0>
f01280a8:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01280af:	76 a3                	jbe    f0128054 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01280b1:	83 ec 0c             	sub    $0xc,%esp
f01280b4:	68 58 c4 13 f0       	push   $0xf013c458
f01280b9:	e8 50 8c fd ff       	call   f0100d0e <cprintf>
f01280be:	83 c4 10             	add    $0x10,%esp

	return 1;
f01280c1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01280c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01280c9:	5b                   	pop    %ebx
f01280ca:	5f                   	pop    %edi
f01280cb:	5d                   	pop    %ebp
f01280cc:	c3                   	ret    

f01280cd <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01280cd:	55                   	push   %ebp
f01280ce:	89 e5                	mov    %esp,%ebp
f01280d0:	57                   	push   %edi
f01280d1:	53                   	push   %ebx
f01280d2:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f01280d8:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01280dc:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01280e0:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01280e6:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01280ec:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01280f3:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01280fa:	e8 b2 4e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01280ff:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128102:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0128108:	b9 14 00 00 00       	mov    $0x14,%ecx
f012810d:	b8 00 00 00 00       	mov    $0x0,%eax
f0128112:	89 d7                	mov    %edx,%edi
f0128114:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128116:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f012811c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128121:	b8 00 00 00 00       	mov    $0x0,%eax
f0128126:	89 d7                	mov    %edx,%edi
f0128128:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012812a:	e8 82 4e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012812f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128132:	e8 91 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128137:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012813a:	83 ec 0c             	sub    $0xc,%esp
f012813d:	68 00 fc 1f 00       	push   $0x1ffc00
f0128142:	e8 45 fa fd ff       	call   f0107b8c <kmalloc>
f0128147:	83 c4 10             	add    $0x10,%esp
f012814a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128150:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128156:	89 c1                	mov    %eax,%ecx
f0128158:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012815f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128162:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128167:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012816a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012816d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128172:	f7 75 d4             	divl   -0x2c(%ebp)
f0128175:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128178:	29 d0                	sub    %edx,%eax
f012817a:	89 c3                	mov    %eax,%ebx
f012817c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128183:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128188:	0f b6 d0             	movzbl %al,%edx
f012818b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012818e:	01 d0                	add    %edx,%eax
f0128190:	48                   	dec    %eax
f0128191:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128194:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128197:	ba 00 00 00 00       	mov    $0x0,%edx
f012819c:	f7 75 cc             	divl   -0x34(%ebp)
f012819f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01281a2:	29 d0                	sub    %edx,%eax
f01281a4:	01 c3                	add    %eax,%ebx
f01281a6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01281ad:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01281b2:	0f b6 c0             	movzbl %al,%eax
f01281b5:	c1 e0 04             	shl    $0x4,%eax
f01281b8:	89 c2                	mov    %eax,%edx
f01281ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01281bd:	01 d0                	add    %edx,%eax
f01281bf:	48                   	dec    %eax
f01281c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01281c3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01281c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01281cb:	f7 75 c4             	divl   -0x3c(%ebp)
f01281ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01281d1:	29 d0                	sub    %edx,%eax
f01281d3:	01 d8                	add    %ebx,%eax
f01281d5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01281da:	39 c1                	cmp    %eax,%ecx
f01281dc:	74 17                	je     f01281f5 <test_kexpand+0x128>
f01281de:	83 ec 04             	sub    $0x4,%esp
f01281e1:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01281e6:	68 43 0b 00 00       	push   $0xb43
f01281eb:	68 fa b6 13 f0       	push   $0xf013b6fa
f01281f0:	e8 10 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01281f5:	e8 ce bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01281fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01281fd:	74 17                	je     f0128216 <test_kexpand+0x149>
f01281ff:	83 ec 04             	sub    $0x4,%esp
f0128202:	68 14 b7 13 f0       	push   $0xf013b714
f0128207:	68 44 0b 00 00       	push   $0xb44
f012820c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128211:	e8 ef 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128216:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128219:	e8 93 4d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012821e:	29 c3                	sub    %eax,%ebx
f0128220:	89 d8                	mov    %ebx,%eax
f0128222:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128227:	74 17                	je     f0128240 <test_kexpand+0x173>
f0128229:	83 ec 04             	sub    $0x4,%esp
f012822c:	68 7c b7 13 f0       	push   $0xf013b77c
f0128231:	68 45 0b 00 00       	push   $0xb45
f0128236:	68 fa b6 13 f0       	push   $0xf013b6fa
f012823b:	e8 c5 7f fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128240:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0128247:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012824a:	e8 62 4d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012824f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128252:	e8 71 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128257:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012825a:	83 ec 0c             	sub    $0xc,%esp
f012825d:	68 00 fc 1f 00       	push   $0x1ffc00
f0128262:	e8 25 f9 fd ff       	call   f0107b8c <kmalloc>
f0128267:	83 c4 10             	add    $0x10,%esp
f012826a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128270:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128276:	89 c1                	mov    %eax,%ecx
f0128278:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012827f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128282:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128287:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012828a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012828d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128292:	f7 75 bc             	divl   -0x44(%ebp)
f0128295:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128298:	29 d0                	sub    %edx,%eax
f012829a:	89 c3                	mov    %eax,%ebx
f012829c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01282a3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01282a8:	0f b6 d0             	movzbl %al,%edx
f01282ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01282ae:	01 d0                	add    %edx,%eax
f01282b0:	48                   	dec    %eax
f01282b1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01282b4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01282b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01282bc:	f7 75 b4             	divl   -0x4c(%ebp)
f01282bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01282c2:	29 d0                	sub    %edx,%eax
f01282c4:	01 c3                	add    %eax,%ebx
f01282c6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01282cd:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01282d2:	0f b6 c0             	movzbl %al,%eax
f01282d5:	c1 e0 04             	shl    $0x4,%eax
f01282d8:	89 c2                	mov    %eax,%edx
f01282da:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01282dd:	01 d0                	add    %edx,%eax
f01282df:	48                   	dec    %eax
f01282e0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01282e3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01282e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01282eb:	f7 75 ac             	divl   -0x54(%ebp)
f01282ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01282f1:	29 d0                	sub    %edx,%eax
f01282f3:	01 d8                	add    %ebx,%eax
f01282f5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01282fa:	39 c1                	cmp    %eax,%ecx
f01282fc:	74 17                	je     f0128315 <test_kexpand+0x248>
f01282fe:	83 ec 04             	sub    $0x4,%esp
f0128301:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0128306:	68 4c 0b 00 00       	push   $0xb4c
f012830b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128310:	e8 f0 7e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128315:	e8 ae ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012831a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012831d:	74 17                	je     f0128336 <test_kexpand+0x269>
f012831f:	83 ec 04             	sub    $0x4,%esp
f0128322:	68 14 b7 13 f0       	push   $0xf013b714
f0128327:	68 4d 0b 00 00       	push   $0xb4d
f012832c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128331:	e8 cf 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128336:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128339:	e8 73 4c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012833e:	29 c3                	sub    %eax,%ebx
f0128340:	89 d8                	mov    %ebx,%eax
f0128342:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128347:	74 17                	je     f0128360 <test_kexpand+0x293>
f0128349:	83 ec 04             	sub    $0x4,%esp
f012834c:	68 7c b7 13 f0       	push   $0xf013b77c
f0128351:	68 4e 0b 00 00       	push   $0xb4e
f0128356:	68 fa b6 13 f0       	push   $0xf013b6fa
f012835b:	e8 a5 7e fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128360:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0128367:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012836a:	e8 42 4c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012836f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128372:	e8 51 ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128377:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012837a:	83 ec 0c             	sub    $0xc,%esp
f012837d:	68 00 08 00 00       	push   $0x800
f0128382:	e8 05 f8 fd ff       	call   f0107b8c <kmalloc>
f0128387:	83 c4 10             	add    $0x10,%esp
f012838a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128390:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128396:	89 c1                	mov    %eax,%ecx
f0128398:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012839f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01283a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01283a7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01283aa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01283ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01283b2:	f7 75 a4             	divl   -0x5c(%ebp)
f01283b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01283b8:	29 d0                	sub    %edx,%eax
f01283ba:	89 c3                	mov    %eax,%ebx
f01283bc:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01283c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01283c8:	0f b6 d0             	movzbl %al,%edx
f01283cb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01283ce:	01 d0                	add    %edx,%eax
f01283d0:	48                   	dec    %eax
f01283d1:	89 45 98             	mov    %eax,-0x68(%ebp)
f01283d4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01283d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01283dc:	f7 75 9c             	divl   -0x64(%ebp)
f01283df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01283e2:	29 d0                	sub    %edx,%eax
f01283e4:	01 c3                	add    %eax,%ebx
f01283e6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01283ed:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01283f2:	0f b6 c0             	movzbl %al,%eax
f01283f5:	c1 e0 04             	shl    $0x4,%eax
f01283f8:	89 c2                	mov    %eax,%edx
f01283fa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01283fd:	01 d0                	add    %edx,%eax
f01283ff:	48                   	dec    %eax
f0128400:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128403:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128406:	ba 00 00 00 00       	mov    $0x0,%edx
f012840b:	f7 75 94             	divl   -0x6c(%ebp)
f012840e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128411:	29 d0                	sub    %edx,%eax
f0128413:	01 d8                	add    %ebx,%eax
f0128415:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012841a:	39 c1                	cmp    %eax,%ecx
f012841c:	74 17                	je     f0128435 <test_kexpand+0x368>
f012841e:	83 ec 04             	sub    $0x4,%esp
f0128421:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0128426:	68 55 0b 00 00       	push   $0xb55
f012842b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128430:	e8 d0 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128435:	e8 8e b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012843a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012843d:	74 17                	je     f0128456 <test_kexpand+0x389>
f012843f:	83 ec 04             	sub    $0x4,%esp
f0128442:	68 14 b7 13 f0       	push   $0xf013b714
f0128447:	68 56 0b 00 00       	push   $0xb56
f012844c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128451:	e8 af 7d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128456:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128459:	e8 53 4b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012845e:	29 c3                	sub    %eax,%ebx
f0128460:	89 d8                	mov    %ebx,%eax
f0128462:	83 f8 01             	cmp    $0x1,%eax
f0128465:	74 17                	je     f012847e <test_kexpand+0x3b1>
f0128467:	83 ec 04             	sub    $0x4,%esp
f012846a:	68 7c b7 13 f0       	push   $0xf013b77c
f012846f:	68 57 0b 00 00       	push   $0xb57
f0128474:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128479:	e8 87 7d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012847e:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0128485:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128488:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012848e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128491:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128498:	eb 0e                	jmp    f01284a8 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f012849a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012849d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01284a0:	01 d0                	add    %edx,%eax
f01284a2:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01284a5:	ff 45 f4             	incl   -0xc(%ebp)
f01284a8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01284ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284b1:	7f e7                	jg     f012849a <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01284b3:	e8 f9 4a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01284b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284bb:	e8 08 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01284c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01284c3:	83 ec 0c             	sub    $0xc,%esp
f01284c6:	68 00 08 00 00       	push   $0x800
f01284cb:	e8 bc f6 fd ff       	call   f0107b8c <kmalloc>
f01284d0:	83 c4 10             	add    $0x10,%esp
f01284d3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284d9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01284df:	89 c1                	mov    %eax,%ecx
f01284e1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01284e8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01284eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284f0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01284f3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01284f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01284fb:	f7 75 88             	divl   -0x78(%ebp)
f01284fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128501:	29 d0                	sub    %edx,%eax
f0128503:	89 c3                	mov    %eax,%ebx
f0128505:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012850c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128511:	0f b6 d0             	movzbl %al,%edx
f0128514:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128517:	01 d0                	add    %edx,%eax
f0128519:	48                   	dec    %eax
f012851a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128520:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128526:	ba 00 00 00 00       	mov    $0x0,%edx
f012852b:	f7 75 80             	divl   -0x80(%ebp)
f012852e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128534:	29 d0                	sub    %edx,%eax
f0128536:	01 c3                	add    %eax,%ebx
f0128538:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012853f:	10 00 00 
f0128542:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128547:	0f b6 c0             	movzbl %al,%eax
f012854a:	c1 e0 04             	shl    $0x4,%eax
f012854d:	89 c2                	mov    %eax,%edx
f012854f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128555:	01 d0                	add    %edx,%eax
f0128557:	48                   	dec    %eax
f0128558:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012855e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128564:	ba 00 00 00 00       	mov    $0x0,%edx
f0128569:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012856f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128575:	29 d0                	sub    %edx,%eax
f0128577:	01 d8                	add    %ebx,%eax
f0128579:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012857e:	39 c1                	cmp    %eax,%ecx
f0128580:	74 17                	je     f0128599 <test_kexpand+0x4cc>
f0128582:	83 ec 04             	sub    $0x4,%esp
f0128585:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012858a:	68 63 0b 00 00       	push   $0xb63
f012858f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128594:	e8 6c 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128599:	e8 2a b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012859e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285a1:	74 17                	je     f01285ba <test_kexpand+0x4ed>
f01285a3:	83 ec 04             	sub    $0x4,%esp
f01285a6:	68 14 b7 13 f0       	push   $0xf013b714
f01285ab:	68 64 0b 00 00       	push   $0xb64
f01285b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01285b5:	e8 4b 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285ba:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01285bd:	e8 ef 49 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01285c2:	29 c3                	sub    %eax,%ebx
f01285c4:	89 d8                	mov    %ebx,%eax
f01285c6:	83 f8 01             	cmp    $0x1,%eax
f01285c9:	74 17                	je     f01285e2 <test_kexpand+0x515>
f01285cb:	83 ec 04             	sub    $0x4,%esp
f01285ce:	68 7c b7 13 f0       	push   $0xf013b77c
f01285d3:	68 65 0b 00 00       	push   $0xb65
f01285d8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01285dd:	e8 23 7c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01285e2:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01285e9:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01285ec:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01285f2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01285f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01285fc:	eb 0e                	jmp    f012860c <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01285fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128601:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128604:	01 d0                	add    %edx,%eax
f0128606:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128609:	ff 45 f4             	incl   -0xc(%ebp)
f012860c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0128612:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128615:	7f e7                	jg     f01285fe <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128617:	e8 95 49 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012861c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012861f:	e8 a4 b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128624:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128627:	83 ec 0c             	sub    $0xc,%esp
f012862a:	68 00 1c 00 00       	push   $0x1c00
f012862f:	e8 58 f5 fd ff       	call   f0107b8c <kmalloc>
f0128634:	83 c4 10             	add    $0x10,%esp
f0128637:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012863d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128643:	89 c1                	mov    %eax,%ecx
f0128645:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012864c:	10 00 00 
f012864f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128655:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012865a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128660:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128666:	ba 00 00 00 00       	mov    $0x0,%edx
f012866b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128671:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128677:	29 d0                	sub    %edx,%eax
f0128679:	89 c3                	mov    %eax,%ebx
f012867b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128682:	10 00 00 
f0128685:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012868a:	0f b6 d0             	movzbl %al,%edx
f012868d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128693:	01 d0                	add    %edx,%eax
f0128695:	48                   	dec    %eax
f0128696:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012869c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01286a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01286a7:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01286ad:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01286b3:	29 d0                	sub    %edx,%eax
f01286b5:	01 c3                	add    %eax,%ebx
f01286b7:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01286be:	10 00 00 
f01286c1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01286c6:	0f b6 c0             	movzbl %al,%eax
f01286c9:	c1 e0 04             	shl    $0x4,%eax
f01286cc:	89 c2                	mov    %eax,%edx
f01286ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01286d4:	01 d0                	add    %edx,%eax
f01286d6:	48                   	dec    %eax
f01286d7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01286dd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01286e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01286e8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01286ee:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01286f4:	29 d0                	sub    %edx,%eax
f01286f6:	01 d8                	add    %ebx,%eax
f01286f8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01286fd:	39 c1                	cmp    %eax,%ecx
f01286ff:	74 17                	je     f0128718 <test_kexpand+0x64b>
f0128701:	83 ec 04             	sub    $0x4,%esp
f0128704:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0128709:	68 71 0b 00 00       	push   $0xb71
f012870e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128713:	e8 ed 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128718:	e8 ab b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012871d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128720:	74 17                	je     f0128739 <test_kexpand+0x66c>
f0128722:	83 ec 04             	sub    $0x4,%esp
f0128725:	68 14 b7 13 f0       	push   $0xf013b714
f012872a:	68 72 0b 00 00       	push   $0xb72
f012872f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128734:	e8 cc 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128739:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012873c:	e8 70 48 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128741:	29 c3                	sub    %eax,%ebx
f0128743:	89 d8                	mov    %ebx,%eax
f0128745:	83 f8 02             	cmp    $0x2,%eax
f0128748:	74 17                	je     f0128761 <test_kexpand+0x694>
f012874a:	83 ec 04             	sub    $0x4,%esp
f012874d:	68 7c b7 13 f0       	push   $0xf013b77c
f0128752:	68 73 0b 00 00       	push   $0xb73
f0128757:	68 fa b6 13 f0       	push   $0xf013b6fa
f012875c:	e8 a4 7a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128761:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128768:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012876b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128771:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128774:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012877b:	eb 0e                	jmp    f012878b <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f012877d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128780:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128783:	01 d0                	add    %edx,%eax
f0128785:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128788:	ff 45 f4             	incl   -0xc(%ebp)
f012878b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128791:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128794:	7f e7                	jg     f012877d <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128796:	e8 16 48 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012879b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012879e:	e8 25 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01287a6:	83 ec 0c             	sub    $0xc,%esp
f01287a9:	68 00 fc 2f 00       	push   $0x2ffc00
f01287ae:	e8 d9 f3 fd ff       	call   f0107b8c <kmalloc>
f01287b3:	83 c4 10             	add    $0x10,%esp
f01287b6:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01287bc:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01287c2:	89 c1                	mov    %eax,%ecx
f01287c4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01287cb:	10 00 00 
f01287ce:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01287d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01287d9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01287df:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01287e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01287ea:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01287f0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01287f6:	29 d0                	sub    %edx,%eax
f01287f8:	89 c3                	mov    %eax,%ebx
f01287fa:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128801:	10 00 00 
f0128804:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128809:	0f b6 d0             	movzbl %al,%edx
f012880c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128812:	01 d0                	add    %edx,%eax
f0128814:	48                   	dec    %eax
f0128815:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012881b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128821:	ba 00 00 00 00       	mov    $0x0,%edx
f0128826:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012882c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128832:	29 d0                	sub    %edx,%eax
f0128834:	01 c3                	add    %eax,%ebx
f0128836:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012883d:	10 00 00 
f0128840:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128845:	0f b6 c0             	movzbl %al,%eax
f0128848:	c1 e0 04             	shl    $0x4,%eax
f012884b:	89 c2                	mov    %eax,%edx
f012884d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128853:	01 d0                	add    %edx,%eax
f0128855:	48                   	dec    %eax
f0128856:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012885c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128862:	ba 00 00 00 00       	mov    $0x0,%edx
f0128867:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012886d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128873:	29 d0                	sub    %edx,%eax
f0128875:	01 d8                	add    %ebx,%eax
f0128877:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012887c:	39 c1                	cmp    %eax,%ecx
f012887e:	74 17                	je     f0128897 <test_kexpand+0x7ca>
f0128880:	83 ec 04             	sub    $0x4,%esp
f0128883:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0128888:	68 7f 0b 00 00       	push   $0xb7f
f012888d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128892:	e8 6e 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128897:	e8 2c b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012889c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012889f:	74 17                	je     f01288b8 <test_kexpand+0x7eb>
f01288a1:	83 ec 04             	sub    $0x4,%esp
f01288a4:	68 14 b7 13 f0       	push   $0xf013b714
f01288a9:	68 80 0b 00 00       	push   $0xb80
f01288ae:	68 fa b6 13 f0       	push   $0xf013b6fa
f01288b3:	e8 4d 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288b8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01288bb:	e8 f1 46 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01288c0:	29 c3                	sub    %eax,%ebx
f01288c2:	89 d8                	mov    %ebx,%eax
f01288c4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01288c9:	74 17                	je     f01288e2 <test_kexpand+0x815>
f01288cb:	83 ec 04             	sub    $0x4,%esp
f01288ce:	68 7c b7 13 f0       	push   $0xf013b77c
f01288d3:	68 81 0b 00 00       	push   $0xb81
f01288d8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01288dd:	e8 23 79 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01288e2:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01288e9:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01288ec:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01288f2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01288f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288fc:	eb 0e                	jmp    f012890c <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f01288fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128901:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128904:	01 d0                	add    %edx,%eax
f0128906:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128909:	ff 45 f4             	incl   -0xc(%ebp)
f012890c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128912:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128915:	7f e7                	jg     f01288fe <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128917:	e8 95 46 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012891c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012891f:	e8 a4 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128924:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128927:	83 ec 0c             	sub    $0xc,%esp
f012892a:	68 00 00 60 00       	push   $0x600000
f012892f:	e8 58 f2 fd ff       	call   f0107b8c <kmalloc>
f0128934:	83 c4 10             	add    $0x10,%esp
f0128937:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012893d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128943:	89 c1                	mov    %eax,%ecx
f0128945:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012894c:	10 00 00 
f012894f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128955:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012895a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128960:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128966:	ba 00 00 00 00       	mov    $0x0,%edx
f012896b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128971:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128977:	29 d0                	sub    %edx,%eax
f0128979:	89 c3                	mov    %eax,%ebx
f012897b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128982:	10 00 00 
f0128985:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012898a:	0f b6 d0             	movzbl %al,%edx
f012898d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128993:	01 d0                	add    %edx,%eax
f0128995:	48                   	dec    %eax
f0128996:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012899c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01289a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01289a7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01289ad:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01289b3:	29 d0                	sub    %edx,%eax
f01289b5:	01 c3                	add    %eax,%ebx
f01289b7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01289be:	10 00 00 
f01289c1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01289c6:	0f b6 c0             	movzbl %al,%eax
f01289c9:	c1 e0 04             	shl    $0x4,%eax
f01289cc:	89 c2                	mov    %eax,%edx
f01289ce:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01289d4:	01 d0                	add    %edx,%eax
f01289d6:	48                   	dec    %eax
f01289d7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01289dd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01289e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01289e8:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01289ee:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01289f4:	29 d0                	sub    %edx,%eax
f01289f6:	01 d8                	add    %ebx,%eax
f01289f8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01289fd:	39 c1                	cmp    %eax,%ecx
f01289ff:	74 17                	je     f0128a18 <test_kexpand+0x94b>
f0128a01:	83 ec 04             	sub    $0x4,%esp
f0128a04:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0128a09:	68 8d 0b 00 00       	push   $0xb8d
f0128a0e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128a13:	e8 ed 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a18:	e8 ab b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128a1d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a20:	74 17                	je     f0128a39 <test_kexpand+0x96c>
f0128a22:	83 ec 04             	sub    $0x4,%esp
f0128a25:	68 14 b7 13 f0       	push   $0xf013b714
f0128a2a:	68 8e 0b 00 00       	push   $0xb8e
f0128a2f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128a34:	e8 cc 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a39:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a3c:	e8 70 45 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128a41:	29 c3                	sub    %eax,%ebx
f0128a43:	89 d8                	mov    %ebx,%eax
f0128a45:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128a4a:	74 17                	je     f0128a63 <test_kexpand+0x996>
f0128a4c:	83 ec 04             	sub    $0x4,%esp
f0128a4f:	68 7c b7 13 f0       	push   $0xf013b77c
f0128a54:	68 8f 0b 00 00       	push   $0xb8f
f0128a59:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128a5e:	e8 a2 77 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128a63:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128a6a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128a6d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128a73:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128a79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a80:	eb 1a                	jmp    f0128a9c <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a85:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128a8c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128a92:	01 c2                	add    %eax,%edx
f0128a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a97:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128a99:	ff 45 f4             	incl   -0xc(%ebp)
f0128a9c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128aa2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128aa5:	7d db                	jge    f0128a82 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128aa7:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128aae:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ab1:	e8 fb 44 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128ab6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ab9:	e8 0a b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128abe:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128ac1:	83 ec 0c             	sub    $0xc,%esp
f0128ac4:	68 00 00 70 00       	push   $0x700000
f0128ac9:	e8 61 f3 fd ff       	call   f0107e2f <kexpand>
f0128ace:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128ad1:	e8 f2 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ad6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ad9:	74 19                	je     f0128af4 <test_kexpand+0xa27>
f0128adb:	68 94 c4 13 f0       	push   $0xf013c494
f0128ae0:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128ae5:	68 a0 0b 00 00       	push   $0xba0
f0128aea:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128aef:	e8 11 77 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128af4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128af7:	e8 b5 44 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128afc:	29 c3                	sub    %eax,%ebx
f0128afe:	89 d8                	mov    %ebx,%eax
f0128b00:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128b05:	74 19                	je     f0128b20 <test_kexpand+0xa53>
f0128b07:	68 dc c4 13 f0       	push   $0xf013c4dc
f0128b0c:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128b11:	68 a1 0b 00 00       	push   $0xba1
f0128b16:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128b1b:	e8 e5 76 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128b20:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128b26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128b29:	eb 1a                	jmp    f0128b45 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128b35:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128b3b:	01 c2                	add    %eax,%edx
f0128b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b40:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128b42:	ff 45 f4             	incl   -0xc(%ebp)
f0128b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b48:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128b4e:	7c db                	jl     f0128b2b <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128b50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b57:	eb 37                	jmp    f0128b90 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128b63:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128b69:	01 d0                	add    %edx,%eax
f0128b6b:	8b 10                	mov    (%eax),%edx
f0128b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b70:	39 c2                	cmp    %eax,%edx
f0128b72:	74 19                	je     f0128b8d <test_kexpand+0xac0>
f0128b74:	68 0c c5 13 f0       	push   $0xf013c50c
f0128b79:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128b7e:	68 ad 0b 00 00       	push   $0xbad
f0128b83:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128b88:	e8 78 76 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128b8d:	ff 45 f4             	incl   -0xc(%ebp)
f0128b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b93:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128b99:	7c be                	jl     f0128b59 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128b9b:	e8 11 44 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128ba0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ba3:	e8 20 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ba8:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128bab:	83 ec 0c             	sub    $0xc,%esp
f0128bae:	68 00 00 a0 00       	push   $0xa00000
f0128bb3:	e8 77 f2 fd ff       	call   f0107e2f <kexpand>
f0128bb8:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128bbb:	e8 08 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128bc0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bc3:	74 19                	je     f0128bde <test_kexpand+0xb11>
f0128bc5:	68 94 c4 13 f0       	push   $0xf013c494
f0128bca:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128bcf:	68 b8 0b 00 00       	push   $0xbb8
f0128bd4:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128bd9:	e8 27 76 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128bde:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128be1:	e8 cb 43 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128be6:	29 c3                	sub    %eax,%ebx
f0128be8:	89 d8                	mov    %ebx,%eax
f0128bea:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128bef:	74 19                	je     f0128c0a <test_kexpand+0xb3d>
f0128bf1:	68 18 c5 13 f0       	push   $0xf013c518
f0128bf6:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128bfb:	68 b9 0b 00 00       	push   $0xbb9
f0128c00:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128c05:	e8 fb 75 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c0a:	e8 a2 43 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128c0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c12:	e8 b1 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c17:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128c1a:	83 ec 0c             	sub    $0xc,%esp
f0128c1d:	68 00 00 40 00       	push   $0x400000
f0128c22:	e8 65 ef fd ff       	call   f0107b8c <kmalloc>
f0128c27:	83 c4 10             	add    $0x10,%esp
f0128c2a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128c30:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128c36:	89 c1                	mov    %eax,%ecx
f0128c38:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128c3f:	10 00 00 
f0128c42:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128c48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c4d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128c53:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128c59:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c5e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128c64:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128c6a:	29 d0                	sub    %edx,%eax
f0128c6c:	89 c3                	mov    %eax,%ebx
f0128c6e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128c75:	10 00 00 
f0128c78:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128c7d:	0f b6 d0             	movzbl %al,%edx
f0128c80:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128c86:	01 d0                	add    %edx,%eax
f0128c88:	48                   	dec    %eax
f0128c89:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128c8f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128c95:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c9a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128ca0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128ca6:	29 d0                	sub    %edx,%eax
f0128ca8:	01 c3                	add    %eax,%ebx
f0128caa:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128cb1:	10 00 00 
f0128cb4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128cb9:	0f b6 c0             	movzbl %al,%eax
f0128cbc:	c1 e0 04             	shl    $0x4,%eax
f0128cbf:	89 c2                	mov    %eax,%edx
f0128cc1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128cc7:	01 d0                	add    %edx,%eax
f0128cc9:	48                   	dec    %eax
f0128cca:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128cd0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128cd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cdb:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128ce1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ce7:	29 d0                	sub    %edx,%eax
f0128ce9:	01 d8                	add    %ebx,%eax
f0128ceb:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128cf0:	39 c1                	cmp    %eax,%ecx
f0128cf2:	74 17                	je     f0128d0b <test_kexpand+0xc3e>
f0128cf4:	83 ec 04             	sub    $0x4,%esp
f0128cf7:	68 48 c5 13 f0       	push   $0xf013c548
f0128cfc:	68 c4 0b 00 00       	push   $0xbc4
f0128d01:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128d06:	e8 fa 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d0b:	e8 b8 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d10:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d13:	74 17                	je     f0128d2c <test_kexpand+0xc5f>
f0128d15:	83 ec 04             	sub    $0x4,%esp
f0128d18:	68 14 b7 13 f0       	push   $0xf013b714
f0128d1d:	68 c5 0b 00 00       	push   $0xbc5
f0128d22:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128d27:	e8 d9 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d2c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d2f:	e8 7d 42 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128d34:	29 c3                	sub    %eax,%ebx
f0128d36:	89 d8                	mov    %ebx,%eax
f0128d38:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128d3d:	74 17                	je     f0128d56 <test_kexpand+0xc89>
f0128d3f:	83 ec 04             	sub    $0x4,%esp
f0128d42:	68 7c b7 13 f0       	push   $0xf013b77c
f0128d47:	68 c6 0b 00 00       	push   $0xbc6
f0128d4c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128d51:	e8 af 74 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128d56:	e8 56 42 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128d5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d5e:	e8 65 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d63:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128d66:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128d6c:	83 ec 0c             	sub    $0xc,%esp
f0128d6f:	50                   	push   %eax
f0128d70:	e8 e2 ee fd ff       	call   f0107c57 <kfree>
f0128d75:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d78:	e8 4b b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d7d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d80:	74 17                	je     f0128d99 <test_kexpand+0xccc>
f0128d82:	83 ec 04             	sub    $0x4,%esp
f0128d85:	68 14 b7 13 f0       	push   $0xf013b714
f0128d8a:	68 cf 0b 00 00       	push   $0xbcf
f0128d8f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128d94:	e8 6c 74 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128d99:	e8 13 42 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128d9e:	89 c2                	mov    %eax,%edx
f0128da0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128da3:	29 c2                	sub    %eax,%edx
f0128da5:	89 d0                	mov    %edx,%eax
f0128da7:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128dac:	74 17                	je     f0128dc5 <test_kexpand+0xcf8>
f0128dae:	83 ec 04             	sub    $0x4,%esp
f0128db1:	68 ac bf 13 f0       	push   $0xf013bfac
f0128db6:	68 d0 0b 00 00       	push   $0xbd0
f0128dbb:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128dc0:	e8 40 74 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128dc5:	e8 e7 41 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128dca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128dcd:	e8 f6 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128dd2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128dd5:	83 ec 0c             	sub    $0xc,%esp
f0128dd8:	68 00 50 40 00       	push   $0x405000
f0128ddd:	e8 4d f0 fd ff       	call   f0107e2f <kexpand>
f0128de2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128de5:	e8 de af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128dea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ded:	74 19                	je     f0128e08 <test_kexpand+0xd3b>
f0128def:	68 94 c4 13 f0       	push   $0xf013c494
f0128df4:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128df9:	68 da 0b 00 00       	push   $0xbda
f0128dfe:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128e03:	e8 fd 73 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128e08:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e0b:	e8 a1 41 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128e10:	29 c3                	sub    %eax,%ebx
f0128e12:	89 d8                	mov    %ebx,%eax
f0128e14:	83 f8 05             	cmp    $0x5,%eax
f0128e17:	74 19                	je     f0128e32 <test_kexpand+0xd65>
f0128e19:	68 70 c5 13 f0       	push   $0xf013c570
f0128e1e:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0128e23:	68 db 0b 00 00       	push   $0xbdb
f0128e28:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128e2d:	e8 d3 73 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128e32:	83 ec 0c             	sub    $0xc,%esp
f0128e35:	68 58 c4 13 f0       	push   $0xf013c458
f0128e3a:	e8 cf 7e fd ff       	call   f0100d0e <cprintf>
f0128e3f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128e42:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128e47:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128e4a:	5b                   	pop    %ebx
f0128e4b:	5f                   	pop    %edi
f0128e4c:	5d                   	pop    %ebp
f0128e4d:	c3                   	ret    

f0128e4e <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128e4e:	55                   	push   %ebp
f0128e4f:	89 e5                	mov    %esp,%ebp
f0128e51:	57                   	push   %edi
f0128e52:	53                   	push   %ebx
f0128e53:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128e59:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128e5d:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128e61:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128e67:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128e6d:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128e74:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128e7b:	e8 31 41 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128e80:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128e83:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128e89:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128e8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0128e93:	89 d7                	mov    %edx,%edi
f0128e95:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128e97:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128e9d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128ea2:	b8 00 00 00 00       	mov    $0x0,%eax
f0128ea7:	89 d7                	mov    %edx,%edi
f0128ea9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128eab:	e8 01 41 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128eb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128eb3:	e8 10 af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128eb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128ebb:	83 ec 0c             	sub    $0xc,%esp
f0128ebe:	68 00 fc 1f 00       	push   $0x1ffc00
f0128ec3:	e8 c4 ec fd ff       	call   f0107b8c <kmalloc>
f0128ec8:	83 c4 10             	add    $0x10,%esp
f0128ecb:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ed1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128ed7:	89 c1                	mov    %eax,%ecx
f0128ed9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128ee0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128ee3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ee8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128eeb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128eee:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ef3:	f7 75 d4             	divl   -0x2c(%ebp)
f0128ef6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128ef9:	29 d0                	sub    %edx,%eax
f0128efb:	89 c3                	mov    %eax,%ebx
f0128efd:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128f04:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128f09:	0f b6 d0             	movzbl %al,%edx
f0128f0c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128f0f:	01 d0                	add    %edx,%eax
f0128f11:	48                   	dec    %eax
f0128f12:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128f15:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128f18:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f1d:	f7 75 cc             	divl   -0x34(%ebp)
f0128f20:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128f23:	29 d0                	sub    %edx,%eax
f0128f25:	01 c3                	add    %eax,%ebx
f0128f27:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128f2e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0128f33:	0f b6 c0             	movzbl %al,%eax
f0128f36:	c1 e0 04             	shl    $0x4,%eax
f0128f39:	89 c2                	mov    %eax,%edx
f0128f3b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128f3e:	01 d0                	add    %edx,%eax
f0128f40:	48                   	dec    %eax
f0128f41:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128f44:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128f47:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f4c:	f7 75 c4             	divl   -0x3c(%ebp)
f0128f4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128f52:	29 d0                	sub    %edx,%eax
f0128f54:	01 d8                	add    %ebx,%eax
f0128f56:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128f5b:	39 c1                	cmp    %eax,%ecx
f0128f5d:	74 17                	je     f0128f76 <test_kshrink+0x128>
f0128f5f:	83 ec 04             	sub    $0x4,%esp
f0128f62:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0128f67:	68 01 0c 00 00       	push   $0xc01
f0128f6c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128f71:	e8 8f 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f76:	e8 4d ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f7e:	74 17                	je     f0128f97 <test_kshrink+0x149>
f0128f80:	83 ec 04             	sub    $0x4,%esp
f0128f83:	68 14 b7 13 f0       	push   $0xf013b714
f0128f88:	68 02 0c 00 00       	push   $0xc02
f0128f8d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128f92:	e8 6e 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f97:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f9a:	e8 12 40 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128f9f:	29 c3                	sub    %eax,%ebx
f0128fa1:	89 d8                	mov    %ebx,%eax
f0128fa3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128fa8:	74 17                	je     f0128fc1 <test_kshrink+0x173>
f0128faa:	83 ec 04             	sub    $0x4,%esp
f0128fad:	68 7c b7 13 f0       	push   $0xf013b77c
f0128fb2:	68 03 0c 00 00       	push   $0xc03
f0128fb7:	68 fa b6 13 f0       	push   $0xf013b6fa
f0128fbc:	e8 44 72 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128fc1:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128fc8:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128fcb:	e8 e1 3f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0128fd0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fd3:	e8 f0 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128fd8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128fdb:	83 ec 0c             	sub    $0xc,%esp
f0128fde:	68 00 fc 1f 00       	push   $0x1ffc00
f0128fe3:	e8 a4 eb fd ff       	call   f0107b8c <kmalloc>
f0128fe8:	83 c4 10             	add    $0x10,%esp
f0128feb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ff1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128ff7:	89 c1                	mov    %eax,%ecx
f0128ff9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129000:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129003:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129008:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012900b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012900e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129013:	f7 75 bc             	divl   -0x44(%ebp)
f0129016:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129019:	29 d0                	sub    %edx,%eax
f012901b:	89 c3                	mov    %eax,%ebx
f012901d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129024:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129029:	0f b6 d0             	movzbl %al,%edx
f012902c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012902f:	01 d0                	add    %edx,%eax
f0129031:	48                   	dec    %eax
f0129032:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129035:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129038:	ba 00 00 00 00       	mov    $0x0,%edx
f012903d:	f7 75 b4             	divl   -0x4c(%ebp)
f0129040:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129043:	29 d0                	sub    %edx,%eax
f0129045:	01 c3                	add    %eax,%ebx
f0129047:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012904e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129053:	0f b6 c0             	movzbl %al,%eax
f0129056:	c1 e0 04             	shl    $0x4,%eax
f0129059:	89 c2                	mov    %eax,%edx
f012905b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012905e:	01 d0                	add    %edx,%eax
f0129060:	48                   	dec    %eax
f0129061:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129064:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129067:	ba 00 00 00 00       	mov    $0x0,%edx
f012906c:	f7 75 ac             	divl   -0x54(%ebp)
f012906f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129072:	29 d0                	sub    %edx,%eax
f0129074:	01 d8                	add    %ebx,%eax
f0129076:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012907b:	39 c1                	cmp    %eax,%ecx
f012907d:	74 17                	je     f0129096 <test_kshrink+0x248>
f012907f:	83 ec 04             	sub    $0x4,%esp
f0129082:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0129087:	68 0a 0c 00 00       	push   $0xc0a
f012908c:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129091:	e8 6f 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129096:	e8 2d ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012909b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012909e:	74 17                	je     f01290b7 <test_kshrink+0x269>
f01290a0:	83 ec 04             	sub    $0x4,%esp
f01290a3:	68 14 b7 13 f0       	push   $0xf013b714
f01290a8:	68 0b 0c 00 00       	push   $0xc0b
f01290ad:	68 fa b6 13 f0       	push   $0xf013b6fa
f01290b2:	e8 4e 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290b7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01290ba:	e8 f2 3e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01290bf:	29 c3                	sub    %eax,%ebx
f01290c1:	89 d8                	mov    %ebx,%eax
f01290c3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01290c8:	74 17                	je     f01290e1 <test_kshrink+0x293>
f01290ca:	83 ec 04             	sub    $0x4,%esp
f01290cd:	68 7c b7 13 f0       	push   $0xf013b77c
f01290d2:	68 0c 0c 00 00       	push   $0xc0c
f01290d7:	68 fa b6 13 f0       	push   $0xf013b6fa
f01290dc:	e8 24 71 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01290e1:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f01290e8:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01290eb:	e8 c1 3e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01290f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290f3:	e8 d0 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01290f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01290fb:	83 ec 0c             	sub    $0xc,%esp
f01290fe:	68 00 08 00 00       	push   $0x800
f0129103:	e8 84 ea fd ff       	call   f0107b8c <kmalloc>
f0129108:	83 c4 10             	add    $0x10,%esp
f012910b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129111:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129117:	89 c1                	mov    %eax,%ecx
f0129119:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129120:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129123:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129128:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012912b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012912e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129133:	f7 75 a4             	divl   -0x5c(%ebp)
f0129136:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129139:	29 d0                	sub    %edx,%eax
f012913b:	89 c3                	mov    %eax,%ebx
f012913d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129144:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129149:	0f b6 d0             	movzbl %al,%edx
f012914c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012914f:	01 d0                	add    %edx,%eax
f0129151:	48                   	dec    %eax
f0129152:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129155:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129158:	ba 00 00 00 00       	mov    $0x0,%edx
f012915d:	f7 75 9c             	divl   -0x64(%ebp)
f0129160:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129163:	29 d0                	sub    %edx,%eax
f0129165:	01 c3                	add    %eax,%ebx
f0129167:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012916e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129173:	0f b6 c0             	movzbl %al,%eax
f0129176:	c1 e0 04             	shl    $0x4,%eax
f0129179:	89 c2                	mov    %eax,%edx
f012917b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012917e:	01 d0                	add    %edx,%eax
f0129180:	48                   	dec    %eax
f0129181:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129184:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129187:	ba 00 00 00 00       	mov    $0x0,%edx
f012918c:	f7 75 94             	divl   -0x6c(%ebp)
f012918f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129192:	29 d0                	sub    %edx,%eax
f0129194:	01 d8                	add    %ebx,%eax
f0129196:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012919b:	39 c1                	cmp    %eax,%ecx
f012919d:	74 17                	je     f01291b6 <test_kshrink+0x368>
f012919f:	83 ec 04             	sub    $0x4,%esp
f01291a2:	68 e0 b7 13 f0       	push   $0xf013b7e0
f01291a7:	68 13 0c 00 00       	push   $0xc13
f01291ac:	68 fa b6 13 f0       	push   $0xf013b6fa
f01291b1:	e8 4f 70 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291b6:	e8 0d ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01291bb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291be:	74 17                	je     f01291d7 <test_kshrink+0x389>
f01291c0:	83 ec 04             	sub    $0x4,%esp
f01291c3:	68 14 b7 13 f0       	push   $0xf013b714
f01291c8:	68 14 0c 00 00       	push   $0xc14
f01291cd:	68 fa b6 13 f0       	push   $0xf013b6fa
f01291d2:	e8 2e 70 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01291d7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01291da:	e8 d2 3d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01291df:	29 c3                	sub    %eax,%ebx
f01291e1:	89 d8                	mov    %ebx,%eax
f01291e3:	83 f8 01             	cmp    $0x1,%eax
f01291e6:	74 17                	je     f01291ff <test_kshrink+0x3b1>
f01291e8:	83 ec 04             	sub    $0x4,%esp
f01291eb:	68 7c b7 13 f0       	push   $0xf013b77c
f01291f0:	68 15 0c 00 00       	push   $0xc15
f01291f5:	68 fa b6 13 f0       	push   $0xf013b6fa
f01291fa:	e8 06 70 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01291ff:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0129206:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129209:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012920f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129212:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129219:	eb 0e                	jmp    f0129229 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f012921b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012921e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129221:	01 d0                	add    %edx,%eax
f0129223:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129226:	ff 45 f4             	incl   -0xc(%ebp)
f0129229:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012922f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129232:	7f e7                	jg     f012921b <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129234:	e8 78 3d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129239:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012923c:	e8 87 ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129241:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129244:	83 ec 0c             	sub    $0xc,%esp
f0129247:	68 00 08 00 00       	push   $0x800
f012924c:	e8 3b e9 fd ff       	call   f0107b8c <kmalloc>
f0129251:	83 c4 10             	add    $0x10,%esp
f0129254:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012925a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129260:	89 c1                	mov    %eax,%ecx
f0129262:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0129269:	8b 45 88             	mov    -0x78(%ebp),%eax
f012926c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129271:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0129274:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129277:	ba 00 00 00 00       	mov    $0x0,%edx
f012927c:	f7 75 88             	divl   -0x78(%ebp)
f012927f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129282:	29 d0                	sub    %edx,%eax
f0129284:	89 c3                	mov    %eax,%ebx
f0129286:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012928d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129292:	0f b6 d0             	movzbl %al,%edx
f0129295:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129298:	01 d0                	add    %edx,%eax
f012929a:	48                   	dec    %eax
f012929b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01292a1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01292a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ac:	f7 75 80             	divl   -0x80(%ebp)
f01292af:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01292b5:	29 d0                	sub    %edx,%eax
f01292b7:	01 c3                	add    %eax,%ebx
f01292b9:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01292c0:	10 00 00 
f01292c3:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01292c8:	0f b6 c0             	movzbl %al,%eax
f01292cb:	c1 e0 04             	shl    $0x4,%eax
f01292ce:	89 c2                	mov    %eax,%edx
f01292d0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01292d6:	01 d0                	add    %edx,%eax
f01292d8:	48                   	dec    %eax
f01292d9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01292df:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01292e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ea:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01292f0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01292f6:	29 d0                	sub    %edx,%eax
f01292f8:	01 d8                	add    %ebx,%eax
f01292fa:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01292ff:	39 c1                	cmp    %eax,%ecx
f0129301:	74 17                	je     f012931a <test_kshrink+0x4cc>
f0129303:	83 ec 04             	sub    $0x4,%esp
f0129306:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012930b:	68 21 0c 00 00       	push   $0xc21
f0129310:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129315:	e8 eb 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012931a:	e8 a9 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012931f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129322:	74 17                	je     f012933b <test_kshrink+0x4ed>
f0129324:	83 ec 04             	sub    $0x4,%esp
f0129327:	68 14 b7 13 f0       	push   $0xf013b714
f012932c:	68 22 0c 00 00       	push   $0xc22
f0129331:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129336:	e8 ca 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012933b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012933e:	e8 6e 3c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129343:	29 c3                	sub    %eax,%ebx
f0129345:	89 d8                	mov    %ebx,%eax
f0129347:	83 f8 01             	cmp    $0x1,%eax
f012934a:	74 17                	je     f0129363 <test_kshrink+0x515>
f012934c:	83 ec 04             	sub    $0x4,%esp
f012934f:	68 7c b7 13 f0       	push   $0xf013b77c
f0129354:	68 23 0c 00 00       	push   $0xc23
f0129359:	68 fa b6 13 f0       	push   $0xf013b6fa
f012935e:	e8 a2 6e fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129363:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f012936a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012936d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129373:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129376:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012937d:	eb 0e                	jmp    f012938d <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f012937f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129382:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129385:	01 d0                	add    %edx,%eax
f0129387:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012938a:	ff 45 f4             	incl   -0xc(%ebp)
f012938d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129393:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129396:	7f e7                	jg     f012937f <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129398:	e8 14 3c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012939d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293a0:	e8 23 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01293a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01293a8:	83 ec 0c             	sub    $0xc,%esp
f01293ab:	68 00 1c 00 00       	push   $0x1c00
f01293b0:	e8 d7 e7 fd ff       	call   f0107b8c <kmalloc>
f01293b5:	83 c4 10             	add    $0x10,%esp
f01293b8:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293be:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01293c4:	89 c1                	mov    %eax,%ecx
f01293c6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01293cd:	10 00 00 
f01293d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01293d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01293db:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01293e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01293e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01293ec:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01293f2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01293f8:	29 d0                	sub    %edx,%eax
f01293fa:	89 c3                	mov    %eax,%ebx
f01293fc:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129403:	10 00 00 
f0129406:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012940b:	0f b6 d0             	movzbl %al,%edx
f012940e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129414:	01 d0                	add    %edx,%eax
f0129416:	48                   	dec    %eax
f0129417:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012941d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129423:	ba 00 00 00 00       	mov    $0x0,%edx
f0129428:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012942e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129434:	29 d0                	sub    %edx,%eax
f0129436:	01 c3                	add    %eax,%ebx
f0129438:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012943f:	10 00 00 
f0129442:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129447:	0f b6 c0             	movzbl %al,%eax
f012944a:	c1 e0 04             	shl    $0x4,%eax
f012944d:	89 c2                	mov    %eax,%edx
f012944f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129455:	01 d0                	add    %edx,%eax
f0129457:	48                   	dec    %eax
f0129458:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012945e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129464:	ba 00 00 00 00       	mov    $0x0,%edx
f0129469:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012946f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129475:	29 d0                	sub    %edx,%eax
f0129477:	01 d8                	add    %ebx,%eax
f0129479:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012947e:	39 c1                	cmp    %eax,%ecx
f0129480:	74 17                	je     f0129499 <test_kshrink+0x64b>
f0129482:	83 ec 04             	sub    $0x4,%esp
f0129485:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012948a:	68 2f 0c 00 00       	push   $0xc2f
f012948f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129494:	e8 6c 6d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129499:	e8 2a a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012949e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01294a1:	74 17                	je     f01294ba <test_kshrink+0x66c>
f01294a3:	83 ec 04             	sub    $0x4,%esp
f01294a6:	68 14 b7 13 f0       	push   $0xf013b714
f01294ab:	68 30 0c 00 00       	push   $0xc30
f01294b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01294b5:	e8 4b 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01294ba:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01294bd:	e8 ef 3a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01294c2:	29 c3                	sub    %eax,%ebx
f01294c4:	89 d8                	mov    %ebx,%eax
f01294c6:	83 f8 02             	cmp    $0x2,%eax
f01294c9:	74 17                	je     f01294e2 <test_kshrink+0x694>
f01294cb:	83 ec 04             	sub    $0x4,%esp
f01294ce:	68 7c b7 13 f0       	push   $0xf013b77c
f01294d3:	68 31 0c 00 00       	push   $0xc31
f01294d8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01294dd:	e8 23 6d fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01294e2:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01294e9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01294ec:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01294f2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01294f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294fc:	eb 0e                	jmp    f012950c <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01294fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129501:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129504:	01 d0                	add    %edx,%eax
f0129506:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129509:	ff 45 f4             	incl   -0xc(%ebp)
f012950c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129512:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129515:	7f e7                	jg     f01294fe <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129517:	e8 95 3a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012951c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012951f:	e8 a4 a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129524:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129527:	83 ec 0c             	sub    $0xc,%esp
f012952a:	68 00 fc 2f 00       	push   $0x2ffc00
f012952f:	e8 58 e6 fd ff       	call   f0107b8c <kmalloc>
f0129534:	83 c4 10             	add    $0x10,%esp
f0129537:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012953d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129543:	89 c1                	mov    %eax,%ecx
f0129545:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012954c:	10 00 00 
f012954f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129555:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012955a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129560:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129566:	ba 00 00 00 00       	mov    $0x0,%edx
f012956b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129571:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129577:	29 d0                	sub    %edx,%eax
f0129579:	89 c3                	mov    %eax,%ebx
f012957b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129582:	10 00 00 
f0129585:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012958a:	0f b6 d0             	movzbl %al,%edx
f012958d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129593:	01 d0                	add    %edx,%eax
f0129595:	48                   	dec    %eax
f0129596:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012959c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01295a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01295a7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01295ad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01295b3:	29 d0                	sub    %edx,%eax
f01295b5:	01 c3                	add    %eax,%ebx
f01295b7:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01295be:	10 00 00 
f01295c1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01295c6:	0f b6 c0             	movzbl %al,%eax
f01295c9:	c1 e0 04             	shl    $0x4,%eax
f01295cc:	89 c2                	mov    %eax,%edx
f01295ce:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01295d4:	01 d0                	add    %edx,%eax
f01295d6:	48                   	dec    %eax
f01295d7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01295dd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01295e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01295e8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01295ee:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01295f4:	29 d0                	sub    %edx,%eax
f01295f6:	01 d8                	add    %ebx,%eax
f01295f8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01295fd:	39 c1                	cmp    %eax,%ecx
f01295ff:	74 17                	je     f0129618 <test_kshrink+0x7ca>
f0129601:	83 ec 04             	sub    $0x4,%esp
f0129604:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0129609:	68 3d 0c 00 00       	push   $0xc3d
f012960e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129613:	e8 ed 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129618:	e8 ab a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012961d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129620:	74 17                	je     f0129639 <test_kshrink+0x7eb>
f0129622:	83 ec 04             	sub    $0x4,%esp
f0129625:	68 14 b7 13 f0       	push   $0xf013b714
f012962a:	68 3e 0c 00 00       	push   $0xc3e
f012962f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129634:	e8 cc 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129639:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012963c:	e8 70 39 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129641:	29 c3                	sub    %eax,%ebx
f0129643:	89 d8                	mov    %ebx,%eax
f0129645:	3d 00 03 00 00       	cmp    $0x300,%eax
f012964a:	74 17                	je     f0129663 <test_kshrink+0x815>
f012964c:	83 ec 04             	sub    $0x4,%esp
f012964f:	68 7c b7 13 f0       	push   $0xf013b77c
f0129654:	68 3f 0c 00 00       	push   $0xc3f
f0129659:	68 fa b6 13 f0       	push   $0xf013b6fa
f012965e:	e8 a2 6b fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129663:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f012966a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012966d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129673:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129676:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012967d:	eb 0e                	jmp    f012968d <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f012967f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129682:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129685:	01 d0                	add    %edx,%eax
f0129687:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012968a:	ff 45 f4             	incl   -0xc(%ebp)
f012968d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129693:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129696:	7f e7                	jg     f012967f <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129698:	e8 14 39 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012969d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296a0:	e8 23 a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01296a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01296a8:	83 ec 0c             	sub    $0xc,%esp
f01296ab:	68 00 00 60 00       	push   $0x600000
f01296b0:	e8 d7 e4 fd ff       	call   f0107b8c <kmalloc>
f01296b5:	83 c4 10             	add    $0x10,%esp
f01296b8:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296be:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01296c4:	89 c1                	mov    %eax,%ecx
f01296c6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01296cd:	10 00 00 
f01296d0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01296d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296db:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01296e1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01296e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01296ec:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01296f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01296f8:	29 d0                	sub    %edx,%eax
f01296fa:	89 c3                	mov    %eax,%ebx
f01296fc:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129703:	10 00 00 
f0129706:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012970b:	0f b6 d0             	movzbl %al,%edx
f012970e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129714:	01 d0                	add    %edx,%eax
f0129716:	48                   	dec    %eax
f0129717:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012971d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129723:	ba 00 00 00 00       	mov    $0x0,%edx
f0129728:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012972e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129734:	29 d0                	sub    %edx,%eax
f0129736:	01 c3                	add    %eax,%ebx
f0129738:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012973f:	10 00 00 
f0129742:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129747:	0f b6 c0             	movzbl %al,%eax
f012974a:	c1 e0 04             	shl    $0x4,%eax
f012974d:	89 c2                	mov    %eax,%edx
f012974f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129755:	01 d0                	add    %edx,%eax
f0129757:	48                   	dec    %eax
f0129758:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012975e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129764:	ba 00 00 00 00       	mov    $0x0,%edx
f0129769:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012976f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129775:	29 d0                	sub    %edx,%eax
f0129777:	01 d8                	add    %ebx,%eax
f0129779:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012977e:	39 c1                	cmp    %eax,%ecx
f0129780:	74 17                	je     f0129799 <test_kshrink+0x94b>
f0129782:	83 ec 04             	sub    $0x4,%esp
f0129785:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012978a:	68 4b 0c 00 00       	push   $0xc4b
f012978f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129794:	e8 6c 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129799:	e8 2a a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012979e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297a1:	74 17                	je     f01297ba <test_kshrink+0x96c>
f01297a3:	83 ec 04             	sub    $0x4,%esp
f01297a6:	68 14 b7 13 f0       	push   $0xf013b714
f01297ab:	68 4c 0c 00 00       	push   $0xc4c
f01297b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f01297b5:	e8 4b 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297ba:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01297bd:	e8 ef 37 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01297c2:	29 c3                	sub    %eax,%ebx
f01297c4:	89 d8                	mov    %ebx,%eax
f01297c6:	3d 00 06 00 00       	cmp    $0x600,%eax
f01297cb:	74 17                	je     f01297e4 <test_kshrink+0x996>
f01297cd:	83 ec 04             	sub    $0x4,%esp
f01297d0:	68 7c b7 13 f0       	push   $0xf013b77c
f01297d5:	68 4d 0c 00 00       	push   $0xc4d
f01297da:	68 fa b6 13 f0       	push   $0xf013b6fa
f01297df:	e8 21 6a fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01297e4:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01297eb:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01297ee:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01297f4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01297fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129801:	eb 1a                	jmp    f012981d <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129803:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129806:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012980d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129813:	01 c2                	add    %eax,%edx
f0129815:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129818:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012981a:	ff 45 f4             	incl   -0xc(%ebp)
f012981d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129823:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129826:	7d db                	jge    f0129803 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129828:	e8 84 37 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012982d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129830:	e8 93 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129835:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129838:	83 ec 0c             	sub    $0xc,%esp
f012983b:	68 00 00 50 00       	push   $0x500000
f0129840:	e8 cd e5 fd ff       	call   f0107e12 <kshrink>
f0129845:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129848:	e8 7b a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012984d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129850:	74 19                	je     f012986b <test_kshrink+0xa1d>
f0129852:	68 94 c4 13 f0       	push   $0xf013c494
f0129857:	68 c5 c4 13 f0       	push   $0xf013c4c5
f012985c:	68 5d 0c 00 00       	push   $0xc5d
f0129861:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129866:	e8 9a 69 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f012986b:	e8 41 37 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129870:	89 c2                	mov    %eax,%edx
f0129872:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129875:	29 c2                	sub    %eax,%edx
f0129877:	89 d0                	mov    %edx,%eax
f0129879:	3d 00 01 00 00       	cmp    $0x100,%eax
f012987e:	74 19                	je     f0129899 <test_kshrink+0xa4b>
f0129880:	68 a0 c5 13 f0       	push   $0xf013c5a0
f0129885:	68 c5 c4 13 f0       	push   $0xf013c4c5
f012988a:	68 5e 0c 00 00       	push   $0xc5e
f012988f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129894:	e8 6c 69 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129899:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f01298a0:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01298a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01298aa:	eb 37                	jmp    f01298e3 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f01298ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01298af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01298b6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01298bc:	01 d0                	add    %edx,%eax
f01298be:	8b 10                	mov    (%eax),%edx
f01298c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01298c3:	39 c2                	cmp    %eax,%edx
f01298c5:	74 19                	je     f01298e0 <test_kshrink+0xa92>
f01298c7:	68 d0 c5 13 f0       	push   $0xf013c5d0
f01298cc:	68 c5 c4 13 f0       	push   $0xf013c4c5
f01298d1:	68 66 0c 00 00       	push   $0xc66
f01298d6:	68 fa b6 13 f0       	push   $0xf013b6fa
f01298db:	e8 25 69 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01298e0:	ff 45 f4             	incl   -0xc(%ebp)
f01298e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01298e6:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01298ec:	7e be                	jle    f01298ac <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01298ee:	83 ec 0c             	sub    $0xc,%esp
f01298f1:	6a 03                	push   $0x3
f01298f3:	e8 59 3b fe ff       	call   f010d451 <sys_bypassPageFault>
f01298f8:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01298fb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129901:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129904:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129907:	05 00 00 50 00       	add    $0x500000,%eax
f012990c:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012990f:	e8 2b 3b fe ff       	call   f010d43f <sys_rcr2>
f0129914:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129917:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012991d:	39 d0                	cmp    %edx,%eax
f012991f:	74 19                	je     f012993a <test_kshrink+0xaec>
f0129921:	68 dc c5 13 f0       	push   $0xf013c5dc
f0129926:	68 c5 c4 13 f0       	push   $0xf013c4c5
f012992b:	68 6f 0c 00 00       	push   $0xc6f
f0129930:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129935:	e8 cb 68 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012993a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012993d:	05 00 10 50 00       	add    $0x501000,%eax
f0129942:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129945:	e8 f5 3a fe ff       	call   f010d43f <sys_rcr2>
f012994a:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012994d:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129953:	39 d0                	cmp    %edx,%eax
f0129955:	74 19                	je     f0129970 <test_kshrink+0xb22>
f0129957:	68 04 c6 13 f0       	push   $0xf013c604
f012995c:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0129961:	68 72 0c 00 00       	push   $0xc72
f0129966:	68 fa b6 13 f0       	push   $0xf013b6fa
f012996b:	e8 95 68 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129970:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129973:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129978:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012997b:	e8 bf 3a fe ff       	call   f010d43f <sys_rcr2>
f0129980:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129983:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129989:	39 d0                	cmp    %edx,%eax
f012998b:	74 19                	je     f01299a6 <test_kshrink+0xb58>
f012998d:	68 30 c6 13 f0       	push   $0xf013c630
f0129992:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0129997:	68 75 0c 00 00       	push   $0xc75
f012999c:	68 fa b6 13 f0       	push   $0xf013b6fa
f01299a1:	e8 5f 68 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01299a6:	83 ec 0c             	sub    $0xc,%esp
f01299a9:	6a 00                	push   $0x0
f01299ab:	e8 a1 3a fe ff       	call   f010d451 <sys_bypassPageFault>
f01299b0:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01299b3:	e8 f9 35 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01299b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299bb:	e8 08 a4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01299c0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01299c3:	83 ec 0c             	sub    $0xc,%esp
f01299c6:	68 00 00 20 00       	push   $0x200000
f01299cb:	e8 42 e4 fd ff       	call   f0107e12 <kshrink>
f01299d0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01299d3:	e8 f0 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01299d8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01299db:	74 19                	je     f01299f6 <test_kshrink+0xba8>
f01299dd:	68 94 c4 13 f0       	push   $0xf013c494
f01299e2:	68 c5 c4 13 f0       	push   $0xf013c4c5
f01299e7:	68 82 0c 00 00       	push   $0xc82
f01299ec:	68 fa b6 13 f0       	push   $0xf013b6fa
f01299f1:	e8 0f 68 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01299f6:	e8 b6 35 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f01299fb:	89 c2                	mov    %eax,%edx
f01299fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129a00:	29 c2                	sub    %eax,%edx
f0129a02:	89 d0                	mov    %edx,%eax
f0129a04:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a09:	74 19                	je     f0129a24 <test_kshrink+0xbd6>
f0129a0b:	68 5c c6 13 f0       	push   $0xf013c65c
f0129a10:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0129a15:	68 83 0c 00 00       	push   $0xc83
f0129a1a:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129a1f:	e8 e1 67 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a24:	e8 88 35 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129a29:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a2c:	e8 97 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a31:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129a34:	83 ec 0c             	sub    $0xc,%esp
f0129a37:	68 00 00 40 00       	push   $0x400000
f0129a3c:	e8 4b e1 fd ff       	call   f0107b8c <kmalloc>
f0129a41:	83 c4 10             	add    $0x10,%esp
f0129a44:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129a4a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129a51:	10 00 00 
f0129a54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129a5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a5f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129a65:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129a6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a70:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129a76:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129a7c:	29 d0                	sub    %edx,%eax
f0129a7e:	89 c1                	mov    %eax,%ecx
f0129a80:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129a87:	10 00 00 
f0129a8a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129a8f:	0f b6 d0             	movzbl %al,%edx
f0129a92:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129a98:	01 d0                	add    %edx,%eax
f0129a9a:	48                   	dec    %eax
f0129a9b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129aa1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129aa7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129aac:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129ab2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129ab8:	29 d0                	sub    %edx,%eax
f0129aba:	01 c1                	add    %eax,%ecx
f0129abc:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129ac3:	10 00 00 
f0129ac6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129acb:	0f b6 c0             	movzbl %al,%eax
f0129ace:	c1 e0 04             	shl    $0x4,%eax
f0129ad1:	89 c2                	mov    %eax,%edx
f0129ad3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129ad9:	01 d0                	add    %edx,%eax
f0129adb:	48                   	dec    %eax
f0129adc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129ae2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129ae8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129aed:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129af3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129af9:	29 d0                	sub    %edx,%eax
f0129afb:	01 c8                	add    %ecx,%eax
f0129afd:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129b03:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129b09:	83 ec 04             	sub    $0x4,%esp
f0129b0c:	52                   	push   %edx
f0129b0d:	50                   	push   %eax
f0129b0e:	68 8c c6 13 f0       	push   $0xf013c68c
f0129b13:	e8 f6 71 fd ff       	call   f0100d0e <cprintf>
f0129b18:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129b1b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129b21:	89 c1                	mov    %eax,%ecx
f0129b23:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129b2a:	10 00 00 
f0129b2d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129b33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b38:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129b3e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b49:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129b4f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129b55:	29 d0                	sub    %edx,%eax
f0129b57:	89 c3                	mov    %eax,%ebx
f0129b59:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129b60:	10 00 00 
f0129b63:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129b68:	0f b6 d0             	movzbl %al,%edx
f0129b6b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129b71:	01 d0                	add    %edx,%eax
f0129b73:	48                   	dec    %eax
f0129b74:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129b7a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129b80:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b85:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129b8b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129b91:	29 d0                	sub    %edx,%eax
f0129b93:	01 c3                	add    %eax,%ebx
f0129b95:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129b9c:	10 00 00 
f0129b9f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129ba4:	0f b6 c0             	movzbl %al,%eax
f0129ba7:	c1 e0 04             	shl    $0x4,%eax
f0129baa:	89 c2                	mov    %eax,%edx
f0129bac:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129bb2:	01 d0                	add    %edx,%eax
f0129bb4:	48                   	dec    %eax
f0129bb5:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129bbb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129bc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bc6:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129bcc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129bd2:	29 d0                	sub    %edx,%eax
f0129bd4:	01 d8                	add    %ebx,%eax
f0129bd6:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129bdb:	39 c1                	cmp    %eax,%ecx
f0129bdd:	74 17                	je     f0129bf6 <test_kshrink+0xda8>
f0129bdf:	83 ec 04             	sub    $0x4,%esp
f0129be2:	68 a8 c6 13 f0       	push   $0xf013c6a8
f0129be7:	68 8e 0c 00 00       	push   $0xc8e
f0129bec:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129bf1:	e8 0f 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bf6:	e8 cd a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129bfb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129bfe:	74 17                	je     f0129c17 <test_kshrink+0xdc9>
f0129c00:	83 ec 04             	sub    $0x4,%esp
f0129c03:	68 14 b7 13 f0       	push   $0xf013b714
f0129c08:	68 8f 0c 00 00       	push   $0xc8f
f0129c0d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129c12:	e8 ee 65 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c17:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129c1a:	e8 92 33 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129c1f:	29 c3                	sub    %eax,%ebx
f0129c21:	89 d8                	mov    %ebx,%eax
f0129c23:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129c28:	74 17                	je     f0129c41 <test_kshrink+0xdf3>
f0129c2a:	83 ec 04             	sub    $0x4,%esp
f0129c2d:	68 7c b7 13 f0       	push   $0xf013b77c
f0129c32:	68 90 0c 00 00       	push   $0xc90
f0129c37:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129c3c:	e8 c4 65 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129c41:	e8 6b 33 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129c46:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c49:	e8 7a a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c4e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129c51:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129c57:	83 ec 0c             	sub    $0xc,%esp
f0129c5a:	50                   	push   %eax
f0129c5b:	e8 f7 df fd ff       	call   f0107c57 <kfree>
f0129c60:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c63:	e8 60 a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c68:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129c6b:	74 17                	je     f0129c84 <test_kshrink+0xe36>
f0129c6d:	83 ec 04             	sub    $0x4,%esp
f0129c70:	68 14 b7 13 f0       	push   $0xf013b714
f0129c75:	68 9a 0c 00 00       	push   $0xc9a
f0129c7a:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129c7f:	e8 81 65 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129c84:	e8 28 33 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129c89:	89 c2                	mov    %eax,%edx
f0129c8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129c8e:	29 c2                	sub    %eax,%edx
f0129c90:	89 d0                	mov    %edx,%eax
f0129c92:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129c97:	74 17                	je     f0129cb0 <test_kshrink+0xe62>
f0129c99:	83 ec 04             	sub    $0x4,%esp
f0129c9c:	68 ac bf 13 f0       	push   $0xf013bfac
f0129ca1:	68 9b 0c 00 00       	push   $0xc9b
f0129ca6:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129cab:	e8 55 65 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129cb0:	e8 fc 32 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129cb5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cb8:	e8 0b a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129cbd:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129cc0:	83 ec 0c             	sub    $0xc,%esp
f0129cc3:	68 00 b0 3f 00       	push   $0x3fb000
f0129cc8:	e8 45 e1 fd ff       	call   f0107e12 <kshrink>
f0129ccd:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129cd0:	e8 f3 a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129cd5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129cd8:	74 19                	je     f0129cf3 <test_kshrink+0xea5>
f0129cda:	68 94 c4 13 f0       	push   $0xf013c494
f0129cdf:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0129ce4:	68 a5 0c 00 00       	push   $0xca5
f0129ce9:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129cee:	e8 12 65 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129cf3:	e8 b9 32 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129cf8:	89 c2                	mov    %eax,%edx
f0129cfa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129cfd:	29 c2                	sub    %eax,%edx
f0129cff:	89 d0                	mov    %edx,%eax
f0129d01:	83 f8 05             	cmp    $0x5,%eax
f0129d04:	74 19                	je     f0129d1f <test_kshrink+0xed1>
f0129d06:	68 fc c6 13 f0       	push   $0xf013c6fc
f0129d0b:	68 c5 c4 13 f0       	push   $0xf013c4c5
f0129d10:	68 a6 0c 00 00       	push   $0xca6
f0129d15:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129d1a:	e8 e6 64 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129d1f:	83 ec 0c             	sub    $0xc,%esp
f0129d22:	68 58 c4 13 f0       	push   $0xf013c458
f0129d27:	e8 e2 6f fd ff       	call   f0100d0e <cprintf>
f0129d2c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129d2f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129d34:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129d37:	5b                   	pop    %ebx
f0129d38:	5f                   	pop    %edi
f0129d39:	5d                   	pop    %ebp
f0129d3a:	c3                   	ret    

f0129d3b <test_kfreelast>:


int test_kfreelast()
{
f0129d3b:	55                   	push   %ebp
f0129d3c:	89 e5                	mov    %esp,%ebp
f0129d3e:	57                   	push   %edi
f0129d3f:	53                   	push   %ebx
f0129d40:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129d46:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129d4a:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129d4e:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129d54:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129d5a:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129d61:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129d68:	e8 44 32 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129d6d:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129d70:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129d76:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129d7b:	b8 00 00 00 00       	mov    $0x0,%eax
f0129d80:	89 d7                	mov    %edx,%edi
f0129d82:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129d84:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129d8a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129d8f:	b8 00 00 00 00       	mov    $0x0,%eax
f0129d94:	89 d7                	mov    %edx,%edi
f0129d96:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129d98:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129d9e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129da3:	b8 00 00 00 00       	mov    $0x0,%eax
f0129da8:	89 d7                	mov    %edx,%edi
f0129daa:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129dac:	e8 00 32 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129db1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129db4:	e8 0f a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129db9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129dbc:	83 ec 0c             	sub    $0xc,%esp
f0129dbf:	68 00 fc 1f 00       	push   $0x1ffc00
f0129dc4:	e8 c3 dd fd ff       	call   f0107b8c <kmalloc>
f0129dc9:	83 c4 10             	add    $0x10,%esp
f0129dcc:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129dd2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129dd8:	89 c1                	mov    %eax,%ecx
f0129dda:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129de1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129de4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129de9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129dec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129def:	ba 00 00 00 00       	mov    $0x0,%edx
f0129df4:	f7 75 cc             	divl   -0x34(%ebp)
f0129df7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129dfa:	29 d0                	sub    %edx,%eax
f0129dfc:	89 c3                	mov    %eax,%ebx
f0129dfe:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129e05:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129e0a:	0f b6 d0             	movzbl %al,%edx
f0129e0d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129e10:	01 d0                	add    %edx,%eax
f0129e12:	48                   	dec    %eax
f0129e13:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129e16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e1e:	f7 75 c4             	divl   -0x3c(%ebp)
f0129e21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129e24:	29 d0                	sub    %edx,%eax
f0129e26:	01 c3                	add    %eax,%ebx
f0129e28:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129e2f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129e34:	0f b6 c0             	movzbl %al,%eax
f0129e37:	c1 e0 04             	shl    $0x4,%eax
f0129e3a:	89 c2                	mov    %eax,%edx
f0129e3c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129e3f:	01 d0                	add    %edx,%eax
f0129e41:	48                   	dec    %eax
f0129e42:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129e45:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129e48:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e4d:	f7 75 bc             	divl   -0x44(%ebp)
f0129e50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129e53:	29 d0                	sub    %edx,%eax
f0129e55:	01 d8                	add    %ebx,%eax
f0129e57:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129e5c:	39 c1                	cmp    %eax,%ecx
f0129e5e:	74 17                	je     f0129e77 <test_kfreelast+0x13c>
f0129e60:	83 ec 04             	sub    $0x4,%esp
f0129e63:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0129e68:	68 ca 0c 00 00       	push   $0xcca
f0129e6d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129e72:	e8 8e 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e77:	e8 4c 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e7c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e7f:	74 17                	je     f0129e98 <test_kfreelast+0x15d>
f0129e81:	83 ec 04             	sub    $0x4,%esp
f0129e84:	68 14 b7 13 f0       	push   $0xf013b714
f0129e89:	68 cb 0c 00 00       	push   $0xccb
f0129e8e:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129e93:	e8 6d 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e98:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e9b:	e8 11 31 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129ea0:	29 c3                	sub    %eax,%ebx
f0129ea2:	89 d8                	mov    %ebx,%eax
f0129ea4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ea9:	74 17                	je     f0129ec2 <test_kfreelast+0x187>
f0129eab:	83 ec 04             	sub    $0x4,%esp
f0129eae:	68 7c b7 13 f0       	push   $0xf013b77c
f0129eb3:	68 cc 0c 00 00       	push   $0xccc
f0129eb8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129ebd:	e8 43 63 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129ec2:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129ec9:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ecc:	e8 e0 30 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129ed1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ed4:	e8 ef 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ed9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129edc:	83 ec 0c             	sub    $0xc,%esp
f0129edf:	68 00 fc 1f 00       	push   $0x1ffc00
f0129ee4:	e8 a3 dc fd ff       	call   f0107b8c <kmalloc>
f0129ee9:	83 c4 10             	add    $0x10,%esp
f0129eec:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ef2:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129ef8:	89 c1                	mov    %eax,%ecx
f0129efa:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129f01:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129f04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f09:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129f0c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f14:	f7 75 b4             	divl   -0x4c(%ebp)
f0129f17:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129f1a:	29 d0                	sub    %edx,%eax
f0129f1c:	89 c3                	mov    %eax,%ebx
f0129f1e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129f25:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129f2a:	0f b6 d0             	movzbl %al,%edx
f0129f2d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129f30:	01 d0                	add    %edx,%eax
f0129f32:	48                   	dec    %eax
f0129f33:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129f36:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f3e:	f7 75 ac             	divl   -0x54(%ebp)
f0129f41:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129f44:	29 d0                	sub    %edx,%eax
f0129f46:	01 c3                	add    %eax,%ebx
f0129f48:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129f4f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0129f54:	0f b6 c0             	movzbl %al,%eax
f0129f57:	c1 e0 04             	shl    $0x4,%eax
f0129f5a:	89 c2                	mov    %eax,%edx
f0129f5c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129f5f:	01 d0                	add    %edx,%eax
f0129f61:	48                   	dec    %eax
f0129f62:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129f65:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129f68:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f6d:	f7 75 a4             	divl   -0x5c(%ebp)
f0129f70:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129f73:	29 d0                	sub    %edx,%eax
f0129f75:	01 d8                	add    %ebx,%eax
f0129f77:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129f7c:	39 c1                	cmp    %eax,%ecx
f0129f7e:	74 17                	je     f0129f97 <test_kfreelast+0x25c>
f0129f80:	83 ec 04             	sub    $0x4,%esp
f0129f83:	68 e0 b7 13 f0       	push   $0xf013b7e0
f0129f88:	68 d3 0c 00 00       	push   $0xcd3
f0129f8d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129f92:	e8 6e 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f97:	e8 2c 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f9c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f9f:	74 17                	je     f0129fb8 <test_kfreelast+0x27d>
f0129fa1:	83 ec 04             	sub    $0x4,%esp
f0129fa4:	68 14 b7 13 f0       	push   $0xf013b714
f0129fa9:	68 d4 0c 00 00       	push   $0xcd4
f0129fae:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129fb3:	e8 4d 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fb8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129fbb:	e8 f1 2f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129fc0:	29 c3                	sub    %eax,%ebx
f0129fc2:	89 d8                	mov    %ebx,%eax
f0129fc4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129fc9:	74 17                	je     f0129fe2 <test_kfreelast+0x2a7>
f0129fcb:	83 ec 04             	sub    $0x4,%esp
f0129fce:	68 7c b7 13 f0       	push   $0xf013b77c
f0129fd3:	68 d5 0c 00 00       	push   $0xcd5
f0129fd8:	68 fa b6 13 f0       	push   $0xf013b6fa
f0129fdd:	e8 23 62 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129fe2:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129fe9:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129fec:	e8 c0 2f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f0129ff1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ff4:	e8 cf 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ff9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129ffc:	83 ec 0c             	sub    $0xc,%esp
f0129fff:	68 00 08 00 00       	push   $0x800
f012a004:	e8 83 db fd ff       	call   f0107b8c <kmalloc>
f012a009:	83 c4 10             	add    $0x10,%esp
f012a00c:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a012:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a018:	89 c1                	mov    %eax,%ecx
f012a01a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a021:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a024:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a029:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a02c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a02f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a034:	f7 75 9c             	divl   -0x64(%ebp)
f012a037:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a03a:	29 d0                	sub    %edx,%eax
f012a03c:	89 c3                	mov    %eax,%ebx
f012a03e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a045:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a04a:	0f b6 d0             	movzbl %al,%edx
f012a04d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a050:	01 d0                	add    %edx,%eax
f012a052:	48                   	dec    %eax
f012a053:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a056:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a059:	ba 00 00 00 00       	mov    $0x0,%edx
f012a05e:	f7 75 94             	divl   -0x6c(%ebp)
f012a061:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a064:	29 d0                	sub    %edx,%eax
f012a066:	01 c3                	add    %eax,%ebx
f012a068:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a06f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a074:	0f b6 c0             	movzbl %al,%eax
f012a077:	c1 e0 04             	shl    $0x4,%eax
f012a07a:	89 c2                	mov    %eax,%edx
f012a07c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a07f:	01 d0                	add    %edx,%eax
f012a081:	48                   	dec    %eax
f012a082:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a085:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a088:	ba 00 00 00 00       	mov    $0x0,%edx
f012a08d:	f7 75 8c             	divl   -0x74(%ebp)
f012a090:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a093:	29 d0                	sub    %edx,%eax
f012a095:	01 d8                	add    %ebx,%eax
f012a097:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a09c:	39 c1                	cmp    %eax,%ecx
f012a09e:	74 17                	je     f012a0b7 <test_kfreelast+0x37c>
f012a0a0:	83 ec 04             	sub    $0x4,%esp
f012a0a3:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012a0a8:	68 dc 0c 00 00       	push   $0xcdc
f012a0ad:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a0b2:	e8 4e 61 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a0b7:	e8 0c 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a0bc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a0bf:	74 17                	je     f012a0d8 <test_kfreelast+0x39d>
f012a0c1:	83 ec 04             	sub    $0x4,%esp
f012a0c4:	68 14 b7 13 f0       	push   $0xf013b714
f012a0c9:	68 dd 0c 00 00       	push   $0xcdd
f012a0ce:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a0d3:	e8 2d 61 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a0d8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a0db:	e8 d1 2e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a0e0:	29 c3                	sub    %eax,%ebx
f012a0e2:	89 d8                	mov    %ebx,%eax
f012a0e4:	83 f8 01             	cmp    $0x1,%eax
f012a0e7:	74 17                	je     f012a100 <test_kfreelast+0x3c5>
f012a0e9:	83 ec 04             	sub    $0x4,%esp
f012a0ec:	68 7c b7 13 f0       	push   $0xf013b77c
f012a0f1:	68 de 0c 00 00       	push   $0xcde
f012a0f6:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a0fb:	e8 05 61 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a100:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a107:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a10a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a110:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a113:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a11a:	eb 0e                	jmp    f012a12a <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a11c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a11f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a122:	01 d0                	add    %edx,%eax
f012a124:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a127:	ff 45 f4             	incl   -0xc(%ebp)
f012a12a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a130:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a133:	7f e7                	jg     f012a11c <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a135:	e8 77 2e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a13a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a13d:	e8 86 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a142:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a145:	83 ec 0c             	sub    $0xc,%esp
f012a148:	68 00 08 00 00       	push   $0x800
f012a14d:	e8 3a da fd ff       	call   f0107b8c <kmalloc>
f012a152:	83 c4 10             	add    $0x10,%esp
f012a155:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a15b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a161:	89 c1                	mov    %eax,%ecx
f012a163:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a16a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a16d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a172:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a178:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a17e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a183:	f7 75 80             	divl   -0x80(%ebp)
f012a186:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a18c:	29 d0                	sub    %edx,%eax
f012a18e:	89 c3                	mov    %eax,%ebx
f012a190:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a197:	10 00 00 
f012a19a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a19f:	0f b6 d0             	movzbl %al,%edx
f012a1a2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a1a8:	01 d0                	add    %edx,%eax
f012a1aa:	48                   	dec    %eax
f012a1ab:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a1b1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a1b7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1bc:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a1c2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a1c8:	29 d0                	sub    %edx,%eax
f012a1ca:	01 c3                	add    %eax,%ebx
f012a1cc:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a1d3:	10 00 00 
f012a1d6:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a1db:	0f b6 c0             	movzbl %al,%eax
f012a1de:	c1 e0 04             	shl    $0x4,%eax
f012a1e1:	89 c2                	mov    %eax,%edx
f012a1e3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a1e9:	01 d0                	add    %edx,%eax
f012a1eb:	48                   	dec    %eax
f012a1ec:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a1f2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a1f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1fd:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a203:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a209:	29 d0                	sub    %edx,%eax
f012a20b:	01 d8                	add    %ebx,%eax
f012a20d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a212:	39 c1                	cmp    %eax,%ecx
f012a214:	74 17                	je     f012a22d <test_kfreelast+0x4f2>
f012a216:	83 ec 04             	sub    $0x4,%esp
f012a219:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012a21e:	68 ea 0c 00 00       	push   $0xcea
f012a223:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a228:	e8 d8 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a22d:	e8 96 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a232:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a235:	74 17                	je     f012a24e <test_kfreelast+0x513>
f012a237:	83 ec 04             	sub    $0x4,%esp
f012a23a:	68 14 b7 13 f0       	push   $0xf013b714
f012a23f:	68 eb 0c 00 00       	push   $0xceb
f012a244:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a249:	e8 b7 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a24e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a251:	e8 5b 2d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a256:	29 c3                	sub    %eax,%ebx
f012a258:	89 d8                	mov    %ebx,%eax
f012a25a:	83 f8 01             	cmp    $0x1,%eax
f012a25d:	74 17                	je     f012a276 <test_kfreelast+0x53b>
f012a25f:	83 ec 04             	sub    $0x4,%esp
f012a262:	68 7c b7 13 f0       	push   $0xf013b77c
f012a267:	68 ec 0c 00 00       	push   $0xcec
f012a26c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a271:	e8 8f 5f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a276:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a27d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a280:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a286:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a289:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a290:	eb 0e                	jmp    f012a2a0 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a292:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a295:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a298:	01 d0                	add    %edx,%eax
f012a29a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a29d:	ff 45 f4             	incl   -0xc(%ebp)
f012a2a0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a2a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a2a9:	7f e7                	jg     f012a292 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a2ab:	e8 01 2d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a2b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2b3:	e8 10 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a2b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a2bb:	83 ec 0c             	sub    $0xc,%esp
f012a2be:	68 00 1c 00 00       	push   $0x1c00
f012a2c3:	e8 c4 d8 fd ff       	call   f0107b8c <kmalloc>
f012a2c8:	83 c4 10             	add    $0x10,%esp
f012a2cb:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a2d1:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a2d7:	89 c1                	mov    %eax,%ecx
f012a2d9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a2e0:	10 00 00 
f012a2e3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a2e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a2ee:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a2f4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a2fa:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2ff:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a305:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a30b:	29 d0                	sub    %edx,%eax
f012a30d:	89 c3                	mov    %eax,%ebx
f012a30f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a316:	10 00 00 
f012a319:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a31e:	0f b6 d0             	movzbl %al,%edx
f012a321:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a327:	01 d0                	add    %edx,%eax
f012a329:	48                   	dec    %eax
f012a32a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a330:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a336:	ba 00 00 00 00       	mov    $0x0,%edx
f012a33b:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a341:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a347:	29 d0                	sub    %edx,%eax
f012a349:	01 c3                	add    %eax,%ebx
f012a34b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a352:	10 00 00 
f012a355:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a35a:	0f b6 c0             	movzbl %al,%eax
f012a35d:	c1 e0 04             	shl    $0x4,%eax
f012a360:	89 c2                	mov    %eax,%edx
f012a362:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a368:	01 d0                	add    %edx,%eax
f012a36a:	48                   	dec    %eax
f012a36b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a371:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a377:	ba 00 00 00 00       	mov    $0x0,%edx
f012a37c:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a382:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a388:	29 d0                	sub    %edx,%eax
f012a38a:	01 d8                	add    %ebx,%eax
f012a38c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a391:	39 c1                	cmp    %eax,%ecx
f012a393:	74 17                	je     f012a3ac <test_kfreelast+0x671>
f012a395:	83 ec 04             	sub    $0x4,%esp
f012a398:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012a39d:	68 f8 0c 00 00       	push   $0xcf8
f012a3a2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a3a7:	e8 59 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3ac:	e8 17 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a3b1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3b4:	74 17                	je     f012a3cd <test_kfreelast+0x692>
f012a3b6:	83 ec 04             	sub    $0x4,%esp
f012a3b9:	68 14 b7 13 f0       	push   $0xf013b714
f012a3be:	68 f9 0c 00 00       	push   $0xcf9
f012a3c3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a3c8:	e8 38 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a3cd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a3d0:	e8 dc 2b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a3d5:	29 c3                	sub    %eax,%ebx
f012a3d7:	89 d8                	mov    %ebx,%eax
f012a3d9:	83 f8 02             	cmp    $0x2,%eax
f012a3dc:	74 17                	je     f012a3f5 <test_kfreelast+0x6ba>
f012a3de:	83 ec 04             	sub    $0x4,%esp
f012a3e1:	68 7c b7 13 f0       	push   $0xf013b77c
f012a3e6:	68 fa 0c 00 00       	push   $0xcfa
f012a3eb:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a3f0:	e8 10 5e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a3f5:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a3fc:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a3ff:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a405:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a408:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a40f:	eb 0e                	jmp    f012a41f <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a411:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a414:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a417:	01 d0                	add    %edx,%eax
f012a419:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a41c:	ff 45 f4             	incl   -0xc(%ebp)
f012a41f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a425:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a428:	7f e7                	jg     f012a411 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a42a:	e8 82 2b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a42f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a432:	e8 91 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a437:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a43a:	83 ec 0c             	sub    $0xc,%esp
f012a43d:	68 00 fc 2f 00       	push   $0x2ffc00
f012a442:	e8 45 d7 fd ff       	call   f0107b8c <kmalloc>
f012a447:	83 c4 10             	add    $0x10,%esp
f012a44a:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a450:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a456:	89 c1                	mov    %eax,%ecx
f012a458:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a45f:	10 00 00 
f012a462:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a468:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a46d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a473:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a479:	ba 00 00 00 00       	mov    $0x0,%edx
f012a47e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a484:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a48a:	29 d0                	sub    %edx,%eax
f012a48c:	89 c3                	mov    %eax,%ebx
f012a48e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a495:	10 00 00 
f012a498:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a49d:	0f b6 d0             	movzbl %al,%edx
f012a4a0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a4a6:	01 d0                	add    %edx,%eax
f012a4a8:	48                   	dec    %eax
f012a4a9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a4af:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4ba:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a4c0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a4c6:	29 d0                	sub    %edx,%eax
f012a4c8:	01 c3                	add    %eax,%ebx
f012a4ca:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a4d1:	10 00 00 
f012a4d4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a4d9:	0f b6 c0             	movzbl %al,%eax
f012a4dc:	c1 e0 04             	shl    $0x4,%eax
f012a4df:	89 c2                	mov    %eax,%edx
f012a4e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a4e7:	01 d0                	add    %edx,%eax
f012a4e9:	48                   	dec    %eax
f012a4ea:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a4f0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a4f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4fb:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a501:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a507:	29 d0                	sub    %edx,%eax
f012a509:	01 d8                	add    %ebx,%eax
f012a50b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a510:	39 c1                	cmp    %eax,%ecx
f012a512:	74 17                	je     f012a52b <test_kfreelast+0x7f0>
f012a514:	83 ec 04             	sub    $0x4,%esp
f012a517:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012a51c:	68 06 0d 00 00       	push   $0xd06
f012a521:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a526:	e8 da 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a52b:	e8 98 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a530:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a533:	74 17                	je     f012a54c <test_kfreelast+0x811>
f012a535:	83 ec 04             	sub    $0x4,%esp
f012a538:	68 14 b7 13 f0       	push   $0xf013b714
f012a53d:	68 07 0d 00 00       	push   $0xd07
f012a542:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a547:	e8 b9 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a54c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a54f:	e8 5d 2a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a554:	29 c3                	sub    %eax,%ebx
f012a556:	89 d8                	mov    %ebx,%eax
f012a558:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a55d:	74 17                	je     f012a576 <test_kfreelast+0x83b>
f012a55f:	83 ec 04             	sub    $0x4,%esp
f012a562:	68 7c b7 13 f0       	push   $0xf013b77c
f012a567:	68 08 0d 00 00       	push   $0xd08
f012a56c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a571:	e8 8f 5c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a576:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a57d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a580:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a586:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a589:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a590:	eb 0e                	jmp    f012a5a0 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a592:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a595:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a598:	01 d0                	add    %edx,%eax
f012a59a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a59d:	ff 45 f4             	incl   -0xc(%ebp)
f012a5a0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a5a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a5a9:	7f e7                	jg     f012a592 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a5ab:	e8 01 2a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a5b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5b3:	e8 10 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a5bb:	83 ec 0c             	sub    $0xc,%esp
f012a5be:	68 00 fc 5f 00       	push   $0x5ffc00
f012a5c3:	e8 c4 d5 fd ff       	call   f0107b8c <kmalloc>
f012a5c8:	83 c4 10             	add    $0x10,%esp
f012a5cb:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a5d1:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a5d7:	89 c1                	mov    %eax,%ecx
f012a5d9:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a5e0:	10 00 00 
f012a5e3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a5e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a5ee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a5f4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a5fa:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5ff:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a605:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a60b:	29 d0                	sub    %edx,%eax
f012a60d:	89 c3                	mov    %eax,%ebx
f012a60f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a616:	10 00 00 
f012a619:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a61e:	0f b6 d0             	movzbl %al,%edx
f012a621:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a627:	01 d0                	add    %edx,%eax
f012a629:	48                   	dec    %eax
f012a62a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a630:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a636:	ba 00 00 00 00       	mov    $0x0,%edx
f012a63b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a641:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a647:	29 d0                	sub    %edx,%eax
f012a649:	01 c3                	add    %eax,%ebx
f012a64b:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a652:	10 00 00 
f012a655:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a65a:	0f b6 c0             	movzbl %al,%eax
f012a65d:	c1 e0 04             	shl    $0x4,%eax
f012a660:	89 c2                	mov    %eax,%edx
f012a662:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a668:	01 d0                	add    %edx,%eax
f012a66a:	48                   	dec    %eax
f012a66b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a671:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a677:	ba 00 00 00 00       	mov    $0x0,%edx
f012a67c:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a682:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a688:	29 d0                	sub    %edx,%eax
f012a68a:	01 d8                	add    %ebx,%eax
f012a68c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a691:	39 c1                	cmp    %eax,%ecx
f012a693:	74 17                	je     f012a6ac <test_kfreelast+0x971>
f012a695:	83 ec 04             	sub    $0x4,%esp
f012a698:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012a69d:	68 14 0d 00 00       	push   $0xd14
f012a6a2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a6a7:	e8 59 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a6ac:	e8 17 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a6b1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a6b4:	74 17                	je     f012a6cd <test_kfreelast+0x992>
f012a6b6:	83 ec 04             	sub    $0x4,%esp
f012a6b9:	68 14 b7 13 f0       	push   $0xf013b714
f012a6be:	68 15 0d 00 00       	push   $0xd15
f012a6c3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a6c8:	e8 38 5b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a6cd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a6d0:	e8 dc 28 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a6d5:	29 c3                	sub    %eax,%ebx
f012a6d7:	89 d8                	mov    %ebx,%eax
f012a6d9:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a6de:	74 17                	je     f012a6f7 <test_kfreelast+0x9bc>
f012a6e0:	83 ec 04             	sub    $0x4,%esp
f012a6e3:	68 7c b7 13 f0       	push   $0xf013b77c
f012a6e8:	68 16 0d 00 00       	push   $0xd16
f012a6ed:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a6f2:	e8 0e 5b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a6f7:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a6fe:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a701:	e8 ab 28 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a706:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a709:	e8 ba 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a70e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a711:	83 ec 0c             	sub    $0xc,%esp
f012a714:	68 00 38 00 00       	push   $0x3800
f012a719:	e8 6e d4 fd ff       	call   f0107b8c <kmalloc>
f012a71e:	83 c4 10             	add    $0x10,%esp
f012a721:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a727:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a72d:	89 c1                	mov    %eax,%ecx
f012a72f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a736:	10 00 00 
f012a739:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a73f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a744:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a74a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a750:	ba 00 00 00 00       	mov    $0x0,%edx
f012a755:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a75b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a761:	29 d0                	sub    %edx,%eax
f012a763:	89 c3                	mov    %eax,%ebx
f012a765:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a76c:	10 00 00 
f012a76f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a774:	0f b6 d0             	movzbl %al,%edx
f012a777:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a77d:	01 d0                	add    %edx,%eax
f012a77f:	48                   	dec    %eax
f012a780:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a786:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a78c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a791:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a797:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a79d:	29 d0                	sub    %edx,%eax
f012a79f:	01 c3                	add    %eax,%ebx
f012a7a1:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a7a8:	10 00 00 
f012a7ab:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012a7b0:	0f b6 c0             	movzbl %al,%eax
f012a7b3:	c1 e0 04             	shl    $0x4,%eax
f012a7b6:	89 c2                	mov    %eax,%edx
f012a7b8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a7be:	01 d0                	add    %edx,%eax
f012a7c0:	48                   	dec    %eax
f012a7c1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a7c7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a7cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7d2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a7d8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a7de:	29 d0                	sub    %edx,%eax
f012a7e0:	01 d8                	add    %ebx,%eax
f012a7e2:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a7e7:	39 c1                	cmp    %eax,%ecx
f012a7e9:	74 17                	je     f012a802 <test_kfreelast+0xac7>
f012a7eb:	83 ec 04             	sub    $0x4,%esp
f012a7ee:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012a7f3:	68 1d 0d 00 00       	push   $0xd1d
f012a7f8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a7fd:	e8 03 5a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a802:	e8 c1 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a807:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a80a:	74 17                	je     f012a823 <test_kfreelast+0xae8>
f012a80c:	83 ec 04             	sub    $0x4,%esp
f012a80f:	68 14 b7 13 f0       	push   $0xf013b714
f012a814:	68 1e 0d 00 00       	push   $0xd1e
f012a819:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a81e:	e8 e2 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a823:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a826:	e8 86 27 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a82b:	29 c3                	sub    %eax,%ebx
f012a82d:	89 d8                	mov    %ebx,%eax
f012a82f:	83 f8 04             	cmp    $0x4,%eax
f012a832:	74 17                	je     f012a84b <test_kfreelast+0xb10>
f012a834:	83 ec 04             	sub    $0x4,%esp
f012a837:	68 7c b7 13 f0       	push   $0xf013b77c
f012a83c:	68 1f 0d 00 00       	push   $0xd1f
f012a841:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a846:	e8 ba 59 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a84b:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a852:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a855:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a85b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a85e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a865:	eb 0e                	jmp    f012a875 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a86a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a86d:	01 d0                	add    %edx,%eax
f012a86f:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a872:	ff 45 f4             	incl   -0xc(%ebp)
f012a875:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a87b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a87e:	7f e7                	jg     f012a867 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a880:	e8 2c 27 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a885:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a88b:	e8 38 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a890:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a896:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a89c:	83 ec 0c             	sub    $0xc,%esp
f012a89f:	50                   	push   %eax
f012a8a0:	e8 b2 d3 fd ff       	call   f0107c57 <kfree>
f012a8a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8a8:	e8 1b 95 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a8ad:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a8b3:	74 17                	je     f012a8cc <test_kfreelast+0xb91>
f012a8b5:	83 ec 04             	sub    $0x4,%esp
f012a8b8:	68 14 b7 13 f0       	push   $0xf013b714
f012a8bd:	68 2e 0d 00 00       	push   $0xd2e
f012a8c2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a8c7:	e8 39 59 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a8cc:	e8 e0 26 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a8d1:	89 c2                	mov    %eax,%edx
f012a8d3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a8d9:	29 c2                	sub    %eax,%edx
f012a8db:	89 d0                	mov    %edx,%eax
f012a8dd:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a8e2:	74 17                	je     f012a8fb <test_kfreelast+0xbc0>
f012a8e4:	83 ec 04             	sub    $0x4,%esp
f012a8e7:	68 84 be 13 f0       	push   $0xf013be84
f012a8ec:	68 2f 0d 00 00       	push   $0xd2f
f012a8f1:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a8f6:	e8 0a 59 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8fb:	e8 b1 26 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a900:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a906:	e8 bd 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a90b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a911:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a917:	83 ec 0c             	sub    $0xc,%esp
f012a91a:	50                   	push   %eax
f012a91b:	e8 37 d3 fd ff       	call   f0107c57 <kfree>
f012a920:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a923:	e8 a0 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a928:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a92e:	74 17                	je     f012a947 <test_kfreelast+0xc0c>
f012a930:	83 ec 04             	sub    $0x4,%esp
f012a933:	68 14 b7 13 f0       	push   $0xf013b714
f012a938:	68 35 0d 00 00       	push   $0xd35
f012a93d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a942:	e8 be 58 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a947:	e8 65 26 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a94c:	89 c2                	mov    %eax,%edx
f012a94e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a954:	29 c2                	sub    %eax,%edx
f012a956:	89 d0                	mov    %edx,%eax
f012a958:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a95d:	74 17                	je     f012a976 <test_kfreelast+0xc3b>
f012a95f:	83 ec 04             	sub    $0x4,%esp
f012a962:	68 84 be 13 f0       	push   $0xf013be84
f012a967:	68 36 0d 00 00       	push   $0xd36
f012a96c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a971:	e8 8f 58 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a976:	e8 36 26 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a97b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a981:	e8 42 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a986:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a98c:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a992:	83 ec 0c             	sub    $0xc,%esp
f012a995:	50                   	push   %eax
f012a996:	e8 bc d2 fd ff       	call   f0107c57 <kfree>
f012a99b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a99e:	e8 25 94 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a9a3:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a9a9:	74 17                	je     f012a9c2 <test_kfreelast+0xc87>
f012a9ab:	83 ec 04             	sub    $0x4,%esp
f012a9ae:	68 14 b7 13 f0       	push   $0xf013b714
f012a9b3:	68 3c 0d 00 00       	push   $0xd3c
f012a9b8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a9bd:	e8 43 58 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a9c2:	e8 ea 25 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012a9c7:	89 c2                	mov    %eax,%edx
f012a9c9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a9cf:	29 c2                	sub    %eax,%edx
f012a9d1:	89 d0                	mov    %edx,%eax
f012a9d3:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a9d8:	74 17                	je     f012a9f1 <test_kfreelast+0xcb6>
f012a9da:	83 ec 04             	sub    $0x4,%esp
f012a9dd:	68 84 be 13 f0       	push   $0xf013be84
f012a9e2:	68 3d 0d 00 00       	push   $0xd3d
f012a9e7:	68 fa b6 13 f0       	push   $0xf013b6fa
f012a9ec:	e8 14 58 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a9f1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a9f7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a9fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa01:	eb 1e                	jmp    f012aa21 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012aa03:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012aa09:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa0c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa0f:	01 c8                	add    %ecx,%eax
f012aa11:	8a 00                	mov    (%eax),%al
f012aa13:	0f be c0             	movsbl %al,%eax
f012aa16:	01 d0                	add    %edx,%eax
f012aa18:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012aa1e:	ff 45 f4             	incl   -0xc(%ebp)
f012aa21:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012aa27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa2a:	7f d7                	jg     f012aa03 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012aa2c:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012aa32:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012aa38:	01 c0                	add    %eax,%eax
f012aa3a:	39 c2                	cmp    %eax,%edx
f012aa3c:	74 17                	je     f012aa55 <test_kfreelast+0xd1a>
f012aa3e:	83 ec 04             	sub    $0x4,%esp
f012aa41:	68 e0 be 13 f0       	push   $0xf013bee0
f012aa46:	68 48 0d 00 00       	push   $0xd48
f012aa4b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012aa50:	e8 b0 57 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012aa55:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012aa5b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012aa5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa65:	eb 1e                	jmp    f012aa85 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012aa67:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012aa6d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa70:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa73:	01 c8                	add    %ecx,%eax
f012aa75:	8a 00                	mov    (%eax),%al
f012aa77:	0f be c0             	movsbl %al,%eax
f012aa7a:	01 d0                	add    %edx,%eax
f012aa7c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012aa82:	ff 45 f4             	incl   -0xc(%ebp)
f012aa85:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012aa8b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa8e:	7f d7                	jg     f012aa67 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012aa90:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012aa96:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012aa9c:	89 c1                	mov    %eax,%ecx
f012aa9e:	01 c9                	add    %ecx,%ecx
f012aaa0:	01 c8                	add    %ecx,%eax
f012aaa2:	39 c2                	cmp    %eax,%edx
f012aaa4:	74 17                	je     f012aabd <test_kfreelast+0xd82>
f012aaa6:	83 ec 04             	sub    $0x4,%esp
f012aaa9:	68 e0 be 13 f0       	push   $0xf013bee0
f012aaae:	68 50 0d 00 00       	push   $0xd50
f012aab3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012aab8:	e8 48 57 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012aabd:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012aac3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012aac6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aacd:	eb 1e                	jmp    f012aaed <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012aacf:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012aad5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aad8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aadb:	01 c8                	add    %ecx,%eax
f012aadd:	8a 00                	mov    (%eax),%al
f012aadf:	0f be c0             	movsbl %al,%eax
f012aae2:	01 d0                	add    %edx,%eax
f012aae4:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012aaea:	ff 45 f4             	incl   -0xc(%ebp)
f012aaed:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012aaf3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aaf6:	7f d7                	jg     f012aacf <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012aaf8:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012aafe:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012ab04:	c1 e2 02             	shl    $0x2,%edx
f012ab07:	39 d0                	cmp    %edx,%eax
f012ab09:	74 17                	je     f012ab22 <test_kfreelast+0xde7>
f012ab0b:	83 ec 04             	sub    $0x4,%esp
f012ab0e:	68 e0 be 13 f0       	push   $0xf013bee0
f012ab13:	68 58 0d 00 00       	push   $0xd58
f012ab18:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ab1d:	e8 e3 56 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012ab22:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ab28:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012ab2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab32:	eb 1e                	jmp    f012ab52 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012ab34:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012ab3a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab3d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab40:	01 c8                	add    %ecx,%eax
f012ab42:	8a 00                	mov    (%eax),%al
f012ab44:	0f be c0             	movsbl %al,%eax
f012ab47:	01 d0                	add    %edx,%eax
f012ab49:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012ab4f:	ff 45 f4             	incl   -0xc(%ebp)
f012ab52:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ab58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ab5b:	7f d7                	jg     f012ab34 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012ab5d:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012ab63:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012ab69:	89 d0                	mov    %edx,%eax
f012ab6b:	c1 e0 02             	shl    $0x2,%eax
f012ab6e:	01 d0                	add    %edx,%eax
f012ab70:	39 c1                	cmp    %eax,%ecx
f012ab72:	74 17                	je     f012ab8b <test_kfreelast+0xe50>
f012ab74:	83 ec 04             	sub    $0x4,%esp
f012ab77:	68 e0 be 13 f0       	push   $0xf013bee0
f012ab7c:	68 60 0d 00 00       	push   $0xd60
f012ab81:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ab86:	e8 7a 56 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012ab8b:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ab91:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012ab94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab9b:	eb 1e                	jmp    f012abbb <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012ab9d:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aba3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aba6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aba9:	01 c8                	add    %ecx,%eax
f012abab:	8a 00                	mov    (%eax),%al
f012abad:	0f be c0             	movsbl %al,%eax
f012abb0:	01 d0                	add    %edx,%eax
f012abb2:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012abb8:	ff 45 f4             	incl   -0xc(%ebp)
f012abbb:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012abc1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012abc4:	7f d7                	jg     f012ab9d <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012abc6:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012abcc:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012abd2:	89 d0                	mov    %edx,%eax
f012abd4:	01 c0                	add    %eax,%eax
f012abd6:	01 d0                	add    %edx,%eax
f012abd8:	01 c0                	add    %eax,%eax
f012abda:	01 d0                	add    %edx,%eax
f012abdc:	39 c1                	cmp    %eax,%ecx
f012abde:	74 17                	je     f012abf7 <test_kfreelast+0xebc>
f012abe0:	83 ec 04             	sub    $0x4,%esp
f012abe3:	68 e0 be 13 f0       	push   $0xf013bee0
f012abe8:	68 68 0d 00 00       	push   $0xd68
f012abed:	68 fa b6 13 f0       	push   $0xf013b6fa
f012abf2:	e8 0e 56 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012abf7:	e8 b5 23 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012abfc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012abff:	e8 c4 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012ac07:	83 ec 0c             	sub    $0xc,%esp
f012ac0a:	68 00 50 00 00       	push   $0x5000
f012ac0f:	e8 78 cf fd ff       	call   f0107b8c <kmalloc>
f012ac14:	83 c4 10             	add    $0x10,%esp
f012ac17:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ac1d:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ac23:	89 c1                	mov    %eax,%ecx
f012ac25:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012ac2c:	10 00 00 
f012ac2f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ac35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ac3a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012ac40:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ac46:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac4b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012ac51:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ac57:	29 d0                	sub    %edx,%eax
f012ac59:	89 c3                	mov    %eax,%ebx
f012ac5b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012ac62:	10 00 00 
f012ac65:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ac6a:	0f b6 d0             	movzbl %al,%edx
f012ac6d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ac73:	01 d0                	add    %edx,%eax
f012ac75:	48                   	dec    %eax
f012ac76:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012ac7c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012ac82:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac87:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012ac8d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012ac93:	29 d0                	sub    %edx,%eax
f012ac95:	01 c3                	add    %eax,%ebx
f012ac97:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012ac9e:	10 00 00 
f012aca1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012aca6:	0f b6 c0             	movzbl %al,%eax
f012aca9:	c1 e0 04             	shl    $0x4,%eax
f012acac:	89 c2                	mov    %eax,%edx
f012acae:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012acb4:	01 d0                	add    %edx,%eax
f012acb6:	48                   	dec    %eax
f012acb7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012acbd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012acc3:	ba 00 00 00 00       	mov    $0x0,%edx
f012acc8:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012acce:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012acd4:	29 d0                	sub    %edx,%eax
f012acd6:	01 d8                	add    %ebx,%eax
f012acd8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012acdd:	39 c1                	cmp    %eax,%ecx
f012acdf:	74 17                	je     f012acf8 <test_kfreelast+0xfbd>
f012ace1:	83 ec 04             	sub    $0x4,%esp
f012ace4:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012ace9:	68 71 0d 00 00       	push   $0xd71
f012acee:	68 fa b6 13 f0       	push   $0xf013b6fa
f012acf3:	e8 0d 55 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012acf8:	e8 cb 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012acfd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad00:	74 17                	je     f012ad19 <test_kfreelast+0xfde>
f012ad02:	83 ec 04             	sub    $0x4,%esp
f012ad05:	68 14 b7 13 f0       	push   $0xf013b714
f012ad0a:	68 72 0d 00 00       	push   $0xd72
f012ad0f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ad14:	e8 ec 54 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ad19:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ad1c:	e8 90 22 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012ad21:	29 c3                	sub    %eax,%ebx
f012ad23:	89 d8                	mov    %ebx,%eax
f012ad25:	83 f8 05             	cmp    $0x5,%eax
f012ad28:	74 17                	je     f012ad41 <test_kfreelast+0x1006>
f012ad2a:	83 ec 04             	sub    $0x4,%esp
f012ad2d:	68 7c b7 13 f0       	push   $0xf013b77c
f012ad32:	68 73 0d 00 00       	push   $0xd73
f012ad37:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ad3c:	e8 c4 54 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012ad41:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012ad48:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012ad4b:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ad51:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012ad54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad5b:	eb 0e                	jmp    f012ad6b <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012ad5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ad60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad63:	01 d0                	add    %edx,%eax
f012ad65:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012ad68:	ff 45 f4             	incl   -0xc(%ebp)
f012ad6b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012ad71:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad74:	7f e7                	jg     f012ad5d <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ad76:	e8 36 22 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012ad7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad7e:	e8 45 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012ad86:	83 ec 0c             	sub    $0xc,%esp
f012ad89:	68 00 00 10 00       	push   $0x100000
f012ad8e:	e8 f9 cd fd ff       	call   f0107b8c <kmalloc>
f012ad93:	83 c4 10             	add    $0x10,%esp
f012ad96:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ad9c:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ada2:	89 c1                	mov    %eax,%ecx
f012ada4:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012adab:	10 00 00 
f012adae:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012adb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012adb9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012adbf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012adc5:	ba 00 00 00 00       	mov    $0x0,%edx
f012adca:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012add0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012add6:	29 d0                	sub    %edx,%eax
f012add8:	89 c3                	mov    %eax,%ebx
f012adda:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012ade1:	10 00 00 
f012ade4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ade9:	0f b6 d0             	movzbl %al,%edx
f012adec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012adf2:	01 d0                	add    %edx,%eax
f012adf4:	48                   	dec    %eax
f012adf5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012adfb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ae01:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae06:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012ae0c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012ae12:	29 d0                	sub    %edx,%eax
f012ae14:	01 c3                	add    %eax,%ebx
f012ae16:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012ae1d:	10 00 00 
f012ae20:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ae25:	0f b6 c0             	movzbl %al,%eax
f012ae28:	c1 e0 04             	shl    $0x4,%eax
f012ae2b:	89 c2                	mov    %eax,%edx
f012ae2d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ae33:	01 d0                	add    %edx,%eax
f012ae35:	48                   	dec    %eax
f012ae36:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012ae3c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ae42:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae47:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012ae4d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ae53:	29 d0                	sub    %edx,%eax
f012ae55:	01 d8                	add    %ebx,%eax
f012ae57:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ae5c:	39 c1                	cmp    %eax,%ecx
f012ae5e:	74 17                	je     f012ae77 <test_kfreelast+0x113c>
f012ae60:	83 ec 04             	sub    $0x4,%esp
f012ae63:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012ae68:	68 7f 0d 00 00       	push   $0xd7f
f012ae6d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ae72:	e8 8e 53 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ae77:	e8 4c 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae7c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae7f:	74 17                	je     f012ae98 <test_kfreelast+0x115d>
f012ae81:	83 ec 04             	sub    $0x4,%esp
f012ae84:	68 14 b7 13 f0       	push   $0xf013b714
f012ae89:	68 80 0d 00 00       	push   $0xd80
f012ae8e:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ae93:	e8 6d 53 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ae98:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ae9b:	e8 11 21 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012aea0:	29 c3                	sub    %eax,%ebx
f012aea2:	89 d8                	mov    %ebx,%eax
f012aea4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012aea9:	74 17                	je     f012aec2 <test_kfreelast+0x1187>
f012aeab:	83 ec 04             	sub    $0x4,%esp
f012aeae:	68 7c b7 13 f0       	push   $0xf013b77c
f012aeb3:	68 81 0d 00 00       	push   $0xd81
f012aeb8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012aebd:	e8 43 53 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012aec2:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012aec9:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012aecc:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012aed2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012aed5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aedc:	eb 0e                	jmp    f012aeec <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012aede:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aee1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aee4:	01 d0                	add    %edx,%eax
f012aee6:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012aee9:	ff 45 f4             	incl   -0xc(%ebp)
f012aeec:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012aef2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aef5:	7f e7                	jg     f012aede <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012aef7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012aefe:	e8 ae 20 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012af03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af06:	e8 bd 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012af0e:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012af14:	83 ec 0c             	sub    $0xc,%esp
f012af17:	50                   	push   %eax
f012af18:	e8 3a cd fd ff       	call   f0107c57 <kfree>
f012af1d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012af20:	e8 a3 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af25:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af28:	74 17                	je     f012af41 <test_kfreelast+0x1206>
f012af2a:	83 ec 04             	sub    $0x4,%esp
f012af2d:	68 14 b7 13 f0       	push   $0xf013b714
f012af32:	68 91 0d 00 00       	push   $0xd91
f012af37:	68 fa b6 13 f0       	push   $0xf013b6fa
f012af3c:	e8 c4 52 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012af41:	e8 6b 20 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012af46:	89 c2                	mov    %eax,%edx
f012af48:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012af4b:	29 c2                	sub    %eax,%edx
f012af4d:	89 d0                	mov    %edx,%eax
f012af4f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012af54:	74 17                	je     f012af6d <test_kfreelast+0x1232>
f012af56:	83 ec 04             	sub    $0x4,%esp
f012af59:	68 84 be 13 f0       	push   $0xf013be84
f012af5e:	68 92 0d 00 00       	push   $0xd92
f012af63:	68 fa b6 13 f0       	push   $0xf013b6fa
f012af68:	e8 98 52 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012af6d:	e8 3f 20 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012af72:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af75:	e8 4e 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012af7a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012af7d:	83 ec 0c             	sub    $0xc,%esp
f012af80:	68 00 78 00 00       	push   $0x7800
f012af85:	e8 02 cc fd ff       	call   f0107b8c <kmalloc>
f012af8a:	83 c4 10             	add    $0x10,%esp
f012af8d:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012af93:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012af99:	89 c1                	mov    %eax,%ecx
f012af9b:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012afa2:	10 00 00 
f012afa5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012afab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012afb0:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012afb6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012afbc:	ba 00 00 00 00       	mov    $0x0,%edx
f012afc1:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012afc7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012afcd:	29 d0                	sub    %edx,%eax
f012afcf:	89 c3                	mov    %eax,%ebx
f012afd1:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012afd8:	10 00 00 
f012afdb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012afe0:	0f b6 d0             	movzbl %al,%edx
f012afe3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012afe9:	01 d0                	add    %edx,%eax
f012afeb:	48                   	dec    %eax
f012afec:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012aff2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aff8:	ba 00 00 00 00       	mov    $0x0,%edx
f012affd:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012b003:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b009:	29 d0                	sub    %edx,%eax
f012b00b:	01 c3                	add    %eax,%ebx
f012b00d:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012b014:	10 00 00 
f012b017:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b01c:	0f b6 c0             	movzbl %al,%eax
f012b01f:	c1 e0 04             	shl    $0x4,%eax
f012b022:	89 c2                	mov    %eax,%edx
f012b024:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b02a:	01 d0                	add    %edx,%eax
f012b02c:	48                   	dec    %eax
f012b02d:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012b033:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b039:	ba 00 00 00 00       	mov    $0x0,%edx
f012b03e:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012b044:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b04a:	29 d0                	sub    %edx,%eax
f012b04c:	01 d8                	add    %ebx,%eax
f012b04e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b053:	39 c1                	cmp    %eax,%ecx
f012b055:	74 17                	je     f012b06e <test_kfreelast+0x1333>
f012b057:	83 ec 04             	sub    $0x4,%esp
f012b05a:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012b05f:	68 9b 0d 00 00       	push   $0xd9b
f012b064:	68 fa b6 13 f0       	push   $0xf013b6fa
f012b069:	e8 97 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b06e:	e8 55 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b073:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b076:	74 17                	je     f012b08f <test_kfreelast+0x1354>
f012b078:	83 ec 04             	sub    $0x4,%esp
f012b07b:	68 14 b7 13 f0       	push   $0xf013b714
f012b080:	68 9c 0d 00 00       	push   $0xd9c
f012b085:	68 fa b6 13 f0       	push   $0xf013b6fa
f012b08a:	e8 76 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b08f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b092:	e8 1a 1f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b097:	29 c3                	sub    %eax,%ebx
f012b099:	89 d8                	mov    %ebx,%eax
f012b09b:	83 f8 08             	cmp    $0x8,%eax
f012b09e:	74 17                	je     f012b0b7 <test_kfreelast+0x137c>
f012b0a0:	83 ec 04             	sub    $0x4,%esp
f012b0a3:	68 7c b7 13 f0       	push   $0xf013b77c
f012b0a8:	68 9d 0d 00 00       	push   $0xd9d
f012b0ad:	68 fa b6 13 f0       	push   $0xf013b6fa
f012b0b2:	e8 4e 51 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b0b7:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b0be:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b0c1:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b0c7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b0ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b0d1:	eb 0e                	jmp    f012b0e1 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b0d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b0d6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0d9:	01 d0                	add    %edx,%eax
f012b0db:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b0de:	ff 45 f4             	incl   -0xc(%ebp)
f012b0e1:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b0e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b0ea:	7f e7                	jg     f012b0d3 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b0ec:	e8 c0 1e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b0f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0f4:	e8 cf 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b0fc:	83 ec 0c             	sub    $0xc,%esp
f012b0ff:	68 00 00 10 00       	push   $0x100000
f012b104:	e8 83 ca fd ff       	call   f0107b8c <kmalloc>
f012b109:	83 c4 10             	add    $0x10,%esp
f012b10c:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b112:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b118:	89 c1                	mov    %eax,%ecx
f012b11a:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b121:	10 00 00 
f012b124:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b12a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b12f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b135:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b13b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b140:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b146:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b14c:	29 d0                	sub    %edx,%eax
f012b14e:	89 c3                	mov    %eax,%ebx
f012b150:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b157:	10 00 00 
f012b15a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b15f:	0f b6 d0             	movzbl %al,%edx
f012b162:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b168:	01 d0                	add    %edx,%eax
f012b16a:	48                   	dec    %eax
f012b16b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b171:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b177:	ba 00 00 00 00       	mov    $0x0,%edx
f012b17c:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b182:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b188:	29 d0                	sub    %edx,%eax
f012b18a:	01 c3                	add    %eax,%ebx
f012b18c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b193:	10 00 00 
f012b196:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b19b:	0f b6 c0             	movzbl %al,%eax
f012b19e:	c1 e0 04             	shl    $0x4,%eax
f012b1a1:	89 c2                	mov    %eax,%edx
f012b1a3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b1a9:	01 d0                	add    %edx,%eax
f012b1ab:	48                   	dec    %eax
f012b1ac:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b1b2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b1b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1bd:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b1c3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b1c9:	29 d0                	sub    %edx,%eax
f012b1cb:	01 d8                	add    %ebx,%eax
f012b1cd:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b1d2:	39 c1                	cmp    %eax,%ecx
f012b1d4:	74 17                	je     f012b1ed <test_kfreelast+0x14b2>
f012b1d6:	83 ec 04             	sub    $0x4,%esp
f012b1d9:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012b1de:	68 a9 0d 00 00       	push   $0xda9
f012b1e3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012b1e8:	e8 18 50 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b1ed:	e8 d6 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b1f2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1f5:	74 17                	je     f012b20e <test_kfreelast+0x14d3>
f012b1f7:	83 ec 04             	sub    $0x4,%esp
f012b1fa:	68 14 b7 13 f0       	push   $0xf013b714
f012b1ff:	68 aa 0d 00 00       	push   $0xdaa
f012b204:	68 fa b6 13 f0       	push   $0xf013b6fa
f012b209:	e8 f7 4f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b20e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b211:	e8 9b 1d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b216:	29 c3                	sub    %eax,%ebx
f012b218:	89 d8                	mov    %ebx,%eax
f012b21a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b21f:	74 17                	je     f012b238 <test_kfreelast+0x14fd>
f012b221:	83 ec 04             	sub    $0x4,%esp
f012b224:	68 7c b7 13 f0       	push   $0xf013b77c
f012b229:	68 ab 0d 00 00       	push   $0xdab
f012b22e:	68 fa b6 13 f0       	push   $0xf013b6fa
f012b233:	e8 cd 4f fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b238:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b23f:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b242:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b248:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b24b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b252:	eb 0e                	jmp    f012b262 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b254:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b257:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b25a:	01 d0                	add    %edx,%eax
f012b25c:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b25f:	ff 45 f4             	incl   -0xc(%ebp)
f012b262:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b268:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b26b:	7f e7                	jg     f012b254 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b26d:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b271:	83 ec 08             	sub    $0x8,%esp
f012b274:	ff 75 f0             	pushl  -0x10(%ebp)
f012b277:	68 2c c7 13 f0       	push   $0xf013c72c
f012b27c:	e8 8d 5a fd ff       	call   f0100d0e <cprintf>
f012b281:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b284:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b28b:	e8 21 1d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b290:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b293:	e8 30 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b298:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b29b:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b2a1:	83 ec 0c             	sub    $0xc,%esp
f012b2a4:	50                   	push   %eax
f012b2a5:	e8 ad c9 fd ff       	call   f0107c57 <kfree>
f012b2aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b2ad:	e8 16 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b2b2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2b5:	74 1d                	je     f012b2d4 <test_kfreelast+0x1599>
f012b2b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2bb:	75 17                	jne    f012b2d4 <test_kfreelast+0x1599>
f012b2bd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2c4:	83 ec 0c             	sub    $0xc,%esp
f012b2c7:	68 54 c7 13 f0       	push   $0xf013c754
f012b2cc:	e8 3d 5a fd ff       	call   f0100d0e <cprintf>
f012b2d1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b2d4:	e8 d8 1c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b2d9:	89 c2                	mov    %eax,%edx
f012b2db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2de:	29 c2                	sub    %eax,%edx
f012b2e0:	89 d0                	mov    %edx,%eax
f012b2e2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b2e7:	74 1d                	je     f012b306 <test_kfreelast+0x15cb>
f012b2e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2ed:	75 17                	jne    f012b306 <test_kfreelast+0x15cb>
f012b2ef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2f6:	83 ec 0c             	sub    $0xc,%esp
f012b2f9:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b2fe:	e8 0b 5a fd ff       	call   f0100d0e <cprintf>
f012b303:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b306:	e8 a6 1c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b30b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b30e:	e8 b5 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b313:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b316:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b31c:	83 ec 0c             	sub    $0xc,%esp
f012b31f:	50                   	push   %eax
f012b320:	e8 32 c9 fd ff       	call   f0107c57 <kfree>
f012b325:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b328:	e8 9b 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b32d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b330:	74 1d                	je     f012b34f <test_kfreelast+0x1614>
f012b332:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b336:	75 17                	jne    f012b34f <test_kfreelast+0x1614>
f012b338:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b33f:	83 ec 0c             	sub    $0xc,%esp
f012b342:	68 54 c7 13 f0       	push   $0xf013c754
f012b347:	e8 c2 59 fd ff       	call   f0100d0e <cprintf>
f012b34c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b34f:	e8 5d 1c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b354:	89 c2                	mov    %eax,%edx
f012b356:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b359:	29 c2                	sub    %eax,%edx
f012b35b:	89 d0                	mov    %edx,%eax
f012b35d:	83 f8 08             	cmp    $0x8,%eax
f012b360:	74 1d                	je     f012b37f <test_kfreelast+0x1644>
f012b362:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b366:	75 17                	jne    f012b37f <test_kfreelast+0x1644>
f012b368:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b36f:	83 ec 0c             	sub    $0xc,%esp
f012b372:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b377:	e8 92 59 fd ff       	call   f0100d0e <cprintf>
f012b37c:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b37f:	e8 2d 1c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b384:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b387:	e8 3c 8a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b38c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b38f:	83 ec 0c             	sub    $0xc,%esp
f012b392:	68 00 28 00 00       	push   $0x2800
f012b397:	e8 f0 c7 fd ff       	call   f0107b8c <kmalloc>
f012b39c:	83 c4 10             	add    $0x10,%esp
f012b39f:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b3a5:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b3ab:	89 c1                	mov    %eax,%ecx
f012b3ad:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b3b4:	10 00 00 
f012b3b7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b3bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b3c2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b3c8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b3ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3d3:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b3d9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b3df:	29 d0                	sub    %edx,%eax
f012b3e1:	89 c3                	mov    %eax,%ebx
f012b3e3:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b3ea:	10 00 00 
f012b3ed:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b3f2:	0f b6 d0             	movzbl %al,%edx
f012b3f5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b3fb:	01 d0                	add    %edx,%eax
f012b3fd:	48                   	dec    %eax
f012b3fe:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b404:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b40a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b40f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b415:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b41b:	29 d0                	sub    %edx,%eax
f012b41d:	01 c3                	add    %eax,%ebx
f012b41f:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b426:	10 00 00 
f012b429:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b42e:	0f b6 c0             	movzbl %al,%eax
f012b431:	c1 e0 04             	shl    $0x4,%eax
f012b434:	89 c2                	mov    %eax,%edx
f012b436:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b43c:	01 d0                	add    %edx,%eax
f012b43e:	48                   	dec    %eax
f012b43f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b445:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b44b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b450:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b456:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b45c:	29 d0                	sub    %edx,%eax
f012b45e:	01 d8                	add    %ebx,%eax
f012b460:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b465:	39 c1                	cmp    %eax,%ecx
f012b467:	74 1d                	je     f012b486 <test_kfreelast+0x174b>
f012b469:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b46d:	75 17                	jne    f012b486 <test_kfreelast+0x174b>
f012b46f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b476:	83 ec 0c             	sub    $0xc,%esp
f012b479:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012b47e:	e8 8b 58 fd ff       	call   f0100d0e <cprintf>
f012b483:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b486:	e8 3d 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b48b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b48e:	74 1d                	je     f012b4ad <test_kfreelast+0x1772>
f012b490:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b494:	75 17                	jne    f012b4ad <test_kfreelast+0x1772>
f012b496:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b49d:	83 ec 0c             	sub    $0xc,%esp
f012b4a0:	68 54 c7 13 f0       	push   $0xf013c754
f012b4a5:	e8 64 58 fd ff       	call   f0100d0e <cprintf>
f012b4aa:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b4ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b4b0:	e8 fc 1a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b4b5:	29 c3                	sub    %eax,%ebx
f012b4b7:	89 d8                	mov    %ebx,%eax
f012b4b9:	83 f8 03             	cmp    $0x3,%eax
f012b4bc:	74 1d                	je     f012b4db <test_kfreelast+0x17a0>
f012b4be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4c2:	75 17                	jne    f012b4db <test_kfreelast+0x17a0>
f012b4c4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4cb:	83 ec 0c             	sub    $0xc,%esp
f012b4ce:	68 60 c8 13 f0       	push   $0xf013c860
f012b4d3:	e8 36 58 fd ff       	call   f0100d0e <cprintf>
f012b4d8:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b4db:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b4e2:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b4e5:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b4eb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b4ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b4f5:	eb 0e                	jmp    f012b505 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b4f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b4fa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4fd:	01 d0                	add    %edx,%eax
f012b4ff:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b502:	ff 45 f4             	incl   -0xc(%ebp)
f012b505:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b50b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b50e:	7f e7                	jg     f012b4f7 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b510:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b514:	75 17                	jne    f012b52d <test_kfreelast+0x17f2>
f012b516:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b51a:	83 ec 08             	sub    $0x8,%esp
f012b51d:	ff 75 f0             	pushl  -0x10(%ebp)
f012b520:	68 2c c7 13 f0       	push   $0xf013c72c
f012b525:	e8 e4 57 fd ff       	call   f0100d0e <cprintf>
f012b52a:	83 c4 10             	add    $0x10,%esp
f012b52d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b534:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b53a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b53d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b544:	eb 1e                	jmp    f012b564 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b546:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b54c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b54f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b552:	01 c8                	add    %ecx,%eax
f012b554:	8a 00                	mov    (%eax),%al
f012b556:	0f be c0             	movsbl %al,%eax
f012b559:	01 d0                	add    %edx,%eax
f012b55b:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b561:	ff 45 f4             	incl   -0xc(%ebp)
f012b564:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b56a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b56d:	7f d7                	jg     f012b546 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b56f:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b575:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b57b:	89 d0                	mov    %edx,%eax
f012b57d:	01 c0                	add    %eax,%eax
f012b57f:	01 d0                	add    %edx,%eax
f012b581:	c1 e0 02             	shl    $0x2,%eax
f012b584:	39 c1                	cmp    %eax,%ecx
f012b586:	74 1d                	je     f012b5a5 <test_kfreelast+0x186a>
f012b588:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b58c:	75 17                	jne    f012b5a5 <test_kfreelast+0x186a>
f012b58e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b595:	83 ec 0c             	sub    $0xc,%esp
f012b598:	68 a4 c8 13 f0       	push   $0xf013c8a4
f012b59d:	e8 6c 57 fd ff       	call   f0100d0e <cprintf>
f012b5a2:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b5a5:	83 ec 0c             	sub    $0xc,%esp
f012b5a8:	6a 03                	push   $0x3
f012b5aa:	e8 a2 1e fe ff       	call   f010d451 <sys_bypassPageFault>
f012b5af:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b5b2:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b5b8:	05 00 30 00 00       	add    $0x3000,%eax
f012b5bd:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b5c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b5c7:	eb 3c                	jmp    f012b605 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b5c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b5cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b5cf:	01 d0                	add    %edx,%eax
f012b5d1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b5d4:	e8 66 1e fe ff       	call   f010d43f <sys_rcr2>
f012b5d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b5dc:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b5df:	01 ca                	add    %ecx,%edx
f012b5e1:	39 d0                	cmp    %edx,%eax
f012b5e3:	74 1d                	je     f012b602 <test_kfreelast+0x18c7>
f012b5e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5e9:	75 17                	jne    f012b602 <test_kfreelast+0x18c7>
f012b5eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5f2:	83 ec 0c             	sub    $0xc,%esp
f012b5f5:	68 d8 c8 13 f0       	push   $0xf013c8d8
f012b5fa:	e8 0f 57 fd ff       	call   f0100d0e <cprintf>
f012b5ff:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b602:	ff 45 f4             	incl   -0xc(%ebp)
f012b605:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b60c:	7e bb                	jle    f012b5c9 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b60e:	83 ec 0c             	sub    $0xc,%esp
f012b611:	6a 00                	push   $0x0
f012b613:	e8 39 1e fe ff       	call   f010d451 <sys_bypassPageFault>
f012b618:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b61b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b61f:	75 17                	jne    f012b638 <test_kfreelast+0x18fd>
f012b621:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b625:	83 ec 08             	sub    $0x8,%esp
f012b628:	ff 75 f0             	pushl  -0x10(%ebp)
f012b62b:	68 2c c7 13 f0       	push   $0xf013c72c
f012b630:	e8 d9 56 fd ff       	call   f0100d0e <cprintf>
f012b635:	83 c4 10             	add    $0x10,%esp
f012b638:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b63f:	e8 6d 19 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b644:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b647:	e8 7c 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b64c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b64f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b655:	83 ec 0c             	sub    $0xc,%esp
f012b658:	50                   	push   %eax
f012b659:	e8 f9 c5 fd ff       	call   f0107c57 <kfree>
f012b65e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b661:	e8 62 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b666:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b669:	74 1d                	je     f012b688 <test_kfreelast+0x194d>
f012b66b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b66f:	75 17                	jne    f012b688 <test_kfreelast+0x194d>
f012b671:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b678:	83 ec 0c             	sub    $0xc,%esp
f012b67b:	68 54 c7 13 f0       	push   $0xf013c754
f012b680:	e8 89 56 fd ff       	call   f0100d0e <cprintf>
f012b685:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b688:	e8 24 19 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b68d:	89 c2                	mov    %eax,%edx
f012b68f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b692:	29 c2                	sub    %eax,%edx
f012b694:	89 d0                	mov    %edx,%eax
f012b696:	83 f8 03             	cmp    $0x3,%eax
f012b699:	74 1d                	je     f012b6b8 <test_kfreelast+0x197d>
f012b69b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b69f:	75 17                	jne    f012b6b8 <test_kfreelast+0x197d>
f012b6a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6a8:	83 ec 0c             	sub    $0xc,%esp
f012b6ab:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b6b0:	e8 59 56 fd ff       	call   f0100d0e <cprintf>
f012b6b5:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6b8:	e8 f4 18 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b6bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6c0:	e8 03 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b6c8:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b6ce:	83 ec 0c             	sub    $0xc,%esp
f012b6d1:	50                   	push   %eax
f012b6d2:	e8 80 c5 fd ff       	call   f0107c57 <kfree>
f012b6d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b6da:	e8 e9 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b6df:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6e2:	74 1d                	je     f012b701 <test_kfreelast+0x19c6>
f012b6e4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6e8:	75 17                	jne    f012b701 <test_kfreelast+0x19c6>
f012b6ea:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6f1:	83 ec 0c             	sub    $0xc,%esp
f012b6f4:	68 54 c7 13 f0       	push   $0xf013c754
f012b6f9:	e8 10 56 fd ff       	call   f0100d0e <cprintf>
f012b6fe:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b701:	e8 ab 18 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b706:	89 c2                	mov    %eax,%edx
f012b708:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b70b:	29 c2                	sub    %eax,%edx
f012b70d:	89 d0                	mov    %edx,%eax
f012b70f:	83 f8 04             	cmp    $0x4,%eax
f012b712:	74 1d                	je     f012b731 <test_kfreelast+0x19f6>
f012b714:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b718:	75 17                	jne    f012b731 <test_kfreelast+0x19f6>
f012b71a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b721:	83 ec 0c             	sub    $0xc,%esp
f012b724:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b729:	e8 e0 55 fd ff       	call   f0100d0e <cprintf>
f012b72e:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b731:	e8 7b 18 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b736:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b739:	e8 8a 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b73e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b741:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b747:	83 ec 0c             	sub    $0xc,%esp
f012b74a:	50                   	push   %eax
f012b74b:	e8 07 c5 fd ff       	call   f0107c57 <kfree>
f012b750:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b753:	e8 70 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b758:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b75b:	74 1d                	je     f012b77a <test_kfreelast+0x1a3f>
f012b75d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b761:	75 17                	jne    f012b77a <test_kfreelast+0x1a3f>
f012b763:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b76a:	83 ec 0c             	sub    $0xc,%esp
f012b76d:	68 54 c7 13 f0       	push   $0xf013c754
f012b772:	e8 97 55 fd ff       	call   f0100d0e <cprintf>
f012b777:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b77a:	e8 32 18 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b77f:	89 c2                	mov    %eax,%edx
f012b781:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b784:	29 c2                	sub    %eax,%edx
f012b786:	89 d0                	mov    %edx,%eax
f012b788:	83 f8 05             	cmp    $0x5,%eax
f012b78b:	74 1d                	je     f012b7aa <test_kfreelast+0x1a6f>
f012b78d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b791:	75 17                	jne    f012b7aa <test_kfreelast+0x1a6f>
f012b793:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b79a:	83 ec 0c             	sub    $0xc,%esp
f012b79d:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012b7a2:	e8 67 55 fd ff       	call   f0100d0e <cprintf>
f012b7a7:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b7aa:	e8 02 18 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b7af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b7b2:	e8 11 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b7b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b7ba:	83 ec 0c             	sub    $0xc,%esp
f012b7bd:	68 00 c8 00 00       	push   $0xc800
f012b7c2:	e8 c5 c3 fd ff       	call   f0107b8c <kmalloc>
f012b7c7:	83 c4 10             	add    $0x10,%esp
f012b7ca:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b7d0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b7d6:	89 c1                	mov    %eax,%ecx
f012b7d8:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b7df:	10 00 00 
f012b7e2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b7e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b7ed:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b7f3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b7f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7fe:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b804:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b80a:	29 d0                	sub    %edx,%eax
f012b80c:	89 c3                	mov    %eax,%ebx
f012b80e:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b815:	10 00 00 
f012b818:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b81d:	0f b6 d0             	movzbl %al,%edx
f012b820:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b826:	01 d0                	add    %edx,%eax
f012b828:	48                   	dec    %eax
f012b829:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b82f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b835:	ba 00 00 00 00       	mov    $0x0,%edx
f012b83a:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b840:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b846:	29 d0                	sub    %edx,%eax
f012b848:	01 c3                	add    %eax,%ebx
f012b84a:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b851:	10 00 00 
f012b854:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b859:	0f b6 c0             	movzbl %al,%eax
f012b85c:	c1 e0 04             	shl    $0x4,%eax
f012b85f:	89 c2                	mov    %eax,%edx
f012b861:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b867:	01 d0                	add    %edx,%eax
f012b869:	48                   	dec    %eax
f012b86a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b870:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b876:	ba 00 00 00 00       	mov    $0x0,%edx
f012b87b:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b881:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b887:	29 d0                	sub    %edx,%eax
f012b889:	01 d8                	add    %ebx,%eax
f012b88b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b890:	39 c1                	cmp    %eax,%ecx
f012b892:	74 1d                	je     f012b8b1 <test_kfreelast+0x1b76>
f012b894:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b898:	75 17                	jne    f012b8b1 <test_kfreelast+0x1b76>
f012b89a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8a1:	83 ec 0c             	sub    $0xc,%esp
f012b8a4:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012b8a9:	e8 60 54 fd ff       	call   f0100d0e <cprintf>
f012b8ae:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b8b1:	e8 12 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8b6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b8b9:	74 1d                	je     f012b8d8 <test_kfreelast+0x1b9d>
f012b8bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8bf:	75 17                	jne    f012b8d8 <test_kfreelast+0x1b9d>
f012b8c1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8c8:	83 ec 0c             	sub    $0xc,%esp
f012b8cb:	68 54 c7 13 f0       	push   $0xf013c754
f012b8d0:	e8 39 54 fd ff       	call   f0100d0e <cprintf>
f012b8d5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b8d8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b8db:	e8 d1 16 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b8e0:	29 c3                	sub    %eax,%ebx
f012b8e2:	89 d8                	mov    %ebx,%eax
f012b8e4:	83 f8 0d             	cmp    $0xd,%eax
f012b8e7:	74 1d                	je     f012b906 <test_kfreelast+0x1bcb>
f012b8e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8ed:	75 17                	jne    f012b906 <test_kfreelast+0x1bcb>
f012b8ef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8f6:	83 ec 0c             	sub    $0xc,%esp
f012b8f9:	68 60 c8 13 f0       	push   $0xf013c860
f012b8fe:	e8 0b 54 fd ff       	call   f0100d0e <cprintf>
f012b903:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b906:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b90d:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b910:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b916:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b919:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b920:	eb 0e                	jmp    f012b930 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b922:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b925:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b928:	01 d0                	add    %edx,%eax
f012b92a:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b92d:	ff 45 f4             	incl   -0xc(%ebp)
f012b930:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b936:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b939:	7f e7                	jg     f012b922 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b93b:	e8 71 16 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012b940:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b943:	e8 80 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b948:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b94b:	83 ec 0c             	sub    $0xc,%esp
f012b94e:	68 00 fc 2f 00       	push   $0x2ffc00
f012b953:	e8 34 c2 fd ff       	call   f0107b8c <kmalloc>
f012b958:	83 c4 10             	add    $0x10,%esp
f012b95b:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b961:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b967:	89 c1                	mov    %eax,%ecx
f012b969:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b970:	10 00 00 
f012b973:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b979:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b97e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b984:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b98a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b98f:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b995:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b99b:	29 d0                	sub    %edx,%eax
f012b99d:	89 c3                	mov    %eax,%ebx
f012b99f:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b9a6:	10 00 00 
f012b9a9:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b9ae:	0f b6 d0             	movzbl %al,%edx
f012b9b1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b9b7:	01 d0                	add    %edx,%eax
f012b9b9:	48                   	dec    %eax
f012b9ba:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b9c0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b9c6:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9cb:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b9d1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b9d7:	29 d0                	sub    %edx,%eax
f012b9d9:	01 c3                	add    %eax,%ebx
f012b9db:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b9e2:	10 00 00 
f012b9e5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012b9ea:	0f b6 c0             	movzbl %al,%eax
f012b9ed:	c1 e0 04             	shl    $0x4,%eax
f012b9f0:	89 c2                	mov    %eax,%edx
f012b9f2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b9f8:	01 d0                	add    %edx,%eax
f012b9fa:	48                   	dec    %eax
f012b9fb:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012ba01:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ba07:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba0c:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012ba12:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ba18:	29 d0                	sub    %edx,%eax
f012ba1a:	01 d8                	add    %ebx,%eax
f012ba1c:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012ba21:	39 c1                	cmp    %eax,%ecx
f012ba23:	74 1d                	je     f012ba42 <test_kfreelast+0x1d07>
f012ba25:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba29:	75 17                	jne    f012ba42 <test_kfreelast+0x1d07>
f012ba2b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba32:	83 ec 0c             	sub    $0xc,%esp
f012ba35:	68 f8 c7 13 f0       	push   $0xf013c7f8
f012ba3a:	e8 cf 52 fd ff       	call   f0100d0e <cprintf>
f012ba3f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba42:	e8 81 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba47:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba4a:	74 1d                	je     f012ba69 <test_kfreelast+0x1d2e>
f012ba4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba50:	75 17                	jne    f012ba69 <test_kfreelast+0x1d2e>
f012ba52:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba59:	83 ec 0c             	sub    $0xc,%esp
f012ba5c:	68 54 c7 13 f0       	push   $0xf013c754
f012ba61:	e8 a8 52 fd ff       	call   f0100d0e <cprintf>
f012ba66:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ba69:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ba6c:	e8 40 15 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012ba71:	29 c3                	sub    %eax,%ebx
f012ba73:	89 d8                	mov    %ebx,%eax
f012ba75:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ba7a:	74 1d                	je     f012ba99 <test_kfreelast+0x1d5e>
f012ba7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba80:	75 17                	jne    f012ba99 <test_kfreelast+0x1d5e>
f012ba82:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba89:	83 ec 0c             	sub    $0xc,%esp
f012ba8c:	68 60 c8 13 f0       	push   $0xf013c860
f012ba91:	e8 78 52 fd ff       	call   f0100d0e <cprintf>
f012ba96:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012ba99:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012baa0:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012baa3:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012baa9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012baac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bab3:	eb 0e                	jmp    f012bac3 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012bab5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bab8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012babb:	01 d0                	add    %edx,%eax
f012babd:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bac0:	ff 45 f4             	incl   -0xc(%ebp)
f012bac3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bac9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bacc:	7f e7                	jg     f012bab5 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bace:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bad2:	75 17                	jne    f012baeb <test_kfreelast+0x1db0>
f012bad4:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012bad8:	83 ec 08             	sub    $0x8,%esp
f012badb:	ff 75 f0             	pushl  -0x10(%ebp)
f012bade:	68 2c c7 13 f0       	push   $0xf013c72c
f012bae3:	e8 26 52 fd ff       	call   f0100d0e <cprintf>
f012bae8:	83 c4 10             	add    $0x10,%esp
f012baeb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012baf2:	e8 ba 14 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012baf7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bafa:	e8 c9 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012baff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012bb02:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bb08:	83 ec 0c             	sub    $0xc,%esp
f012bb0b:	50                   	push   %eax
f012bb0c:	e8 46 c1 fd ff       	call   f0107c57 <kfree>
f012bb11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb14:	e8 af 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb19:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bb1c:	74 1d                	je     f012bb3b <test_kfreelast+0x1e00>
f012bb1e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb22:	75 17                	jne    f012bb3b <test_kfreelast+0x1e00>
f012bb24:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb2b:	83 ec 0c             	sub    $0xc,%esp
f012bb2e:	68 54 c7 13 f0       	push   $0xf013c754
f012bb33:	e8 d6 51 fd ff       	call   f0100d0e <cprintf>
f012bb38:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bb3b:	e8 71 14 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bb40:	89 c2                	mov    %eax,%edx
f012bb42:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bb45:	29 c2                	sub    %eax,%edx
f012bb47:	89 d0                	mov    %edx,%eax
f012bb49:	83 f8 0d             	cmp    $0xd,%eax
f012bb4c:	74 1d                	je     f012bb6b <test_kfreelast+0x1e30>
f012bb4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb52:	75 17                	jne    f012bb6b <test_kfreelast+0x1e30>
f012bb54:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb5b:	83 ec 0c             	sub    $0xc,%esp
f012bb5e:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012bb63:	e8 a6 51 fd ff       	call   f0100d0e <cprintf>
f012bb68:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bb6b:	83 ec 0c             	sub    $0xc,%esp
f012bb6e:	6a 03                	push   $0x3
f012bb70:	e8 dc 18 fe ff       	call   f010d451 <sys_bypassPageFault>
f012bb75:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bb78:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bb7e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012bb81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bb88:	eb 3c                	jmp    f012bbc6 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012bb8a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bb8d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bb90:	01 d0                	add    %edx,%eax
f012bb92:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bb95:	e8 a5 18 fe ff       	call   f010d43f <sys_rcr2>
f012bb9a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bb9d:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bba0:	01 ca                	add    %ecx,%edx
f012bba2:	39 d0                	cmp    %edx,%eax
f012bba4:	74 1d                	je     f012bbc3 <test_kfreelast+0x1e88>
f012bba6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbaa:	75 17                	jne    f012bbc3 <test_kfreelast+0x1e88>
f012bbac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbb3:	83 ec 0c             	sub    $0xc,%esp
f012bbb6:	68 d8 c8 13 f0       	push   $0xf013c8d8
f012bbbb:	e8 4e 51 fd ff       	call   f0100d0e <cprintf>
f012bbc0:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bbc3:	ff 45 f4             	incl   -0xc(%ebp)
f012bbc6:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bbcd:	7e bb                	jle    f012bb8a <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bbcf:	83 ec 0c             	sub    $0xc,%esp
f012bbd2:	6a 00                	push   $0x0
f012bbd4:	e8 78 18 fe ff       	call   f010d451 <sys_bypassPageFault>
f012bbd9:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bbdc:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bbe2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bbe5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bbec:	eb 1e                	jmp    f012bc0c <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bbee:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012bbf4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bbf7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bbfa:	01 c8                	add    %ecx,%eax
f012bbfc:	8a 00                	mov    (%eax),%al
f012bbfe:	0f be c0             	movsbl %al,%eax
f012bc01:	01 d0                	add    %edx,%eax
f012bc03:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bc09:	ff 45 f4             	incl   -0xc(%ebp)
f012bc0c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bc12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bc15:	7f d7                	jg     f012bbee <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bc17:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bc1d:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bc23:	89 d0                	mov    %edx,%eax
f012bc25:	01 c0                	add    %eax,%eax
f012bc27:	01 d0                	add    %edx,%eax
f012bc29:	01 c0                	add    %eax,%eax
f012bc2b:	01 d0                	add    %edx,%eax
f012bc2d:	01 c0                	add    %eax,%eax
f012bc2f:	39 c1                	cmp    %eax,%ecx
f012bc31:	74 1d                	je     f012bc50 <test_kfreelast+0x1f15>
f012bc33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc37:	75 17                	jne    f012bc50 <test_kfreelast+0x1f15>
f012bc39:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc40:	83 ec 0c             	sub    $0xc,%esp
f012bc43:	68 a4 c8 13 f0       	push   $0xf013c8a4
f012bc48:	e8 c1 50 fd ff       	call   f0100d0e <cprintf>
f012bc4d:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bc50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc54:	75 17                	jne    f012bc6d <test_kfreelast+0x1f32>
f012bc56:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bc5a:	83 ec 08             	sub    $0x8,%esp
f012bc5d:	ff 75 f0             	pushl  -0x10(%ebp)
f012bc60:	68 2c c7 13 f0       	push   $0xf013c72c
f012bc65:	e8 a4 50 fd ff       	call   f0100d0e <cprintf>
f012bc6a:	83 c4 10             	add    $0x10,%esp
f012bc6d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bc74:	e8 38 13 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bc79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc7c:	e8 47 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc81:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bc84:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bc8a:	83 ec 0c             	sub    $0xc,%esp
f012bc8d:	50                   	push   %eax
f012bc8e:	e8 c4 bf fd ff       	call   f0107c57 <kfree>
f012bc93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc96:	e8 2d 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc9b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc9e:	74 1d                	je     f012bcbd <test_kfreelast+0x1f82>
f012bca0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bca4:	75 17                	jne    f012bcbd <test_kfreelast+0x1f82>
f012bca6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcad:	83 ec 0c             	sub    $0xc,%esp
f012bcb0:	68 54 c7 13 f0       	push   $0xf013c754
f012bcb5:	e8 54 50 fd ff       	call   f0100d0e <cprintf>
f012bcba:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bcbd:	e8 ef 12 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bcc2:	89 c2                	mov    %eax,%edx
f012bcc4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bcc7:	29 c2                	sub    %eax,%edx
f012bcc9:	89 d0                	mov    %edx,%eax
f012bccb:	83 f8 02             	cmp    $0x2,%eax
f012bcce:	74 1d                	je     f012bced <test_kfreelast+0x1fb2>
f012bcd0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcd4:	75 17                	jne    f012bced <test_kfreelast+0x1fb2>
f012bcd6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcdd:	83 ec 0c             	sub    $0xc,%esp
f012bce0:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012bce5:	e8 24 50 fd ff       	call   f0100d0e <cprintf>
f012bcea:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bced:	e8 bf 12 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bcf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bcf5:	e8 ce 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bcfa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012bcfd:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bd03:	83 ec 0c             	sub    $0xc,%esp
f012bd06:	50                   	push   %eax
f012bd07:	e8 4b bf fd ff       	call   f0107c57 <kfree>
f012bd0c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd0f:	e8 b4 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd14:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd17:	74 1d                	je     f012bd36 <test_kfreelast+0x1ffb>
f012bd19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd1d:	75 17                	jne    f012bd36 <test_kfreelast+0x1ffb>
f012bd1f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd26:	83 ec 0c             	sub    $0xc,%esp
f012bd29:	68 54 c7 13 f0       	push   $0xf013c754
f012bd2e:	e8 db 4f fd ff       	call   f0100d0e <cprintf>
f012bd33:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bd36:	e8 76 12 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bd3b:	89 c2                	mov    %eax,%edx
f012bd3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bd40:	29 c2                	sub    %eax,%edx
f012bd42:	89 d0                	mov    %edx,%eax
f012bd44:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bd49:	74 1d                	je     f012bd68 <test_kfreelast+0x202d>
f012bd4b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd4f:	75 17                	jne    f012bd68 <test_kfreelast+0x202d>
f012bd51:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd58:	83 ec 0c             	sub    $0xc,%esp
f012bd5b:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012bd60:	e8 a9 4f fd ff       	call   f0100d0e <cprintf>
f012bd65:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bd68:	e8 44 12 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bd6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bd70:	e8 53 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd75:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012bd78:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012bd7e:	83 ec 0c             	sub    $0xc,%esp
f012bd81:	50                   	push   %eax
f012bd82:	e8 d0 be fd ff       	call   f0107c57 <kfree>
f012bd87:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd8a:	e8 39 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bd8f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd92:	74 1d                	je     f012bdb1 <test_kfreelast+0x2076>
f012bd94:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd98:	75 17                	jne    f012bdb1 <test_kfreelast+0x2076>
f012bd9a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bda1:	83 ec 0c             	sub    $0xc,%esp
f012bda4:	68 54 c7 13 f0       	push   $0xf013c754
f012bda9:	e8 60 4f fd ff       	call   f0100d0e <cprintf>
f012bdae:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bdb1:	e8 fb 11 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bdb6:	89 c2                	mov    %eax,%edx
f012bdb8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bdbb:	29 c2                	sub    %eax,%edx
f012bdbd:	89 d0                	mov    %edx,%eax
f012bdbf:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bdc4:	74 1d                	je     f012bde3 <test_kfreelast+0x20a8>
f012bdc6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdca:	75 17                	jne    f012bde3 <test_kfreelast+0x20a8>
f012bdcc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdd3:	83 ec 0c             	sub    $0xc,%esp
f012bdd6:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012bddb:	e8 2e 4f fd ff       	call   f0100d0e <cprintf>
f012bde0:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bde3:	e8 c9 11 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bde8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bdeb:	e8 d8 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bdf0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bdf3:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bdf9:	83 ec 0c             	sub    $0xc,%esp
f012bdfc:	50                   	push   %eax
f012bdfd:	e8 55 be fd ff       	call   f0107c57 <kfree>
f012be02:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012be05:	e8 be 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012be0a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be0d:	74 1d                	je     f012be2c <test_kfreelast+0x20f1>
f012be0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be13:	75 17                	jne    f012be2c <test_kfreelast+0x20f1>
f012be15:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be1c:	83 ec 0c             	sub    $0xc,%esp
f012be1f:	68 54 c7 13 f0       	push   $0xf013c754
f012be24:	e8 e5 4e fd ff       	call   f0100d0e <cprintf>
f012be29:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012be2c:	e8 80 11 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012be31:	89 c2                	mov    %eax,%edx
f012be33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012be36:	29 c2                	sub    %eax,%edx
f012be38:	89 d0                	mov    %edx,%eax
f012be3a:	83 f8 01             	cmp    $0x1,%eax
f012be3d:	74 1d                	je     f012be5c <test_kfreelast+0x2121>
f012be3f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be43:	75 17                	jne    f012be5c <test_kfreelast+0x2121>
f012be45:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be4c:	83 ec 0c             	sub    $0xc,%esp
f012be4f:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012be54:	e8 b5 4e fd ff       	call   f0100d0e <cprintf>
f012be59:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012be5c:	e8 50 11 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012be61:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012be64:	e8 5f 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012be69:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012be6c:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012be72:	83 ec 0c             	sub    $0xc,%esp
f012be75:	50                   	push   %eax
f012be76:	e8 dc bd fd ff       	call   f0107c57 <kfree>
f012be7b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012be7e:	e8 45 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012be83:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be86:	74 1d                	je     f012bea5 <test_kfreelast+0x216a>
f012be88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be8c:	75 17                	jne    f012bea5 <test_kfreelast+0x216a>
f012be8e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be95:	83 ec 0c             	sub    $0xc,%esp
f012be98:	68 54 c7 13 f0       	push   $0xf013c754
f012be9d:	e8 6c 4e fd ff       	call   f0100d0e <cprintf>
f012bea2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bea5:	e8 07 11 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012beaa:	89 c2                	mov    %eax,%edx
f012beac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012beaf:	29 c2                	sub    %eax,%edx
f012beb1:	89 d0                	mov    %edx,%eax
f012beb3:	83 f8 01             	cmp    $0x1,%eax
f012beb6:	74 1d                	je     f012bed5 <test_kfreelast+0x219a>
f012beb8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bebc:	75 17                	jne    f012bed5 <test_kfreelast+0x219a>
f012bebe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bec5:	83 ec 0c             	sub    $0xc,%esp
f012bec8:	68 c0 c7 13 f0       	push   $0xf013c7c0
f012becd:	e8 3c 4e fd ff       	call   f0100d0e <cprintf>
f012bed2:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012bed5:	e8 d7 10 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012beda:	89 c2                	mov    %eax,%edx
f012bedc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bedf:	39 c2                	cmp    %eax,%edx
f012bee1:	74 1d                	je     f012bf00 <test_kfreelast+0x21c5>
f012bee3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bee7:	75 17                	jne    f012bf00 <test_kfreelast+0x21c5>
f012bee9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bef0:	83 ec 0c             	sub    $0xc,%esp
f012bef3:	68 20 c9 13 f0       	push   $0xf013c920
f012bef8:	e8 11 4e fd ff       	call   f0100d0e <cprintf>
f012befd:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bf00:	83 ec 0c             	sub    $0xc,%esp
f012bf03:	6a 03                	push   $0x3
f012bf05:	e8 47 15 fe ff       	call   f010d451 <sys_bypassPageFault>
f012bf0a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012bf0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bf14:	e9 8e 00 00 00       	jmp    f012bfa7 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012bf19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bf1c:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012bf23:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012bf26:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf29:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bf2c:	e8 0e 15 fe ff       	call   f010d43f <sys_rcr2>
f012bf31:	89 c2                	mov    %eax,%edx
f012bf33:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf36:	39 c2                	cmp    %eax,%edx
f012bf38:	74 1d                	je     f012bf57 <test_kfreelast+0x221c>
f012bf3a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf3e:	75 17                	jne    f012bf57 <test_kfreelast+0x221c>
f012bf40:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf47:	83 ec 0c             	sub    $0xc,%esp
f012bf4a:	68 d8 c8 13 f0       	push   $0xf013c8d8
f012bf4f:	e8 ba 4d fd ff       	call   f0100d0e <cprintf>
f012bf54:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012bf57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bf5a:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bf61:	89 c2                	mov    %eax,%edx
f012bf63:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf66:	01 d0                	add    %edx,%eax
f012bf68:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bf6b:	e8 cf 14 fe ff       	call   f010d43f <sys_rcr2>
f012bf70:	89 c2                	mov    %eax,%edx
f012bf72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bf75:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bf7c:	89 c1                	mov    %eax,%ecx
f012bf7e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf81:	01 c8                	add    %ecx,%eax
f012bf83:	39 c2                	cmp    %eax,%edx
f012bf85:	74 1d                	je     f012bfa4 <test_kfreelast+0x2269>
f012bf87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf8b:	75 17                	jne    f012bfa4 <test_kfreelast+0x2269>
f012bf8d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf94:	83 ec 0c             	sub    $0xc,%esp
f012bf97:	68 d8 c8 13 f0       	push   $0xf013c8d8
f012bf9c:	e8 6d 4d fd ff       	call   f0100d0e <cprintf>
f012bfa1:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012bfa4:	ff 45 f4             	incl   -0xc(%ebp)
f012bfa7:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012bfab:	0f 8e 68 ff ff ff    	jle    f012bf19 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bfb1:	83 ec 0c             	sub    $0xc,%esp
f012bfb4:	6a 00                	push   $0x0
f012bfb6:	e8 96 14 fe ff       	call   f010d451 <sys_bypassPageFault>
f012bfbb:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012bfbe:	e8 ee 0f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012bfc3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfc6:	e8 fd 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfcb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bfce:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012bfd4:	83 ec 0c             	sub    $0xc,%esp
f012bfd7:	50                   	push   %eax
f012bfd8:	e8 7a bc fd ff       	call   f0107c57 <kfree>
f012bfdd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfe0:	e8 e3 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bfe5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfe8:	74 1d                	je     f012c007 <test_kfreelast+0x22cc>
f012bfea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfee:	75 17                	jne    f012c007 <test_kfreelast+0x22cc>
f012bff0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bff7:	83 ec 0c             	sub    $0xc,%esp
f012bffa:	68 54 c7 13 f0       	push   $0xf013c754
f012bfff:	e8 0a 4d fd ff       	call   f0100d0e <cprintf>
f012c004:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c007:	e8 a5 0f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c00c:	89 c2                	mov    %eax,%edx
f012c00e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c011:	39 c2                	cmp    %eax,%edx
f012c013:	74 1d                	je     f012c032 <test_kfreelast+0x22f7>
f012c015:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c019:	75 17                	jne    f012c032 <test_kfreelast+0x22f7>
f012c01b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c022:	83 ec 0c             	sub    $0xc,%esp
f012c025:	68 58 c9 13 f0       	push   $0xf013c958
f012c02a:	e8 df 4c fd ff       	call   f0100d0e <cprintf>
f012c02f:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c032:	e8 7a 0f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c037:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c03a:	e8 89 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c03f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c042:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c048:	83 ec 0c             	sub    $0xc,%esp
f012c04b:	50                   	push   %eax
f012c04c:	e8 06 bc fd ff       	call   f0107c57 <kfree>
f012c051:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c054:	e8 6f 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c059:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c05c:	74 1d                	je     f012c07b <test_kfreelast+0x2340>
f012c05e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c062:	75 17                	jne    f012c07b <test_kfreelast+0x2340>
f012c064:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c06b:	83 ec 0c             	sub    $0xc,%esp
f012c06e:	68 54 c7 13 f0       	push   $0xf013c754
f012c073:	e8 96 4c fd ff       	call   f0100d0e <cprintf>
f012c078:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c07b:	e8 31 0f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c080:	89 c2                	mov    %eax,%edx
f012c082:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c085:	39 c2                	cmp    %eax,%edx
f012c087:	74 1d                	je     f012c0a6 <test_kfreelast+0x236b>
f012c089:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c08d:	75 17                	jne    f012c0a6 <test_kfreelast+0x236b>
f012c08f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c096:	83 ec 0c             	sub    $0xc,%esp
f012c099:	68 58 c9 13 f0       	push   $0xf013c958
f012c09e:	e8 6b 4c fd ff       	call   f0100d0e <cprintf>
f012c0a3:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c0a6:	e8 06 0f fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c0ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c0ae:	e8 15 7d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c0b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c0b6:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c0bc:	83 ec 0c             	sub    $0xc,%esp
f012c0bf:	50                   	push   %eax
f012c0c0:	e8 92 bb fd ff       	call   f0107c57 <kfree>
f012c0c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c0c8:	e8 fb 7c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c0cd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c0d0:	74 1d                	je     f012c0ef <test_kfreelast+0x23b4>
f012c0d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0d6:	75 17                	jne    f012c0ef <test_kfreelast+0x23b4>
f012c0d8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0df:	83 ec 0c             	sub    $0xc,%esp
f012c0e2:	68 54 c7 13 f0       	push   $0xf013c754
f012c0e7:	e8 22 4c fd ff       	call   f0100d0e <cprintf>
f012c0ec:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c0ef:	e8 bd 0e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c0f4:	89 c2                	mov    %eax,%edx
f012c0f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c0f9:	39 c2                	cmp    %eax,%edx
f012c0fb:	74 1d                	je     f012c11a <test_kfreelast+0x23df>
f012c0fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c101:	75 17                	jne    f012c11a <test_kfreelast+0x23df>
f012c103:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c10a:	83 ec 0c             	sub    $0xc,%esp
f012c10d:	68 58 c9 13 f0       	push   $0xf013c958
f012c112:	e8 f7 4b fd ff       	call   f0100d0e <cprintf>
f012c117:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c11a:	e8 92 0e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c11f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c122:	e8 a1 7c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c127:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c12a:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c130:	83 ec 0c             	sub    $0xc,%esp
f012c133:	50                   	push   %eax
f012c134:	e8 1e bb fd ff       	call   f0107c57 <kfree>
f012c139:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c13c:	e8 87 7c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012c141:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c144:	74 1d                	je     f012c163 <test_kfreelast+0x2428>
f012c146:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c14a:	75 17                	jne    f012c163 <test_kfreelast+0x2428>
f012c14c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c153:	83 ec 0c             	sub    $0xc,%esp
f012c156:	68 54 c7 13 f0       	push   $0xf013c754
f012c15b:	e8 ae 4b fd ff       	call   f0100d0e <cprintf>
f012c160:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c163:	e8 49 0e fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c168:	89 c2                	mov    %eax,%edx
f012c16a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c16d:	39 c2                	cmp    %eax,%edx
f012c16f:	74 1d                	je     f012c18e <test_kfreelast+0x2453>
f012c171:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c175:	75 17                	jne    f012c18e <test_kfreelast+0x2453>
f012c177:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c17e:	83 ec 0c             	sub    $0xc,%esp
f012c181:	68 58 c9 13 f0       	push   $0xf013c958
f012c186:	e8 83 4b fd ff       	call   f0100d0e <cprintf>
f012c18b:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c18e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c192:	75 17                	jne    f012c1ab <test_kfreelast+0x2470>
f012c194:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c198:	83 ec 08             	sub    $0x8,%esp
f012c19b:	ff 75 f0             	pushl  -0x10(%ebp)
f012c19e:	68 2c c7 13 f0       	push   $0xf013c72c
f012c1a3:	e8 66 4b fd ff       	call   f0100d0e <cprintf>
f012c1a8:	83 c4 10             	add    $0x10,%esp
f012c1ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c1b2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c1b7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c1ba:	5b                   	pop    %ebx
f012c1bb:	5f                   	pop    %edi
f012c1bc:	5d                   	pop    %ebp
f012c1bd:	c3                   	ret    

f012c1be <test_krealloc>:

int test_krealloc() {
f012c1be:	55                   	push   %ebp
f012c1bf:	89 e5                	mov    %esp,%ebp
f012c1c1:	57                   	push   %edi
f012c1c2:	53                   	push   %ebx
f012c1c3:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c1c9:	83 ec 0c             	sub    $0xc,%esp
f012c1cc:	68 3c b6 13 f0       	push   $0xf013b63c
f012c1d1:	e8 38 4b fd ff       	call   f0100d0e <cprintf>
f012c1d6:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c1d9:	83 ec 0c             	sub    $0xc,%esp
f012c1dc:	68 6c b6 13 f0       	push   $0xf013b66c
f012c1e1:	e8 28 4b fd ff       	call   f0100d0e <cprintf>
f012c1e6:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c1e9:	83 ec 0c             	sub    $0xc,%esp
f012c1ec:	68 3c b6 13 f0       	push   $0xf013b63c
f012c1f1:	e8 18 4b fd ff       	call   f0100d0e <cprintf>
f012c1f6:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c1f9:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c1fd:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c201:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c207:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c20d:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c214:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c21b:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c221:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c226:	b8 00 00 00 00       	mov    $0x0,%eax
f012c22b:	89 d7                	mov    %edx,%edi
f012c22d:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c22f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c236:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c23c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c241:	b8 00 00 00 00       	mov    $0x0,%eax
f012c246:	89 d7                	mov    %edx,%edi
f012c248:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c24a:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c250:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c255:	b8 00 00 00 00       	mov    $0x0,%eax
f012c25a:	89 d7                	mov    %edx,%edi
f012c25c:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c25e:	e8 4e 0d fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c263:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c266:	83 ec 08             	sub    $0x8,%esp
f012c269:	68 00 fc 0f 00       	push   $0xffc00
f012c26e:	6a 00                	push   $0x0
f012c270:	e8 d7 bb fd ff       	call   f0107e4c <krealloc>
f012c275:	83 c4 10             	add    $0x10,%esp
f012c278:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c27e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c284:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c289:	77 17                	ja     f012c2a2 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c28b:	83 ec 04             	sub    $0x4,%esp
f012c28e:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012c293:	68 e2 0e 00 00       	push   $0xee2
f012c298:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c29d:	e8 63 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c2a2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c2a8:	89 c1                	mov    %eax,%ecx
f012c2aa:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c2b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c2b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c2b9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c2bc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c2bf:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2c4:	f7 75 b4             	divl   -0x4c(%ebp)
f012c2c7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c2ca:	29 d0                	sub    %edx,%eax
f012c2cc:	89 c3                	mov    %eax,%ebx
f012c2ce:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c2d5:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c2da:	0f b6 d0             	movzbl %al,%edx
f012c2dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c2e0:	01 d0                	add    %edx,%eax
f012c2e2:	48                   	dec    %eax
f012c2e3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c2e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c2e9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2ee:	f7 75 ac             	divl   -0x54(%ebp)
f012c2f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c2f4:	29 d0                	sub    %edx,%eax
f012c2f6:	01 c3                	add    %eax,%ebx
f012c2f8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c2ff:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c304:	0f b6 c0             	movzbl %al,%eax
f012c307:	c1 e0 04             	shl    $0x4,%eax
f012c30a:	89 c2                	mov    %eax,%edx
f012c30c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c30f:	01 d0                	add    %edx,%eax
f012c311:	48                   	dec    %eax
f012c312:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c315:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c318:	ba 00 00 00 00       	mov    $0x0,%edx
f012c31d:	f7 75 a4             	divl   -0x5c(%ebp)
f012c320:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c323:	29 d0                	sub    %edx,%eax
f012c325:	01 d8                	add    %ebx,%eax
f012c327:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c32c:	39 c1                	cmp    %eax,%ecx
f012c32e:	74 17                	je     f012c347 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c330:	83 ec 04             	sub    $0x4,%esp
f012c333:	68 dc c9 13 f0       	push   $0xf013c9dc
f012c338:	68 e4 0e 00 00       	push   $0xee4
f012c33d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c342:	e8 be 3e fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c347:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c34a:	e8 62 0c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c34f:	29 c3                	sub    %eax,%ebx
f012c351:	89 d8                	mov    %ebx,%eax
f012c353:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c358:	74 17                	je     f012c371 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c35a:	83 ec 04             	sub    $0x4,%esp
f012c35d:	68 0e ca 13 f0       	push   $0xf013ca0e
f012c362:	68 e7 0e 00 00       	push   $0xee7
f012c367:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c36c:	e8 94 3e fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c371:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c378:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c37b:	e8 31 0c fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c380:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c383:	83 ec 08             	sub    $0x8,%esp
f012c386:	68 00 fc 0f 00       	push   $0xffc00
f012c38b:	6a 00                	push   $0x0
f012c38d:	e8 ba ba fd ff       	call   f0107e4c <krealloc>
f012c392:	83 c4 10             	add    $0x10,%esp
f012c395:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c39b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c3a1:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c3a6:	77 17                	ja     f012c3bf <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3a8:	83 ec 04             	sub    $0x4,%esp
f012c3ab:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012c3b0:	68 ef 0e 00 00       	push   $0xeef
f012c3b5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c3ba:	e8 46 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c3bf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c3c5:	89 c1                	mov    %eax,%ecx
f012c3c7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c3ce:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c3d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c3d6:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c3d9:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c3dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3e1:	f7 75 9c             	divl   -0x64(%ebp)
f012c3e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c3e7:	29 d0                	sub    %edx,%eax
f012c3e9:	89 c3                	mov    %eax,%ebx
f012c3eb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c3f2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c3f7:	0f b6 d0             	movzbl %al,%edx
f012c3fa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c3fd:	01 d0                	add    %edx,%eax
f012c3ff:	48                   	dec    %eax
f012c400:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c403:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c406:	ba 00 00 00 00       	mov    $0x0,%edx
f012c40b:	f7 75 94             	divl   -0x6c(%ebp)
f012c40e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c411:	29 d0                	sub    %edx,%eax
f012c413:	01 c3                	add    %eax,%ebx
f012c415:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c41c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c421:	0f b6 c0             	movzbl %al,%eax
f012c424:	c1 e0 04             	shl    $0x4,%eax
f012c427:	89 c2                	mov    %eax,%edx
f012c429:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c42c:	01 d0                	add    %edx,%eax
f012c42e:	48                   	dec    %eax
f012c42f:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c432:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c435:	ba 00 00 00 00       	mov    $0x0,%edx
f012c43a:	f7 75 8c             	divl   -0x74(%ebp)
f012c43d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c440:	29 d0                	sub    %edx,%eax
f012c442:	01 d8                	add    %ebx,%eax
f012c444:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c449:	39 c1                	cmp    %eax,%ecx
f012c44b:	74 17                	je     f012c464 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c44d:	83 ec 04             	sub    $0x4,%esp
f012c450:	68 dc c9 13 f0       	push   $0xf013c9dc
f012c455:	68 f1 0e 00 00       	push   $0xef1
f012c45a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c45f:	e8 a1 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c464:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c467:	e8 45 0b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c46c:	29 c3                	sub    %eax,%ebx
f012c46e:	89 d8                	mov    %ebx,%eax
f012c470:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c475:	74 17                	je     f012c48e <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c477:	83 ec 04             	sub    $0x4,%esp
f012c47a:	68 0e ca 13 f0       	push   $0xf013ca0e
f012c47f:	68 f3 0e 00 00       	push   $0xef3
f012c484:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c489:	e8 77 3d fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c48e:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c495:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c498:	e8 14 0b fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c49d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c4a0:	83 ec 08             	sub    $0x8,%esp
f012c4a3:	68 00 fc 0f 00       	push   $0xffc00
f012c4a8:	6a 00                	push   $0x0
f012c4aa:	e8 9d b9 fd ff       	call   f0107e4c <krealloc>
f012c4af:	83 c4 10             	add    $0x10,%esp
f012c4b2:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c4b8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c4be:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c4c3:	77 17                	ja     f012c4dc <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c4c5:	83 ec 04             	sub    $0x4,%esp
f012c4c8:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012c4cd:	68 fb 0e 00 00       	push   $0xefb
f012c4d2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c4d7:	e8 29 3d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c4dc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c4e2:	89 c1                	mov    %eax,%ecx
f012c4e4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c4eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c4ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c4f3:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c4f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c4f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4fe:	f7 75 84             	divl   -0x7c(%ebp)
f012c501:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c504:	29 d0                	sub    %edx,%eax
f012c506:	89 c3                	mov    %eax,%ebx
f012c508:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c50f:	10 00 00 
f012c512:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c517:	0f b6 d0             	movzbl %al,%edx
f012c51a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c520:	01 d0                	add    %edx,%eax
f012c522:	48                   	dec    %eax
f012c523:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c529:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c52f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c534:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c53a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c540:	29 d0                	sub    %edx,%eax
f012c542:	01 c3                	add    %eax,%ebx
f012c544:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c54b:	10 00 00 
f012c54e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c553:	0f b6 c0             	movzbl %al,%eax
f012c556:	c1 e0 04             	shl    $0x4,%eax
f012c559:	89 c2                	mov    %eax,%edx
f012c55b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c561:	01 d0                	add    %edx,%eax
f012c563:	48                   	dec    %eax
f012c564:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c56a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c570:	ba 00 00 00 00       	mov    $0x0,%edx
f012c575:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c57b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c581:	29 d0                	sub    %edx,%eax
f012c583:	01 d8                	add    %ebx,%eax
f012c585:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c58a:	39 c1                	cmp    %eax,%ecx
f012c58c:	74 17                	je     f012c5a5 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c58e:	83 ec 04             	sub    $0x4,%esp
f012c591:	68 dc c9 13 f0       	push   $0xf013c9dc
f012c596:	68 fd 0e 00 00       	push   $0xefd
f012c59b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c5a0:	e8 60 3c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c5a5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c5a8:	e8 04 0a fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c5ad:	29 c3                	sub    %eax,%ebx
f012c5af:	89 d8                	mov    %ebx,%eax
f012c5b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c5b6:	74 17                	je     f012c5cf <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c5b8:	83 ec 04             	sub    $0x4,%esp
f012c5bb:	68 0e ca 13 f0       	push   $0xf013ca0e
f012c5c0:	68 ff 0e 00 00       	push   $0xeff
f012c5c5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c5ca:	e8 36 3c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c5cf:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c5d6:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c5d9:	e8 d3 09 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c5de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c5e1:	83 ec 08             	sub    $0x8,%esp
f012c5e4:	68 00 fc 0f 00       	push   $0xffc00
f012c5e9:	6a 00                	push   $0x0
f012c5eb:	e8 5c b8 fd ff       	call   f0107e4c <krealloc>
f012c5f0:	83 c4 10             	add    $0x10,%esp
f012c5f3:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c5f9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c5ff:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c604:	77 17                	ja     f012c61d <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c606:	83 ec 04             	sub    $0x4,%esp
f012c609:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012c60e:	68 06 0f 00 00       	push   $0xf06
f012c613:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c618:	e8 e8 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c61d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c623:	89 c1                	mov    %eax,%ecx
f012c625:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c62c:	10 00 00 
f012c62f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c635:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c63a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c640:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c646:	ba 00 00 00 00       	mov    $0x0,%edx
f012c64b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c651:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c657:	29 d0                	sub    %edx,%eax
f012c659:	89 c3                	mov    %eax,%ebx
f012c65b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c662:	10 00 00 
f012c665:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c66a:	0f b6 d0             	movzbl %al,%edx
f012c66d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c673:	01 d0                	add    %edx,%eax
f012c675:	48                   	dec    %eax
f012c676:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c67c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c682:	ba 00 00 00 00       	mov    $0x0,%edx
f012c687:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c68d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c693:	29 d0                	sub    %edx,%eax
f012c695:	01 c3                	add    %eax,%ebx
f012c697:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c69e:	10 00 00 
f012c6a1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c6a6:	0f b6 c0             	movzbl %al,%eax
f012c6a9:	c1 e0 04             	shl    $0x4,%eax
f012c6ac:	89 c2                	mov    %eax,%edx
f012c6ae:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c6b4:	01 d0                	add    %edx,%eax
f012c6b6:	48                   	dec    %eax
f012c6b7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c6bd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6c8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c6ce:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c6d4:	29 d0                	sub    %edx,%eax
f012c6d6:	01 d8                	add    %ebx,%eax
f012c6d8:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c6dd:	39 c1                	cmp    %eax,%ecx
f012c6df:	74 17                	je     f012c6f8 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c6e1:	83 ec 04             	sub    $0x4,%esp
f012c6e4:	68 dc c9 13 f0       	push   $0xf013c9dc
f012c6e9:	68 08 0f 00 00       	push   $0xf08
f012c6ee:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c6f3:	e8 0d 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c6f8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c6fb:	e8 b1 08 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c700:	29 c3                	sub    %eax,%ebx
f012c702:	89 d8                	mov    %ebx,%eax
f012c704:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c709:	74 17                	je     f012c722 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c70b:	83 ec 04             	sub    $0x4,%esp
f012c70e:	68 0e ca 13 f0       	push   $0xf013ca0e
f012c713:	68 0a 0f 00 00       	push   $0xf0a
f012c718:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c71d:	e8 e3 3a fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c722:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c729:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c72c:	e8 80 08 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c731:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c734:	83 ec 08             	sub    $0x8,%esp
f012c737:	68 00 fc 1f 00       	push   $0x1ffc00
f012c73c:	6a 00                	push   $0x0
f012c73e:	e8 09 b7 fd ff       	call   f0107e4c <krealloc>
f012c743:	83 c4 10             	add    $0x10,%esp
f012c746:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c74c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c752:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c757:	77 17                	ja     f012c770 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c759:	83 ec 04             	sub    $0x4,%esp
f012c75c:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012c761:	68 11 0f 00 00       	push   $0xf11
f012c766:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c76b:	e8 95 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c770:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c776:	89 c1                	mov    %eax,%ecx
f012c778:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c77f:	10 00 00 
f012c782:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c788:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c78d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c793:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c799:	ba 00 00 00 00       	mov    $0x0,%edx
f012c79e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c7a4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c7aa:	29 d0                	sub    %edx,%eax
f012c7ac:	89 c3                	mov    %eax,%ebx
f012c7ae:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c7b5:	10 00 00 
f012c7b8:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c7bd:	0f b6 d0             	movzbl %al,%edx
f012c7c0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c7c6:	01 d0                	add    %edx,%eax
f012c7c8:	48                   	dec    %eax
f012c7c9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c7cf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c7d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7da:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c7e0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c7e6:	29 d0                	sub    %edx,%eax
f012c7e8:	01 c3                	add    %eax,%ebx
f012c7ea:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c7f1:	10 00 00 
f012c7f4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c7f9:	0f b6 c0             	movzbl %al,%eax
f012c7fc:	c1 e0 04             	shl    $0x4,%eax
f012c7ff:	89 c2                	mov    %eax,%edx
f012c801:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c807:	01 d0                	add    %edx,%eax
f012c809:	48                   	dec    %eax
f012c80a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c810:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c816:	ba 00 00 00 00       	mov    $0x0,%edx
f012c81b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c821:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c827:	29 d0                	sub    %edx,%eax
f012c829:	01 d8                	add    %ebx,%eax
f012c82b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c830:	39 c1                	cmp    %eax,%ecx
f012c832:	74 17                	je     f012c84b <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c834:	83 ec 04             	sub    $0x4,%esp
f012c837:	68 dc c9 13 f0       	push   $0xf013c9dc
f012c83c:	68 13 0f 00 00       	push   $0xf13
f012c841:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c846:	e8 ba 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c84b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c84e:	e8 5e 07 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c853:	29 c3                	sub    %eax,%ebx
f012c855:	89 d8                	mov    %ebx,%eax
f012c857:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c85c:	74 17                	je     f012c875 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c85e:	83 ec 04             	sub    $0x4,%esp
f012c861:	68 0e ca 13 f0       	push   $0xf013ca0e
f012c866:	68 15 0f 00 00       	push   $0xf15
f012c86b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c870:	e8 90 39 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c875:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c87c:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c87f:	e8 2d 07 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c884:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c887:	83 ec 08             	sub    $0x8,%esp
f012c88a:	68 00 fc 1f 00       	push   $0x1ffc00
f012c88f:	6a 00                	push   $0x0
f012c891:	e8 b6 b5 fd ff       	call   f0107e4c <krealloc>
f012c896:	83 c4 10             	add    $0x10,%esp
f012c899:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c89f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c8a5:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c8aa:	77 17                	ja     f012c8c3 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c8ac:	83 ec 04             	sub    $0x4,%esp
f012c8af:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012c8b4:	68 1c 0f 00 00       	push   $0xf1c
f012c8b9:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c8be:	e8 42 39 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c8c3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c8c9:	89 c1                	mov    %eax,%ecx
f012c8cb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c8d2:	10 00 00 
f012c8d5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c8db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c8e0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c8e6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c8ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8f1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c8f7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c8fd:	29 d0                	sub    %edx,%eax
f012c8ff:	89 c3                	mov    %eax,%ebx
f012c901:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c908:	10 00 00 
f012c90b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c910:	0f b6 d0             	movzbl %al,%edx
f012c913:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c919:	01 d0                	add    %edx,%eax
f012c91b:	48                   	dec    %eax
f012c91c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c922:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c928:	ba 00 00 00 00       	mov    $0x0,%edx
f012c92d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c933:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c939:	29 d0                	sub    %edx,%eax
f012c93b:	01 c3                	add    %eax,%ebx
f012c93d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c944:	10 00 00 
f012c947:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012c94c:	0f b6 c0             	movzbl %al,%eax
f012c94f:	c1 e0 04             	shl    $0x4,%eax
f012c952:	89 c2                	mov    %eax,%edx
f012c954:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c95a:	01 d0                	add    %edx,%eax
f012c95c:	48                   	dec    %eax
f012c95d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c963:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c969:	ba 00 00 00 00       	mov    $0x0,%edx
f012c96e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c974:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c97a:	29 d0                	sub    %edx,%eax
f012c97c:	01 d8                	add    %ebx,%eax
f012c97e:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c983:	39 c1                	cmp    %eax,%ecx
f012c985:	74 17                	je     f012c99e <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c987:	83 ec 04             	sub    $0x4,%esp
f012c98a:	68 dc c9 13 f0       	push   $0xf013c9dc
f012c98f:	68 1e 0f 00 00       	push   $0xf1e
f012c994:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c999:	e8 67 38 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c99e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c9a1:	e8 0b 06 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c9a6:	29 c3                	sub    %eax,%ebx
f012c9a8:	89 d8                	mov    %ebx,%eax
f012c9aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c9af:	74 17                	je     f012c9c8 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c9b1:	83 ec 04             	sub    $0x4,%esp
f012c9b4:	68 0e ca 13 f0       	push   $0xf013ca0e
f012c9b9:	68 20 0f 00 00       	push   $0xf20
f012c9be:	68 fa b6 13 f0       	push   $0xf013b6fa
f012c9c3:	e8 3d 38 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c9c8:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c9cf:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c9d2:	e8 da 05 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012c9d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c9da:	83 ec 08             	sub    $0x8,%esp
f012c9dd:	68 00 fc 2f 00       	push   $0x2ffc00
f012c9e2:	6a 00                	push   $0x0
f012c9e4:	e8 63 b4 fd ff       	call   f0107e4c <krealloc>
f012c9e9:	83 c4 10             	add    $0x10,%esp
f012c9ec:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c9f2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c9f8:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c9fd:	77 17                	ja     f012ca16 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c9ff:	83 ec 04             	sub    $0x4,%esp
f012ca02:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012ca07:	68 27 0f 00 00       	push   $0xf27
f012ca0c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ca11:	e8 ef 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012ca16:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ca1c:	89 c1                	mov    %eax,%ecx
f012ca1e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012ca25:	10 00 00 
f012ca28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ca2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ca33:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012ca39:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca3f:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca44:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ca4a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca50:	29 d0                	sub    %edx,%eax
f012ca52:	89 c3                	mov    %eax,%ebx
f012ca54:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ca5b:	10 00 00 
f012ca5e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ca63:	0f b6 d0             	movzbl %al,%edx
f012ca66:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ca6c:	01 d0                	add    %edx,%eax
f012ca6e:	48                   	dec    %eax
f012ca6f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ca75:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ca7b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca80:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ca86:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ca8c:	29 d0                	sub    %edx,%eax
f012ca8e:	01 c3                	add    %eax,%ebx
f012ca90:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ca97:	10 00 00 
f012ca9a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ca9f:	0f b6 c0             	movzbl %al,%eax
f012caa2:	c1 e0 04             	shl    $0x4,%eax
f012caa5:	89 c2                	mov    %eax,%edx
f012caa7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012caad:	01 d0                	add    %edx,%eax
f012caaf:	48                   	dec    %eax
f012cab0:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012cab6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cabc:	ba 00 00 00 00       	mov    $0x0,%edx
f012cac1:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012cac7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cacd:	29 d0                	sub    %edx,%eax
f012cacf:	01 d8                	add    %ebx,%eax
f012cad1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012cad6:	39 c1                	cmp    %eax,%ecx
f012cad8:	74 17                	je     f012caf1 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012cada:	83 ec 04             	sub    $0x4,%esp
f012cadd:	68 dc c9 13 f0       	push   $0xf013c9dc
f012cae2:	68 29 0f 00 00       	push   $0xf29
f012cae7:	68 fa b6 13 f0       	push   $0xf013b6fa
f012caec:	e8 14 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012caf1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012caf4:	e8 b8 04 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012caf9:	29 c3                	sub    %eax,%ebx
f012cafb:	89 d8                	mov    %ebx,%eax
f012cafd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cb02:	74 17                	je     f012cb1b <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012cb04:	83 ec 04             	sub    $0x4,%esp
f012cb07:	68 44 bb 13 f0       	push   $0xf013bb44
f012cb0c:	68 2b 0f 00 00       	push   $0xf2b
f012cb11:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cb16:	e8 ea 36 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cb1b:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012cb22:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cb25:	e8 87 04 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012cb2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012cb2d:	83 ec 08             	sub    $0x8,%esp
f012cb30:	68 00 fc 2f 00       	push   $0x2ffc00
f012cb35:	6a 00                	push   $0x0
f012cb37:	e8 10 b3 fd ff       	call   f0107e4c <krealloc>
f012cb3c:	83 c4 10             	add    $0x10,%esp
f012cb3f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012cb45:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cb4b:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012cb50:	77 17                	ja     f012cb69 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cb52:	83 ec 04             	sub    $0x4,%esp
f012cb55:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012cb5a:	68 32 0f 00 00       	push   $0xf32
f012cb5f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cb64:	e8 9c 36 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012cb69:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cb6f:	89 c1                	mov    %eax,%ecx
f012cb71:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cb78:	10 00 00 
f012cb7b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cb81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cb86:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cb8c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cb92:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb97:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cb9d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cba3:	29 d0                	sub    %edx,%eax
f012cba5:	89 c3                	mov    %eax,%ebx
f012cba7:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cbae:	10 00 00 
f012cbb1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012cbb6:	0f b6 d0             	movzbl %al,%edx
f012cbb9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cbbf:	01 d0                	add    %edx,%eax
f012cbc1:	48                   	dec    %eax
f012cbc2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cbc8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cbce:	ba 00 00 00 00       	mov    $0x0,%edx
f012cbd3:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cbd9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cbdf:	29 d0                	sub    %edx,%eax
f012cbe1:	01 c3                	add    %eax,%ebx
f012cbe3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cbea:	10 00 00 
f012cbed:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012cbf2:	0f b6 c0             	movzbl %al,%eax
f012cbf5:	c1 e0 04             	shl    $0x4,%eax
f012cbf8:	89 c2                	mov    %eax,%edx
f012cbfa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cc00:	01 d0                	add    %edx,%eax
f012cc02:	48                   	dec    %eax
f012cc03:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cc09:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cc0f:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc14:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cc1a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cc20:	29 d0                	sub    %edx,%eax
f012cc22:	01 d8                	add    %ebx,%eax
f012cc24:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cc29:	39 c1                	cmp    %eax,%ecx
f012cc2b:	74 17                	je     f012cc44 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cc2d:	83 ec 04             	sub    $0x4,%esp
f012cc30:	68 dc c9 13 f0       	push   $0xf013c9dc
f012cc35:	68 34 0f 00 00       	push   $0xf34
f012cc3a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cc3f:	e8 c1 35 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cc44:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cc47:	e8 65 03 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012cc4c:	29 c3                	sub    %eax,%ebx
f012cc4e:	89 d8                	mov    %ebx,%eax
f012cc50:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cc55:	74 17                	je     f012cc6e <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cc57:	83 ec 04             	sub    $0x4,%esp
f012cc5a:	68 0e ca 13 f0       	push   $0xf013ca0e
f012cc5f:	68 36 0f 00 00       	push   $0xf36
f012cc64:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cc69:	e8 97 35 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cc6e:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cc75:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cc78:	e8 34 03 fe ff       	call   f010cfb1 <sys_calculate_free_frames>
f012cc7d:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cc80:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cc87:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cc8a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cc90:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cc96:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cc9c:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cc9f:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cca1:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cca7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ccad:	01 c2                	add    %eax,%edx
f012ccaf:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ccb2:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ccb4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ccba:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ccc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ccc7:	eb 11                	jmp    f012ccda <test_krealloc+0xb1c>
			ptr[i] = 2;
f012ccc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cccc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ccd2:	01 d0                	add    %edx,%eax
f012ccd4:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ccd7:	ff 45 f4             	incl   -0xc(%ebp)
f012ccda:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cce0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cce3:	7d e4                	jge    f012ccc9 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cce5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cceb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012ccf1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ccf7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012ccfd:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cd03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cd0a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd10:	01 d0                	add    %edx,%eax
f012cd12:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012cd18:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cd1e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cd24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cd2b:	eb 1b                	jmp    f012cd48 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012cd2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cd30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cd37:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd3d:	01 d0                	add    %edx,%eax
f012cd3f:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cd45:	ff 45 f0             	incl   -0x10(%ebp)
f012cd48:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cd4e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012cd51:	7d da                	jge    f012cd2d <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cd53:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd59:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cd5f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012cd66:	eb 17                	jmp    f012cd7f <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012cd68:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012cd6b:	01 c0                	add    %eax,%eax
f012cd6d:	89 c2                	mov    %eax,%edx
f012cd6f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cd75:	01 d0                	add    %edx,%eax
f012cd77:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cd7c:	ff 45 ec             	incl   -0x14(%ebp)
f012cd7f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cd85:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cd88:	7d de                	jge    f012cd68 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cd8a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cd90:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012cd96:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cd9c:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012cda1:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cda7:	01 c0                	add    %eax,%eax
f012cda9:	89 c2                	mov    %eax,%edx
f012cdab:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cdb1:	01 d0                	add    %edx,%eax
f012cdb3:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012cdb8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cdbe:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cdc4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012cdcb:	eb 49                	jmp    f012ce16 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012cdcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cdd0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cdd7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cddd:	01 d0                	add    %edx,%eax
f012cddf:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012cde2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cde5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cdec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cdf2:	01 d0                	add    %edx,%eax
f012cdf4:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012cdfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cdfd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ce04:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce0a:	01 d0                	add    %edx,%eax
f012ce0c:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ce13:	ff 45 e8             	incl   -0x18(%ebp)
f012ce16:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce1c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ce1f:	7d ac                	jge    f012cdcd <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ce21:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ce27:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ce2d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce33:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ce36:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce3c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ce42:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce48:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ce4f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ce55:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ce5c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce62:	01 d0                	add    %edx,%eax
f012ce64:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ce67:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ce6d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ce74:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce7a:	01 d0                	add    %edx,%eax
f012ce7c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ce82:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ce88:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ce8f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce95:	01 d0                	add    %edx,%eax
f012ce97:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ce9e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cea4:	8a 00                	mov    (%eax),%al
f012cea6:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012cea9:	75 17                	jne    f012cec2 <test_krealloc+0xd04>
f012ceab:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ceb1:	89 c2                	mov    %eax,%edx
f012ceb3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ceb9:	01 d0                	add    %edx,%eax
f012cebb:	8a 00                	mov    (%eax),%al
f012cebd:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012cec0:	74 17                	je     f012ced9 <test_krealloc+0xd1b>
			panic(
f012cec2:	83 ec 04             	sub    $0x4,%esp
f012cec5:	68 2c ca 13 f0       	push   $0xf013ca2c
f012ceca:	68 79 0f 00 00       	push   $0xf79
f012cecf:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ced4:	e8 2c 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ced9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cedf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012cee5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ceeb:	8a 00                	mov    (%eax),%al
f012ceed:	3c 02                	cmp    $0x2,%al
f012ceef:	75 16                	jne    f012cf07 <test_krealloc+0xd49>
f012cef1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cef7:	89 c2                	mov    %eax,%edx
f012cef9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ceff:	01 d0                	add    %edx,%eax
f012cf01:	8a 00                	mov    (%eax),%al
f012cf03:	3c 02                	cmp    $0x2,%al
f012cf05:	74 20                	je     f012cf27 <test_krealloc+0xd69>
			panic(
f012cf07:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cf0d:	8a 00                	mov    (%eax),%al
f012cf0f:	0f be c0             	movsbl %al,%eax
f012cf12:	50                   	push   %eax
f012cf13:	68 6c ca 13 f0       	push   $0xf013ca6c
f012cf18:	68 7f 0f 00 00       	push   $0xf7f
f012cf1d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cf22:	e8 de 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012cf27:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf2d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012cf33:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf39:	8b 00                	mov    (%eax),%eax
f012cf3b:	83 f8 03             	cmp    $0x3,%eax
f012cf3e:	75 1c                	jne    f012cf5c <test_krealloc+0xd9e>
f012cf40:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cf46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cf4d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf53:	01 d0                	add    %edx,%eax
f012cf55:	8b 00                	mov    (%eax),%eax
f012cf57:	83 f8 03             	cmp    $0x3,%eax
f012cf5a:	74 17                	je     f012cf73 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012cf5c:	83 ec 04             	sub    $0x4,%esp
f012cf5f:	68 b8 ca 13 f0       	push   $0xf013cab8
f012cf64:	68 83 0f 00 00       	push   $0xf83
f012cf69:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cf6e:	e8 92 32 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012cf73:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cf79:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012cf7f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf85:	8b 00                	mov    (%eax),%eax
f012cf87:	83 f8 04             	cmp    $0x4,%eax
f012cf8a:	75 1c                	jne    f012cfa8 <test_krealloc+0xdea>
f012cf8c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cf92:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cf99:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cf9f:	01 d0                	add    %edx,%eax
f012cfa1:	8b 00                	mov    (%eax),%eax
f012cfa3:	83 f8 04             	cmp    $0x4,%eax
f012cfa6:	74 17                	je     f012cfbf <test_krealloc+0xe01>
			panic(
f012cfa8:	83 ec 04             	sub    $0x4,%esp
f012cfab:	68 2c ca 13 f0       	push   $0xf013ca2c
f012cfb0:	68 88 0f 00 00       	push   $0xf88
f012cfb5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012cfba:	e8 46 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cfbf:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfc5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cfcb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cfd1:	66 8b 00             	mov    (%eax),%ax
f012cfd4:	66 83 f8 05          	cmp    $0x5,%ax
f012cfd8:	75 1b                	jne    f012cff5 <test_krealloc+0xe37>
f012cfda:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cfe0:	01 c0                	add    %eax,%eax
f012cfe2:	89 c2                	mov    %eax,%edx
f012cfe4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cfea:	01 d0                	add    %edx,%eax
f012cfec:	66 8b 00             	mov    (%eax),%ax
f012cfef:	66 83 f8 05          	cmp    $0x5,%ax
f012cff3:	74 17                	je     f012d00c <test_krealloc+0xe4e>
			panic(
f012cff5:	83 ec 04             	sub    $0x4,%esp
f012cff8:	68 2c ca 13 f0       	push   $0xf013ca2c
f012cffd:	68 8d 0f 00 00       	push   $0xf8d
f012d002:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d007:	e8 f9 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012d00c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d012:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012d018:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d01e:	66 8b 00             	mov    (%eax),%ax
f012d021:	66 83 f8 06          	cmp    $0x6,%ax
f012d025:	75 1b                	jne    f012d042 <test_krealloc+0xe84>
f012d027:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d02d:	01 c0                	add    %eax,%eax
f012d02f:	89 c2                	mov    %eax,%edx
f012d031:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d037:	01 d0                	add    %edx,%eax
f012d039:	66 8b 00             	mov    (%eax),%ax
f012d03c:	66 83 f8 06          	cmp    $0x6,%ax
f012d040:	74 17                	je     f012d059 <test_krealloc+0xe9b>
			panic(
f012d042:	83 ec 04             	sub    $0x4,%esp
f012d045:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d04a:	68 92 0f 00 00       	push   $0xf92
f012d04f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d054:	e8 ac 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012d059:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d05f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012d065:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d06b:	8a 00                	mov    (%eax),%al
f012d06d:	3c 07                	cmp    $0x7,%al
f012d06f:	75 1b                	jne    f012d08c <test_krealloc+0xece>
f012d071:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d077:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d07e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d084:	01 d0                	add    %edx,%eax
f012d086:	8a 00                	mov    (%eax),%al
f012d088:	3c 07                	cmp    $0x7,%al
f012d08a:	74 17                	je     f012d0a3 <test_krealloc+0xee5>
			panic(
f012d08c:	83 ec 04             	sub    $0x4,%esp
f012d08f:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d094:	68 97 0f 00 00       	push   $0xf97
f012d099:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d09e:	e8 62 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012d0a3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0a9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0ad:	66 83 f8 07          	cmp    $0x7,%ax
f012d0b1:	75 1f                	jne    f012d0d2 <test_krealloc+0xf14>
f012d0b3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d0b9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0c0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0c6:	01 d0                	add    %edx,%eax
f012d0c8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0cc:	66 83 f8 07          	cmp    $0x7,%ax
f012d0d0:	74 17                	je     f012d0e9 <test_krealloc+0xf2b>
			panic(
f012d0d2:	83 ec 04             	sub    $0x4,%esp
f012d0d5:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d0da:	68 9a 0f 00 00       	push   $0xf9a
f012d0df:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d0e4:	e8 1c 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d0e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d0ef:	8b 40 04             	mov    0x4(%eax),%eax
f012d0f2:	83 f8 07             	cmp    $0x7,%eax
f012d0f5:	75 1d                	jne    f012d114 <test_krealloc+0xf56>
f012d0f7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d0fd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d104:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d10a:	01 d0                	add    %edx,%eax
f012d10c:	8b 40 04             	mov    0x4(%eax),%eax
f012d10f:	83 f8 07             	cmp    $0x7,%eax
f012d112:	74 17                	je     f012d12b <test_krealloc+0xf6d>
			panic(
f012d114:	83 ec 04             	sub    $0x4,%esp
f012d117:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d11c:	68 9d 0f 00 00       	push   $0xf9d
f012d121:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d126:	e8 da 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d12b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d131:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d137:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d13d:	8a 00                	mov    (%eax),%al
f012d13f:	3c 08                	cmp    $0x8,%al
f012d141:	75 1b                	jne    f012d15e <test_krealloc+0xfa0>
f012d143:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d149:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d150:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d156:	01 d0                	add    %edx,%eax
f012d158:	8a 00                	mov    (%eax),%al
f012d15a:	3c 08                	cmp    $0x8,%al
f012d15c:	74 17                	je     f012d175 <test_krealloc+0xfb7>
			panic(
f012d15e:	83 ec 04             	sub    $0x4,%esp
f012d161:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d166:	68 a2 0f 00 00       	push   $0xfa2
f012d16b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d170:	e8 90 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d175:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d17b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d17f:	66 83 f8 08          	cmp    $0x8,%ax
f012d183:	75 1f                	jne    f012d1a4 <test_krealloc+0xfe6>
f012d185:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d18b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d192:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d198:	01 d0                	add    %edx,%eax
f012d19a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d19e:	66 83 f8 08          	cmp    $0x8,%ax
f012d1a2:	74 17                	je     f012d1bb <test_krealloc+0xffd>
			panic(
f012d1a4:	83 ec 04             	sub    $0x4,%esp
f012d1a7:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d1ac:	68 a5 0f 00 00       	push   $0xfa5
f012d1b1:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d1b6:	e8 4a 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d1bb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1c1:	8b 40 04             	mov    0x4(%eax),%eax
f012d1c4:	83 f8 08             	cmp    $0x8,%eax
f012d1c7:	75 1d                	jne    f012d1e6 <test_krealloc+0x1028>
f012d1c9:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1cf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1d6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1dc:	01 d0                	add    %edx,%eax
f012d1de:	8b 40 04             	mov    0x4(%eax),%eax
f012d1e1:	83 f8 08             	cmp    $0x8,%eax
f012d1e4:	74 17                	je     f012d1fd <test_krealloc+0x103f>
			panic(
f012d1e6:	83 ec 04             	sub    $0x4,%esp
f012d1e9:	68 2c ca 13 f0       	push   $0xf013ca2c
f012d1ee:	68 a8 0f 00 00       	push   $0xfa8
f012d1f3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d1f8:	e8 08 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d1fd:	e8 af fd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d202:	89 c2                	mov    %eax,%edx
f012d204:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d207:	39 c2                	cmp    %eax,%edx
f012d209:	74 17                	je     f012d222 <test_krealloc+0x1064>
			panic(
f012d20b:	83 ec 04             	sub    $0x4,%esp
f012d20e:	68 ec ca 13 f0       	push   $0xf013caec
f012d213:	68 ac 0f 00 00       	push   $0xfac
f012d218:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d21d:	e8 e3 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d222:	83 ec 0c             	sub    $0xc,%esp
f012d225:	68 38 cb 13 f0       	push   $0xf013cb38
f012d22a:	e8 df 3a fd ff       	call   f0100d0e <cprintf>
f012d22f:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d232:	e8 7a fd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d237:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d23a:	e8 89 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d23f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d245:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d24b:	83 ec 08             	sub    $0x8,%esp
f012d24e:	6a 00                	push   $0x0
f012d250:	50                   	push   %eax
f012d251:	e8 f6 ab fd ff       	call   f0107e4c <krealloc>
f012d256:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d259:	e8 6a 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d25e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d264:	74 17                	je     f012d27d <test_krealloc+0x10bf>
			panic(
f012d266:	83 ec 04             	sub    $0x4,%esp
f012d269:	68 5c cb 13 f0       	push   $0xf013cb5c
f012d26e:	68 b9 0f 00 00       	push   $0xfb9
f012d273:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d278:	e8 88 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d27d:	e8 2f fd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d282:	89 c2                	mov    %eax,%edx
f012d284:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d287:	29 c2                	sub    %eax,%edx
f012d289:	89 d0                	mov    %edx,%eax
f012d28b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d290:	74 17                	je     f012d2a9 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d292:	83 ec 04             	sub    $0x4,%esp
f012d295:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012d29a:	68 bb 0f 00 00       	push   $0xfbb
f012d29f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d2a4:	e8 5c 2f fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d2a9:	e8 03 fd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d2ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d2b1:	e8 12 6b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d2b6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d2bc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d2c2:	83 ec 08             	sub    $0x8,%esp
f012d2c5:	6a 00                	push   $0x0
f012d2c7:	50                   	push   %eax
f012d2c8:	e8 7f ab fd ff       	call   f0107e4c <krealloc>
f012d2cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d2d0:	e8 f3 6a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d2d5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d2db:	74 17                	je     f012d2f4 <test_krealloc+0x1136>
			panic(
f012d2dd:	83 ec 04             	sub    $0x4,%esp
f012d2e0:	68 5c cb 13 f0       	push   $0xf013cb5c
f012d2e5:	68 c4 0f 00 00       	push   $0xfc4
f012d2ea:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d2ef:	e8 11 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d2f4:	e8 b8 fc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d2f9:	89 c2                	mov    %eax,%edx
f012d2fb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2fe:	29 c2                	sub    %eax,%edx
f012d300:	89 d0                	mov    %edx,%eax
f012d302:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d307:	74 17                	je     f012d320 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d309:	83 ec 04             	sub    $0x4,%esp
f012d30c:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012d311:	68 c6 0f 00 00       	push   $0xfc6
f012d316:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d31b:	e8 e5 2e fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d320:	e8 8c fc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d325:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d328:	e8 9b 6a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d32d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d333:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d339:	83 ec 08             	sub    $0x8,%esp
f012d33c:	6a 00                	push   $0x0
f012d33e:	50                   	push   %eax
f012d33f:	e8 08 ab fd ff       	call   f0107e4c <krealloc>
f012d344:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d347:	e8 7c 6a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d34c:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d352:	74 17                	je     f012d36b <test_krealloc+0x11ad>
			panic(
f012d354:	83 ec 04             	sub    $0x4,%esp
f012d357:	68 14 b7 13 f0       	push   $0xf013b714
f012d35c:	68 ce 0f 00 00       	push   $0xfce
f012d361:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d366:	e8 9a 2e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d36b:	e8 41 fc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d370:	89 c2                	mov    %eax,%edx
f012d372:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d375:	29 c2                	sub    %eax,%edx
f012d377:	89 d0                	mov    %edx,%eax
f012d379:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d37e:	74 17                	je     f012d397 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d380:	83 ec 04             	sub    $0x4,%esp
f012d383:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012d388:	68 d0 0f 00 00       	push   $0xfd0
f012d38d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d392:	e8 6e 2e fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d397:	e8 15 fc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d39c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d39f:	e8 24 6a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d3a4:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d3aa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d3b0:	83 ec 08             	sub    $0x8,%esp
f012d3b3:	6a 00                	push   $0x0
f012d3b5:	50                   	push   %eax
f012d3b6:	e8 91 aa fd ff       	call   f0107e4c <krealloc>
f012d3bb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d3be:	e8 05 6a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d3c3:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d3c9:	74 17                	je     f012d3e2 <test_krealloc+0x1224>
			panic(
f012d3cb:	83 ec 04             	sub    $0x4,%esp
f012d3ce:	68 5c cb 13 f0       	push   $0xf013cb5c
f012d3d3:	68 d8 0f 00 00       	push   $0xfd8
f012d3d8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d3dd:	e8 23 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d3e2:	e8 ca fb fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d3e7:	89 c2                	mov    %eax,%edx
f012d3e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d3ec:	29 c2                	sub    %eax,%edx
f012d3ee:	89 d0                	mov    %edx,%eax
f012d3f0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d3f5:	74 17                	je     f012d40e <test_krealloc+0x1250>
			panic(
f012d3f7:	83 ec 04             	sub    $0x4,%esp
f012d3fa:	68 04 cc 13 f0       	push   $0xf013cc04
f012d3ff:	68 db 0f 00 00       	push   $0xfdb
f012d404:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d409:	e8 f7 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d40e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d415:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d41c:	eb 48                	jmp    f012d466 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d41e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d421:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012d426:	83 ec 04             	sub    $0x4,%esp
f012d429:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d42f:	51                   	push   %ecx
f012d430:	52                   	push   %edx
f012d431:	50                   	push   %eax
f012d432:	e8 7a 96 fd ff       	call   f0106ab1 <get_page_table>
f012d437:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d43a:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d440:	85 c0                	test   %eax,%eax
f012d442:	75 17                	jne    f012d45b <test_krealloc+0x129d>
					panic(
f012d444:	83 ec 04             	sub    $0x4,%esp
f012d447:	68 fc bf 13 f0       	push   $0xf013bffc
f012d44c:	68 e7 0f 00 00       	push   $0xfe7
f012d451:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d456:	e8 aa 2d fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d45b:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d462:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d466:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d46a:	78 b2                	js     f012d41e <test_krealloc+0x1260>
f012d46c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d470:	7f 09                	jg     f012d47b <test_krealloc+0x12bd>
f012d472:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d479:	76 a3                	jbe    f012d41e <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d47b:	83 ec 0c             	sub    $0xc,%esp
f012d47e:	68 43 cc 13 f0       	push   $0xf013cc43
f012d483:	e8 86 38 fd ff       	call   f0100d0e <cprintf>
f012d488:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d48b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d491:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d497:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d49e:	eb 21                	jmp    f012d4c1 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d4a0:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d4a6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d4a9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d4af:	01 c8                	add    %ecx,%eax
f012d4b1:	8a 00                	mov    (%eax),%al
f012d4b3:	0f be c0             	movsbl %al,%eax
f012d4b6:	01 d0                	add    %edx,%eax
f012d4b8:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d4be:	ff 45 dc             	incl   -0x24(%ebp)
f012d4c1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d4c7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d4ca:	7d d4                	jge    f012d4a0 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d4cc:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d4d2:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d4d8:	42                   	inc    %edx
f012d4d9:	01 d2                	add    %edx,%edx
f012d4db:	39 d0                	cmp    %edx,%eax
f012d4dd:	74 17                	je     f012d4f6 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d4df:	83 ec 04             	sub    $0x4,%esp
f012d4e2:	68 4c cc 13 f0       	push   $0xf013cc4c
f012d4e7:	68 f9 0f 00 00       	push   $0xff9
f012d4ec:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d4f1:	e8 0f 2d fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d4f6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d4fc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d502:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d509:	eb 25                	jmp    f012d530 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d50b:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d511:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d514:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d51b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d521:	01 c8                	add    %ecx,%eax
f012d523:	8b 00                	mov    (%eax),%eax
f012d525:	01 d0                	add    %edx,%eax
f012d527:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d52d:	ff 45 dc             	incl   -0x24(%ebp)
f012d530:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d536:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d539:	7d d0                	jge    f012d50b <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d53b:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d541:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d547:	42                   	inc    %edx
f012d548:	c1 e2 02             	shl    $0x2,%edx
f012d54b:	39 d0                	cmp    %edx,%eax
f012d54d:	74 17                	je     f012d566 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d54f:	83 ec 04             	sub    $0x4,%esp
f012d552:	68 4c cc 13 f0       	push   $0xf013cc4c
f012d557:	68 03 10 00 00       	push   $0x1003
f012d55c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d561:	e8 9f 2c fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d566:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d56c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d572:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d579:	eb 24                	jmp    f012d59f <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d57b:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d581:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d584:	01 c0                	add    %eax,%eax
f012d586:	89 c1                	mov    %eax,%ecx
f012d588:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d58e:	01 c8                	add    %ecx,%eax
f012d590:	66 8b 00             	mov    (%eax),%ax
f012d593:	98                   	cwtl   
f012d594:	01 d0                	add    %edx,%eax
f012d596:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d59c:	ff 45 dc             	incl   -0x24(%ebp)
f012d59f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d5a5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d5a8:	7d d1                	jge    f012d57b <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d5aa:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d5b0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d5b6:	8d 48 01             	lea    0x1(%eax),%ecx
f012d5b9:	89 c8                	mov    %ecx,%eax
f012d5bb:	c1 e0 02             	shl    $0x2,%eax
f012d5be:	01 c8                	add    %ecx,%eax
f012d5c0:	39 c2                	cmp    %eax,%edx
f012d5c2:	74 17                	je     f012d5db <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d5c4:	83 ec 04             	sub    $0x4,%esp
f012d5c7:	68 4c cc 13 f0       	push   $0xf013cc4c
f012d5cc:	68 0d 10 00 00       	push   $0x100d
f012d5d1:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d5d6:	e8 2a 2c fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d5db:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d5e1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d5e7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d5ee:	eb 70                	jmp    f012d660 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d5f0:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d5f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d5f9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d600:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d606:	01 c8                	add    %ecx,%eax
f012d608:	8a 00                	mov    (%eax),%al
f012d60a:	0f be c0             	movsbl %al,%eax
f012d60d:	01 d0                	add    %edx,%eax
f012d60f:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d615:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d61b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d61e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d625:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d62b:	01 c8                	add    %ecx,%eax
f012d62d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d631:	98                   	cwtl   
f012d632:	01 d0                	add    %edx,%eax
f012d634:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d63a:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d640:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d643:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d64a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d650:	01 c8                	add    %ecx,%eax
f012d652:	8b 40 04             	mov    0x4(%eax),%eax
f012d655:	01 d0                	add    %edx,%eax
f012d657:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d65d:	ff 45 dc             	incl   -0x24(%ebp)
f012d660:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d666:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d669:	7d 85                	jge    f012d5f0 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d66b:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d671:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d677:	8d 50 01             	lea    0x1(%eax),%edx
f012d67a:	89 d0                	mov    %edx,%eax
f012d67c:	01 c0                	add    %eax,%eax
f012d67e:	01 d0                	add    %edx,%eax
f012d680:	01 c0                	add    %eax,%eax
f012d682:	01 d0                	add    %edx,%eax
f012d684:	39 c1                	cmp    %eax,%ecx
f012d686:	75 3a                	jne    f012d6c2 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d688:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d68e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d694:	8d 50 01             	lea    0x1(%eax),%edx
f012d697:	89 d0                	mov    %edx,%eax
f012d699:	01 c0                	add    %eax,%eax
f012d69b:	01 d0                	add    %edx,%eax
f012d69d:	01 c0                	add    %eax,%eax
f012d69f:	01 d0                	add    %edx,%eax
f012d6a1:	39 c1                	cmp    %eax,%ecx
f012d6a3:	75 1d                	jne    f012d6c2 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d6a5:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d6ab:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d6b1:	8d 50 01             	lea    0x1(%eax),%edx
f012d6b4:	89 d0                	mov    %edx,%eax
f012d6b6:	01 c0                	add    %eax,%eax
f012d6b8:	01 d0                	add    %edx,%eax
f012d6ba:	01 c0                	add    %eax,%eax
f012d6bc:	01 d0                	add    %edx,%eax
f012d6be:	39 c1                	cmp    %eax,%ecx
f012d6c0:	74 17                	je     f012d6d9 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d6c2:	83 ec 04             	sub    $0x4,%esp
f012d6c5:	68 4c cc 13 f0       	push   $0xf013cc4c
f012d6ca:	68 1b 10 00 00       	push   $0x101b
f012d6cf:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d6d4:	e8 2c 2b fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d6d9:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d6e0:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d6e3:	e8 c9 f8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d6e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d6eb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d6f1:	83 ec 08             	sub    $0x8,%esp
f012d6f4:	68 00 3c 00 00       	push   $0x3c00
f012d6f9:	50                   	push   %eax
f012d6fa:	e8 4d a7 fd ff       	call   f0107e4c <krealloc>
f012d6ff:	83 c4 10             	add    $0x10,%esp
f012d702:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d708:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d70e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d713:	77 17                	ja     f012d72c <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d715:	83 ec 04             	sub    $0x4,%esp
f012d718:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012d71d:	68 27 10 00 00       	push   $0x1027
f012d722:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d727:	e8 d9 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d72c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d732:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d738:	74 17                	je     f012d751 <test_krealloc+0x1593>
			panic(
f012d73a:	83 ec 04             	sub    $0x4,%esp
f012d73d:	68 84 cc 13 f0       	push   $0xf013cc84
f012d742:	68 2a 10 00 00       	push   $0x102a
f012d747:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d74c:	e8 b4 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d751:	e8 5b f8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d756:	89 c2                	mov    %eax,%edx
f012d758:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d75b:	39 c2                	cmp    %eax,%edx
f012d75d:	74 17                	je     f012d776 <test_krealloc+0x15b8>
			panic(
f012d75f:	83 ec 04             	sub    $0x4,%esp
f012d762:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012d767:	68 2d 10 00 00       	push   $0x102d
f012d76c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d771:	e8 8f 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d776:	e8 36 f8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d77b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d77e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d784:	83 ec 08             	sub    $0x8,%esp
f012d787:	68 00 fc 0f 00       	push   $0xffc00
f012d78c:	50                   	push   %eax
f012d78d:	e8 ba a6 fd ff       	call   f0107e4c <krealloc>
f012d792:	83 c4 10             	add    $0x10,%esp
f012d795:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d79b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d7a1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7a6:	77 17                	ja     f012d7bf <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7a8:	83 ec 04             	sub    $0x4,%esp
f012d7ab:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012d7b0:	68 33 10 00 00       	push   $0x1033
f012d7b5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d7ba:	e8 46 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d7bf:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d7c5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d7cb:	74 17                	je     f012d7e4 <test_krealloc+0x1626>
			panic(
f012d7cd:	83 ec 04             	sub    $0x4,%esp
f012d7d0:	68 84 cc 13 f0       	push   $0xf013cc84
f012d7d5:	68 36 10 00 00       	push   $0x1036
f012d7da:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d7df:	e8 21 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d7e4:	e8 c8 f7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d7e9:	89 c2                	mov    %eax,%edx
f012d7eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d7ee:	39 c2                	cmp    %eax,%edx
f012d7f0:	74 17                	je     f012d809 <test_krealloc+0x164b>
			panic(
f012d7f2:	83 ec 04             	sub    $0x4,%esp
f012d7f5:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012d7fa:	68 39 10 00 00       	push   $0x1039
f012d7ff:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d804:	e8 fc 29 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d809:	e8 a3 f7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d80e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d811:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d817:	83 ec 08             	sub    $0x8,%esp
f012d81a:	68 00 fc 0f 00       	push   $0xffc00
f012d81f:	50                   	push   %eax
f012d820:	e8 27 a6 fd ff       	call   f0107e4c <krealloc>
f012d825:	83 c4 10             	add    $0x10,%esp
f012d828:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d82e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d834:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d839:	77 17                	ja     f012d852 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d83b:	83 ec 04             	sub    $0x4,%esp
f012d83e:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012d843:	68 3f 10 00 00       	push   $0x103f
f012d848:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d84d:	e8 b3 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d852:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d858:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d85e:	74 17                	je     f012d877 <test_krealloc+0x16b9>
			panic(
f012d860:	83 ec 04             	sub    $0x4,%esp
f012d863:	68 84 cc 13 f0       	push   $0xf013cc84
f012d868:	68 42 10 00 00       	push   $0x1042
f012d86d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d872:	e8 8e 29 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d877:	e8 35 f7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d87c:	89 c2                	mov    %eax,%edx
f012d87e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d881:	39 c2                	cmp    %eax,%edx
f012d883:	74 17                	je     f012d89c <test_krealloc+0x16de>
			panic(
f012d885:	83 ec 04             	sub    $0x4,%esp
f012d888:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012d88d:	68 45 10 00 00       	push   $0x1045
f012d892:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d897:	e8 69 29 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d89c:	e8 10 f7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d8a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d8a4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d8aa:	83 ec 08             	sub    $0x8,%esp
f012d8ad:	68 00 fc 0f 00       	push   $0xffc00
f012d8b2:	50                   	push   %eax
f012d8b3:	e8 94 a5 fd ff       	call   f0107e4c <krealloc>
f012d8b8:	83 c4 10             	add    $0x10,%esp
f012d8bb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d8c1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d8c7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d8cc:	77 17                	ja     f012d8e5 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d8ce:	83 ec 04             	sub    $0x4,%esp
f012d8d1:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012d8d6:	68 4d 10 00 00       	push   $0x104d
f012d8db:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d8e0:	e8 20 29 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d8e5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d8eb:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d8f1:	74 17                	je     f012d90a <test_krealloc+0x174c>
			panic(
f012d8f3:	83 ec 04             	sub    $0x4,%esp
f012d8f6:	68 34 cd 13 f0       	push   $0xf013cd34
f012d8fb:	68 50 10 00 00       	push   $0x1050
f012d900:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d905:	e8 fb 28 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d90a:	e8 a2 f6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d90f:	89 c2                	mov    %eax,%edx
f012d911:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d914:	39 c2                	cmp    %eax,%edx
f012d916:	74 17                	je     f012d92f <test_krealloc+0x1771>
			panic(
f012d918:	83 ec 04             	sub    $0x4,%esp
f012d91b:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012d920:	68 53 10 00 00       	push   $0x1053
f012d925:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d92a:	e8 d6 28 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d92f:	83 ec 0c             	sub    $0xc,%esp
f012d932:	68 13 bf 13 f0       	push   $0xf013bf13
f012d937:	e8 d2 33 fd ff       	call   f0100d0e <cprintf>
f012d93c:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d93f:	e8 6d f6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d944:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d947:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d94d:	83 ec 08             	sub    $0x8,%esp
f012d950:	68 00 18 10 00       	push   $0x101800
f012d955:	50                   	push   %eax
f012d956:	e8 f1 a4 fd ff       	call   f0107e4c <krealloc>
f012d95b:	83 c4 10             	add    $0x10,%esp
f012d95e:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d961:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d964:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d969:	77 17                	ja     f012d982 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d96b:	83 ec 04             	sub    $0x4,%esp
f012d96e:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012d973:	68 5c 10 00 00       	push   $0x105c
f012d978:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d97d:	e8 83 28 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d982:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d988:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d98b:	74 17                	je     f012d9a4 <test_krealloc+0x17e6>
			panic(
f012d98d:	83 ec 04             	sub    $0x4,%esp
f012d990:	68 94 cd 13 f0       	push   $0xf013cd94
f012d995:	68 5f 10 00 00       	push   $0x105f
f012d99a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d99f:	e8 61 28 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d9a4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d9a7:	e8 05 f6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d9ac:	29 c3                	sub    %eax,%ebx
f012d9ae:	89 d8                	mov    %ebx,%eax
f012d9b0:	83 f8 02             	cmp    $0x2,%eax
f012d9b3:	74 17                	je     f012d9cc <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d9b5:	83 ec 04             	sub    $0x4,%esp
f012d9b8:	68 10 ce 13 f0       	push   $0xf013ce10
f012d9bd:	68 61 10 00 00       	push   $0x1061
f012d9c2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012d9c7:	e8 39 28 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d9cc:	e8 e0 f5 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012d9d1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d9d4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d9da:	83 ec 08             	sub    $0x8,%esp
f012d9dd:	68 00 fc 3f 00       	push   $0x3ffc00
f012d9e2:	50                   	push   %eax
f012d9e3:	e8 64 a4 fd ff       	call   f0107e4c <krealloc>
f012d9e8:	83 c4 10             	add    $0x10,%esp
f012d9eb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d9ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d9f1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d9f6:	77 17                	ja     f012da0f <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9f8:	83 ec 04             	sub    $0x4,%esp
f012d9fb:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012da00:	68 67 10 00 00       	push   $0x1067
f012da05:	68 fa b6 13 f0       	push   $0xf013b6fa
f012da0a:	e8 f6 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012da0f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012da15:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012da18:	74 17                	je     f012da31 <test_krealloc+0x1873>
			panic(
f012da1a:	83 ec 04             	sub    $0x4,%esp
f012da1d:	68 94 cd 13 f0       	push   $0xf013cd94
f012da22:	68 6a 10 00 00       	push   $0x106a
f012da27:	68 fa b6 13 f0       	push   $0xf013b6fa
f012da2c:	e8 d4 27 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012da31:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da34:	e8 78 f5 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012da39:	29 c3                	sub    %eax,%ebx
f012da3b:	89 d8                	mov    %ebx,%eax
f012da3d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012da42:	74 17                	je     f012da5b <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012da44:	83 ec 04             	sub    $0x4,%esp
f012da47:	68 10 ce 13 f0       	push   $0xf013ce10
f012da4c:	68 6d 10 00 00       	push   $0x106d
f012da51:	68 fa b6 13 f0       	push   $0xf013b6fa
f012da56:	e8 aa 27 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012da5b:	83 ec 0c             	sub    $0xc,%esp
f012da5e:	68 58 bf 13 f0       	push   $0xf013bf58
f012da63:	e8 a6 32 fd ff       	call   f0100d0e <cprintf>
f012da68:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012da6b:	e8 41 f5 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012da70:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012da73:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012da79:	83 ec 08             	sub    $0x8,%esp
f012da7c:	68 00 fc 9f 00       	push   $0x9ffc00
f012da81:	50                   	push   %eax
f012da82:	e8 c5 a3 fd ff       	call   f0107e4c <krealloc>
f012da87:	83 c4 10             	add    $0x10,%esp
f012da8a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012da8d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da90:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da95:	77 17                	ja     f012daae <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da97:	83 ec 04             	sub    $0x4,%esp
f012da9a:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012da9f:	68 78 10 00 00       	push   $0x1078
f012daa4:	68 fa b6 13 f0       	push   $0xf013b6fa
f012daa9:	e8 57 27 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012daae:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012dab5:	10 00 00 
f012dab8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012dabe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dac3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012dac9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012dacf:	ba 00 00 00 00       	mov    $0x0,%edx
f012dad4:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012dada:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012dae0:	29 d0                	sub    %edx,%eax
f012dae2:	89 c1                	mov    %eax,%ecx
f012dae4:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012daeb:	10 00 00 
f012daee:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012daf3:	0f b6 d0             	movzbl %al,%edx
f012daf6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012dafc:	01 d0                	add    %edx,%eax
f012dafe:	48                   	dec    %eax
f012daff:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012db05:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012db0b:	ba 00 00 00 00       	mov    $0x0,%edx
f012db10:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012db16:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012db1c:	29 d0                	sub    %edx,%eax
f012db1e:	01 c1                	add    %eax,%ecx
f012db20:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012db27:	10 00 00 
f012db2a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012db2f:	0f b6 c0             	movzbl %al,%eax
f012db32:	c1 e0 04             	shl    $0x4,%eax
f012db35:	89 c2                	mov    %eax,%edx
f012db37:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012db3d:	01 d0                	add    %edx,%eax
f012db3f:	48                   	dec    %eax
f012db40:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012db46:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012db4c:	ba 00 00 00 00       	mov    $0x0,%edx
f012db51:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012db57:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012db5d:	29 d0                	sub    %edx,%eax
f012db5f:	01 c8                	add    %ecx,%eax
f012db61:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012db67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db6a:	39 c2                	cmp    %eax,%edx
f012db6c:	74 18                	je     f012db86 <test_krealloc+0x19c8>
			panic(
f012db6e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db71:	50                   	push   %eax
f012db72:	68 44 ce 13 f0       	push   $0xf013ce44
f012db77:	68 7c 10 00 00       	push   $0x107c
f012db7c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012db81:	e8 7f 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012db86:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012db8c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012db8f:	75 17                	jne    f012dba8 <test_krealloc+0x19ea>
			panic(
f012db91:	83 ec 04             	sub    $0x4,%esp
f012db94:	68 88 ce 13 f0       	push   $0xf013ce88
f012db99:	68 7f 10 00 00       	push   $0x107f
f012db9e:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dba3:	e8 5d 26 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012dba8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbab:	e8 01 f4 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012dbb0:	29 c3                	sub    %eax,%ebx
f012dbb2:	89 d8                	mov    %ebx,%eax
f012dbb4:	3d 00 06 00 00       	cmp    $0x600,%eax
f012dbb9:	74 17                	je     f012dbd2 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012dbbb:	83 ec 04             	sub    $0x4,%esp
f012dbbe:	68 10 ce 13 f0       	push   $0xf013ce10
f012dbc3:	68 82 10 00 00       	push   $0x1082
f012dbc8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dbcd:	e8 33 26 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012dbd2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dbd5:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012dbdb:	e8 d1 f3 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012dbe0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012dbe3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dbe9:	83 ec 08             	sub    $0x8,%esp
f012dbec:	68 00 fc 5f 00       	push   $0x5ffc00
f012dbf1:	50                   	push   %eax
f012dbf2:	e8 55 a2 fd ff       	call   f0107e4c <krealloc>
f012dbf7:	83 c4 10             	add    $0x10,%esp
f012dbfa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dbfd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc00:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc05:	77 17                	ja     f012dc1e <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc07:	83 ec 04             	sub    $0x4,%esp
f012dc0a:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012dc0f:	68 8b 10 00 00       	push   $0x108b
f012dc14:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dc19:	e8 e7 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012dc1e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dc24:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dc27:	74 17                	je     f012dc40 <test_krealloc+0x1a82>
			panic(
f012dc29:	83 ec 04             	sub    $0x4,%esp
f012dc2c:	68 94 cd 13 f0       	push   $0xf013cd94
f012dc31:	68 8e 10 00 00       	push   $0x108e
f012dc36:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dc3b:	e8 c5 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012dc40:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dc43:	e8 69 f3 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012dc48:	29 c3                	sub    %eax,%ebx
f012dc4a:	89 d8                	mov    %ebx,%eax
f012dc4c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dc51:	74 17                	je     f012dc6a <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012dc53:	83 ec 04             	sub    $0x4,%esp
f012dc56:	68 10 ce 13 f0       	push   $0xf013ce10
f012dc5b:	68 91 10 00 00       	push   $0x1091
f012dc60:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dc65:	e8 9b 25 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012dc6a:	e8 42 f3 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012dc6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012dc72:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dc78:	83 ec 08             	sub    $0x8,%esp
f012dc7b:	68 00 fc 3f 01       	push   $0x13ffc00
f012dc80:	50                   	push   %eax
f012dc81:	e8 c6 a1 fd ff       	call   f0107e4c <krealloc>
f012dc86:	83 c4 10             	add    $0x10,%esp
f012dc89:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc8f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc94:	77 17                	ja     f012dcad <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc96:	83 ec 04             	sub    $0x4,%esp
f012dc99:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012dc9e:	68 98 10 00 00       	push   $0x1098
f012dca3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dca8:	e8 58 25 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dcad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dcb3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dcb6:	75 17                	jne    f012dccf <test_krealloc+0x1b11>
			panic(
f012dcb8:	83 ec 04             	sub    $0x4,%esp
f012dcbb:	68 88 ce 13 f0       	push   $0xf013ce88
f012dcc0:	68 9b 10 00 00       	push   $0x109b
f012dcc5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dcca:	e8 36 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012dccf:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012dcd6:	10 00 00 
f012dcd9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012dcdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dce4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012dcea:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dcf0:	ba 00 00 00 00       	mov    $0x0,%edx
f012dcf5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012dcfb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dd01:	29 d0                	sub    %edx,%eax
f012dd03:	89 c1                	mov    %eax,%ecx
f012dd05:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012dd0c:	10 00 00 
f012dd0f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012dd14:	0f b6 d0             	movzbl %al,%edx
f012dd17:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012dd1d:	01 d0                	add    %edx,%eax
f012dd1f:	48                   	dec    %eax
f012dd20:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012dd26:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dd2c:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd31:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012dd37:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dd3d:	29 d0                	sub    %edx,%eax
f012dd3f:	01 c1                	add    %eax,%ecx
f012dd41:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012dd48:	10 00 00 
f012dd4b:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012dd50:	0f b6 c0             	movzbl %al,%eax
f012dd53:	c1 e0 04             	shl    $0x4,%eax
f012dd56:	89 c2                	mov    %eax,%edx
f012dd58:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012dd5e:	01 d0                	add    %edx,%eax
f012dd60:	48                   	dec    %eax
f012dd61:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012dd67:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dd6d:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd72:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012dd78:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dd7e:	29 d0                	sub    %edx,%eax
f012dd80:	01 c8                	add    %ecx,%eax
f012dd82:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012dd88:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd8b:	39 c2                	cmp    %eax,%edx
f012dd8d:	74 17                	je     f012dda6 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012dd8f:	83 ec 04             	sub    $0x4,%esp
f012dd92:	68 0c cf 13 f0       	push   $0xf013cf0c
f012dd97:	68 9d 10 00 00       	push   $0x109d
f012dd9c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dda1:	e8 5f 24 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012dda6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dda9:	e8 03 f2 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012ddae:	29 c3                	sub    %eax,%ebx
f012ddb0:	89 d8                	mov    %ebx,%eax
f012ddb2:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012ddb7:	74 17                	je     f012ddd0 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012ddb9:	83 ec 04             	sub    $0x4,%esp
f012ddbc:	68 10 ce 13 f0       	push   $0xf013ce10
f012ddc1:	68 a0 10 00 00       	push   $0x10a0
f012ddc6:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ddcb:	e8 35 24 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012ddd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ddd3:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ddd9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dddf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012dde5:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012ddec:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ddef:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ddf6:	eb 21                	jmp    f012de19 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012ddf8:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ddfe:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012de01:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de07:	01 c8                	add    %ecx,%eax
f012de09:	8a 00                	mov    (%eax),%al
f012de0b:	0f be c0             	movsbl %al,%eax
f012de0e:	01 d0                	add    %edx,%eax
f012de10:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012de16:	ff 45 d8             	incl   -0x28(%ebp)
f012de19:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012de1f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012de22:	7d d4                	jge    f012ddf8 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012de24:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012de2a:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012de30:	42                   	inc    %edx
f012de31:	01 d2                	add    %edx,%edx
f012de33:	39 d0                	cmp    %edx,%eax
f012de35:	74 17                	je     f012de4e <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012de37:	83 ec 04             	sub    $0x4,%esp
f012de3a:	68 40 cf 13 f0       	push   $0xf013cf40
f012de3f:	68 ae 10 00 00       	push   $0x10ae
f012de44:	68 fa b6 13 f0       	push   $0xf013b6fa
f012de49:	e8 b7 23 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012de4e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012de54:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012de5a:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012de61:	00 00 00 
		sums[1] = 0;
f012de64:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012de6b:	00 00 00 
		sums[2] = 0;
f012de6e:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012de75:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012de78:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012de7f:	eb 70                	jmp    f012def1 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012de81:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012de87:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012de8a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012de91:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012de97:	01 c8                	add    %ecx,%eax
f012de99:	8a 00                	mov    (%eax),%al
f012de9b:	0f be c0             	movsbl %al,%eax
f012de9e:	01 d0                	add    %edx,%eax
f012dea0:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012dea6:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012deac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012deaf:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012deb6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012debc:	01 c8                	add    %ecx,%eax
f012debe:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dec2:	98                   	cwtl   
f012dec3:	01 d0                	add    %edx,%eax
f012dec5:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012decb:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012ded1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ded4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dedb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dee1:	01 c8                	add    %ecx,%eax
f012dee3:	8b 40 04             	mov    0x4(%eax),%eax
f012dee6:	01 d0                	add    %edx,%eax
f012dee8:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012deee:	ff 45 d8             	incl   -0x28(%ebp)
f012def1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012def7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012defa:	7d 85                	jge    f012de81 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012defc:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012df02:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012df08:	8d 50 01             	lea    0x1(%eax),%edx
f012df0b:	89 d0                	mov    %edx,%eax
f012df0d:	01 c0                	add    %eax,%eax
f012df0f:	01 d0                	add    %edx,%eax
f012df11:	01 c0                	add    %eax,%eax
f012df13:	01 d0                	add    %edx,%eax
f012df15:	39 c1                	cmp    %eax,%ecx
f012df17:	75 3a                	jne    f012df53 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012df19:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012df1f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012df25:	8d 50 01             	lea    0x1(%eax),%edx
f012df28:	89 d0                	mov    %edx,%eax
f012df2a:	01 c0                	add    %eax,%eax
f012df2c:	01 d0                	add    %edx,%eax
f012df2e:	01 c0                	add    %eax,%eax
f012df30:	01 d0                	add    %edx,%eax
f012df32:	39 c1                	cmp    %eax,%ecx
f012df34:	75 1d                	jne    f012df53 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012df36:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012df3c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012df42:	8d 50 01             	lea    0x1(%eax),%edx
f012df45:	89 d0                	mov    %edx,%eax
f012df47:	01 c0                	add    %eax,%eax
f012df49:	01 d0                	add    %edx,%eax
f012df4b:	01 c0                	add    %eax,%eax
f012df4d:	01 d0                	add    %edx,%eax
f012df4f:	39 c1                	cmp    %eax,%ecx
f012df51:	74 17                	je     f012df6a <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012df53:	83 ec 04             	sub    $0x4,%esp
f012df56:	68 40 cf 13 f0       	push   $0xf013cf40
f012df5b:	68 c0 10 00 00       	push   $0x10c0
f012df60:	68 fa b6 13 f0       	push   $0xf013b6fa
f012df65:	e8 9b 22 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012df6a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012df70:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012df76:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012df7d:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012df80:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012df87:	eb 24                	jmp    f012dfad <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012df89:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012df8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012df92:	01 c0                	add    %eax,%eax
f012df94:	89 c1                	mov    %eax,%ecx
f012df96:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df9c:	01 c8                	add    %ecx,%eax
f012df9e:	66 8b 00             	mov    (%eax),%ax
f012dfa1:	98                   	cwtl   
f012dfa2:	01 d0                	add    %edx,%eax
f012dfa4:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dfaa:	ff 45 d8             	incl   -0x28(%ebp)
f012dfad:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dfb3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dfb6:	7d d1                	jge    f012df89 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012dfb8:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dfbe:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dfc4:	8d 48 01             	lea    0x1(%eax),%ecx
f012dfc7:	89 c8                	mov    %ecx,%eax
f012dfc9:	c1 e0 02             	shl    $0x2,%eax
f012dfcc:	01 c8                	add    %ecx,%eax
f012dfce:	39 c2                	cmp    %eax,%edx
f012dfd0:	74 17                	je     f012dfe9 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012dfd2:	83 ec 04             	sub    $0x4,%esp
f012dfd5:	68 40 cf 13 f0       	push   $0xf013cf40
f012dfda:	68 ca 10 00 00       	push   $0x10ca
f012dfdf:	68 fa b6 13 f0       	push   $0xf013b6fa
f012dfe4:	e8 1c 22 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012dfe9:	e8 c3 ef fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012dfee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dff1:	e8 d2 5d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012dff6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012dffc:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e002:	83 ec 08             	sub    $0x8,%esp
f012e005:	6a 00                	push   $0x0
f012e007:	50                   	push   %eax
f012e008:	e8 3f 9e fd ff       	call   f0107e4c <krealloc>
f012e00d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e010:	e8 b3 5d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e015:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e01b:	74 17                	je     f012e034 <test_krealloc+0x1e76>
			panic(
f012e01d:	83 ec 04             	sub    $0x4,%esp
f012e020:	68 14 b7 13 f0       	push   $0xf013b714
f012e025:	68 d2 10 00 00       	push   $0x10d2
f012e02a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e02f:	e8 d1 21 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012e034:	e8 78 ef fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e039:	89 c2                	mov    %eax,%edx
f012e03b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e03e:	29 c2                	sub    %eax,%edx
f012e040:	89 d0                	mov    %edx,%eax
f012e042:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012e047:	74 17                	je     f012e060 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012e049:	83 ec 04             	sub    $0x4,%esp
f012e04c:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012e051:	68 d4 10 00 00       	push   $0x10d4
f012e056:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e05b:	e8 a5 21 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012e060:	e8 4c ef fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e065:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e068:	e8 5b 5d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e06d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012e073:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e079:	83 ec 0c             	sub    $0xc,%esp
f012e07c:	50                   	push   %eax
f012e07d:	e8 d5 9b fd ff       	call   f0107c57 <kfree>
f012e082:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e085:	e8 3e 5d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012e08a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e090:	74 17                	je     f012e0a9 <test_krealloc+0x1eeb>
			panic(
f012e092:	83 ec 04             	sub    $0x4,%esp
f012e095:	68 14 b7 13 f0       	push   $0xf013b714
f012e09a:	68 dc 10 00 00       	push   $0x10dc
f012e09f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e0a4:	e8 5c 21 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e0a9:	e8 03 ef fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e0ae:	89 c2                	mov    %eax,%edx
f012e0b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e0b3:	29 c2                	sub    %eax,%edx
f012e0b5:	89 d0                	mov    %edx,%eax
f012e0b7:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e0bc:	74 17                	je     f012e0d5 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e0be:	83 ec 04             	sub    $0x4,%esp
f012e0c1:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012e0c6:	68 de 10 00 00       	push   $0x10de
f012e0cb:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e0d0:	e8 30 21 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e0d5:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e0dc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e0e3:	eb 48                	jmp    f012e12d <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e0e5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e0e8:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012e0ed:	83 ec 04             	sub    $0x4,%esp
f012e0f0:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e0f6:	51                   	push   %ecx
f012e0f7:	52                   	push   %edx
f012e0f8:	50                   	push   %eax
f012e0f9:	e8 b3 89 fd ff       	call   f0106ab1 <get_page_table>
f012e0fe:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e101:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e107:	85 c0                	test   %eax,%eax
f012e109:	75 17                	jne    f012e122 <test_krealloc+0x1f64>
					panic(
f012e10b:	83 ec 04             	sub    $0x4,%esp
f012e10e:	68 fc bf 13 f0       	push   $0xf013bffc
f012e113:	68 eb 10 00 00       	push   $0x10eb
f012e118:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e11d:	e8 e3 20 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e122:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e129:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e12d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e131:	78 b2                	js     f012e0e5 <test_krealloc+0x1f27>
f012e133:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e137:	7f 09                	jg     f012e142 <test_krealloc+0x1f84>
f012e139:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e140:	76 a3                	jbe    f012e0e5 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e142:	83 ec 0c             	sub    $0xc,%esp
f012e145:	68 de b8 13 f0       	push   $0xf013b8de
f012e14a:	e8 bf 2b fd ff       	call   f0100d0e <cprintf>
f012e14f:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e152:	83 ec 0c             	sub    $0xc,%esp
f012e155:	68 6c cf 13 f0       	push   $0xf013cf6c
f012e15a:	e8 af 2b fd ff       	call   f0100d0e <cprintf>
f012e15f:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e162:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e167:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e16a:	5b                   	pop    %ebx
f012e16b:	5f                   	pop    %edi
f012e16c:	5d                   	pop    %ebp
f012e16d:	c3                   	ret    

f012e16e <test_krealloc_BF>:


int test_krealloc_BF() {
f012e16e:	55                   	push   %ebp
f012e16f:	89 e5                	mov    %esp,%ebp
f012e171:	57                   	push   %edi
f012e172:	53                   	push   %ebx
f012e173:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e179:	83 ec 0c             	sub    $0xc,%esp
f012e17c:	68 3c b6 13 f0       	push   $0xf013b63c
f012e181:	e8 88 2b fd ff       	call   f0100d0e <cprintf>
f012e186:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e189:	83 ec 0c             	sub    $0xc,%esp
f012e18c:	68 6c b6 13 f0       	push   $0xf013b66c
f012e191:	e8 78 2b fd ff       	call   f0100d0e <cprintf>
f012e196:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e199:	83 ec 0c             	sub    $0xc,%esp
f012e19c:	68 3c b6 13 f0       	push   $0xf013b63c
f012e1a1:	e8 68 2b fd ff       	call   f0100d0e <cprintf>
f012e1a6:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e1a9:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e1ad:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e1b1:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e1b7:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e1bd:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e1c4:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e1cb:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e1d1:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e1d6:	b8 00 00 00 00       	mov    $0x0,%eax
f012e1db:	89 d7                	mov    %edx,%edi
f012e1dd:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e1df:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e1e6:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e1ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e1f1:	b8 00 00 00 00       	mov    $0x0,%eax
f012e1f6:	89 d7                	mov    %edx,%edi
f012e1f8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e1fa:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e200:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e205:	b8 00 00 00 00       	mov    $0x0,%eax
f012e20a:	89 d7                	mov    %edx,%edi
f012e20c:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e20e:	e8 9e ed fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e213:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e216:	83 ec 08             	sub    $0x8,%esp
f012e219:	68 00 fc 0f 00       	push   $0xffc00
f012e21e:	6a 00                	push   $0x0
f012e220:	e8 27 9c fd ff       	call   f0107e4c <krealloc>
f012e225:	83 c4 10             	add    $0x10,%esp
f012e228:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e22e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e234:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e239:	77 17                	ja     f012e252 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e23b:	83 ec 04             	sub    $0x4,%esp
f012e23e:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e243:	68 1a 11 00 00       	push   $0x111a
f012e248:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e24d:	e8 b3 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e252:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e258:	89 c1                	mov    %eax,%ecx
f012e25a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e261:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e264:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e269:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e26c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e26f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e274:	f7 75 b4             	divl   -0x4c(%ebp)
f012e277:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e27a:	29 d0                	sub    %edx,%eax
f012e27c:	89 c3                	mov    %eax,%ebx
f012e27e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e285:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e28a:	0f b6 d0             	movzbl %al,%edx
f012e28d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e290:	01 d0                	add    %edx,%eax
f012e292:	48                   	dec    %eax
f012e293:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e296:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e299:	ba 00 00 00 00       	mov    $0x0,%edx
f012e29e:	f7 75 ac             	divl   -0x54(%ebp)
f012e2a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e2a4:	29 d0                	sub    %edx,%eax
f012e2a6:	01 c3                	add    %eax,%ebx
f012e2a8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e2af:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e2b4:	0f b6 c0             	movzbl %al,%eax
f012e2b7:	c1 e0 04             	shl    $0x4,%eax
f012e2ba:	89 c2                	mov    %eax,%edx
f012e2bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e2bf:	01 d0                	add    %edx,%eax
f012e2c1:	48                   	dec    %eax
f012e2c2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e2c5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e2c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2cd:	f7 75 a4             	divl   -0x5c(%ebp)
f012e2d0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e2d3:	29 d0                	sub    %edx,%eax
f012e2d5:	01 d8                	add    %ebx,%eax
f012e2d7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e2dc:	39 c1                	cmp    %eax,%ecx
f012e2de:	74 17                	je     f012e2f7 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e2e0:	83 ec 04             	sub    $0x4,%esp
f012e2e3:	68 dc c9 13 f0       	push   $0xf013c9dc
f012e2e8:	68 1c 11 00 00       	push   $0x111c
f012e2ed:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e2f2:	e8 0e 1f fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e2f7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e2fa:	e8 b2 ec fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e2ff:	29 c3                	sub    %eax,%ebx
f012e301:	89 d8                	mov    %ebx,%eax
f012e303:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e308:	74 17                	je     f012e321 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e30a:	83 ec 04             	sub    $0x4,%esp
f012e30d:	68 0e ca 13 f0       	push   $0xf013ca0e
f012e312:	68 1f 11 00 00       	push   $0x111f
f012e317:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e31c:	e8 e4 1e fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e321:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e328:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e32b:	e8 81 ec fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e330:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e333:	83 ec 08             	sub    $0x8,%esp
f012e336:	68 00 fc 0f 00       	push   $0xffc00
f012e33b:	6a 00                	push   $0x0
f012e33d:	e8 0a 9b fd ff       	call   f0107e4c <krealloc>
f012e342:	83 c4 10             	add    $0x10,%esp
f012e345:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e34b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e351:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e356:	77 17                	ja     f012e36f <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e358:	83 ec 04             	sub    $0x4,%esp
f012e35b:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e360:	68 27 11 00 00       	push   $0x1127
f012e365:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e36a:	e8 96 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e36f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e375:	89 c1                	mov    %eax,%ecx
f012e377:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e37e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e381:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e386:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e389:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e38c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e391:	f7 75 9c             	divl   -0x64(%ebp)
f012e394:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e397:	29 d0                	sub    %edx,%eax
f012e399:	89 c3                	mov    %eax,%ebx
f012e39b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e3a2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e3a7:	0f b6 d0             	movzbl %al,%edx
f012e3aa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e3ad:	01 d0                	add    %edx,%eax
f012e3af:	48                   	dec    %eax
f012e3b0:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e3b3:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e3b6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3bb:	f7 75 94             	divl   -0x6c(%ebp)
f012e3be:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e3c1:	29 d0                	sub    %edx,%eax
f012e3c3:	01 c3                	add    %eax,%ebx
f012e3c5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e3cc:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e3d1:	0f b6 c0             	movzbl %al,%eax
f012e3d4:	c1 e0 04             	shl    $0x4,%eax
f012e3d7:	89 c2                	mov    %eax,%edx
f012e3d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e3dc:	01 d0                	add    %edx,%eax
f012e3de:	48                   	dec    %eax
f012e3df:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e3e2:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e3e5:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3ea:	f7 75 8c             	divl   -0x74(%ebp)
f012e3ed:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e3f0:	29 d0                	sub    %edx,%eax
f012e3f2:	01 d8                	add    %ebx,%eax
f012e3f4:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e3f9:	39 c1                	cmp    %eax,%ecx
f012e3fb:	74 17                	je     f012e414 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e3fd:	83 ec 04             	sub    $0x4,%esp
f012e400:	68 dc c9 13 f0       	push   $0xf013c9dc
f012e405:	68 29 11 00 00       	push   $0x1129
f012e40a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e40f:	e8 f1 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e414:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e417:	e8 95 eb fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e41c:	29 c3                	sub    %eax,%ebx
f012e41e:	89 d8                	mov    %ebx,%eax
f012e420:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e425:	74 17                	je     f012e43e <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e427:	83 ec 04             	sub    $0x4,%esp
f012e42a:	68 0e ca 13 f0       	push   $0xf013ca0e
f012e42f:	68 2b 11 00 00       	push   $0x112b
f012e434:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e439:	e8 c7 1d fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e43e:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e445:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e448:	e8 64 eb fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e44d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e450:	83 ec 08             	sub    $0x8,%esp
f012e453:	68 00 fc 0f 00       	push   $0xffc00
f012e458:	6a 00                	push   $0x0
f012e45a:	e8 ed 99 fd ff       	call   f0107e4c <krealloc>
f012e45f:	83 c4 10             	add    $0x10,%esp
f012e462:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e468:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e46e:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e473:	77 17                	ja     f012e48c <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e475:	83 ec 04             	sub    $0x4,%esp
f012e478:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e47d:	68 33 11 00 00       	push   $0x1133
f012e482:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e487:	e8 79 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e48c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e492:	89 c1                	mov    %eax,%ecx
f012e494:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e49b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e49e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e4a3:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e4a6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e4a9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4ae:	f7 75 84             	divl   -0x7c(%ebp)
f012e4b1:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e4b4:	29 d0                	sub    %edx,%eax
f012e4b6:	89 c3                	mov    %eax,%ebx
f012e4b8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e4bf:	10 00 00 
f012e4c2:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e4c7:	0f b6 d0             	movzbl %al,%edx
f012e4ca:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e4d0:	01 d0                	add    %edx,%eax
f012e4d2:	48                   	dec    %eax
f012e4d3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e4d9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e4df:	ba 00 00 00 00       	mov    $0x0,%edx
f012e4e4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e4ea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e4f0:	29 d0                	sub    %edx,%eax
f012e4f2:	01 c3                	add    %eax,%ebx
f012e4f4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e4fb:	10 00 00 
f012e4fe:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e503:	0f b6 c0             	movzbl %al,%eax
f012e506:	c1 e0 04             	shl    $0x4,%eax
f012e509:	89 c2                	mov    %eax,%edx
f012e50b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e511:	01 d0                	add    %edx,%eax
f012e513:	48                   	dec    %eax
f012e514:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e51a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e520:	ba 00 00 00 00       	mov    $0x0,%edx
f012e525:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e52b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e531:	29 d0                	sub    %edx,%eax
f012e533:	01 d8                	add    %ebx,%eax
f012e535:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e53a:	39 c1                	cmp    %eax,%ecx
f012e53c:	74 17                	je     f012e555 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e53e:	83 ec 04             	sub    $0x4,%esp
f012e541:	68 dc c9 13 f0       	push   $0xf013c9dc
f012e546:	68 35 11 00 00       	push   $0x1135
f012e54b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e550:	e8 b0 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e555:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e558:	e8 54 ea fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e55d:	29 c3                	sub    %eax,%ebx
f012e55f:	89 d8                	mov    %ebx,%eax
f012e561:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e566:	74 17                	je     f012e57f <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e568:	83 ec 04             	sub    $0x4,%esp
f012e56b:	68 0e ca 13 f0       	push   $0xf013ca0e
f012e570:	68 37 11 00 00       	push   $0x1137
f012e575:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e57a:	e8 86 1c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e57f:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e586:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e589:	e8 23 ea fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e58e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e591:	83 ec 08             	sub    $0x8,%esp
f012e594:	68 00 fc 0f 00       	push   $0xffc00
f012e599:	6a 00                	push   $0x0
f012e59b:	e8 ac 98 fd ff       	call   f0107e4c <krealloc>
f012e5a0:	83 c4 10             	add    $0x10,%esp
f012e5a3:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e5a9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e5af:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e5b4:	77 17                	ja     f012e5cd <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e5b6:	83 ec 04             	sub    $0x4,%esp
f012e5b9:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e5be:	68 3e 11 00 00       	push   $0x113e
f012e5c3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e5c8:	e8 38 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e5cd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e5d3:	89 c1                	mov    %eax,%ecx
f012e5d5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e5dc:	10 00 00 
f012e5df:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e5e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e5ea:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e5f0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e5f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5fb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e601:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e607:	29 d0                	sub    %edx,%eax
f012e609:	89 c3                	mov    %eax,%ebx
f012e60b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e612:	10 00 00 
f012e615:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e61a:	0f b6 d0             	movzbl %al,%edx
f012e61d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e623:	01 d0                	add    %edx,%eax
f012e625:	48                   	dec    %eax
f012e626:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e62c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e632:	ba 00 00 00 00       	mov    $0x0,%edx
f012e637:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e63d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e643:	29 d0                	sub    %edx,%eax
f012e645:	01 c3                	add    %eax,%ebx
f012e647:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e64e:	10 00 00 
f012e651:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e656:	0f b6 c0             	movzbl %al,%eax
f012e659:	c1 e0 04             	shl    $0x4,%eax
f012e65c:	89 c2                	mov    %eax,%edx
f012e65e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e664:	01 d0                	add    %edx,%eax
f012e666:	48                   	dec    %eax
f012e667:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e66d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e673:	ba 00 00 00 00       	mov    $0x0,%edx
f012e678:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e67e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e684:	29 d0                	sub    %edx,%eax
f012e686:	01 d8                	add    %ebx,%eax
f012e688:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e68d:	39 c1                	cmp    %eax,%ecx
f012e68f:	74 17                	je     f012e6a8 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e691:	83 ec 04             	sub    $0x4,%esp
f012e694:	68 dc c9 13 f0       	push   $0xf013c9dc
f012e699:	68 40 11 00 00       	push   $0x1140
f012e69e:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e6a3:	e8 5d 1b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e6a8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e6ab:	e8 01 e9 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e6b0:	29 c3                	sub    %eax,%ebx
f012e6b2:	89 d8                	mov    %ebx,%eax
f012e6b4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e6b9:	74 17                	je     f012e6d2 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e6bb:	83 ec 04             	sub    $0x4,%esp
f012e6be:	68 0e ca 13 f0       	push   $0xf013ca0e
f012e6c3:	68 42 11 00 00       	push   $0x1142
f012e6c8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e6cd:	e8 33 1b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e6d2:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e6d9:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e6dc:	e8 d0 e8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e6e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e6e4:	83 ec 08             	sub    $0x8,%esp
f012e6e7:	68 00 fc 1f 00       	push   $0x1ffc00
f012e6ec:	6a 00                	push   $0x0
f012e6ee:	e8 59 97 fd ff       	call   f0107e4c <krealloc>
f012e6f3:	83 c4 10             	add    $0x10,%esp
f012e6f6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e6fc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e702:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e707:	77 17                	ja     f012e720 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e709:	83 ec 04             	sub    $0x4,%esp
f012e70c:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e711:	68 49 11 00 00       	push   $0x1149
f012e716:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e71b:	e8 e5 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e720:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e726:	89 c1                	mov    %eax,%ecx
f012e728:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e72f:	10 00 00 
f012e732:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e738:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e73d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e743:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e749:	ba 00 00 00 00       	mov    $0x0,%edx
f012e74e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e754:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e75a:	29 d0                	sub    %edx,%eax
f012e75c:	89 c3                	mov    %eax,%ebx
f012e75e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e765:	10 00 00 
f012e768:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e76d:	0f b6 d0             	movzbl %al,%edx
f012e770:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e776:	01 d0                	add    %edx,%eax
f012e778:	48                   	dec    %eax
f012e779:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e77f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e785:	ba 00 00 00 00       	mov    $0x0,%edx
f012e78a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e790:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e796:	29 d0                	sub    %edx,%eax
f012e798:	01 c3                	add    %eax,%ebx
f012e79a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e7a1:	10 00 00 
f012e7a4:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e7a9:	0f b6 c0             	movzbl %al,%eax
f012e7ac:	c1 e0 04             	shl    $0x4,%eax
f012e7af:	89 c2                	mov    %eax,%edx
f012e7b1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e7b7:	01 d0                	add    %edx,%eax
f012e7b9:	48                   	dec    %eax
f012e7ba:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e7c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e7c6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7cb:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e7d1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e7d7:	29 d0                	sub    %edx,%eax
f012e7d9:	01 d8                	add    %ebx,%eax
f012e7db:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e7e0:	39 c1                	cmp    %eax,%ecx
f012e7e2:	74 17                	je     f012e7fb <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e7e4:	83 ec 04             	sub    $0x4,%esp
f012e7e7:	68 dc c9 13 f0       	push   $0xf013c9dc
f012e7ec:	68 4b 11 00 00       	push   $0x114b
f012e7f1:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e7f6:	e8 0a 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e7fb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e7fe:	e8 ae e7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e803:	29 c3                	sub    %eax,%ebx
f012e805:	89 d8                	mov    %ebx,%eax
f012e807:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e80c:	74 17                	je     f012e825 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e80e:	83 ec 04             	sub    $0x4,%esp
f012e811:	68 0e ca 13 f0       	push   $0xf013ca0e
f012e816:	68 4d 11 00 00       	push   $0x114d
f012e81b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e820:	e8 e0 19 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e825:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e82c:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e82f:	e8 7d e7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e834:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e837:	83 ec 08             	sub    $0x8,%esp
f012e83a:	68 00 fc 1f 00       	push   $0x1ffc00
f012e83f:	6a 00                	push   $0x0
f012e841:	e8 06 96 fd ff       	call   f0107e4c <krealloc>
f012e846:	83 c4 10             	add    $0x10,%esp
f012e849:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e84f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e855:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e85a:	77 17                	ja     f012e873 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e85c:	83 ec 04             	sub    $0x4,%esp
f012e85f:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e864:	68 54 11 00 00       	push   $0x1154
f012e869:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e86e:	e8 92 19 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e873:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e879:	89 c1                	mov    %eax,%ecx
f012e87b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e882:	10 00 00 
f012e885:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e88b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e890:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e896:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e89c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8a1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e8a7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e8ad:	29 d0                	sub    %edx,%eax
f012e8af:	89 c3                	mov    %eax,%ebx
f012e8b1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e8b8:	10 00 00 
f012e8bb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e8c0:	0f b6 d0             	movzbl %al,%edx
f012e8c3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e8c9:	01 d0                	add    %edx,%eax
f012e8cb:	48                   	dec    %eax
f012e8cc:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e8d2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e8d8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8dd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e8e3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e8e9:	29 d0                	sub    %edx,%eax
f012e8eb:	01 c3                	add    %eax,%ebx
f012e8ed:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e8f4:	10 00 00 
f012e8f7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012e8fc:	0f b6 c0             	movzbl %al,%eax
f012e8ff:	c1 e0 04             	shl    $0x4,%eax
f012e902:	89 c2                	mov    %eax,%edx
f012e904:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e90a:	01 d0                	add    %edx,%eax
f012e90c:	48                   	dec    %eax
f012e90d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e913:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e919:	ba 00 00 00 00       	mov    $0x0,%edx
f012e91e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e924:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e92a:	29 d0                	sub    %edx,%eax
f012e92c:	01 d8                	add    %ebx,%eax
f012e92e:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e933:	39 c1                	cmp    %eax,%ecx
f012e935:	74 17                	je     f012e94e <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e937:	83 ec 04             	sub    $0x4,%esp
f012e93a:	68 dc c9 13 f0       	push   $0xf013c9dc
f012e93f:	68 56 11 00 00       	push   $0x1156
f012e944:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e949:	e8 b7 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e94e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e951:	e8 5b e6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e956:	29 c3                	sub    %eax,%ebx
f012e958:	89 d8                	mov    %ebx,%eax
f012e95a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e95f:	74 17                	je     f012e978 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e961:	83 ec 04             	sub    $0x4,%esp
f012e964:	68 0e ca 13 f0       	push   $0xf013ca0e
f012e969:	68 58 11 00 00       	push   $0x1158
f012e96e:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e973:	e8 8d 18 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e978:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e97f:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e982:	e8 2a e6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012e987:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e98a:	83 ec 08             	sub    $0x8,%esp
f012e98d:	68 00 fc 2f 00       	push   $0x2ffc00
f012e992:	6a 00                	push   $0x0
f012e994:	e8 b3 94 fd ff       	call   f0107e4c <krealloc>
f012e999:	83 c4 10             	add    $0x10,%esp
f012e99c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e9a2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e9a8:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e9ad:	77 17                	ja     f012e9c6 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e9af:	83 ec 04             	sub    $0x4,%esp
f012e9b2:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012e9b7:	68 5f 11 00 00       	push   $0x115f
f012e9bc:	68 fa b6 13 f0       	push   $0xf013b6fa
f012e9c1:	e8 3f 18 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e9c6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e9cc:	89 c1                	mov    %eax,%ecx
f012e9ce:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e9d5:	10 00 00 
f012e9d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e9de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e9e3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e9e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e9ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9f4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e9fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ea00:	29 d0                	sub    %edx,%eax
f012ea02:	89 c3                	mov    %eax,%ebx
f012ea04:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ea0b:	10 00 00 
f012ea0e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ea13:	0f b6 d0             	movzbl %al,%edx
f012ea16:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ea1c:	01 d0                	add    %edx,%eax
f012ea1e:	48                   	dec    %eax
f012ea1f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ea25:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ea2b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea30:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ea36:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ea3c:	29 d0                	sub    %edx,%eax
f012ea3e:	01 c3                	add    %eax,%ebx
f012ea40:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ea47:	10 00 00 
f012ea4a:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012ea4f:	0f b6 c0             	movzbl %al,%eax
f012ea52:	c1 e0 04             	shl    $0x4,%eax
f012ea55:	89 c2                	mov    %eax,%edx
f012ea57:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ea5d:	01 d0                	add    %edx,%eax
f012ea5f:	48                   	dec    %eax
f012ea60:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ea66:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ea6c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea71:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ea77:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ea7d:	29 d0                	sub    %edx,%eax
f012ea7f:	01 d8                	add    %ebx,%eax
f012ea81:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ea86:	39 c1                	cmp    %eax,%ecx
f012ea88:	74 17                	je     f012eaa1 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ea8a:	83 ec 04             	sub    $0x4,%esp
f012ea8d:	68 dc c9 13 f0       	push   $0xf013c9dc
f012ea92:	68 61 11 00 00       	push   $0x1161
f012ea97:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ea9c:	e8 64 17 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012eaa1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eaa4:	e8 08 e5 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012eaa9:	29 c3                	sub    %eax,%ebx
f012eaab:	89 d8                	mov    %ebx,%eax
f012eaad:	3d 00 03 00 00       	cmp    $0x300,%eax
f012eab2:	74 17                	je     f012eacb <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012eab4:	83 ec 04             	sub    $0x4,%esp
f012eab7:	68 44 bb 13 f0       	push   $0xf013bb44
f012eabc:	68 63 11 00 00       	push   $0x1163
f012eac1:	68 fa b6 13 f0       	push   $0xf013b6fa
f012eac6:	e8 3a 17 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012eacb:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012ead2:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ead5:	e8 d7 e4 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012eada:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012eadd:	83 ec 08             	sub    $0x8,%esp
f012eae0:	68 00 fc 2f 00       	push   $0x2ffc00
f012eae5:	6a 00                	push   $0x0
f012eae7:	e8 60 93 fd ff       	call   f0107e4c <krealloc>
f012eaec:	83 c4 10             	add    $0x10,%esp
f012eaef:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012eaf5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eafb:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012eb00:	77 17                	ja     f012eb19 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb02:	83 ec 04             	sub    $0x4,%esp
f012eb05:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012eb0a:	68 6a 11 00 00       	push   $0x116a
f012eb0f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012eb14:	e8 ec 16 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012eb19:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eb1f:	89 c1                	mov    %eax,%ecx
f012eb21:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012eb28:	10 00 00 
f012eb2b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012eb31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012eb36:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012eb3c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012eb42:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb47:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012eb4d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012eb53:	29 d0                	sub    %edx,%eax
f012eb55:	89 c3                	mov    %eax,%ebx
f012eb57:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012eb5e:	10 00 00 
f012eb61:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012eb66:	0f b6 d0             	movzbl %al,%edx
f012eb69:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012eb6f:	01 d0                	add    %edx,%eax
f012eb71:	48                   	dec    %eax
f012eb72:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012eb78:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eb7e:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb83:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012eb89:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eb8f:	29 d0                	sub    %edx,%eax
f012eb91:	01 c3                	add    %eax,%ebx
f012eb93:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012eb9a:	10 00 00 
f012eb9d:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012eba2:	0f b6 c0             	movzbl %al,%eax
f012eba5:	c1 e0 04             	shl    $0x4,%eax
f012eba8:	89 c2                	mov    %eax,%edx
f012ebaa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ebb0:	01 d0                	add    %edx,%eax
f012ebb2:	48                   	dec    %eax
f012ebb3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012ebb9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ebbf:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebc4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ebca:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ebd0:	29 d0                	sub    %edx,%eax
f012ebd2:	01 d8                	add    %ebx,%eax
f012ebd4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ebd9:	39 c1                	cmp    %eax,%ecx
f012ebdb:	74 17                	je     f012ebf4 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ebdd:	83 ec 04             	sub    $0x4,%esp
f012ebe0:	68 dc c9 13 f0       	push   $0xf013c9dc
f012ebe5:	68 6c 11 00 00       	push   $0x116c
f012ebea:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ebef:	e8 11 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ebf4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ebf7:	e8 b5 e3 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012ebfc:	29 c3                	sub    %eax,%ebx
f012ebfe:	89 d8                	mov    %ebx,%eax
f012ec00:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ec05:	74 17                	je     f012ec1e <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ec07:	83 ec 04             	sub    $0x4,%esp
f012ec0a:	68 0e ca 13 f0       	push   $0xf013ca0e
f012ec0f:	68 6e 11 00 00       	push   $0x116e
f012ec14:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ec19:	e8 e7 15 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ec1e:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012ec25:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ec28:	e8 84 e3 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012ec2d:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ec30:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ec37:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ec3a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ec40:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ec46:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ec4c:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ec4f:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ec51:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ec57:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ec5d:	01 c2                	add    %eax,%edx
f012ec5f:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ec62:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ec64:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ec6a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ec70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ec77:	eb 11                	jmp    f012ec8a <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012ec79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ec7c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ec82:	01 d0                	add    %edx,%eax
f012ec84:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ec87:	ff 45 f4             	incl   -0xc(%ebp)
f012ec8a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ec90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ec93:	7d e4                	jge    f012ec79 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012ec95:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ec9b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012eca1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eca7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012ecad:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ecb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ecba:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ecc0:	01 d0                	add    %edx,%eax
f012ecc2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012ecc8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ecce:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ecd4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012ecdb:	eb 1b                	jmp    f012ecf8 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012ecdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ece0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ece7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eced:	01 d0                	add    %edx,%eax
f012ecef:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ecf5:	ff 45 f0             	incl   -0x10(%ebp)
f012ecf8:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ecfe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ed01:	7d da                	jge    f012ecdd <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ed03:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed09:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ed0f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012ed16:	eb 17                	jmp    f012ed2f <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012ed18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ed1b:	01 c0                	add    %eax,%eax
f012ed1d:	89 c2                	mov    %eax,%edx
f012ed1f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ed25:	01 d0                	add    %edx,%eax
f012ed27:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012ed2c:	ff 45 ec             	incl   -0x14(%ebp)
f012ed2f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ed35:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012ed38:	7d de                	jge    f012ed18 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012ed3a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ed40:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012ed46:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ed4c:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012ed51:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012ed57:	01 c0                	add    %eax,%eax
f012ed59:	89 c2                	mov    %eax,%edx
f012ed5b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ed61:	01 d0                	add    %edx,%eax
f012ed63:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ed68:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ed6e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ed74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ed7b:	eb 49                	jmp    f012edc6 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012ed7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ed80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed87:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ed8d:	01 d0                	add    %edx,%eax
f012ed8f:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012ed92:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ed95:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ed9c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eda2:	01 d0                	add    %edx,%eax
f012eda4:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012edaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012edad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012edb4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012edba:	01 d0                	add    %edx,%eax
f012edbc:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012edc3:	ff 45 e8             	incl   -0x18(%ebp)
f012edc6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012edcc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012edcf:	7d ac                	jge    f012ed7d <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012edd1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012edd7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012eddd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ede3:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ede6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012edec:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012edf2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012edf8:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012edff:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ee05:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ee0c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee12:	01 d0                	add    %edx,%eax
f012ee14:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ee17:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ee1d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ee24:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee2a:	01 d0                	add    %edx,%eax
f012ee2c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ee32:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ee38:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ee3f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee45:	01 d0                	add    %edx,%eax
f012ee47:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ee4e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ee54:	8a 00                	mov    (%eax),%al
f012ee56:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ee59:	75 17                	jne    f012ee72 <test_krealloc_BF+0xd04>
f012ee5b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012ee61:	89 c2                	mov    %eax,%edx
f012ee63:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ee69:	01 d0                	add    %edx,%eax
f012ee6b:	8a 00                	mov    (%eax),%al
f012ee6d:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ee70:	74 17                	je     f012ee89 <test_krealloc_BF+0xd1b>
			panic(
f012ee72:	83 ec 04             	sub    $0x4,%esp
f012ee75:	68 2c ca 13 f0       	push   $0xf013ca2c
f012ee7a:	68 b1 11 00 00       	push   $0x11b1
f012ee7f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ee84:	e8 7c 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ee89:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee8f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ee95:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ee9b:	8a 00                	mov    (%eax),%al
f012ee9d:	3c 02                	cmp    $0x2,%al
f012ee9f:	75 16                	jne    f012eeb7 <test_krealloc_BF+0xd49>
f012eea1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012eea7:	89 c2                	mov    %eax,%edx
f012eea9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eeaf:	01 d0                	add    %edx,%eax
f012eeb1:	8a 00                	mov    (%eax),%al
f012eeb3:	3c 02                	cmp    $0x2,%al
f012eeb5:	74 20                	je     f012eed7 <test_krealloc_BF+0xd69>
			panic(
f012eeb7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012eebd:	8a 00                	mov    (%eax),%al
f012eebf:	0f be c0             	movsbl %al,%eax
f012eec2:	50                   	push   %eax
f012eec3:	68 6c ca 13 f0       	push   $0xf013ca6c
f012eec8:	68 b7 11 00 00       	push   $0x11b7
f012eecd:	68 fa b6 13 f0       	push   $0xf013b6fa
f012eed2:	e8 2e 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012eed7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eedd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012eee3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eee9:	8b 00                	mov    (%eax),%eax
f012eeeb:	83 f8 03             	cmp    $0x3,%eax
f012eeee:	75 1c                	jne    f012ef0c <test_krealloc_BF+0xd9e>
f012eef0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012eef6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eefd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ef03:	01 d0                	add    %edx,%eax
f012ef05:	8b 00                	mov    (%eax),%eax
f012ef07:	83 f8 03             	cmp    $0x3,%eax
f012ef0a:	74 17                	je     f012ef23 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ef0c:	83 ec 04             	sub    $0x4,%esp
f012ef0f:	68 b8 ca 13 f0       	push   $0xf013cab8
f012ef14:	68 bb 11 00 00       	push   $0x11bb
f012ef19:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ef1e:	e8 e2 12 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ef23:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ef29:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ef2f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ef35:	8b 00                	mov    (%eax),%eax
f012ef37:	83 f8 04             	cmp    $0x4,%eax
f012ef3a:	75 1c                	jne    f012ef58 <test_krealloc_BF+0xdea>
f012ef3c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ef42:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ef49:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ef4f:	01 d0                	add    %edx,%eax
f012ef51:	8b 00                	mov    (%eax),%eax
f012ef53:	83 f8 04             	cmp    $0x4,%eax
f012ef56:	74 17                	je     f012ef6f <test_krealloc_BF+0xe01>
			panic(
f012ef58:	83 ec 04             	sub    $0x4,%esp
f012ef5b:	68 2c ca 13 f0       	push   $0xf013ca2c
f012ef60:	68 c0 11 00 00       	push   $0x11c0
f012ef65:	68 fa b6 13 f0       	push   $0xf013b6fa
f012ef6a:	e8 96 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ef6f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef75:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ef7b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef81:	66 8b 00             	mov    (%eax),%ax
f012ef84:	66 83 f8 05          	cmp    $0x5,%ax
f012ef88:	75 1b                	jne    f012efa5 <test_krealloc_BF+0xe37>
f012ef8a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ef90:	01 c0                	add    %eax,%eax
f012ef92:	89 c2                	mov    %eax,%edx
f012ef94:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ef9a:	01 d0                	add    %edx,%eax
f012ef9c:	66 8b 00             	mov    (%eax),%ax
f012ef9f:	66 83 f8 05          	cmp    $0x5,%ax
f012efa3:	74 17                	je     f012efbc <test_krealloc_BF+0xe4e>
			panic(
f012efa5:	83 ec 04             	sub    $0x4,%esp
f012efa8:	68 2c ca 13 f0       	push   $0xf013ca2c
f012efad:	68 c5 11 00 00       	push   $0x11c5
f012efb2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012efb7:	e8 49 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012efbc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012efc2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012efc8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012efce:	66 8b 00             	mov    (%eax),%ax
f012efd1:	66 83 f8 06          	cmp    $0x6,%ax
f012efd5:	75 1b                	jne    f012eff2 <test_krealloc_BF+0xe84>
f012efd7:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012efdd:	01 c0                	add    %eax,%eax
f012efdf:	89 c2                	mov    %eax,%edx
f012efe1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012efe7:	01 d0                	add    %edx,%eax
f012efe9:	66 8b 00             	mov    (%eax),%ax
f012efec:	66 83 f8 06          	cmp    $0x6,%ax
f012eff0:	74 17                	je     f012f009 <test_krealloc_BF+0xe9b>
			panic(
f012eff2:	83 ec 04             	sub    $0x4,%esp
f012eff5:	68 2c ca 13 f0       	push   $0xf013ca2c
f012effa:	68 ca 11 00 00       	push   $0x11ca
f012efff:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f004:	e8 fc 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012f009:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f00f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012f015:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f01b:	8a 00                	mov    (%eax),%al
f012f01d:	3c 07                	cmp    $0x7,%al
f012f01f:	75 1b                	jne    f012f03c <test_krealloc_BF+0xece>
f012f021:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f027:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f02e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f034:	01 d0                	add    %edx,%eax
f012f036:	8a 00                	mov    (%eax),%al
f012f038:	3c 07                	cmp    $0x7,%al
f012f03a:	74 17                	je     f012f053 <test_krealloc_BF+0xee5>
			panic(
f012f03c:	83 ec 04             	sub    $0x4,%esp
f012f03f:	68 2c ca 13 f0       	push   $0xf013ca2c
f012f044:	68 cf 11 00 00       	push   $0x11cf
f012f049:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f04e:	e8 b2 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012f053:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f059:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f05d:	66 83 f8 07          	cmp    $0x7,%ax
f012f061:	75 1f                	jne    f012f082 <test_krealloc_BF+0xf14>
f012f063:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f069:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f070:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f076:	01 d0                	add    %edx,%eax
f012f078:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f07c:	66 83 f8 07          	cmp    $0x7,%ax
f012f080:	74 17                	je     f012f099 <test_krealloc_BF+0xf2b>
			panic(
f012f082:	83 ec 04             	sub    $0x4,%esp
f012f085:	68 2c ca 13 f0       	push   $0xf013ca2c
f012f08a:	68 d2 11 00 00       	push   $0x11d2
f012f08f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f094:	e8 6c 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012f099:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f09f:	8b 40 04             	mov    0x4(%eax),%eax
f012f0a2:	83 f8 07             	cmp    $0x7,%eax
f012f0a5:	75 1d                	jne    f012f0c4 <test_krealloc_BF+0xf56>
f012f0a7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f0ad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0ba:	01 d0                	add    %edx,%eax
f012f0bc:	8b 40 04             	mov    0x4(%eax),%eax
f012f0bf:	83 f8 07             	cmp    $0x7,%eax
f012f0c2:	74 17                	je     f012f0db <test_krealloc_BF+0xf6d>
			panic(
f012f0c4:	83 ec 04             	sub    $0x4,%esp
f012f0c7:	68 2c ca 13 f0       	push   $0xf013ca2c
f012f0cc:	68 d5 11 00 00       	push   $0x11d5
f012f0d1:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f0d6:	e8 2a 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f0db:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f0e1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f0e7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0ed:	8a 00                	mov    (%eax),%al
f012f0ef:	3c 08                	cmp    $0x8,%al
f012f0f1:	75 1b                	jne    f012f10e <test_krealloc_BF+0xfa0>
f012f0f3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f0f9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f100:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f106:	01 d0                	add    %edx,%eax
f012f108:	8a 00                	mov    (%eax),%al
f012f10a:	3c 08                	cmp    $0x8,%al
f012f10c:	74 17                	je     f012f125 <test_krealloc_BF+0xfb7>
			panic(
f012f10e:	83 ec 04             	sub    $0x4,%esp
f012f111:	68 2c ca 13 f0       	push   $0xf013ca2c
f012f116:	68 da 11 00 00       	push   $0x11da
f012f11b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f120:	e8 e0 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f125:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f12b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f12f:	66 83 f8 08          	cmp    $0x8,%ax
f012f133:	75 1f                	jne    f012f154 <test_krealloc_BF+0xfe6>
f012f135:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f13b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f142:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f148:	01 d0                	add    %edx,%eax
f012f14a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f14e:	66 83 f8 08          	cmp    $0x8,%ax
f012f152:	74 17                	je     f012f16b <test_krealloc_BF+0xffd>
			panic(
f012f154:	83 ec 04             	sub    $0x4,%esp
f012f157:	68 2c ca 13 f0       	push   $0xf013ca2c
f012f15c:	68 dd 11 00 00       	push   $0x11dd
f012f161:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f166:	e8 9a 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f16b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f171:	8b 40 04             	mov    0x4(%eax),%eax
f012f174:	83 f8 08             	cmp    $0x8,%eax
f012f177:	75 1d                	jne    f012f196 <test_krealloc_BF+0x1028>
f012f179:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f17f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f186:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f18c:	01 d0                	add    %edx,%eax
f012f18e:	8b 40 04             	mov    0x4(%eax),%eax
f012f191:	83 f8 08             	cmp    $0x8,%eax
f012f194:	74 17                	je     f012f1ad <test_krealloc_BF+0x103f>
			panic(
f012f196:	83 ec 04             	sub    $0x4,%esp
f012f199:	68 2c ca 13 f0       	push   $0xf013ca2c
f012f19e:	68 e0 11 00 00       	push   $0x11e0
f012f1a3:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f1a8:	e8 58 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f1ad:	e8 ff dd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f1b2:	89 c2                	mov    %eax,%edx
f012f1b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f1b7:	39 c2                	cmp    %eax,%edx
f012f1b9:	74 17                	je     f012f1d2 <test_krealloc_BF+0x1064>
			panic(
f012f1bb:	83 ec 04             	sub    $0x4,%esp
f012f1be:	68 ec ca 13 f0       	push   $0xf013caec
f012f1c3:	68 e4 11 00 00       	push   $0x11e4
f012f1c8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f1cd:	e8 33 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f1d2:	83 ec 0c             	sub    $0xc,%esp
f012f1d5:	68 38 cb 13 f0       	push   $0xf013cb38
f012f1da:	e8 2f 1b fd ff       	call   f0100d0e <cprintf>
f012f1df:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f1e2:	e8 ca dd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f1e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f1ea:	e8 d9 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f1ef:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f1f5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f1fb:	83 ec 08             	sub    $0x8,%esp
f012f1fe:	6a 00                	push   $0x0
f012f200:	50                   	push   %eax
f012f201:	e8 46 8c fd ff       	call   f0107e4c <krealloc>
f012f206:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f209:	e8 ba 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f20e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f214:	74 17                	je     f012f22d <test_krealloc_BF+0x10bf>
			panic(
f012f216:	83 ec 04             	sub    $0x4,%esp
f012f219:	68 5c cb 13 f0       	push   $0xf013cb5c
f012f21e:	68 f1 11 00 00       	push   $0x11f1
f012f223:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f228:	e8 d8 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f22d:	e8 7f dd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f232:	89 c2                	mov    %eax,%edx
f012f234:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f237:	29 c2                	sub    %eax,%edx
f012f239:	89 d0                	mov    %edx,%eax
f012f23b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f240:	74 17                	je     f012f259 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f242:	83 ec 04             	sub    $0x4,%esp
f012f245:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012f24a:	68 f3 11 00 00       	push   $0x11f3
f012f24f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f254:	e8 ac 0f fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f259:	e8 53 dd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f25e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f261:	e8 62 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f266:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f26c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f272:	83 ec 08             	sub    $0x8,%esp
f012f275:	6a 00                	push   $0x0
f012f277:	50                   	push   %eax
f012f278:	e8 cf 8b fd ff       	call   f0107e4c <krealloc>
f012f27d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f280:	e8 43 4b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f285:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f28b:	74 17                	je     f012f2a4 <test_krealloc_BF+0x1136>
			panic(
f012f28d:	83 ec 04             	sub    $0x4,%esp
f012f290:	68 5c cb 13 f0       	push   $0xf013cb5c
f012f295:	68 fc 11 00 00       	push   $0x11fc
f012f29a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f29f:	e8 61 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f2a4:	e8 08 dd fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f2a9:	89 c2                	mov    %eax,%edx
f012f2ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f2ae:	29 c2                	sub    %eax,%edx
f012f2b0:	89 d0                	mov    %edx,%eax
f012f2b2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f2b7:	74 17                	je     f012f2d0 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f2b9:	83 ec 04             	sub    $0x4,%esp
f012f2bc:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012f2c1:	68 fe 11 00 00       	push   $0x11fe
f012f2c6:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f2cb:	e8 35 0f fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f2d0:	e8 dc dc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f2d5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f2d8:	e8 eb 4a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f2dd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f2e3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f2e9:	83 ec 08             	sub    $0x8,%esp
f012f2ec:	6a 00                	push   $0x0
f012f2ee:	50                   	push   %eax
f012f2ef:	e8 58 8b fd ff       	call   f0107e4c <krealloc>
f012f2f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f2f7:	e8 cc 4a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f2fc:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f302:	74 17                	je     f012f31b <test_krealloc_BF+0x11ad>
			panic(
f012f304:	83 ec 04             	sub    $0x4,%esp
f012f307:	68 14 b7 13 f0       	push   $0xf013b714
f012f30c:	68 06 12 00 00       	push   $0x1206
f012f311:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f316:	e8 ea 0e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f31b:	e8 91 dc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f320:	89 c2                	mov    %eax,%edx
f012f322:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f325:	29 c2                	sub    %eax,%edx
f012f327:	89 d0                	mov    %edx,%eax
f012f329:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f32e:	74 17                	je     f012f347 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f330:	83 ec 04             	sub    $0x4,%esp
f012f333:	68 d0 cb 13 f0       	push   $0xf013cbd0
f012f338:	68 08 12 00 00       	push   $0x1208
f012f33d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f342:	e8 be 0e fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f347:	e8 65 dc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f34c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f34f:	e8 74 4a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f354:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f35a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f360:	83 ec 08             	sub    $0x8,%esp
f012f363:	6a 00                	push   $0x0
f012f365:	50                   	push   %eax
f012f366:	e8 e1 8a fd ff       	call   f0107e4c <krealloc>
f012f36b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f36e:	e8 55 4a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f373:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f379:	74 17                	je     f012f392 <test_krealloc_BF+0x1224>
			panic(
f012f37b:	83 ec 04             	sub    $0x4,%esp
f012f37e:	68 5c cb 13 f0       	push   $0xf013cb5c
f012f383:	68 10 12 00 00       	push   $0x1210
f012f388:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f38d:	e8 73 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f392:	e8 1a dc fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f397:	89 c2                	mov    %eax,%edx
f012f399:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f39c:	29 c2                	sub    %eax,%edx
f012f39e:	89 d0                	mov    %edx,%eax
f012f3a0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f3a5:	74 17                	je     f012f3be <test_krealloc_BF+0x1250>
			panic(
f012f3a7:	83 ec 04             	sub    $0x4,%esp
f012f3aa:	68 04 cc 13 f0       	push   $0xf013cc04
f012f3af:	68 13 12 00 00       	push   $0x1213
f012f3b4:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f3b9:	e8 47 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f3be:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f3c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f3cc:	eb 48                	jmp    f012f416 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f3ce:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f3d1:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f012f3d6:	83 ec 04             	sub    $0x4,%esp
f012f3d9:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f3df:	51                   	push   %ecx
f012f3e0:	52                   	push   %edx
f012f3e1:	50                   	push   %eax
f012f3e2:	e8 ca 76 fd ff       	call   f0106ab1 <get_page_table>
f012f3e7:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f3ea:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f3f0:	85 c0                	test   %eax,%eax
f012f3f2:	75 17                	jne    f012f40b <test_krealloc_BF+0x129d>
					panic(
f012f3f4:	83 ec 04             	sub    $0x4,%esp
f012f3f7:	68 fc bf 13 f0       	push   $0xf013bffc
f012f3fc:	68 1f 12 00 00       	push   $0x121f
f012f401:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f406:	e8 fa 0d fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f40b:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f412:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f416:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f41a:	78 b2                	js     f012f3ce <test_krealloc_BF+0x1260>
f012f41c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f420:	7f 09                	jg     f012f42b <test_krealloc_BF+0x12bd>
f012f422:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f429:	76 a3                	jbe    f012f3ce <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f42b:	83 ec 0c             	sub    $0xc,%esp
f012f42e:	68 43 cc 13 f0       	push   $0xf013cc43
f012f433:	e8 d6 18 fd ff       	call   f0100d0e <cprintf>
f012f438:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f43b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f441:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f447:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f44e:	eb 21                	jmp    f012f471 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f450:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f456:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f459:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f45f:	01 c8                	add    %ecx,%eax
f012f461:	8a 00                	mov    (%eax),%al
f012f463:	0f be c0             	movsbl %al,%eax
f012f466:	01 d0                	add    %edx,%eax
f012f468:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f46e:	ff 45 dc             	incl   -0x24(%ebp)
f012f471:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f477:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f47a:	7d d4                	jge    f012f450 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f47c:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f482:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f488:	42                   	inc    %edx
f012f489:	01 d2                	add    %edx,%edx
f012f48b:	39 d0                	cmp    %edx,%eax
f012f48d:	74 17                	je     f012f4a6 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f48f:	83 ec 04             	sub    $0x4,%esp
f012f492:	68 4c cc 13 f0       	push   $0xf013cc4c
f012f497:	68 31 12 00 00       	push   $0x1231
f012f49c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f4a1:	e8 5f 0d fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f4a6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f4ac:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f4b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f4b9:	eb 25                	jmp    f012f4e0 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f4bb:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f4c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4c4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f4cb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f4d1:	01 c8                	add    %ecx,%eax
f012f4d3:	8b 00                	mov    (%eax),%eax
f012f4d5:	01 d0                	add    %edx,%eax
f012f4d7:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f4dd:	ff 45 dc             	incl   -0x24(%ebp)
f012f4e0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f4e6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f4e9:	7d d0                	jge    f012f4bb <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f4eb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f4f1:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f4f7:	42                   	inc    %edx
f012f4f8:	c1 e2 02             	shl    $0x2,%edx
f012f4fb:	39 d0                	cmp    %edx,%eax
f012f4fd:	74 17                	je     f012f516 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f4ff:	83 ec 04             	sub    $0x4,%esp
f012f502:	68 4c cc 13 f0       	push   $0xf013cc4c
f012f507:	68 3b 12 00 00       	push   $0x123b
f012f50c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f511:	e8 ef 0c fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f516:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f51c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f522:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f529:	eb 24                	jmp    f012f54f <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f52b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f531:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f534:	01 c0                	add    %eax,%eax
f012f536:	89 c1                	mov    %eax,%ecx
f012f538:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f53e:	01 c8                	add    %ecx,%eax
f012f540:	66 8b 00             	mov    (%eax),%ax
f012f543:	98                   	cwtl   
f012f544:	01 d0                	add    %edx,%eax
f012f546:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f54c:	ff 45 dc             	incl   -0x24(%ebp)
f012f54f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f555:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f558:	7d d1                	jge    f012f52b <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f55a:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f560:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f566:	8d 48 01             	lea    0x1(%eax),%ecx
f012f569:	89 c8                	mov    %ecx,%eax
f012f56b:	c1 e0 02             	shl    $0x2,%eax
f012f56e:	01 c8                	add    %ecx,%eax
f012f570:	39 c2                	cmp    %eax,%edx
f012f572:	74 17                	je     f012f58b <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f574:	83 ec 04             	sub    $0x4,%esp
f012f577:	68 4c cc 13 f0       	push   $0xf013cc4c
f012f57c:	68 45 12 00 00       	push   $0x1245
f012f581:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f586:	e8 7a 0c fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f58b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f591:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f597:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f59e:	eb 70                	jmp    f012f610 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f5a0:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f5a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f5a9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f5b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f5b6:	01 c8                	add    %ecx,%eax
f012f5b8:	8a 00                	mov    (%eax),%al
f012f5ba:	0f be c0             	movsbl %al,%eax
f012f5bd:	01 d0                	add    %edx,%eax
f012f5bf:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f5c5:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f5cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f5ce:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f5d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f5db:	01 c8                	add    %ecx,%eax
f012f5dd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f5e1:	98                   	cwtl   
f012f5e2:	01 d0                	add    %edx,%eax
f012f5e4:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f5ea:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f5f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f5f3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f5fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f600:	01 c8                	add    %ecx,%eax
f012f602:	8b 40 04             	mov    0x4(%eax),%eax
f012f605:	01 d0                	add    %edx,%eax
f012f607:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f60d:	ff 45 dc             	incl   -0x24(%ebp)
f012f610:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f616:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f619:	7d 85                	jge    f012f5a0 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f61b:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f621:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f627:	8d 50 01             	lea    0x1(%eax),%edx
f012f62a:	89 d0                	mov    %edx,%eax
f012f62c:	01 c0                	add    %eax,%eax
f012f62e:	01 d0                	add    %edx,%eax
f012f630:	01 c0                	add    %eax,%eax
f012f632:	01 d0                	add    %edx,%eax
f012f634:	39 c1                	cmp    %eax,%ecx
f012f636:	75 3a                	jne    f012f672 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f638:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f63e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f644:	8d 50 01             	lea    0x1(%eax),%edx
f012f647:	89 d0                	mov    %edx,%eax
f012f649:	01 c0                	add    %eax,%eax
f012f64b:	01 d0                	add    %edx,%eax
f012f64d:	01 c0                	add    %eax,%eax
f012f64f:	01 d0                	add    %edx,%eax
f012f651:	39 c1                	cmp    %eax,%ecx
f012f653:	75 1d                	jne    f012f672 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f655:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f65b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f661:	8d 50 01             	lea    0x1(%eax),%edx
f012f664:	89 d0                	mov    %edx,%eax
f012f666:	01 c0                	add    %eax,%eax
f012f668:	01 d0                	add    %edx,%eax
f012f66a:	01 c0                	add    %eax,%eax
f012f66c:	01 d0                	add    %edx,%eax
f012f66e:	39 c1                	cmp    %eax,%ecx
f012f670:	74 17                	je     f012f689 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f672:	83 ec 04             	sub    $0x4,%esp
f012f675:	68 4c cc 13 f0       	push   $0xf013cc4c
f012f67a:	68 53 12 00 00       	push   $0x1253
f012f67f:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f684:	e8 7c 0b fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f689:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f690:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f693:	e8 19 d9 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f698:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f69b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f6a1:	83 ec 08             	sub    $0x8,%esp
f012f6a4:	68 00 3c 00 00       	push   $0x3c00
f012f6a9:	50                   	push   %eax
f012f6aa:	e8 9d 87 fd ff       	call   f0107e4c <krealloc>
f012f6af:	83 c4 10             	add    $0x10,%esp
f012f6b2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f6b8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f6be:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f6c3:	77 17                	ja     f012f6dc <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f6c5:	83 ec 04             	sub    $0x4,%esp
f012f6c8:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012f6cd:	68 5f 12 00 00       	push   $0x125f
f012f6d2:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f6d7:	e8 29 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f6dc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f6e2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f6e8:	74 17                	je     f012f701 <test_krealloc_BF+0x1593>
			panic(
f012f6ea:	83 ec 04             	sub    $0x4,%esp
f012f6ed:	68 84 cc 13 f0       	push   $0xf013cc84
f012f6f2:	68 62 12 00 00       	push   $0x1262
f012f6f7:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f6fc:	e8 04 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f701:	e8 ab d8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f706:	89 c2                	mov    %eax,%edx
f012f708:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f70b:	39 c2                	cmp    %eax,%edx
f012f70d:	74 17                	je     f012f726 <test_krealloc_BF+0x15b8>
			panic(
f012f70f:	83 ec 04             	sub    $0x4,%esp
f012f712:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012f717:	68 65 12 00 00       	push   $0x1265
f012f71c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f721:	e8 df 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f726:	e8 86 d8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f72b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f72e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f734:	83 ec 08             	sub    $0x8,%esp
f012f737:	68 00 fc 0f 00       	push   $0xffc00
f012f73c:	50                   	push   %eax
f012f73d:	e8 0a 87 fd ff       	call   f0107e4c <krealloc>
f012f742:	83 c4 10             	add    $0x10,%esp
f012f745:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f74b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f751:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f756:	77 17                	ja     f012f76f <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f758:	83 ec 04             	sub    $0x4,%esp
f012f75b:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012f760:	68 6b 12 00 00       	push   $0x126b
f012f765:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f76a:	e8 96 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f76f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f775:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f77b:	74 17                	je     f012f794 <test_krealloc_BF+0x1626>
			panic(
f012f77d:	83 ec 04             	sub    $0x4,%esp
f012f780:	68 84 cc 13 f0       	push   $0xf013cc84
f012f785:	68 6e 12 00 00       	push   $0x126e
f012f78a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f78f:	e8 71 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f794:	e8 18 d8 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f799:	89 c2                	mov    %eax,%edx
f012f79b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f79e:	39 c2                	cmp    %eax,%edx
f012f7a0:	74 17                	je     f012f7b9 <test_krealloc_BF+0x164b>
			panic(
f012f7a2:	83 ec 04             	sub    $0x4,%esp
f012f7a5:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012f7aa:	68 71 12 00 00       	push   $0x1271
f012f7af:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f7b4:	e8 4c 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f7b9:	e8 f3 d7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f7be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f7c1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f7c7:	83 ec 08             	sub    $0x8,%esp
f012f7ca:	68 00 fc 0f 00       	push   $0xffc00
f012f7cf:	50                   	push   %eax
f012f7d0:	e8 77 86 fd ff       	call   f0107e4c <krealloc>
f012f7d5:	83 c4 10             	add    $0x10,%esp
f012f7d8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f7de:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f7e4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f7e9:	77 17                	ja     f012f802 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f7eb:	83 ec 04             	sub    $0x4,%esp
f012f7ee:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012f7f3:	68 77 12 00 00       	push   $0x1277
f012f7f8:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f7fd:	e8 03 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f802:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f808:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f80e:	74 17                	je     f012f827 <test_krealloc_BF+0x16b9>
			panic(
f012f810:	83 ec 04             	sub    $0x4,%esp
f012f813:	68 84 cc 13 f0       	push   $0xf013cc84
f012f818:	68 7a 12 00 00       	push   $0x127a
f012f81d:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f822:	e8 de 09 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f827:	e8 85 d7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f82c:	89 c2                	mov    %eax,%edx
f012f82e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f831:	39 c2                	cmp    %eax,%edx
f012f833:	74 17                	je     f012f84c <test_krealloc_BF+0x16de>
			panic(
f012f835:	83 ec 04             	sub    $0x4,%esp
f012f838:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012f83d:	68 7d 12 00 00       	push   $0x127d
f012f842:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f847:	e8 b9 09 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f84c:	e8 60 d7 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f851:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f854:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f85a:	83 ec 08             	sub    $0x8,%esp
f012f85d:	68 00 fc 0f 00       	push   $0xffc00
f012f862:	50                   	push   %eax
f012f863:	e8 e4 85 fd ff       	call   f0107e4c <krealloc>
f012f868:	83 c4 10             	add    $0x10,%esp
f012f86b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f871:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f877:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f87c:	77 17                	ja     f012f895 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f87e:	83 ec 04             	sub    $0x4,%esp
f012f881:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012f886:	68 85 12 00 00       	push   $0x1285
f012f88b:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f890:	e8 70 09 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f895:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f89b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f8a1:	74 17                	je     f012f8ba <test_krealloc_BF+0x174c>
			panic(
f012f8a3:	83 ec 04             	sub    $0x4,%esp
f012f8a6:	68 34 cd 13 f0       	push   $0xf013cd34
f012f8ab:	68 88 12 00 00       	push   $0x1288
f012f8b0:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f8b5:	e8 4b 09 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f8ba:	e8 f2 d6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f8bf:	89 c2                	mov    %eax,%edx
f012f8c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f8c4:	39 c2                	cmp    %eax,%edx
f012f8c6:	74 17                	je     f012f8df <test_krealloc_BF+0x1771>
			panic(
f012f8c8:	83 ec 04             	sub    $0x4,%esp
f012f8cb:	68 f0 cc 13 f0       	push   $0xf013ccf0
f012f8d0:	68 8b 12 00 00       	push   $0x128b
f012f8d5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f8da:	e8 26 09 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f8df:	83 ec 0c             	sub    $0xc,%esp
f012f8e2:	68 13 bf 13 f0       	push   $0xf013bf13
f012f8e7:	e8 22 14 fd ff       	call   f0100d0e <cprintf>
f012f8ec:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f8ef:	e8 bd d6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f8f4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f8f7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f8fd:	83 ec 08             	sub    $0x8,%esp
f012f900:	68 00 18 10 00       	push   $0x101800
f012f905:	50                   	push   %eax
f012f906:	e8 41 85 fd ff       	call   f0107e4c <krealloc>
f012f90b:	83 c4 10             	add    $0x10,%esp
f012f90e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f911:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f914:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f919:	77 17                	ja     f012f932 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f91b:	83 ec 04             	sub    $0x4,%esp
f012f91e:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012f923:	68 93 12 00 00       	push   $0x1293
f012f928:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f92d:	e8 d3 08 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f932:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f938:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f93b:	74 17                	je     f012f954 <test_krealloc_BF+0x17e6>
			panic(
f012f93d:	83 ec 04             	sub    $0x4,%esp
f012f940:	68 94 cd 13 f0       	push   $0xf013cd94
f012f945:	68 96 12 00 00       	push   $0x1296
f012f94a:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f94f:	e8 b1 08 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f954:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f957:	e8 55 d6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f95c:	29 c3                	sub    %eax,%ebx
f012f95e:	89 d8                	mov    %ebx,%eax
f012f960:	83 f8 02             	cmp    $0x2,%eax
f012f963:	74 17                	je     f012f97c <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f965:	83 ec 04             	sub    $0x4,%esp
f012f968:	68 10 ce 13 f0       	push   $0xf013ce10
f012f96d:	68 98 12 00 00       	push   $0x1298
f012f972:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f977:	e8 89 08 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f97c:	e8 30 d6 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f981:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f984:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f98a:	83 ec 08             	sub    $0x8,%esp
f012f98d:	68 00 fc 3f 00       	push   $0x3ffc00
f012f992:	50                   	push   %eax
f012f993:	e8 b4 84 fd ff       	call   f0107e4c <krealloc>
f012f998:	83 c4 10             	add    $0x10,%esp
f012f99b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f99e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f9a1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f9a6:	77 17                	ja     f012f9bf <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f9a8:	83 ec 04             	sub    $0x4,%esp
f012f9ab:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012f9b0:	68 9e 12 00 00       	push   $0x129e
f012f9b5:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f9ba:	e8 46 08 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f9bf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f9c5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f9c8:	74 17                	je     f012f9e1 <test_krealloc_BF+0x1873>
			panic(
f012f9ca:	83 ec 04             	sub    $0x4,%esp
f012f9cd:	68 94 cd 13 f0       	push   $0xf013cd94
f012f9d2:	68 a1 12 00 00       	push   $0x12a1
f012f9d7:	68 fa b6 13 f0       	push   $0xf013b6fa
f012f9dc:	e8 24 08 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f9e1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f9e4:	e8 c8 d5 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012f9e9:	29 c3                	sub    %eax,%ebx
f012f9eb:	89 d8                	mov    %ebx,%eax
f012f9ed:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f9f2:	74 17                	je     f012fa0b <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f9f4:	83 ec 04             	sub    $0x4,%esp
f012f9f7:	68 10 ce 13 f0       	push   $0xf013ce10
f012f9fc:	68 a4 12 00 00       	push   $0x12a4
f012fa01:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fa06:	e8 fa 07 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012fa0b:	83 ec 0c             	sub    $0xc,%esp
f012fa0e:	68 58 bf 13 f0       	push   $0xf013bf58
f012fa13:	e8 f6 12 fd ff       	call   f0100d0e <cprintf>
f012fa18:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fa1b:	e8 91 d5 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012fa20:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012fa23:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa29:	83 ec 08             	sub    $0x8,%esp
f012fa2c:	68 00 fc 9f 00       	push   $0x9ffc00
f012fa31:	50                   	push   %eax
f012fa32:	e8 15 84 fd ff       	call   f0107e4c <krealloc>
f012fa37:	83 c4 10             	add    $0x10,%esp
f012fa3a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fa3d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa40:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa45:	77 17                	ja     f012fa5e <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa47:	83 ec 04             	sub    $0x4,%esp
f012fa4a:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012fa4f:	68 af 12 00 00       	push   $0x12af
f012fa54:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fa59:	e8 a7 07 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012fa5e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012fa65:	10 00 00 
f012fa68:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012fa6e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fa73:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012fa79:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fa7f:	ba 00 00 00 00       	mov    $0x0,%edx
f012fa84:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012fa8a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fa90:	29 d0                	sub    %edx,%eax
f012fa92:	89 c1                	mov    %eax,%ecx
f012fa94:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012fa9b:	10 00 00 
f012fa9e:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012faa3:	0f b6 d0             	movzbl %al,%edx
f012faa6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012faac:	01 d0                	add    %edx,%eax
f012faae:	48                   	dec    %eax
f012faaf:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fab5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fabb:	ba 00 00 00 00       	mov    $0x0,%edx
f012fac0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fac6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012facc:	29 d0                	sub    %edx,%eax
f012face:	01 c1                	add    %eax,%ecx
f012fad0:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fad7:	10 00 00 
f012fada:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fadf:	0f b6 c0             	movzbl %al,%eax
f012fae2:	c1 e0 04             	shl    $0x4,%eax
f012fae5:	89 c2                	mov    %eax,%edx
f012fae7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012faed:	01 d0                	add    %edx,%eax
f012faef:	48                   	dec    %eax
f012faf0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012faf6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fafc:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb01:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fb07:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fb0d:	29 d0                	sub    %edx,%eax
f012fb0f:	01 c8                	add    %ecx,%eax
f012fb11:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fb17:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fb1a:	39 c2                	cmp    %eax,%edx
f012fb1c:	74 18                	je     f012fb36 <test_krealloc_BF+0x19c8>
			panic(
f012fb1e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fb21:	50                   	push   %eax
f012fb22:	68 44 ce 13 f0       	push   $0xf013ce44
f012fb27:	68 b3 12 00 00       	push   $0x12b3
f012fb2c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fb31:	e8 cf 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fb36:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fb3c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fb3f:	75 17                	jne    f012fb58 <test_krealloc_BF+0x19ea>
			panic(
f012fb41:	83 ec 04             	sub    $0x4,%esp
f012fb44:	68 88 ce 13 f0       	push   $0xf013ce88
f012fb49:	68 b6 12 00 00       	push   $0x12b6
f012fb4e:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fb53:	e8 ad 06 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fb58:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fb5b:	e8 51 d4 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012fb60:	29 c3                	sub    %eax,%ebx
f012fb62:	89 d8                	mov    %ebx,%eax
f012fb64:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fb69:	74 17                	je     f012fb82 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fb6b:	83 ec 04             	sub    $0x4,%esp
f012fb6e:	68 10 ce 13 f0       	push   $0xf013ce10
f012fb73:	68 b9 12 00 00       	push   $0x12b9
f012fb78:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fb7d:	e8 83 06 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012fb82:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fb85:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fb8b:	e8 21 d4 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012fb90:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012fb93:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fb99:	83 ec 08             	sub    $0x8,%esp
f012fb9c:	68 00 fc 3f 00       	push   $0x3ffc00
f012fba1:	50                   	push   %eax
f012fba2:	e8 a5 82 fd ff       	call   f0107e4c <krealloc>
f012fba7:	83 c4 10             	add    $0x10,%esp
f012fbaa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fbad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fbb0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fbb5:	77 17                	ja     f012fbce <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fbb7:	83 ec 04             	sub    $0x4,%esp
f012fbba:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012fbbf:	68 c2 12 00 00       	push   $0x12c2
f012fbc4:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fbc9:	e8 37 06 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fbce:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fbd4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fbd7:	75 17                	jne    f012fbf0 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fbd9:	83 ec 04             	sub    $0x4,%esp
f012fbdc:	68 88 ce 13 f0       	push   $0xf013ce88
f012fbe1:	68 c4 12 00 00       	push   $0x12c4
f012fbe6:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fbeb:	e8 15 06 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012fbf0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012fbf7:	10 00 00 
f012fbfa:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012fc00:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fc05:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012fc0b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fc11:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc16:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012fc1c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fc22:	29 d0                	sub    %edx,%eax
f012fc24:	89 c1                	mov    %eax,%ecx
f012fc26:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012fc2d:	10 00 00 
f012fc30:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fc35:	0f b6 d0             	movzbl %al,%edx
f012fc38:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fc3e:	01 d0                	add    %edx,%eax
f012fc40:	48                   	dec    %eax
f012fc41:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012fc47:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fc4d:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc52:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012fc58:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fc5e:	29 d0                	sub    %edx,%eax
f012fc60:	01 c1                	add    %eax,%ecx
f012fc62:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012fc69:	10 00 00 
f012fc6c:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fc71:	0f b6 c0             	movzbl %al,%eax
f012fc74:	c1 e0 04             	shl    $0x4,%eax
f012fc77:	89 c2                	mov    %eax,%edx
f012fc79:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012fc7f:	01 d0                	add    %edx,%eax
f012fc81:	48                   	dec    %eax
f012fc82:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012fc88:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fc8e:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc93:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fc99:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fc9f:	29 d0                	sub    %edx,%eax
f012fca1:	01 c8                	add    %ecx,%eax
f012fca3:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012fca9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fcac:	39 c2                	cmp    %eax,%edx
f012fcae:	74 17                	je     f012fcc7 <test_krealloc_BF+0x1b59>
f012fcb0:	83 ec 04             	sub    $0x4,%esp
f012fcb3:	68 dc c9 13 f0       	push   $0xf013c9dc
f012fcb8:	68 c5 12 00 00       	push   $0x12c5
f012fcbd:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fcc2:	e8 3e 05 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012fcc7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fcca:	e8 e2 d2 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012fccf:	29 c3                	sub    %eax,%ebx
f012fcd1:	89 d8                	mov    %ebx,%eax
f012fcd3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012fcd8:	74 17                	je     f012fcf1 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012fcda:	83 ec 04             	sub    $0x4,%esp
f012fcdd:	68 10 ce 13 f0       	push   $0xf013ce10
f012fce2:	68 c9 12 00 00       	push   $0x12c9
f012fce7:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fcec:	e8 14 05 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012fcf1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fcf4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fcfa:	e8 b2 d2 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012fcff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012fd02:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fd08:	83 ec 08             	sub    $0x8,%esp
f012fd0b:	68 00 fc 3f 01       	push   $0x13ffc00
f012fd10:	50                   	push   %eax
f012fd11:	e8 36 81 fd ff       	call   f0107e4c <krealloc>
f012fd16:	83 c4 10             	add    $0x10,%esp
f012fd19:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fd1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd1f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fd24:	77 17                	ja     f012fd3d <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fd26:	83 ec 04             	sub    $0x4,%esp
f012fd29:	68 a0 c9 13 f0       	push   $0xf013c9a0
f012fd2e:	68 cf 12 00 00       	push   $0x12cf
f012fd33:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fd38:	e8 c8 04 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fd3d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fd43:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fd46:	75 17                	jne    f012fd5f <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fd48:	83 ec 04             	sub    $0x4,%esp
f012fd4b:	68 88 ce 13 f0       	push   $0xf013ce88
f012fd50:	68 d1 12 00 00       	push   $0x12d1
f012fd55:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fd5a:	e8 a6 04 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012fd5f:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012fd66:	10 00 00 
f012fd69:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012fd6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fd74:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012fd7a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fd80:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd85:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012fd8b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fd91:	29 d0                	sub    %edx,%eax
f012fd93:	89 c1                	mov    %eax,%ecx
f012fd95:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012fd9c:	10 00 00 
f012fd9f:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fda4:	0f b6 d0             	movzbl %al,%edx
f012fda7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012fdad:	01 d0                	add    %edx,%eax
f012fdaf:	48                   	dec    %eax
f012fdb0:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012fdb6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fdbc:	ba 00 00 00 00       	mov    $0x0,%edx
f012fdc1:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012fdc7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fdcd:	29 d0                	sub    %edx,%eax
f012fdcf:	01 c1                	add    %eax,%ecx
f012fdd1:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012fdd8:	10 00 00 
f012fddb:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f012fde0:	0f b6 c0             	movzbl %al,%eax
f012fde3:	c1 e0 04             	shl    $0x4,%eax
f012fde6:	89 c2                	mov    %eax,%edx
f012fde8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012fdee:	01 d0                	add    %edx,%eax
f012fdf0:	48                   	dec    %eax
f012fdf1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012fdf7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fdfd:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe02:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012fe08:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fe0e:	29 d0                	sub    %edx,%eax
f012fe10:	01 c8                	add    %ecx,%eax
f012fe12:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012fe18:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe1b:	39 c2                	cmp    %eax,%edx
f012fe1d:	74 17                	je     f012fe36 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012fe1f:	83 ec 04             	sub    $0x4,%esp
f012fe22:	68 a8 cf 13 f0       	push   $0xf013cfa8
f012fe27:	68 d3 12 00 00       	push   $0x12d3
f012fe2c:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fe31:	e8 cf 03 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012fe36:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fe39:	e8 73 d1 fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f012fe3e:	29 c3                	sub    %eax,%ebx
f012fe40:	89 d8                	mov    %ebx,%eax
f012fe42:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012fe47:	74 17                	je     f012fe60 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012fe49:	83 ec 04             	sub    $0x4,%esp
f012fe4c:	68 10 ce 13 f0       	push   $0xf013ce10
f012fe51:	68 d6 12 00 00       	push   $0x12d6
f012fe56:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fe5b:	e8 a5 03 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012fe60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe63:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012fe69:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fe6f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012fe75:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fe7c:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fe7f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fe86:	eb 21                	jmp    f012fea9 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012fe88:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fe8e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012fe91:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012fe97:	01 c8                	add    %ecx,%eax
f012fe99:	8a 00                	mov    (%eax),%al
f012fe9b:	0f be c0             	movsbl %al,%eax
f012fe9e:	01 d0                	add    %edx,%eax
f012fea0:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fea6:	ff 45 d8             	incl   -0x28(%ebp)
f012fea9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012feaf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012feb2:	7d d4                	jge    f012fe88 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012feb4:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012feba:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012fec0:	42                   	inc    %edx
f012fec1:	01 d2                	add    %edx,%edx
f012fec3:	39 d0                	cmp    %edx,%eax
f012fec5:	74 17                	je     f012fede <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fec7:	83 ec 04             	sub    $0x4,%esp
f012feca:	68 40 cf 13 f0       	push   $0xf013cf40
f012fecf:	68 e4 12 00 00       	push   $0x12e4
f012fed4:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fed9:	e8 27 03 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012fede:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fee4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012feea:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fef1:	00 00 00 
		sums[1] = 0;
f012fef4:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fefb:	00 00 00 
		sums[2] = 0;
f012fefe:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012ff05:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ff08:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ff0f:	eb 70                	jmp    f012ff81 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012ff11:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ff17:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff1a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ff21:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ff27:	01 c8                	add    %ecx,%eax
f012ff29:	8a 00                	mov    (%eax),%al
f012ff2b:	0f be c0             	movsbl %al,%eax
f012ff2e:	01 d0                	add    %edx,%eax
f012ff30:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012ff36:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012ff3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff3f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ff46:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ff4c:	01 c8                	add    %ecx,%eax
f012ff4e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ff52:	98                   	cwtl   
f012ff53:	01 d0                	add    %edx,%eax
f012ff55:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012ff5b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ff61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ff64:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ff6b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ff71:	01 c8                	add    %ecx,%eax
f012ff73:	8b 40 04             	mov    0x4(%eax),%eax
f012ff76:	01 d0                	add    %edx,%eax
f012ff78:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ff7e:	ff 45 d8             	incl   -0x28(%ebp)
f012ff81:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ff87:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ff8a:	7d 85                	jge    f012ff11 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012ff8c:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012ff92:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ff98:	8d 50 01             	lea    0x1(%eax),%edx
f012ff9b:	89 d0                	mov    %edx,%eax
f012ff9d:	01 c0                	add    %eax,%eax
f012ff9f:	01 d0                	add    %edx,%eax
f012ffa1:	01 c0                	add    %eax,%eax
f012ffa3:	01 d0                	add    %edx,%eax
f012ffa5:	39 c1                	cmp    %eax,%ecx
f012ffa7:	75 3a                	jne    f012ffe3 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012ffa9:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012ffaf:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ffb5:	8d 50 01             	lea    0x1(%eax),%edx
f012ffb8:	89 d0                	mov    %edx,%eax
f012ffba:	01 c0                	add    %eax,%eax
f012ffbc:	01 d0                	add    %edx,%eax
f012ffbe:	01 c0                	add    %eax,%eax
f012ffc0:	01 d0                	add    %edx,%eax
f012ffc2:	39 c1                	cmp    %eax,%ecx
f012ffc4:	75 1d                	jne    f012ffe3 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012ffc6:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012ffcc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ffd2:	8d 50 01             	lea    0x1(%eax),%edx
f012ffd5:	89 d0                	mov    %edx,%eax
f012ffd7:	01 c0                	add    %eax,%eax
f012ffd9:	01 d0                	add    %edx,%eax
f012ffdb:	01 c0                	add    %eax,%eax
f012ffdd:	01 d0                	add    %edx,%eax
f012ffdf:	39 c1                	cmp    %eax,%ecx
f012ffe1:	74 17                	je     f012fffa <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012ffe3:	83 ec 04             	sub    $0x4,%esp
f012ffe6:	68 40 cf 13 f0       	push   $0xf013cf40
f012ffeb:	68 f6 12 00 00       	push   $0x12f6
f012fff0:	68 fa b6 13 f0       	push   $0xf013b6fa
f012fff5:	e8 0b 02 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fffa:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130000:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f0130006:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f013000d:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130010:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0130017:	eb 24                	jmp    f013003d <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f0130019:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f013001f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130022:	01 c0                	add    %eax,%eax
f0130024:	89 c1                	mov    %eax,%ecx
f0130026:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f013002c:	01 c8                	add    %ecx,%eax
f013002e:	66 8b 00             	mov    (%eax),%ax
f0130031:	98                   	cwtl   
f0130032:	01 d0                	add    %edx,%eax
f0130034:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f013003a:	ff 45 d8             	incl   -0x28(%ebp)
f013003d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0130043:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0130046:	7d d1                	jge    f0130019 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f0130048:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f013004e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0130054:	8d 48 01             	lea    0x1(%eax),%ecx
f0130057:	89 c8                	mov    %ecx,%eax
f0130059:	c1 e0 02             	shl    $0x2,%eax
f013005c:	01 c8                	add    %ecx,%eax
f013005e:	39 c2                	cmp    %eax,%edx
f0130060:	74 17                	je     f0130079 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f0130062:	83 ec 04             	sub    $0x4,%esp
f0130065:	68 40 cf 13 f0       	push   $0xf013cf40
f013006a:	68 00 13 00 00       	push   $0x1300
f013006f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130074:	e8 8c 01 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f0130079:	e8 33 cf fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f013007e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0130081:	e8 42 3d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0130086:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f013008c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0130092:	83 ec 08             	sub    $0x8,%esp
f0130095:	6a 00                	push   $0x0
f0130097:	50                   	push   %eax
f0130098:	e8 af 7d fd ff       	call   f0107e4c <krealloc>
f013009d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01300a0:	e8 23 3d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01300a5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01300ab:	74 17                	je     f01300c4 <test_krealloc_BF+0x1f56>
			panic(
f01300ad:	83 ec 04             	sub    $0x4,%esp
f01300b0:	68 14 b7 13 f0       	push   $0xf013b714
f01300b5:	68 08 13 00 00       	push   $0x1308
f01300ba:	68 fa b6 13 f0       	push   $0xf013b6fa
f01300bf:	e8 41 01 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f01300c4:	e8 e8 ce fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f01300c9:	89 c2                	mov    %eax,%edx
f01300cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01300ce:	29 c2                	sub    %eax,%edx
f01300d0:	89 d0                	mov    %edx,%eax
f01300d2:	3d 00 14 00 00       	cmp    $0x1400,%eax
f01300d7:	74 17                	je     f01300f0 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f01300d9:	83 ec 04             	sub    $0x4,%esp
f01300dc:	68 d0 cb 13 f0       	push   $0xf013cbd0
f01300e1:	68 0a 13 00 00       	push   $0x130a
f01300e6:	68 fa b6 13 f0       	push   $0xf013b6fa
f01300eb:	e8 15 01 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f01300f0:	e8 bc ce fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f01300f5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01300f8:	e8 cb 3c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01300fd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f0130103:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130109:	83 ec 0c             	sub    $0xc,%esp
f013010c:	50                   	push   %eax
f013010d:	e8 45 7b fd ff       	call   f0107c57 <kfree>
f0130112:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0130115:	e8 ae 3c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f013011a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130120:	74 17                	je     f0130139 <test_krealloc_BF+0x1fcb>
			panic(
f0130122:	83 ec 04             	sub    $0x4,%esp
f0130125:	68 14 b7 13 f0       	push   $0xf013b714
f013012a:	68 12 13 00 00       	push   $0x1312
f013012f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130134:	e8 cc 00 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f0130139:	e8 73 ce fd ff       	call   f010cfb1 <sys_calculate_free_frames>
f013013e:	89 c2                	mov    %eax,%edx
f0130140:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130143:	29 c2                	sub    %eax,%edx
f0130145:	89 d0                	mov    %edx,%eax
f0130147:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f013014c:	74 17                	je     f0130165 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f013014e:	83 ec 04             	sub    $0x4,%esp
f0130151:	68 d0 cb 13 f0       	push   $0xf013cbd0
f0130156:	68 14 13 00 00       	push   $0x1314
f013015b:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130160:	e8 a0 00 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f0130165:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f013016c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0130173:	eb 48                	jmp    f01301bd <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f0130175:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0130178:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f013017d:	83 ec 04             	sub    $0x4,%esp
f0130180:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f0130186:	51                   	push   %ecx
f0130187:	52                   	push   %edx
f0130188:	50                   	push   %eax
f0130189:	e8 23 69 fd ff       	call   f0106ab1 <get_page_table>
f013018e:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f0130191:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0130197:	85 c0                	test   %eax,%eax
f0130199:	75 17                	jne    f01301b2 <test_krealloc_BF+0x2044>
					panic(
f013019b:	83 ec 04             	sub    $0x4,%esp
f013019e:	68 fc bf 13 f0       	push   $0xf013bffc
f01301a3:	68 21 13 00 00       	push   $0x1321
f01301a8:	68 fa b6 13 f0       	push   $0xf013b6fa
f01301ad:	e8 53 00 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01301b2:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01301b9:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01301bd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01301c1:	78 b2                	js     f0130175 <test_krealloc_BF+0x2007>
f01301c3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01301c7:	7f 09                	jg     f01301d2 <test_krealloc_BF+0x2064>
f01301c9:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01301d0:	76 a3                	jbe    f0130175 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f01301d2:	83 ec 0c             	sub    $0xc,%esp
f01301d5:	68 de b8 13 f0       	push   $0xf013b8de
f01301da:	e8 2f 0b fd ff       	call   f0100d0e <cprintf>
f01301df:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f01301e2:	83 ec 0c             	sub    $0xc,%esp
f01301e5:	68 e0 cf 13 f0       	push   $0xf013cfe0
f01301ea:	e8 1f 0b fd ff       	call   f0100d0e <cprintf>
f01301ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01301f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01301f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01301fa:	5b                   	pop    %ebx
f01301fb:	5f                   	pop    %edi
f01301fc:	5d                   	pop    %ebp
f01301fd:	c3                   	ret    

f01301fe <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f01301fe:	55                   	push   %ebp
f01301ff:	89 e5                	mov    %esp,%ebp
f0130201:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f0130204:	a1 04 ad 89 f0       	mov    0xf089ad04,%eax
f0130209:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f013020e:	74 17                	je     f0130227 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130210:	83 ec 04             	sub    $0x4,%esp
f0130213:	68 20 d0 13 f0       	push   $0xf013d020
f0130218:	68 39 13 00 00       	push   $0x1339
f013021d:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130222:	e8 de ff fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f0130227:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013022c:	8b 15 04 ad 89 f0    	mov    0xf089ad04,%edx
f0130232:	4a                   	dec    %edx
f0130233:	39 d0                	cmp    %edx,%eax
f0130235:	74 17                	je     f013024e <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f0130237:	83 ec 04             	sub    $0x4,%esp
f013023a:	68 74 d0 13 f0       	push   $0xf013d074
f013023f:	68 3f 13 00 00       	push   $0x133f
f0130244:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130249:	e8 b7 ff fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f013024e:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0130253:	85 c0                	test   %eax,%eax
f0130255:	74 17                	je     f013026e <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f0130257:	83 ec 04             	sub    $0x4,%esp
f013025a:	68 b0 d0 13 f0       	push   $0xf013d0b0
f013025f:	68 45 13 00 00       	push   $0x1345
f0130264:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130269:	e8 97 ff fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f013026e:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0130273:	83 f8 01             	cmp    $0x1,%eax
f0130276:	74 17                	je     f013028f <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f0130278:	83 ec 04             	sub    $0x4,%esp
f013027b:	68 e8 d0 13 f0       	push   $0xf013d0e8
f0130280:	68 4b 13 00 00       	push   $0x134b
f0130285:	68 fa b6 13 f0       	push   $0xf013b6fa
f013028a:	e8 76 ff fc ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f013028f:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0130294:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f0130297:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013029b:	74 66                	je     f0130303 <test_initialize_dyn_block_system+0x105>
f013029d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302a0:	8b 48 0c             	mov    0xc(%eax),%ecx
f01302a3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01302aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01302ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01302b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01302b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01302b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01302bd:	f7 75 ec             	divl   -0x14(%ebp)
f01302c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01302c3:	29 d0                	sub    %edx,%eax
f01302c5:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f01302ca:	29 c2                	sub    %eax,%edx
f01302cc:	89 d0                	mov    %edx,%eax
f01302ce:	39 c1                	cmp    %eax,%ecx
f01302d0:	75 31                	jne    f0130303 <test_initialize_dyn_block_system+0x105>
f01302d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302d5:	8b 48 08             	mov    0x8(%eax),%ecx
f01302d8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01302df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01302e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01302e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01302ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01302ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01302f2:	f7 75 e4             	divl   -0x1c(%ebp)
f01302f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01302f8:	29 d0                	sub    %edx,%eax
f01302fa:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01302ff:	39 c1                	cmp    %eax,%ecx
f0130301:	74 17                	je     f013031a <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f0130303:	83 ec 04             	sub    $0x4,%esp
f0130306:	68 20 d1 13 f0       	push   $0xf013d120
f013030b:	68 52 13 00 00       	push   $0x1352
f0130310:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130315:	e8 eb fe fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f013031a:	8b 45 14             	mov    0x14(%ebp),%eax
f013031d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130320:	74 17                	je     f0130339 <test_initialize_dyn_block_system+0x13b>
f0130322:	83 ec 04             	sub    $0x4,%esp
f0130325:	68 14 b7 13 f0       	push   $0xf013b714
f013032a:	68 56 13 00 00       	push   $0x1356
f013032f:	68 fa b6 13 f0       	push   $0xf013b6fa
f0130334:	e8 cc fe fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f0130339:	8b 45 08             	mov    0x8(%ebp),%eax
f013033c:	2b 45 10             	sub    0x10(%ebp),%eax
f013033f:	3d a0 00 00 00       	cmp    $0xa0,%eax
f0130344:	74 1b                	je     f0130361 <test_initialize_dyn_block_system+0x163>
f0130346:	8b 45 08             	mov    0x8(%ebp),%eax
f0130349:	2b 45 10             	sub    0x10(%ebp),%eax
f013034c:	50                   	push   %eax
f013034d:	68 5c d1 13 f0       	push   $0xf013d15c
f0130352:	68 57 13 00 00       	push   $0x1357
f0130357:	68 fa b6 13 f0       	push   $0xf013b6fa
f013035c:	e8 a4 fe fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f0130361:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f0130368:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f013036d:	83 ec 04             	sub    $0x4,%esp
f0130370:	6a 00                	push   $0x0
f0130372:	ff 75 f4             	pushl  -0xc(%ebp)
f0130375:	50                   	push   %eax
f0130376:	e8 e9 5f fe ff       	call   f0116364 <CB>
f013037b:	83 c4 10             	add    $0x10,%esp
f013037e:	83 f8 01             	cmp    $0x1,%eax
f0130381:	75 35                	jne    f01303b8 <test_initialize_dyn_block_system+0x1ba>
f0130383:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130388:	83 ec 04             	sub    $0x4,%esp
f013038b:	6a 01                	push   $0x1
f013038d:	ff 75 f4             	pushl  -0xc(%ebp)
f0130390:	50                   	push   %eax
f0130391:	e8 ce 5f fe ff       	call   f0116364 <CB>
f0130396:	83 c4 10             	add    $0x10,%esp
f0130399:	83 f8 01             	cmp    $0x1,%eax
f013039c:	75 1a                	jne    f01303b8 <test_initialize_dyn_block_system+0x1ba>
f013039e:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f01303a3:	83 ec 04             	sub    $0x4,%esp
f01303a6:	6a 02                	push   $0x2
f01303a8:	ff 75 f4             	pushl  -0xc(%ebp)
f01303ab:	50                   	push   %eax
f01303ac:	e8 b3 5f fe ff       	call   f0116364 <CB>
f01303b1:	83 c4 10             	add    $0x10,%esp
f01303b4:	85 c0                	test   %eax,%eax
f01303b6:	74 17                	je     f01303cf <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f01303b8:	83 ec 04             	sub    $0x4,%esp
f01303bb:	68 a0 d1 13 f0       	push   $0xf013d1a0
f01303c0:	68 5f 13 00 00       	push   $0x135f
f01303c5:	68 fa b6 13 f0       	push   $0xf013b6fa
f01303ca:	e8 36 fe fc ff       	call   f0100205 <_panic>

			a+=4096;
f01303cf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f01303d6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01303dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01303e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01303e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01303e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01303eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01303f0:	f7 75 dc             	divl   -0x24(%ebp)
f01303f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01303f6:	29 d0                	sub    %edx,%eax
f01303f8:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01303fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130400:	74 05                	je     f0130407 <test_initialize_dyn_block_system+0x209>
				break;
		}
f0130402:	e9 61 ff ff ff       	jmp    f0130368 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f0130407:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f0130408:	83 ec 0c             	sub    $0xc,%esp
f013040b:	68 00 d2 13 f0       	push   $0xf013d200
f0130410:	e8 f9 08 fd ff       	call   f0100d0e <cprintf>
f0130415:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130418:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013041d:	c9                   	leave  
f013041e:	c3                   	ret    

f013041f <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f013041f:	55                   	push   %ebp
f0130420:	89 e5                	mov    %esp,%ebp
f0130422:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130425:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130429:	77 07                	ja     f0130432 <nearest_pow2_ceil+0x13>
f013042b:	b8 01 00 00 00       	mov    $0x1,%eax
f0130430:	eb 20                	jmp    f0130452 <nearest_pow2_ceil+0x33>
    int power = 2;
f0130432:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130439:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f013043c:	eb 08                	jmp    f0130446 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f013043e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130441:	01 c0                	add    %eax,%eax
f0130443:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f0130446:	d1 6d 08             	shrl   0x8(%ebp)
f0130449:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013044d:	75 ef                	jne    f013043e <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f013044f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130452:	c9                   	leave  
f0130453:	c3                   	ret    

f0130454 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0130454:	55                   	push   %ebp
f0130455:	89 e5                	mov    %esp,%ebp
f0130457:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013045a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013045e:	77 07                	ja     f0130467 <log2_ceil+0x13>
f0130460:	b8 01 00 00 00       	mov    $0x1,%eax
f0130465:	eb 1b                	jmp    f0130482 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f0130467:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013046e:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130471:	eb 03                	jmp    f0130476 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f0130473:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f0130476:	d1 6d 08             	shrl   0x8(%ebp)
f0130479:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013047d:	75 f4                	jne    f0130473 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f013047f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130482:	c9                   	leave  
f0130483:	c3                   	ret    

f0130484 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0130484:	55                   	push   %ebp
f0130485:	89 e5                	mov    %esp,%ebp
f0130487:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f013048a:	8b 45 08             	mov    0x8(%ebp),%eax
f013048d:	8b 00                	mov    (%eax),%eax
f013048f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0130492:	8b 45 08             	mov    0x8(%ebp),%eax
f0130495:	8b 00                	mov    (%eax),%eax
f0130497:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f013049a:	eb 52                	jmp    f01304ee <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f013049c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013049f:	8b 00                	mov    (%eax),%eax
f01304a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01304a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01304aa:	75 12                	jne    f01304be <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01304ac:	83 ec 0c             	sub    $0xc,%esp
f01304af:	68 58 d2 13 f0       	push   $0xf013d258
f01304b4:	e8 55 08 fd ff       	call   f0100d0e <cprintf>
f01304b9:	83 c4 10             	add    $0x10,%esp
			break;
f01304bc:	eb 3f                	jmp    f01304fd <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f01304be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01304c2:	74 38                	je     f01304fc <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01304c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304c7:	8b 00                	mov    (%eax),%eax
f01304c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f01304cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01304cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01304d2:	75 12                	jne    f01304e6 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01304d4:	83 ec 0c             	sub    $0xc,%esp
f01304d7:	68 74 d2 13 f0       	push   $0xf013d274
f01304dc:	e8 2d 08 fd ff       	call   f0100d0e <cprintf>
f01304e1:	83 c4 10             	add    $0x10,%esp
			break;
f01304e4:	eb 17                	jmp    f01304fd <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01304e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304e9:	8b 00                	mov    (%eax),%eax
f01304eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01304ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01304f2:	74 09                	je     f01304fd <detect_loop_in_FrameInfo_list+0x79>
f01304f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01304f8:	75 a2                	jne    f013049c <detect_loop_in_FrameInfo_list+0x18>
f01304fa:	eb 01                	jmp    f01304fd <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01304fc:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01304fd:	83 ec 0c             	sub    $0xc,%esp
f0130500:	68 8b d2 13 f0       	push   $0xf013d28b
f0130505:	e8 04 08 fd ff       	call   f0100d0e <cprintf>
f013050a:	83 c4 10             	add    $0x10,%esp
}
f013050d:	90                   	nop
f013050e:	c9                   	leave  
f013050f:	c3                   	ret    

f0130510 <scarce_memory>:

void scarce_memory()
{
f0130510:	55                   	push   %ebp
f0130511:	89 e5                	mov    %esp,%ebp
f0130513:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f0130516:	a1 f0 ac 89 f0       	mov    0xf089acf0,%eax
f013051b:	ba 64 00 00 00       	mov    $0x64,%edx
f0130520:	29 c2                	sub    %eax,%edx
f0130522:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0130527:	0f af c2             	imul   %edx,%eax
f013052a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013052f:	f7 e2                	mul    %edx
f0130531:	89 d0                	mov    %edx,%eax
f0130533:	c1 e8 05             	shr    $0x5,%eax
f0130536:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0130539:	a1 f0 ac 89 f0       	mov    0xf089acf0,%eax
f013053e:	ba 64 00 00 00       	mov    $0x64,%edx
f0130543:	29 c2                	sub    %eax,%edx
f0130545:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f013054a:	89 d1                	mov    %edx,%ecx
f013054c:	0f af c8             	imul   %eax,%ecx
f013054f:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130554:	f7 e1                	mul    %ecx
f0130556:	c1 ea 05             	shr    $0x5,%edx
f0130559:	89 d0                	mov    %edx,%eax
f013055b:	c1 e0 02             	shl    $0x2,%eax
f013055e:	01 d0                	add    %edx,%eax
f0130560:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130567:	01 d0                	add    %edx,%eax
f0130569:	c1 e0 02             	shl    $0x2,%eax
f013056c:	29 c1                	sub    %eax,%ecx
f013056e:	89 ca                	mov    %ecx,%edx
f0130570:	85 d2                	test   %edx,%edx
f0130572:	74 03                	je     f0130577 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0130574:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f0130577:	8b 15 10 ad 89 f0    	mov    0xf089ad10,%edx
f013057d:	a1 24 ad 89 f0       	mov    0xf089ad24,%eax
f0130582:	29 c2                	sub    %eax,%edx
f0130584:	89 d0                	mov    %edx,%eax
f0130586:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0130589:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013058c:	2b 45 ec             	sub    -0x14(%ebp),%eax
f013058f:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f0130592:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130599:	eb 12                	jmp    f01305ad <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f013059b:	83 ec 0c             	sub    $0xc,%esp
f013059e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01305a1:	50                   	push   %eax
f01305a2:	e8 4b 63 fd ff       	call   f01068f2 <allocate_frame>
f01305a7:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01305aa:	ff 45 f0             	incl   -0x10(%ebp)
f01305ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305b0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01305b3:	76 e6                	jbe    f013059b <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01305b5:	90                   	nop
f01305b6:	c9                   	leave  
f01305b7:	c3                   	ret    

f01305b8 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01305b8:	55                   	push   %ebp
f01305b9:	89 e5                	mov    %esp,%ebp
f01305bb:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01305be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01305c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01305cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01305d3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01305d7:	0f 85 d0 01 00 00    	jne    f01307ad <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01305dd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01305e4:	e9 de 00 00 00       	jmp    f01306c7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f01305e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01305f0:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f01305f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01305f8:	c1 e2 04             	shl    $0x4,%edx
f01305fb:	01 d0                	add    %edx,%eax
f01305fd:	8b 00                	mov    (%eax),%eax
f01305ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130602:	e9 85 00 00 00       	jmp    f013068c <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f0130607:	83 ec 0c             	sub    $0xc,%esp
f013060a:	ff 75 e4             	pushl  -0x1c(%ebp)
f013060d:	e8 0b 7b fd ff       	call   f010811d <env_page_ws_get_size>
f0130612:	83 c4 10             	add    $0x10,%esp
f0130615:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130618:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f013061d:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130623:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130626:	0f af c2             	imul   %edx,%eax
f0130629:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013062e:	f7 e2                	mul    %edx
f0130630:	89 d0                	mov    %edx,%eax
f0130632:	c1 e8 05             	shr    $0x5,%eax
f0130635:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130638:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f013063d:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130643:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130646:	89 d1                	mov    %edx,%ecx
f0130648:	0f af c8             	imul   %eax,%ecx
f013064b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130650:	f7 e1                	mul    %ecx
f0130652:	c1 ea 05             	shr    $0x5,%edx
f0130655:	89 d0                	mov    %edx,%eax
f0130657:	c1 e0 02             	shl    $0x2,%eax
f013065a:	01 d0                	add    %edx,%eax
f013065c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130663:	01 d0                	add    %edx,%eax
f0130665:	c1 e0 02             	shl    $0x2,%eax
f0130668:	29 c1                	sub    %eax,%ecx
f013066a:	89 ca                	mov    %ecx,%edx
f013066c:	85 d2                	test   %edx,%edx
f013066e:	74 03                	je     f0130673 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f0130670:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0130673:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130676:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130679:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f013067e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130681:	c1 e2 04             	shl    $0x4,%edx
f0130684:	01 d0                	add    %edx,%eax
f0130686:	8b 40 08             	mov    0x8(%eax),%eax
f0130689:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013068c:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130691:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130694:	c1 e2 04             	shl    $0x4,%edx
f0130697:	01 d0                	add    %edx,%eax
f0130699:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013069d:	74 08                	je     f01306a7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f013069f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01306a2:	8b 52 44             	mov    0x44(%edx),%edx
f01306a5:	eb 05                	jmp    f01306ac <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01306a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01306ac:	89 50 08             	mov    %edx,0x8(%eax)
f01306af:	8b 40 08             	mov    0x8(%eax),%eax
f01306b2:	85 c0                	test   %eax,%eax
f01306b4:	0f 85 4d ff ff ff    	jne    f0130607 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01306ba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01306be:	0f 85 43 ff ff ff    	jne    f0130607 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01306c4:	ff 45 e8             	incl   -0x18(%ebp)
f01306c7:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f01306cc:	0f b6 c0             	movzbl %al,%eax
f01306cf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01306d2:	0f 8f 11 ff ff ff    	jg     f01305e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f01306d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01306df:	a1 f4 ac 89 f0       	mov    0xf089acf4,%eax
f01306e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01306e7:	eb 19                	jmp    f0130702 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f01306e9:	83 ec 0c             	sub    $0xc,%esp
f01306ec:	ff 75 dc             	pushl  -0x24(%ebp)
f01306ef:	e8 29 7a fd ff       	call   f010811d <env_page_ws_get_size>
f01306f4:	83 c4 10             	add    $0x10,%esp
f01306f7:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01306fa:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f01306ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130702:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130706:	74 08                	je     f0130710 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130708:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013070b:	8b 40 44             	mov    0x44(%eax),%eax
f013070e:	eb 05                	jmp    f0130715 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130710:	b8 00 00 00 00       	mov    $0x0,%eax
f0130715:	a3 fc ac 89 f0       	mov    %eax,0xf089acfc
f013071a:	a1 fc ac 89 f0       	mov    0xf089acfc,%eax
f013071f:	85 c0                	test   %eax,%eax
f0130721:	75 c6                	jne    f01306e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130723:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130727:	75 c0                	jne    f01306e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130729:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f013072e:	85 c0                	test   %eax,%eax
f0130730:	0f 84 ec 00 00 00    	je     f0130822 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130736:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f013073b:	83 ec 0c             	sub    $0xc,%esp
f013073e:	50                   	push   %eax
f013073f:	e8 d9 79 fd ff       	call   f010811d <env_page_ws_get_size>
f0130744:	83 c4 10             	add    $0x10,%esp
f0130747:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013074a:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f013074f:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130755:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130758:	0f af c2             	imul   %edx,%eax
f013075b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130760:	f7 e2                	mul    %edx
f0130762:	89 d0                	mov    %edx,%eax
f0130764:	c1 e8 05             	shr    $0x5,%eax
f0130767:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013076a:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f013076f:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130775:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130778:	89 d1                	mov    %edx,%ecx
f013077a:	0f af c8             	imul   %eax,%ecx
f013077d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130782:	f7 e1                	mul    %ecx
f0130784:	c1 ea 05             	shr    $0x5,%edx
f0130787:	89 d0                	mov    %edx,%eax
f0130789:	c1 e0 02             	shl    $0x2,%eax
f013078c:	01 d0                	add    %edx,%eax
f013078e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130795:	01 d0                	add    %edx,%eax
f0130797:	c1 e0 02             	shl    $0x2,%eax
f013079a:	29 c1                	sub    %eax,%ecx
f013079c:	89 ca                	mov    %ecx,%edx
f013079e:	85 d2                	test   %edx,%edx
f01307a0:	74 03                	je     f01307a5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f01307a2:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01307a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01307a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01307ab:	eb 75                	jmp    f0130822 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01307ad:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01307b2:	83 ec 0c             	sub    $0xc,%esp
f01307b5:	50                   	push   %eax
f01307b6:	e8 62 79 fd ff       	call   f010811d <env_page_ws_get_size>
f01307bb:	83 c4 10             	add    $0x10,%esp
f01307be:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01307c1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01307c6:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01307cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01307cf:	0f af c2             	imul   %edx,%eax
f01307d2:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01307d7:	f7 e2                	mul    %edx
f01307d9:	89 d0                	mov    %edx,%eax
f01307db:	c1 e8 05             	shr    $0x5,%eax
f01307de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01307e1:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01307e6:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01307ec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01307ef:	89 d1                	mov    %edx,%ecx
f01307f1:	0f af c8             	imul   %eax,%ecx
f01307f4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01307f9:	f7 e1                	mul    %ecx
f01307fb:	c1 ea 05             	shr    $0x5,%edx
f01307fe:	89 d0                	mov    %edx,%eax
f0130800:	c1 e0 02             	shl    $0x2,%eax
f0130803:	01 d0                	add    %edx,%eax
f0130805:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013080c:	01 d0                	add    %edx,%eax
f013080e:	c1 e0 02             	shl    $0x2,%eax
f0130811:	29 c1                	sub    %eax,%ecx
f0130813:	89 ca                	mov    %ecx,%edx
f0130815:	85 d2                	test   %edx,%edx
f0130817:	74 03                	je     f013081c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130819:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f013081c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f013081f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130822:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130825:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130828:	01 c2                	add    %eax,%edx
f013082a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013082d:	01 d0                	add    %edx,%eax
}
f013082f:	c9                   	leave  
f0130830:	c3                   	ret    

f0130831 <schenv>:


void schenv()
{
f0130831:	55                   	push   %ebp
f0130832:	89 e5                	mov    %esp,%ebp
f0130834:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130837:	c6 05 a8 ad 89 f0 00 	movb   $0x0,0xf089ada8
	__ne = NULL;
f013083e:	c7 05 38 ad 89 f0 00 	movl   $0x0,0xf089ad38
f0130845:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130848:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013084f:	eb 3f                	jmp    f0130890 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130851:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130856:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130859:	c1 e2 04             	shl    $0x4,%edx
f013085c:	01 d0                	add    %edx,%eax
f013085e:	83 ec 0c             	sub    $0xc,%esp
f0130861:	50                   	push   %eax
f0130862:	e8 1e 3c fd ff       	call   f0104485 <queue_size>
f0130867:	83 c4 10             	add    $0x10,%esp
f013086a:	85 c0                	test   %eax,%eax
f013086c:	74 1f                	je     f013088d <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f013086e:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130873:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130876:	c1 e2 04             	shl    $0x4,%edx
f0130879:	01 d0                	add    %edx,%eax
f013087b:	8b 40 04             	mov    0x4(%eax),%eax
f013087e:	a3 38 ad 89 f0       	mov    %eax,0xf089ad38
			__nl = i;
f0130883:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130886:	a2 a8 ad 89 f0       	mov    %al,0xf089ada8
			break;
f013088b:	eb 10                	jmp    f013089d <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f013088d:	ff 45 f4             	incl   -0xc(%ebp)
f0130890:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130895:	0f b6 c0             	movzbl %al,%eax
f0130898:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013089b:	7f b4                	jg     f0130851 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f013089d:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01308a2:	85 c0                	test   %eax,%eax
f01308a4:	0f 84 86 00 00 00    	je     f0130930 <schenv+0xff>
	{
		if (__ne != NULL)
f01308aa:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f01308af:	85 c0                	test   %eax,%eax
f01308b1:	74 4b                	je     f01308fe <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f01308b3:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f01308b8:	0f b6 c0             	movzbl %al,%eax
f01308bb:	8d 50 01             	lea    0x1(%eax),%edx
f01308be:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f01308c3:	0f b6 c0             	movzbl %al,%eax
f01308c6:	39 c2                	cmp    %eax,%edx
f01308c8:	7d 66                	jge    f0130930 <schenv+0xff>
			{
				__ne = curenv;
f01308ca:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f01308cf:	a3 38 ad 89 f0       	mov    %eax,0xf089ad38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01308d4:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f01308d9:	0f b6 c0             	movzbl %al,%eax
f01308dc:	8a 15 80 ad 89 f0    	mov    0xf089ad80,%dl
f01308e2:	0f b6 d2             	movzbl %dl,%edx
f01308e5:	4a                   	dec    %edx
f01308e6:	39 d0                	cmp    %edx,%eax
f01308e8:	7d 08                	jge    f01308f2 <schenv+0xc1>
f01308ea:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f01308ef:	40                   	inc    %eax
f01308f0:	eb 05                	jmp    f01308f7 <schenv+0xc6>
f01308f2:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f01308f7:	a2 a8 ad 89 f0       	mov    %al,0xf089ada8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01308fc:	eb 32                	jmp    f0130930 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f01308fe:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130903:	a3 38 ad 89 f0       	mov    %eax,0xf089ad38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130908:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f013090d:	0f b6 c0             	movzbl %al,%eax
f0130910:	8a 15 80 ad 89 f0    	mov    0xf089ad80,%dl
f0130916:	0f b6 d2             	movzbl %dl,%edx
f0130919:	4a                   	dec    %edx
f013091a:	39 d0                	cmp    %edx,%eax
f013091c:	7d 08                	jge    f0130926 <schenv+0xf5>
f013091e:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130923:	40                   	inc    %eax
f0130924:	eb 05                	jmp    f013092b <schenv+0xfa>
f0130926:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f013092b:	a2 a8 ad 89 f0       	mov    %al,0xf089ada8
		}
	}
}
f0130930:	90                   	nop
f0130931:	c9                   	leave  
f0130932:	c3                   	ret    

f0130933 <chksch>:

void chksch(uint8 onoff)
{
f0130933:	55                   	push   %ebp
f0130934:	89 e5                	mov    %esp,%ebp
f0130936:	83 ec 04             	sub    $0x4,%esp
f0130939:	8b 45 08             	mov    0x8(%ebp),%eax
f013093c:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f013093f:	c7 05 94 ad 89 f0 00 	movl   $0x0,0xf089ad94
f0130946:	00 00 00 
	__ne = NULL;
f0130949:	c7 05 38 ad 89 f0 00 	movl   $0x0,0xf089ad38
f0130950:	00 00 00 
	__pl = 0 ;
f0130953:	c6 05 e0 ac 89 f0 00 	movb   $0x0,0xf089ace0
	__nl = 0 ;
f013095a:	c6 05 a8 ad 89 f0 00 	movb   $0x0,0xf089ada8
	__chkstatus = onoff;
f0130961:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130964:	a2 34 ad 89 f0       	mov    %al,0xf089ad34
}
f0130969:	90                   	nop
f013096a:	c9                   	leave  
f013096b:	c3                   	ret    

f013096c <chk1>:
void chk1()
{
f013096c:	55                   	push   %ebp
f013096d:	89 e5                	mov    %esp,%ebp
f013096f:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130972:	a0 34 ad 89 f0       	mov    0xf089ad34,%al
f0130977:	84 c0                	test   %al,%al
f0130979:	74 2b                	je     f01309a6 <chk1+0x3a>
		return ;
	__pe = curenv;
f013097b:	a1 f4 a3 89 f0       	mov    0xf089a3f4,%eax
f0130980:	a3 94 ad 89 f0       	mov    %eax,0xf089ad94
	__pl = __nl ;
f0130985:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f013098a:	a2 e0 ac 89 f0       	mov    %al,0xf089ace0
	if (__pe == NULL)
f013098f:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130994:	85 c0                	test   %eax,%eax
f0130996:	75 07                	jne    f013099f <chk1+0x33>
	{
		__pl = 0;
f0130998:	c6 05 e0 ac 89 f0 00 	movb   $0x0,0xf089ace0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f013099f:	e8 8d fe ff ff       	call   f0130831 <schenv>
f01309a4:	eb 01                	jmp    f01309a7 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f01309a6:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f01309a7:	c9                   	leave  
f01309a8:	c3                   	ret    

f01309a9 <chk2>:
void chk2(struct Env* __se)
{
f01309a9:	55                   	push   %ebp
f01309aa:	89 e5                	mov    %esp,%ebp
f01309ac:	53                   	push   %ebx
f01309ad:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f01309b0:	a0 34 ad 89 f0       	mov    0xf089ad34,%al
f01309b5:	84 c0                	test   %al,%al
f01309b7:	0f 84 43 02 00 00    	je     f0130c00 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f01309bd:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f01309c2:	39 45 08             	cmp    %eax,0x8(%ebp)
f01309c5:	74 19                	je     f01309e0 <chk2+0x37>
f01309c7:	68 a5 d2 13 f0       	push   $0xf013d2a5
f01309cc:	68 b2 d2 13 f0       	push   $0xf013d2b2
f01309d1:	68 c0 00 00 00       	push   $0xc0
f01309d6:	68 c7 d2 13 f0       	push   $0xf013d2c7
f01309db:	e8 db f8 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01309e0:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f01309e5:	85 c0                	test   %eax,%eax
f01309e7:	0f 84 25 01 00 00    	je     f0130b12 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01309ed:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f01309f3:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f01309f8:	0f b6 c0             	movzbl %al,%eax
f01309fb:	01 d0                	add    %edx,%eax
f01309fd:	8a 00                	mov    (%eax),%al
f01309ff:	0f b6 d8             	movzbl %al,%ebx
f0130a02:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130a07:	99                   	cltd   
f0130a08:	f7 fb                	idiv   %ebx
f0130a0a:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130a10:	8b 15 2c ad 89 f0    	mov    0xf089ad2c,%edx
f0130a16:	a0 a8 ad 89 f0       	mov    0xf089ada8,%al
f0130a1b:	0f b6 c0             	movzbl %al,%eax
f0130a1e:	01 d0                	add    %edx,%eax
f0130a20:	8a 00                	mov    (%eax),%al
f0130a22:	0f b6 d8             	movzbl %al,%ebx
f0130a25:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130a2a:	99                   	cltd   
f0130a2b:	f7 fb                	idiv   %ebx
f0130a2d:	89 c3                	mov    %eax,%ebx
f0130a2f:	89 c8                	mov    %ecx,%eax
f0130a31:	99                   	cltd   
f0130a32:	f7 fb                	idiv   %ebx
f0130a34:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130a38:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130a3c:	83 e0 01             	and    $0x1,%eax
f0130a3f:	66 85 c0             	test   %ax,%ax
f0130a42:	74 07                	je     f0130a4b <chk2+0xa2>
f0130a44:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130a48:	40                   	inc    %eax
f0130a49:	eb 04                	jmp    f0130a4f <chk2+0xa6>
f0130a4b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130a4f:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130a53:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130a57:	89 d0                	mov    %edx,%eax
f0130a59:	c1 e0 02             	shl    $0x2,%eax
f0130a5c:	01 d0                	add    %edx,%eax
f0130a5e:	01 c0                	add    %eax,%eax
f0130a60:	01 d0                	add    %edx,%eax
f0130a62:	c1 e0 02             	shl    $0x2,%eax
f0130a65:	01 d0                	add    %edx,%eax
f0130a67:	01 c0                	add    %eax,%eax
f0130a69:	89 c1                	mov    %eax,%ecx
f0130a6b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130a70:	f7 e9                	imul   %ecx
f0130a72:	c1 fa 05             	sar    $0x5,%edx
f0130a75:	89 c8                	mov    %ecx,%eax
f0130a77:	c1 f8 1f             	sar    $0x1f,%eax
f0130a7a:	29 c2                	sub    %eax,%edx
f0130a7c:	89 d0                	mov    %edx,%eax
f0130a7e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130a82:	e8 cf 38 fd ff       	call   f0104356 <kclock_read_cnt0>
f0130a87:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130a8b:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130a8f:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130a93:	76 0a                	jbe    f0130a9f <chk2+0xf6>
f0130a95:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130a99:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130a9d:	76 19                	jbe    f0130ab8 <chk2+0x10f>
f0130a9f:	68 e0 d2 13 f0       	push   $0xf013d2e0
f0130aa4:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130aa9:	68 ca 00 00 00       	push   $0xca
f0130aae:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130ab3:	e8 03 f8 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130ab8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130abf:	eb 44                	jmp    f0130b05 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130ac1:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130ac6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130ac9:	89 c2                	mov    %eax,%edx
f0130acb:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130ad0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130ad3:	c1 e1 04             	shl    $0x4,%ecx
f0130ad6:	01 c8                	add    %ecx,%eax
f0130ad8:	83 ec 08             	sub    $0x8,%esp
f0130adb:	52                   	push   %edx
f0130adc:	50                   	push   %eax
f0130add:	e8 bd 3b fd ff       	call   f010469f <find_env_in_queue>
f0130ae2:	83 c4 10             	add    $0x10,%esp
f0130ae5:	85 c0                	test   %eax,%eax
f0130ae7:	74 19                	je     f0130b02 <chk2+0x159>
f0130ae9:	68 04 d3 13 f0       	push   $0xf013d304
f0130aee:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130af3:	68 ce 00 00 00       	push   $0xce
f0130af8:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130afd:	e8 b9 f7 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130b02:	ff 45 f4             	incl   -0xc(%ebp)
f0130b05:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130b0a:	0f b6 c0             	movzbl %al,%eax
f0130b0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130b10:	7f af                	jg     f0130ac1 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130b12:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130b17:	85 c0                	test   %eax,%eax
f0130b19:	0f 84 e2 00 00 00    	je     f0130c01 <chk2+0x258>
f0130b1f:	8b 15 94 ad 89 f0    	mov    0xf089ad94,%edx
f0130b25:	a1 38 ad 89 f0       	mov    0xf089ad38,%eax
f0130b2a:	39 c2                	cmp    %eax,%edx
f0130b2c:	0f 84 cf 00 00 00    	je     f0130c01 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130b32:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b37:	0f b6 c0             	movzbl %al,%eax
f0130b3a:	8a 15 80 ad 89 f0    	mov    0xf089ad80,%dl
f0130b40:	0f b6 d2             	movzbl %dl,%edx
f0130b43:	4a                   	dec    %edx
f0130b44:	39 d0                	cmp    %edx,%eax
f0130b46:	74 08                	je     f0130b50 <chk2+0x1a7>
f0130b48:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b4d:	40                   	inc    %eax
f0130b4e:	eb 05                	jmp    f0130b55 <chk2+0x1ac>
f0130b50:	a0 e0 ac 89 f0       	mov    0xf089ace0,%al
f0130b55:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130b58:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130b5d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130b60:	89 c2                	mov    %eax,%edx
f0130b62:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130b67:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130b6b:	c1 e1 04             	shl    $0x4,%ecx
f0130b6e:	01 c8                	add    %ecx,%eax
f0130b70:	83 ec 08             	sub    $0x8,%esp
f0130b73:	52                   	push   %edx
f0130b74:	50                   	push   %eax
f0130b75:	e8 25 3b fd ff       	call   f010469f <find_env_in_queue>
f0130b7a:	83 c4 10             	add    $0x10,%esp
f0130b7d:	85 c0                	test   %eax,%eax
f0130b7f:	75 19                	jne    f0130b9a <chk2+0x1f1>
f0130b81:	68 44 d3 13 f0       	push   $0xf013d344
f0130b86:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130b8b:	68 d4 00 00 00       	push   $0xd4
f0130b90:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130b95:	e8 21 f7 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130b9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130ba1:	eb 4e                	jmp    f0130bf1 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130ba3:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130ba7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130baa:	74 41                	je     f0130bed <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130bac:	a1 94 ad 89 f0       	mov    0xf089ad94,%eax
f0130bb1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130bb4:	89 c2                	mov    %eax,%edx
f0130bb6:	a1 e8 ac 89 f0       	mov    0xf089ace8,%eax
f0130bbb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130bbe:	c1 e1 04             	shl    $0x4,%ecx
f0130bc1:	01 c8                	add    %ecx,%eax
f0130bc3:	83 ec 08             	sub    $0x8,%esp
f0130bc6:	52                   	push   %edx
f0130bc7:	50                   	push   %eax
f0130bc8:	e8 d2 3a fd ff       	call   f010469f <find_env_in_queue>
f0130bcd:	83 c4 10             	add    $0x10,%esp
f0130bd0:	85 c0                	test   %eax,%eax
f0130bd2:	74 1a                	je     f0130bee <chk2+0x245>
f0130bd4:	68 88 d3 13 f0       	push   $0xf013d388
f0130bd9:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130bde:	68 d8 00 00 00       	push   $0xd8
f0130be3:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130be8:	e8 ce f6 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130bed:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130bee:	ff 45 f0             	incl   -0x10(%ebp)
f0130bf1:	a0 80 ad 89 f0       	mov    0xf089ad80,%al
f0130bf6:	0f b6 c0             	movzbl %al,%eax
f0130bf9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130bfc:	7f a5                	jg     f0130ba3 <chk2+0x1fa>
f0130bfe:	eb 01                	jmp    f0130c01 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130c00:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130c01:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130c04:	c9                   	leave  
f0130c05:	c3                   	ret    

f0130c06 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130c06:	55                   	push   %ebp
f0130c07:	89 e5                	mov    %esp,%ebp
f0130c09:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130c0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130c13:	eb 40                	jmp    f0130c55 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130c15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c18:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130c1e:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130c23:	83 ec 08             	sub    $0x8,%esp
f0130c26:	52                   	push   %edx
f0130c27:	50                   	push   %eax
f0130c28:	e8 9b 01 00 00       	call   f0130dc8 <check_va2pa>
f0130c2d:	83 c4 10             	add    $0x10,%esp
f0130c30:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130c33:	74 19                	je     f0130c4e <check_boot_pgdir+0x48>
f0130c35:	68 c8 d3 13 f0       	push   $0xf013d3c8
f0130c3a:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130c3f:	68 fa 00 00 00       	push   $0xfa
f0130c44:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130c49:	e8 b7 f5 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130c4e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c58:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130c5e:	a1 78 ad 89 f0       	mov    0xf089ad78,%eax
f0130c63:	39 c2                	cmp    %eax,%edx
f0130c65:	72 ae                	jb     f0130c15 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130c67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130c6e:	eb 74                	jmp    f0130ce4 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c73:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130c79:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130c7e:	83 ec 08             	sub    $0x8,%esp
f0130c81:	52                   	push   %edx
f0130c82:	50                   	push   %eax
f0130c83:	e8 40 01 00 00       	call   f0130dc8 <check_va2pa>
f0130c88:	83 c4 10             	add    $0x10,%esp
f0130c8b:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130c92:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130c99:	77 17                	ja     f0130cb2 <check_boot_pgdir+0xac>
f0130c9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0130c9e:	68 00 d4 13 f0       	push   $0xf013d400
f0130ca3:	68 04 01 00 00       	push   $0x104
f0130ca8:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130cad:	e8 53 f5 fc ff       	call   f0100205 <_panic>
f0130cb2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130cb5:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130cbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130cbe:	01 ca                	add    %ecx,%edx
f0130cc0:	39 d0                	cmp    %edx,%eax
f0130cc2:	74 19                	je     f0130cdd <check_boot_pgdir+0xd7>
f0130cc4:	68 34 d4 13 f0       	push   $0xf013d434
f0130cc9:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130cce:	68 04 01 00 00       	push   $0x104
f0130cd3:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130cd8:	e8 28 f5 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130cdd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130ce4:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130ceb:	76 83                	jbe    f0130c70 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130ced:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130cf4:	e9 af 00 00 00       	jmp    f0130da8 <check_boot_pgdir+0x1a2>
		switch (i) {
f0130cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130cfc:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130d01:	74 11                	je     f0130d14 <check_boot_pgdir+0x10e>
f0130d03:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130d08:	72 36                	jb     f0130d40 <check_boot_pgdir+0x13a>
f0130d0a:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130d0f:	83 f8 02             	cmp    $0x2,%eax
f0130d12:	77 2c                	ja     f0130d40 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130d14:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130d19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130d1c:	c1 e2 02             	shl    $0x2,%edx
f0130d1f:	01 d0                	add    %edx,%eax
f0130d21:	8b 00                	mov    (%eax),%eax
f0130d23:	85 c0                	test   %eax,%eax
f0130d25:	75 7a                	jne    f0130da1 <check_boot_pgdir+0x19b>
f0130d27:	68 b6 d4 13 f0       	push   $0xf013d4b6
f0130d2c:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130d31:	68 0f 01 00 00       	push   $0x10f
f0130d36:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130d3b:	e8 c5 f4 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130d40:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130d47:	76 2c                	jbe    f0130d75 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130d49:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130d4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130d51:	c1 e2 02             	shl    $0x2,%edx
f0130d54:	01 d0                	add    %edx,%eax
f0130d56:	8b 00                	mov    (%eax),%eax
f0130d58:	85 c0                	test   %eax,%eax
f0130d5a:	75 48                	jne    f0130da4 <check_boot_pgdir+0x19e>
f0130d5c:	68 b6 d4 13 f0       	push   $0xf013d4b6
f0130d61:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130d66:	68 13 01 00 00       	push   $0x113
f0130d6b:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130d70:	e8 90 f4 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130d75:	a1 7c ad 89 f0       	mov    0xf089ad7c,%eax
f0130d7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130d7d:	c1 e2 02             	shl    $0x2,%edx
f0130d80:	01 d0                	add    %edx,%eax
f0130d82:	8b 00                	mov    (%eax),%eax
f0130d84:	85 c0                	test   %eax,%eax
f0130d86:	74 1c                	je     f0130da4 <check_boot_pgdir+0x19e>
f0130d88:	68 cc d4 13 f0       	push   $0xf013d4cc
f0130d8d:	68 b2 d2 13 f0       	push   $0xf013d2b2
f0130d92:	68 15 01 00 00       	push   $0x115
f0130d97:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130d9c:	e8 64 f4 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130da1:	90                   	nop
f0130da2:	eb 01                	jmp    f0130da5 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130da4:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130da5:	ff 45 f4             	incl   -0xc(%ebp)
f0130da8:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130daf:	0f 86 44 ff ff ff    	jbe    f0130cf9 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130db5:	83 ec 0c             	sub    $0xc,%esp
f0130db8:	68 e8 d4 13 f0       	push   $0xf013d4e8
f0130dbd:	e8 4c ff fc ff       	call   f0100d0e <cprintf>
f0130dc2:	83 c4 10             	add    $0x10,%esp
}
f0130dc5:	90                   	nop
f0130dc6:	c9                   	leave  
f0130dc7:	c3                   	ret    

f0130dc8 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130dc8:	55                   	push   %ebp
f0130dc9:	89 e5                	mov    %esp,%ebp
f0130dcb:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130dce:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dd1:	c1 e8 16             	shr    $0x16,%eax
f0130dd4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130ddb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dde:	01 d0                	add    %edx,%eax
f0130de0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130de6:	8b 00                	mov    (%eax),%eax
f0130de8:	83 e0 01             	and    $0x1,%eax
f0130deb:	85 c0                	test   %eax,%eax
f0130ded:	75 0a                	jne    f0130df9 <check_va2pa+0x31>
		return ~0;
f0130def:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130df4:	e9 87 00 00 00       	jmp    f0130e80 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130dfc:	8b 00                	mov    (%eax),%eax
f0130dfe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130e03:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e09:	c1 e8 0c             	shr    $0xc,%eax
f0130e0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130e0f:	a1 10 ad 89 f0       	mov    0xf089ad10,%eax
f0130e14:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130e17:	72 17                	jb     f0130e30 <check_va2pa+0x68>
f0130e19:	ff 75 f0             	pushl  -0x10(%ebp)
f0130e1c:	68 08 d5 13 f0       	push   $0xf013d508
f0130e21:	68 2b 01 00 00       	push   $0x12b
f0130e26:	68 c7 d2 13 f0       	push   $0xf013d2c7
f0130e2b:	e8 d5 f3 fc ff       	call   f0100205 <_panic>
f0130e30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e33:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130e38:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130e3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e3e:	c1 e8 0c             	shr    $0xc,%eax
f0130e41:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130e46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130e4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130e50:	01 d0                	add    %edx,%eax
f0130e52:	8b 00                	mov    (%eax),%eax
f0130e54:	83 e0 01             	and    $0x1,%eax
f0130e57:	85 c0                	test   %eax,%eax
f0130e59:	75 07                	jne    f0130e62 <check_va2pa+0x9a>
		return ~0;
f0130e5b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130e60:	eb 1e                	jmp    f0130e80 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130e62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e65:	c1 e8 0c             	shr    $0xc,%eax
f0130e68:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130e6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130e74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130e77:	01 d0                	add    %edx,%eax
f0130e79:	8b 00                	mov    (%eax),%eax
f0130e7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130e80:	c9                   	leave  
f0130e81:	c3                   	ret    

f0130e82 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130e82:	55                   	push   %ebp
f0130e83:	89 e5                	mov    %esp,%ebp
f0130e85:	53                   	push   %ebx
f0130e86:	83 ec 14             	sub    $0x14,%esp
f0130e89:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130e8f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130e95:	8b 45 18             	mov    0x18(%ebp),%eax
f0130e98:	ba 00 00 00 00       	mov    $0x0,%edx
f0130e9d:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130ea0:	77 55                	ja     f0130ef7 <printnum+0x75>
f0130ea2:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130ea5:	72 05                	jb     f0130eac <printnum+0x2a>
f0130ea7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130eaa:	77 4b                	ja     f0130ef7 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130eac:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130eaf:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130eb2:	8b 45 18             	mov    0x18(%ebp),%eax
f0130eb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0130eba:	52                   	push   %edx
f0130ebb:	50                   	push   %eax
f0130ebc:	ff 75 f4             	pushl  -0xc(%ebp)
f0130ebf:	ff 75 f0             	pushl  -0x10(%ebp)
f0130ec2:	e8 09 28 00 00       	call   f01336d0 <__udivdi3>
f0130ec7:	83 c4 10             	add    $0x10,%esp
f0130eca:	83 ec 04             	sub    $0x4,%esp
f0130ecd:	ff 75 20             	pushl  0x20(%ebp)
f0130ed0:	53                   	push   %ebx
f0130ed1:	ff 75 18             	pushl  0x18(%ebp)
f0130ed4:	52                   	push   %edx
f0130ed5:	50                   	push   %eax
f0130ed6:	ff 75 0c             	pushl  0xc(%ebp)
f0130ed9:	ff 75 08             	pushl  0x8(%ebp)
f0130edc:	e8 a1 ff ff ff       	call   f0130e82 <printnum>
f0130ee1:	83 c4 20             	add    $0x20,%esp
f0130ee4:	eb 1a                	jmp    f0130f00 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130ee6:	83 ec 08             	sub    $0x8,%esp
f0130ee9:	ff 75 0c             	pushl  0xc(%ebp)
f0130eec:	ff 75 20             	pushl  0x20(%ebp)
f0130eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ef2:	ff d0                	call   *%eax
f0130ef4:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130ef7:	ff 4d 1c             	decl   0x1c(%ebp)
f0130efa:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130efe:	7f e6                	jg     f0130ee6 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130f00:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130f03:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130f08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130f0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130f0e:	53                   	push   %ebx
f0130f0f:	51                   	push   %ecx
f0130f10:	52                   	push   %edx
f0130f11:	50                   	push   %eax
f0130f12:	e8 c9 28 00 00       	call   f01337e0 <__umoddi3>
f0130f17:	83 c4 10             	add    $0x10,%esp
f0130f1a:	05 54 d7 13 f0       	add    $0xf013d754,%eax
f0130f1f:	8a 00                	mov    (%eax),%al
f0130f21:	0f be c0             	movsbl %al,%eax
f0130f24:	83 ec 08             	sub    $0x8,%esp
f0130f27:	ff 75 0c             	pushl  0xc(%ebp)
f0130f2a:	50                   	push   %eax
f0130f2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f2e:	ff d0                	call   *%eax
f0130f30:	83 c4 10             	add    $0x10,%esp
}
f0130f33:	90                   	nop
f0130f34:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130f37:	c9                   	leave  
f0130f38:	c3                   	ret    

f0130f39 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130f39:	55                   	push   %ebp
f0130f3a:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130f3c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130f40:	7e 1c                	jle    f0130f5e <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f45:	8b 00                	mov    (%eax),%eax
f0130f47:	8d 50 08             	lea    0x8(%eax),%edx
f0130f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f4d:	89 10                	mov    %edx,(%eax)
f0130f4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f52:	8b 00                	mov    (%eax),%eax
f0130f54:	83 e8 08             	sub    $0x8,%eax
f0130f57:	8b 50 04             	mov    0x4(%eax),%edx
f0130f5a:	8b 00                	mov    (%eax),%eax
f0130f5c:	eb 40                	jmp    f0130f9e <getuint+0x65>
	else if (lflag)
f0130f5e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130f62:	74 1e                	je     f0130f82 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130f64:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f67:	8b 00                	mov    (%eax),%eax
f0130f69:	8d 50 04             	lea    0x4(%eax),%edx
f0130f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f6f:	89 10                	mov    %edx,(%eax)
f0130f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f74:	8b 00                	mov    (%eax),%eax
f0130f76:	83 e8 04             	sub    $0x4,%eax
f0130f79:	8b 00                	mov    (%eax),%eax
f0130f7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0130f80:	eb 1c                	jmp    f0130f9e <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130f82:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f85:	8b 00                	mov    (%eax),%eax
f0130f87:	8d 50 04             	lea    0x4(%eax),%edx
f0130f8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f8d:	89 10                	mov    %edx,(%eax)
f0130f8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f92:	8b 00                	mov    (%eax),%eax
f0130f94:	83 e8 04             	sub    $0x4,%eax
f0130f97:	8b 00                	mov    (%eax),%eax
f0130f99:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130f9e:	5d                   	pop    %ebp
f0130f9f:	c3                   	ret    

f0130fa0 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130fa0:	55                   	push   %ebp
f0130fa1:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130fa3:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130fa7:	7e 1c                	jle    f0130fc5 <getint+0x25>
		return va_arg(*ap, long long);
f0130fa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fac:	8b 00                	mov    (%eax),%eax
f0130fae:	8d 50 08             	lea    0x8(%eax),%edx
f0130fb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fb4:	89 10                	mov    %edx,(%eax)
f0130fb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fb9:	8b 00                	mov    (%eax),%eax
f0130fbb:	83 e8 08             	sub    $0x8,%eax
f0130fbe:	8b 50 04             	mov    0x4(%eax),%edx
f0130fc1:	8b 00                	mov    (%eax),%eax
f0130fc3:	eb 38                	jmp    f0130ffd <getint+0x5d>
	else if (lflag)
f0130fc5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130fc9:	74 1a                	je     f0130fe5 <getint+0x45>
		return va_arg(*ap, long);
f0130fcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fce:	8b 00                	mov    (%eax),%eax
f0130fd0:	8d 50 04             	lea    0x4(%eax),%edx
f0130fd3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fd6:	89 10                	mov    %edx,(%eax)
f0130fd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fdb:	8b 00                	mov    (%eax),%eax
f0130fdd:	83 e8 04             	sub    $0x4,%eax
f0130fe0:	8b 00                	mov    (%eax),%eax
f0130fe2:	99                   	cltd   
f0130fe3:	eb 18                	jmp    f0130ffd <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fe8:	8b 00                	mov    (%eax),%eax
f0130fea:	8d 50 04             	lea    0x4(%eax),%edx
f0130fed:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ff0:	89 10                	mov    %edx,(%eax)
f0130ff2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ff5:	8b 00                	mov    (%eax),%eax
f0130ff7:	83 e8 04             	sub    $0x4,%eax
f0130ffa:	8b 00                	mov    (%eax),%eax
f0130ffc:	99                   	cltd   
}
f0130ffd:	5d                   	pop    %ebp
f0130ffe:	c3                   	ret    

f0130fff <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130fff:	55                   	push   %ebp
f0131000:	89 e5                	mov    %esp,%ebp
f0131002:	56                   	push   %esi
f0131003:	53                   	push   %ebx
f0131004:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0131007:	eb 17                	jmp    f0131020 <vprintfmt+0x21>
			if (ch == '\0')
f0131009:	85 db                	test   %ebx,%ebx
f013100b:	0f 84 af 03 00 00    	je     f01313c0 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0131011:	83 ec 08             	sub    $0x8,%esp
f0131014:	ff 75 0c             	pushl  0xc(%ebp)
f0131017:	53                   	push   %ebx
f0131018:	8b 45 08             	mov    0x8(%ebp),%eax
f013101b:	ff d0                	call   *%eax
f013101d:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0131020:	8b 45 10             	mov    0x10(%ebp),%eax
f0131023:	8d 50 01             	lea    0x1(%eax),%edx
f0131026:	89 55 10             	mov    %edx,0x10(%ebp)
f0131029:	8a 00                	mov    (%eax),%al
f013102b:	0f b6 d8             	movzbl %al,%ebx
f013102e:	83 fb 25             	cmp    $0x25,%ebx
f0131031:	75 d6                	jne    f0131009 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0131033:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0131037:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f013103e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0131045:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f013104c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0131053:	8b 45 10             	mov    0x10(%ebp),%eax
f0131056:	8d 50 01             	lea    0x1(%eax),%edx
f0131059:	89 55 10             	mov    %edx,0x10(%ebp)
f013105c:	8a 00                	mov    (%eax),%al
f013105e:	0f b6 d8             	movzbl %al,%ebx
f0131061:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0131064:	83 f8 55             	cmp    $0x55,%eax
f0131067:	0f 87 2b 03 00 00    	ja     f0131398 <vprintfmt+0x399>
f013106d:	8b 04 85 78 d7 13 f0 	mov    -0xfec2888(,%eax,4),%eax
f0131074:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0131076:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f013107a:	eb d7                	jmp    f0131053 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f013107c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0131080:	eb d1                	jmp    f0131053 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0131082:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0131089:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013108c:	89 d0                	mov    %edx,%eax
f013108e:	c1 e0 02             	shl    $0x2,%eax
f0131091:	01 d0                	add    %edx,%eax
f0131093:	01 c0                	add    %eax,%eax
f0131095:	01 d8                	add    %ebx,%eax
f0131097:	83 e8 30             	sub    $0x30,%eax
f013109a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f013109d:	8b 45 10             	mov    0x10(%ebp),%eax
f01310a0:	8a 00                	mov    (%eax),%al
f01310a2:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01310a5:	83 fb 2f             	cmp    $0x2f,%ebx
f01310a8:	7e 3e                	jle    f01310e8 <vprintfmt+0xe9>
f01310aa:	83 fb 39             	cmp    $0x39,%ebx
f01310ad:	7f 39                	jg     f01310e8 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01310af:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01310b2:	eb d5                	jmp    f0131089 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01310b4:	8b 45 14             	mov    0x14(%ebp),%eax
f01310b7:	83 c0 04             	add    $0x4,%eax
f01310ba:	89 45 14             	mov    %eax,0x14(%ebp)
f01310bd:	8b 45 14             	mov    0x14(%ebp),%eax
f01310c0:	83 e8 04             	sub    $0x4,%eax
f01310c3:	8b 00                	mov    (%eax),%eax
f01310c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01310c8:	eb 1f                	jmp    f01310e9 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f01310ca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01310ce:	79 83                	jns    f0131053 <vprintfmt+0x54>
				width = 0;
f01310d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01310d7:	e9 77 ff ff ff       	jmp    f0131053 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01310dc:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f01310e3:	e9 6b ff ff ff       	jmp    f0131053 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01310e8:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01310e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01310ed:	0f 89 60 ff ff ff    	jns    f0131053 <vprintfmt+0x54>
				width = precision, precision = -1;
f01310f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01310f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01310f9:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0131100:	e9 4e ff ff ff       	jmp    f0131053 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0131105:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0131108:	e9 46 ff ff ff       	jmp    f0131053 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f013110d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131110:	83 c0 04             	add    $0x4,%eax
f0131113:	89 45 14             	mov    %eax,0x14(%ebp)
f0131116:	8b 45 14             	mov    0x14(%ebp),%eax
f0131119:	83 e8 04             	sub    $0x4,%eax
f013111c:	8b 00                	mov    (%eax),%eax
f013111e:	83 ec 08             	sub    $0x8,%esp
f0131121:	ff 75 0c             	pushl  0xc(%ebp)
f0131124:	50                   	push   %eax
f0131125:	8b 45 08             	mov    0x8(%ebp),%eax
f0131128:	ff d0                	call   *%eax
f013112a:	83 c4 10             	add    $0x10,%esp
			break;
f013112d:	e9 89 02 00 00       	jmp    f01313bb <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0131132:	8b 45 14             	mov    0x14(%ebp),%eax
f0131135:	83 c0 04             	add    $0x4,%eax
f0131138:	89 45 14             	mov    %eax,0x14(%ebp)
f013113b:	8b 45 14             	mov    0x14(%ebp),%eax
f013113e:	83 e8 04             	sub    $0x4,%eax
f0131141:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0131143:	85 db                	test   %ebx,%ebx
f0131145:	79 02                	jns    f0131149 <vprintfmt+0x14a>
				err = -err;
f0131147:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0131149:	83 fb 64             	cmp    $0x64,%ebx
f013114c:	7f 0b                	jg     f0131159 <vprintfmt+0x15a>
f013114e:	8b 34 9d c0 d5 13 f0 	mov    -0xfec2a40(,%ebx,4),%esi
f0131155:	85 f6                	test   %esi,%esi
f0131157:	75 19                	jne    f0131172 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0131159:	53                   	push   %ebx
f013115a:	68 65 d7 13 f0       	push   $0xf013d765
f013115f:	ff 75 0c             	pushl  0xc(%ebp)
f0131162:	ff 75 08             	pushl  0x8(%ebp)
f0131165:	e8 5e 02 00 00       	call   f01313c8 <printfmt>
f013116a:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f013116d:	e9 49 02 00 00       	jmp    f01313bb <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0131172:	56                   	push   %esi
f0131173:	68 6e d7 13 f0       	push   $0xf013d76e
f0131178:	ff 75 0c             	pushl  0xc(%ebp)
f013117b:	ff 75 08             	pushl  0x8(%ebp)
f013117e:	e8 45 02 00 00       	call   f01313c8 <printfmt>
f0131183:	83 c4 10             	add    $0x10,%esp
			break;
f0131186:	e9 30 02 00 00       	jmp    f01313bb <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f013118b:	8b 45 14             	mov    0x14(%ebp),%eax
f013118e:	83 c0 04             	add    $0x4,%eax
f0131191:	89 45 14             	mov    %eax,0x14(%ebp)
f0131194:	8b 45 14             	mov    0x14(%ebp),%eax
f0131197:	83 e8 04             	sub    $0x4,%eax
f013119a:	8b 30                	mov    (%eax),%esi
f013119c:	85 f6                	test   %esi,%esi
f013119e:	75 05                	jne    f01311a5 <vprintfmt+0x1a6>
				p = "(null)";
f01311a0:	be 71 d7 13 f0       	mov    $0xf013d771,%esi
			if (width > 0 && padc != '-')
f01311a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01311a9:	7e 6d                	jle    f0131218 <vprintfmt+0x219>
f01311ab:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01311af:	74 67                	je     f0131218 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01311b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01311b4:	83 ec 08             	sub    $0x8,%esp
f01311b7:	50                   	push   %eax
f01311b8:	56                   	push   %esi
f01311b9:	e8 12 05 00 00       	call   f01316d0 <strnlen>
f01311be:	83 c4 10             	add    $0x10,%esp
f01311c1:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01311c4:	eb 16                	jmp    f01311dc <vprintfmt+0x1dd>
					putch(padc, putdat);
f01311c6:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01311ca:	83 ec 08             	sub    $0x8,%esp
f01311cd:	ff 75 0c             	pushl  0xc(%ebp)
f01311d0:	50                   	push   %eax
f01311d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01311d4:	ff d0                	call   *%eax
f01311d6:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01311d9:	ff 4d e4             	decl   -0x1c(%ebp)
f01311dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01311e0:	7f e4                	jg     f01311c6 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01311e2:	eb 34                	jmp    f0131218 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01311e4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01311e8:	74 1c                	je     f0131206 <vprintfmt+0x207>
f01311ea:	83 fb 1f             	cmp    $0x1f,%ebx
f01311ed:	7e 05                	jle    f01311f4 <vprintfmt+0x1f5>
f01311ef:	83 fb 7e             	cmp    $0x7e,%ebx
f01311f2:	7e 12                	jle    f0131206 <vprintfmt+0x207>
					putch('?', putdat);
f01311f4:	83 ec 08             	sub    $0x8,%esp
f01311f7:	ff 75 0c             	pushl  0xc(%ebp)
f01311fa:	6a 3f                	push   $0x3f
f01311fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ff:	ff d0                	call   *%eax
f0131201:	83 c4 10             	add    $0x10,%esp
f0131204:	eb 0f                	jmp    f0131215 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0131206:	83 ec 08             	sub    $0x8,%esp
f0131209:	ff 75 0c             	pushl  0xc(%ebp)
f013120c:	53                   	push   %ebx
f013120d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131210:	ff d0                	call   *%eax
f0131212:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0131215:	ff 4d e4             	decl   -0x1c(%ebp)
f0131218:	89 f0                	mov    %esi,%eax
f013121a:	8d 70 01             	lea    0x1(%eax),%esi
f013121d:	8a 00                	mov    (%eax),%al
f013121f:	0f be d8             	movsbl %al,%ebx
f0131222:	85 db                	test   %ebx,%ebx
f0131224:	74 24                	je     f013124a <vprintfmt+0x24b>
f0131226:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013122a:	78 b8                	js     f01311e4 <vprintfmt+0x1e5>
f013122c:	ff 4d e0             	decl   -0x20(%ebp)
f013122f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131233:	79 af                	jns    f01311e4 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131235:	eb 13                	jmp    f013124a <vprintfmt+0x24b>
				putch(' ', putdat);
f0131237:	83 ec 08             	sub    $0x8,%esp
f013123a:	ff 75 0c             	pushl  0xc(%ebp)
f013123d:	6a 20                	push   $0x20
f013123f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131242:	ff d0                	call   *%eax
f0131244:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131247:	ff 4d e4             	decl   -0x1c(%ebp)
f013124a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013124e:	7f e7                	jg     f0131237 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131250:	e9 66 01 00 00       	jmp    f01313bb <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0131255:	83 ec 08             	sub    $0x8,%esp
f0131258:	ff 75 e8             	pushl  -0x18(%ebp)
f013125b:	8d 45 14             	lea    0x14(%ebp),%eax
f013125e:	50                   	push   %eax
f013125f:	e8 3c fd ff ff       	call   f0130fa0 <getint>
f0131264:	83 c4 10             	add    $0x10,%esp
f0131267:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013126a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f013126d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131270:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131273:	85 d2                	test   %edx,%edx
f0131275:	79 23                	jns    f013129a <vprintfmt+0x29b>
				putch('-', putdat);
f0131277:	83 ec 08             	sub    $0x8,%esp
f013127a:	ff 75 0c             	pushl  0xc(%ebp)
f013127d:	6a 2d                	push   $0x2d
f013127f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131282:	ff d0                	call   *%eax
f0131284:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0131287:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013128a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013128d:	f7 d8                	neg    %eax
f013128f:	83 d2 00             	adc    $0x0,%edx
f0131292:	f7 da                	neg    %edx
f0131294:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131297:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f013129a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01312a1:	e9 bc 00 00 00       	jmp    f0131362 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01312a6:	83 ec 08             	sub    $0x8,%esp
f01312a9:	ff 75 e8             	pushl  -0x18(%ebp)
f01312ac:	8d 45 14             	lea    0x14(%ebp),%eax
f01312af:	50                   	push   %eax
f01312b0:	e8 84 fc ff ff       	call   f0130f39 <getuint>
f01312b5:	83 c4 10             	add    $0x10,%esp
f01312b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01312bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01312be:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01312c5:	e9 98 00 00 00       	jmp    f0131362 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01312ca:	83 ec 08             	sub    $0x8,%esp
f01312cd:	ff 75 0c             	pushl  0xc(%ebp)
f01312d0:	6a 58                	push   $0x58
f01312d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312d5:	ff d0                	call   *%eax
f01312d7:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01312da:	83 ec 08             	sub    $0x8,%esp
f01312dd:	ff 75 0c             	pushl  0xc(%ebp)
f01312e0:	6a 58                	push   $0x58
f01312e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312e5:	ff d0                	call   *%eax
f01312e7:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01312ea:	83 ec 08             	sub    $0x8,%esp
f01312ed:	ff 75 0c             	pushl  0xc(%ebp)
f01312f0:	6a 58                	push   $0x58
f01312f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f5:	ff d0                	call   *%eax
f01312f7:	83 c4 10             	add    $0x10,%esp
			break;
f01312fa:	e9 bc 00 00 00       	jmp    f01313bb <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01312ff:	83 ec 08             	sub    $0x8,%esp
f0131302:	ff 75 0c             	pushl  0xc(%ebp)
f0131305:	6a 30                	push   $0x30
f0131307:	8b 45 08             	mov    0x8(%ebp),%eax
f013130a:	ff d0                	call   *%eax
f013130c:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f013130f:	83 ec 08             	sub    $0x8,%esp
f0131312:	ff 75 0c             	pushl  0xc(%ebp)
f0131315:	6a 78                	push   $0x78
f0131317:	8b 45 08             	mov    0x8(%ebp),%eax
f013131a:	ff d0                	call   *%eax
f013131c:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f013131f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131322:	83 c0 04             	add    $0x4,%eax
f0131325:	89 45 14             	mov    %eax,0x14(%ebp)
f0131328:	8b 45 14             	mov    0x14(%ebp),%eax
f013132b:	83 e8 04             	sub    $0x4,%eax
f013132e:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131330:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131333:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f013133a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131341:	eb 1f                	jmp    f0131362 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0131343:	83 ec 08             	sub    $0x8,%esp
f0131346:	ff 75 e8             	pushl  -0x18(%ebp)
f0131349:	8d 45 14             	lea    0x14(%ebp),%eax
f013134c:	50                   	push   %eax
f013134d:	e8 e7 fb ff ff       	call   f0130f39 <getuint>
f0131352:	83 c4 10             	add    $0x10,%esp
f0131355:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131358:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f013135b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0131362:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0131366:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131369:	83 ec 04             	sub    $0x4,%esp
f013136c:	52                   	push   %edx
f013136d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0131370:	50                   	push   %eax
f0131371:	ff 75 f4             	pushl  -0xc(%ebp)
f0131374:	ff 75 f0             	pushl  -0x10(%ebp)
f0131377:	ff 75 0c             	pushl  0xc(%ebp)
f013137a:	ff 75 08             	pushl  0x8(%ebp)
f013137d:	e8 00 fb ff ff       	call   f0130e82 <printnum>
f0131382:	83 c4 20             	add    $0x20,%esp
			break;
f0131385:	eb 34                	jmp    f01313bb <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0131387:	83 ec 08             	sub    $0x8,%esp
f013138a:	ff 75 0c             	pushl  0xc(%ebp)
f013138d:	53                   	push   %ebx
f013138e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131391:	ff d0                	call   *%eax
f0131393:	83 c4 10             	add    $0x10,%esp
			break;
f0131396:	eb 23                	jmp    f01313bb <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0131398:	83 ec 08             	sub    $0x8,%esp
f013139b:	ff 75 0c             	pushl  0xc(%ebp)
f013139e:	6a 25                	push   $0x25
f01313a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01313a3:	ff d0                	call   *%eax
f01313a5:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01313a8:	ff 4d 10             	decl   0x10(%ebp)
f01313ab:	eb 03                	jmp    f01313b0 <vprintfmt+0x3b1>
f01313ad:	ff 4d 10             	decl   0x10(%ebp)
f01313b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01313b3:	48                   	dec    %eax
f01313b4:	8a 00                	mov    (%eax),%al
f01313b6:	3c 25                	cmp    $0x25,%al
f01313b8:	75 f3                	jne    f01313ad <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01313ba:	90                   	nop
		}
	}
f01313bb:	e9 47 fc ff ff       	jmp    f0131007 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01313c0:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01313c1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01313c4:	5b                   	pop    %ebx
f01313c5:	5e                   	pop    %esi
f01313c6:	5d                   	pop    %ebp
f01313c7:	c3                   	ret    

f01313c8 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01313c8:	55                   	push   %ebp
f01313c9:	89 e5                	mov    %esp,%ebp
f01313cb:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01313ce:	8d 45 10             	lea    0x10(%ebp),%eax
f01313d1:	83 c0 04             	add    $0x4,%eax
f01313d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01313d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01313da:	ff 75 f4             	pushl  -0xc(%ebp)
f01313dd:	50                   	push   %eax
f01313de:	ff 75 0c             	pushl  0xc(%ebp)
f01313e1:	ff 75 08             	pushl  0x8(%ebp)
f01313e4:	e8 16 fc ff ff       	call   f0130fff <vprintfmt>
f01313e9:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01313ec:	90                   	nop
f01313ed:	c9                   	leave  
f01313ee:	c3                   	ret    

f01313ef <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01313ef:	55                   	push   %ebp
f01313f0:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01313f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313f5:	8b 40 08             	mov    0x8(%eax),%eax
f01313f8:	8d 50 01             	lea    0x1(%eax),%edx
f01313fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01313fe:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0131401:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131404:	8b 10                	mov    (%eax),%edx
f0131406:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131409:	8b 40 04             	mov    0x4(%eax),%eax
f013140c:	39 c2                	cmp    %eax,%edx
f013140e:	73 12                	jae    f0131422 <sprintputch+0x33>
		*b->buf++ = ch;
f0131410:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131413:	8b 00                	mov    (%eax),%eax
f0131415:	8d 48 01             	lea    0x1(%eax),%ecx
f0131418:	8b 55 0c             	mov    0xc(%ebp),%edx
f013141b:	89 0a                	mov    %ecx,(%edx)
f013141d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131420:	88 10                	mov    %dl,(%eax)
}
f0131422:	90                   	nop
f0131423:	5d                   	pop    %ebp
f0131424:	c3                   	ret    

f0131425 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0131425:	55                   	push   %ebp
f0131426:	89 e5                	mov    %esp,%ebp
f0131428:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f013142b:	8b 45 08             	mov    0x8(%ebp),%eax
f013142e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131431:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131434:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131437:	8b 45 08             	mov    0x8(%ebp),%eax
f013143a:	01 d0                	add    %edx,%eax
f013143c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013143f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0131446:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013144a:	74 06                	je     f0131452 <vsnprintf+0x2d>
f013144c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131450:	7f 07                	jg     f0131459 <vsnprintf+0x34>
		return -E_INVAL;
f0131452:	b8 03 00 00 00       	mov    $0x3,%eax
f0131457:	eb 20                	jmp    f0131479 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0131459:	ff 75 14             	pushl  0x14(%ebp)
f013145c:	ff 75 10             	pushl  0x10(%ebp)
f013145f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0131462:	50                   	push   %eax
f0131463:	68 ef 13 13 f0       	push   $0xf01313ef
f0131468:	e8 92 fb ff ff       	call   f0130fff <vprintfmt>
f013146d:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0131470:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131473:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0131476:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0131479:	c9                   	leave  
f013147a:	c3                   	ret    

f013147b <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f013147b:	55                   	push   %ebp
f013147c:	89 e5                	mov    %esp,%ebp
f013147e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0131481:	8d 45 10             	lea    0x10(%ebp),%eax
f0131484:	83 c0 04             	add    $0x4,%eax
f0131487:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f013148a:	8b 45 10             	mov    0x10(%ebp),%eax
f013148d:	ff 75 f4             	pushl  -0xc(%ebp)
f0131490:	50                   	push   %eax
f0131491:	ff 75 0c             	pushl  0xc(%ebp)
f0131494:	ff 75 08             	pushl  0x8(%ebp)
f0131497:	e8 89 ff ff ff       	call   f0131425 <vsnprintf>
f013149c:	83 c4 10             	add    $0x10,%esp
f013149f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01314a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01314a5:	c9                   	leave  
f01314a6:	c3                   	ret    

f01314a7 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01314a7:	55                   	push   %ebp
f01314a8:	89 e5                	mov    %esp,%ebp
f01314aa:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01314ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01314b1:	74 13                	je     f01314c6 <readline+0x1f>
		cprintf("%s", prompt);
f01314b3:	83 ec 08             	sub    $0x8,%esp
f01314b6:	ff 75 08             	pushl  0x8(%ebp)
f01314b9:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01314be:	e8 4b f8 fc ff       	call   f0100d0e <cprintf>
f01314c3:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01314c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01314cd:	83 ec 0c             	sub    $0xc,%esp
f01314d0:	6a 00                	push   $0x0
f01314d2:	e8 e4 f7 fc ff       	call   f0100cbb <iscons>
f01314d7:	83 c4 10             	add    $0x10,%esp
f01314da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01314dd:	e8 c0 f7 fc ff       	call   f0100ca2 <getchar>
f01314e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01314e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01314e9:	79 22                	jns    f013150d <readline+0x66>
			if (c != -E_EOF)
f01314eb:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01314ef:	0f 84 ad 00 00 00    	je     f01315a2 <readline+0xfb>
				cprintf("read error: %e\n", c);
f01314f5:	83 ec 08             	sub    $0x8,%esp
f01314f8:	ff 75 ec             	pushl  -0x14(%ebp)
f01314fb:	68 d3 d8 13 f0       	push   $0xf013d8d3
f0131500:	e8 09 f8 fc ff       	call   f0100d0e <cprintf>
f0131505:	83 c4 10             	add    $0x10,%esp
			return;
f0131508:	e9 95 00 00 00       	jmp    f01315a2 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013150d:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131511:	7e 34                	jle    f0131547 <readline+0xa0>
f0131513:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013151a:	7f 2b                	jg     f0131547 <readline+0xa0>
			if (echoing)
f013151c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131520:	74 0e                	je     f0131530 <readline+0x89>
				cputchar(c);
f0131522:	83 ec 0c             	sub    $0xc,%esp
f0131525:	ff 75 ec             	pushl  -0x14(%ebp)
f0131528:	e8 5e f7 fc ff       	call   f0100c8b <cputchar>
f013152d:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131530:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131533:	8d 50 01             	lea    0x1(%eax),%edx
f0131536:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131539:	89 c2                	mov    %eax,%edx
f013153b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013153e:	01 d0                	add    %edx,%eax
f0131540:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131543:	88 10                	mov    %dl,(%eax)
f0131545:	eb 56                	jmp    f013159d <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0131547:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013154b:	75 1f                	jne    f013156c <readline+0xc5>
f013154d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131551:	7e 19                	jle    f013156c <readline+0xc5>
			if (echoing)
f0131553:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131557:	74 0e                	je     f0131567 <readline+0xc0>
				cputchar(c);
f0131559:	83 ec 0c             	sub    $0xc,%esp
f013155c:	ff 75 ec             	pushl  -0x14(%ebp)
f013155f:	e8 27 f7 fc ff       	call   f0100c8b <cputchar>
f0131564:	83 c4 10             	add    $0x10,%esp

			i--;
f0131567:	ff 4d f4             	decl   -0xc(%ebp)
f013156a:	eb 31                	jmp    f013159d <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f013156c:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131570:	74 0a                	je     f013157c <readline+0xd5>
f0131572:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131576:	0f 85 61 ff ff ff    	jne    f01314dd <readline+0x36>
			if (echoing)
f013157c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131580:	74 0e                	je     f0131590 <readline+0xe9>
				cputchar(c);
f0131582:	83 ec 0c             	sub    $0xc,%esp
f0131585:	ff 75 ec             	pushl  -0x14(%ebp)
f0131588:	e8 fe f6 fc ff       	call   f0100c8b <cputchar>
f013158d:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0131590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131593:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131596:	01 d0                	add    %edx,%eax
f0131598:	c6 00 00             	movb   $0x0,(%eax)
			return;
f013159b:	eb 06                	jmp    f01315a3 <readline+0xfc>
		}
	}
f013159d:	e9 3b ff ff ff       	jmp    f01314dd <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01315a2:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01315a3:	c9                   	leave  
f01315a4:	c3                   	ret    

f01315a5 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01315a5:	55                   	push   %ebp
f01315a6:	89 e5                	mov    %esp,%ebp
f01315a8:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01315ab:	e8 82 bb fd ff       	call   f010d132 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01315b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01315b4:	74 13                	je     f01315c9 <atomic_readline+0x24>
		cprintf("%s", prompt);
f01315b6:	83 ec 08             	sub    $0x8,%esp
f01315b9:	ff 75 08             	pushl  0x8(%ebp)
f01315bc:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01315c1:	e8 48 f7 fc ff       	call   f0100d0e <cprintf>
f01315c6:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01315c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01315d0:	83 ec 0c             	sub    $0xc,%esp
f01315d3:	6a 00                	push   $0x0
f01315d5:	e8 e1 f6 fc ff       	call   f0100cbb <iscons>
f01315da:	83 c4 10             	add    $0x10,%esp
f01315dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01315e0:	e8 bd f6 fc ff       	call   f0100ca2 <getchar>
f01315e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01315e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01315ec:	79 23                	jns    f0131611 <atomic_readline+0x6c>
			if (c != -E_EOF)
f01315ee:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01315f2:	74 13                	je     f0131607 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01315f4:	83 ec 08             	sub    $0x8,%esp
f01315f7:	ff 75 ec             	pushl  -0x14(%ebp)
f01315fa:	68 d3 d8 13 f0       	push   $0xf013d8d3
f01315ff:	e8 0a f7 fc ff       	call   f0100d0e <cprintf>
f0131604:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0131607:	e8 40 bb fd ff       	call   f010d14c <sys_enable_interrupt>
			return;
f013160c:	e9 9a 00 00 00       	jmp    f01316ab <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131611:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131615:	7e 34                	jle    f013164b <atomic_readline+0xa6>
f0131617:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013161e:	7f 2b                	jg     f013164b <atomic_readline+0xa6>
			if (echoing)
f0131620:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131624:	74 0e                	je     f0131634 <atomic_readline+0x8f>
				cputchar(c);
f0131626:	83 ec 0c             	sub    $0xc,%esp
f0131629:	ff 75 ec             	pushl  -0x14(%ebp)
f013162c:	e8 5a f6 fc ff       	call   f0100c8b <cputchar>
f0131631:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131634:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131637:	8d 50 01             	lea    0x1(%eax),%edx
f013163a:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013163d:	89 c2                	mov    %eax,%edx
f013163f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131642:	01 d0                	add    %edx,%eax
f0131644:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131647:	88 10                	mov    %dl,(%eax)
f0131649:	eb 5b                	jmp    f01316a6 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f013164b:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013164f:	75 1f                	jne    f0131670 <atomic_readline+0xcb>
f0131651:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131655:	7e 19                	jle    f0131670 <atomic_readline+0xcb>
			if (echoing)
f0131657:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013165b:	74 0e                	je     f013166b <atomic_readline+0xc6>
				cputchar(c);
f013165d:	83 ec 0c             	sub    $0xc,%esp
f0131660:	ff 75 ec             	pushl  -0x14(%ebp)
f0131663:	e8 23 f6 fc ff       	call   f0100c8b <cputchar>
f0131668:	83 c4 10             	add    $0x10,%esp
			i--;
f013166b:	ff 4d f4             	decl   -0xc(%ebp)
f013166e:	eb 36                	jmp    f01316a6 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0131670:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131674:	74 0a                	je     f0131680 <atomic_readline+0xdb>
f0131676:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013167a:	0f 85 60 ff ff ff    	jne    f01315e0 <atomic_readline+0x3b>
			if (echoing)
f0131680:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131684:	74 0e                	je     f0131694 <atomic_readline+0xef>
				cputchar(c);
f0131686:	83 ec 0c             	sub    $0xc,%esp
f0131689:	ff 75 ec             	pushl  -0x14(%ebp)
f013168c:	e8 fa f5 fc ff       	call   f0100c8b <cputchar>
f0131691:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0131694:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131697:	8b 45 0c             	mov    0xc(%ebp),%eax
f013169a:	01 d0                	add    %edx,%eax
f013169c:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f013169f:	e8 a8 ba fd ff       	call   f010d14c <sys_enable_interrupt>
			return;
f01316a4:	eb 05                	jmp    f01316ab <atomic_readline+0x106>
		}
	}
f01316a6:	e9 35 ff ff ff       	jmp    f01315e0 <atomic_readline+0x3b>
}
f01316ab:	c9                   	leave  
f01316ac:	c3                   	ret    

f01316ad <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01316ad:	55                   	push   %ebp
f01316ae:	89 e5                	mov    %esp,%ebp
f01316b0:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01316b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01316ba:	eb 06                	jmp    f01316c2 <strlen+0x15>
		n++;
f01316bc:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01316bf:	ff 45 08             	incl   0x8(%ebp)
f01316c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c5:	8a 00                	mov    (%eax),%al
f01316c7:	84 c0                	test   %al,%al
f01316c9:	75 f1                	jne    f01316bc <strlen+0xf>
		n++;
	return n;
f01316cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01316ce:	c9                   	leave  
f01316cf:	c3                   	ret    

f01316d0 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01316d0:	55                   	push   %ebp
f01316d1:	89 e5                	mov    %esp,%ebp
f01316d3:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01316d6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01316dd:	eb 09                	jmp    f01316e8 <strnlen+0x18>
		n++;
f01316df:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01316e2:	ff 45 08             	incl   0x8(%ebp)
f01316e5:	ff 4d 0c             	decl   0xc(%ebp)
f01316e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01316ec:	74 09                	je     f01316f7 <strnlen+0x27>
f01316ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01316f1:	8a 00                	mov    (%eax),%al
f01316f3:	84 c0                	test   %al,%al
f01316f5:	75 e8                	jne    f01316df <strnlen+0xf>
		n++;
	return n;
f01316f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01316fa:	c9                   	leave  
f01316fb:	c3                   	ret    

f01316fc <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01316fc:	55                   	push   %ebp
f01316fd:	89 e5                	mov    %esp,%ebp
f01316ff:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131702:	8b 45 08             	mov    0x8(%ebp),%eax
f0131705:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131708:	90                   	nop
f0131709:	8b 45 08             	mov    0x8(%ebp),%eax
f013170c:	8d 50 01             	lea    0x1(%eax),%edx
f013170f:	89 55 08             	mov    %edx,0x8(%ebp)
f0131712:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131715:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131718:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f013171b:	8a 12                	mov    (%edx),%dl
f013171d:	88 10                	mov    %dl,(%eax)
f013171f:	8a 00                	mov    (%eax),%al
f0131721:	84 c0                	test   %al,%al
f0131723:	75 e4                	jne    f0131709 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131725:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131728:	c9                   	leave  
f0131729:	c3                   	ret    

f013172a <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f013172a:	55                   	push   %ebp
f013172b:	89 e5                	mov    %esp,%ebp
f013172d:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131730:	8b 45 08             	mov    0x8(%ebp),%eax
f0131733:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131736:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013173d:	eb 1f                	jmp    f013175e <strncpy+0x34>
		*dst++ = *src;
f013173f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131742:	8d 50 01             	lea    0x1(%eax),%edx
f0131745:	89 55 08             	mov    %edx,0x8(%ebp)
f0131748:	8b 55 0c             	mov    0xc(%ebp),%edx
f013174b:	8a 12                	mov    (%edx),%dl
f013174d:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f013174f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131752:	8a 00                	mov    (%eax),%al
f0131754:	84 c0                	test   %al,%al
f0131756:	74 03                	je     f013175b <strncpy+0x31>
			src++;
f0131758:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f013175b:	ff 45 fc             	incl   -0x4(%ebp)
f013175e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131761:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131764:	72 d9                	jb     f013173f <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131766:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131769:	c9                   	leave  
f013176a:	c3                   	ret    

f013176b <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f013176b:	55                   	push   %ebp
f013176c:	89 e5                	mov    %esp,%ebp
f013176e:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131771:	8b 45 08             	mov    0x8(%ebp),%eax
f0131774:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131777:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013177b:	74 30                	je     f01317ad <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f013177d:	eb 16                	jmp    f0131795 <strlcpy+0x2a>
			*dst++ = *src++;
f013177f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131782:	8d 50 01             	lea    0x1(%eax),%edx
f0131785:	89 55 08             	mov    %edx,0x8(%ebp)
f0131788:	8b 55 0c             	mov    0xc(%ebp),%edx
f013178b:	8d 4a 01             	lea    0x1(%edx),%ecx
f013178e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131791:	8a 12                	mov    (%edx),%dl
f0131793:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131795:	ff 4d 10             	decl   0x10(%ebp)
f0131798:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013179c:	74 09                	je     f01317a7 <strlcpy+0x3c>
f013179e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317a1:	8a 00                	mov    (%eax),%al
f01317a3:	84 c0                	test   %al,%al
f01317a5:	75 d8                	jne    f013177f <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f01317a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01317aa:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f01317ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01317b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01317b3:	29 c2                	sub    %eax,%edx
f01317b5:	89 d0                	mov    %edx,%eax
}
f01317b7:	c9                   	leave  
f01317b8:	c3                   	ret    

f01317b9 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f01317b9:	55                   	push   %ebp
f01317ba:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f01317bc:	eb 06                	jmp    f01317c4 <strcmp+0xb>
		p++, q++;
f01317be:	ff 45 08             	incl   0x8(%ebp)
f01317c1:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01317c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01317c7:	8a 00                	mov    (%eax),%al
f01317c9:	84 c0                	test   %al,%al
f01317cb:	74 0e                	je     f01317db <strcmp+0x22>
f01317cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01317d0:	8a 10                	mov    (%eax),%dl
f01317d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317d5:	8a 00                	mov    (%eax),%al
f01317d7:	38 c2                	cmp    %al,%dl
f01317d9:	74 e3                	je     f01317be <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01317db:	8b 45 08             	mov    0x8(%ebp),%eax
f01317de:	8a 00                	mov    (%eax),%al
f01317e0:	0f b6 d0             	movzbl %al,%edx
f01317e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317e6:	8a 00                	mov    (%eax),%al
f01317e8:	0f b6 c0             	movzbl %al,%eax
f01317eb:	29 c2                	sub    %eax,%edx
f01317ed:	89 d0                	mov    %edx,%eax
}
f01317ef:	5d                   	pop    %ebp
f01317f0:	c3                   	ret    

f01317f1 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01317f1:	55                   	push   %ebp
f01317f2:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01317f4:	eb 09                	jmp    f01317ff <strncmp+0xe>
		n--, p++, q++;
f01317f6:	ff 4d 10             	decl   0x10(%ebp)
f01317f9:	ff 45 08             	incl   0x8(%ebp)
f01317fc:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01317ff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131803:	74 17                	je     f013181c <strncmp+0x2b>
f0131805:	8b 45 08             	mov    0x8(%ebp),%eax
f0131808:	8a 00                	mov    (%eax),%al
f013180a:	84 c0                	test   %al,%al
f013180c:	74 0e                	je     f013181c <strncmp+0x2b>
f013180e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131811:	8a 10                	mov    (%eax),%dl
f0131813:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131816:	8a 00                	mov    (%eax),%al
f0131818:	38 c2                	cmp    %al,%dl
f013181a:	74 da                	je     f01317f6 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f013181c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131820:	75 07                	jne    f0131829 <strncmp+0x38>
		return 0;
f0131822:	b8 00 00 00 00       	mov    $0x0,%eax
f0131827:	eb 14                	jmp    f013183d <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131829:	8b 45 08             	mov    0x8(%ebp),%eax
f013182c:	8a 00                	mov    (%eax),%al
f013182e:	0f b6 d0             	movzbl %al,%edx
f0131831:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131834:	8a 00                	mov    (%eax),%al
f0131836:	0f b6 c0             	movzbl %al,%eax
f0131839:	29 c2                	sub    %eax,%edx
f013183b:	89 d0                	mov    %edx,%eax
}
f013183d:	5d                   	pop    %ebp
f013183e:	c3                   	ret    

f013183f <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f013183f:	55                   	push   %ebp
f0131840:	89 e5                	mov    %esp,%ebp
f0131842:	83 ec 04             	sub    $0x4,%esp
f0131845:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131848:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013184b:	eb 12                	jmp    f013185f <strchr+0x20>
		if (*s == c)
f013184d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131850:	8a 00                	mov    (%eax),%al
f0131852:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131855:	75 05                	jne    f013185c <strchr+0x1d>
			return (char *) s;
f0131857:	8b 45 08             	mov    0x8(%ebp),%eax
f013185a:	eb 11                	jmp    f013186d <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f013185c:	ff 45 08             	incl   0x8(%ebp)
f013185f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131862:	8a 00                	mov    (%eax),%al
f0131864:	84 c0                	test   %al,%al
f0131866:	75 e5                	jne    f013184d <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131868:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013186d:	c9                   	leave  
f013186e:	c3                   	ret    

f013186f <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f013186f:	55                   	push   %ebp
f0131870:	89 e5                	mov    %esp,%ebp
f0131872:	83 ec 04             	sub    $0x4,%esp
f0131875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131878:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013187b:	eb 0d                	jmp    f013188a <strfind+0x1b>
		if (*s == c)
f013187d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131880:	8a 00                	mov    (%eax),%al
f0131882:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131885:	74 0e                	je     f0131895 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131887:	ff 45 08             	incl   0x8(%ebp)
f013188a:	8b 45 08             	mov    0x8(%ebp),%eax
f013188d:	8a 00                	mov    (%eax),%al
f013188f:	84 c0                	test   %al,%al
f0131891:	75 ea                	jne    f013187d <strfind+0xe>
f0131893:	eb 01                	jmp    f0131896 <strfind+0x27>
		if (*s == c)
			break;
f0131895:	90                   	nop
	return (char *) s;
f0131896:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131899:	c9                   	leave  
f013189a:	c3                   	ret    

f013189b <memset>:


void *
memset(void *v, int c, uint32 n)
{
f013189b:	55                   	push   %ebp
f013189c:	89 e5                	mov    %esp,%ebp
f013189e:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f01318a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01318a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f01318a7:	8b 45 10             	mov    0x10(%ebp),%eax
f01318aa:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f01318ad:	eb 0e                	jmp    f01318bd <memset+0x22>
		*p++ = c;
f01318af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01318b2:	8d 50 01             	lea    0x1(%eax),%edx
f01318b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01318b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01318bb:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f01318bd:	ff 4d f8             	decl   -0x8(%ebp)
f01318c0:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01318c4:	79 e9                	jns    f01318af <memset+0x14>
		*p++ = c;

	return v;
f01318c6:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01318c9:	c9                   	leave  
f01318ca:	c3                   	ret    

f01318cb <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01318cb:	55                   	push   %ebp
f01318cc:	89 e5                	mov    %esp,%ebp
f01318ce:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01318d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01318d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01318da:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01318dd:	eb 16                	jmp    f01318f5 <memcpy+0x2a>
		*d++ = *s++;
f01318df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318e2:	8d 50 01             	lea    0x1(%eax),%edx
f01318e5:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01318e8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01318eb:	8d 4a 01             	lea    0x1(%edx),%ecx
f01318ee:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01318f1:	8a 12                	mov    (%edx),%dl
f01318f3:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01318f5:	8b 45 10             	mov    0x10(%ebp),%eax
f01318f8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01318fb:	89 55 10             	mov    %edx,0x10(%ebp)
f01318fe:	85 c0                	test   %eax,%eax
f0131900:	75 dd                	jne    f01318df <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131902:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131905:	c9                   	leave  
f0131906:	c3                   	ret    

f0131907 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131907:	55                   	push   %ebp
f0131908:	89 e5                	mov    %esp,%ebp
f013190a:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013190d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131910:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131913:	8b 45 08             	mov    0x8(%ebp),%eax
f0131916:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131919:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013191c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013191f:	73 50                	jae    f0131971 <memmove+0x6a>
f0131921:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131924:	8b 45 10             	mov    0x10(%ebp),%eax
f0131927:	01 d0                	add    %edx,%eax
f0131929:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013192c:	76 43                	jbe    f0131971 <memmove+0x6a>
		s += n;
f013192e:	8b 45 10             	mov    0x10(%ebp),%eax
f0131931:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131934:	8b 45 10             	mov    0x10(%ebp),%eax
f0131937:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f013193a:	eb 10                	jmp    f013194c <memmove+0x45>
			*--d = *--s;
f013193c:	ff 4d f8             	decl   -0x8(%ebp)
f013193f:	ff 4d fc             	decl   -0x4(%ebp)
f0131942:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131945:	8a 10                	mov    (%eax),%dl
f0131947:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013194a:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f013194c:	8b 45 10             	mov    0x10(%ebp),%eax
f013194f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131952:	89 55 10             	mov    %edx,0x10(%ebp)
f0131955:	85 c0                	test   %eax,%eax
f0131957:	75 e3                	jne    f013193c <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131959:	eb 23                	jmp    f013197e <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f013195b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013195e:	8d 50 01             	lea    0x1(%eax),%edx
f0131961:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131964:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131967:	8d 4a 01             	lea    0x1(%edx),%ecx
f013196a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013196d:	8a 12                	mov    (%edx),%dl
f013196f:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131971:	8b 45 10             	mov    0x10(%ebp),%eax
f0131974:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131977:	89 55 10             	mov    %edx,0x10(%ebp)
f013197a:	85 c0                	test   %eax,%eax
f013197c:	75 dd                	jne    f013195b <memmove+0x54>
			*d++ = *s++;

	return dst;
f013197e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131981:	c9                   	leave  
f0131982:	c3                   	ret    

f0131983 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131983:	55                   	push   %ebp
f0131984:	89 e5                	mov    %esp,%ebp
f0131986:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131989:	8b 45 08             	mov    0x8(%ebp),%eax
f013198c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f013198f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131992:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131995:	eb 2a                	jmp    f01319c1 <memcmp+0x3e>
		if (*s1 != *s2)
f0131997:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013199a:	8a 10                	mov    (%eax),%dl
f013199c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013199f:	8a 00                	mov    (%eax),%al
f01319a1:	38 c2                	cmp    %al,%dl
f01319a3:	74 16                	je     f01319bb <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f01319a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01319a8:	8a 00                	mov    (%eax),%al
f01319aa:	0f b6 d0             	movzbl %al,%edx
f01319ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01319b0:	8a 00                	mov    (%eax),%al
f01319b2:	0f b6 c0             	movzbl %al,%eax
f01319b5:	29 c2                	sub    %eax,%edx
f01319b7:	89 d0                	mov    %edx,%eax
f01319b9:	eb 18                	jmp    f01319d3 <memcmp+0x50>
		s1++, s2++;
f01319bb:	ff 45 fc             	incl   -0x4(%ebp)
f01319be:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01319c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01319c4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01319c7:	89 55 10             	mov    %edx,0x10(%ebp)
f01319ca:	85 c0                	test   %eax,%eax
f01319cc:	75 c9                	jne    f0131997 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01319ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01319d3:	c9                   	leave  
f01319d4:	c3                   	ret    

f01319d5 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01319d5:	55                   	push   %ebp
f01319d6:	89 e5                	mov    %esp,%ebp
f01319d8:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01319db:	8b 55 08             	mov    0x8(%ebp),%edx
f01319de:	8b 45 10             	mov    0x10(%ebp),%eax
f01319e1:	01 d0                	add    %edx,%eax
f01319e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01319e6:	eb 15                	jmp    f01319fd <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01319e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01319eb:	8a 00                	mov    (%eax),%al
f01319ed:	0f b6 d0             	movzbl %al,%edx
f01319f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319f3:	0f b6 c0             	movzbl %al,%eax
f01319f6:	39 c2                	cmp    %eax,%edx
f01319f8:	74 0d                	je     f0131a07 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01319fa:	ff 45 08             	incl   0x8(%ebp)
f01319fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a00:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131a03:	72 e3                	jb     f01319e8 <memfind+0x13>
f0131a05:	eb 01                	jmp    f0131a08 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131a07:	90                   	nop
	return (void *) s;
f0131a08:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131a0b:	c9                   	leave  
f0131a0c:	c3                   	ret    

f0131a0d <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131a0d:	55                   	push   %ebp
f0131a0e:	89 e5                	mov    %esp,%ebp
f0131a10:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131a13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131a1a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131a21:	eb 03                	jmp    f0131a26 <strtol+0x19>
		s++;
f0131a23:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131a26:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a29:	8a 00                	mov    (%eax),%al
f0131a2b:	3c 20                	cmp    $0x20,%al
f0131a2d:	74 f4                	je     f0131a23 <strtol+0x16>
f0131a2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a32:	8a 00                	mov    (%eax),%al
f0131a34:	3c 09                	cmp    $0x9,%al
f0131a36:	74 eb                	je     f0131a23 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131a38:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a3b:	8a 00                	mov    (%eax),%al
f0131a3d:	3c 2b                	cmp    $0x2b,%al
f0131a3f:	75 05                	jne    f0131a46 <strtol+0x39>
		s++;
f0131a41:	ff 45 08             	incl   0x8(%ebp)
f0131a44:	eb 13                	jmp    f0131a59 <strtol+0x4c>
	else if (*s == '-')
f0131a46:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a49:	8a 00                	mov    (%eax),%al
f0131a4b:	3c 2d                	cmp    $0x2d,%al
f0131a4d:	75 0a                	jne    f0131a59 <strtol+0x4c>
		s++, neg = 1;
f0131a4f:	ff 45 08             	incl   0x8(%ebp)
f0131a52:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131a59:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131a5d:	74 06                	je     f0131a65 <strtol+0x58>
f0131a5f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131a63:	75 20                	jne    f0131a85 <strtol+0x78>
f0131a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a68:	8a 00                	mov    (%eax),%al
f0131a6a:	3c 30                	cmp    $0x30,%al
f0131a6c:	75 17                	jne    f0131a85 <strtol+0x78>
f0131a6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a71:	40                   	inc    %eax
f0131a72:	8a 00                	mov    (%eax),%al
f0131a74:	3c 78                	cmp    $0x78,%al
f0131a76:	75 0d                	jne    f0131a85 <strtol+0x78>
		s += 2, base = 16;
f0131a78:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131a7c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131a83:	eb 28                	jmp    f0131aad <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131a85:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131a89:	75 15                	jne    f0131aa0 <strtol+0x93>
f0131a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a8e:	8a 00                	mov    (%eax),%al
f0131a90:	3c 30                	cmp    $0x30,%al
f0131a92:	75 0c                	jne    f0131aa0 <strtol+0x93>
		s++, base = 8;
f0131a94:	ff 45 08             	incl   0x8(%ebp)
f0131a97:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131a9e:	eb 0d                	jmp    f0131aad <strtol+0xa0>
	else if (base == 0)
f0131aa0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131aa4:	75 07                	jne    f0131aad <strtol+0xa0>
		base = 10;
f0131aa6:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ab0:	8a 00                	mov    (%eax),%al
f0131ab2:	3c 2f                	cmp    $0x2f,%al
f0131ab4:	7e 19                	jle    f0131acf <strtol+0xc2>
f0131ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ab9:	8a 00                	mov    (%eax),%al
f0131abb:	3c 39                	cmp    $0x39,%al
f0131abd:	7f 10                	jg     f0131acf <strtol+0xc2>
			dig = *s - '0';
f0131abf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ac2:	8a 00                	mov    (%eax),%al
f0131ac4:	0f be c0             	movsbl %al,%eax
f0131ac7:	83 e8 30             	sub    $0x30,%eax
f0131aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131acd:	eb 42                	jmp    f0131b11 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131acf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ad2:	8a 00                	mov    (%eax),%al
f0131ad4:	3c 60                	cmp    $0x60,%al
f0131ad6:	7e 19                	jle    f0131af1 <strtol+0xe4>
f0131ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131adb:	8a 00                	mov    (%eax),%al
f0131add:	3c 7a                	cmp    $0x7a,%al
f0131adf:	7f 10                	jg     f0131af1 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131ae1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ae4:	8a 00                	mov    (%eax),%al
f0131ae6:	0f be c0             	movsbl %al,%eax
f0131ae9:	83 e8 57             	sub    $0x57,%eax
f0131aec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131aef:	eb 20                	jmp    f0131b11 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131af1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131af4:	8a 00                	mov    (%eax),%al
f0131af6:	3c 40                	cmp    $0x40,%al
f0131af8:	7e 39                	jle    f0131b33 <strtol+0x126>
f0131afa:	8b 45 08             	mov    0x8(%ebp),%eax
f0131afd:	8a 00                	mov    (%eax),%al
f0131aff:	3c 5a                	cmp    $0x5a,%al
f0131b01:	7f 30                	jg     f0131b33 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131b03:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b06:	8a 00                	mov    (%eax),%al
f0131b08:	0f be c0             	movsbl %al,%eax
f0131b0b:	83 e8 37             	sub    $0x37,%eax
f0131b0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b14:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131b17:	7d 19                	jge    f0131b32 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131b19:	ff 45 08             	incl   0x8(%ebp)
f0131b1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b1f:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131b23:	89 c2                	mov    %eax,%edx
f0131b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b28:	01 d0                	add    %edx,%eax
f0131b2a:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131b2d:	e9 7b ff ff ff       	jmp    f0131aad <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131b32:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131b33:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131b37:	74 08                	je     f0131b41 <strtol+0x134>
		*endptr = (char *) s;
f0131b39:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b3c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b3f:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131b41:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131b45:	74 07                	je     f0131b4e <strtol+0x141>
f0131b47:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b4a:	f7 d8                	neg    %eax
f0131b4c:	eb 03                	jmp    f0131b51 <strtol+0x144>
f0131b4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131b51:	c9                   	leave  
f0131b52:	c3                   	ret    

f0131b53 <ltostr>:

void
ltostr(long value, char *str)
{
f0131b53:	55                   	push   %ebp
f0131b54:	89 e5                	mov    %esp,%ebp
f0131b56:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131b59:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131b60:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131b67:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131b6b:	79 13                	jns    f0131b80 <ltostr+0x2d>
	{
		neg = 1;
f0131b6d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b77:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131b7a:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131b7d:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131b80:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b83:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131b88:	99                   	cltd   
f0131b89:	f7 f9                	idiv   %ecx
f0131b8b:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131b8e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131b91:	8d 50 01             	lea    0x1(%eax),%edx
f0131b94:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131b97:	89 c2                	mov    %eax,%edx
f0131b99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b9c:	01 d0                	add    %edx,%eax
f0131b9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ba1:	83 c2 30             	add    $0x30,%edx
f0131ba4:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131ba6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131ba9:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131bae:	f7 e9                	imul   %ecx
f0131bb0:	c1 fa 02             	sar    $0x2,%edx
f0131bb3:	89 c8                	mov    %ecx,%eax
f0131bb5:	c1 f8 1f             	sar    $0x1f,%eax
f0131bb8:	29 c2                	sub    %eax,%edx
f0131bba:	89 d0                	mov    %edx,%eax
f0131bbc:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131bbf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131bc2:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131bc7:	f7 e9                	imul   %ecx
f0131bc9:	c1 fa 02             	sar    $0x2,%edx
f0131bcc:	89 c8                	mov    %ecx,%eax
f0131bce:	c1 f8 1f             	sar    $0x1f,%eax
f0131bd1:	29 c2                	sub    %eax,%edx
f0131bd3:	89 d0                	mov    %edx,%eax
f0131bd5:	c1 e0 02             	shl    $0x2,%eax
f0131bd8:	01 d0                	add    %edx,%eax
f0131bda:	01 c0                	add    %eax,%eax
f0131bdc:	29 c1                	sub    %eax,%ecx
f0131bde:	89 ca                	mov    %ecx,%edx
f0131be0:	85 d2                	test   %edx,%edx
f0131be2:	75 9c                	jne    f0131b80 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131be4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131beb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131bee:	48                   	dec    %eax
f0131bef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131bf2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131bf6:	74 3d                	je     f0131c35 <ltostr+0xe2>
		start = 1 ;
f0131bf8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131bff:	eb 34                	jmp    f0131c35 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131c01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c04:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c07:	01 d0                	add    %edx,%eax
f0131c09:	8a 00                	mov    (%eax),%al
f0131c0b:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131c0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131c11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c14:	01 c2                	add    %eax,%edx
f0131c16:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131c19:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c1c:	01 c8                	add    %ecx,%eax
f0131c1e:	8a 00                	mov    (%eax),%al
f0131c20:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131c22:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c28:	01 c2                	add    %eax,%edx
f0131c2a:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131c2d:	88 02                	mov    %al,(%edx)
		start++ ;
f0131c2f:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131c32:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c38:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131c3b:	7c c4                	jl     f0131c01 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131c3d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131c40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c43:	01 d0                	add    %edx,%eax
f0131c45:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131c48:	90                   	nop
f0131c49:	c9                   	leave  
f0131c4a:	c3                   	ret    

f0131c4b <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131c4b:	55                   	push   %ebp
f0131c4c:	89 e5                	mov    %esp,%ebp
f0131c4e:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131c51:	ff 75 08             	pushl  0x8(%ebp)
f0131c54:	e8 54 fa ff ff       	call   f01316ad <strlen>
f0131c59:	83 c4 04             	add    $0x4,%esp
f0131c5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131c5f:	ff 75 0c             	pushl  0xc(%ebp)
f0131c62:	e8 46 fa ff ff       	call   f01316ad <strlen>
f0131c67:	83 c4 04             	add    $0x4,%esp
f0131c6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131c6d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131c74:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131c7b:	eb 17                	jmp    f0131c94 <strcconcat+0x49>
		final[s] = str1[s] ;
f0131c7d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c80:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c83:	01 c2                	add    %eax,%edx
f0131c85:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131c88:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c8b:	01 c8                	add    %ecx,%eax
f0131c8d:	8a 00                	mov    (%eax),%al
f0131c8f:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131c91:	ff 45 fc             	incl   -0x4(%ebp)
f0131c94:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131c9a:	7c e1                	jl     f0131c7d <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131c9c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131ca3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131caa:	eb 1f                	jmp    f0131ccb <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131cac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131caf:	8d 50 01             	lea    0x1(%eax),%edx
f0131cb2:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131cb5:	89 c2                	mov    %eax,%edx
f0131cb7:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cba:	01 c2                	add    %eax,%edx
f0131cbc:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131cc2:	01 c8                	add    %ecx,%eax
f0131cc4:	8a 00                	mov    (%eax),%al
f0131cc6:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131cc8:	ff 45 f8             	incl   -0x8(%ebp)
f0131ccb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131cd1:	7c d9                	jl     f0131cac <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131cd3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131cd6:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cd9:	01 d0                	add    %edx,%eax
f0131cdb:	c6 00 00             	movb   $0x0,(%eax)
}
f0131cde:	90                   	nop
f0131cdf:	c9                   	leave  
f0131ce0:	c3                   	ret    

f0131ce1 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131ce1:	55                   	push   %ebp
f0131ce2:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131ce4:	8b 45 14             	mov    0x14(%ebp),%eax
f0131ce7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131ced:	8b 45 14             	mov    0x14(%ebp),%eax
f0131cf0:	8b 00                	mov    (%eax),%eax
f0131cf2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131cf9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cfc:	01 d0                	add    %edx,%eax
f0131cfe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131d04:	eb 0c                	jmp    f0131d12 <strsplit+0x31>
			*string++ = 0;
f0131d06:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d09:	8d 50 01             	lea    0x1(%eax),%edx
f0131d0c:	89 55 08             	mov    %edx,0x8(%ebp)
f0131d0f:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131d12:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d15:	8a 00                	mov    (%eax),%al
f0131d17:	84 c0                	test   %al,%al
f0131d19:	74 18                	je     f0131d33 <strsplit+0x52>
f0131d1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d1e:	8a 00                	mov    (%eax),%al
f0131d20:	0f be c0             	movsbl %al,%eax
f0131d23:	50                   	push   %eax
f0131d24:	ff 75 0c             	pushl  0xc(%ebp)
f0131d27:	e8 13 fb ff ff       	call   f013183f <strchr>
f0131d2c:	83 c4 08             	add    $0x8,%esp
f0131d2f:	85 c0                	test   %eax,%eax
f0131d31:	75 d3                	jne    f0131d06 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131d33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d36:	8a 00                	mov    (%eax),%al
f0131d38:	84 c0                	test   %al,%al
f0131d3a:	74 5a                	je     f0131d96 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131d3c:	8b 45 14             	mov    0x14(%ebp),%eax
f0131d3f:	8b 00                	mov    (%eax),%eax
f0131d41:	83 f8 0f             	cmp    $0xf,%eax
f0131d44:	75 07                	jne    f0131d4d <strsplit+0x6c>
		{
			return 0;
f0131d46:	b8 00 00 00 00       	mov    $0x0,%eax
f0131d4b:	eb 66                	jmp    f0131db3 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131d4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131d50:	8b 00                	mov    (%eax),%eax
f0131d52:	8d 48 01             	lea    0x1(%eax),%ecx
f0131d55:	8b 55 14             	mov    0x14(%ebp),%edx
f0131d58:	89 0a                	mov    %ecx,(%edx)
f0131d5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131d61:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d64:	01 c2                	add    %eax,%edx
f0131d66:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d69:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131d6b:	eb 03                	jmp    f0131d70 <strsplit+0x8f>
			string++;
f0131d6d:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131d70:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d73:	8a 00                	mov    (%eax),%al
f0131d75:	84 c0                	test   %al,%al
f0131d77:	74 8b                	je     f0131d04 <strsplit+0x23>
f0131d79:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d7c:	8a 00                	mov    (%eax),%al
f0131d7e:	0f be c0             	movsbl %al,%eax
f0131d81:	50                   	push   %eax
f0131d82:	ff 75 0c             	pushl  0xc(%ebp)
f0131d85:	e8 b5 fa ff ff       	call   f013183f <strchr>
f0131d8a:	83 c4 08             	add    $0x8,%esp
f0131d8d:	85 c0                	test   %eax,%eax
f0131d8f:	74 dc                	je     f0131d6d <strsplit+0x8c>
			string++;
	}
f0131d91:	e9 6e ff ff ff       	jmp    f0131d04 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131d96:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131d97:	8b 45 14             	mov    0x14(%ebp),%eax
f0131d9a:	8b 00                	mov    (%eax),%eax
f0131d9c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131da3:	8b 45 10             	mov    0x10(%ebp),%eax
f0131da6:	01 d0                	add    %edx,%eax
f0131da8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131dae:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131db3:	c9                   	leave  
f0131db4:	c3                   	ret    

f0131db5 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131db5:	55                   	push   %ebp
f0131db6:	89 e5                	mov    %esp,%ebp
f0131db8:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131dbb:	90                   	nop
f0131dbc:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131dc3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131dc6:	89 c2                	mov    %eax,%edx
f0131dc8:	ec                   	in     (%dx),%al
f0131dc9:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131dcc:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131dcf:	0f b6 c0             	movzbl %al,%eax
f0131dd2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131dd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131dd8:	25 c0 00 00 00       	and    $0xc0,%eax
f0131ddd:	83 f8 40             	cmp    $0x40,%eax
f0131de0:	75 da                	jne    f0131dbc <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131de2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131de6:	74 11                	je     f0131df9 <ide_wait_ready+0x44>
f0131de8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131deb:	83 e0 21             	and    $0x21,%eax
f0131dee:	85 c0                	test   %eax,%eax
f0131df0:	74 07                	je     f0131df9 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131df2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131df7:	eb 05                	jmp    f0131dfe <ide_wait_ready+0x49>
	}
	return 0;
f0131df9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131dfe:	c9                   	leave  
f0131dff:	c3                   	ret    

f0131e00 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131e00:	55                   	push   %ebp
f0131e01:	89 e5                	mov    %esp,%ebp
f0131e03:	57                   	push   %edi
f0131e04:	53                   	push   %ebx
f0131e05:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131e08:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131e0f:	76 16                	jbe    f0131e27 <ide_read+0x27>
f0131e11:	68 e3 d8 13 f0       	push   $0xf013d8e3
f0131e16:	68 f0 d8 13 f0       	push   $0xf013d8f0
f0131e1b:	6a 25                	push   $0x25
f0131e1d:	68 05 d9 13 f0       	push   $0xf013d905
f0131e22:	e8 de e3 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131e27:	83 ec 0c             	sub    $0xc,%esp
f0131e2a:	6a 00                	push   $0x0
f0131e2c:	e8 84 ff ff ff       	call   f0131db5 <ide_wait_ready>
f0131e31:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131e34:	8b 45 10             	mov    0x10(%ebp),%eax
f0131e37:	0f b6 c0             	movzbl %al,%eax
f0131e3a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131e41:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131e44:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131e47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131e4a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131e4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e4e:	0f b6 c0             	movzbl %al,%eax
f0131e51:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131e58:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131e5b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131e5e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131e61:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131e62:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e65:	c1 e8 08             	shr    $0x8,%eax
f0131e68:	0f b6 c0             	movzbl %al,%eax
f0131e6b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131e72:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131e75:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131e78:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131e7b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e7f:	c1 e8 10             	shr    $0x10,%eax
f0131e82:	0f b6 c0             	movzbl %al,%eax
f0131e85:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131e8c:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131e8f:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131e92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131e95:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131e96:	a1 ac ac 89 f0       	mov    0xf089acac,%eax
f0131e9b:	83 e0 01             	and    $0x1,%eax
f0131e9e:	c1 e0 04             	shl    $0x4,%eax
f0131ea1:	88 c2                	mov    %al,%dl
f0131ea3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ea6:	c1 e8 18             	shr    $0x18,%eax
f0131ea9:	83 e0 0f             	and    $0xf,%eax
f0131eac:	09 d0                	or     %edx,%eax
f0131eae:	83 c8 e0             	or     $0xffffffe0,%eax
f0131eb1:	0f b6 c0             	movzbl %al,%eax
f0131eb4:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131ebb:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131ebe:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131ec1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131ec4:	ee                   	out    %al,(%dx)
f0131ec5:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131ecc:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131ed0:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131ed3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131ed6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131ed7:	eb 55                	jmp    f0131f2e <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131ed9:	83 ec 0c             	sub    $0xc,%esp
f0131edc:	6a 01                	push   $0x1
f0131ede:	e8 d2 fe ff ff       	call   f0131db5 <ide_wait_ready>
f0131ee3:	83 c4 10             	add    $0x10,%esp
f0131ee6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131ee9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131eed:	79 05                	jns    f0131ef4 <ide_read+0xf4>
			return r;
f0131eef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131ef2:	eb 45                	jmp    f0131f39 <ide_read+0x139>
f0131ef4:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131efb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131efe:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131f01:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131f08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f0b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131f0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131f11:	89 cb                	mov    %ecx,%ebx
f0131f13:	89 df                	mov    %ebx,%edi
f0131f15:	89 c1                	mov    %eax,%ecx
f0131f17:	fc                   	cld    
f0131f18:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131f1a:	89 c8                	mov    %ecx,%eax
f0131f1c:	89 fb                	mov    %edi,%ebx
f0131f1e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131f21:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131f24:	ff 4d 10             	decl   0x10(%ebp)
f0131f27:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131f2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131f32:	75 a5                	jne    f0131ed9 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131f34:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131f39:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131f3c:	5b                   	pop    %ebx
f0131f3d:	5f                   	pop    %edi
f0131f3e:	5d                   	pop    %ebp
f0131f3f:	c3                   	ret    

f0131f40 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131f40:	55                   	push   %ebp
f0131f41:	89 e5                	mov    %esp,%ebp
f0131f43:	56                   	push   %esi
f0131f44:	53                   	push   %ebx
f0131f45:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131f48:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131f4f:	76 16                	jbe    f0131f67 <ide_write+0x27>
f0131f51:	68 e3 d8 13 f0       	push   $0xf013d8e3
f0131f56:	68 f0 d8 13 f0       	push   $0xf013d8f0
f0131f5b:	6a 3e                	push   $0x3e
f0131f5d:	68 05 d9 13 f0       	push   $0xf013d905
f0131f62:	e8 9e e2 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131f67:	83 ec 0c             	sub    $0xc,%esp
f0131f6a:	6a 00                	push   $0x0
f0131f6c:	e8 44 fe ff ff       	call   f0131db5 <ide_wait_ready>
f0131f71:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131f74:	8b 45 10             	mov    0x10(%ebp),%eax
f0131f77:	0f b6 c0             	movzbl %al,%eax
f0131f7a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131f81:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131f84:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131f87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f8a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f8e:	0f b6 c0             	movzbl %al,%eax
f0131f91:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131f98:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131f9b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131f9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131fa1:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa5:	c1 e8 08             	shr    $0x8,%eax
f0131fa8:	0f b6 c0             	movzbl %al,%eax
f0131fab:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131fb2:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131fb5:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131fb8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131fbb:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131fbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fbf:	c1 e8 10             	shr    $0x10,%eax
f0131fc2:	0f b6 c0             	movzbl %al,%eax
f0131fc5:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131fcc:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131fcf:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131fd2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131fd5:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131fd6:	a1 ac ac 89 f0       	mov    0xf089acac,%eax
f0131fdb:	83 e0 01             	and    $0x1,%eax
f0131fde:	c1 e0 04             	shl    $0x4,%eax
f0131fe1:	88 c2                	mov    %al,%dl
f0131fe3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fe6:	c1 e8 18             	shr    $0x18,%eax
f0131fe9:	83 e0 0f             	and    $0xf,%eax
f0131fec:	09 d0                	or     %edx,%eax
f0131fee:	83 c8 e0             	or     $0xffffffe0,%eax
f0131ff1:	0f b6 c0             	movzbl %al,%eax
f0131ff4:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131ffb:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131ffe:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132001:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132004:	ee                   	out    %al,(%dx)
f0132005:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013200c:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0132010:	8a 45 d7             	mov    -0x29(%ebp),%al
f0132013:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0132016:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0132017:	eb 55                	jmp    f013206e <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0132019:	83 ec 0c             	sub    $0xc,%esp
f013201c:	6a 01                	push   $0x1
f013201e:	e8 92 fd ff ff       	call   f0131db5 <ide_wait_ready>
f0132023:	83 c4 10             	add    $0x10,%esp
f0132026:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0132029:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013202d:	79 05                	jns    f0132034 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f013202f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132032:	eb 45                	jmp    f0132079 <ide_write+0x139>
f0132034:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013203b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013203e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132041:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0132048:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013204b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013204e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132051:	89 cb                	mov    %ecx,%ebx
f0132053:	89 de                	mov    %ebx,%esi
f0132055:	89 c1                	mov    %eax,%ecx
f0132057:	fc                   	cld    
f0132058:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f013205a:	89 c8                	mov    %ecx,%eax
f013205c:	89 f3                	mov    %esi,%ebx
f013205e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132061:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0132064:	ff 4d 10             	decl   0x10(%ebp)
f0132067:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013206e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0132072:	75 a5                	jne    f0132019 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0132074:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132079:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013207c:	5b                   	pop    %ebx
f013207d:	5e                   	pop    %esi
f013207e:	5d                   	pop    %ebp
f013207f:	c3                   	ret    

f0132080 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0132080:	55                   	push   %ebp
f0132081:	89 e5                	mov    %esp,%ebp
f0132083:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0132086:	83 ec 0c             	sub    $0xc,%esp
f0132089:	68 10 d9 13 f0       	push   $0xf013d910
f013208e:	e8 7b ec fc ff       	call   f0100d0e <cprintf>
f0132093:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0132096:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f013209d:	83 ec 0c             	sub    $0xc,%esp
f01320a0:	68 3c d9 13 f0       	push   $0xf013d93c
f01320a5:	e8 64 ec fc ff       	call   f0100d0e <cprintf>
f01320aa:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01320ad:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01320b1:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01320b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320b9:	eb 56                	jmp    f0132111 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01320bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01320bf:	74 1c                	je     f01320dd <print_mem_block_lists+0x5d>
f01320c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c4:	8b 50 08             	mov    0x8(%eax),%edx
f01320c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320ca:	8b 48 08             	mov    0x8(%eax),%ecx
f01320cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320d0:	8b 40 0c             	mov    0xc(%eax),%eax
f01320d3:	01 c8                	add    %ecx,%eax
f01320d5:	39 c2                	cmp    %eax,%edx
f01320d7:	73 04                	jae    f01320dd <print_mem_block_lists+0x5d>
			sorted = 0 ;
f01320d9:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01320dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320e0:	8b 50 08             	mov    0x8(%eax),%edx
f01320e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320e6:	8b 40 0c             	mov    0xc(%eax),%eax
f01320e9:	01 c2                	add    %eax,%edx
f01320eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320ee:	8b 40 08             	mov    0x8(%eax),%eax
f01320f1:	83 ec 04             	sub    $0x4,%esp
f01320f4:	52                   	push   %edx
f01320f5:	50                   	push   %eax
f01320f6:	68 51 d9 13 f0       	push   $0xf013d951
f01320fb:	e8 0e ec fc ff       	call   f0100d0e <cprintf>
f0132100:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132106:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132109:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f013210e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132111:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132115:	74 07                	je     f013211e <print_mem_block_lists+0x9e>
f0132117:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013211a:	8b 00                	mov    (%eax),%eax
f013211c:	eb 05                	jmp    f0132123 <print_mem_block_lists+0xa3>
f013211e:	b8 00 00 00 00       	mov    $0x0,%eax
f0132123:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132128:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f013212d:	85 c0                	test   %eax,%eax
f013212f:	75 8a                	jne    f01320bb <print_mem_block_lists+0x3b>
f0132131:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132135:	75 84                	jne    f01320bb <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0132137:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013213b:	75 10                	jne    f013214d <print_mem_block_lists+0xcd>
f013213d:	83 ec 0c             	sub    $0xc,%esp
f0132140:	68 60 d9 13 f0       	push   $0xf013d960
f0132145:	e8 c4 eb fc ff       	call   f0100d0e <cprintf>
f013214a:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f013214d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0132154:	83 ec 0c             	sub    $0xc,%esp
f0132157:	68 84 d9 13 f0       	push   $0xf013d984
f013215c:	e8 ad eb fc ff       	call   f0100d0e <cprintf>
f0132161:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0132164:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0132168:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f013216d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132170:	eb 56                	jmp    f01321c8 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0132172:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132176:	74 1c                	je     f0132194 <print_mem_block_lists+0x114>
f0132178:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013217b:	8b 50 08             	mov    0x8(%eax),%edx
f013217e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132181:	8b 48 08             	mov    0x8(%eax),%ecx
f0132184:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132187:	8b 40 0c             	mov    0xc(%eax),%eax
f013218a:	01 c8                	add    %ecx,%eax
f013218c:	39 c2                	cmp    %eax,%edx
f013218e:	73 04                	jae    f0132194 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0132190:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132194:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132197:	8b 50 08             	mov    0x8(%eax),%edx
f013219a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013219d:	8b 40 0c             	mov    0xc(%eax),%eax
f01321a0:	01 c2                	add    %eax,%edx
f01321a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321a5:	8b 40 08             	mov    0x8(%eax),%eax
f01321a8:	83 ec 04             	sub    $0x4,%esp
f01321ab:	52                   	push   %edx
f01321ac:	50                   	push   %eax
f01321ad:	68 51 d9 13 f0       	push   $0xf013d951
f01321b2:	e8 57 eb fc ff       	call   f0100d0e <cprintf>
f01321b7:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01321ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01321c0:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01321c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01321c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01321cc:	74 07                	je     f01321d5 <print_mem_block_lists+0x155>
f01321ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321d1:	8b 00                	mov    (%eax),%eax
f01321d3:	eb 05                	jmp    f01321da <print_mem_block_lists+0x15a>
f01321d5:	b8 00 00 00 00       	mov    $0x0,%eax
f01321da:	a3 d0 ac 89 f0       	mov    %eax,0xf089acd0
f01321df:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01321e4:	85 c0                	test   %eax,%eax
f01321e6:	75 8a                	jne    f0132172 <print_mem_block_lists+0xf2>
f01321e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01321ec:	75 84                	jne    f0132172 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f01321ee:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01321f2:	75 10                	jne    f0132204 <print_mem_block_lists+0x184>
f01321f4:	83 ec 0c             	sub    $0xc,%esp
f01321f7:	68 9c d9 13 f0       	push   $0xf013d99c
f01321fc:	e8 0d eb fc ff       	call   f0100d0e <cprintf>
f0132201:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0132204:	83 ec 0c             	sub    $0xc,%esp
f0132207:	68 10 d9 13 f0       	push   $0xf013d910
f013220c:	e8 fd ea fc ff       	call   f0100d0e <cprintf>
f0132211:	83 c4 10             	add    $0x10,%esp

}
f0132214:	90                   	nop
f0132215:	c9                   	leave  
f0132216:	c3                   	ret    

f0132217 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0132217:	55                   	push   %ebp
f0132218:	89 e5                	mov    %esp,%ebp
f013221a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f013221d:	c7 05 98 ad 89 f0 00 	movl   $0x0,0xf089ad98
f0132224:	00 00 00 
f0132227:	c7 05 9c ad 89 f0 00 	movl   $0x0,0xf089ad9c
f013222e:	00 00 00 
f0132231:	c7 05 a4 ad 89 f0 00 	movl   $0x0,0xf089ada4
f0132238:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f013223b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0132242:	e9 9e 00 00 00       	jmp    f01322e5 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0132247:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f013224c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013224f:	c1 e2 04             	shl    $0x4,%edx
f0132252:	01 d0                	add    %edx,%eax
f0132254:	85 c0                	test   %eax,%eax
f0132256:	75 14                	jne    f013226c <initialize_MemBlocksList+0x55>
f0132258:	83 ec 04             	sub    $0x4,%esp
f013225b:	68 c4 d9 13 f0       	push   $0xf013d9c4
f0132260:	6a 46                	push   $0x46
f0132262:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132267:	e8 99 df fc ff       	call   f0100205 <_panic>
f013226c:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f0132271:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132274:	c1 e2 04             	shl    $0x4,%edx
f0132277:	01 d0                	add    %edx,%eax
f0132279:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f013227f:	89 10                	mov    %edx,(%eax)
f0132281:	8b 00                	mov    (%eax),%eax
f0132283:	85 c0                	test   %eax,%eax
f0132285:	74 18                	je     f013229f <initialize_MemBlocksList+0x88>
f0132287:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f013228c:	8b 15 d8 ac 89 f0    	mov    0xf089acd8,%edx
f0132292:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0132295:	c1 e1 04             	shl    $0x4,%ecx
f0132298:	01 ca                	add    %ecx,%edx
f013229a:	89 50 04             	mov    %edx,0x4(%eax)
f013229d:	eb 12                	jmp    f01322b1 <initialize_MemBlocksList+0x9a>
f013229f:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01322a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01322a7:	c1 e2 04             	shl    $0x4,%edx
f01322aa:	01 d0                	add    %edx,%eax
f01322ac:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f01322b1:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01322b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01322b9:	c1 e2 04             	shl    $0x4,%edx
f01322bc:	01 d0                	add    %edx,%eax
f01322be:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f01322c3:	a1 d8 ac 89 f0       	mov    0xf089acd8,%eax
f01322c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01322cb:	c1 e2 04             	shl    $0x4,%edx
f01322ce:	01 d0                	add    %edx,%eax
f01322d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322d7:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01322dc:	40                   	inc    %eax
f01322dd:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f01322e2:	ff 45 f4             	incl   -0xc(%ebp)
f01322e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01322eb:	0f 82 56 ff ff ff    	jb     f0132247 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f01322f1:	90                   	nop
f01322f2:	c9                   	leave  
f01322f3:	c3                   	ret    

f01322f4 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01322f4:	55                   	push   %ebp
f01322f5:	89 e5                	mov    %esp,%ebp
f01322f7:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01322fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01322fd:	8b 00                	mov    (%eax),%eax
f01322ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132302:	eb 19                	jmp    f013231d <find_block+0x29>
	{
		if(va==point->sva)
f0132304:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132307:	8b 40 08             	mov    0x8(%eax),%eax
f013230a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f013230d:	75 05                	jne    f0132314 <find_block+0x20>
		   return point;
f013230f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132312:	eb 36                	jmp    f013234a <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0132314:	8b 45 08             	mov    0x8(%ebp),%eax
f0132317:	8b 40 08             	mov    0x8(%eax),%eax
f013231a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013231d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132321:	74 07                	je     f013232a <find_block+0x36>
f0132323:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132326:	8b 00                	mov    (%eax),%eax
f0132328:	eb 05                	jmp    f013232f <find_block+0x3b>
f013232a:	b8 00 00 00 00       	mov    $0x0,%eax
f013232f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132332:	89 42 08             	mov    %eax,0x8(%edx)
f0132335:	8b 45 08             	mov    0x8(%ebp),%eax
f0132338:	8b 40 08             	mov    0x8(%eax),%eax
f013233b:	85 c0                	test   %eax,%eax
f013233d:	75 c5                	jne    f0132304 <find_block+0x10>
f013233f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132343:	75 bf                	jne    f0132304 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0132345:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013234a:	c9                   	leave  
f013234b:	c3                   	ret    

f013234c <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f013234c:	55                   	push   %ebp
f013234d:	89 e5                	mov    %esp,%ebp
f013234f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0132352:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f0132357:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f013235a:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f013235f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0132362:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132365:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0132368:	74 24                	je     f013238e <insert_sorted_allocList+0x42>
f013236a:	8b 45 08             	mov    0x8(%ebp),%eax
f013236d:	8b 50 08             	mov    0x8(%eax),%edx
f0132370:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132373:	8b 40 08             	mov    0x8(%eax),%eax
f0132376:	39 c2                	cmp    %eax,%edx
f0132378:	76 14                	jbe    f013238e <insert_sorted_allocList+0x42>
f013237a:	8b 45 08             	mov    0x8(%ebp),%eax
f013237d:	8b 50 08             	mov    0x8(%eax),%edx
f0132380:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132383:	8b 40 08             	mov    0x8(%eax),%eax
f0132386:	39 c2                	cmp    %eax,%edx
f0132388:	0f 82 60 01 00 00    	jb     f01324ee <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f013238e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132392:	75 65                	jne    f01323f9 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0132394:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132398:	75 14                	jne    f01323ae <insert_sorted_allocList+0x62>
f013239a:	83 ec 04             	sub    $0x4,%esp
f013239d:	68 c4 d9 13 f0       	push   $0xf013d9c4
f01323a2:	6a 6b                	push   $0x6b
f01323a4:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01323a9:	e8 57 de fc ff       	call   f0100205 <_panic>
f01323ae:	8b 15 c8 ac 89 f0    	mov    0xf089acc8,%edx
f01323b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01323b7:	89 10                	mov    %edx,(%eax)
f01323b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01323bc:	8b 00                	mov    (%eax),%eax
f01323be:	85 c0                	test   %eax,%eax
f01323c0:	74 0d                	je     f01323cf <insert_sorted_allocList+0x83>
f01323c2:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f01323c7:	8b 55 08             	mov    0x8(%ebp),%edx
f01323ca:	89 50 04             	mov    %edx,0x4(%eax)
f01323cd:	eb 08                	jmp    f01323d7 <insert_sorted_allocList+0x8b>
f01323cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01323d2:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f01323d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01323da:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f01323df:	8b 45 08             	mov    0x8(%ebp),%eax
f01323e2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01323e9:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01323ee:	40                   	inc    %eax
f01323ef:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01323f4:	e9 dc 01 00 00       	jmp    f01325d5 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f01323f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01323fc:	8b 50 08             	mov    0x8(%eax),%edx
f01323ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132402:	8b 40 08             	mov    0x8(%eax),%eax
f0132405:	39 c2                	cmp    %eax,%edx
f0132407:	77 6c                	ja     f0132475 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0132409:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013240d:	74 06                	je     f0132415 <insert_sorted_allocList+0xc9>
f013240f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132413:	75 14                	jne    f0132429 <insert_sorted_allocList+0xdd>
f0132415:	83 ec 04             	sub    $0x4,%esp
f0132418:	68 00 da 13 f0       	push   $0xf013da00
f013241d:	6a 6f                	push   $0x6f
f013241f:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132424:	e8 dc dd fc ff       	call   f0100205 <_panic>
f0132429:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013242c:	8b 50 04             	mov    0x4(%eax),%edx
f013242f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132432:	89 50 04             	mov    %edx,0x4(%eax)
f0132435:	8b 45 08             	mov    0x8(%ebp),%eax
f0132438:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013243b:	89 10                	mov    %edx,(%eax)
f013243d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132440:	8b 40 04             	mov    0x4(%eax),%eax
f0132443:	85 c0                	test   %eax,%eax
f0132445:	74 0d                	je     f0132454 <insert_sorted_allocList+0x108>
f0132447:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013244a:	8b 40 04             	mov    0x4(%eax),%eax
f013244d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132450:	89 10                	mov    %edx,(%eax)
f0132452:	eb 08                	jmp    f013245c <insert_sorted_allocList+0x110>
f0132454:	8b 45 08             	mov    0x8(%ebp),%eax
f0132457:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f013245c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013245f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132462:	89 50 04             	mov    %edx,0x4(%eax)
f0132465:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f013246a:	40                   	inc    %eax
f013246b:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0132470:	e9 60 01 00 00       	jmp    f01325d5 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0132475:	8b 45 08             	mov    0x8(%ebp),%eax
f0132478:	8b 50 08             	mov    0x8(%eax),%edx
f013247b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013247e:	8b 40 08             	mov    0x8(%eax),%eax
f0132481:	39 c2                	cmp    %eax,%edx
f0132483:	0f 82 4c 01 00 00    	jb     f01325d5 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0132489:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013248d:	75 14                	jne    f01324a3 <insert_sorted_allocList+0x157>
f013248f:	83 ec 04             	sub    $0x4,%esp
f0132492:	68 38 da 13 f0       	push   $0xf013da38
f0132497:	6a 73                	push   $0x73
f0132499:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013249e:	e8 62 dd fc ff       	call   f0100205 <_panic>
f01324a3:	8b 15 cc ac 89 f0    	mov    0xf089accc,%edx
f01324a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01324ac:	89 50 04             	mov    %edx,0x4(%eax)
f01324af:	8b 45 08             	mov    0x8(%ebp),%eax
f01324b2:	8b 40 04             	mov    0x4(%eax),%eax
f01324b5:	85 c0                	test   %eax,%eax
f01324b7:	74 0c                	je     f01324c5 <insert_sorted_allocList+0x179>
f01324b9:	a1 cc ac 89 f0       	mov    0xf089accc,%eax
f01324be:	8b 55 08             	mov    0x8(%ebp),%edx
f01324c1:	89 10                	mov    %edx,(%eax)
f01324c3:	eb 08                	jmp    f01324cd <insert_sorted_allocList+0x181>
f01324c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01324c8:	a3 c8 ac 89 f0       	mov    %eax,0xf089acc8
f01324cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01324d0:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f01324d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01324d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01324de:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f01324e3:	40                   	inc    %eax
f01324e4:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01324e9:	e9 e7 00 00 00       	jmp    f01325d5 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f01324ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f01324f4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01324fb:	a1 c8 ac 89 f0       	mov    0xf089acc8,%eax
f0132500:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132503:	e9 9d 00 00 00       	jmp    f01325a5 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0132508:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013250b:	8b 00                	mov    (%eax),%eax
f013250d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0132510:	8b 45 08             	mov    0x8(%ebp),%eax
f0132513:	8b 50 08             	mov    0x8(%eax),%edx
f0132516:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132519:	8b 40 08             	mov    0x8(%eax),%eax
f013251c:	39 c2                	cmp    %eax,%edx
f013251e:	76 7d                	jbe    f013259d <insert_sorted_allocList+0x251>
f0132520:	8b 45 08             	mov    0x8(%ebp),%eax
f0132523:	8b 50 08             	mov    0x8(%eax),%edx
f0132526:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132529:	8b 40 08             	mov    0x8(%eax),%eax
f013252c:	39 c2                	cmp    %eax,%edx
f013252e:	73 6d                	jae    f013259d <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0132530:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132534:	74 06                	je     f013253c <insert_sorted_allocList+0x1f0>
f0132536:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013253a:	75 14                	jne    f0132550 <insert_sorted_allocList+0x204>
f013253c:	83 ec 04             	sub    $0x4,%esp
f013253f:	68 5c da 13 f0       	push   $0xf013da5c
f0132544:	6a 7f                	push   $0x7f
f0132546:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013254b:	e8 b5 dc fc ff       	call   f0100205 <_panic>
f0132550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132553:	8b 10                	mov    (%eax),%edx
f0132555:	8b 45 08             	mov    0x8(%ebp),%eax
f0132558:	89 10                	mov    %edx,(%eax)
f013255a:	8b 45 08             	mov    0x8(%ebp),%eax
f013255d:	8b 00                	mov    (%eax),%eax
f013255f:	85 c0                	test   %eax,%eax
f0132561:	74 0b                	je     f013256e <insert_sorted_allocList+0x222>
f0132563:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132566:	8b 00                	mov    (%eax),%eax
f0132568:	8b 55 08             	mov    0x8(%ebp),%edx
f013256b:	89 50 04             	mov    %edx,0x4(%eax)
f013256e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132571:	8b 55 08             	mov    0x8(%ebp),%edx
f0132574:	89 10                	mov    %edx,(%eax)
f0132576:	8b 45 08             	mov    0x8(%ebp),%eax
f0132579:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013257c:	89 50 04             	mov    %edx,0x4(%eax)
f013257f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132582:	8b 00                	mov    (%eax),%eax
f0132584:	85 c0                	test   %eax,%eax
f0132586:	75 08                	jne    f0132590 <insert_sorted_allocList+0x244>
f0132588:	8b 45 08             	mov    0x8(%ebp),%eax
f013258b:	a3 cc ac 89 f0       	mov    %eax,0xf089accc
f0132590:	a1 d4 ac 89 f0       	mov    0xf089acd4,%eax
f0132595:	40                   	inc    %eax
f0132596:	a3 d4 ac 89 f0       	mov    %eax,0xf089acd4
				break;
f013259b:	eb 39                	jmp    f01325d6 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f013259d:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01325a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01325a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325a9:	74 07                	je     f01325b2 <insert_sorted_allocList+0x266>
f01325ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325ae:	8b 00                	mov    (%eax),%eax
f01325b0:	eb 05                	jmp    f01325b7 <insert_sorted_allocList+0x26b>
f01325b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01325b7:	a3 d0 ac 89 f0       	mov    %eax,0xf089acd0
f01325bc:	a1 d0 ac 89 f0       	mov    0xf089acd0,%eax
f01325c1:	85 c0                	test   %eax,%eax
f01325c3:	0f 85 3f ff ff ff    	jne    f0132508 <insert_sorted_allocList+0x1bc>
f01325c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325cd:	0f 85 35 ff ff ff    	jne    f0132508 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01325d3:	eb 01                	jmp    f01325d6 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01325d5:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01325d6:	90                   	nop
f01325d7:	c9                   	leave  
f01325d8:	c3                   	ret    

f01325d9 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f01325d9:	55                   	push   %ebp
f01325da:	89 e5                	mov    %esp,%ebp
f01325dc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01325df:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01325e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01325e7:	e9 85 01 00 00       	jmp    f0132771 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f01325ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325ef:	8b 40 0c             	mov    0xc(%eax),%eax
f01325f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325f5:	0f 82 6e 01 00 00    	jb     f0132769 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f01325fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325fe:	8b 40 0c             	mov    0xc(%eax),%eax
f0132601:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132604:	0f 85 8a 00 00 00    	jne    f0132694 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f013260a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013260e:	75 17                	jne    f0132627 <alloc_block_FF+0x4e>
f0132610:	83 ec 04             	sub    $0x4,%esp
f0132613:	68 90 da 13 f0       	push   $0xf013da90
f0132618:	68 93 00 00 00       	push   $0x93
f013261d:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132622:	e8 de db fc ff       	call   f0100205 <_panic>
f0132627:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013262a:	8b 00                	mov    (%eax),%eax
f013262c:	85 c0                	test   %eax,%eax
f013262e:	74 10                	je     f0132640 <alloc_block_FF+0x67>
f0132630:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132633:	8b 00                	mov    (%eax),%eax
f0132635:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132638:	8b 52 04             	mov    0x4(%edx),%edx
f013263b:	89 50 04             	mov    %edx,0x4(%eax)
f013263e:	eb 0b                	jmp    f013264b <alloc_block_FF+0x72>
f0132640:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132643:	8b 40 04             	mov    0x4(%eax),%eax
f0132646:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f013264b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013264e:	8b 40 04             	mov    0x4(%eax),%eax
f0132651:	85 c0                	test   %eax,%eax
f0132653:	74 0f                	je     f0132664 <alloc_block_FF+0x8b>
f0132655:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132658:	8b 40 04             	mov    0x4(%eax),%eax
f013265b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013265e:	8b 12                	mov    (%edx),%edx
f0132660:	89 10                	mov    %edx,(%eax)
f0132662:	eb 0a                	jmp    f013266e <alloc_block_FF+0x95>
f0132664:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132667:	8b 00                	mov    (%eax),%eax
f0132669:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f013266e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132671:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132677:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013267a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132681:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132686:	48                   	dec    %eax
f0132687:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			   return  point;
f013268c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013268f:	e9 10 01 00 00       	jmp    f01327a4 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0132694:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132697:	8b 40 0c             	mov    0xc(%eax),%eax
f013269a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013269d:	0f 86 c6 00 00 00    	jbe    f0132769 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01326a3:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01326a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f01326ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326ae:	8b 50 08             	mov    0x8(%eax),%edx
f01326b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326b4:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f01326b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326ba:	8b 55 08             	mov    0x8(%ebp),%edx
f01326bd:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01326c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01326c4:	75 17                	jne    f01326dd <alloc_block_FF+0x104>
f01326c6:	83 ec 04             	sub    $0x4,%esp
f01326c9:	68 90 da 13 f0       	push   $0xf013da90
f01326ce:	68 9b 00 00 00       	push   $0x9b
f01326d3:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01326d8:	e8 28 db fc ff       	call   f0100205 <_panic>
f01326dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326e0:	8b 00                	mov    (%eax),%eax
f01326e2:	85 c0                	test   %eax,%eax
f01326e4:	74 10                	je     f01326f6 <alloc_block_FF+0x11d>
f01326e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326e9:	8b 00                	mov    (%eax),%eax
f01326eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01326ee:	8b 52 04             	mov    0x4(%edx),%edx
f01326f1:	89 50 04             	mov    %edx,0x4(%eax)
f01326f4:	eb 0b                	jmp    f0132701 <alloc_block_FF+0x128>
f01326f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01326f9:	8b 40 04             	mov    0x4(%eax),%eax
f01326fc:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132701:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132704:	8b 40 04             	mov    0x4(%eax),%eax
f0132707:	85 c0                	test   %eax,%eax
f0132709:	74 0f                	je     f013271a <alloc_block_FF+0x141>
f013270b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013270e:	8b 40 04             	mov    0x4(%eax),%eax
f0132711:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132714:	8b 12                	mov    (%edx),%edx
f0132716:	89 10                	mov    %edx,(%eax)
f0132718:	eb 0a                	jmp    f0132724 <alloc_block_FF+0x14b>
f013271a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013271d:	8b 00                	mov    (%eax),%eax
f013271f:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132724:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132727:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013272d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132730:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132737:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013273c:	48                   	dec    %eax
f013273d:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
			   point->sva += size;
f0132742:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132745:	8b 50 08             	mov    0x8(%eax),%edx
f0132748:	8b 45 08             	mov    0x8(%ebp),%eax
f013274b:	01 c2                	add    %eax,%edx
f013274d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132750:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0132753:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132756:	8b 40 0c             	mov    0xc(%eax),%eax
f0132759:	2b 45 08             	sub    0x8(%ebp),%eax
f013275c:	89 c2                	mov    %eax,%edx
f013275e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132761:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0132764:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132767:	eb 3b                	jmp    f01327a4 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0132769:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f013276e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132771:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132775:	74 07                	je     f013277e <alloc_block_FF+0x1a5>
f0132777:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013277a:	8b 00                	mov    (%eax),%eax
f013277c:	eb 05                	jmp    f0132783 <alloc_block_FF+0x1aa>
f013277e:	b8 00 00 00 00       	mov    $0x0,%eax
f0132783:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132788:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f013278d:	85 c0                	test   %eax,%eax
f013278f:	0f 85 57 fe ff ff    	jne    f01325ec <alloc_block_FF+0x13>
f0132795:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132799:	0f 85 4d fe ff ff    	jne    f01325ec <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f013279f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01327a4:	c9                   	leave  
f01327a5:	c3                   	ret    

f01327a6 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01327a6:	55                   	push   %ebp
f01327a7:	89 e5                	mov    %esp,%ebp
f01327a9:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f01327ac:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01327b3:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01327b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327bb:	e9 df 00 00 00       	jmp    f013289f <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f01327c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01327c6:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327c9:	0f 82 c8 00 00 00    	jb     f0132897 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f01327cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327d2:	8b 40 0c             	mov    0xc(%eax),%eax
f01327d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327d8:	0f 85 8a 00 00 00    	jne    f0132868 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f01327de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327e2:	75 17                	jne    f01327fb <alloc_block_BF+0x55>
f01327e4:	83 ec 04             	sub    $0x4,%esp
f01327e7:	68 90 da 13 f0       	push   $0xf013da90
f01327ec:	68 b7 00 00 00       	push   $0xb7
f01327f1:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01327f6:	e8 0a da fc ff       	call   f0100205 <_panic>
f01327fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327fe:	8b 00                	mov    (%eax),%eax
f0132800:	85 c0                	test   %eax,%eax
f0132802:	74 10                	je     f0132814 <alloc_block_BF+0x6e>
f0132804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132807:	8b 00                	mov    (%eax),%eax
f0132809:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013280c:	8b 52 04             	mov    0x4(%edx),%edx
f013280f:	89 50 04             	mov    %edx,0x4(%eax)
f0132812:	eb 0b                	jmp    f013281f <alloc_block_BF+0x79>
f0132814:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132817:	8b 40 04             	mov    0x4(%eax),%eax
f013281a:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f013281f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132822:	8b 40 04             	mov    0x4(%eax),%eax
f0132825:	85 c0                	test   %eax,%eax
f0132827:	74 0f                	je     f0132838 <alloc_block_BF+0x92>
f0132829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013282c:	8b 40 04             	mov    0x4(%eax),%eax
f013282f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132832:	8b 12                	mov    (%edx),%edx
f0132834:	89 10                	mov    %edx,(%eax)
f0132836:	eb 0a                	jmp    f0132842 <alloc_block_BF+0x9c>
f0132838:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013283b:	8b 00                	mov    (%eax),%eax
f013283d:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132842:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132845:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013284b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013284e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132855:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f013285a:	48                   	dec    %eax
f013285b:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			   return currentMemBlock;
f0132860:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132863:	e9 4d 01 00 00       	jmp    f01329b5 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0132868:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013286b:	8b 40 0c             	mov    0xc(%eax),%eax
f013286e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132871:	76 24                	jbe    f0132897 <alloc_block_BF+0xf1>
f0132873:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132876:	8b 40 0c             	mov    0xc(%eax),%eax
f0132879:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013287c:	73 19                	jae    f0132897 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f013287e:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0132885:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132888:	8b 40 0c             	mov    0xc(%eax),%eax
f013288b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f013288e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132891:	8b 40 08             	mov    0x8(%eax),%eax
f0132894:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132897:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f013289c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013289f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328a3:	74 07                	je     f01328ac <alloc_block_BF+0x106>
f01328a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328a8:	8b 00                	mov    (%eax),%eax
f01328aa:	eb 05                	jmp    f01328b1 <alloc_block_BF+0x10b>
f01328ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01328b1:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f01328b6:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01328bb:	85 c0                	test   %eax,%eax
f01328bd:	0f 85 fd fe ff ff    	jne    f01327c0 <alloc_block_BF+0x1a>
f01328c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328c7:	0f 85 f3 fe ff ff    	jne    f01327c0 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f01328cd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01328d1:	0f 84 d9 00 00 00    	je     f01329b0 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f01328d7:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01328dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01328df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01328e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01328e5:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f01328e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01328eb:	8b 55 08             	mov    0x8(%ebp),%edx
f01328ee:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f01328f1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01328f5:	75 17                	jne    f013290e <alloc_block_BF+0x168>
f01328f7:	83 ec 04             	sub    $0x4,%esp
f01328fa:	68 90 da 13 f0       	push   $0xf013da90
f01328ff:	68 c7 00 00 00       	push   $0xc7
f0132904:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132909:	e8 f7 d8 fc ff       	call   f0100205 <_panic>
f013290e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132911:	8b 00                	mov    (%eax),%eax
f0132913:	85 c0                	test   %eax,%eax
f0132915:	74 10                	je     f0132927 <alloc_block_BF+0x181>
f0132917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013291a:	8b 00                	mov    (%eax),%eax
f013291c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013291f:	8b 52 04             	mov    0x4(%edx),%edx
f0132922:	89 50 04             	mov    %edx,0x4(%eax)
f0132925:	eb 0b                	jmp    f0132932 <alloc_block_BF+0x18c>
f0132927:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013292a:	8b 40 04             	mov    0x4(%eax),%eax
f013292d:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132932:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132935:	8b 40 04             	mov    0x4(%eax),%eax
f0132938:	85 c0                	test   %eax,%eax
f013293a:	74 0f                	je     f013294b <alloc_block_BF+0x1a5>
f013293c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013293f:	8b 40 04             	mov    0x4(%eax),%eax
f0132942:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132945:	8b 12                	mov    (%edx),%edx
f0132947:	89 10                	mov    %edx,(%eax)
f0132949:	eb 0a                	jmp    f0132955 <alloc_block_BF+0x1af>
f013294b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013294e:	8b 00                	mov    (%eax),%eax
f0132950:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132955:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132958:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013295e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132961:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132968:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f013296d:	48                   	dec    %eax
f013296e:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132973:	83 ec 08             	sub    $0x8,%esp
f0132976:	ff 75 ec             	pushl  -0x14(%ebp)
f0132979:	68 64 ad 89 f0       	push   $0xf089ad64
f013297e:	e8 71 f9 ff ff       	call   f01322f4 <find_block>
f0132983:	83 c4 10             	add    $0x10,%esp
f0132986:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0132989:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013298c:	8b 50 08             	mov    0x8(%eax),%edx
f013298f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132992:	01 c2                	add    %eax,%edx
f0132994:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132997:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f013299a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013299d:	8b 40 0c             	mov    0xc(%eax),%eax
f01329a0:	2b 45 08             	sub    0x8(%ebp),%eax
f01329a3:	89 c2                	mov    %eax,%edx
f01329a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01329a8:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f01329ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01329ae:	eb 05                	jmp    f01329b5 <alloc_block_BF+0x20f>
	}
	return NULL;
f01329b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01329b5:	c9                   	leave  
f01329b6:	c3                   	ret    

f01329b7 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f01329b7:	55                   	push   %ebp
f01329b8:	89 e5                	mov    %esp,%ebp
f01329ba:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f01329bd:	a1 b0 ac 89 f0       	mov    0xf089acb0,%eax
f01329c2:	85 c0                	test   %eax,%eax
f01329c4:	0f 85 de 01 00 00    	jne    f0132ba8 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01329ca:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f01329cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01329d2:	e9 9e 01 00 00       	jmp    f0132b75 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01329d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329da:	8b 40 0c             	mov    0xc(%eax),%eax
f01329dd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329e0:	0f 82 87 01 00 00    	jb     f0132b6d <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01329e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329e9:	8b 40 0c             	mov    0xc(%eax),%eax
f01329ec:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329ef:	0f 85 95 00 00 00    	jne    f0132a8a <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01329f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329f9:	75 17                	jne    f0132a12 <alloc_block_NF+0x5b>
f01329fb:	83 ec 04             	sub    $0x4,%esp
f01329fe:	68 90 da 13 f0       	push   $0xf013da90
f0132a03:	68 e0 00 00 00       	push   $0xe0
f0132a08:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132a0d:	e8 f3 d7 fc ff       	call   f0100205 <_panic>
f0132a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a15:	8b 00                	mov    (%eax),%eax
f0132a17:	85 c0                	test   %eax,%eax
f0132a19:	74 10                	je     f0132a2b <alloc_block_NF+0x74>
f0132a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a1e:	8b 00                	mov    (%eax),%eax
f0132a20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a23:	8b 52 04             	mov    0x4(%edx),%edx
f0132a26:	89 50 04             	mov    %edx,0x4(%eax)
f0132a29:	eb 0b                	jmp    f0132a36 <alloc_block_NF+0x7f>
f0132a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a2e:	8b 40 04             	mov    0x4(%eax),%eax
f0132a31:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a39:	8b 40 04             	mov    0x4(%eax),%eax
f0132a3c:	85 c0                	test   %eax,%eax
f0132a3e:	74 0f                	je     f0132a4f <alloc_block_NF+0x98>
f0132a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a43:	8b 40 04             	mov    0x4(%eax),%eax
f0132a46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a49:	8b 12                	mov    (%edx),%edx
f0132a4b:	89 10                	mov    %edx,(%eax)
f0132a4d:	eb 0a                	jmp    f0132a59 <alloc_block_NF+0xa2>
f0132a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a52:	8b 00                	mov    (%eax),%eax
f0132a54:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a65:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a6c:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132a71:	48                   	dec    %eax
f0132a72:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
				   svaOfNF = point->sva;
f0132a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a7a:	8b 40 08             	mov    0x8(%eax),%eax
f0132a7d:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
				   return  point;
f0132a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a85:	e9 f8 04 00 00       	jmp    f0132f82 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0132a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a8d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a90:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132a93:	0f 86 d4 00 00 00    	jbe    f0132b6d <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132a99:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0132a9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0132aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aa4:	8b 50 08             	mov    0x8(%eax),%edx
f0132aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132aaa:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0132aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ab0:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ab3:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132ab6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132aba:	75 17                	jne    f0132ad3 <alloc_block_NF+0x11c>
f0132abc:	83 ec 04             	sub    $0x4,%esp
f0132abf:	68 90 da 13 f0       	push   $0xf013da90
f0132ac4:	68 e9 00 00 00       	push   $0xe9
f0132ac9:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132ace:	e8 32 d7 fc ff       	call   f0100205 <_panic>
f0132ad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ad6:	8b 00                	mov    (%eax),%eax
f0132ad8:	85 c0                	test   %eax,%eax
f0132ada:	74 10                	je     f0132aec <alloc_block_NF+0x135>
f0132adc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132adf:	8b 00                	mov    (%eax),%eax
f0132ae1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132ae4:	8b 52 04             	mov    0x4(%edx),%edx
f0132ae7:	89 50 04             	mov    %edx,0x4(%eax)
f0132aea:	eb 0b                	jmp    f0132af7 <alloc_block_NF+0x140>
f0132aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132aef:	8b 40 04             	mov    0x4(%eax),%eax
f0132af2:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132af7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132afa:	8b 40 04             	mov    0x4(%eax),%eax
f0132afd:	85 c0                	test   %eax,%eax
f0132aff:	74 0f                	je     f0132b10 <alloc_block_NF+0x159>
f0132b01:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b04:	8b 40 04             	mov    0x4(%eax),%eax
f0132b07:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132b0a:	8b 12                	mov    (%edx),%edx
f0132b0c:	89 10                	mov    %edx,(%eax)
f0132b0e:	eb 0a                	jmp    f0132b1a <alloc_block_NF+0x163>
f0132b10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b13:	8b 00                	mov    (%eax),%eax
f0132b15:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b26:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b2d:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132b32:	48                   	dec    %eax
f0132b33:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
				   svaOfNF = ReturnedBlock->sva;
f0132b38:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b3b:	8b 40 08             	mov    0x8(%eax),%eax
f0132b3e:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
				   point->sva += size;
f0132b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b46:	8b 50 08             	mov    0x8(%eax),%edx
f0132b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b4c:	01 c2                	add    %eax,%edx
f0132b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b51:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132b54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b57:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b5a:	2b 45 08             	sub    0x8(%ebp),%eax
f0132b5d:	89 c2                	mov    %eax,%edx
f0132b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b62:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132b65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132b68:	e9 15 04 00 00       	jmp    f0132f82 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0132b6d:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132b72:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b79:	74 07                	je     f0132b82 <alloc_block_NF+0x1cb>
f0132b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b7e:	8b 00                	mov    (%eax),%eax
f0132b80:	eb 05                	jmp    f0132b87 <alloc_block_NF+0x1d0>
f0132b82:	b8 00 00 00 00       	mov    $0x0,%eax
f0132b87:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132b8c:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132b91:	85 c0                	test   %eax,%eax
f0132b93:	0f 85 3e fe ff ff    	jne    f01329d7 <alloc_block_NF+0x20>
f0132b99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b9d:	0f 85 34 fe ff ff    	jne    f01329d7 <alloc_block_NF+0x20>
f0132ba3:	e9 d5 03 00 00       	jmp    f0132f7d <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132ba8:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132bad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132bb0:	e9 b1 01 00 00       	jmp    f0132d66 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bb8:	8b 50 08             	mov    0x8(%eax),%edx
f0132bbb:	a1 b0 ac 89 f0       	mov    0xf089acb0,%eax
f0132bc0:	39 c2                	cmp    %eax,%edx
f0132bc2:	0f 82 96 01 00 00    	jb     f0132d5e <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bcb:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bce:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132bd1:	0f 82 87 01 00 00    	jb     f0132d5e <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bda:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bdd:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132be0:	0f 85 95 00 00 00    	jne    f0132c7b <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132be6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132bea:	75 17                	jne    f0132c03 <alloc_block_NF+0x24c>
f0132bec:	83 ec 04             	sub    $0x4,%esp
f0132bef:	68 90 da 13 f0       	push   $0xf013da90
f0132bf4:	68 fc 00 00 00       	push   $0xfc
f0132bf9:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132bfe:	e8 02 d6 fc ff       	call   f0100205 <_panic>
f0132c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c06:	8b 00                	mov    (%eax),%eax
f0132c08:	85 c0                	test   %eax,%eax
f0132c0a:	74 10                	je     f0132c1c <alloc_block_NF+0x265>
f0132c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c0f:	8b 00                	mov    (%eax),%eax
f0132c11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c14:	8b 52 04             	mov    0x4(%edx),%edx
f0132c17:	89 50 04             	mov    %edx,0x4(%eax)
f0132c1a:	eb 0b                	jmp    f0132c27 <alloc_block_NF+0x270>
f0132c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c1f:	8b 40 04             	mov    0x4(%eax),%eax
f0132c22:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c2a:	8b 40 04             	mov    0x4(%eax),%eax
f0132c2d:	85 c0                	test   %eax,%eax
f0132c2f:	74 0f                	je     f0132c40 <alloc_block_NF+0x289>
f0132c31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c34:	8b 40 04             	mov    0x4(%eax),%eax
f0132c37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c3a:	8b 12                	mov    (%edx),%edx
f0132c3c:	89 10                	mov    %edx,(%eax)
f0132c3e:	eb 0a                	jmp    f0132c4a <alloc_block_NF+0x293>
f0132c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c43:	8b 00                	mov    (%eax),%eax
f0132c45:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c56:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c5d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132c62:	48                   	dec    %eax
f0132c63:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					   svaOfNF = point->sva;
f0132c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c6b:	8b 40 08             	mov    0x8(%eax),%eax
f0132c6e:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   return  point;
f0132c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c76:	e9 07 03 00 00       	jmp    f0132f82 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c7e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c81:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132c84:	0f 86 d4 00 00 00    	jbe    f0132d5e <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132c8a:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0132c8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c95:	8b 50 08             	mov    0x8(%eax),%edx
f0132c98:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c9b:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132c9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ca1:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ca4:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132ca7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132cab:	75 17                	jne    f0132cc4 <alloc_block_NF+0x30d>
f0132cad:	83 ec 04             	sub    $0x4,%esp
f0132cb0:	68 90 da 13 f0       	push   $0xf013da90
f0132cb5:	68 04 01 00 00       	push   $0x104
f0132cba:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132cbf:	e8 41 d5 fc ff       	call   f0100205 <_panic>
f0132cc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cc7:	8b 00                	mov    (%eax),%eax
f0132cc9:	85 c0                	test   %eax,%eax
f0132ccb:	74 10                	je     f0132cdd <alloc_block_NF+0x326>
f0132ccd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cd0:	8b 00                	mov    (%eax),%eax
f0132cd2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132cd5:	8b 52 04             	mov    0x4(%edx),%edx
f0132cd8:	89 50 04             	mov    %edx,0x4(%eax)
f0132cdb:	eb 0b                	jmp    f0132ce8 <alloc_block_NF+0x331>
f0132cdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ce0:	8b 40 04             	mov    0x4(%eax),%eax
f0132ce3:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ceb:	8b 40 04             	mov    0x4(%eax),%eax
f0132cee:	85 c0                	test   %eax,%eax
f0132cf0:	74 0f                	je     f0132d01 <alloc_block_NF+0x34a>
f0132cf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cf5:	8b 40 04             	mov    0x4(%eax),%eax
f0132cf8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132cfb:	8b 12                	mov    (%edx),%edx
f0132cfd:	89 10                	mov    %edx,(%eax)
f0132cff:	eb 0a                	jmp    f0132d0b <alloc_block_NF+0x354>
f0132d01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d04:	8b 00                	mov    (%eax),%eax
f0132d06:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132d0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d14:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d17:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d1e:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132d23:	48                   	dec    %eax
f0132d24:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					   svaOfNF = ReturnedBlock->sva;
f0132d29:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d2c:	8b 40 08             	mov    0x8(%eax),%eax
f0132d2f:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   point->sva += size;
f0132d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d37:	8b 50 08             	mov    0x8(%eax),%edx
f0132d3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d3d:	01 c2                	add    %eax,%edx
f0132d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d42:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d48:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d4b:	2b 45 08             	sub    0x8(%ebp),%eax
f0132d4e:	89 c2                	mov    %eax,%edx
f0132d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d53:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132d56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132d59:	e9 24 02 00 00       	jmp    f0132f82 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132d5e:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132d63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132d66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d6a:	74 07                	je     f0132d73 <alloc_block_NF+0x3bc>
f0132d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d6f:	8b 00                	mov    (%eax),%eax
f0132d71:	eb 05                	jmp    f0132d78 <alloc_block_NF+0x3c1>
f0132d73:	b8 00 00 00 00       	mov    $0x0,%eax
f0132d78:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132d7d:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132d82:	85 c0                	test   %eax,%eax
f0132d84:	0f 85 2b fe ff ff    	jne    f0132bb5 <alloc_block_NF+0x1fe>
f0132d8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d8e:	0f 85 21 fe ff ff    	jne    f0132bb5 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132d94:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132d99:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132d9c:	e9 ae 01 00 00       	jmp    f0132f4f <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0132da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132da4:	8b 50 08             	mov    0x8(%eax),%edx
f0132da7:	a1 b0 ac 89 f0       	mov    0xf089acb0,%eax
f0132dac:	39 c2                	cmp    %eax,%edx
f0132dae:	0f 83 93 01 00 00    	jae    f0132f47 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132db7:	8b 40 0c             	mov    0xc(%eax),%eax
f0132dba:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132dbd:	0f 82 84 01 00 00    	jb     f0132f47 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132dc6:	8b 40 0c             	mov    0xc(%eax),%eax
f0132dc9:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132dcc:	0f 85 95 00 00 00    	jne    f0132e67 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132dd6:	75 17                	jne    f0132def <alloc_block_NF+0x438>
f0132dd8:	83 ec 04             	sub    $0x4,%esp
f0132ddb:	68 90 da 13 f0       	push   $0xf013da90
f0132de0:	68 14 01 00 00       	push   $0x114
f0132de5:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132dea:	e8 16 d4 fc ff       	call   f0100205 <_panic>
f0132def:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132df2:	8b 00                	mov    (%eax),%eax
f0132df4:	85 c0                	test   %eax,%eax
f0132df6:	74 10                	je     f0132e08 <alloc_block_NF+0x451>
f0132df8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132dfb:	8b 00                	mov    (%eax),%eax
f0132dfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e00:	8b 52 04             	mov    0x4(%edx),%edx
f0132e03:	89 50 04             	mov    %edx,0x4(%eax)
f0132e06:	eb 0b                	jmp    f0132e13 <alloc_block_NF+0x45c>
f0132e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e0b:	8b 40 04             	mov    0x4(%eax),%eax
f0132e0e:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e16:	8b 40 04             	mov    0x4(%eax),%eax
f0132e19:	85 c0                	test   %eax,%eax
f0132e1b:	74 0f                	je     f0132e2c <alloc_block_NF+0x475>
f0132e1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e20:	8b 40 04             	mov    0x4(%eax),%eax
f0132e23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e26:	8b 12                	mov    (%edx),%edx
f0132e28:	89 10                	mov    %edx,(%eax)
f0132e2a:	eb 0a                	jmp    f0132e36 <alloc_block_NF+0x47f>
f0132e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e2f:	8b 00                	mov    (%eax),%eax
f0132e31:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0132e36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e39:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e42:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e49:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0132e4e:	48                   	dec    %eax
f0132e4f:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					   svaOfNF = point->sva;
f0132e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e57:	8b 40 08             	mov    0x8(%eax),%eax
f0132e5a:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   return  point;
f0132e5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e62:	e9 1b 01 00 00       	jmp    f0132f82 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e6a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e6d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132e70:	0f 86 d1 00 00 00    	jbe    f0132f47 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132e76:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0132e7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e81:	8b 50 08             	mov    0x8(%eax),%edx
f0132e84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e87:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e8d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e90:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132e93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132e97:	75 17                	jne    f0132eb0 <alloc_block_NF+0x4f9>
f0132e99:	83 ec 04             	sub    $0x4,%esp
f0132e9c:	68 90 da 13 f0       	push   $0xf013da90
f0132ea1:	68 1c 01 00 00       	push   $0x11c
f0132ea6:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132eab:	e8 55 d3 fc ff       	call   f0100205 <_panic>
f0132eb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132eb3:	8b 00                	mov    (%eax),%eax
f0132eb5:	85 c0                	test   %eax,%eax
f0132eb7:	74 10                	je     f0132ec9 <alloc_block_NF+0x512>
f0132eb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ebc:	8b 00                	mov    (%eax),%eax
f0132ebe:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132ec1:	8b 52 04             	mov    0x4(%edx),%edx
f0132ec4:	89 50 04             	mov    %edx,0x4(%eax)
f0132ec7:	eb 0b                	jmp    f0132ed4 <alloc_block_NF+0x51d>
f0132ec9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ecc:	8b 40 04             	mov    0x4(%eax),%eax
f0132ecf:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0132ed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ed7:	8b 40 04             	mov    0x4(%eax),%eax
f0132eda:	85 c0                	test   %eax,%eax
f0132edc:	74 0f                	je     f0132eed <alloc_block_NF+0x536>
f0132ede:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ee1:	8b 40 04             	mov    0x4(%eax),%eax
f0132ee4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132ee7:	8b 12                	mov    (%edx),%edx
f0132ee9:	89 10                	mov    %edx,(%eax)
f0132eeb:	eb 0a                	jmp    f0132ef7 <alloc_block_NF+0x540>
f0132eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ef0:	8b 00                	mov    (%eax),%eax
f0132ef2:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0132ef7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132efa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132f00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f03:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f0a:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0132f0f:	48                   	dec    %eax
f0132f10:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					   svaOfNF = ReturnedBlock->sva;
f0132f15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f18:	8b 40 08             	mov    0x8(%eax),%eax
f0132f1b:	a3 b0 ac 89 f0       	mov    %eax,0xf089acb0
					   point->sva += size;
f0132f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f23:	8b 50 08             	mov    0x8(%eax),%edx
f0132f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f29:	01 c2                	add    %eax,%edx
f0132f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f2e:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f34:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f37:	2b 45 08             	sub    0x8(%ebp),%eax
f0132f3a:	89 c2                	mov    %eax,%edx
f0132f3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f3f:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f45:	eb 3b                	jmp    f0132f82 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132f47:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132f4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132f4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132f53:	74 07                	je     f0132f5c <alloc_block_NF+0x5a5>
f0132f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f58:	8b 00                	mov    (%eax),%eax
f0132f5a:	eb 05                	jmp    f0132f61 <alloc_block_NF+0x5aa>
f0132f5c:	b8 00 00 00 00       	mov    $0x0,%eax
f0132f61:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f0132f66:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0132f6b:	85 c0                	test   %eax,%eax
f0132f6d:	0f 85 2e fe ff ff    	jne    f0132da1 <alloc_block_NF+0x3ea>
f0132f73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132f77:	0f 85 24 fe ff ff    	jne    f0132da1 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132f7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132f82:	c9                   	leave  
f0132f83:	c3                   	ret    

f0132f84 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132f84:	55                   	push   %ebp
f0132f85:	89 e5                	mov    %esp,%ebp
f0132f87:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132f8a:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132f92:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f0132f97:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132f9a:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132f9f:	85 c0                	test   %eax,%eax
f0132fa1:	74 14                	je     f0132fb7 <insert_sorted_with_merge_freeList+0x33>
f0132fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fa6:	8b 50 08             	mov    0x8(%eax),%edx
f0132fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132fac:	8b 40 08             	mov    0x8(%eax),%eax
f0132faf:	39 c2                	cmp    %eax,%edx
f0132fb1:	0f 87 9b 01 00 00    	ja     f0133152 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132fb7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132fbb:	75 17                	jne    f0132fd4 <insert_sorted_with_merge_freeList+0x50>
f0132fbd:	83 ec 04             	sub    $0x4,%esp
f0132fc0:	68 c4 d9 13 f0       	push   $0xf013d9c4
f0132fc5:	68 38 01 00 00       	push   $0x138
f0132fca:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0132fcf:	e8 31 d2 fc ff       	call   f0100205 <_panic>
f0132fd4:	8b 15 64 ad 89 f0    	mov    0xf089ad64,%edx
f0132fda:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fdd:	89 10                	mov    %edx,(%eax)
f0132fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fe2:	8b 00                	mov    (%eax),%eax
f0132fe4:	85 c0                	test   %eax,%eax
f0132fe6:	74 0d                	je     f0132ff5 <insert_sorted_with_merge_freeList+0x71>
f0132fe8:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f0132fed:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ff0:	89 50 04             	mov    %edx,0x4(%eax)
f0132ff3:	eb 08                	jmp    f0132ffd <insert_sorted_with_merge_freeList+0x79>
f0132ff5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ff8:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0132ffd:	8b 45 08             	mov    0x8(%ebp),%eax
f0133000:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0133005:	8b 45 08             	mov    0x8(%ebp),%eax
f0133008:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013300f:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f0133014:	40                   	inc    %eax
f0133015:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013301a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013301e:	0f 84 a8 06 00 00    	je     f01336cc <insert_sorted_with_merge_freeList+0x748>
f0133024:	8b 45 08             	mov    0x8(%ebp),%eax
f0133027:	8b 50 08             	mov    0x8(%eax),%edx
f013302a:	8b 45 08             	mov    0x8(%ebp),%eax
f013302d:	8b 40 0c             	mov    0xc(%eax),%eax
f0133030:	01 c2                	add    %eax,%edx
f0133032:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133035:	8b 40 08             	mov    0x8(%eax),%eax
f0133038:	39 c2                	cmp    %eax,%edx
f013303a:	0f 85 8c 06 00 00    	jne    f01336cc <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0133040:	8b 45 08             	mov    0x8(%ebp),%eax
f0133043:	8b 50 0c             	mov    0xc(%eax),%edx
f0133046:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133049:	8b 40 0c             	mov    0xc(%eax),%eax
f013304c:	01 c2                	add    %eax,%edx
f013304e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133051:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0133054:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0133058:	75 17                	jne    f0133071 <insert_sorted_with_merge_freeList+0xed>
f013305a:	83 ec 04             	sub    $0x4,%esp
f013305d:	68 90 da 13 f0       	push   $0xf013da90
f0133062:	68 3c 01 00 00       	push   $0x13c
f0133067:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013306c:	e8 94 d1 fc ff       	call   f0100205 <_panic>
f0133071:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133074:	8b 00                	mov    (%eax),%eax
f0133076:	85 c0                	test   %eax,%eax
f0133078:	74 10                	je     f013308a <insert_sorted_with_merge_freeList+0x106>
f013307a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013307d:	8b 00                	mov    (%eax),%eax
f013307f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0133082:	8b 52 04             	mov    0x4(%edx),%edx
f0133085:	89 50 04             	mov    %edx,0x4(%eax)
f0133088:	eb 0b                	jmp    f0133095 <insert_sorted_with_merge_freeList+0x111>
f013308a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013308d:	8b 40 04             	mov    0x4(%eax),%eax
f0133090:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133095:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133098:	8b 40 04             	mov    0x4(%eax),%eax
f013309b:	85 c0                	test   %eax,%eax
f013309d:	74 0f                	je     f01330ae <insert_sorted_with_merge_freeList+0x12a>
f013309f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330a2:	8b 40 04             	mov    0x4(%eax),%eax
f01330a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01330a8:	8b 12                	mov    (%edx),%edx
f01330aa:	89 10                	mov    %edx,(%eax)
f01330ac:	eb 0a                	jmp    f01330b8 <insert_sorted_with_merge_freeList+0x134>
f01330ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330b1:	8b 00                	mov    (%eax),%eax
f01330b3:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f01330b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01330c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330c4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01330cb:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01330d0:	48                   	dec    %eax
f01330d1:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			head->size = 0;
f01330d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330d9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f01330e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330e3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f01330ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01330ee:	75 17                	jne    f0133107 <insert_sorted_with_merge_freeList+0x183>
f01330f0:	83 ec 04             	sub    $0x4,%esp
f01330f3:	68 c4 d9 13 f0       	push   $0xf013d9c4
f01330f8:	68 3f 01 00 00       	push   $0x13f
f01330fd:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0133102:	e8 fe d0 fc ff       	call   f0100205 <_panic>
f0133107:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f013310d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133110:	89 10                	mov    %edx,(%eax)
f0133112:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133115:	8b 00                	mov    (%eax),%eax
f0133117:	85 c0                	test   %eax,%eax
f0133119:	74 0d                	je     f0133128 <insert_sorted_with_merge_freeList+0x1a4>
f013311b:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f0133120:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0133123:	89 50 04             	mov    %edx,0x4(%eax)
f0133126:	eb 08                	jmp    f0133130 <insert_sorted_with_merge_freeList+0x1ac>
f0133128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013312b:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0133130:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133133:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0133138:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013313b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133142:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0133147:	40                   	inc    %eax
f0133148:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013314d:	e9 7a 05 00 00       	jmp    f01336cc <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0133152:	8b 45 08             	mov    0x8(%ebp),%eax
f0133155:	8b 50 08             	mov    0x8(%eax),%edx
f0133158:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013315b:	8b 40 08             	mov    0x8(%eax),%eax
f013315e:	39 c2                	cmp    %eax,%edx
f0133160:	0f 82 14 01 00 00    	jb     f013327a <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0133166:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133169:	8b 50 08             	mov    0x8(%eax),%edx
f013316c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013316f:	8b 40 0c             	mov    0xc(%eax),%eax
f0133172:	01 c2                	add    %eax,%edx
f0133174:	8b 45 08             	mov    0x8(%ebp),%eax
f0133177:	8b 40 08             	mov    0x8(%eax),%eax
f013317a:	39 c2                	cmp    %eax,%edx
f013317c:	0f 85 90 00 00 00    	jne    f0133212 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0133182:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133185:	8b 50 0c             	mov    0xc(%eax),%edx
f0133188:	8b 45 08             	mov    0x8(%ebp),%eax
f013318b:	8b 40 0c             	mov    0xc(%eax),%eax
f013318e:	01 c2                	add    %eax,%edx
f0133190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133193:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0133196:	8b 45 08             	mov    0x8(%ebp),%eax
f0133199:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f01331a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01331a3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01331aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01331ae:	75 17                	jne    f01331c7 <insert_sorted_with_merge_freeList+0x243>
f01331b0:	83 ec 04             	sub    $0x4,%esp
f01331b3:	68 c4 d9 13 f0       	push   $0xf013d9c4
f01331b8:	68 49 01 00 00       	push   $0x149
f01331bd:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01331c2:	e8 3e d0 fc ff       	call   f0100205 <_panic>
f01331c7:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f01331cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01331d0:	89 10                	mov    %edx,(%eax)
f01331d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01331d5:	8b 00                	mov    (%eax),%eax
f01331d7:	85 c0                	test   %eax,%eax
f01331d9:	74 0d                	je     f01331e8 <insert_sorted_with_merge_freeList+0x264>
f01331db:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01331e0:	8b 55 08             	mov    0x8(%ebp),%edx
f01331e3:	89 50 04             	mov    %edx,0x4(%eax)
f01331e6:	eb 08                	jmp    f01331f0 <insert_sorted_with_merge_freeList+0x26c>
f01331e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01331eb:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f01331f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01331f3:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f01331f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01331fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133202:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0133207:	40                   	inc    %eax
f0133208:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013320d:	e9 bb 04 00 00       	jmp    f01336cd <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0133212:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133216:	75 17                	jne    f013322f <insert_sorted_with_merge_freeList+0x2ab>
f0133218:	83 ec 04             	sub    $0x4,%esp
f013321b:	68 38 da 13 f0       	push   $0xf013da38
f0133220:	68 4c 01 00 00       	push   $0x14c
f0133225:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013322a:	e8 d6 cf fc ff       	call   f0100205 <_panic>
f013322f:	8b 15 68 ad 89 f0    	mov    0xf089ad68,%edx
f0133235:	8b 45 08             	mov    0x8(%ebp),%eax
f0133238:	89 50 04             	mov    %edx,0x4(%eax)
f013323b:	8b 45 08             	mov    0x8(%ebp),%eax
f013323e:	8b 40 04             	mov    0x4(%eax),%eax
f0133241:	85 c0                	test   %eax,%eax
f0133243:	74 0c                	je     f0133251 <insert_sorted_with_merge_freeList+0x2cd>
f0133245:	a1 68 ad 89 f0       	mov    0xf089ad68,%eax
f013324a:	8b 55 08             	mov    0x8(%ebp),%edx
f013324d:	89 10                	mov    %edx,(%eax)
f013324f:	eb 08                	jmp    f0133259 <insert_sorted_with_merge_freeList+0x2d5>
f0133251:	8b 45 08             	mov    0x8(%ebp),%eax
f0133254:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0133259:	8b 45 08             	mov    0x8(%ebp),%eax
f013325c:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133261:	8b 45 08             	mov    0x8(%ebp),%eax
f0133264:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013326a:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f013326f:	40                   	inc    %eax
f0133270:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133275:	e9 53 04 00 00       	jmp    f01336cd <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f013327a:	a1 64 ad 89 f0       	mov    0xf089ad64,%eax
f013327f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133282:	e9 15 04 00 00       	jmp    f013369c <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0133287:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013328a:	8b 00                	mov    (%eax),%eax
f013328c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f013328f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133292:	8b 50 08             	mov    0x8(%eax),%edx
f0133295:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133298:	8b 40 08             	mov    0x8(%eax),%eax
f013329b:	39 c2                	cmp    %eax,%edx
f013329d:	0f 86 f1 03 00 00    	jbe    f0133694 <insert_sorted_with_merge_freeList+0x710>
f01332a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01332a6:	8b 50 08             	mov    0x8(%eax),%edx
f01332a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332ac:	8b 40 08             	mov    0x8(%eax),%eax
f01332af:	39 c2                	cmp    %eax,%edx
f01332b1:	0f 83 dd 03 00 00    	jae    f0133694 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f01332b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332ba:	8b 50 08             	mov    0x8(%eax),%edx
f01332bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332c0:	8b 40 0c             	mov    0xc(%eax),%eax
f01332c3:	01 c2                	add    %eax,%edx
f01332c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01332c8:	8b 40 08             	mov    0x8(%eax),%eax
f01332cb:	39 c2                	cmp    %eax,%edx
f01332cd:	0f 85 b9 01 00 00    	jne    f013348c <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01332d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01332d6:	8b 50 08             	mov    0x8(%eax),%edx
f01332d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01332dc:	8b 40 0c             	mov    0xc(%eax),%eax
f01332df:	01 c2                	add    %eax,%edx
f01332e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332e4:	8b 40 08             	mov    0x8(%eax),%eax
f01332e7:	39 c2                	cmp    %eax,%edx
f01332e9:	0f 85 0d 01 00 00    	jne    f01333fc <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f01332ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332f2:	8b 50 0c             	mov    0xc(%eax),%edx
f01332f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332f8:	8b 40 0c             	mov    0xc(%eax),%eax
f01332fb:	01 c2                	add    %eax,%edx
f01332fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133300:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133303:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0133307:	75 17                	jne    f0133320 <insert_sorted_with_merge_freeList+0x39c>
f0133309:	83 ec 04             	sub    $0x4,%esp
f013330c:	68 90 da 13 f0       	push   $0xf013da90
f0133311:	68 5c 01 00 00       	push   $0x15c
f0133316:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013331b:	e8 e5 ce fc ff       	call   f0100205 <_panic>
f0133320:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133323:	8b 00                	mov    (%eax),%eax
f0133325:	85 c0                	test   %eax,%eax
f0133327:	74 10                	je     f0133339 <insert_sorted_with_merge_freeList+0x3b5>
f0133329:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013332c:	8b 00                	mov    (%eax),%eax
f013332e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133331:	8b 52 04             	mov    0x4(%edx),%edx
f0133334:	89 50 04             	mov    %edx,0x4(%eax)
f0133337:	eb 0b                	jmp    f0133344 <insert_sorted_with_merge_freeList+0x3c0>
f0133339:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013333c:	8b 40 04             	mov    0x4(%eax),%eax
f013333f:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133344:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133347:	8b 40 04             	mov    0x4(%eax),%eax
f013334a:	85 c0                	test   %eax,%eax
f013334c:	74 0f                	je     f013335d <insert_sorted_with_merge_freeList+0x3d9>
f013334e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133351:	8b 40 04             	mov    0x4(%eax),%eax
f0133354:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133357:	8b 12                	mov    (%edx),%edx
f0133359:	89 10                	mov    %edx,(%eax)
f013335b:	eb 0a                	jmp    f0133367 <insert_sorted_with_merge_freeList+0x3e3>
f013335d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133360:	8b 00                	mov    (%eax),%eax
f0133362:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f0133367:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013336a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133370:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133373:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013337a:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f013337f:	48                   	dec    %eax
f0133380:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
						nextBlock->sva = 0;
f0133385:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133388:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f013338f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133392:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0133399:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013339d:	75 17                	jne    f01333b6 <insert_sorted_with_merge_freeList+0x432>
f013339f:	83 ec 04             	sub    $0x4,%esp
f01333a2:	68 c4 d9 13 f0       	push   $0xf013d9c4
f01333a7:	68 5f 01 00 00       	push   $0x15f
f01333ac:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01333b1:	e8 4f ce fc ff       	call   f0100205 <_panic>
f01333b6:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f01333bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333bf:	89 10                	mov    %edx,(%eax)
f01333c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333c4:	8b 00                	mov    (%eax),%eax
f01333c6:	85 c0                	test   %eax,%eax
f01333c8:	74 0d                	je     f01333d7 <insert_sorted_with_merge_freeList+0x453>
f01333ca:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01333cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01333d2:	89 50 04             	mov    %edx,0x4(%eax)
f01333d5:	eb 08                	jmp    f01333df <insert_sorted_with_merge_freeList+0x45b>
f01333d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333da:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f01333df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333e2:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f01333e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333ea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01333f1:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f01333f6:	40                   	inc    %eax
f01333f7:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					}
					currentBlock->size += blockToInsert->size;
f01333fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333ff:	8b 50 0c             	mov    0xc(%eax),%edx
f0133402:	8b 45 08             	mov    0x8(%ebp),%eax
f0133405:	8b 40 0c             	mov    0xc(%eax),%eax
f0133408:	01 c2                	add    %eax,%edx
f013340a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013340d:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0133410:	8b 45 08             	mov    0x8(%ebp),%eax
f0133413:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f013341a:	8b 45 08             	mov    0x8(%ebp),%eax
f013341d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0133424:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133428:	75 17                	jne    f0133441 <insert_sorted_with_merge_freeList+0x4bd>
f013342a:	83 ec 04             	sub    $0x4,%esp
f013342d:	68 c4 d9 13 f0       	push   $0xf013d9c4
f0133432:	68 64 01 00 00       	push   $0x164
f0133437:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013343c:	e8 c4 cd fc ff       	call   f0100205 <_panic>
f0133441:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f0133447:	8b 45 08             	mov    0x8(%ebp),%eax
f013344a:	89 10                	mov    %edx,(%eax)
f013344c:	8b 45 08             	mov    0x8(%ebp),%eax
f013344f:	8b 00                	mov    (%eax),%eax
f0133451:	85 c0                	test   %eax,%eax
f0133453:	74 0d                	je     f0133462 <insert_sorted_with_merge_freeList+0x4de>
f0133455:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f013345a:	8b 55 08             	mov    0x8(%ebp),%edx
f013345d:	89 50 04             	mov    %edx,0x4(%eax)
f0133460:	eb 08                	jmp    f013346a <insert_sorted_with_merge_freeList+0x4e6>
f0133462:	8b 45 08             	mov    0x8(%ebp),%eax
f0133465:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f013346a:	8b 45 08             	mov    0x8(%ebp),%eax
f013346d:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f0133472:	8b 45 08             	mov    0x8(%ebp),%eax
f0133475:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013347c:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0133481:	40                   	inc    %eax
f0133482:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					break;
f0133487:	e9 41 02 00 00       	jmp    f01336cd <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013348c:	8b 45 08             	mov    0x8(%ebp),%eax
f013348f:	8b 50 08             	mov    0x8(%eax),%edx
f0133492:	8b 45 08             	mov    0x8(%ebp),%eax
f0133495:	8b 40 0c             	mov    0xc(%eax),%eax
f0133498:	01 c2                	add    %eax,%edx
f013349a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013349d:	8b 40 08             	mov    0x8(%eax),%eax
f01334a0:	39 c2                	cmp    %eax,%edx
f01334a2:	0f 85 7c 01 00 00    	jne    f0133624 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f01334a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01334ac:	74 06                	je     f01334b4 <insert_sorted_with_merge_freeList+0x530>
f01334ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01334b2:	75 17                	jne    f01334cb <insert_sorted_with_merge_freeList+0x547>
f01334b4:	83 ec 04             	sub    $0x4,%esp
f01334b7:	68 00 da 13 f0       	push   $0xf013da00
f01334bc:	68 69 01 00 00       	push   $0x169
f01334c1:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01334c6:	e8 3a cd fc ff       	call   f0100205 <_panic>
f01334cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334ce:	8b 50 04             	mov    0x4(%eax),%edx
f01334d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01334d4:	89 50 04             	mov    %edx,0x4(%eax)
f01334d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01334da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01334dd:	89 10                	mov    %edx,(%eax)
f01334df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334e2:	8b 40 04             	mov    0x4(%eax),%eax
f01334e5:	85 c0                	test   %eax,%eax
f01334e7:	74 0d                	je     f01334f6 <insert_sorted_with_merge_freeList+0x572>
f01334e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01334ec:	8b 40 04             	mov    0x4(%eax),%eax
f01334ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01334f2:	89 10                	mov    %edx,(%eax)
f01334f4:	eb 08                	jmp    f01334fe <insert_sorted_with_merge_freeList+0x57a>
f01334f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01334f9:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f01334fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133501:	8b 55 08             	mov    0x8(%ebp),%edx
f0133504:	89 50 04             	mov    %edx,0x4(%eax)
f0133507:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f013350c:	40                   	inc    %eax
f013350d:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					blockToInsert->size += nextBlock->size;
f0133512:	8b 45 08             	mov    0x8(%ebp),%eax
f0133515:	8b 50 0c             	mov    0xc(%eax),%edx
f0133518:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013351b:	8b 40 0c             	mov    0xc(%eax),%eax
f013351e:	01 c2                	add    %eax,%edx
f0133520:	8b 45 08             	mov    0x8(%ebp),%eax
f0133523:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133526:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013352a:	75 17                	jne    f0133543 <insert_sorted_with_merge_freeList+0x5bf>
f013352c:	83 ec 04             	sub    $0x4,%esp
f013352f:	68 90 da 13 f0       	push   $0xf013da90
f0133534:	68 6b 01 00 00       	push   $0x16b
f0133539:	68 e7 d9 13 f0       	push   $0xf013d9e7
f013353e:	e8 c2 cc fc ff       	call   f0100205 <_panic>
f0133543:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133546:	8b 00                	mov    (%eax),%eax
f0133548:	85 c0                	test   %eax,%eax
f013354a:	74 10                	je     f013355c <insert_sorted_with_merge_freeList+0x5d8>
f013354c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013354f:	8b 00                	mov    (%eax),%eax
f0133551:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133554:	8b 52 04             	mov    0x4(%edx),%edx
f0133557:	89 50 04             	mov    %edx,0x4(%eax)
f013355a:	eb 0b                	jmp    f0133567 <insert_sorted_with_merge_freeList+0x5e3>
f013355c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013355f:	8b 40 04             	mov    0x4(%eax),%eax
f0133562:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133567:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013356a:	8b 40 04             	mov    0x4(%eax),%eax
f013356d:	85 c0                	test   %eax,%eax
f013356f:	74 0f                	je     f0133580 <insert_sorted_with_merge_freeList+0x5fc>
f0133571:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133574:	8b 40 04             	mov    0x4(%eax),%eax
f0133577:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013357a:	8b 12                	mov    (%edx),%edx
f013357c:	89 10                	mov    %edx,(%eax)
f013357e:	eb 0a                	jmp    f013358a <insert_sorted_with_merge_freeList+0x606>
f0133580:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133583:	8b 00                	mov    (%eax),%eax
f0133585:	a3 64 ad 89 f0       	mov    %eax,0xf089ad64
f013358a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013358d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133593:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133596:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013359d:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f01335a2:	48                   	dec    %eax
f01335a3:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					nextBlock->sva = 0;
f01335a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335ab:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f01335b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335b5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01335bc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01335c0:	75 17                	jne    f01335d9 <insert_sorted_with_merge_freeList+0x655>
f01335c2:	83 ec 04             	sub    $0x4,%esp
f01335c5:	68 c4 d9 13 f0       	push   $0xf013d9c4
f01335ca:	68 6e 01 00 00       	push   $0x16e
f01335cf:	68 e7 d9 13 f0       	push   $0xf013d9e7
f01335d4:	e8 2c cc fc ff       	call   f0100205 <_panic>
f01335d9:	8b 15 98 ad 89 f0    	mov    0xf089ad98,%edx
f01335df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335e2:	89 10                	mov    %edx,(%eax)
f01335e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335e7:	8b 00                	mov    (%eax),%eax
f01335e9:	85 c0                	test   %eax,%eax
f01335eb:	74 0d                	je     f01335fa <insert_sorted_with_merge_freeList+0x676>
f01335ed:	a1 98 ad 89 f0       	mov    0xf089ad98,%eax
f01335f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01335f5:	89 50 04             	mov    %edx,0x4(%eax)
f01335f8:	eb 08                	jmp    f0133602 <insert_sorted_with_merge_freeList+0x67e>
f01335fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01335fd:	a3 9c ad 89 f0       	mov    %eax,0xf089ad9c
f0133602:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133605:	a3 98 ad 89 f0       	mov    %eax,0xf089ad98
f013360a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013360d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133614:	a1 a4 ad 89 f0       	mov    0xf089ada4,%eax
f0133619:	40                   	inc    %eax
f013361a:	a3 a4 ad 89 f0       	mov    %eax,0xf089ada4
					break;
f013361f:	e9 a9 00 00 00       	jmp    f01336cd <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0133624:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133628:	74 06                	je     f0133630 <insert_sorted_with_merge_freeList+0x6ac>
f013362a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013362e:	75 17                	jne    f0133647 <insert_sorted_with_merge_freeList+0x6c3>
f0133630:	83 ec 04             	sub    $0x4,%esp
f0133633:	68 5c da 13 f0       	push   $0xf013da5c
f0133638:	68 73 01 00 00       	push   $0x173
f013363d:	68 e7 d9 13 f0       	push   $0xf013d9e7
f0133642:	e8 be cb fc ff       	call   f0100205 <_panic>
f0133647:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013364a:	8b 10                	mov    (%eax),%edx
f013364c:	8b 45 08             	mov    0x8(%ebp),%eax
f013364f:	89 10                	mov    %edx,(%eax)
f0133651:	8b 45 08             	mov    0x8(%ebp),%eax
f0133654:	8b 00                	mov    (%eax),%eax
f0133656:	85 c0                	test   %eax,%eax
f0133658:	74 0b                	je     f0133665 <insert_sorted_with_merge_freeList+0x6e1>
f013365a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013365d:	8b 00                	mov    (%eax),%eax
f013365f:	8b 55 08             	mov    0x8(%ebp),%edx
f0133662:	89 50 04             	mov    %edx,0x4(%eax)
f0133665:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133668:	8b 55 08             	mov    0x8(%ebp),%edx
f013366b:	89 10                	mov    %edx,(%eax)
f013366d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133670:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133673:	89 50 04             	mov    %edx,0x4(%eax)
f0133676:	8b 45 08             	mov    0x8(%ebp),%eax
f0133679:	8b 00                	mov    (%eax),%eax
f013367b:	85 c0                	test   %eax,%eax
f013367d:	75 08                	jne    f0133687 <insert_sorted_with_merge_freeList+0x703>
f013367f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133682:	a3 68 ad 89 f0       	mov    %eax,0xf089ad68
f0133687:	a1 70 ad 89 f0       	mov    0xf089ad70,%eax
f013368c:	40                   	inc    %eax
f013368d:	a3 70 ad 89 f0       	mov    %eax,0xf089ad70
					break;
f0133692:	eb 39                	jmp    f01336cd <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0133694:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f0133699:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013369c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01336a0:	74 07                	je     f01336a9 <insert_sorted_with_merge_freeList+0x725>
f01336a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01336a5:	8b 00                	mov    (%eax),%eax
f01336a7:	eb 05                	jmp    f01336ae <insert_sorted_with_merge_freeList+0x72a>
f01336a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01336ae:	a3 6c ad 89 f0       	mov    %eax,0xf089ad6c
f01336b3:	a1 6c ad 89 f0       	mov    0xf089ad6c,%eax
f01336b8:	85 c0                	test   %eax,%eax
f01336ba:	0f 85 c7 fb ff ff    	jne    f0133287 <insert_sorted_with_merge_freeList+0x303>
f01336c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01336c4:	0f 85 bd fb ff ff    	jne    f0133287 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01336ca:	eb 01                	jmp    f01336cd <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01336cc:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01336cd:	90                   	nop
f01336ce:	c9                   	leave  
f01336cf:	c3                   	ret    

f01336d0 <__udivdi3>:
f01336d0:	55                   	push   %ebp
f01336d1:	57                   	push   %edi
f01336d2:	56                   	push   %esi
f01336d3:	53                   	push   %ebx
f01336d4:	83 ec 1c             	sub    $0x1c,%esp
f01336d7:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01336db:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01336df:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01336e3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01336e7:	89 ca                	mov    %ecx,%edx
f01336e9:	89 f8                	mov    %edi,%eax
f01336eb:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01336ef:	85 f6                	test   %esi,%esi
f01336f1:	75 2d                	jne    f0133720 <__udivdi3+0x50>
f01336f3:	39 cf                	cmp    %ecx,%edi
f01336f5:	77 65                	ja     f013375c <__udivdi3+0x8c>
f01336f7:	89 fd                	mov    %edi,%ebp
f01336f9:	85 ff                	test   %edi,%edi
f01336fb:	75 0b                	jne    f0133708 <__udivdi3+0x38>
f01336fd:	b8 01 00 00 00       	mov    $0x1,%eax
f0133702:	31 d2                	xor    %edx,%edx
f0133704:	f7 f7                	div    %edi
f0133706:	89 c5                	mov    %eax,%ebp
f0133708:	31 d2                	xor    %edx,%edx
f013370a:	89 c8                	mov    %ecx,%eax
f013370c:	f7 f5                	div    %ebp
f013370e:	89 c1                	mov    %eax,%ecx
f0133710:	89 d8                	mov    %ebx,%eax
f0133712:	f7 f5                	div    %ebp
f0133714:	89 cf                	mov    %ecx,%edi
f0133716:	89 fa                	mov    %edi,%edx
f0133718:	83 c4 1c             	add    $0x1c,%esp
f013371b:	5b                   	pop    %ebx
f013371c:	5e                   	pop    %esi
f013371d:	5f                   	pop    %edi
f013371e:	5d                   	pop    %ebp
f013371f:	c3                   	ret    
f0133720:	39 ce                	cmp    %ecx,%esi
f0133722:	77 28                	ja     f013374c <__udivdi3+0x7c>
f0133724:	0f bd fe             	bsr    %esi,%edi
f0133727:	83 f7 1f             	xor    $0x1f,%edi
f013372a:	75 40                	jne    f013376c <__udivdi3+0x9c>
f013372c:	39 ce                	cmp    %ecx,%esi
f013372e:	72 0a                	jb     f013373a <__udivdi3+0x6a>
f0133730:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133734:	0f 87 9e 00 00 00    	ja     f01337d8 <__udivdi3+0x108>
f013373a:	b8 01 00 00 00       	mov    $0x1,%eax
f013373f:	89 fa                	mov    %edi,%edx
f0133741:	83 c4 1c             	add    $0x1c,%esp
f0133744:	5b                   	pop    %ebx
f0133745:	5e                   	pop    %esi
f0133746:	5f                   	pop    %edi
f0133747:	5d                   	pop    %ebp
f0133748:	c3                   	ret    
f0133749:	8d 76 00             	lea    0x0(%esi),%esi
f013374c:	31 ff                	xor    %edi,%edi
f013374e:	31 c0                	xor    %eax,%eax
f0133750:	89 fa                	mov    %edi,%edx
f0133752:	83 c4 1c             	add    $0x1c,%esp
f0133755:	5b                   	pop    %ebx
f0133756:	5e                   	pop    %esi
f0133757:	5f                   	pop    %edi
f0133758:	5d                   	pop    %ebp
f0133759:	c3                   	ret    
f013375a:	66 90                	xchg   %ax,%ax
f013375c:	89 d8                	mov    %ebx,%eax
f013375e:	f7 f7                	div    %edi
f0133760:	31 ff                	xor    %edi,%edi
f0133762:	89 fa                	mov    %edi,%edx
f0133764:	83 c4 1c             	add    $0x1c,%esp
f0133767:	5b                   	pop    %ebx
f0133768:	5e                   	pop    %esi
f0133769:	5f                   	pop    %edi
f013376a:	5d                   	pop    %ebp
f013376b:	c3                   	ret    
f013376c:	bd 20 00 00 00       	mov    $0x20,%ebp
f0133771:	89 eb                	mov    %ebp,%ebx
f0133773:	29 fb                	sub    %edi,%ebx
f0133775:	89 f9                	mov    %edi,%ecx
f0133777:	d3 e6                	shl    %cl,%esi
f0133779:	89 c5                	mov    %eax,%ebp
f013377b:	88 d9                	mov    %bl,%cl
f013377d:	d3 ed                	shr    %cl,%ebp
f013377f:	89 e9                	mov    %ebp,%ecx
f0133781:	09 f1                	or     %esi,%ecx
f0133783:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0133787:	89 f9                	mov    %edi,%ecx
f0133789:	d3 e0                	shl    %cl,%eax
f013378b:	89 c5                	mov    %eax,%ebp
f013378d:	89 d6                	mov    %edx,%esi
f013378f:	88 d9                	mov    %bl,%cl
f0133791:	d3 ee                	shr    %cl,%esi
f0133793:	89 f9                	mov    %edi,%ecx
f0133795:	d3 e2                	shl    %cl,%edx
f0133797:	8b 44 24 08          	mov    0x8(%esp),%eax
f013379b:	88 d9                	mov    %bl,%cl
f013379d:	d3 e8                	shr    %cl,%eax
f013379f:	09 c2                	or     %eax,%edx
f01337a1:	89 d0                	mov    %edx,%eax
f01337a3:	89 f2                	mov    %esi,%edx
f01337a5:	f7 74 24 0c          	divl   0xc(%esp)
f01337a9:	89 d6                	mov    %edx,%esi
f01337ab:	89 c3                	mov    %eax,%ebx
f01337ad:	f7 e5                	mul    %ebp
f01337af:	39 d6                	cmp    %edx,%esi
f01337b1:	72 19                	jb     f01337cc <__udivdi3+0xfc>
f01337b3:	74 0b                	je     f01337c0 <__udivdi3+0xf0>
f01337b5:	89 d8                	mov    %ebx,%eax
f01337b7:	31 ff                	xor    %edi,%edi
f01337b9:	e9 58 ff ff ff       	jmp    f0133716 <__udivdi3+0x46>
f01337be:	66 90                	xchg   %ax,%ax
f01337c0:	8b 54 24 08          	mov    0x8(%esp),%edx
f01337c4:	89 f9                	mov    %edi,%ecx
f01337c6:	d3 e2                	shl    %cl,%edx
f01337c8:	39 c2                	cmp    %eax,%edx
f01337ca:	73 e9                	jae    f01337b5 <__udivdi3+0xe5>
f01337cc:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01337cf:	31 ff                	xor    %edi,%edi
f01337d1:	e9 40 ff ff ff       	jmp    f0133716 <__udivdi3+0x46>
f01337d6:	66 90                	xchg   %ax,%ax
f01337d8:	31 c0                	xor    %eax,%eax
f01337da:	e9 37 ff ff ff       	jmp    f0133716 <__udivdi3+0x46>
f01337df:	90                   	nop

f01337e0 <__umoddi3>:
f01337e0:	55                   	push   %ebp
f01337e1:	57                   	push   %edi
f01337e2:	56                   	push   %esi
f01337e3:	53                   	push   %ebx
f01337e4:	83 ec 1c             	sub    $0x1c,%esp
f01337e7:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01337eb:	8b 74 24 34          	mov    0x34(%esp),%esi
f01337ef:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01337f3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01337f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01337fb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01337ff:	89 f3                	mov    %esi,%ebx
f0133801:	89 fa                	mov    %edi,%edx
f0133803:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133807:	89 34 24             	mov    %esi,(%esp)
f013380a:	85 c0                	test   %eax,%eax
f013380c:	75 1a                	jne    f0133828 <__umoddi3+0x48>
f013380e:	39 f7                	cmp    %esi,%edi
f0133810:	0f 86 a2 00 00 00    	jbe    f01338b8 <__umoddi3+0xd8>
f0133816:	89 c8                	mov    %ecx,%eax
f0133818:	89 f2                	mov    %esi,%edx
f013381a:	f7 f7                	div    %edi
f013381c:	89 d0                	mov    %edx,%eax
f013381e:	31 d2                	xor    %edx,%edx
f0133820:	83 c4 1c             	add    $0x1c,%esp
f0133823:	5b                   	pop    %ebx
f0133824:	5e                   	pop    %esi
f0133825:	5f                   	pop    %edi
f0133826:	5d                   	pop    %ebp
f0133827:	c3                   	ret    
f0133828:	39 f0                	cmp    %esi,%eax
f013382a:	0f 87 ac 00 00 00    	ja     f01338dc <__umoddi3+0xfc>
f0133830:	0f bd e8             	bsr    %eax,%ebp
f0133833:	83 f5 1f             	xor    $0x1f,%ebp
f0133836:	0f 84 ac 00 00 00    	je     f01338e8 <__umoddi3+0x108>
f013383c:	bf 20 00 00 00       	mov    $0x20,%edi
f0133841:	29 ef                	sub    %ebp,%edi
f0133843:	89 fe                	mov    %edi,%esi
f0133845:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133849:	89 e9                	mov    %ebp,%ecx
f013384b:	d3 e0                	shl    %cl,%eax
f013384d:	89 d7                	mov    %edx,%edi
f013384f:	89 f1                	mov    %esi,%ecx
f0133851:	d3 ef                	shr    %cl,%edi
f0133853:	09 c7                	or     %eax,%edi
f0133855:	89 e9                	mov    %ebp,%ecx
f0133857:	d3 e2                	shl    %cl,%edx
f0133859:	89 14 24             	mov    %edx,(%esp)
f013385c:	89 d8                	mov    %ebx,%eax
f013385e:	d3 e0                	shl    %cl,%eax
f0133860:	89 c2                	mov    %eax,%edx
f0133862:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133866:	d3 e0                	shl    %cl,%eax
f0133868:	89 44 24 04          	mov    %eax,0x4(%esp)
f013386c:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133870:	89 f1                	mov    %esi,%ecx
f0133872:	d3 e8                	shr    %cl,%eax
f0133874:	09 d0                	or     %edx,%eax
f0133876:	d3 eb                	shr    %cl,%ebx
f0133878:	89 da                	mov    %ebx,%edx
f013387a:	f7 f7                	div    %edi
f013387c:	89 d3                	mov    %edx,%ebx
f013387e:	f7 24 24             	mull   (%esp)
f0133881:	89 c6                	mov    %eax,%esi
f0133883:	89 d1                	mov    %edx,%ecx
f0133885:	39 d3                	cmp    %edx,%ebx
f0133887:	0f 82 87 00 00 00    	jb     f0133914 <__umoddi3+0x134>
f013388d:	0f 84 91 00 00 00    	je     f0133924 <__umoddi3+0x144>
f0133893:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133897:	29 f2                	sub    %esi,%edx
f0133899:	19 cb                	sbb    %ecx,%ebx
f013389b:	89 d8                	mov    %ebx,%eax
f013389d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01338a1:	d3 e0                	shl    %cl,%eax
f01338a3:	89 e9                	mov    %ebp,%ecx
f01338a5:	d3 ea                	shr    %cl,%edx
f01338a7:	09 d0                	or     %edx,%eax
f01338a9:	89 e9                	mov    %ebp,%ecx
f01338ab:	d3 eb                	shr    %cl,%ebx
f01338ad:	89 da                	mov    %ebx,%edx
f01338af:	83 c4 1c             	add    $0x1c,%esp
f01338b2:	5b                   	pop    %ebx
f01338b3:	5e                   	pop    %esi
f01338b4:	5f                   	pop    %edi
f01338b5:	5d                   	pop    %ebp
f01338b6:	c3                   	ret    
f01338b7:	90                   	nop
f01338b8:	89 fd                	mov    %edi,%ebp
f01338ba:	85 ff                	test   %edi,%edi
f01338bc:	75 0b                	jne    f01338c9 <__umoddi3+0xe9>
f01338be:	b8 01 00 00 00       	mov    $0x1,%eax
f01338c3:	31 d2                	xor    %edx,%edx
f01338c5:	f7 f7                	div    %edi
f01338c7:	89 c5                	mov    %eax,%ebp
f01338c9:	89 f0                	mov    %esi,%eax
f01338cb:	31 d2                	xor    %edx,%edx
f01338cd:	f7 f5                	div    %ebp
f01338cf:	89 c8                	mov    %ecx,%eax
f01338d1:	f7 f5                	div    %ebp
f01338d3:	89 d0                	mov    %edx,%eax
f01338d5:	e9 44 ff ff ff       	jmp    f013381e <__umoddi3+0x3e>
f01338da:	66 90                	xchg   %ax,%ax
f01338dc:	89 c8                	mov    %ecx,%eax
f01338de:	89 f2                	mov    %esi,%edx
f01338e0:	83 c4 1c             	add    $0x1c,%esp
f01338e3:	5b                   	pop    %ebx
f01338e4:	5e                   	pop    %esi
f01338e5:	5f                   	pop    %edi
f01338e6:	5d                   	pop    %ebp
f01338e7:	c3                   	ret    
f01338e8:	3b 04 24             	cmp    (%esp),%eax
f01338eb:	72 06                	jb     f01338f3 <__umoddi3+0x113>
f01338ed:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01338f1:	77 0f                	ja     f0133902 <__umoddi3+0x122>
f01338f3:	89 f2                	mov    %esi,%edx
f01338f5:	29 f9                	sub    %edi,%ecx
f01338f7:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01338fb:	89 14 24             	mov    %edx,(%esp)
f01338fe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133902:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133906:	8b 14 24             	mov    (%esp),%edx
f0133909:	83 c4 1c             	add    $0x1c,%esp
f013390c:	5b                   	pop    %ebx
f013390d:	5e                   	pop    %esi
f013390e:	5f                   	pop    %edi
f013390f:	5d                   	pop    %ebp
f0133910:	c3                   	ret    
f0133911:	8d 76 00             	lea    0x0(%esi),%esi
f0133914:	2b 04 24             	sub    (%esp),%eax
f0133917:	19 fa                	sbb    %edi,%edx
f0133919:	89 d1                	mov    %edx,%ecx
f013391b:	89 c6                	mov    %eax,%esi
f013391d:	e9 71 ff ff ff       	jmp    f0133893 <__umoddi3+0xb3>
f0133922:	66 90                	xchg   %ax,%ax
f0133924:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133928:	72 ea                	jb     f0133914 <__umoddi3+0x134>
f013392a:	89 d9                	mov    %ebx,%ecx
f013392c:	e9 62 ff ff ff       	jmp    f0133893 <__umoddi3+0xb3>
